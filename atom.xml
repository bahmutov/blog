<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Better world by better software</title>
  
  <subtitle>Gleb Bahmutov PhD</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://glebbahmutov.com/blog/"/>
  <updated>2021-11-20T22:26:00.028Z</updated>
  <id>https://glebbahmutov.com/blog/</id>
  
  <author>
    <name>Gleb Bahmutov</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Functional Helpers For Cypress Tests</title>
    <link href="https://glebbahmutov.com/blog/fp-cy-helpers/"/>
    <id>https://glebbahmutov.com/blog/fp-cy-helpers/</id>
    <published>2021-11-20T05:00:00.000Z</published>
    <updated>2021-11-20T22:26:00.028Z</updated>
    
    <content type="html"><![CDATA[<p>This blog post will teach you how to write short and expressive Cypress tests using a library of tiny functional utilities <a href="https://github.com/bahmutov/cypress-should-really">cypress-should-really</a>. Using this library you will be able to also write single functional callbacks to take advantage of Cypress built-in <a href="https://on.cypress.io/retry-ability">command retry-ability</a>.</p><!-- toc --><ul><li><a href="#the-sorted-table">The sorted table</a></li><li><a href="#the-first-test">The first test</a></li><li><a href="#chai-sorted">chai-sorted</a></li><li><a href="#the-problem">The problem</a></li><li><a href="#callback-function-as-assertion">Callback function as assertion</a></li><li><a href="#mapping-and-invoking">Mapping and invoking</a></li><li><a href="#assertion-function">Assertion function</a></li><li><a href="#reusing-pipes">Reusing pipes</a></li><li><a href="#aside-a-better-solution">Aside: a better solution</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><h2><span id="the-sorted-table">The sorted table</span></h2><p>Imagine you have a table that can be sorted by a column. You can find such application (which is really just a static HTML file) at <a href="https://github.com/bahmutov/sorted-table-example">bahmutov/sorted-table-example</a>. The table gets sorted when you click a button, but there is a slight delay between the click and the page update as the application is &quot;crunching some numbers&quot;.</p><p><img src="../images/fp-cy-helpers/table.gif" alt="Sorting the table by clicking the buttons"></p><h2><span id="the-first-test">The first test</span></h2><p>How would you confirm the table is really sorted using a Cypress test? First, let&#39;s confirm it is NOT sorted. Let&#39;s get all date cells using CSS <code>nth-child</code> selector.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;app/table.html&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;is not sorted at first&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We can confirm the test picks the right cells by hovering over the command in the Cypress Command Log.</p><p><img src="../images/fp-cy-helpers/date-cells.png" alt="We got the right page elements"></p><p>We need to extract the text from each cell, convert the <code>YYYY-MM-DD</code> strings into Date objects, then to timestamps, then check if the timestamp numbers are not sorted. Each step can be done using a separate <a href="https://on.cypress.io/then">cy.then</a> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">$cells</span>) =&gt;</span> Cypress._.map($cells, <span class="string">&#x27;innerText&#x27;</span>))</span><br><span class="line">  .then(<span class="function">(<span class="params">strings</span>) =&gt;</span> Cypress._.map(strings, <span class="function">(<span class="params">s</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>(s)))</span><br><span class="line">  .then(<span class="function">(<span class="params">dates</span>) =&gt;</span> Cypress._.map(dates, <span class="function">(<span class="params">d</span>) =&gt;</span> d.getTime()))</span><br><span class="line">  .then(<span class="function">(<span class="params">timestamps</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// check if the numbers are sorted by comparing to the sorted array</span></span><br><span class="line">    <span class="keyword">const</span> sorted = Cypress._.sortBy(timestamps)</span><br><span class="line">    expect(timestamps).to.not.deep.equal(sorted)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Ughh, ok. Does it work? Yes - it confirms the timestamps are not sorted on the initial page. Just in case, let&#39;s look at the last assertion in the DevTools console.</p><p><img src="../images/fp-cy-helpers/last-assertion.png" alt="Last assertion prints the arrays when we click it"></p><h2><span id="chai-sorted">chai-sorted</span></h2><p>I believe readable tests are better than unreadable tests. Thus I love using additional Chai plugins to make the assertions clearly express what the test is trying to confirm. Thus I will use <a href="https://www.chaijs.com/plugins/chai-sorted/">chai-sorted</a> plugin in this test.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D chai-sorted</span><br><span class="line">+ chai-sorted@0.2.0</span><br></pre></td></tr></table></figure><p>I will change the last assertion to <code>should(&#39;not.be.sorted&#39;)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">$cells</span>) =&gt;</span> Cypress._.map($cells, <span class="string">&#x27;innerText&#x27;</span>))</span><br><span class="line">  .then(<span class="function">(<span class="params">strings</span>) =&gt;</span> Cypress._.map(strings, <span class="function">(<span class="params">s</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>(s)))</span><br><span class="line">  .then(<span class="function">(<span class="params">dates</span>) =&gt;</span> Cypress._.map(dates, <span class="function">(<span class="params">d</span>) =&gt;</span> d.getTime()))</span><br><span class="line">  .should(<span class="string">&#x27;not.be.sorted&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/fp-cy-helpers/not-sorted.png" alt="Using chai-sorted assertion"></p><h2><span id="the-problem">The problem</span></h2><p>Let&#39;s click on the &quot;Sort by date&quot; button and check if the table gets sorted. We can copy the above commands into the new test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;gets sorted by date&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sort by date&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">$cells</span>) =&gt;</span> Cypress._.map($cells, <span class="string">&#x27;innerText&#x27;</span>))</span><br><span class="line">    .then(<span class="function">(<span class="params">strings</span>) =&gt;</span> Cypress._.map(strings, <span class="function">(<span class="params">s</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>(s)))</span><br><span class="line">    .then(<span class="function">(<span class="params">dates</span>) =&gt;</span> Cypress._.map(dates, <span class="function">(<span class="params">d</span>) =&gt;</span> d.getTime()))</span><br><span class="line">    .should(<span class="string">&#x27;be.ascending&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Ughh, the test fails</p><p><img src="../images/fp-cy-helpers/problem.png" alt="The sorted by date test fails"></p><p>Our test fails miserably - it does not even wait for the table to be sorted after the click. If we add a three second delay between the click and the check, the test passes.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sort by date&#x27;</span>).click().wait(<span class="number">3000</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="../images/fp-cy-helpers/sorted-after-wait.gif" alt="Adding 3 second wait fixes the test"></p><p>Of course, we do not want to use a hard-coded wait, we want the test to retry getting the DOM elements, convert them into timestamps, and check if the suddenly are sorted. Why isn&#39;t this happening?</p><p>Cypress only retries certain commands, like querying ones <code>cy.get</code>, <code>cy.contains</code>, <code>cy.its</code>. It does not retry the commands that generally have side-effects, like <code>cy.click</code>, <code>cy.task</code>, or <code>cy.then</code>. Cypress also retries only <em>the current command</em> with its assertions. It does not go &quot;back&quot; along the chain of commands, even if those commands are safe to retry normally. This is why the <a href="https://on.cypress.io/retry-ability">retry-ability</a> guide suggests merging multiple <code>cy.get</code> commands into one, or mixing commands and assertions.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// might be flaky, only the last command</span></span><br><span class="line"><span class="comment">// &quot;.find(&#x27;td:nth-child(2)&#x27;)&quot; is going to be retried</span></span><br><span class="line">cy.get(<span class="string">&#x27;table&#x27;</span>)</span><br><span class="line">  .find(<span class="string">&#x27;tbody&#x27;</span>)</span><br><span class="line">  .find(<span class="string">&#x27;td:nth-child(2)&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment">// BEST PRACTICE 👍</span></span><br><span class="line"><span class="comment">// use a single query with an assertion</span></span><br><span class="line">cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>In our case, the assertion is at the end of the long of chain of <code>cy.then</code> commands, and the execution never tries to get the table cells again. If we want to retry querying the page using the <code>cy.get(&#39;tbody td:nth-child(2)&#39;)</code> command, we need to somehow add the <code>should(&#39;be.ascending&#39;)</code> assertion to the <code>cy.get</code> command. Hmm, how can we do this?</p><h2><span id="callback-function-as-assertion">Callback function as assertion</span></h2><p>By passing a callback function to the <code>should(callback)</code> assertion. Inside the callback function we can use code to transform the elements returned by the <code>cy.get</code> command before checking if they are sorted. Here is the test where I moved all individual steps into the <code>should(callback)</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;gets sorted by date&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sort by date&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="comment">// use a callback function as an assertion</span></span><br><span class="line">    .and(<span class="function">(<span class="params">$cells</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> strings = Cypress._.map($cells, <span class="string">&#x27;innerText&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> dates = Cypress._.map(strings, <span class="function">(<span class="params">s</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>(s))</span><br><span class="line">      <span class="keyword">const</span> timestamps = Cypress._.map(dates, <span class="function">(<span class="params">d</span>) =&gt;</span> d.getTime())</span><br><span class="line">      expect(timestamps).to.be.ascending</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above code retries calling the <code>cy.get</code> command while the callback callback throws an error in the <code>expect(timestamps).to.be.ascending</code> line.</p><p><img src="../images/fp-cy-helpers/single-callback.gif" alt="The test retries getting the table cells"></p><p>Nice - yet the test is less readable than before :( Luckily, we can rewrite the code in the callback function to be much clearer using a few helpers from <a href="https://github.com/bahmutov/cypress-should-really">cypress-should-really</a> NPM module.</p><h2><span id="mapping-and-invoking">Mapping and invoking</span></h2><p>If you look at the <code>.and($cells)</code> function, it does the same common things again and again: mapping a list of values into another list, constructing Date objects, and invoking methods on each object. Right now we are using <a href="https://lodash.com/docs">Lodash</a> library that is bundled with Cypress to map jQuery object, etc. While Lodash is good, other libraries do a much better job of allowing you to compose common data transformations. We could use <a href="https://ramdajs.com/">Ramda</a> but even that excellent library can have rough edges while working with a mixture of plain and jQuery objects. This is why I wrote <a href="https://github.com/bahmutov/cypress-should-really">cypress-should-really</a> and plan to expand it in the future if I find I need some other little utility to make the tests simpler to write. Let&#39;s see it in action.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress-should-really</span><br><span class="line">+ cypress-should-really@1.0.0</span><br></pre></td></tr></table></figure><p>First, let&#39;s rewrite our initial test using <code>map</code> helper.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BEFORE</span></span><br><span class="line">it(<span class="string">&#x27;is not sorted at first&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">$cells</span>) =&gt;</span> Cypress._.map($cells, <span class="string">&#x27;innerText&#x27;</span>))</span><br><span class="line">    .then(<span class="function">(<span class="params">strings</span>) =&gt;</span> Cypress._.map(strings, <span class="function">(<span class="params">s</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>(s)))</span><br><span class="line">    .then(<span class="function">(<span class="params">dates</span>) =&gt;</span> Cypress._.map(dates, <span class="function">(<span class="params">d</span>) =&gt;</span> d.getTime()))</span><br><span class="line">    .should(<span class="string">&#x27;not.be.sorted&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// AFTER</span></span><br><span class="line"><span class="keyword">import</span> &#123; invoke, map, toDate &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-should-really&#x27;</span></span><br><span class="line">it(<span class="string">&#x27;is not sorted at first&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">    .then(map(<span class="string">&#x27;innerText&#x27;</span>))</span><br><span class="line">    .then(map(toDate))</span><br><span class="line">    .then(invoke(<span class="string">&#x27;getTime&#x27;</span>))</span><br><span class="line">    .should(<span class="string">&#x27;not.be.sorted&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Utilities like <code>map</code> and <code>invoke</code> are optimized for <a href="/blog/point-free-programming-is-not-pointless/" title="point-free programming">point-free programming</a>, they return a function that is waiting for the data to be yielded by the Cypress command; the data is typically a jQuery object yielded by <code>cy.get</code> command, or an Array yielded by the previous <code>cy.then</code> command. I hope the test is readable:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.then(map(<span class="string">&#x27;innerText&#x27;</span>))   <span class="comment">// extract property &quot;innerText&quot; from each object</span></span><br><span class="line">.then(map(toDate))        <span class="comment">// call function &quot;toDate&quot; with each item</span></span><br><span class="line">.then(invoke(<span class="string">&#x27;getTime&#x27;</span>))  <span class="comment">// invoke method &quot;getTime&quot; on each object</span></span><br></pre></td></tr></table></figure><p>But using individual steps inside <code>cy.then</code> is going to cause the problem, because they are not retried. We need to use the helpers inside the assertion callback function. Luckily <a href="https://github.com/bahmutov/cypress-should-really">cypress-should-really</a> has a few trick to help with constructing the single assertion callback too!</p><h2><span id="assertion-function">Assertion function</span></h2><p>Let&#39;s rewrite our retry-able assertion function using the helpers.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;gets sorted by date&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sort by date&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="comment">// use a callback function as an assertion</span></span><br><span class="line">    .and(<span class="function">(<span class="params">$cells</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> strings = map(<span class="string">&#x27;innerText&#x27;</span>)($cells)</span><br><span class="line">      <span class="keyword">const</span> dates = map(toDate)(strings)</span><br><span class="line">      <span class="keyword">const</span> timestamps = invoke(<span class="string">&#x27;getTime&#x27;</span>)(dates)</span><br><span class="line">      expect(timestamps).to.be.ascending</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes like before. Let&#39;s eliminate all temporary variables like <code>strings</code>, <code>dates</code>, and <code>timestamps</code> - after all, they are used <em>once</em> just to pass the result to the next line.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sort by date&#x27;</span>).click()</span><br><span class="line">cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>).should(<span class="function">(<span class="params">$cells</span>) =&gt;</span> &#123;</span><br><span class="line">  expect(</span><br><span class="line">    invoke(<span class="string">&#x27;getTime&#x27;</span>)(</span><br><span class="line">      map(toDate)(</span><br><span class="line">        map(<span class="string">&#x27;innerText&#x27;</span>)(</span><br><span class="line">          $cells</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  ).to.be.ascending</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Notice the interesting thing: inside the <code>expect</code> we have a function calling another function, that calls another function, with the argument <code>$cells</code>. Each function is pure, just takes the input and produces output value. Thus these 3 functions can be combined into an equivalent single function to be called with <code>$cells</code> argument. We have a little helper to do just that in <a href="https://github.com/bahmutov/cypress-should-really">cypress-should-really</a> called <code>pipe</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; invoke, map, toDate, pipe &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-should-really&#x27;</span></span><br><span class="line">cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sort by date&#x27;</span>).click()</span><br><span class="line">cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>).should(<span class="function">(<span class="params">$cells</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// pipe: the data will first go through the &quot;map(&#x27;innerText&#x27;)&quot; step,</span></span><br><span class="line">  <span class="comment">// then through &quot;map(toDate)&quot; step, finally through the &quot;invoke(&#x27;getTime&#x27;)&quot;</span></span><br><span class="line">  <span class="keyword">const</span> fn = pipe(map(<span class="string">&#x27;innerText&#x27;</span>), map(toDate), invoke(<span class="string">&#x27;getTime&#x27;</span>))</span><br><span class="line">  expect(fn($cells)).to.be.ascending</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>🎓 I have made a few presentations about the above functional way of writing JavaScript, find the slide decks at <a href="https://slides.com/bahmutov/decks/functional">slides.com/bahmutov/decks/functional</a>.</p></blockquote><p>The function <code>fn</code> constructed above is sitting, waiting for data. Once the data is passed in, the <code>fn($cells)</code> is computed and passed to the assertion <code>expect(...).to ...</code> for evaluation.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = pipe(map(<span class="string">&#x27;innerText&#x27;</span>), map(toDate), invoke(<span class="string">&#x27;getTime&#x27;</span>))</span><br><span class="line">expect(fn($cells)).to.be.ascending</span><br></pre></td></tr></table></figure><p>Piping the data through a series of functions to be fed to the assertion <code>expect(...).to Chai chainer</code> is so common, that <a href="https://github.com/bahmutov/cypress-should-really">cypress-should-really</a> has a ... helper for this. If you want to transform the data and run it through a Chai assertion use <code>really</code> function. It construct a <code>should(callback)</code> for you:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; invoke, map, toDate, pipe, really &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-should-really&#x27;</span></span><br><span class="line">it(<span class="string">&#x27;gets sorted by date: really&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sort by date&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>).should(</span><br><span class="line">    really(map(<span class="string">&#x27;innerText&#x27;</span>), map(toDate), invoke(<span class="string">&#x27;getTime&#x27;</span>), <span class="string">&#x27;be.ascending&#x27;</span>),</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If you have any arguments for the assertion, place it after the chainer string. The same test can be written as</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sort by date&#x27;</span>).click()</span><br><span class="line">cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>).should(</span><br><span class="line">  really(</span><br><span class="line">    map(<span class="string">&#x27;innerText&#x27;</span>), map(toDate), invoke(<span class="string">&#x27;getTime&#x27;</span>), <span class="string">&#x27;be.sorted&#x27;</span>, &#123; <span class="attr">descending</span>: <span class="literal">false</span>, &#125;</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="../images/fp-cy-helpers/arguments.gif" alt="The tests asserts the column is really sorted"></p><h2><span id="reusing-pipes">Reusing pipes</span></h2><p>The application can sort the table in ascending and descending order. To avoid code duplication, just store the <code>pipe(step1, step2, ...)</code> function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// use functional utilities from this NPM library</span></span><br><span class="line"><span class="comment">// https://github.com/bahmutov/cypress-should-really</span></span><br><span class="line"><span class="keyword">import</span> &#123; invoke, map, toDate, pipe, really &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-should-really&#x27;</span></span><br><span class="line">it(<span class="string">&#x27;sorts twice&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// reusable data transformation function</span></span><br><span class="line">  <span class="keyword">const</span> fn = pipe(map(<span class="string">&#x27;innerText&#x27;</span>), map(toDate), invoke(<span class="string">&#x27;getTime&#x27;</span>))</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sort by date&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>).should(really(fn, <span class="string">&#x27;be.ascending&#x27;</span>))</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Reverse sort&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>).should(really(fn, <span class="string">&#x27;be.descending&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/fp-cy-helpers/sort-twice.gif" alt="Checking the sorted order twice using the same data transformation pipe"></p><h2><span id="aside-a-better-solution">Aside: a better solution</span></h2><p>In my opinion, the application should indicate somehow that it has received the user click and it is doing something with the table. For example, the application can disable the buttons and only enable them after the table has finished sorting.</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disableButtons</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;sort-by-date&#x27;</span>).setAttribute(<span class="string">&#x27;disabled&#x27;</span>, <span class="string">&#x27;disabled&#x27;</span>)</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;sort-reverse&#x27;</span>).setAttribute(<span class="string">&#x27;disabled&#x27;</span>, <span class="string">&#x27;disabled&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enableButtons</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;sort-by-date&#x27;</span>).removeAttribute(<span class="string">&#x27;disabled&#x27;</span>)</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;sort-reverse&#x27;</span>).removeAttribute(<span class="string">&#x27;disabled&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;sort-by-date&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  disableButtons()</span><br><span class="line">  <span class="comment">// sort the table after some random interval</span></span><br><span class="line">  ...</span><br><span class="line">  enableButtons()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>This would make the tests <em>much</em> simpler to write without accidental flake.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// use functional utilities from this NPM library</span></span><br><span class="line"><span class="comment">// https://github.com/bahmutov/cypress-should-really</span></span><br><span class="line"><span class="keyword">import</span> &#123; invoke, map, toDate, pipe, really &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-should-really&#x27;</span></span><br><span class="line">it(<span class="string">&#x27;uses disabled attribute&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// reusable data transformation function</span></span><br><span class="line">  <span class="keyword">const</span> fn = pipe(map(<span class="string">&#x27;innerText&#x27;</span>), map(toDate), invoke(<span class="string">&#x27;getTime&#x27;</span>))</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sort by date&#x27;</span>).click().should(<span class="string">&#x27;not.be.disabled&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>).then(really(fn, <span class="string">&#x27;be.ascending&#x27;</span>))</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Reverse sort&#x27;</span>).click().should(<span class="string">&#x27;not.be.disabled&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>).then(really(fn, <span class="string">&#x27;be.descending&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Notice the above test is using built-in retry via <code>.should(&#39;not.be.disabled&#39;)</code> which applies to the button yielded by the previous command. Once the button is enabled, we can simply check once if the table has been sorted already. We do not even need the <code>.should(callback)</code> and instead we apply our pipe transformation using <code>.then(callback)</code> that only is executed once.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sort by date&#x27;</span>).click().should(<span class="string">&#x27;not.be.disabled&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>).then(really(fn, <span class="string">&#x27;be.ascending&#x27;</span>))</span><br></pre></td></tr></table></figure><p>It all works beautifully</p><p><img src="../images/fp-cy-helpers/using-disabled.gif" alt="Relying on the disabled attribute to signal when the table is ready to be checked"></p><p>Nice!</p><blockquote class="pullquote"><p>🎁 Find the example application and the shown tests at [bahmutov/sorted-table-example][example]</p></blockquote><h2><span id="see-also">See also</span></h2><ul><li>video <a href="https://www.youtube.com/watch?v=y5ujNKkmgI8">Cypress.io Testing a Paginated Table Example</a></li><li>video <a href="https://youtu.be/Ke5Pf6IISn8">Use cypress-recurse Plugin To Confirm The Table Gets Sorted Eventually</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This blog post will teach you how to write short and expressive Cypress tests using a library of tiny functional utilities &lt;a href=&quot;https
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="functional" scheme="https://glebbahmutov.com/blog/tags/functional/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Create Custom Assertions For Test Readability</title>
    <link href="https://glebbahmutov.com/blog/custom-assertions/"/>
    <id>https://glebbahmutov.com/blog/custom-assertions/</id>
    <published>2021-11-17T05:00:00.000Z</published>
    <updated>2021-11-17T14:13:25.375Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#application">Application</a></li><li><a href="#haveattr-gotcha">have.attr gotcha</a></li><li><a href="#workarounds">Workarounds</a></li><li><a href="#custom-assertion">Custom assertion</a></li><li><a href="#types">Types</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><h2><span id="application">Application</span></h2><p>Let&#39;s take an example page in the repo <a href="https://github.com/bahmutov/cypress-assertion-example">bahmutov/cypress-assertion-example</a>. It has a list with a few items.</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">list-style</span>: square;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-tag">li</span><span class="selector-attr">[data-test-id]</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>List<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;data-attributes&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-test-id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>first<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>second<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can confirm that the list element has the ID attribute equal to &quot;data-attributes&quot;.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;list&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  it(<span class="string">&#x27;has ID&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.get(<span class="string">&#x27;ul&#x27;</span>).should(<span class="string">&#x27;have.id&#x27;</span>, <span class="string">&#x27;data-attributes&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/custom-assertions/have-id.png" alt="The list element has the expected ID"></p><p>We can also confirm other properties, like the list style CSS.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;has ID&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.id&#x27;</span>, <span class="string">&#x27;data-attributes&#x27;</span>)</span><br><span class="line">    <span class="comment">// note: you need to use the computed CSS style value</span></span><br><span class="line">    .and(<span class="string">&#x27;have.css&#x27;</span>, <span class="string">&#x27;list-style&#x27;</span>, <span class="string">&#x27;outside none square&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Both assertions <code>.should(&#39;have.id&#39;, &#39;data-attributes&#39;)</code> and <code>.and(&#39;have.css&#39;, &#39;list-style&#39;, &#39;outside none square&#39;)</code> refer to the same <code>&lt;UL&gt;</code> element yielded by the previous <code>cy.get(&#39;ul&#39;)</code> command. We can hover over the assertions to confirm this - Cypress shows the DOM snapshot at that moment and highlights the current element.</p><p><img src="../images/custom-assertions/element.png" alt="Both assertions check the UL element"></p><h2><span id="haveattr-gotcha">have.attr gotcha</span></h2><p>Now let&#39;s write a test to confirm the properties of the first <code>&lt;LI&gt;</code> element.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">context(<span class="string">&#x27;item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;has test id data attribute&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.contains(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;data-test-id&#x27;</span>, <span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">      <span class="comment">// note: you need to use the computed CSS style value</span></span><br><span class="line">      .and(<span class="string">&#x27;have.css&#x27;</span>, <span class="string">&#x27;font-weight&#x27;</span>, <span class="string">&#x27;700&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes - we do have an <code>&lt;LI&gt;</code> element with text &quot;first&quot; with the data attribute &quot;data-test-id=first&quot; and a bold font.</p><p><img src="../images/custom-assertions/li.png" alt="Confirm the first LI element has the expected data attribute and font weight"></p><p>Great, but what if we do not know the expected <code>data-test-id</code> value? We can change the <code>.should(&#39;have.attr&#39;, &#39;data-test-id&#39;, &#39;first&#39;)</code> and remove the last argument to only confirm tha the element has a <code>data-test-id</code> attribute, with any value.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">context(<span class="string">&#x27;item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;has test id data attribute&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.contains(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;data-test-id&#x27;</span>)</span><br><span class="line">      <span class="comment">// note: you need to use the computed CSS style value</span></span><br><span class="line">      .and(<span class="string">&#x27;have.css&#x27;</span>, <span class="string">&#x27;font-weight&#x27;</span>, <span class="string">&#x27;700&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Suddenly, the test fails.</p><p><img src="../images/custom-assertions/fails.png" alt="The test fails after we relax the first assertion"></p><p>The error message explains that the &quot;have.css&quot; assertion expected an element, but instead received &quot;first&quot; subject. What is this about?</p><p>Typically, all Cypress assertions (which are Chai + Chai-jQuery + Chai-Sinon) keep the original subject. This makes it easy to chain multiple assertions to the same subject to confirm all its properties.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line">  <span class="comment">// first assertion against &lt;UL&gt;</span></span><br><span class="line">  .should(<span class="string">&#x27;have.id&#x27;</span>, <span class="string">&#x27;data-attributes&#x27;</span>)</span><br><span class="line">  <span class="comment">// second assertion against &lt;UL&gt;</span></span><br><span class="line">  .and(<span class="string">&#x27;have.css&#x27;</span>, <span class="string">&#x27;list-style&#x27;</span>, <span class="string">&#x27;outside none square&#x27;</span>)</span><br><span class="line">  <span class="comment">// maybe more assertions against &lt;UL&gt;</span></span><br></pre></td></tr></table></figure><p>The assertion <code>.should(&#39;have.attr&#39;, &#39;data-test-id&#39;, &#39;first&#39;)</code> that confirms the value is the same way. BUT if you remove the expected value and use the single argument version &quot;have.attr data-test-id&quot; form, then the assertion <em>changes</em> the subject and yields the attribute&#39;s value. Only very few assertions change the subject like this, assertions like &quot;have.prop&quot;, &quot;have.attr&quot;. The reasoning being that IF you do not know the expected value, you probably want to validate the value down the line. For example, you can check if the attribute is a lowercase string.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cy.contains(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;data-test-id&#x27;</span>)</span><br><span class="line">  <span class="comment">// validate the property is a lowercase string</span></span><br><span class="line">  .should(<span class="string">&#x27;be.a&#x27;</span>, <span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">  .and(<span class="string">&#x27;match&#x27;</span>, <span class="regexp">/^[a-z]+$/</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/custom-assertions/lowercase.png" alt="Validate the attribute value"></p><h2><span id="workarounds">Workarounds</span></h2><p>In our original case we have multiple assertions that need the original element. You can get the element again:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;has some test id data attribute&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.contains(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>).should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;data-test-id&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">    <span class="comment">// note: you need to use the computed CSS style value</span></span><br><span class="line">    .should(<span class="string">&#x27;have.css&#x27;</span>, <span class="string">&#x27;font-weight&#x27;</span>, <span class="string">&#x27;700&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/custom-assertions/two.png" alt="Get the element again to add another assertion"></p><p>The above test splits the commands, which might go against the <a href="https://on.cypress.io/retry-ability">retry-ability</a> best practices. Thus I would use <a href="https://glebbahmutov.com/cypress-examples/commands/assertions.html">.should(callback)</a> to write this test</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;has some test id and CSS&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.contains(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>).should(<span class="function">(<span class="params">$li</span>) =&gt;</span> &#123;</span><br><span class="line">    expect($li).to.have.attr(<span class="string">&#x27;data-test-id&#x27;</span>)</span><br><span class="line">    expect($li).to.have.css(<span class="string">&#x27;font-weight&#x27;</span>, <span class="string">&#x27;700&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="custom-assertion">Custom assertion</span></h2><p>Finally, another solution is to write your own assertion for clarity, and it is much simpler than it seems. In the support file, call the global function <code>chai</code> to extend the assertions</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chai.use(<span class="function">(<span class="params">_chai</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">testId</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// to be filled</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _chai.Assertion.addMethod(<span class="string">&#x27;testId&#x27;</span>, testId)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let&#39;s call our assertion &quot;testId&quot; and it will check if the given subject has &quot;data-test-id&quot; attribute. If the assertion call gives a value, then our assertion should check if the &quot;data-test-id&quot; attribute has that exact value. Here is the complete code:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">chai.use(<span class="function">(<span class="params">_chai</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// use &quot;function&quot; syntax to make sure when Chai</span></span><br><span class="line">  <span class="comment">// calls it, the &quot;this&quot; object points at Chai</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">testId</span>(<span class="params">expectedValue</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> attr = <span class="string">&#x27;data-test-id&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (expectedValue) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = <span class="built_in">this</span>._obj.attr(attr)</span><br><span class="line">      <span class="built_in">this</span>.assert(</span><br><span class="line">        value === expectedValue,</span><br><span class="line">        <span class="string">`expected to find data-test-id=&quot;<span class="subst">$&#123;expectedValue&#125;</span>&quot;, found value &quot;<span class="subst">$&#123;value&#125;</span>&quot;`</span>,</span><br><span class="line">      )</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// only confirm the &quot;data-test-id&quot; attribute is present</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.assert(</span><br><span class="line">        <span class="built_in">this</span>._obj.attr(attr) !== <span class="literal">undefined</span>,</span><br><span class="line">        <span class="string">`expected to find data-test-id attribute`</span>,</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  _chai.Assertion.addMethod(<span class="string">&#x27;testId&#x27;</span>, testId)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The support file is loaded before each spec file, thus the assertion &quot;testId&quot; is available in every spec file automatically.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;has some test id and CSS using custom assertion&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.contains(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.testId&#x27;</span>)</span><br><span class="line">    <span class="comment">// our custom &quot;testId&quot; assertion keeps the original subject</span></span><br><span class="line">    .and(<span class="string">&#x27;have.css&#x27;</span>, <span class="string">&#x27;list-style&#x27;</span>, <span class="string">&#x27;outside none square&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We called our assertion using <code>.should(&#39;have.testId&#39;)</code> command. Since we did not pass a value, the test passed because the attribute &quot;data-test-id&quot; was present on the element.</p><p><img src="../images/custom-assertions/assertion1.png" alt="Custom assertion passes"></p><p>Let&#39;s confirm the value of the &quot;data-test-id&quot; attribute. First, let&#39;s try using a wrong expected value to see how the error message looks.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cy.contains(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.testId&#x27;</span>, <span class="string">&#x27;invalid&#x27;</span>)</span><br><span class="line">  <span class="comment">// our custom &quot;testId&quot; assertion keeps the original subject</span></span><br><span class="line">  .and(<span class="string">&#x27;have.css&#x27;</span>, <span class="string">&#x27;list-style&#x27;</span>, <span class="string">&#x27;outside none square&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The test fails with a useful error message, notice the second attached assertion did not even run - because the first assertion &quot;have.testId&quot; never passed.</p><p><img src="../images/custom-assertions/wrong.png" alt="Trying incorrect test id value"></p><p>Fix the expected value in the test and watch the test succeed.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;has the expected test id and CSS using custom assertion&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.contains(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.testId&#x27;</span>, <span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">    <span class="comment">// our custom &quot;testId&quot; assertion keeps the original subject</span></span><br><span class="line">    .and(<span class="string">&#x27;have.css&#x27;</span>, <span class="string">&#x27;list-style&#x27;</span>, <span class="string">&#x27;outside none square&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/custom-assertions/pass.png" alt="The test passed with the right values"></p><h2><span id="types">Types</span></h2><p>Cypress comes with TypeScript types, and even the JavaScript specs show intelligent code completion for the built-in assertions, like &quot;have.attr&quot;</p><p><img src="../images/custom-assertions/hover-assertion.png" alt="VSCode shows the documentation for the current assertion"></p><p>But the new custom assertion has no documentation, and VSCode complains that it is unknown.</p><p><img src="../images/custom-assertions/type-error.png" alt="VSCode has no knowledge of the custom assertion"></p><p>To solve this problem, add <code>index.d.ts</code> file to the <code>cypress</code> folder and describe the new assertion.</p><figure class="highlight ts"><figcaption><span>cypress/index.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> Cypress &#123;</span><br><span class="line">  <span class="keyword">interface</span> Chainer&lt;Subject&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Chai assertion that checks if a given element has &quot;data-test-id&quot; attribute.</span></span><br><span class="line"><span class="comment">     * Yields subject.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>testId (optional) expected data-test-id value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment">     *  cy.get(&#x27;#id&#x27;).should(&#x27;have.testId&#x27;)</span></span><br><span class="line"><span class="comment">     *  cy.get(&#x27;#id&#x27;).should(&#x27;have.testId&#x27;, &#x27;first&#x27;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    (chainer: <span class="string">&#x27;have.testId&#x27;</span>, testId?: <span class="built_in">string</span>): Chainable&lt;Subject&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> Chai &#123;</span><br><span class="line">  <span class="keyword">interface</span> Assertion &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Chai assertion that checks if a given element has data-test-id attribute,</span></span><br><span class="line"><span class="comment">     * with optional value check</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>testId (optional) expected data-test-id value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment">     *  expect($el).to.have.testId()</span></span><br><span class="line"><span class="comment">     *  expect($el).to.have.testId(&#x27;first&#x27;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    testId(testId: <span class="built_in">string</span>): <span class="built_in">void</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tell the spec files (using <code>tsconfig.json</code> or <code>jsconfig.json</code> or via <code>reference path</code>) to load the <code>cypress/index.d.ts</code> file and enjoy the intelligent code completion in your custom assertions.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path=&quot;../index.d.ts&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-check</span></span><br></pre></td></tr></table></figure><p><img src="../images/custom-assertions/type-works.png" alt="Custom assertion with IntelliSense help"></p><h2><span id="see-also">See also</span></h2><ul><li><a href="https://glebbahmutov.com/cypress-examples/commands/assertions.html">Cypress assertions examples</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#application&quot;&gt;Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#haveattr-gotcha&quot;&gt;have.attr gotcha&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#wor
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Solve Flake In Cypress Typing Into An Input Element</title>
    <link href="https://glebbahmutov.com/blog/flaky-cy-type/"/>
    <id>https://glebbahmutov.com/blog/flaky-cy-type/</id>
    <published>2021-11-16T05:00:00.000Z</published>
    <updated>2021-11-16T13:42:36.946Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine an application that resets the input field on start up. The resets are random but usually happen within the first 200-300 milliseconds. The application code looks something like this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;flaky-input&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">resetText</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;flaky-input&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    input.value = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="comment">// reset the input several times during the first couple of seconds</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">setTimeout</span>(resetText, <span class="number">100</span>)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">setTimeout</span>(resetText, <span class="number">150</span>)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">setTimeout</span>(resetText, <span class="number">200</span>)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">setTimeout</span>(resetText, <span class="number">250</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The Cypress test simply tries to type into the input field.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;is flaky without retries&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> text = <span class="string">&#x27;hello there, friend!&#x27;</span></span><br><span class="line">  cy.get(<span class="string">&#x27;#flaky-input&#x27;</span>).type(text).should(<span class="string">&#x27;have.value&#x27;</span>, text)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test video shows the flaky behavior - the first characters simply disappear.</p><p><img src="../images/flaky-cy-type/flaky-type.gif" alt="The first characters entered by cy.type disappear and the test fails"></p><blockquote class="pullquote"><p>🎁 You can find the above example amongst the test examples in the [bahmutov/cypress-recurse][cypress-recurse] repo.</p></blockquote><h2><span id="workaround-using-cypress-recurse">Workaround using cypress-recurse</span></h2><p>If you are a real user, and you see some of the characters disappear as you type, you would curse, clear the input field, and type the text again. We can do the same using a plugin I wrote <a href="https://github.com/bahmutov/cypress-recurse">cypress-recurse</a>. This plugin performs any provided Cypress commands until the predicate function returns true or the entire command times out. Let&#39;s update our spec to make it flake-free:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; recurse &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-recurse&#x27;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;enters the text correctly&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> text = <span class="string">&#x27;hello there, friend!&#x27;</span></span><br><span class="line"></span><br><span class="line">  recurse(</span><br><span class="line">    <span class="comment">// the commands to repeat, and they yield the input element</span></span><br><span class="line">    () =&gt; cy.get(<span class="string">&#x27;#flaky-input&#x27;</span>).clear().type(text),</span><br><span class="line">    <span class="comment">// the predicate takes the output of the above commands</span></span><br><span class="line">    <span class="comment">// and returns a boolean. If it returns true, the recursion stops</span></span><br><span class="line">    ($input) =&gt; $input.val() === text,</span><br><span class="line">  )</span><br><span class="line">    <span class="comment">// the recursion yields whatever the command function yields</span></span><br><span class="line">    <span class="comment">// and we can confirm that the text was entered correctly</span></span><br><span class="line">    .should(<span class="string">&#x27;have.value&#x27;</span>, text)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The Cypress Command Log shows how the test types in the characters the first time - but then the part of the input disappears. The predicate function <code>($input) =&gt; $input.val() === text</code> returns false. The <code>recurse</code> function then repeats the first act function again, clearing the input and typing the entire string, just like a real user does. On the second attempt, the entire text is preserved, and the predicate function returns true, completing the step.</p><p><img src="../images/flaky-cy-type/cypress-recurse.gif" alt="Cypress-recurse types the entire string again"></p><p>We can control the <code>recurse</code> function through an options object argument. For example, we can delay each iteration and log less information.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">recurse(</span><br><span class="line">  <span class="comment">// the commands to repeat, and they yield the input element</span></span><br><span class="line">  () =&gt; cy.get(<span class="string">&#x27;#flaky-input&#x27;</span>).clear().type(text),</span><br><span class="line">  <span class="comment">// the predicate takes the output of the above commands</span></span><br><span class="line">  <span class="comment">// and returns a boolean. If it returns true, the recursion stops</span></span><br><span class="line">  ($input) =&gt; $input.val() === text,</span><br><span class="line">  &#123;</span><br><span class="line">    log: <span class="literal">false</span>,</span><br><span class="line">    delay: <span class="number">1000</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="../images/flaky-cy-type/recurse-log-less.gif" alt="The test without extra logging"></p><h2><span id="preventing-the-flake">Preventing the flake</span></h2><p>Using the <a href="https://github.com/bahmutov/cypress-recurse">cypress-recurse</a> plugin in this case only works around the application&#39;s behavior. The real user would see the same broken application. It is better to prevent the input until the application is ready. Thus I advise to add a <code>disabled</code> attribute to the input element, and only remove it after the application is ready to process the input without clearing it.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;flaky-input&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">disabled</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">resetText</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;flaky-input&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    input.value = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">enableText</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;flaky-input&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    input.removeAttribute(<span class="string">&#x27;disabled&#x27;</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="comment">// reset the input several times during the first couple of seconds</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">setTimeout</span>(resetText, <span class="number">100</span>)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">setTimeout</span>(resetText, <span class="number">150</span>)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">setTimeout</span>(resetText, <span class="number">200</span>)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">setTimeout</span>(resetText, <span class="number">250</span>)</span></span><br><span class="line"><span class="javascript">  <span class="comment">// enable the input element after the application</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// is truly ready to process the user actions</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">setTimeout</span>(enableText, <span class="number">2000</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The test that uses <code>cypress-recurse</code> still works in this case, but much more important - the original test now works without any flake!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;is waiting for the input element to become enabled&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> text = <span class="string">&#x27;hello there, friend!&#x27;</span></span><br><span class="line">  cy.get(<span class="string">&#x27;#flaky-input&#x27;</span>).type(text).should(<span class="string">&#x27;have.value&#x27;</span>, text)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The <a href="https://on.cypress.io/type">cy.type</a> command simply waits for the input element to be enabled (it is a built-in actionability check) before typing. You can see the input grayed out and the TYPE command waiting for two seconds until it starts typing in the video below.</p><p><img src="../images/flaky-cy-type/disabled.gif" alt="The test without flake"></p><p>If the application does not let the test runner interact with it until it is ready, the flake problem never appears, so that is the best solution in my opinion.</p><h2><span id="videos">Videos</span></h2><p>You can watch me solve the flake using the <a href="https://github.com/bahmutov/cypress-recurse">cypress-recurse</a> plugin in the video below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/aYX7OVqp6AE" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Then watch the video of solving the flake problem for real by disabling the input element until the application is ready to receive the user&#39;s actions.</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/-Jr9vLpa1Ak" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>For more videos like this with Cypress tips and solutions, subscribe to my video channel at <a href="https://www.youtube.com/glebbahmutov">https://www.youtube.com/glebbahmutov</a>.</p><h2><span id="more-information">More information</span></h2><ul><li><a href="https://github.com/bahmutov/cypress-recurse">bahmutov/cypress-recurse</a> repo</li><li>you can find many blog posts I have written showing the solutions to different flaky test situations on <a href="https://www.cypress.io/blog/">Cypress blog</a>, the posts titles start with &quot;When Can The Test ...&quot; and are tagged <a href="https://cypress.io/blog/tag/flake/">Flake</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine an application that resets the input field on start up. The resets are random but usually happen within the first 200-300 millise
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>CircleCI Parallelism As A Parameter</title>
    <link href="https://glebbahmutov.com/blog/parallelism-parameter/"/>
    <id>https://glebbahmutov.com/blog/parallelism-parameter/</id>
    <published>2021-11-11T05:00:00.000Z</published>
    <updated>2021-11-11T17:13:29.425Z</updated>
    
    <content type="html"><![CDATA[<p>Running end-to-end tests takes time. The best way to cut the overall test duration is by running all tests in parallel by launching multiple test machines and splitting all spec files among them. Cypress has <a href="https://on.cypress.io/parallelization">parallelization</a> feature which works especially well when using <a href="https://github.com/cypress-io/circleci-orb">Cypress CircleCI Orb</a>. For example, in the repo <a href="https://github.com/bahmutov/todo-graphql-example">bahmutov/todo-graphql-example</a> I have about 20 spec files and the following CircleCI config file <a href="https://github.com/bahmutov/todo-graphql-example/blob/master/.circleci/config.yml">.circleci/config.yml</a>:</p><figure class="highlight yml"><figcaption><span>.circleci/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="comment"># https://github.com/cypress-io/circleci-orb</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"><span class="attr">executors:</span></span><br><span class="line">  <span class="attr">with-chrome:</span></span><br><span class="line">    <span class="attr">docker:</span></span><br><span class="line">      <span class="comment"># this Docker image is built by the Cypress team</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/cypress-docker-images</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">&#x27;cypress/browsers:node16.5.0-chrome94-ff93&#x27;</span></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="comment"># first get the source code and install npm dependencies</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/install:</span></span><br><span class="line">          <span class="attr">executor:</span> <span class="string">with-chrome</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">requires:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">cypress/install</span></span><br><span class="line">          <span class="attr">executor:</span> <span class="string">with-chrome</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">&#x27;npm run server&#x27;</span> <span class="comment"># start server before running tests</span></span><br><span class="line">          <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:1234&#x27;</span></span><br><span class="line">          <span class="comment"># run all tests using the Chrome browser</span></span><br><span class="line">          <span class="comment"># installed in the executor. I have noticed that Chrome</span></span><br><span class="line">          <span class="comment"># does not crash when running tests for this application</span></span><br><span class="line">          <span class="attr">browser:</span> <span class="string">chrome</span></span><br><span class="line">          <span class="attr">record:</span> <span class="literal">true</span> <span class="comment"># record results on Cypress Dashboard</span></span><br><span class="line">          <span class="attr">parallel:</span> <span class="literal">true</span> <span class="comment"># split all specs across machines</span></span><br><span class="line">          <span class="attr">parallelism:</span> <span class="number">1</span> <span class="comment"># how many CircleCI machines to use</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">&#x27;all tests&#x27;</span> <span class="comment"># name this group &quot;all tests&quot; on the dashboard</span></span><br><span class="line">          <span class="attr">tags:</span> <span class="string">&#x27;circleci&#x27;</span></span><br></pre></td></tr></table></figure><p>All tests run using a single CircleCI machine. First, the install job runs, then the test job uses the workspace with the source code and the installed dependencies to start the application in the background and run the tests.</p><p><img src="../images/parallelism-parameter/workflow.png" alt="CircleCI workflow"></p><p>The Cypress test runner discovers all spec files to run</p><p><img src="../images/parallelism-parameter/start.png" alt="Cypress starts the test run"></p><p>I am using Cypress Dashboard to record the test results. The recorded run shows a single machine executing all 19 specs, from the longest-running to the shortest specs.</p><p><img src="../images/parallelism-parameter/run.png" alt="Cypress Dashboard recorded the run"></p><p>We want to run the tests faster, but how many machines do we need? Let&#39;s click on the &quot;Parallelization Calculator&quot; button to find out.</p><p><img src="../images/parallelism-parameter/calculator.png" alt="Cypress Dashboard has a built-in parallelization calculator"></p><p>Hmm, we could save a lot of time by running the tests on more machines. Should we tweak the <code>parallelism: 1</code> parameter in the <code>cypress/run</code> job? I love flexibility: run the tests on the reasonable number of machines without overpaying, yet be able to use more machines when needed. To provide such flexibility we can configure <em>workflow parameters</em> and make the number of machines to use a parameter.</p><figure class="highlight yml"><figcaption><span>.circleci/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="comment"># https://github.com/cypress-io/circleci-orb</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="comment"># how many test machines to run in parallel?</span></span><br><span class="line">  <span class="attr">PARALLEL_TESTS:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">integer</span></span><br><span class="line">    <span class="attr">default:</span> <span class="number">2</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">    <span class="attr">parallel:</span> <span class="literal">true</span> <span class="comment"># split all specs across machines</span></span><br><span class="line">    <span class="attr">parallelism:</span> <span class="string">&lt;&lt;</span> <span class="string">pipeline.parameters.PARALLEL_TESTS</span> <span class="string">&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>By default, we run two CircleCI machines in parallel, you can see the individual containers inside the &quot;cypress/run&quot; job on CircleCI</p><p><img src="../images/parallelism-parameter/two-machines.png" alt="Two machines running Cypress tests"></p><p>But we can start the workflow manually from the CircleCI web application and provide the workflow parameter <code>PARALLEL_TESTS</code>. Thus whenever you want to work through a lot of tests, I suggest doing the following:</p><ol><li>Make a commit that skips the default CI execution by appending <code>[skip ci]</code> to the commit&#39;s subject message</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --allow-empty -m &quot;will run manually [skip ci]&quot;</span><br><span class="line">[master 4b2b679] will run manually [skip ci]</span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure><ol start="2"><li>Open the CircleCI project page and click &quot;Run Pipeline&quot; button</li></ol><p><img src="../images/parallelism-parameter/run-pipeline.png" alt="Click the Run Pipeline button"></p><ol start="3"><li>A dialog appears. Add an integer parameter &quot;PARALLEL_TESTS&quot; and enter the number of CI machines to spin to run Cypress tests</li></ol><p><img src="../images/parallelism-parameter/enter-parameter.png" alt="Enter the PARALLEL_TESTS number"></p><ol start="4"><li>Click the &quot;Run Pipeline&quot; button and observe the workflow. A single &quot;cypress/install&quot; job will following by the &quot;cypress/run&quot; job that spawns N containers. In my case I see eight containers running the tests.</li></ol><p><img src="../images/parallelism-parameter/eight.png" alt="Eight CI machines are running the end-to-end tests"></p><p>The Cypress Dashboard run shows the eight machines splitting the testing load and finishing in 30 seconds. Nice.</p><p><img src="../images/parallelism-parameter/eight-machines.png" alt="Eight CI machines are split all the tests and finished in 30 seconds"></p><p>The testing time cannot be shortened any more by adding more machines, since it is now limited by the longest-running spec. We could try <a href="/blog/split-spec/" title="splitting the spec file">splitting the spec file</a>. You can also notice that some testing machines joined the test run much later. You could optimize this by using CircleCI RAM disk, as described in my blog post <a href="/blog/circle-ram-disk/" title="Start CircleCI Machines Faster by Using RAM Disk">Start CircleCI Machines Faster by Using RAM Disk</a>.</p><p>The last observation: remember the parallelization calculator from the start of this blog post? It predicted that using 8 machines would finish all tests in 31 seconds. Well, the actual run finished in 32 seconds - so pretty spot on!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Running end-to-end tests takes time. The best way to cut the overall test duration is by running all tests in parallel by launching multi
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="circle" scheme="https://glebbahmutov.com/blog/tags/circle/"/>
    
  </entry>
  
  <entry>
    <title>Test your sitemap using Cypress</title>
    <link href="https://glebbahmutov.com/blog/test-sitemap/"/>
    <id>https://glebbahmutov.com/blog/test-sitemap/</id>
    <published>2021-11-10T05:00:00.000Z</published>
    <updated>2021-11-10T16:36:41.355Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes people ask me how to verify their <code>sitemap.xml</code> files using Cypress tests. While Cypress test runner is not meant for crawling website, it is pretty capable of quickly checking your pages against silly &quot;404: page not found&quot; errors after the deployment.</p><blockquote class="pullquote"><p>🎁 You can find the source code for this blog post in the repo <a href="https://github.com/bahmutov/vuepress-cypress-test-example">bahmutov/vuepress-cypress-test-example</a> which is verifying the site map file <a href="https://vuepress-cypress-test-example.netlify.app/sitemap.xml">https://vuepress-cypress-test-example.netlify.app/sitemap.xml</a></p></blockquote><h2><span id="the-sitemap-resource">The sitemap resource</span></h2><p>When I build the static site, I generate a <code>sitemap.xml</code> file that tells search crawlers about all available pages. A typical sitemap for a small site only has a few page URLs:</p><p><img src="../images/sitemap/sitemap.png" alt="Example sitemap.xml resource"></p><p>We want to check if all URLs listed in the sitemap are working. We need to load the XML resource, parse it, then iterate over the list of URLs. We can simply request each page and check if successfully resolves with HTTP code 200. If the site has JavaScript we probably want to visit each page to make sure it does not throw a JavaScript error. Let&#39;s test it.</p><h2><span id="single-test">Single test</span></h2><p>The first way we can write a Cypress test is inside a single <code>it</code> callback. I will use the <a href="https://on.cypress.io/request">cy.request</a> command to get the <code>sitemap.xml</code> resource, then use the NPM module <a href="https://github.com/abdolence/x2js">x2js</a> to parse XML text into a JavaScript object.</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;fixturesFolder&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;supportFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;https://vuepress-cypress-test-example.netlify.app/&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/integration/sitemap-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> X2JS = <span class="built_in">require</span>(<span class="string">&#x27;x2js&#x27;</span>)</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;sitemap&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;fetches the sitemap.xml&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// https://on.cypress.io/request</span></span><br><span class="line">    cy.request(<span class="string">&#x27;/sitemap.xml&#x27;</span>)</span><br><span class="line">      .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">      .then(<span class="function">(<span class="params">body</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> x2js = <span class="keyword">new</span> X2JS()</span><br><span class="line">        <span class="keyword">const</span> json = x2js.xml2js(body)</span><br><span class="line">        <span class="comment">// get all URLs from the sitemap</span></span><br><span class="line">        expect(json.urlset.url).to.be.an(<span class="string">&#x27;array&#x27;</span>).and.have.length.gt(<span class="number">0</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I like adding assertions in the middle of the test. In the test above, I am verifying the <code>json.urlset.url</code> variable in the middle of the test to confirm we have URLs to visit. We can even click on the assertion to see the list of URLs in the DevTools:</p><p><img src="../images/sitemap/check.png" alt="We parsed the sitemap.xml and have URLs to check"></p><p>Let&#39;s verify each URL. We can check an URL in three ways:</p><ul><li>check if the resource exists by fetching it using the <code>HEAD</code> HTTP method. This saves time by only requesting the resource header, rather than the entire page. The time savings could be substantial, for example requesting the index of my blog takes three times longer compared to just getting the header:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ time http HEAD https:&#x2F;&#x2F;glebbahmutov.com&#x2F;blog&#x2F;</span><br><span class="line">real0m0.398s</span><br><span class="line"></span><br><span class="line">$ time http GET https:&#x2F;&#x2F;glebbahmutov.com&#x2F;blog&#x2F;</span><br><span class="line">real0m1.209s</span><br></pre></td></tr></table></figure><ul><li>request the entire page using <code>GET</code> method</li><li>visit the page using <a href="https://on.cypress.io/visit">cy.visit</a> command</li></ul><p>My test below will use all three ways.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get all URLs from the sitemap</span></span><br><span class="line">expect(json.urlset.url).to.be.an(<span class="string">&#x27;array&#x27;</span>).and.have.length.gt(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">json.urlset.url.forEach(<span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> parsed = <span class="keyword">new</span> URL(url.loc)</span><br><span class="line">  cy.log(parsed.pathname)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// check if the resource exists</span></span><br><span class="line">  cy.request(<span class="string">&#x27;HEAD&#x27;</span>, url.loc).its(<span class="string">&#x27;status&#x27;</span>).should(<span class="string">&#x27;eq&#x27;</span>, <span class="number">200</span>)</span><br><span class="line">  <span class="comment">// check if the resource exists AND download it</span></span><br><span class="line">  cy.request(url.loc).its(<span class="string">&#x27;status&#x27;</span>).should(<span class="string">&#x27;eq&#x27;</span>, <span class="number">200</span>)</span><br><span class="line">  <span class="comment">// visit the page to check if it loads in the browser</span></span><br><span class="line">  cy.visit(url.loc).wait(<span class="number">1000</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I am using <code>.wait(1000, &#123;log: false&#125;)</code> after each <code>cy.visit</code> command to make the loaded page clearly visited in the captured test run video.</p><p><img src="../images/sitemap/sitemap.gif" alt="Checking each URL in three different ways"></p><p>You can watch me writing this test in the video below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/QIuAcJO1klg" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="data-driven-tests">Data-driven tests</span></h2><p>All URLs are checked in the same test. If a single URL fails, then the entire test stops, and we do not know if there are any other broken URLs. We also have to look at the failure message or screenshot to figure which URL failed to load. It would be nice if we had a separate test for <em>each URL</em> instead. This is where the plugin <a href="https://github.com/bahmutov/cypress-each">cypress-each</a> can help us.</p><p>Before we can generate separate tests, we must have the URLs ready. We <em>cannot</em> use <code>cy.request</code> to fetch the sitemap first, then generate new tests to run. We must fetch the sitemap before the spec loads. The best way to do this is to fetch the sitemap from the plugin file and pass the list to the spec file using the <a href="https://on.cypress.io/env">Cypress.env</a> object.</p><p>You can use any NPM module or plain Node code to fetch the sitemap, I will use <a href="https://github.com/sindresorhus/got#readme">got</a> and then will put the fetched list into the <code>config.env</code> object.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> got = <span class="built_in">require</span>(<span class="string">&#x27;got&#x27;</span>)</span><br><span class="line"><span class="comment">// use https://github.com/abdolence/x2js to parse XML to JSON</span></span><br><span class="line"><span class="keyword">const</span> X2JS = <span class="built_in">require</span>(<span class="string">&#x27;x2js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (on, config) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> sitemapUrl = <span class="string">`<span class="subst">$&#123;config.baseUrl&#125;</span>/sitemap.xml`</span></span><br><span class="line">  <span class="keyword">const</span> xml = <span class="keyword">await</span> got(sitemapUrl).text()</span><br><span class="line">  <span class="keyword">const</span> x2js = <span class="keyword">new</span> X2JS()</span><br><span class="line">  <span class="keyword">const</span> json = x2js.xml2js(xml)</span><br><span class="line">  <span class="keyword">const</span> urls = json.urlset.url.map(<span class="function">(<span class="params">url</span>) =&gt;</span> url.loc)</span><br><span class="line">  <span class="built_in">console</span>.log(urls)</span><br><span class="line"></span><br><span class="line">  config.env.sitemapUrls = urls</span><br><span class="line">  <span class="comment">// make sure to return the changed config</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When I open the Cypress project, I should see the list of URLs in the &quot;Settings / Configuration&quot; tab.</p><p><img src="../images/sitemap/settings.png" alt="The URLs fetched in the plugin file are available to every spec"></p><p>When the spec loads in the browser, the <code>sitemapUrl</code> list is already set and is immediately available using <code>Cypress.env(&#39;sitemapUrl&#39;)</code> command. Now we can import the <code>cypress-each</code> plugin, which adds the <code>it.each</code> method to the global <code>it</code> function. We will have a separate test for each URL.</p><figure class="highlight js"><figcaption><span>cypress/integration/sitemap-each.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-each&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Sitemap&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// I like testing the input list of URLs in its own test</span></span><br><span class="line">  <span class="comment">// you could also use &quot;before&quot; hook to confirm we have the URLs</span></span><br><span class="line">  it(<span class="string">&#x27;has urls&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    expect(Cypress.env(<span class="string">&#x27;sitemapUrls&#x27;</span>)).to.be.an(<span class="string">&#x27;array&#x27;</span>).and.not.be.empty</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> urls = Cypress.env(<span class="string">&#x27;sitemapUrls&#x27;</span>).map(<span class="function">(<span class="params">fullUrl</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> parsed = <span class="keyword">new</span> URL(fullUrl)</span><br><span class="line">    <span class="keyword">return</span> parsed.pathname</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it.each(urls)(<span class="string">&#x27;url %s&#x27;</span>, <span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// check if the resource exists</span></span><br><span class="line">    cy.request(<span class="string">&#x27;HEAD&#x27;</span>, url).its(<span class="string">&#x27;status&#x27;</span>).should(<span class="string">&#x27;eq&#x27;</span>, <span class="number">200</span>)</span><br><span class="line">    <span class="comment">// check if the resource exists AND download it</span></span><br><span class="line">    cy.request(url).its(<span class="string">&#x27;status&#x27;</span>).should(<span class="string">&#x27;eq&#x27;</span>, <span class="number">200</span>)</span><br><span class="line">    <span class="comment">// visit the page to check if it loads in the browser</span></span><br><span class="line">    cy.visit(url).wait(<span class="number">1000</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The tests run and finish successfully</p><p><img src="../images/sitemap/sitemap-each.gif" alt="Checking each URL using its own separate test"></p><p>We can always inspect each test using the time-traveling debugger</p><p><img src="../images/sitemap/second-page.png" alt="Inspect the page loaded by a previous test"></p><p>You can watch me write the separate tests in the video below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/qkofPocd7lY" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p><strong>Tip:</strong> for more tricks with data-driven tests using <code>cypress-each</code> plugin including running the tests in parallel, read the blog post <a href="/blog/refactor-using-each/" title="Refactor Tests To Be Independent And Fast Using Cypress-Each Plugin">Refactor Tests To Be Independent And Fast Using Cypress-Each Plugin</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sometimes people ask me how to verify their &lt;code&gt;sitemap.xml&lt;/code&gt; files using Cypress tests. While Cypress test runner is not meant fo
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Faster test execution with cypress-grep</title>
    <link href="https://glebbahmutov.com/blog/cypress-grep-filters/"/>
    <id>https://glebbahmutov.com/blog/cypress-grep-filters/</id>
    <published>2021-11-03T04:00:00.000Z</published>
    <updated>2021-11-03T11:48:37.675Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I have written the <a href="https://github.com/cypress-io/cypress-grep">cypress-grep</a> that can be useful to run the tests selectively by part of the title, or by using tags. For example, a spec like this one:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;loads the page&#x27;</span>, <span class="function">() =&gt;</span> ...)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;searches for items&#x27;</span>, &#123;<span class="attr">tags</span>: <span class="string">&#x27;@search&#x27;</span>&#125;, <span class="function">() =&gt;</span> ...)</span><br></pre></td></tr></table></figure><p>We can run just the first test by installing the plugin and using the <code>grep</code> string passed via Cypress environment variables</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx cypress run --env grep=<span class="string">&quot;loads&quot;</span></span></span><br></pre></td></tr></table></figure><p>We can run the second test by using the tag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx cypress run --env grepTags=<span class="string">&quot;@search&quot;</span></span></span><br></pre></td></tr></table></figure><p>All other tests in the file will <a href="/blog/cypress-test-statuses/" title="be pending">be pending</a>, as if they were using <code>it.skip</code> method.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- loads the page</span><br><span class="line">✓ searches for items(811ms)</span><br><span class="line"></span><br><span class="line">1 passing (811ms)</span><br><span class="line">1 pending</span><br></pre></td></tr></table></figure><p>Skipping the tests this way does not save you on the <a href="https://on.cypress.io/dashboard-introduction">Cypress Dashboard</a> bill - the pending tests do not count towards the monthly billing plan&#39;s quota. But having a new browser instance open, bundling the spec, and the immediately exiting because there might be no tests to run in a spec does cost you time and CI money.</p><p>In this blog post, I will show how to efficiently grep tests on CI to save the CI time, and omit the noise from the tests that were filtered out.</p><blockquote class="pullquote"><p>🎁 You can find the example source code in the repo <a href="https://github.com/bahmutov/todo-graphql-example">bahmutov/todo-graphql-example</a> and see the recorded test runs at its public <a href="https://dashboard.cypress.io/projects/ahwxj4">Dashboard page</a>.</p></blockquote><h2><span id="the-github-actions-workflow">The GitHub Actions workflow</span></h2><p>In my project I have a few suites and tests tagged with different features. I also have a GH Action workflow <a href="https://github.com/bahmutov/todo-graphql-example/blob/master/.github/workflows/tags.yml">tags.yml</a> that runs tests tagged with each feature name separately. For example, the first test job runs all the tests with the tag <code>@dynamic</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tag-dynamic:</span></span><br><span class="line">  <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">  <span class="attr">needs:</span> <span class="string">install</span></span><br><span class="line">  <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">start:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">dev</span></span><br><span class="line">        <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:1234&#x27;</span></span><br><span class="line">        <span class="attr">env:</span> <span class="string">grepTags=@dynamic</span></span><br><span class="line">        <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">&#x27;1 - @dynamic&#x27;</span></span><br><span class="line">        <span class="attr">tag:</span> <span class="string">tags</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="comment"># pass the Dashboard record key as an environment variable</span></span><br><span class="line">        <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CYPRESS_RECORD_KEY</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>In parallel, another test job runs all the tests with the test <code>@visible</code>, here is the relevant difference</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">env: grepTags&#x3D;@visible</span><br><span class="line">group: &#39;2 - @visible&#39;</span><br></pre></td></tr></table></figure><p>There are test jobs that run only the tests tagged <code>@client</code> and <code>@intercept</code>. At the end, there is a job that runs all <em>untagged</em> tests.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">untagged:</span></span><br><span class="line">  <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">  <span class="attr">needs:</span> [<span class="string">tag-intercept</span>, <span class="string">tag-client</span>, <span class="string">tag-visible</span>, <span class="string">tag-dynamic</span>]</span><br><span class="line">  <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">start:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">dev</span></span><br><span class="line">        <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:1234&#x27;</span></span><br><span class="line">        <span class="attr">env:</span> <span class="string">grepUntagged=true</span></span><br><span class="line">        <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">&#x27;5 - untagged&#x27;</span></span><br><span class="line">        <span class="attr">tag:</span> <span class="string">tags</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="comment"># pass the Dashboard record key as an environment variable</span></span><br><span class="line">        <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CYPRESS_RECORD_KEY</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>The tag test jobs run in parallel, and the <code>untagged</code> test job runs at the end.</p><p><img src="../images/cypress-grep-filters/workflow.png" alt="Tags workflow"></p><h2><span id="the-empty-specs">The empty specs</span></h2><p>There are 19 specs currently in the project. When running just the tests tagged <code>@dynamic</code>, what happens to the specs that have no tests tagged with that tag? They show up as &quot;error&quot; in the Cypress Dashboard as the next screenshot shows.</p><p><img src="../images/cypress-grep-filters/run.png" alt="The specs without the tag show up as errors"></p><p>You can see that the Dashboard run things there are a lot more specs than we know there are in the project - because it counts the same specs again and again when they are executed by the test job <code>tag-dynamic</code>, then by <code>tag-visible</code>, then by <code>tag-intercept</code>, etc. And most of these specs have no tests with the tag we are interested in - thus they show up as errors, and just take up the CI time.</p><p>We can do better. The plugin <code>cypress-grep</code> has an option to &quot;preview&quot; the spec file and if it has NO tag or grep string we are looking for in the test title, completely filter out the spec file. We can turn this option using the environment variable:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env: grepTags&#x3D;@dynamic,grepFilterSpecs&#x3D;true</span><br></pre></td></tr></table></figure><p>Even better - to avoid accidentally forgetting to use this option, we can set it in the <a href="https://github.com/bahmutov/todo-graphql-example/blob/master/cypress.json">cypress.json</a> configuration file.</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;env&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;grepFilterSpecs&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>tag-dynamic</code> CI job immediately becomes much faster - because it prefilters all 19 spec files, and only runs the spec with that tag found.</p><p><img src="../images/cypress-grep-filters/filter-tag.png" alt="Only a single spec file has the tag &quot;@dynamic&quot;"></p><p>Every test job became faster</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tag-dynamic 2m 51s &#x3D;&gt; 1m 7s</span><br><span class="line">tag-visible 3m 13s &#x3D;&gt; 2m 26s</span><br><span class="line">tag-client 1m 39s &#x3D;&gt; 1m 7s</span><br><span class="line">tag-intercept 2m 8s &#x3D;&gt; 1m 4s</span><br></pre></td></tr></table></figure><p>Pretty nice savings, and all because we do not have to open 18 spec files once by one only to find out that there are no tests to execute.</p><p><img src="../images/cypress-grep-filters/run-difference.png" alt="Dashboard run before and after turning on spec filtering"></p><p>Note: the <code>untagged</code> test job is unaffected by the filtering, since the <code>grepUntagged=true</code> option is not compatible yet with the option <code>grepFilterSpecs=true</code>, see <a href="https://github.com/cypress-io/cypress-grep/issues/85">issue #85</a>.</p><h2><span id="omitting-filtered-tests">Omitting filtered tests</span></h2><p>If we have a spec with multiple <code>it</code> tests, and we grep, the filtered tests are pending using <code>it.skip</code>. This might create noise in the Command Log and in the test analytics for the run. For example, this spec has more filtered tests than running tests when using <code>grep=&quot;works 2&quot;</code></p><p><img src="../images/cypress-grep-filters/includes-pending.png" alt="Includes filtered tests"></p><p>We can use another option to omit the filtered tests completely. It &quot;hides&quot; the tests that should not run.</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;env&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;grepFilterSpecs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;grepOmitFiltered&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The Command Log and the test analytics now contain only the tests we run</p><p><img src="../images/cypress-grep-filters/omit-pending.png" alt="Includes filtered tests"></p><p>In the <code>todo-graphql-example</code>, this removes all skipped tests. For example, before we grepped tests with tag &quot;@visible&quot;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">TodoMVC with GraphQL cy.intercept</span><br><span class="line">  - completes the first todo</span><br><span class="line">  ✓ stubs todos query (518ms)</span><br><span class="line">  ✓ shows loading indicator (490ms)</span><br><span class="line">  - adds and deletes todo</span><br><span class="line">  - stubs by checking operation name</span><br><span class="line">  ✓ spies on adding todos (499ms)</span><br><span class="line">  - intercepts operations using custom header</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3 passing (2s)</span><br><span class="line">4 pending</span><br></pre></td></tr></table></figure><p>After we added the <code>grepOmitFiltered=true</code> option, only the tests with the tag are in the output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TodoMVC with GraphQL cy.intercept</span><br><span class="line">  ✓ stubs todos query (515ms)</span><br><span class="line">  ✓ shows loading indicator (491ms)</span><br><span class="line">  ✓ spies on adding todos (493ms)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3 passing (2s)</span><br></pre></td></tr></table></figure><p>This is a much nicer output.</p><h2><span id="manual-workflow">Manual workflow</span></h2><p>We can add a new workflow to our project that we can trigger manually any time we want to run a specific test, or a group of tests using a tag. You can find this workflow in the file <a href="https://github.com/bahmutov/todo-graphql-example/blob/master/.github/workflows/grep.yml">grep.yml</a>.</p><figure class="highlight yml"><figcaption><span>.github/workflows/grep.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">grep</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">grep:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Part</span> <span class="string">of</span> <span class="string">the</span> <span class="string">test</span> <span class="string">title</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">grepTags:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Test</span> <span class="string">tags</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">burn:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Number</span> <span class="string">of</span> <span class="string">times</span> <span class="string">to</span> <span class="string">repeat</span> <span class="string">the</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">grep:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">filtered</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">dev</span></span><br><span class="line">          <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:1234&#x27;</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">grep=$&#123;&#123;</span> <span class="string">github.event.inputs.grep</span> <span class="string">&#125;&#125;,grepTags=$&#123;&#123;</span> <span class="string">github.event.inputs.grepTags</span> <span class="string">&#125;&#125;,burn=$&#123;&#123;</span> <span class="string">github.event.inputs.burn</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">&#x27;grep=$<span class="template-variable">&#123;&#123; github.event.inputs.grep &#125;&#125;</span>,grepTags=$<span class="template-variable">&#123;&#123; github.event.inputs.grepTags &#125;&#125;</span>,burn=$<span class="template-variable">&#123;&#123; github.event.inputs.burn &#125;&#125;</span>&#x27;</span></span><br><span class="line">          <span class="attr">tag:</span> <span class="string">grep</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="comment"># pass the Dashboard record key as an environment variable</span></span><br><span class="line">          <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CYPRESS_RECORD_KEY</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>Let&#39;s see if the following test in the &quot;cors-spec.js&quot; is reliably. Let&#39;s run just this test 5 times in row. From the GitHub UI start the workflow with the following parameters:</p><p><img src="../images/cypress-grep-filters/start.png" alt="Starting the workflow manually"></p><p>The <code>grep</code>, <code>grepTags</code>, and <code>burn</code> workflow parameters are passed to Cypress via <code>env: ...</code> action param. Only a single spec file has a test with a test title including the <code>grep</code> string we have entered. And the same test was &quot;burn&quot; or executed five times in a row.</p><p><img src="../images/cypress-grep-filters/grep.png" alt="GitHub Action output"></p><p>The Cypress Dashboard shows the single spec file with 5 tests executed, with its own group name that includes our parameters</p><p><img src="../images/cypress-grep-filters/grep-dashboard.png" alt="The Cypress Dashboard grep workflow result"></p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/burning-tests/" title="Burning Tests with cypress-grep">Burning Tests with cypress-grep</a></li><li><a href="#">Post not found: burning-tests-on-circle</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently I have written the &lt;a href=&quot;https://github.com/cypress-io/cypress-grep&quot;&gt;cypress-grep&lt;/a&gt; that can be useful to run the tests sel
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Flexible Cypress Data Setup And Validation</title>
    <link href="https://glebbahmutov.com/blog/cypresss-data-session/"/>
    <id>https://glebbahmutov.com/blog/cypresss-data-session/</id>
    <published>2021-10-20T04:00:00.000Z</published>
    <updated>2021-10-20T12:30:03.725Z</updated>
    
    <content type="html"><![CDATA[<p>This post will introduce you to a very powerful way of creating and re-using data in your Cypress tests. By re-using the expensive to create objects like users, projects, etc. you will make your tests much much faster, and potentially the tests will be easier to read and maintain.</p><!-- toc --><ul><li><a href="#introduction">Introduction</a></li><li><a href="#creating-the-user">Creating the user</a></li><li><a href="#separate-creation-from-logging-in">Separate creation from logging in</a></li><li><a href="#data-session">Data session</a></li><li><a href="#register-the-user-via-api-call">Register the user via API call</a></li><li><a href="#register-the-user-via-task-command">Register the user via task command</a></li><li><a href="#caching-data">Caching data</a></li><li><a href="#logging-using-api-call">Logging using API call</a></li><li><a href="#caching-the-session-cookie">Caching the session cookie</a></li><li><a href="#data-session-methods">Data session methods</a></li><li><a href="#dependent-sessions">Dependent sessions</a></li><li><a href="#more-info">More info</a></li></ul><!-- tocstop --><h2><span id="introduction">Introduction</span></h2><p>Imagine your Cypress test needs to create a user before logging in. Is creating a user an instant step? No, it probably takes time, especially if you go through the app&#39;s user interface without using API calls or <a href="https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/">App Actions</a>. So you want to create a user and keep it around, to avoid re-creating it for each test. Sometimes you do want to check if the user object or some other piece of data is still valid; maybe another test has cleared the database, removing all the users. So you need a mechanism for validating the user before the test proceeds.</p><p>These actions: creating a piece of test data, storing it for other tests to use, validating, and re-creating if the validation has failed, are very common. Thus I have written a plugin called <a href="https://github.com/bahmutov/cypress-data-session">cypress-data-session</a> to avoid re-implementing the same boilerplate in my code. This plugin gives an introduction to the plugin&#39;s use in the real-world scenarios.</p><h2><span id="creating-the-user">Creating the user</span></h2><p>Let&#39;s create an user for our application - which is required to log in, and create a chat room. A typical test would do something like this:</p><figure class="highlight js"><figcaption><span>cypress/integration/register-user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;registers user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">&#x27;Test&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> password = <span class="string">&#x27;MySecreT&#x27;</span></span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;#create-account&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;.register-form&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    .within(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      cy.get(<span class="string">&#x27;[placeholder=username]&#x27;</span>)</span><br><span class="line">        .type(username)</span><br><span class="line">        .should(<span class="string">&#x27;have.value&#x27;</span>, username)</span><br><span class="line">      cy.get(<span class="string">&#x27;[placeholder=password]&#x27;</span>).type(password)</span><br><span class="line"></span><br><span class="line">      cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;create&#x27;</span>).click()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;.login-form&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    .within(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      cy.get(<span class="string">&#x27;[placeholder=username]&#x27;</span>)</span><br><span class="line">        .type(username)</span><br><span class="line">        .should(<span class="string">&#x27;have.value&#x27;</span>, username)</span><br><span class="line">      cy.get(<span class="string">&#x27;[placeholder=password]&#x27;</span>).type(password)</span><br><span class="line"></span><br><span class="line">      cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;login&#x27;</span>).click()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if the user has been created and could log in</span></span><br><span class="line">  <span class="comment">// we should be redirected to the home page with the rooms</span></span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>🎁 You can find the source code examples used in this blog post in the repo <a href="https://github.com/bahmutov/chat.io">bahmutov/chat.io</a>.</p></blockquote><p>The first time this test runs, everything goes well. The user is created and can log in.</p><p><img src="../images/data-session/register-user.gif" alt="The user is created successfully"></p><p>But when we rerun the test, it fails, since the user with the same username already exists.</p><p><img src="../images/data-session/cannot-register-twice.gif" alt="Cannot register the same user twice"></p><p>Sure, the failure is expected. We have four choices:</p><ul><li>delete all users before each test so we can create the user <code>Test</code> with the password <code>MySecreT</code>.</li><li>delete just the user <code>Test</code> if it exists.</li><li>create a user with unique random name just for this test.</li><li>cache the created user and reuse it.</li></ul><p>The last option is the hardest to implement, but can offer substantial speed savings, since create a user (or some complicated piece of test data) can be slow.</p><h2><span id="separate-creation-from-logging-in">Separate creation from logging in</span></h2><p>Before we proceed, I want to point out that the test above mixes creating the user object and using it. We probably want to keep the act of creating the user really clear, thus I will rewrite the test a little bit.</p><figure class="highlight js"><figcaption><span>cypress/integration/register-user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerUser</span>(<span class="params">username, password</span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;#create-account&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;.register-form&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    .within(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      cy.get(<span class="string">&#x27;[placeholder=username]&#x27;</span>)</span><br><span class="line">        .type(username)</span><br><span class="line">        .should(<span class="string">&#x27;have.value&#x27;</span>, username)</span><br><span class="line">      cy.get(<span class="string">&#x27;[placeholder=password]&#x27;</span>).type(password)</span><br><span class="line"></span><br><span class="line">      cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;create&#x27;</span>).click()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loginUser</span>(<span class="params">username, password</span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;.login-form&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    .within(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      cy.get(<span class="string">&#x27;[placeholder=username]&#x27;</span>)</span><br><span class="line">        .type(username)</span><br><span class="line">        .should(<span class="string">&#x27;have.value&#x27;</span>, username)</span><br><span class="line">      cy.get(<span class="string">&#x27;[placeholder=password]&#x27;</span>).type(password)</span><br><span class="line"></span><br><span class="line">      cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;login&#x27;</span>).click()</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// if everything goes well</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;.success&#x27;</span>, <span class="string">&#x27;Your account has been created&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;registers user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">&#x27;Test&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> password = <span class="string">&#x27;MySecreT&#x27;</span></span><br><span class="line"></span><br><span class="line">  registerUser(username, password)</span><br><span class="line">  loginUser(username, password)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if the user has been created and could log in</span></span><br><span class="line">  <span class="comment">// we should be redirected to the home page with the rooms</span></span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test fails if we re-run it, so let&#39;s take care of that. Let&#39;s delete the user before each test. I have registered a task in the plugin file to connect to the database and clear all users. Just for kicks I also added a task to find a user by username.</p><figure class="highlight js"><figcaption><span>cypress/plugin/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> database = <span class="built_in">require</span>(<span class="string">&#x27;../../app/database&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">clearUsers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;clear users&#x27;</span>)</span><br><span class="line">  <span class="keyword">await</span> database.models.user.deleteMany(&#123;&#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">findUser</span>(<span class="params">username</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;find user&#x27;</span>, username)</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> username !== <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;username must be a string&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> database.models.user.findOne(&#123; username &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    clearUsers,</span><br><span class="line">    findUser,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>At the start of the test, we can delete all users in the database (which is fine, we are running one test at a time).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;registers user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">&#x27;Test&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> password = <span class="string">&#x27;MySecreT&#x27;</span></span><br><span class="line"></span><br><span class="line">  cy.task(<span class="string">&#x27;clearUsers&#x27;</span>)</span><br><span class="line">  registerUser(username, password)</span><br><span class="line">  loginUser(username, password)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if the user has been created and could log in</span></span><br><span class="line">  <span class="comment">// we should be redirected to the home page with the rooms</span></span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/data-session/clear-users.gif" alt="Clear all existing users before creating the test user"></p><p>Nice, the test can be re-run multiple times. But we can do better - let us avoid deleting all users. We can quickly check if the already created user is still valid.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;registers user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">&#x27;Test&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> password = <span class="string">&#x27;MySecreT&#x27;</span></span><br><span class="line"></span><br><span class="line">  cy.task(<span class="string">&#x27;findUser&#x27;</span>, username).then(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">      registerUser(username, password)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  loginUser(username, password)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if the user has been created and could log in</span></span><br><span class="line">  <span class="comment">// we should be redirected to the home page with the rooms</span></span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test is much much faster - since it reuses the previously created user, and avoids recreating unnecessarily.</p><p><img src="../images/data-session/find-user.gif" alt="Finds the previously created user"></p><h2><span id="data-session">Data session</span></h2><p>Now let us rewrite the above test using <a href="https://github.com/bahmutov/cypress-data-session">cypress-data-session</a> plugin. We will import the plugin from the support file, which gives us the <code>cy.dataSession</code> command. First, let&#39;s recreate the original &quot;naive&quot; create and log in behavior:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;registers user using data session&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">&#x27;Test&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> password = <span class="string">&#x27;MySecreT&#x27;</span></span><br><span class="line"></span><br><span class="line">  cy.dataSession(&#123;</span><br><span class="line">    name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      registerUser(username, password)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  loginUser(username, password)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if the user has been created and could log in</span></span><br><span class="line">  <span class="comment">// we should be redirected to the home page with the rooms</span></span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes on the first attempt if there are no users in the database.</p><p><img src="../images/data-session/data1.png" alt="The user was created using the setup method"></p><p>Great, we created the data item (the user) using the <code>setup</code> method, and gave the data session an alias &quot;user&quot;. We can pass some data from that alias later; it can be used to access the object created by the <code>setup</code> method.</p><p>Notice, if we re-run the test, it fails when it tries to run the <code>setup</code> method again.</p><p><img src="../images/data-session/recompute.png" alt="The data session tries to recompute the item"></p><p>The data session does not know that the user object is still valid, and should not be recomputed. Let&#39;s tell the data session how to check. We will add the <code>validate</code> method that can run Cypress commands and resolves with a boolean value. If we yield true, the data session will skip recomputing the user again.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    registerUser(username, password)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">validate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cy.task(<span class="string">&#x27;findUser&#x27;</span>, username).then(<span class="built_in">Boolean</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">loginUser(username, password)</span><br></pre></td></tr></table></figure><p>The test now immediately logs in - because the user is still valid.</p><p><img src="../images/data-session/still-valid.png" alt="The user is validated, not recomputing necessary"></p><h2><span id="register-the-user-via-api-call">Register the user via API call</span></h2><p>We can optimize how we create the user. Instead of filling the form fields and submitting the form, we could simply post it using the <a href="https://on.cypress.io/request">cy.request</a> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerApi</span>(<span class="params">username, password</span>) </span>&#123;</span><br><span class="line">  cy.request(&#123;</span><br><span class="line">    method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;/register&#x27;</span>,</span><br><span class="line">    form: <span class="literal">true</span>,</span><br><span class="line">    body: &#123;</span><br><span class="line">      username,</span><br><span class="line">      password,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    registerApi(username, password)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">validate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cy.task(<span class="string">&#x27;findUser&#x27;</span>, username).then(<span class="built_in">Boolean</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">loginUser(username, password)</span><br></pre></td></tr></table></figure><p>The test passes and is faster.</p><p><img src="../images/data-session/register-using-request.png" alt="Register the user with cy.request command"></p><h2><span id="register-the-user-via-task-command">Register the user via task command</span></h2><p>We can bypass the API and directly create the user in the database (of course, we can use the application database model layer to avoid creating an invalid entity) by calling the plugin code via <a href="https://on.cypress.io/task">cy.task</a> command.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> database = <span class="built_in">require</span>(<span class="string">&#x27;../../app/database&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; registerUser &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../../app/models/user&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">findUser</span>(<span class="params">username</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;find user&#x27;</span>, username)</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> username !== <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;username must be a string&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> database.models.user.findOne(&#123; username &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;get user with id %s&#x27;</span>, id)</span><br><span class="line">  <span class="keyword">return</span> database.models.user.findOne(&#123; <span class="attr">_id</span>: id &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">makeUser</span>(<span class="params">credentials</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;makeUser&#x27;</span>, credentials?.username)</span><br><span class="line">  <span class="keyword">const</span> errorMessageOrUser = <span class="keyword">await</span> registerUser(credentials)</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> errorMessageOrUser === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(errorMessageOrUser)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">&#x27;made user %s id %s&#x27;</span>,</span><br><span class="line">    credentials.username,</span><br><span class="line">    errorMessageOrUser._id,</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">return</span> errorMessageOrUser._id</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    findUser,</span><br><span class="line">    getUser,</span><br><span class="line">    makeUser,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>📝 For more examples on how to connect to the MongoDB database from Cypress tests, read the blog post <a href="/blog/testing-mongo-with-cypress/" title="Testing Mongo with Cypress">Testing Mongo with Cypress</a> or <a href="/blog/verify-phone-part-two/" title="How To Verify Phone Number During Tests Part 2">How To Verify Phone Number During Tests Part 2</a>.</p></blockquote><p>We can now register a user really quickly.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    cy.task(<span class="string">&#x27;makeUser&#x27;</span>, &#123; username, password &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">validate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cy.task(<span class="string">&#x27;findUser&#x27;</span>, username).then(<span class="built_in">Boolean</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/data-session/register-using-task.png" alt="Register the user with cy.task command"></p><h2><span id="caching-data">Caching data</span></h2><p>The <code>cy.dataSession</code> command above helped us organize the user creation a little bit, but its power is in caching a piece of created data. For example, why do we need the <code>username</code> to check if the user is still valid? A user object should be checked by its ID! The user ID is returned by the <code>cy.task(&#39;makeUser&#39;)</code>, so let&#39;s store it somewhere. That is precisely what <code>cy.dataSession</code> can do internally, so you do not have to do it! It can even store it across the specs, so it survives hard reloads and opening a different spec.</p><p>In fact, the user ID has already been stored - because that is what the Cypress command chain inside the <code>setup</code> method yields. That ID is stored in the session, and we can see what the session stores using a static method <code>Cypress.getDataSession</code> added to the global Cypress object by the plugin.</p><p><img src="../images/data-session/stored-data.png" alt="The user ID was stored inside the data session &quot;user&quot;"></p><p>We can store any object there, let&#39;s keep the user ID, the username, and the password together.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    cy.task(<span class="string">&#x27;makeUser&#x27;</span>, &#123; username, password &#125;).then(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; id, username, password &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">validate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cy.task(<span class="string">&#x27;findUser&#x27;</span>, username).then(<span class="built_in">Boolean</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/data-session/store-object.png" alt="We can store an entire object inside the data session"></p><p>What about validating the data? Does it need to rely on the external closure variable <code>username</code>? No - the data session code automatically passes the stored data to the <code>validate</code> method! We can rewrite the <code>validate</code> method to use the parameter instead of the external variable:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    cy.task(<span class="string">&#x27;makeUser&#x27;</span>, &#123; username, password &#125;).then(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; id, username, password &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">validate</span>(<span class="params">&#123; username &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cy.task(<span class="string">&#x27;findUser&#x27;</span>, username).then(<span class="built_in">Boolean</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Even better, we can grab the ID property and use the task <code>getUser</code> to validate the user quicker</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    cy.task(<span class="string">&#x27;makeUser&#x27;</span>, &#123; username, password &#125;).then(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; id, username, password &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">validate</span>(<span class="params">&#123; id &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cy.task(<span class="string">&#x27;getUser&#x27;</span>, id).then(<span class="built_in">Boolean</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Notice how the Command Log shows the <code>cy.task</code> checking the user ID now</p><p><img src="../images/data-session/validate-id.png" alt="Validating the user by the stored ID"></p><p>The stored user object is automatically available under a Cypress alias and under the test context property.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> username = <span class="string">&#x27;Test&#x27;</span></span><br><span class="line"><span class="keyword">const</span> password = <span class="string">&#x27;MySecreT&#x27;</span></span><br><span class="line"></span><br><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    cy.task(<span class="string">&#x27;makeUser&#x27;</span>, &#123; username, password &#125;).then(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; id, username, password &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">validate</span>(<span class="params">&#123; id &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cy.task(<span class="string">&#x27;getUser&#x27;</span>, id).then(<span class="built_in">Boolean</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">cy.get(<span class="string">&#x27;@user&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, username)</span><br><span class="line">  <span class="comment">// or access the alias using the test context property</span></span><br><span class="line">  <span class="comment">// after it has been set</span></span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(<span class="built_in">this</span>.user).to.have.keys(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>The name we gave the data session &quot;user&quot; became a Cypress alias, reachable using the <code>cy.get</code> command or via the text context property.</p><p><img src="../images/data-session/alias.png" alt="Accessing the computed cached data via an alias &quot;user&quot;"></p><p><strong>Tip:</strong> the plugin adds static methods to the global <code>Cypress</code> object that allow you inspecting individual sessions, clearing them, or disabling the plugin completely, all from the browser&#39;s DevTools console. See the <a href="https://github.com/bahmutov/cypress-data-session#global-methods">README</a>.</p><h2><span id="logging-using-api-call">Logging using API call</span></h2><p>In our code, we are using the <code>cy.task</code> to create the user if necessary, but we still log in using the page form. To log in faster, we can use <a href="https://on.cypress.io/request">cy.request</a> command. This command can submit the <code>/login</code> form and set any returned cookies, like the <code>connect.sid</code> session cookie the application is using.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> loginViaApi = <span class="function">(<span class="params">username, password</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.log(<span class="string">`log in user **<span class="subst">$&#123;username&#125;</span>**`</span>)</span><br><span class="line">  cy.request(&#123;</span><br><span class="line">    method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    form: <span class="literal">true</span>,</span><br><span class="line">    body: &#123;</span><br><span class="line">      username,</span><br><span class="line">      password,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> cy.wrap(&#123; username, password &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;register and log in using cy.request&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">&#x27;Test&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> password = <span class="string">&#x27;MySecreT&#x27;</span></span><br><span class="line"></span><br><span class="line">  cy.dataSession(&#123;</span><br><span class="line">    name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      cy.task(<span class="string">&#x27;makeUser&#x27;</span>, &#123; username, password &#125;).then(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; id, username, password &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">validate</span>(<span class="params">&#123; id &#125;</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> cy.task(<span class="string">&#x27;getUser&#x27;</span>, id).then(<span class="built_in">Boolean</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;@user&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, username)</span><br><span class="line">    <span class="comment">// or access the alias using the test context property</span></span><br><span class="line">    <span class="comment">// after it has been set</span></span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      expect(<span class="built_in">this</span>.user).to.have.keys(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  loginViaApi(username, password)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if the user is logged in correctly,</span></span><br><span class="line">  <span class="comment">// the session cookie is set, and when we visit the page</span></span><br><span class="line">  <span class="comment">// we are automatically redirected to the list of chat rooms</span></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Look good, and it is faster too, since we avoid visiting the page and typing into the form, and then submitting it.</p><p><img src="../images/data-session/log-in.gif" alt="Logging in using cy.request command"></p><h2><span id="caching-the-session-cookie">Caching the session cookie</span></h2><p>When we log in using the form or via <code>cy.request</code> call, the browser receives the session cookie from the backend. This cookie is associated with the user we have created. If this cookie is removed, the server redirects the page back to the log in.</p><p><img src="../images/data-session/sid.png" alt="The session cookie used to authenticate the user"></p><p>If we log in once, and save this cookie in a variable, we could log in instantly the second time by setting it before <code>cy.visit</code>. This sounds a lot like ... <code>cy.dataSession</code> command. Let&#39;s &quot;build&quot; it by first just using the setup method and storing the cookie inside the data session. Change the <code>loginViaApi</code> function to yield the cookie value, and call this method from the <code>setup</code> method - this will store the cookie in the data session cache.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> loginViaApi = <span class="function">(<span class="params">username, password</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.log(<span class="string">`log in user **<span class="subst">$&#123;username&#125;</span>**`</span>)</span><br><span class="line">  cy.request(&#123;</span><br><span class="line">    method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    form: <span class="literal">true</span>,</span><br><span class="line">    body: &#123;</span><br><span class="line">      username,</span><br><span class="line">      password,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// after cy.request, the cookie should exist in the browser</span></span><br><span class="line">  <span class="keyword">return</span> cy.getCookie(<span class="string">&#x27;connect.sid&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;register and log in using data sessions&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">&#x27;Test&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> password = <span class="string">&#x27;MySecreT&#x27;</span></span><br><span class="line"></span><br><span class="line">  cy.dataSession(&#123;</span><br><span class="line">    name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      cy.task(<span class="string">&#x27;makeUser&#x27;</span>, &#123; username, password &#125;).then(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; id, username, password &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">validate</span>(<span class="params">&#123; id &#125;</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> cy.task(<span class="string">&#x27;getUser&#x27;</span>, id).then(<span class="built_in">Boolean</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.dataSession(&#123;</span><br><span class="line">    name: <span class="string">&#x27;logged in user&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="comment">// yields the connect.sid cookie</span></span><br><span class="line">      <span class="keyword">return</span> loginViaApi(username, password)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if the user is logged in correctly,</span></span><br><span class="line">  <span class="comment">// the session cookie is set, and when we visit the page</span></span><br><span class="line">  <span class="comment">// we are automatically redirected to the list of chat rooms</span></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The second <code>cy.dataSession</code> always recreates the cookie as the captured movie below shows - because we do not have the <code>validate</code> method yet.</p><p><img src="../images/data-session/setup-cookie.gif" alt="The cookie is recomputed for every test"></p><p>Let&#39;s think when the cookie is valid - when it has <em>any</em> value. Of course, we could validate the cookie fully by making an authorized request and checking if it fails. But for now, let&#39;s assume that IF we have a cookie, then it is ok to use it again. We can tell the data session that <em>any</em> previous value is ok to reuse by using <code>validate: true</code> value.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;logged in user&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// yields the connect.sid cookie</span></span><br><span class="line">    <span class="keyword">return</span> loginViaApi(username, password)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// any non-null cookie value is valid</span></span><br><span class="line">  validate: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hmm, the test has failed - the user was not logged in when the test visited the page.</p><p><img src="../images/data-session/not-logged-in.png" alt="The user was redirected back to the login page"></p><p>Cypress clears all cookies before each test. Thus the data storage has a cookie from the previous session BUT it is still in memory. We told the <code>cy.dataStorage</code> that the cookie is valid, but we also need to tell it how to <em>restore</em> the cookie and set it in the browser before proceeding. We have the method <code>recreate</code> for this; it receives the value from the data session storage (just like the method <code>validate</code> does).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;logged in user&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// yields the connect.sid cookie</span></span><br><span class="line">    <span class="keyword">return</span> loginViaApi(username, password)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// any non-null cookie value is valid</span></span><br><span class="line">  validate: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// if we have the previous valid cookie</span></span><br><span class="line">  <span class="comment">// set it in the browser before any cy.visit</span></span><br><span class="line">  <span class="function"><span class="title">recreate</span>(<span class="params">cookie</span>)</span> &#123;</span><br><span class="line">    cy.setCookie(<span class="string">&#x27;connect.sid&#x27;</span>, cookie.value)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// if the user is logged in correctly,</span></span><br><span class="line"><span class="comment">// the session cookie is set, and when we visit the page</span></span><br><span class="line"><span class="comment">// we are automatically redirected to the list of chat rooms</span></span><br><span class="line">cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/rooms&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/data-session/recreate.png" alt="Recreate the browser session by setting the cookie from the data session"></p><p>Reusing the previous session cookie is <em>very very fast</em>, even compared to logging in using the <code>cy.request</code> command.</p><h2><span id="data-session-methods">Data session methods</span></h2><p>The <code>cy.dataSession</code> allows you to create the initial item using <code>setup</code>, stores it, validates if the previous item is still valid using <code>validate</code>, and if it is still valid, set it back into the browser using any Cypress commands using the <code>recreate</code> method. One could summarize the logic using the following list:</p><ul><li>if there is no previous item for the session named X<ul><li>run the <code>setup</code> and store the item under name X</li></ul></li><li>else<ul><li>there is a previous item</li><li>check if it is still valid using <code>validate</code><ul><li>if still valid, call <code>recreate</code> if provided</li><li>otherwise call the <code>setup</code> again</li></ul></li></ul></li></ul><p>There are a few other lifecycle methods in <code>cy.dataSession</code> to make dealing with the item more explicit, see the README for details.</p><h2><span id="dependent-sessions">Dependent sessions</span></h2><p>Multiple sessions store their data separately. We can check what the session stores from the DevTools console.</p><p><img src="../images/data-session/sessions.png" alt="Printing the saved data from each data session"></p><p>The two data sessions have a dependency; if the user object is recreated, then the previously stored cookie becomes invalid. One cannot log in using a session for a user that does not exist! Thus we need to invalidate the data session &quot;logged in user&quot; when running the &quot;user&quot; session setup. We can do it explicitly from the &quot;user&quot; data session. When running the <code>setup</code> function, call <code>Cypress.clearDataSession(&#39;logged in user&#39;)</code> and it is deleted.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    Cypress.clearDataSession(<span class="string">&#x27;logged in user&#x27;</span>)</span><br><span class="line">    cy.task(<span class="string">&#x27;makeUser&#x27;</span>, &#123; username, password &#125;).then(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; id, username, password &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">validate</span>(<span class="params">&#123; id &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cy.task(<span class="string">&#x27;getUser&#x27;</span>, id).then(<span class="built_in">Boolean</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>In the recording below all data sessions are set, but I clear the users from the database table and clear the &quot;user&quot; data session, forcing the <code>cy.dataSession</code> to recreate the user. The <code>setup</code> runs and clears the &quot;logged in user&quot; data session. That&#39;s why you see the message &quot;first time for session logged in user&quot; in the Cypress Command Log.</p><p><img src="../images/data-session/clear1.gif" alt="The second session is recomputed because the user session clears it"></p><p>There is an alternative way to re-compute the data session which I prefer. Instead of the &quot;user&quot; data session clearing every session that might need to be recomputed, why don&#39;t we tell the &quot;logged in user&quot; that it depends on the &quot;user&quot; session? There is a parameter that specifies it:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    cy.task(<span class="string">&#x27;makeUser&#x27;</span>, &#123; username, password &#125;).then(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; id, username, password &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">validate</span>(<span class="params">&#123; id &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cy.task(<span class="string">&#x27;getUser&#x27;</span>, id).then(<span class="built_in">Boolean</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;logged in user&#x27;</span>,</span><br><span class="line">  dependsOn: [<span class="string">&#x27;user&#x27;</span>],</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// yields the connect.sid cookie</span></span><br><span class="line">    <span class="keyword">return</span> loginViaApi(username, password)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// any non-null cookie value is valid</span></span><br><span class="line">  validate: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// if we have the previous valid cookie</span></span><br><span class="line">  <span class="comment">// set it in the browser before any cy.visit</span></span><br><span class="line">  <span class="function"><span class="title">recreate</span>(<span class="params">cookie</span>)</span> &#123;</span><br><span class="line">    cy.setCookie(<span class="string">&#x27;connect.sid&#x27;</span>, cookie.value)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Notice how the second data session declares all sessions it depends on using <code>dependsOn: [&#39;user&#39;]</code> parameter. Under the hood, each data session generates a new random UUID when it is computed using the <code>setup</code> call. Every session with dependencies keeps a list of UUIDs for the sessions it depends on. During the <code>validate</code> step, if any of the upstream data sessions have a different UUID from its list, then it must have been recomputed, and thus the current data session is no longer valid. Clean and simple!</p><p><img src="../images/data-session/depends.png" alt="The second session is recomputed when the dependent session is recomputed"></p><h2><span id="more-info">More info</span></h2><p>I believe the <a href="https://github.com/bahmutov/cypress-data-session">cypress-data-session</a> plugin provides a very flexible and powerful way for creating and re-using any data during Cypress tests. It can do all the things I have shown in this blog post and more. For example, it can share the data across specs! For more information, see the plugin&#39;s README, and the example application <a href="https://github.com/bahmutov/chat.io">bahmutov/chat.io</a>. You can also find lots of example videos, some of them linked here:</p><ul><li><a href="https://youtu.be/As5yqkoZOx8">Introduction to cypress-data-session package</a></li><li><a href="https://youtu.be/VQtjDGCuRzI">Use Data Alias Created Automatically By cypress-data-session</a></li><li><a href="https://youtu.be/P-sb5OHSNsM">Create User Using cypress-data-session Command</a></li><li><a href="https://youtu.be/SyDz6l_EFoc">Invalidate cy.session From cypress-data-session</a></li><li><a href="https://youtu.be/ws4TitQJ7fQ">Share Data Across Specs Using cypress-data-session Plugin</a></li><li><a href="https://youtu.be/PTlcRBgFJaM">Use cy.dataSession To Create A User And Log In</a></li><li><a href="https://www.youtube.com/watch?v=0KTGc83wSoA">Quickly Create A User And Log in Using Dependent Data Sessions</a></li><li><a href="https://youtu.be/7ipCvJQixI0">Introduction To cypress-data-session Plugin</a></li></ul><p>See the <a href="https://github.com/bahmutov/cypress-data-session#videos">cypress-data-session README Videos section</a> for the up-to-date list.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This post will introduce you to a very powerful way of creating and re-using data in your Cypress tests. By re-using the expensive to cre
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Refactor Tests To Be Independent And Fast Using Cypress-Each Plugin</title>
    <link href="https://glebbahmutov.com/blog/refactor-using-each/"/>
    <id>https://glebbahmutov.com/blog/refactor-using-each/</id>
    <published>2021-10-15T04:00:00.000Z</published>
    <updated>2021-10-19T00:47:30.019Z</updated>
    
    <content type="html"><![CDATA[<p>I have made <a href="https://github.com/bahmutov/cypress-each">cypress-each</a> to simplify generating tests from data. This plugin has already proved itself useful for <a href="/blog/dynamic-api-tests-using-cypress-each/" title="API testing">API testing</a>, and in this post I want to show a few more tricks it can help you do, like making the tests faster by generating separate spec files to be executed in parallel.</p><h2><span id="the-initial-test">The initial test</span></h2><p>Let&#39;s start with a single test that checks if elements are visible.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows the expected elements&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;header&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;footer&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;.new-todo&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You can watch me refactor this single test to avoid command duplication in the video below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/DnmnzemS_HA" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>The better test iterates through the list of selectors</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows the expected elements&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> selectors = [<span class="string">&#x27;header&#x27;</span>, <span class="string">&#x27;footer&#x27;</span>, <span class="string">&#x27;.new-todo&#x27;</span>]</span><br><span class="line">  selectors.forEach(<span class="function">(<span class="params">selector</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.get(selector).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test has a problem: if the first selector is wrong, the rest of the commands and assertions is skipped when it fails to find an element. Are the &quot;footer&quot; and the &quot;.new-todo&quot; selectors valid? Are those elements visible? We do not know, since the test has failed on the first command. We want to separate this test into 3 independent tests, and do it with minimal code duplication.</p><h2><span id="using-cypress-each-to-generate-independent-tests">Using cypress-each to generate independent tests</span></h2><p>This is where the <a href="https://github.com/bahmutov/cypress-each">cypress-each</a> plugin comes in handy. It can generate separate <code>it</code> tests (or even separate <code>describe</code> suites) from a list of items.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress-each</span><br><span class="line">+ cypress-each@1.4.0</span><br><span class="line"># install using Yarn</span><br><span class="line">$ yarn add -D cypress-each</span><br></pre></td></tr></table></figure><p>You can import the plugin directly from the spec file, or from the Cypress support file. If you import it from the support file, the <code>it.each</code> syntax becomes available in every spec.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-each&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> selectors = [<span class="string">&#x27;header&#x27;</span>, <span class="string">&#x27;footer&#x27;</span>, <span class="string">&#x27;.new-todo&#x27;</span>]</span><br><span class="line">it.each(selectors)(<span class="string">&#x27;element %s is visible&#x27;</span>, <span class="function">(<span class="params">selector</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.get(selector).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You can watch me refactor the single test using <code>cypress-each</code> plugin in the video below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/utPKRV_fL1E" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>There are now three independent tests:</p><ul><li>&quot;element header is visible&quot;</li><li>&quot;element footer is visible&quot;</li><li>&quot;element .new-todo is visible&quot;</li></ul><p>If one test fails, the rest still runs and gives you the complete picture.</p><p><strong>Tip:</strong> You can be quite flexible with the test title pattern. For example, you can use <code>%k</code> and <code>%K</code> placeholders to insert the item&#39;s index (0-based and 1-based respectively). You can even use your own test title format function like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-each&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> selectors = [<span class="string">&#x27;header&#x27;</span>, <span class="string">&#x27;footer&#x27;</span>, <span class="string">&#x27;.new-todo&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> getTitle = <span class="function">(<span class="params">item, index, items</span>) =&gt;</span> <span class="string">`testing element %K &quot;%s&quot;`</span></span><br><span class="line">it.each(selectors)(getTitle, <span class="function">(<span class="params">selector</span>) =&gt;</span> &#123; ... &#125;)</span><br></pre></td></tr></table></figure><p>The above syntax will create 3 tests with titles <code>testing element 1 &quot;header&quot;</code>, <code>testing element 2 &quot;footer&quot;</code>, and <code>testing element 3 &quot;.new-todo&quot;</code>.</p><h2><span id="parallel-testing">Parallel testing</span></h2><p>If we have a lot of data items, and generate a test for each one, the entire spec can become quite long. For example, the following spec simulates a slow loading page using <code>cy.wait(10000)</code> command. With 9 element selectors, this small spec example runs for 90 seconds!</p><figure class="highlight js"><figcaption><span>cypress/integration/visible-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-each&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;visible elements&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// simulate creating lots of tests by using the same selectors</span></span><br><span class="line">  <span class="keyword">const</span> selectors = [</span><br><span class="line">    <span class="string">&#x27;header&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;footer&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;.new-todo&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;header&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;footer&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;.new-todo&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;header&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;footer&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;.new-todo&#x27;</span>,</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  it.each(selectors)(</span><br><span class="line">    (selector, k) =&gt; <span class="string">`testing <span class="subst">$&#123;k + <span class="number">1</span>&#125;</span> selector <span class="subst">$&#123;selector&#125;</span>`</span>,</span><br><span class="line">    (selector) =&gt; &#123;</span><br><span class="line">      cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      <span class="comment">// simulate slow-loading page</span></span><br><span class="line">      cy.wait(<span class="number">10000</span>)</span><br><span class="line">      cy.get(selector).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/each-spec/one-spec.png" alt="Spec takes 90 seconds to run through each test"></p><p>Ughh, brutal. The best way to make the entire testing step faster is by running lots of tests in parallel, as described in the blog post <a href="/blog/split-spec/" title="Make Cypress Run Faster by Splitting Specs">Make Cypress Run Faster by Splitting Specs</a> and <a href="/blog/parallel-end-to-end-testing/" title="Parallel end to end testing with Cypress, Docker and GitLab">Parallel end to end testing with Cypress, Docker and GitLab</a>. But how do we split the tests generated using <code>it.each</code> into separate <em>spec files</em>?</p><p>First, instead of a single <code>visible-spec.js</code> spec file, create a folder and place several empty spec files there. For example, if we want to run the element tests using 3 test runners in parallel at a time, create 3 spec files there.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cypress/</span><br><span class="line">  integration/</span><br><span class="line">    visible-spec/</span><br><span class="line">      spec1.js</span><br><span class="line">      spec2.js</span><br><span class="line">      spec3.js</span><br></pre></td></tr></table></figure><p>Second, put the selector data into a JSON file to be imported from each spec.</p><figure class="highlight json"><figcaption><span>cypress/integration/visible-spec/selectors.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">&quot;header&quot;</span>,</span><br><span class="line">  <span class="string">&quot;footer&quot;</span>,</span><br><span class="line">  <span class="string">&quot;.new-todo&quot;</span>,</span><br><span class="line">  <span class="string">&quot;header&quot;</span>,</span><br><span class="line">  <span class="string">&quot;footer&quot;</span>,</span><br><span class="line">  <span class="string">&quot;.new-todo&quot;</span>,</span><br><span class="line">  <span class="string">&quot;header&quot;</span>,</span><br><span class="line">  <span class="string">&quot;footer&quot;</span>,</span><br><span class="line">  <span class="string">&quot;.new-todo&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Third, move each test <em>callback</em> function into a separate JavaScript file. It is not a spec itself, it just exports the test callback to be imported by other specs.</p><figure class="highlight js"><figcaption><span>cypress/integration/visible-spec/utils.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> testTitle = <span class="function">(<span class="params">selector, k</span>) =&gt;</span></span><br><span class="line">  <span class="string">`testing <span class="subst">$&#123;k + <span class="number">1</span>&#125;</span> selector <span class="subst">$&#123;selector&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> testElementSelector = <span class="function">(<span class="params">selector</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// simulate slow-loading page</span></span><br><span class="line">  cy.wait(<span class="number">10000</span>)</span><br><span class="line">  cy.get(selector).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now let&#39;s finish the individual spec files <code>spec1.js</code>, <code>spec2.js</code>, and <code>spec3.js</code>. Each will handle just a subset of the generates tests by ... filtering the data items! Since we have three different spec files, we will use module 3 to split the items into tests for each spec.</p><figure class="highlight js"><figcaption><span>cypress/integration/visible-spec/spec1.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> selectors <span class="keyword">from</span> <span class="string">&#x27;./selectors.json&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; testTitle, testElementSelector &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;visible elements&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// there are 3 spec files testing the &quot;selectors&quot; list</span></span><br><span class="line">  <span class="comment">// this spec file will pick the selectors 0, 3, 6, etc.</span></span><br><span class="line">  <span class="keyword">const</span> filteredSelectors = selectors.filter(<span class="function">(<span class="params">x, k</span>) =&gt;</span> k % <span class="number">3</span> === <span class="number">0</span>)</span><br><span class="line">  it.each(filteredSelectors)(testTitle, testElementSelector)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>🎁 You can find these specs in the repo <a href="https://github.com/bahmutov/todo-graphql-example">bahmutov/todo-graphql-example</a>.</p></blockquote><p>The <code>spec1.js</code> executes a third of the tests.</p><p><img src="../images/each-spec/third.png" alt="The first spec file only tests each third data case"></p><p>Similarly, the other two spec files pick up a third of the test cases each. The <code>spec2.js</code> uses modulo 3 equals 1 to filter the test cases</p><figure class="highlight js"><figcaption><span>cypress/integration/visible-spec/spec2.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;visible elements&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> filteredSelectors = selectors.filter(<span class="function">(<span class="params">x, k</span>) =&gt;</span> k % <span class="number">3</span> === <span class="number">1</span>)</span><br><span class="line">  it.each(filteredSelectors)(testTitle, testElementSelector)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The <code>spec3.js</code> picks the last third of the test cases using the module 3 equals 2.</p><figure class="highlight js"><figcaption><span>cypress/integration/visible-spec/spec3.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;visible elements&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> filteredSelectors = selectors.filter(<span class="function">(<span class="params">x, k</span>) =&gt;</span> k % <span class="number">3</span> === <span class="number">2</span>)</span><br><span class="line">  it.each(filteredSelectors)(testTitle, testElementSelector)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You can also split the list of items into groups using <code>Cypress._.chunk</code></p><figure class="highlight js"><figcaption><span>cypress/integration/visible-spec/spec1.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;visible elements&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// selectors has 9 items, split into chunks with max size 3</span></span><br><span class="line">  <span class="keyword">const</span> filteredSelectors = Cypress._.chunk(selectors, <span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line">  it.each(filteredSelectors)(testTitle, testElementSelector)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I have added the support for chunking the items into <code>describe.each</code> and <code>it.each</code>, see <a href="https://github.com/bahmutov/cypress-each#chunking">Chunking</a>. For example, if we want to split all items across three spec files, the test files would use:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// spec1.js</span></span><br><span class="line">it.each(selectors, <span class="number">3</span>, <span class="number">0</span>)(testTitle, testElementSelector)</span><br><span class="line"><span class="comment">// spec2.js</span></span><br><span class="line">it.each(selectors, <span class="number">3</span>, <span class="number">1</span>)(testTitle, testElementSelector)</span><br><span class="line"><span class="comment">// spec3.js</span></span><br><span class="line">it.each(selectors, <span class="number">3</span>, <span class="number">2</span>)(testTitle, testElementSelector)</span><br></pre></td></tr></table></figure><h2><span id="run-specs-in-parallel">Run specs in parallel</span></h2><p>To show the time savings from running the generated tests in parallel, I have set up recording the tests results on <a href="https://dashboard.cypress.io/projects/ahwxj4">Cypress Dashboard</a>. The initial run used a single machine:</p><p><img src="../images/each-spec/one-machine.png" alt="All tests including spec1, spec2, and spec3 ran on a single CI machine"></p><p>Then I set up the CI to run the same tests using 3 containers on GH Actions, see the <a href="https://github.com/bahmutov/todo-graphql-example/blob/master/.github/workflows/ci.yml">.github/workflows/ci.yml</a> file:</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="comment"># when one test fails, DO NOT cancel the other</span></span><br><span class="line">      <span class="comment"># containers, because this will kill Cypress processes</span></span><br><span class="line">      <span class="comment"># leaving the Dashboard hanging ...</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action/issues/48</span></span><br><span class="line">      <span class="attr">fail-fast:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="comment"># run 3 copies of the current job in parallel</span></span><br><span class="line">        <span class="attr">containers:</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">dev</span></span><br><span class="line">          <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:1234&#x27;</span></span><br><span class="line">          <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">parallel:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">&#x27;All tests&#x27;</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="comment"># pass the Dashboard record key as an environment variable</span></span><br><span class="line">          <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CYPRESS_RECORD_KEY</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>The new test run took 1/3 of the time because our long specs were executed on 3 machines at once.</p><p><img src="../images/each-spec/three.png" alt="Running specs in parallel on CI using 3 machines"></p><p>Much better.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have made &lt;a href=&quot;https://github.com/bahmutov/cypress-each&quot;&gt;cypress-each&lt;/a&gt; to simplify generating tests from data. This plugin has a
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Dynamic API Tests Using Cypress-Each Plugin</title>
    <link href="https://glebbahmutov.com/blog/dynamic-api-tests-using-cypress-each/"/>
    <id>https://glebbahmutov.com/blog/dynamic-api-tests-using-cypress-each/</id>
    <published>2021-10-12T04:00:00.000Z</published>
    <updated>2021-10-15T14:37:07.047Z</updated>
    
    <content type="html"><![CDATA[<p>Recently a friend of mine Murat Ozcan has asked me about using Cypress for performing API tests. Murat always goes straight to the source for Cypress answers.</p><p><img src="../images/cypress-each/q1.png" alt="Can Cypress be used for API testing? What about describe.each feature?"></p><p>The second screenshot is giving an example of the &quot;.each&quot; feature Murat iz looking for. Given an array of items, it generates a separate <code>describe</code> block with the title formatted using the data.</p><p><img src="../images/cypress-each/q2.png" alt="Describe.each example"></p><p>I am a big believer in using Cypress for API tests, see my blog post <a href="#">Post not found: api-testing-with-server-logs</a>, but I do agree - <code>jest.each</code> does look nice. Every time you import a JSON fixture with lots of test cases, iterating over it to create a separate test sure is nice, see the post <a href="/blog/dynamic-tests-from-fixture/" title="Dynamic Tests From Cypress Fixture">Dynamic Tests From Cypress Fixture</a>. Of course, Cypress uses <a href="https://mochajs.org/">Mocha</a> test engine, where <code>.each</code> is not built-in, instead it comes from a plugin <a href="https://github.com/ryym/mocha-each">mocha-each</a>. Is it hard to implement it ourselves?</p><p><strong>Note:</strong> Murat and I have done a very nice webinar together, check it out <a href="https://www.youtube.com/watch?v=aMPkaLOpyns">How Siemens SW Hub increased their test productivity by 38% with Cypress</a>.</p><h2><span id="own-implementation">Own implementation</span></h2><p>Making a helper like <code>it.each</code> is not difficult. Let&#39;s look at the example</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it.each([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])(<span class="string">&#x27;%d is a number&#x27;</span>, <span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">  expect(x).to.be.a(<span class="string">&#x27;number&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>From the above code, you can guess the signature of the <code>it.each</code> method. It takes an array and must return a function. That function expects two arguments: a title string pattern, and a callback function. The string pattern needs the value &quot;x&quot; to become the final string (we can use the Node&#39;s <code>util.format</code> method for this). The callback function is almost like the standard <code>it</code> callback function, except it needs the argument <code>x</code> applied. Great. Here is our implementation (ignore multiple arguments for now)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// standard Node module &quot;util&quot; has &quot;format&quot; function</span></span><br><span class="line"><span class="keyword">const</span> &#123; format &#125; = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!it.each) &#123;</span><br><span class="line">  it.each = <span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">titlePattern, testCallback</span>) </span>&#123;</span><br><span class="line">      values.forEach(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// define a test for each value</span></span><br><span class="line">        <span class="keyword">const</span> title = format(titlePattern, value)</span><br><span class="line">        it(title, testCallback.bind(<span class="literal">null</span>, value))</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can find my implementation at <a href="https://github.com/bahmutov/cypress-each">bahmutov/cypress-each</a>. Let&#39;s try using it.</p><h2><span id="example-application">Example application</span></h2><p>Let&#39;s take an example application with GraphQL API. We want to confirm the GraphQL endpoint is working correctly. Thus we want to hit it with our requests and confirm the responses.</p><blockquote class="pullquote"><p>🔎 You can find the source code for this blog post in <a href="https://github.com/bahmutov/todo-graphql-example">bahmutov/todo-graphql-example</a> repo.</p></blockquote><p>First, let&#39;s add my API testing plugin <a href="https://github.com/bahmutov/cy-api">cy-api</a> and <a href="https://github.com/bahmutov/cypress-each">cypress-each</a> helper.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D @bahmutov/cy-api cypress-each</span><br><span class="line">+ cypress-each@1.1.1</span><br><span class="line">+ @bahmutov/cy-api@1.5.0</span><br></pre></td></tr></table></figure><p>I have created <a href="https://github.com/bahmutov/todo-graphql-example/blob/master/cypress/integration/each-api-spec.js">each-api-spec.js</a> where we create each item one by one</p><figure class="highlight js"><figcaption><span>cypress/integration/each-api-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// adds &quot;describe.each&quot; and &quot;it.each&quot; helpers</span></span><br><span class="line"><span class="comment">// https://github.com/bahmutov/cypress-each</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-each&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; data &#125; <span class="keyword">from</span> <span class="string">&#x27;../fixtures/three.json&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; deleteAll &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Creates each item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  beforeEach(deleteAll)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  it.each(data.allTodos)(<span class="string">&#x27;creates an item&#x27;</span>, <span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// create the item using a network call</span></span><br><span class="line">    cy.request(&#123;</span><br><span class="line">      method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">      url: <span class="string">&#x27;http://localhost:3000/&#x27;</span>,</span><br><span class="line">      body: &#123;</span><br><span class="line">        operationName: <span class="string">&#x27;AddTodo&#x27;</span>,</span><br><span class="line">        query: <span class="string">`</span></span><br><span class="line"><span class="string">          mutation AddTodo($title: String!, $completed: Boolean!) &#123;</span></span><br><span class="line"><span class="string">            createTodo(title: $title, completed: $completed) &#123;</span></span><br><span class="line"><span class="string">              id</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">        variables: &#123;</span><br><span class="line">          title: item.title,</span><br><span class="line">          completed: item.completed,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// visit the page and check the item is present</span></span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> classAssertion = item.completed ? <span class="string">&#x27;have.class&#x27;</span> : <span class="string">&#x27;not.have.class&#x27;</span></span><br><span class="line">    cy.contains(<span class="string">&#x27;.todo&#x27;</span>, item.title).should(classAssertion, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The tests pass</p><p><img src="../images/cypress-each/pass.png" alt="Passing tests"></p><p>We need a better title for each test. Currently we pass an object into the callback, but we really want to use the title property to name the test. Let&#39;s extract it and keep next to the object. Let&#39;s look the helper methods from Lodash bundled with Cypress to create pairs of values to be passed to <code>it.each</code> callback. The first value will be the title from the object, the second will be the object itself.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> titles = Cypress._.map(data.allTodos, <span class="string">&#x27;title&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> items = Cypress._.zip(titles, data.allTodos)</span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line">it.each(items)(<span class="string">&#x27;creates an item &quot;%s&quot;&#x27;</span>, <span class="function">(<span class="params">title, item</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-each/titles.png" alt="Using the title property to name the test"></p><p>Much better.</p><h2><span id="api-tests">Api tests</span></h2><p>We are using the <a href="https://on.cypress.io/request">cy.request</a> command to execute the HTTP request. Let&#39;s use the wrapper provided by <code>@bahmutov/cy-api</code> plugin to make the same request, but output the request and response to the browser. This will make understanding the tests much simpler, especially as they run on CI. All we need to do is to replace <code>cy.request</code> with <code>cy.api</code> command</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// adds the &quot;cy.api&quot; command</span></span><br><span class="line"><span class="comment">// https://github.com/bahmutov/cy-api</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@bahmutov/cy-api/support&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> titles = Cypress._.map(data.allTodos, <span class="string">&#x27;title&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> items = Cypress._.zip(titles, data.allTodos)</span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line">it.each(items)(<span class="string">&#x27;creates an item &quot;%s&quot;&#x27;</span>, <span class="function">(<span class="params">title, item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// create the item using a network call</span></span><br><span class="line">  cy.api(&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>To better see the request and the response, let&#39;s <a href="/blog/visit-blank-page-between-tests/" title="Visit The Blank Page Between Cypress Tests">Visit The Blank Page Between Cypress Tests</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// visit the blank page</span></span><br><span class="line">  <span class="comment">// to better see the API requests and responses</span></span><br><span class="line">  cy.window().then(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">    win.location.href = <span class="string">&#x27;about:blank&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Now we should see each request going to the server, before visiting the page shows the web application. We can inspect the results by hovering over the &quot;API&quot; command.</p><p><img src="../images/cypress-each/api.gif" alt="Inspecting the HTTP request fired using the cy.api command"></p><p>Nice.</p><h2><span id="update-1-iteach-example">Update 1: it.each example</span></h2><p>Recently, I have recorded a video showing how to create multiple separate tests using <code>it.each</code> where each test checks if a particular selector is valid. Find the video at <a href="https://youtu.be/utPKRV_fL1E">https://youtu.be/utPKRV_fL1E</a> or watch it below.</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/utPKRV_fL1E" title="Using cypress-each To Create Separate Tests" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/refactor-using-each/" title="Refactor Tests To Be Independent And Fast Using Cypress-Each Plugin">Refactor Tests To Be Independent And Fast Using Cypress-Each Plugin</a></li><li><a href="/blog/dynamic-tests-from-fixture/" title="Dynamic Tests From Cypress Fixture">Dynamic Tests From Cypress Fixture</a></li><li><a href="https://www.cypress.io/blog/2017/11/07/add-gui-to-your-e2e-api-tests/">Add GUI to your E2E API tests</a></li><li><a href="https://github.com/bahmutov/cypress-each">cypress-each</a></li><li><a href="https://github.com/bahmutov/cy-api">cy-api</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently a friend of mine Murat Ozcan has asked me about using Cypress for performing API tests. Murat always goes straight to the source
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress And TestRail</title>
    <link href="https://glebbahmutov.com/blog/cypress-and-testrail/"/>
    <id>https://glebbahmutov.com/blog/cypress-and-testrail/</id>
    <published>2021-10-11T04:00:00.000Z</published>
    <updated>2021-10-13T17:39:55.904Z</updated>
    
    <content type="html"><![CDATA[<p>If your organization is using TestRail to manage test cases and collect all test results in one place, you might need to upload the Cypress test results too. The existing plugin <a href="https://github.com/Vivify-Ideas/cypress-testrail-reporter">cypress-testrail-reporter</a> I found is broken in a variety of ways, and does not support uploading test from parallel test runs. Thus I wrote my own plugin called <a href="https://github.com/bahmutov/cypress-testrail-simple">cypress-testrail-simple</a> which supports TestRail when Cypress runs in parallel mode. This blog post teaches you how to use the <code>cypress-testrail-simple</code> plugin with GitHub Actions and CircleCI workflows.</p><!-- toc --><ul><li><a href="#testrail-project">TestRail project</a><ul><li><a href="#test-cases">Test cases</a></li><li><a href="#authentication">Authentication</a></li><li><a href="#create-a-test-run">Create a test run</a></li><li><a href="#reporting-test-results">Reporting test results</a></li><li><a href="#closing-the-test-run">Closing the test run</a></li></ul></li><li><a href="#cypress-testrail-simple">cypress-testrail-simple</a></li><li><a href="#github-actions">GitHub Actions</a><ul><li><a href="#github-actions-workflow-explained">GitHub Actions workflow explained</a></li></ul></li><li><a href="#circleci">CircleCI</a><ul><li><a href="#circleci-workflow-explanation">CircleCI workflow explanation</a></li></ul></li><li><a href="#update-1-pick-the-test-cases-from-spec-files">Update 1: pick the test cases from spec files</a></li></ul><!-- tocstop --><h2><span id="testrail-project">TestRail project</span></h2><p>To demo the TestRail and Cypress work, I have created a new repository <a href="https://github.com/bahmutov/test-rail-example">bahmutov/test-rail-example</a> and a new TestRail project also named &quot;test-rail-example&quot;.</p><p><img src="../images/cypress-and-testrail/project.png" alt="TestRail project"></p><p>Note my server TestRail URL is &quot;<a href="https://bahmutov.testrail.io&quot;">https://bahmutov.testrail.io&quot;</a>, and my project ID is 2. The prefix &quot;P&quot; is just for show.</p><h3><span id="test-cases">Test cases</span></h3><p>Before sending test results, we need to create test cases in our project. I have created 3 test cases shown in the list.</p><p><img src="../images/cypress-and-testrail/test-cases.png" alt="Test cases"></p><p>Note: TestRail project keeps incrementing the ID shared between the test results and the test cases across all projects for the same account. Thus creating three test cases in a row gave them IDs <code>C110</code>, <code>C111</code>, and <code>C112</code> because I already had a vew test runs in the other projects. The <code>C</code> prefix is just for the viewers, when we update a test case via API calls we will use the numeric part, like 110, 111, and 112.</p><h3><span id="authentication">Authentication</span></h3><p>To create new test runs, and post test results via API calls, we need to authenticate. We could authenticate using the username (the email) and the password, but a better strategy is for the user to create an API key. The site administrator has to enable API authentication first, before create the first key.</p><p><img src="../images/cypress-and-testrail/api-key.png" alt="API key"></p><h3><span id="create-a-test-run">Create a test run</span></h3><p>Typically, we would do the following to send the test results to TestRail</p><ul><li>create a new test run</li><li>post test results for the run</li><li>close the test run</li></ul><p>Here is the first step: creating a new test run for a project &quot;2&quot; using an API call.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;Content-Type: application&#x2F;json&quot; \</span><br><span class="line">  -u &#39;&lt;username email&gt;:&lt;API key&gt;&#39; \</span><br><span class="line">  --request POST \</span><br><span class="line">  --data &#39;&#123;&quot;name&quot;:&quot;test run 1&quot;,&quot;description&quot;:&quot;testing...&quot;&#125;&#39; \</span><br><span class="line">  &quot;https:&#x2F;&#x2F;bahmutov.testrail.com&#x2F;index.php?&#x2F;api&#x2F;v2&#x2F;add_run&#x2F;2&quot;</span><br></pre></td></tr></table></figure><p>Tip: see the TestRail API docs <a href="https://www.gurock.com/testrail/docs/api/reference/">here</a></p><p>The call returns a JSON object with the new test run&#39;s ID. All existing test cases will be included in the test run and will have the status &quot;untested&quot;.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -H ...</span><br><span class="line"></span><br><span class="line">&#123;&quot;id&quot;:57,&quot;suite_id&quot;:46,&quot;name&quot;:&quot;test run 1&quot; ...&#125;</span><br></pre></td></tr></table></figure><p>The test run 57 has 3 test results to be reported.</p><p><img src="../images/cypress-and-testrail/test-run.png" alt="New test run"></p><h3><span id="reporting-test-results">Reporting test results</span></h3><p>We can report the test results by making API calls. For example, let&#39;s report all 3 test results at once as passing.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;Content-Type: application&#x2F;json&quot; \</span><br><span class="line">  -u &#39;&lt;username email&gt;:&lt;API key&gt;&#39; \</span><br><span class="line">  --request POST \</span><br><span class="line">  --data &#39;&#123;&quot;results&quot;:[&#123;&quot;case_id&quot;:110,&quot;status_id&quot;:1&#125;,</span><br><span class="line">    &#123;&quot;case_id&quot;:111,&quot;status_id&quot;:1&#125;,</span><br><span class="line">    &#123;&quot;case_id&quot;:112,&quot;status_id&quot;:1&#125;]&#125;&#39; \</span><br><span class="line">  &quot;https:&#x2F;&#x2F;bahmutov.testrail.com&#x2F;index.php?&#x2F;api&#x2F;v2&#x2F;add_results_for_cases&#x2F;57&quot;</span><br></pre></td></tr></table></figure><p>The TestRail Dashboard shows the passed test results, but the run is still open.</p><p><img src="../images/cypress-and-testrail/passed.png" alt="Test results"></p><h3><span id="closing-the-test-run">Closing the test run</span></h3><p>All test results for the known test cases are in. We can fetch the test run stats to see them:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;Content-Type: application&#x2F;json&quot; \</span><br><span class="line">  -u &#39;&lt;username email&gt;:&lt;API key&gt;&#39; \</span><br><span class="line">  --request GET \</span><br><span class="line">  &quot;https:&#x2F;&#x2F;bahmutov.testrail.com&#x2F;index.php?&#x2F;api&#x2F;v2&#x2F;get_run&#x2F;57&quot;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;:57,</span><br><span class="line">  &quot;name&quot;:&quot;test run 1&quot;,</span><br><span class="line">  &quot;description&quot;:&quot;testing...&quot;,</span><br><span class="line">  &quot;is_completed&quot;:false,</span><br><span class="line">  &quot;passed_count&quot;:3,</span><br><span class="line">  &quot;blocked_count&quot;:0,</span><br><span class="line">  &quot;untested_count&quot;:0,</span><br><span class="line">  &quot;retest_count&quot;:0,</span><br><span class="line">  &quot;failed_count&quot;:0</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The properties &quot;is_completed:false&quot; and &quot;untested_count:0&quot; tells us all the test results are in, and we could close the test run.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;Content-Type: application&#x2F;json&quot; \</span><br><span class="line">  -u &#39;&lt;username email&gt;:&lt;API key&gt;&#39; \</span><br><span class="line">  --request POST \</span><br><span class="line">  &quot;https:&#x2F;&#x2F;bahmutov.testrail.com&#x2F;index.php?&#x2F;api&#x2F;v2&#x2F;close_run&#x2F;57&quot;</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-and-testrail/closed.png" alt="Closed test run"></p><h2><span id="cypress-testrail-simple">cypress-testrail-simple</span></h2><p>Now let&#39;s start the new run, report the results, and close the run using GitHub Action workflow. We will report the results from the Cypress tests and perform these operations using the <a href="https://github.com/bahmutov/cypress-testrail-simple">cypress-testrail-simple</a> plugin. First, we need to install it.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress-testrail-simple</span><br></pre></td></tr></table></figure><p>The API calls from the Cypress Test Runner will be made from the plugin file. Thus add to your plugin file the following plugin registration line:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cypress/plugins/index.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://github.com/bahmutov/cypress-testrail-simple</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;cypress-testrail-simple/src/plugin&#x27;</span>)(on, config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>🎁 You can find the complete project at <a href="https://github.com/bahmutov/test-rail-example">bahmutov/test-rail-example</a></p></blockquote><h2><span id="github-actions">GitHub Actions</span></h2><p>Let&#39;s first run and report our test results using GitHub Actions workflow using the official <a href="https://github.com/cypress-io/github-action">Cypress GH Action</a>. Here is the workflow file <a href="https://github.com/bahmutov/test-rail-example/blob/main/.github/workflows/ci.yml">.github/workflows/ci.yml</a></p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">tests:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="comment"># pass TestRail settings from the project secrets</span></span><br><span class="line">      <span class="comment"># via environment variables</span></span><br><span class="line">      <span class="attr">TESTRAIL_HOST:</span> <span class="string">$&#123;&#123;secrets.TESTRAIL_HOST&#125;&#125;</span></span><br><span class="line">      <span class="attr">TESTRAIL_USERNAME:</span> <span class="string">$&#123;&#123;secrets.TESTRAIL_USERNAME&#125;&#125;</span></span><br><span class="line">      <span class="attr">TESTRAIL_PASSWORD:</span> <span class="string">$&#123;&#123;secrets.TESTRAIL_PASSWORD&#125;&#125;</span></span><br><span class="line">      <span class="comment"># the project ID is not that secret</span></span><br><span class="line">      <span class="attr">TESTRAIL_PROJECTID:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Install NPM dependencies, cache them correctly</span></span><br><span class="line">      <span class="comment"># do not run tests though - we need to add the TestRail run first</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">📦</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">runTests:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># you can pass GitHub information in the name and description</span></span><br><span class="line">      <span class="comment"># to include in the TestRail run information</span></span><br><span class="line">      <span class="comment"># https://docs.github.com/en/actions/learn-github-actions/contexts</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Start</span> <span class="string">TestRail</span> <span class="string">Run</span> <span class="string">🏃🏻‍♂️</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">testRail</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">commitSubject=&quot;$&#123;&#123;</span> <span class="string">github.event.commits[0].message</span> <span class="string">&#125;&#125;&quot;</span></span><br><span class="line">          <span class="string">runName=&quot;Testing</span> <span class="attr">on GitHub Actions:</span> <span class="string">$&#123;commitSubject&#125;&quot;</span></span><br><span class="line">          <span class="string">runDescription=&quot;Cypress</span> <span class="string">tests</span> <span class="string">for</span> <span class="string">commit</span> <span class="string">$&#123;GITHUB_SHA&#125;</span> <span class="string">$&#123;GITHUB_REF&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="string">echo</span> <span class="string">$&#123;commitSubject&#125;</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">$&#123;runName&#125;</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">$&#123;runDescription&#125;</span></span><br><span class="line"></span><br><span class="line">          <span class="string">runId=$(npx</span> <span class="string">testrail-start-run</span> <span class="string">&quot;$&#123;runName&#125;&quot;</span> <span class="string">&quot;$&#123;runDescription&#125;&quot;</span><span class="string">)</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;TestRail run id $&#123;runId&#125;&quot;</span></span><br><span class="line">          <span class="comment"># save the run ID as the output from this step</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;::set-output name=runId::$&#123;runId&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Now run the Cypress tests, and the cypress-testrail-simple</span></span><br><span class="line">      <span class="comment"># plugin will automatically add the results to TestRail</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">install-command:</span> <span class="string">echo</span> <span class="string">&quot;Already installed&quot;</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="comment"># pass the run ID from the previous step via an env variable</span></span><br><span class="line">          <span class="attr">TESTRAIL_RUN_ID:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.testRail.outputs.runId</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Close</span> <span class="string">TestRail</span> <span class="string">Run</span> <span class="string">🏁</span></span><br><span class="line">        <span class="comment"># always close the test run, even if the previous steps have failed</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">always()</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npx</span> <span class="string">testrail-close-run</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.testRail.outputs.runId</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><ul><li>we install all dependencies using <code>cypress-io/github-action</code> without running the tests</li><li>we create a new TestRail run using a script included with <code>cypress-testrail-simple</code></li><li>the script command <code>runId=$(npx testrail-start-run ...)</code> returns the id of the created test run</li><li>we pass the test run to the plugin while running the Cypress tests as an environment variable via GitHub expression syntax <code>TESTRAIL_RUN_ID: $&#123;&#123; steps.testRail.outputs.runId &#125;&#125;</code></li><li>after the tests complete, we close the test run using the included script <code>npx testrail-close-run $&#123;&#123; steps.testRail.outputs.runId &#125;&#125;</code>. Note the important detail: we always call the close the run command, since the previous step running the Cypress tests might have failed.</li></ul><p>To pass the TestRail settings to the plugin, we use repo secrets and environment variables.</p><p><img src="../images/cypress-and-testrail/secrets.png" alt="Repo secrets"></p><p><strong>Tip:</strong> you can print verbose log messages from the <code>cypress-testrail-simple</code> plugin by running with an environment variable <code>DEBUG=cypress-testrail-simple</code>, see the <a href="https://github.com/bahmutov/cypress-testrail-simple#debugging">Debugging section</a></p><h3><span id="github-actions-workflow-explained">GitHub Actions workflow explained</span></h3><p>When the test runs, the new run with ID <code>60</code> is started. I used the commit message and SHA in the run&#39;s name and description by grabbing them from the GitHub environment variables</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">commitSubject&#x3D;&quot;$&#123;&#123; github.event.commits[0].message &#125;&#125;&quot;</span><br><span class="line">runName&#x3D;&quot;Testing on GitHub Actions: $&#123;commitSubject&#125;&quot;</span><br><span class="line">runDescription&#x3D;&quot;Cypress tests for commit $&#123;GITHUB_SHA&#125; $&#123;GITHUB_REF&#125;&quot;</span><br><span class="line">runId&#x3D;$(npx testrail-start-run &quot;$&#123;runName&#125;&quot; &quot;$&#123;runDescription&#125;&quot;)</span><br><span class="line">echo &quot;TestRail run id $&#123;runId&#125;&quot;</span><br></pre></td></tr></table></figure><p>We can see the output on GitHub</p><p><img src="../images/cypress-and-testrail/start-run.png" alt="Started run 60"></p><p>The Cypress plugin uses <code>after:spec</code> event hook to send the test results for tests with <code>C\d+</code> pattern in their names. You can see the found tests in the terminal output:</p><p><img src="../images/cypress-and-testrail/found-tests.png" alt="Test cases found in the first spec"></p><p>The <a href="/blog/cypress-test-statuses/" title="Cypress Test Statuses">Cypress Test Statuses</a> are mapped to TestRail test status numbers. For example, the passed tests are send using <code>status_id: 1</code>.</p><p>After all tests are finished (assuming they ran on a single test container), we need to close the test run. We can use another script that comes with the <code>cypress-testrail-simple</code> plugin. We grab the run ID value from the output of the previous step that created the new run.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Close</span> <span class="string">TestRail</span> <span class="string">Run</span> <span class="string">🏁</span></span><br><span class="line">  <span class="comment"># always close the test run, even if the previous steps have failed</span></span><br><span class="line">  <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">always()</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">npx</span> <span class="string">testrail-close-run</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.testRail.outputs.runId</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>Beautiful. The API call to close the run returns the final run stats, which are printed.</p><p><img src="../images/cypress-and-testrail/close-run.png" alt="Closed the TestRail run"></p><h2><span id="circleci">CircleCI</span></h2><p>Let&#39;s run our project on CircleCI using the official <a href="https://github.com/cypress-io/circleci-orb">cypress-io/circelci-orb</a>. We want to run the <a href="https://on.cypress.io/parallelize">tests in parallel</a>, thus we need to set up the test recording on <a href="https://on.cypress.io/dashboard-introduction">Cypress Dashboard</a>. Next, we set up a new project on CircleCI and set the TestRail values using the environment variables. To simplify the setup, I am passing the <code>TESTRAIL_PROJECTID: 2</code> as an environment variable.</p><p><img src="../images/cypress-and-testrail/circleci-env.png" alt="CircleCI environment variable: TestRail + Cypress Dashboard recording key"></p><p>Here is our complete <a href="https://github.com/bahmutov/test-rail-example/blob/main/.circleci/config.yml">.circleci/config.yml</a> file</p><figure class="highlight yml"><figcaption><span>.circleci/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="comment"># https://github.com/cypress-io/circleci-orb</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setting environment variables on CircleCI</span></span><br><span class="line"><span class="comment"># https://circleci.com/docs/2.0/env-vars/</span></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="comment"># every testing job needs to install dependencies and Cypress</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/install:</span></span><br><span class="line">          <span class="comment"># instead of building the application</span></span><br><span class="line">          <span class="comment"># or in addition to it, start a new TestRail run</span></span><br><span class="line">          <span class="comment"># and save the run ID in a text file - it will be passed</span></span><br><span class="line">          <span class="comment"># to other CircleCI jobs via workspace together with the other files</span></span><br><span class="line">          <span class="attr">build:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">runId=$(npx</span> <span class="string">testrail-start-run</span> <span class="string">\</span></span><br><span class="line">              <span class="string">&quot;Testing on Circle workflow $&#123;CIRCLE_WORKFLOW_ID&#125;&quot;</span> <span class="string">\</span></span><br><span class="line">              <span class="string">&quot;Cypress tests on CircleCI $&#123;CIRCLE_BUILD_URL&#125;&quot;</span><span class="string">)</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;TestRail run id $&#123;runId&#125;&quot;</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">$&#123;runId&#125;</span> <span class="string">&gt;</span> <span class="string">runId.txt</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;Saved file runId.txt&quot;</span></span><br><span class="line">            <span class="string">cat</span> <span class="string">runId.txt</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># cypress-testrail-simple automatically tries to read</span></span><br><span class="line">      <span class="comment"># the TestRail run ID from the file runId.txt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">requires:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">cypress/install</span></span><br><span class="line">          <span class="comment"># install-command: echo &#x27;Nothing to install in this job&#x27;</span></span><br><span class="line">          <span class="comment"># print the file with the TestRail run ID</span></span><br><span class="line">          <span class="attr">install-command:</span> <span class="string">ls</span> <span class="string">-la</span> <span class="string">&amp;&amp;</span> <span class="string">cat</span> <span class="string">runId.txt</span></span><br><span class="line">          <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">parallel:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">parallelism:</span> <span class="number">2</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">CircleCI</span></span><br><span class="line">          <span class="comment"># Try to close the TestRail run using job&#x27;s post-steps</span></span><br><span class="line">          <span class="comment"># https://circleci.com/docs/2.0/configuration-reference/</span></span><br><span class="line">          <span class="comment"># Note that the close script first checks if there are any</span></span><br><span class="line">          <span class="comment"># remaining untested cases. Only when the untested count is 0</span></span><br><span class="line">          <span class="comment"># then the TestRail run is closed.</span></span><br><span class="line">          <span class="attr">post-steps:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">Close</span> <span class="string">TestRail</span> <span class="string">Run</span></span><br><span class="line">                <span class="attr">when:</span> <span class="string">always</span></span><br><span class="line">                <span class="attr">command:</span> <span class="string">npx</span> <span class="string">testrail-close-run</span></span><br></pre></td></tr></table></figure><h3><span id="circleci-workflow-explanation">CircleCI workflow explanation</span></h3><p>When running on CircleCI we will install the dependencies using a single <code>cypress/install</code> job, then we will run the tests using several copies of the <code>cypress/run</code> job. The install job will start the new TestRail run, but we have a problem - CircleCI does not have a mechanism similar to the GitHub Actions for passing a value from one step to another one. Thus, we will simply write the created run ID into a file. That file will be included with all other files installed by the Install job in the workspace. That workspace is passed to the <code>cypress/run</code> jobs automatically. The <code>cypress-testrail-simple</code> plugin automatically reads the test run ID from the environment variable and from the file <code>runID.txt</code>.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># every testing job needs to install dependencies and Cypress</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cypress/install:</span></span><br><span class="line">    <span class="comment"># instead of building the application</span></span><br><span class="line">    <span class="comment"># or in addition to it, start a new TestRail run</span></span><br><span class="line">    <span class="comment"># and save the run ID in a text file - it will be passed</span></span><br><span class="line">    <span class="comment"># to other CircleCI jobs via workspace together with the other files</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">runId=$(npx</span> <span class="string">testrail-start-run</span> <span class="string">\</span></span><br><span class="line">        <span class="string">&quot;Testing on Circle workflow $&#123;CIRCLE_WORKFLOW_ID&#125;&quot;</span> <span class="string">\</span></span><br><span class="line">        <span class="string">&quot;Cypress tests on CircleCI $&#123;CIRCLE_BUILD_URL&#125;&quot;</span><span class="string">)</span></span><br><span class="line">      <span class="string">echo</span> <span class="string">&quot;TestRail run id $&#123;runId&#125;&quot;</span></span><br><span class="line">      <span class="string">echo</span> <span class="string">$&#123;runId&#125;</span> <span class="string">&gt;</span> <span class="string">runId.txt</span></span><br><span class="line">      <span class="string">echo</span> <span class="string">&quot;Saved file runId.txt&quot;</span></span><br><span class="line">      <span class="string">cat</span> <span class="string">runId.txt</span></span><br></pre></td></tr></table></figure><p>The run containers all use workspace, and <em>each</em> call &quot;close the TestRail run&quot; at the end. The script <code>npx testrail-close-run</code> is fine to run multiple times. It first checks if the test run has been closed already (maybe another test job has finished first). If the test run is still open, it checks how many test cases are in the status <code>untested</code> by checking the <code>untested_count</code> value. If all test cases have some result (passed or failed), then the test run can be closed.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cypress-testrail-simple automatically tries to read</span></span><br><span class="line"><span class="comment"># the TestRail run ID from the file runId.txt</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">    <span class="attr">requires:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cypress/install</span></span><br><span class="line">    <span class="comment"># install-command: echo &#x27;Nothing to install in this job&#x27;</span></span><br><span class="line">    <span class="comment"># print the file with the TestRail run ID</span></span><br><span class="line">    <span class="attr">install-command:</span> <span class="string">ls</span> <span class="string">-la</span> <span class="string">&amp;&amp;</span> <span class="string">cat</span> <span class="string">runId.txt</span></span><br><span class="line">    <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">parallel:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">parallelism:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">CircleCI</span></span><br><span class="line">    <span class="comment"># Try to close the TestRail run using job&#x27;s post-steps</span></span><br><span class="line">    <span class="comment"># https://circleci.com/docs/2.0/configuration-reference/</span></span><br><span class="line">    <span class="comment"># Note that the close script first checks if there are any</span></span><br><span class="line">    <span class="comment"># remaining untested cases. Only when the untested count is 0</span></span><br><span class="line">    <span class="comment"># then the TestRail run is closed.</span></span><br><span class="line">    <span class="attr">post-steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Close</span> <span class="string">TestRail</span> <span class="string">Run</span></span><br><span class="line">          <span class="attr">when:</span> <span class="string">always</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">npx</span> <span class="string">testrail-close-run</span></span><br></pre></td></tr></table></figure><p>I think the above model of passing the test run ID and closing the run is flexible enough to satisfy most needs. If you do find something not working, or missing, please open an issue at <a href="https://github.com/bahmutov/cypress-testrail-simple">bahmutov/cypress-testrail-simple</a>.</p><h2><span id="update-1-pick-the-test-cases-from-spec-files">Update 1: pick the test cases from spec files</span></h2><p>Sometimes you want to run a subset of the tests, or the TestRail project might have only some of the test cases automated using Cypress (and the rest could be manual, or automated using another tool). By default, a new test run includes all test cases. You can limit the test cases in a run using the <code>--spec</code> option when starting a new test run. For example, let&#39;s run just the user tests from the <code>cypress/integration/user-tests.js</code> spec file:</p><figure class="highlight js"><figcaption><span>cypress/integration/user-tests.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;User tests&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;C111 User can log in&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.wait(<span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;C112 User can log out&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.log(<span class="string">&#x27;in the last test!&#x27;</span>)</span><br><span class="line">    cy.wait(<span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Each test title has its <code>C\d+</code> case number. When starting a new test run, we can tell the script to look through the file source code, find these 2 test case IDs and create a test run using <em>only</em> those test cases.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx testrail-start-run --spec &quot;cypress&#x2F;integration&#x2F;user-tests.js&quot;</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> the <code>--spec</code> allows glob parameters, thus you can pick multiple test files.</p><p>The test run will be closed when the two test case results are reported.</p><p><img src="../images/cypress-and-testrail/user-tests.png" alt="Test run with user tests only"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If your organization is using TestRail to manage test cases and collect all test results in one place, you might need to upload the Cypre
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress Skills Ladder</title>
    <link href="https://glebbahmutov.com/blog/cypress-skills-ladder/"/>
    <id>https://glebbahmutov.com/blog/cypress-skills-ladder/</id>
    <published>2021-10-07T04:00:00.000Z</published>
    <updated>2021-10-26T13:55:02.759Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine you are trying to get a job as a test engineer with a focus on writing Cypress tests. What do you need to know? Here is what I would suggest you learn.</p><p><strong>Tip:</strong> when applying to an open position, you do NOT have to know 100% of the list below. I would hire anyone who has experience with most points below, and who has a plan to learn the rest.</p><h2><span id="skills">Skills</span></h2><ul><li style="list-style: none"><input type="checkbox"> writing Cypress tests</li><li style="list-style: none"><input type="checkbox"> refactor and split a long Cypress test into shorter ones</li><li style="list-style: none"><input type="checkbox"> organize multiple Cypress tests by topic and feature</li><li style="list-style: none"><input type="checkbox"> passing the values to the test runner through environment variables or command line arguments</li><li style="list-style: none"><input type="checkbox"> selecting tests to run using command line arguments and <code>cypress.json</code> settings</li><li style="list-style: none"><input type="checkbox"> the difference between the <code>Cypress.env</code> and the <code>Cypress.config</code> objects</li><li style="list-style: none"><input type="checkbox"> how to set the <code>baseUrl</code> in the test, in the <code>cypress.json</code>, via command line arguments, or via environemnt variables</li><li style="list-style: none"><input type="checkbox"> authentication using basic auth</li><li style="list-style: none"><input type="checkbox"> authentication using cookies</li><li style="list-style: none"><input type="checkbox"> writing custom commands to wrap the common authentication code</li><li style="list-style: none"><input type="checkbox"> controlling the viewport size</li><li style="list-style: none"><input type="checkbox"> using test retries</li><li style="list-style: none"><input type="checkbox"> writing custom commands to select elements following the Cypress&#39; best practices, like using a data test ID attribute</li><li style="list-style: none"><input type="checkbox"> installing and using additional Cypress plugins, like <a href="https://github.com/dmtrKovalenko/cypress-real-events">cypress-real-events</a>, <a href="https://github.com/cypress-io/cypress-grep">cypress-grep</a>, <a href="https://github.com/bahmutov/cypress-data-session">cypress-data-session</a>, <a href="https://github.com/bahmutov/cypress-recurse">cypress-recurse</a>, <a href="https://github.com/component-driven/cypress-axe">cypress-axe</a>, and <a href="https://on.cypress.io/plugins">others</a></li><li style="list-style: none"><input type="checkbox"> writing Node.js code to run in the server process to be called via <a href="https://on.cypress.io/task">cy.task</a>. For example, reading data from a database to confirm the data displayed on the page</li><li style="list-style: none"><input type="checkbox"> debugging the test flake, making the tests wait for the app using the built-in <a href="https://on.cypress.io/retry-ability">retry-ability</a> mechanism</li><li style="list-style: none"><input type="checkbox"> observing the calls the application makes using <a href="https://on.cypress.io/intercept">cy.intercept</a></li><li style="list-style: none"><input type="checkbox"> stubbing the network calls the application makes using <a href="https://on.cypress.io/intercept">cy.intercept</a>, modifying the response, or using a fixture file</li><li style="list-style: none"><input type="checkbox"> loading and using fixtures using the <a href="https://on.cypress.io/fixture">cy.fixture</a> command</li><li style="list-style: none"><input type="checkbox"> making calls from the tests to the REST endpoints using <a href="https://on.cypress.io/request">cy.request</a></li><li style="list-style: none"><input type="checkbox"> making calls from the tests to the GraphQL endpoints using <a href="https://on.cypress.io/request">cy.request</a></li><li style="list-style: none"><input type="checkbox"> setting up IntelliSense and using Cypress types to ensure the specs use the commands correctly</li><li style="list-style: none"><input type="checkbox"> recording the tests on Cypress Dashboard</li><li style="list-style: none"><input type="checkbox"> running Cypress on CircleCI using <a href="https://github.com/cypress-io/circleci-orb">Cypress CircleCI Orb</a>running Cypress tests in parallel on CircleCI</li><li style="list-style: none"><input type="checkbox"> running Cypress using its <a href="https://github.com/cypress-io/github-action">GitHub Action</a></li><li style="list-style: none"><input type="checkbox"> accessing the data exposed by the application through the “window” object</li><li style="list-style: none"><input type="checkbox"> calling the application code from the test (called “app actions”)</li><li style="list-style: none"><input type="checkbox"> setting up 3rd party visual testing using a Cypress plugin, following the <a href="https://on.cypress.io/visual-testing">visual testing guide</a></li><li style="list-style: none"><input type="checkbox"> instrumenting the application source code and using the <a href="https://on.cypress.io/code-coverage">Cypress code coverage</a> plugin to find the features not currently covered by any tests.</li><li style="list-style: none"><input type="checkbox"> writing API tests using Cypress, see the information at <a href="https://github.com/bahmutov/cy-api">cy-api</a> plugin</li><li style="list-style: none"><input type="checkbox"> generating the Cypress dynamically from the fixture files</li><li style="list-style: none"><input type="checkbox"> writing React component tests using Cypress component testing feature</li></ul><h2><span id="good-news">Good news</span></h2><p>The above list might seem long. But here are two things to remember:</p><ol><li>It gives you an idea of gaps in your knowledge, so you can fill them quickly</li><li>All these topics are <em>documented really really well</em>. See <a href="https://docs.cypress.io">Cypress docs</a>, <a href="https://glebbahmutov.com/cypress-examples">Cypress examples</a>, work through <a href="https://github.com/bahmutov/cypress-workshop-basics">Cypress Basics Workshop</a>, read <a href="../tags/cypress/">my posts about Cypress</a>, and watch my <a href="https://www.youtube.com/playlist?list=PLP9o9QNnQuAYYRpJzDNWpeuOVTwxmIxcI">Cypress videos</a> to learn everything there is to know. Even better: you can search across all this knowledge in a single place at <a href="https://cypress.tips/search">cypress.tips/search</a>. Start with <a href="https://on.cypress.io/courses">free Cypress courses</a>, then fill the gaps by searching.</li></ol><h2><span id="javascript-resources">JavaScript resources</span></h2><p>To effectively code Cypress tests, you need to know JavaScript. I recommend the following free resources:</p><ul><li>Online tutorial <a href="https://gitbookio.gitbooks.io/JavaScript">Learn Javascript</a> with small exercises</li><li>Book <a href="https://eloquentjavascript.net/">Eloquent JavaScript</a></li><li>Book <a href="http://read.humanjavascript.com/">Human JavaScript</a></li><li>an entire collection of free JavaScript books at the <a href="https://freefrontend.com/javascript-books/">Free Frontend</a> site</li><li><a href="https://javascript.info/">The Modern JavaScript Tutorial</a> teaches you both JavaScript and HTML programming, and is available in several translations.</li></ul><p>I have a blog post <a href="/blog/javascript-books/" title="JavaScript books">JavaScript books</a> with additional links</p><p>You can also learn JavaScript by watching these videos:</p><ul><li><a href="https://www.youtube.com/watch?v=PkZNo7MFNFg">Learn JavaScript - Full Course for Beginners</a> from freeCodeCamp</li><li><a href="https://www.codecademy.com/learn/introduction-to-javascript">Learn JavaScript</a> by CodeAcademy</li></ul><h2><span id="update-1-interactive-skills-form">Update 1: Interactive skills form</span></h2><p>I have put the above list of skills as a form at <a href="https://cypress.tips/skills">https://cypress.tips/skills</a>. You can use this form for self-evaluation or when interviewing a candidate for a job that requires writing Cypress tests. Tip: use the &quot;Copy to clipboard&quot; button to get the skills report as plain text!</p><p><img src="../images/skills/skills.png" alt="The skills interactive form and the text report"></p><p>Watch the skills form explained in the video below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/0SgRYcJACjM" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine you are trying to get a job as a test engineer with a focus on writing Cypress tests. What do you need to know? Here is what I wo
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Get Faster Feedback From Your Cypress Tests Running On CircleCI</title>
    <link href="https://glebbahmutov.com/blog/faster-ci-feedback-on-circleci/"/>
    <id>https://glebbahmutov.com/blog/faster-ci-feedback-on-circleci/</id>
    <published>2021-10-05T04:00:00.000Z</published>
    <updated>2021-10-06T01:26:27.217Z</updated>
    
    <content type="html"><![CDATA[<p>Nobody likes slow tests. Pushing a pull request commit and waiting for 30 minutes for the CI to work through all the specs, just to find out your changed spec has failed ... is bad. In this blog post, I will show how to run only the new and changed Cypress.io specs first. This blog post shows it using CircleCI workflows. A similar approach could be used with any CI provider. In fact, in my previous post <a href="/blog/faster-ci-feedback/" title="Get Faster Feedback From Your Cypress Tests Running On GitHub Actions">Get Faster Feedback From Your Cypress Tests Running On GitHub Actions</a> I have described how to achieve the same using GitHub Actions.</p><blockquote class="pullquote"><p>🎁 You can find the source code for this blog post in the repo <a href="https://github.com/bahmutov/chat.io">bahmutov/chat.io</a></p></blockquote><h2><span id="the-initial-workflow">The initial workflow</span></h2><p>Typically, we check out the source code, install NPM dependencies, start the application and run all tests using <a href="https://github.com/cypress-io/circleci-orb">Cypress CircleCI Orb</a>. For out application, we also need MongoDB and Redis services, and we can start them up using Docker images.</p><figure class="highlight yml"><figcaption><span>.circleci/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="comment"># https://github.com/cypress-io/circleci-orb</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">executors:</span></span><br><span class="line">  <span class="attr">with-services:</span></span><br><span class="line">    <span class="comment"># to run MongoDB and Redis on CircleCI, follow the instructions</span></span><br><span class="line">    <span class="comment"># https://glebbahmutov.com/blog/testing-mongo-with-cypress/</span></span><br><span class="line">    <span class="attr">docker:</span></span><br><span class="line">      <span class="comment"># image used to install source code,</span></span><br><span class="line">      <span class="comment"># run our server and run Cypress tests</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">cypress/base:14.16.0</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">          <span class="comment"># for connecting to the Mongo and Redis services</span></span><br><span class="line">          <span class="attr">MONGODB:</span> <span class="string">mongodb://root:rootPass1234@localhost:27017/</span></span><br><span class="line">          <span class="attr">SESSION_SECRET:</span> <span class="string">SoMeSeCrEtStrInG</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># image used to run Mongo in a separate container</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">mongo:4.4.5</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">          <span class="attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="string">rootPass1234</span></span><br><span class="line">      <span class="comment"># image for running Redis</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">redis:alpine</span></span><br><span class="line"></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Run</span> <span class="string">all</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">executor:</span> <span class="string">with-services</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">          <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">&#x27;All Circle Tests&#x27;</span></span><br><span class="line">          <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2><span id="parallelization">Parallelization</span></h2><p>Great start. What if we want to run tests faster? We can split them across N containers, each executing some specs through <a href="https://on.cypress.io/parallelization">Cypress parallelization</a>. Read the blog post <a href="/blog/parallel-or-not/" title="Parallel or not">Parallel or not</a> for more examples, but in general we will have one job to install dependencies and pass them to the test jobs via workspace.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="comment"># https://github.com/cypress-io/circleci-orb</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">executors:</span></span><br><span class="line">  <span class="attr">with-services:</span></span><br><span class="line">    <span class="comment"># to run MongoDB and Redis on CircleCI, follow the instructions</span></span><br><span class="line">    <span class="comment"># https://glebbahmutov.com/blog/testing-mongo-with-cypress/</span></span><br><span class="line">    <span class="attr">docker:</span></span><br><span class="line">      <span class="comment"># image used to install source code,</span></span><br><span class="line">      <span class="comment"># run our server and run Cypress tests</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">cypress/base:14.16.0</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">          <span class="comment"># for connecting to the Mongo and Redis services</span></span><br><span class="line">          <span class="attr">MONGODB:</span> <span class="string">mongodb://root:rootPass1234@localhost:27017/</span></span><br><span class="line">          <span class="attr">SESSION_SECRET:</span> <span class="string">SoMeSeCrEtStrInG</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># image used to run Mongo in a separate container</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">mongo:4.4.5</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">          <span class="attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="string">rootPass1234</span></span><br><span class="line">      <span class="comment"># image for running Redis</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">redis:alpine</span></span><br><span class="line"></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="comment"># every testing job needs to install dependencies and Cypress</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/install:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Install</span></span><br><span class="line">          <span class="comment"># to install dependencies, we do not need other services</span></span><br><span class="line">          <span class="comment"># so let&#x27;s use the executor close to what the tests will use</span></span><br><span class="line">          <span class="comment"># https://github.com/cypress-io/circleci-orb/blob/master/docs/executors.md</span></span><br><span class="line">          <span class="attr">executor:</span> <span class="string">cypress/base-14</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Run</span> <span class="string">all</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">executor:</span> <span class="string">with-services</span></span><br><span class="line">          <span class="attr">requires:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Install</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">          <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment"># split all specs across 4 machines</span></span><br><span class="line">          <span class="comment"># https://on.cypress.io/parallelization</span></span><br><span class="line">          <span class="attr">parallel:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">parallelism:</span> <span class="number">4</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">&#x27;All Circle Tests&#x27;</span></span><br><span class="line">          <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> you can run tests even faster by using CircleCI RAM disk feature, read the blog post <a href="/blog/circle-ram-disk/" title="Start CircleCI Machines Faster by Using RAM Disk">Start CircleCI Machines Faster by Using RAM Disk</a>.</p><h2><span id="run-changed-specs-first">Run changed specs first</span></h2><p>But what if we want to open a pull request with changed / added Cypress specs and run them first? That way we find out if our changes are correct very quickly. We still will run all the tests to ensure nothing else is broken, of course.</p><p>Here is how we can do this: we will define a middle job between the install and &quot;Run all tests&quot; jobs. This middle job will only run the changed Cypress specs on pull requests. If the job is running for regular commits, the job will halt itself, skipping right to the &quot;Run all tests&quot; job. Here is the definition for the job:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># run only the changed Cypress tests if any</span></span><br><span class="line"><span class="comment"># and only if we are running in a pull request</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Run</span> <span class="string">changed</span> <span class="string">Cypress</span> <span class="string">tests</span></span><br><span class="line">    <span class="attr">executor:</span> <span class="string">with-services</span></span><br><span class="line">    <span class="attr">requires:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Install</span></span><br><span class="line">    <span class="attr">post-checkout:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Stop</span> <span class="string">if</span> <span class="string">not</span> <span class="string">a</span> <span class="string">pull</span> <span class="string">request</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">if</span> [ <span class="string">-z</span> <span class="string">&quot;$CIRCLE_PULL_REQUEST&quot;</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">              <span class="string">echo</span> <span class="string">&quot;Not a pull request, exiting...&quot;</span></span><br><span class="line">              <span class="string">circleci-agent</span> <span class="string">step</span> <span class="string">halt</span></span><br><span class="line">            <span class="string">fi</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Stop</span> <span class="string">if</span> <span class="literal">no</span> <span class="string">changed</span> <span class="string">specs</span></span><br><span class="line">          <span class="comment"># also stop if there are too many changed specs</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">git</span> <span class="string">diff</span> <span class="string">--name-only</span> <span class="string">origin/main</span></span><br><span class="line">            <span class="comment"># make sure to NOT fail if there are no changed specs</span></span><br><span class="line">            <span class="string">n=$(git</span> <span class="string">diff</span> <span class="string">--name-only</span> <span class="string">origin/main</span> <span class="string">|</span> &#123; <span class="string">grep</span> <span class="string">cypress/integration</span> <span class="string">||</span> <span class="literal">true</span><span class="string">;</span> &#125; <span class="string">|</span> <span class="string">wc</span> <span class="string">-l</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-d</span> <span class="string">&#x27; &#x27;</span><span class="string">)</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;number of added or changed Cypress specs $&#123;n&#125;&quot;</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="string">if</span> [ <span class="string">$</span>&#123;<span class="string">n</span>&#125; <span class="string">-lt</span> <span class="number">1</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">              <span class="string">echo</span> <span class="string">&quot;No Cypress specs changed, exiting...&quot;</span></span><br><span class="line">              <span class="string">circleci-agent</span> <span class="string">step</span> <span class="string">halt</span></span><br><span class="line">            <span class="string">fi</span></span><br><span class="line"></span><br><span class="line">            <span class="string">if</span> [ <span class="string">$</span>&#123;<span class="string">n</span>&#125; <span class="string">-gt</span> <span class="number">4</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">              <span class="string">echo</span> <span class="string">&quot;Too many Cypress specs changed, will run them all in the next job...&quot;</span></span><br><span class="line">              <span class="string">circleci-agent</span> <span class="string">step</span> <span class="string">halt</span></span><br><span class="line">            <span class="string">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># to &quot;trick&quot; the Orb into NOT installing again</span></span><br><span class="line">    <span class="comment"># (the dependencies were installed in the Install job)</span></span><br><span class="line">    <span class="comment"># we use the dummy &quot;install-command&quot;</span></span><br><span class="line">    <span class="attr">install-command:</span> <span class="string">echo</span> <span class="string">Already</span> <span class="string">installed</span></span><br><span class="line">    <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">    <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">git</span> <span class="string">diff</span> <span class="string">--name-only</span> <span class="string">origin/main</span></span><br><span class="line">      <span class="comment"># by now we know there are changed Cypress specs</span></span><br><span class="line">      <span class="comment"># so we know grep command will not fail</span></span><br><span class="line">      <span class="string">specs=$(git</span> <span class="string">diff</span> <span class="string">--name-only</span> <span class="string">origin/main</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">cypress/integration</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">&#x27;\n&#x27;</span> <span class="string">&#x27;,&#x27;</span><span class="string">)</span></span><br><span class="line">      <span class="string">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="string">echo</span> <span class="string">&quot;Changed and added Cypress specs&quot;</span></span><br><span class="line">      <span class="string">echo</span> <span class="string">$&#123;specs&#125;</span></span><br><span class="line">      <span class="string">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># we have to form the Cypress run command ourselves</span></span><br><span class="line">    <span class="string">npx</span> <span class="string">cypress</span> <span class="string">run</span> <span class="string">--record</span> <span class="string">--group</span> <span class="string">&quot;1. Changed specs&quot;</span> <span class="string">--spec</span> <span class="string">$&#123;specs&#125;</span></span><br></pre></td></tr></table></figure><p>Let me explain the individual parts of the above job definition.</p><h3><span id="install">Install</span></h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Run</span> <span class="string">changed</span> <span class="string">Cypress</span> <span class="string">tests</span></span><br><span class="line"><span class="attr">executor:</span> <span class="string">with-services</span></span><br><span class="line"><span class="attr">requires:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Install</span></span><br></pre></td></tr></table></figure><p>The modified specs job uses the installed dependencies from the workspace created by the &quot;Install&quot; job, just like &quot;Run all specs&quot; job.</p><h3><span id="only-run-on-pull-requests">Only run on pull requests</span></h3><p>Each <code>cypress/run</code> can execute steps after the checkout step (even if we are using the workspace from the &quot;Install&quot; job and do not check out the code again). In our case, we want to skip the job if this is not a pull request:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post-checkout:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">Stop</span> <span class="string">if</span> <span class="string">not</span> <span class="string">a</span> <span class="string">pull</span> <span class="string">request</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">if</span> [ <span class="string">-z</span> <span class="string">&quot;$CIRCLE_PULL_REQUEST&quot;</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;Not a pull request, exiting...&quot;</span></span><br><span class="line">          <span class="string">circleci-agent</span> <span class="string">step</span> <span class="string">halt</span></span><br><span class="line">        <span class="string">fi</span></span><br></pre></td></tr></table></figure><p>CircleCI has many built-in environment variables, you can see them in each job by expanding the step.</p><p><img src="../images/faster-ci-feedback-circle/variables.gif" alt="Built-in CircleCI environment variables"></p><h3><span id="count-changes-cypress-specs">Count changes Cypress specs</span></h3><p>Next we want to find all changed Cypress specs (modified or added). We can use the <code>git diff --name-only origin/main</code> command to list <em>all</em> changed files in the current branch vs the default branch &quot;main&quot;. The output is a single filename per line, something like</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># let&#39;s say we only have two modified files</span><br><span class="line">$ git diff --name-only origin&#x2F;main</span><br><span class="line">cypress&#x2F;integration&#x2F;a.js</span><br><span class="line">README.md</span><br></pre></td></tr></table></figure><p>Next, we can pipe the output through Unix utility commands to count the number of lines.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># grep filters non-Cypress filenames</span><br><span class="line"># we need to use &quot;|| true;&quot; to ignore exit code 1 from grep if there are no specs</span><br><span class="line"># wc -l counts each spec (one per line)</span><br><span class="line"># tr -d &#39; &#39; removes all white space characters that &quot;wc&quot; outputs</span><br><span class="line">n&#x3D;$(git diff --name-only origin&#x2F;main | &#123; grep cypress&#x2F;integration || true; &#125; | wc -l | tr -d &#39; &#39;)</span><br></pre></td></tr></table></figure><p>The variable <code>n</code> will have a number greater or equal to zero - that&#39;s the number of changed specs in the current pull request. We can skip the remaining job commands if the number is zero. We also can skip running the changed specs if a lot of specs have changed - it would be more efficient to run all specs using parallelization in this case.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;number of added or changed Cypress specs <span class="variable">$&#123;n&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;n&#125;</span> -lt 1 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;No Cypress specs changed, exiting...&quot;</span></span><br><span class="line">  circleci-agent step halt</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;n&#125;</span> -gt 4 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Too many Cypress specs changed, will run them all in the next job...&quot;</span></span><br><span class="line">  circleci-agent step halt</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3><span id="run-changed-specs">Run changed specs</span></h3><p>Now that we know we have a small number of changed Cypress specs, let&#39;s run them.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># to &quot;trick&quot; the Orb into NOT installing again</span></span><br><span class="line"><span class="comment"># (the dependencies were installed in the Install job)</span></span><br><span class="line"><span class="comment"># we use the dummy &quot;install-command&quot;</span></span><br><span class="line"><span class="attr">install-command:</span> <span class="string">echo</span> <span class="string">Already</span> <span class="string">installed</span></span><br><span class="line"><span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line"><span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line"><span class="attr">no-workspace:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">command:</span> <span class="string">|</span></span><br><span class="line">  <span class="string">git</span> <span class="string">diff</span> <span class="string">--name-only</span> <span class="string">origin/main</span></span><br><span class="line">  <span class="comment"># by now we know there are changed Cypress specs</span></span><br><span class="line">  <span class="comment"># so we know grep command will not fail</span></span><br><span class="line">  <span class="string">specs=$(git</span> <span class="string">diff</span> <span class="string">--name-only</span> <span class="string">origin/main</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">cypress/integration</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">&#x27;\n&#x27;</span> <span class="string">&#x27;,&#x27;</span><span class="string">)</span></span><br><span class="line">  <span class="string">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="string">echo</span> <span class="string">&quot;Changed and added Cypress specs&quot;</span></span><br><span class="line">  <span class="string">echo</span> <span class="string">$&#123;specs&#125;</span></span><br><span class="line">  <span class="string">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># we have to form the Cypress run command ourselves</span></span><br><span class="line">  <span class="string">npx</span> <span class="string">cypress</span> <span class="string">run</span> <span class="string">--record</span> <span class="string">--group</span> <span class="string">&quot;1. Changed specs&quot;</span> <span class="string">--spec</span> <span class="string">$&#123;specs&#125;</span></span><br></pre></td></tr></table></figure><p>We skip the NPM install step using <code>install-command: ...</code> parameter. All dependencies have been installed already. We do need to start the application and wait for it to respond before running Cypress. We get the specs filenames and join them into a single string using Unix commands:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># tr &#39;\n&#39; &#39;,&#39; converts multiple lines into a single comma-separated string</span><br><span class="line">specs&#x3D;$(git diff --name-only origin&#x2F;main | grep cypress&#x2F;integration | tr &#39;\n&#39; &#39;,&#39;)</span><br></pre></td></tr></table></figure><p>We already know there are Cypress specs, thus no need to ignore the <code>grep</code> exit code using <code>|| true;</code> syntax. The output before running the tests will be something like:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Changed and added Cypress specs</span><br><span class="line">cypress/integration/data-across-specs/creates-room.js,</span><br><span class="line">number of added or changed Cypress specs 1</span><br></pre></td></tr></table></figure><p>Finally, we need to form the <code>cypress run</code> command ourselves, since we need to pass the changed specs using the <code>--spec</code> command line argument.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx cypress run --record --group <span class="string">&quot;1. Changed specs&quot;</span> --spec <span class="variable">$&#123;specs&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> I give indices to the group names like <code>--group &quot;1. Changed specs&quot;</code> and <code>group: &#39;2. All Circle Tests&#39;</code> because we are recording the test results on Cypress Dashboard. By prefixing the group names with numbers, the Dashboard run lists them in the expected order. You can see the recordings yourself at <a href="https://dashboard.cypress.io/projects/f1j79r">this public project</a></p><p><img src="../images/faster-ci-feedback-circle/order.png" alt="Changed specs before all specs"></p><h2><span id="results">Results</span></h2><p>You can find the complete CircleCI config file <a href="https://github.com/bahmutov/chat.io/blob/main/.circleci/config.yml">here</a> and see the CircleCI runs <a href="https://app.circleci.com/pipelines/github/bahmutov/chat.io">here</a>. When there are no changed Cypress specs, the middle job finishes quickly</p><p><img src="../images/faster-ci-feedback-circle/no-changes.png" alt="Pull request without changed specs"></p><p>But when there is at least one changed Cypress spec, it gets to run first, providing very fast feedback to the team</p><p><img src="../images/faster-ci-feedback-circle/has-changed.png" alt="Tested changed specs first"></p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/faster-ci-feedback/" title="Get Faster Feedback From Your Cypress Tests Running On GitHub Actions">Get Faster Feedback From Your Cypress Tests Running On GitHub Actions</a></li></ul><h2><span id="update-1-support-plugin-and-utils-files">Update 1: support, plugin and utils files</span></h2><p>A pull request can modify other non-spec files inside the <code>cypress</code> folder, which will be included because they might match the <code>grep</code> filter. It is fine - Cypress still filters the <code>--spec ...</code> list using its <code>testFiles</code> and <code>ignoreTestFiles</code> <a href="https://on.cypress.io/configuration">configuration patterns</a>.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># changed files</span><br><span class="line">cypress/integration/cannot-find-room.js</span><br><span class="line">cypress/integration/data-across-specs/utils.js</span><br><span class="line"></span><br><span class="line">number of added or changed Cypress specs 2</span><br><span class="line"># Cypress command output</span><br><span class="line"></span><br><span class="line">  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">  │ Cypress:    8.5.0                                                                              │</span><br><span class="line">  │ Browser:    Electron 91 (headless)                                                             │</span><br><span class="line">  │ Specs:      1 found (cannot-find-room.js)                                                      │</span><br><span class="line">  │ Searched:   cypress/integration/cannot-find-room.js, cypress/integration/data-across-specs/uti │</span><br><span class="line">  │             ls.js,                                                                             │</span><br><span class="line">  │ Params:     Tag: false, Group: 1. Changed specs, Parallel: false                               │</span><br><span class="line">  │ Run URL:    https://dashboard.cypress.io/projects/f1j79r/runs/151                              │</span><br><span class="line">  └────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>Notice that Cypress found one spec only, ignoring the <code>utils.js</code> file because it is ignored by the <code>cypress.json</code> file setting <code>&quot;ignoreTestFiles&quot;: [&quot;utils.js&quot;, &quot;README.md&quot;]</code>.</p><h2><span id="update-2-circleci-config-syntax">Update 2: CircleCI config syntax</span></h2><p>The CircleCI config file syntax can be intimidating. Luckily, you can check if the file is correct by running the <a href="https://circleci.com/docs/2.0/local-cli/">CircleCI CLI utility</a> locally to verify the file syntax.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> circleci config validate .circleci/config.yml</span></span><br><span class="line">Config file at .circleci/config.yml is valid.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Nobody likes slow tests. Pushing a pull request commit and waiting for 30 minutes for the CI to work through all the specs, just to find 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="circle" scheme="https://glebbahmutov.com/blog/tags/circle/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>Get Faster Feedback From Your Cypress Tests Running On GitHub Actions</title>
    <link href="https://glebbahmutov.com/blog/faster-ci-feedback/"/>
    <id>https://glebbahmutov.com/blog/faster-ci-feedback/</id>
    <published>2021-10-04T04:00:00.000Z</published>
    <updated>2021-10-19T10:42:30.706Z</updated>
    
    <content type="html"><![CDATA[<p>As your project grows, the end-to-end tests take longer and longer to finish. You open a pull request and ... wait for 10-20 minutes for the tests to finish. Then you search the Cypress Dashboard to find the spec with the modified test, just to see if it has failed or passed. All this time, you are thinking to yourself - why can&#39;t Cypress run the <em>modified</em> specs first? While there is no built-in way in Cypress as of October 2021, it is not hard to implement it yourself. In this blog post, I will show how to run new and changed Cypress.io specs first if you are using GitHub Actions. Similar approach could be used with any CI provider, like <a href="/blog/faster-ci-feedback-on-circleci/" title="CircleCI">CircleCI</a>.</p><blockquote class="pullquote"><p>🎁 You can find the source code for this blog post in the repo <a href="https://github.com/bahmutov/chat.io">bahmutov/chat.io</a></p></blockquote><h2><span id="the-initial-workflow">The initial workflow</span></h2><p>At first, our GitHub workflow file checks out the source code and runs tests using <a href="https://github.com/cypress-io/github-action">Cypress GH Action</a> I have written:</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>, <span class="string">pull_request</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">code</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># run utility services in the background</span></span><br><span class="line">      <span class="comment"># using docker-compose (see docker-compose.yml file)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">docker-compose</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">docker-compose</span> <span class="string">up</span> <span class="string">-d</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># install and cache dependencies, start the server</span></span><br><span class="line">      <span class="comment"># and run all Cypress.io tests</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">          <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="comment"># for recording test results and videos to Cypress Dashboard</span></span><br><span class="line">          <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;secrets.CYPRESS_RECORD_KEY&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>The above workflow runs on every commit and on every pull request. We still want to run all the tests for every commit pushed to the <code>main</code> branch. But for the pull requests, we want to run the modified specs first before running all tests. Thus I modify the above <code>ci</code> workflow to only run on commits pushed to the main branch.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="comment"># run all tests on the main branch</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="comment"># rest of the workflow</span></span><br></pre></td></tr></table></figure><p>You can find this workflow in <a href="https://github.com/bahmutov/chat.io/blob/main/.github/workflows/ci.yml">.github/workflows/ci.yml</a>. This workflow is tied to the README badge, showing the current test status of the project:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">![ci</span> <span class="string">status</span>][<span class="string">ci</span> <span class="string">image</span>]<span class="string">][ci</span> <span class="string">url]</span></span><br><span class="line"></span><br><span class="line">[<span class="string">ci</span> <span class="string">image</span>]<span class="string">:</span> <span class="string">https://github.com/bahmutov/chat.io/workflows/ci/badge.svg?branch=main</span></span><br><span class="line">[<span class="string">ci</span> <span class="string">url</span>]<span class="string">:</span> <span class="string">https://github.com/bahmutov/chat.io/actions</span></span><br></pre></td></tr></table></figure><h2><span id="the-pull-request-workflow">The pull request workflow</span></h2><p>I will use a separate workflow file for CI steps to run for the pull requests. You can find the finished workflow file at <a href="https://github.com/bahmutov/chat.io/blob/main/.github/workflows/pr.yml">.github/workflows/pr.yml</a>. Let&#39;s start by cloning the <code>ci.yml</code> and just modifying the <code>on</code> trigger.</p><figure class="highlight yml"><figcaption><span>.github/workflows/pr.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">pr</span></span><br><span class="line"><span class="comment"># on pull request, determine changed or added Cypress specs</span></span><br><span class="line"><span class="comment"># if there are any (but not too many), run them first</span></span><br><span class="line"><span class="comment"># then run all Cypress specs</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">pull_request</span>]</span><br></pre></td></tr></table></figure><p>First, we will need to check out the source code. Because we want to determine the files changed between the PR branch and the default <code>main</code> branch, we need to fetch this information. Thus I will use the parameter <code>fetch-depth: 0</code> with <a href="https://github.com/actions/checkout">actions/checkout</a> action:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/actions/checkout</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">main</span> <span class="string">branch</span> <span class="string">🛎</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="comment"># need to fetch info about all branches</span></span><br><span class="line">    <span class="comment"># to determine the changed spec files</span></span><br><span class="line">    <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>Here is how we can find all changed (added and modified) files between the current branch and the <code>main</code> branch</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">List</span> <span class="string">changed</span> <span class="string">files</span> <span class="string">🗂</span></span><br><span class="line">  <span class="comment"># should we get the branch names from the PR?</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">git</span> <span class="string">diff</span> <span class="string">--name-only</span> <span class="string">origin/main</span></span><br></pre></td></tr></table></figure><p>For example, I have started a new branch <code>example-branch</code> and modified the spec <code>rooms.js</code> and added a new spec <code></code></p><p><img src="../images/faster-ci-feedback/status.png" alt="Git local status"></p><p>Let&#39;s commit and push this branch to the remote origin.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;new spec and small tweaks&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push -u</span></span><br></pre></td></tr></table></figure><p>Even when working locally, we can see the changed files between the current branch <code>example-branch</code> and the <code>main</code> one.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git diff --name-only origin/main</span><br><span class="line">cypress/integration/register-using-task2.js</span><br><span class="line">cypress/integration/rooms.js</span><br></pre></td></tr></table></figure><p>The pull request might have other modified files besides the Cypress specs. For example, I will touch the README file too. Here is how we can filter the specs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git diff --name-only origin/main</span></span><br><span class="line">README.md</span><br><span class="line">cypress/integration/register-using-task2.js</span><br><span class="line">cypress/integration/rooms.js</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff --name-only origin/main | grep cypress/integration</span></span><br><span class="line">cypress/integration/register-using-task2.js</span><br><span class="line">cypress/integration/rooms.js</span><br></pre></td></tr></table></figure><p>Super. Later we will need to know the number of modified specs - we can use <code>wc -l</code> to count the lines with the modified Cypress specs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git diff --name-only origin/main | grep cypress/integration | wc -l</span></span><br><span class="line">       2</span><br></pre></td></tr></table></figure><p>Ughh, why is there whitespace around <code>2</code>, let&#39;s trim it</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git diff --name-only origin/main | grep cypress/integration | wc -l | tr -d <span class="string">&#x27; &#x27;</span></span></span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>Now that we know the number of changed specs, let&#39;s also join them into a single string to be passed to the <code>cypress run --spec ...</code> parameter.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git diff --name-only origin/main | grep cypress/integration | tr <span class="string">&#x27;\n&#x27;</span> <span class="string">&#x27;,&#x27;</span></span></span><br><span class="line">cypress/integration/register-using-task2.js,cypress/integration/rooms.js,</span><br></pre></td></tr></table></figure><p>Super. We can compute the number and the spec parameter in the workflow, and even hide the details from other specs by using the <code>output</code> parameters.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">List</span> <span class="string">changed</span> <span class="string">files</span> <span class="string">🗂</span></span><br><span class="line">  <span class="comment"># should we get the branch names from the PR?</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">git</span> <span class="string">diff</span> <span class="string">--name-only</span> <span class="string">origin/main</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">List</span> <span class="string">changed</span> <span class="string">specs</span> <span class="string">✨</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">list-changed-specs</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">n=$(git</span> <span class="string">diff</span> <span class="string">--name-only</span> <span class="string">origin/main</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">cypress/integration</span> <span class="string">|</span> <span class="string">wc</span> <span class="string">-l</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-d</span> <span class="string">&#x27; &#x27;</span><span class="string">)</span></span><br><span class="line">    <span class="string">specs=$(git</span> <span class="string">diff</span> <span class="string">--name-only</span> <span class="string">origin/main</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">cypress/integration</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">&#x27;\n&#x27;</span> <span class="string">&#x27;,&#x27;</span><span class="string">)</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;Changed and added Cypress specs&quot;</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">$&#123;specs&#125;</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;number of added or changed Cypress specs $&#123;n&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># output the number of specs and the specs list</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;::set-output name=specsN::$&#123;n&#125;&quot;</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;::set-output name=specs::$&#123;specs&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>Other workflow steps can access the number of changed specs using <code>$&#123;&#123; steps.list-changed-specs.outputs.specsN &#125;&#125;</code> expression syntax. Let&#39;s set up two test jobs - the first one will run if there are changed specs, but not more than 5. If there are lots of modified specs, it makes sense to simply run all of them.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">changed</span> <span class="string">Cypress</span> <span class="string">specs</span> <span class="string">first</span> <span class="string">🌲</span></span><br><span class="line">  <span class="comment"># it makes sense to run changed specs only if there are a few</span></span><br><span class="line">  <span class="comment"># otherwise just run all specs in the next step</span></span><br><span class="line">  <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.list-changed-specs.outputs.specsN</span> <span class="string">&gt;</span> <span class="number">0</span> <span class="string">&amp;&amp;</span> <span class="string">steps.list-changed-specs.outputs.specsN</span> <span class="string">&lt;</span> <span class="number">5</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">    <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">&#x27;1. Changed specs&#x27;</span></span><br><span class="line">    <span class="attr">spec:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.list-changed-specs.outputs.specs</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="comment"># for recording test results and videos to Cypress Dashboard</span></span><br><span class="line">    <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;secrets.CYPRESS_RECORD_KEY&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if the changed / added Cypress tests passed</span></span><br><span class="line"><span class="comment"># run all Cypress tests to confirm the app is working</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">All</span> <span class="string">Cypress</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="comment"># hmm, is the application running?</span></span><br><span class="line">    <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">    <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">&#x27;2. All Cypress tests&#x27;</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="comment"># for recording test results and videos to Cypress Dashboard</span></span><br><span class="line">    <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;secrets.CYPRESS_RECORD_KEY&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>We have two problems in the above workflow:</p><ul><li>we install the NPM dependencies twice (potentially)</li><li>we are trying to run the application using <code>npm start</code> twice (potentially)</li></ul><p>Thus we can optimize the workflow by installing the dependencies just once, and starting the application before running any Cypress tests.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install dependencies</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span> <span class="string">📦</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="comment"># just perform install</span></span><br><span class="line">    <span class="attr">runTests:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Start</span> <span class="string">the</span> <span class="string">app</span> <span class="string">🏁</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">npm</span> <span class="string">start</span> <span class="string">&amp;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">changed</span> <span class="string">Cypress</span> <span class="string">specs</span> <span class="string">first</span> <span class="string">🌲</span></span><br><span class="line">  <span class="comment"># it makes sense to run changed specs only if there are a few</span></span><br><span class="line">  <span class="comment"># otherwise just run all specs in the next step</span></span><br><span class="line">  <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.list-changed-specs.outputs.specsN</span> <span class="string">&gt;</span> <span class="number">0</span> <span class="string">&amp;&amp;</span> <span class="string">steps.list-changed-specs.outputs.specsN</span> <span class="string">&lt;</span> <span class="number">5</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="comment"># we have already installed all dependencies above</span></span><br><span class="line">    <span class="attr">install:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># the server is running already, but just wait for it</span></span><br><span class="line">    <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">    <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">&#x27;1. Changed specs&#x27;</span></span><br><span class="line">    <span class="attr">spec:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.list-changed-specs.outputs.specs</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="comment"># for recording test results and videos to Cypress Dashboard</span></span><br><span class="line">    <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;secrets.CYPRESS_RECORD_KEY&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">All</span> <span class="string">Cypress</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="comment"># we have already installed all dependencies above</span></span><br><span class="line">    <span class="attr">install:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">    <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">&#x27;2. All Cypress tests&#x27;</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="comment"># for recording test results and videos to Cypress Dashboard</span></span><br><span class="line">    <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;secrets.CYPRESS_RECORD_KEY&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>Tip: Cypress GH Action can do a lot, find all examples in the <a href="https://github.com/cypress-io/github-action">cypress-io/github-action</a> repo.</p><h2><span id="limit-the-git-output">Limit the Git output</span></h2><p>Two words of caution: the command <code>git diff --name-only origin/main</code> outputs all file names, including the names of the deleted files. Thus I limit the list of the modified and added files only using</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --name-only --diff-filter&#x3D;AM origin&#x2F;main</span><br></pre></td></tr></table></figure><p>You should also be careful about printing the list of changed files. By itself the above command will page the output and pause after N lines. This will halt the CI job usually:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git diff --name-only --diff-filter&#x3D;AM origin&#x2F;main</span><br><span class="line">.circleci&#x2F;config.yml</span><br><span class="line">README.md</span><br><span class="line">cypress&#x2F;integration&#x2F;spec-a.js</span><br><span class="line">cypress&#x2F;integration&#x2F;spec-b.js</span><br><span class="line">cypress&#x2F;integration&#x2F;spec-c.js</span><br><span class="line">...</span><br><span class="line">--More--</span><br><span class="line"></span><br><span class="line">Too long with no output (exceeded 10m0s): context deadline exceeded</span><br></pre></td></tr></table></figure><p>Thus you want to pipe the output through the filters first - the filters do not get paginated. For example, you can get the raw number of changed files.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n&#x3D;$(git diff --name-only --diff-filter&#x3D;AM origin&#x2F;main | grep cypress&#x2F;integration | wc -l | tr -d &#39; &#39;)</span><br><span class="line">if [ $&#123;n&#125; -gt 20 ]; then</span><br><span class="line">  echo &quot;Too many files changes...&quot;</span><br><span class="line">  # stop the changed specs job</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2><span id="in-action">In action</span></h2><p>Let&#39;s see how the above workflow performs. I have opened the pull request <a href="https://github.com/bahmutov/chat.io/pull/12">#12</a>.</p><p>The GH workflow shows the steps, and that the modified specs task was executed</p><p><img src="../images/faster-ci-feedback/workflow.png" alt="GitHub workflow"></p><p>The <code>list-changed-spec</code> step has calculated the two changed Cypress test files correctly</p><p><img src="../images/faster-ci-feedback/changed.png" alt="The changed Cypress specs"></p><p>The changed tests have finished successfully, while all tests have failed in an unrelated spec <code>group-chat.js</code>. Notice how fast the modified specs have finished vs waiting for all the tests: 30 seconds vs 5 minutes.</p><p><img src="../images/faster-ci-feedback/run.png" alt="The recorded Dashboard run"></p><p>The <code>group-chat.js</code> shows the test fails to log in the first user <code>A</code></p><p><img src="../images/faster-ci-feedback/group-chat.png" alt="The failed test screenshot"></p><p>Let&#39;s modify the <code>group-chat.js</code> - something goes wrong there, let&#39;s change the user name to be a <code>userA</code> instead of just <code>A</code>. Once I push the commit with the username change, the 3 changes specs run:</p><p><img src="../images/faster-ci-feedback/fixed.png" alt="The three modified specs ran first"></p><p>Our fix has solved the problem, and all the Cypress specs have passed. We are good to merge.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/faster-ci-feedback-on-circleci/" title="Get Faster Feedback From Your Cypress Tests Running On CircleCI">Get Faster Feedback From Your Cypress Tests Running On CircleCI</a></li><li><a href="/blog/trying-github-actions/" title="Trying GitHub Actions">Trying GitHub Actions</a></li><li><a href="/blog/parallel-cypress-tests-gh-action/" title="Split Long GitHub Action Workflow Into Parallel Cypress Jobs">Split Long GitHub Action Workflow Into Parallel Cypress Jobs</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;As your project grows, the end-to-end tests take longer and longer to finish. You open a pull request and ... wait for 10-20 minutes for 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>Make GraphQL Calls From Cypress Tests</title>
    <link href="https://glebbahmutov.com/blog/request-graphql/"/>
    <id>https://glebbahmutov.com/blog/request-graphql/</id>
    <published>2021-10-01T04:00:00.000Z</published>
    <updated>2021-10-01T16:26:56.327Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="pullquote"><p>🧭 Find the source code for this blog post in the repository <a href="https://github.com/bahmutov/todo-graphql-example">bahmutov/todo-graphql-example</a></p></blockquote><!-- toc --><ul><li><a href="#fetch-all-todos">Fetch all todos</a></li><li><a href="#use-application-client">Use application client</a></li><li><a href="#add-an-item">Add an item</a></li><li><a href="#share-graphql-client">Share GraphQL client</a><ul><li><a href="#aliases">Aliases</a></li></ul></li><li><a href="#delete-all-todos">Delete all todos</a></li></ul><!-- tocstop --><h2><span id="fetch-all-todos">Fetch all todos</span></h2><p>First, let&#39;s see how our Cypress tests can fetch all todo items. This allows us to confirm what the application is showing for example. Let&#39;s fetch the items using the <a href="https://on.cypress.io/request">cy.request</a> command.</p><figure class="highlight js"><figcaption><span>cypress/integration/request-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;fetches all items&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.request(&#123;</span><br><span class="line">    method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;http://localhost:3000/&#x27;</span>,</span><br><span class="line">    body: &#123;</span><br><span class="line">      operationName: <span class="string">&#x27;allTodos&#x27;</span>,</span><br><span class="line">      query: <span class="string">`</span></span><br><span class="line"><span class="string">        query allTodos &#123;</span></span><br><span class="line"><span class="string">          allTodos &#123;</span></span><br><span class="line"><span class="string">            id,</span></span><br><span class="line"><span class="string">            title,</span></span><br><span class="line"><span class="string">            completed</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      `</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Tip: if you are not sure about the <code>body</code> object, look at the network calls the application is making, and copy the GraphQL query from there.</p><p><img src="../images/request-graphql/all-todos.png" alt="Request list of todos"></p><p>From the response object we can get the list of todos and confirm their number and other details.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.request(&#123; ... &#125;)</span><br><span class="line">  .its(<span class="string">&#x27;body.data.allTodos&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>Note, if you do not know the precise number of items, but there should be &gt;= 0 items use <code>.gte</code> assertion</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.request(&#123; ... &#125;)</span><br><span class="line">  .its(<span class="string">&#x27;body.data.allTodos&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.length.gte&#x27;</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2><span id="use-application-client">Use application client</span></h2><p>Instead of using <code>cy.request</code> directly, we can fetch the items using the same GraphQL client the application is using! Just make sure to set the &quot;cache&quot; to false to avoid race conditions between the application and the test runner&#39;s client&#39;s memory caches.</p><p>Let&#39;s say this is the source file with the GraphQL client exported</p><figure class="highlight js"><figcaption><span>src/graphql-client.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// imports and init code</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> client = <span class="keyword">new</span> ApolloClient(&#123;</span><br><span class="line">  link: concat(operationNameLink, httpLink),</span><br><span class="line">  fetchOptions: &#123;</span><br><span class="line">    mode: <span class="string">&#x27;no-cors&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  cache: <span class="keyword">new</span> InMemoryCache(),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Then we can create an instance of the GraphQL client by importing it from the spec file. Note: this creates a separate client instance from the application&#39;s GraphQL client instance.</p><figure class="highlight js"><figcaption><span>cypress/integration/request-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; gql &#125; <span class="keyword">from</span> <span class="string">&#x27;@apollo/client&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; client &#125; <span class="keyword">from</span> <span class="string">&#x27;../../src/graphql-client&#x27;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;fetches all items using application client&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// make a GraphQL query using the app&#x27;s client</span></span><br><span class="line">  <span class="comment">// https://www.apollographql.com/docs/react/data/queries/</span></span><br><span class="line">  <span class="keyword">const</span> query = gql<span class="string">`</span></span><br><span class="line"><span class="string">    query allTodos &#123;</span></span><br><span class="line"><span class="string">      allTodos &#123;</span></span><br><span class="line"><span class="string">        id</span></span><br><span class="line"><span class="string">        title</span></span><br><span class="line"><span class="string">        completed</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// use https://on.cypress.io/wrap to let the Cypress test</span></span><br><span class="line">  <span class="comment">// wait for the promise returned by the &quot;client.query&quot; to resolve</span></span><br><span class="line">  cy.wrap(</span><br><span class="line">    client.query(&#123;</span><br><span class="line">      query,</span><br><span class="line">      <span class="comment">// it is important to AVOID any caching here</span></span><br><span class="line">      <span class="comment">// and fetch the current server data</span></span><br><span class="line">      fetchPolicy: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  )</span><br><span class="line">    .its(<span class="string">&#x27;data.allTodos&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes</p><p><img src="../images/request-graphql/client.png" alt="Request the list of todos using the loaded GraphQL client"></p><h2><span id="add-an-item">Add an item</span></h2><p>Using the GraphQL client and even sharing the queries between the application and the specs is very convenient. For example, let&#39;s create an item and then confirm it is visible in the application.</p><figure class="highlight js"><figcaption><span>cypress/integration/request-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; gql &#125; <span class="keyword">from</span> <span class="string">&#x27;@apollo/client&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; client &#125; <span class="keyword">from</span> <span class="string">&#x27;../../src/graphql-client&#x27;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;creates one item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> random = Cypress._.random(<span class="number">1e5</span>)</span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">`test <span class="subst">$&#123;random&#125;</span>`</span></span><br><span class="line">  cy.log(<span class="string">`Adding item <span class="subst">$&#123;title&#125;</span>`</span>)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> query = gql<span class="string">`</span></span><br><span class="line"><span class="string">        mutation AddTodo($title: String!) &#123;</span></span><br><span class="line"><span class="string">          createTodo(title: $title, completed: false) &#123;</span></span><br><span class="line"><span class="string">            id</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      `</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// by returning the promise returned by the &quot;client.query&quot;</span></span><br><span class="line">      <span class="comment">// call from the .then callback, we force the test to wait</span></span><br><span class="line">      <span class="comment">// and yield the result to the next Cypress command or assertion</span></span><br><span class="line">      <span class="keyword">return</span> client.query(&#123;</span><br><span class="line">        query,</span><br><span class="line">        variables: &#123;</span><br><span class="line">          title,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// it is important to AVOID any caching here</span></span><br><span class="line">        <span class="comment">// and fetch the current server data</span></span><br><span class="line">        fetchPolicy: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// use zero timeout to avoid &quot;cy.its&quot; retrying</span></span><br><span class="line">    <span class="comment">// since the response object is NOT going to change</span></span><br><span class="line">    .its(<span class="string">&#x27;data.createTodo&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">0</span> &#125;)</span><br><span class="line">    .should(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;id&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the item we have created should be shown in the list</span></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;.todo&#x27;</span>, title)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/request-graphql/created.png" alt="Created an item using GraphQL mutation"></p><h2><span id="share-graphql-client">Share GraphQL client</span></h2><p>If the spec file imports the GraphQL client from the application&#39;s source file, it creates <em>its own instance</em> separate from the GraphQL client created by the application in its iframe. This has some advantages, for example, the test above could execute the GraphQL mutation even before the <code>cy.visit</code> command loaded the application. But if you want to share the GraphQL client between the application and the spec, there is a way:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> client = <span class="keyword">new</span> ApolloClient(&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.Cypress) &#123;</span><br><span class="line">  <span class="built_in">window</span>.graphqlClient = client</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We set the client reference created by the application as a property of the <code>window</code> object. From the spec, we can grab this property and use it to spy and stub client method calls. Here is a typical test that:</p><ol><li>Visits the page. The application creates a GraphQL client object and sets it as <code>window.graphqlClient</code> value.</li><li>The command <code>cy.visit</code> yields the application&#39; window object. Thus we can directly retry until we get the client&#39;s reference using <code>cy.visit(&#39;/&#39;).should(&#39;have.property&#39;, &#39;graphqlClient&#39;)</code> assertion.</li><li>Once we have an object reference, we can use <a href="https://on.cypress.io/spy">cy.spy</a> and <a href="https://on.cypress.io/stub">cy.stub</a> to observe / stub the calls the application is making.</li></ol><figure class="highlight js"><figcaption><span>cypress/integration/spy-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;adds a todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// set up the spy on &quot;client.mutate&quot; method</span></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;graphqlClient&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.spy(client, <span class="string">&#x27;mutate&#x27;</span>).as(<span class="string">&#x27;mutate&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// have the application make the call by using the UI</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.new-todo&#x27;</span>).type(<span class="string">&#x27;Test!!!!&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  <span class="comment">// confirm the call has happened with expected variables</span></span><br><span class="line">  cy.get(<span class="string">&#x27;@mutate&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;firstCall.args.0.variables&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">      title: <span class="string">&#x27;Test!!!!&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    .and(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/request-graphql/spy1.png" alt="Spy on the client.mutate method call"></p><h3><span id="aliases">Aliases</span></h3><p><strong>Tip:</strong> we gave our spy an alias &quot;mutate&quot; using the <a href="https://on.cypress.io/as">cy.as</a> command. We can get these aliases using the test context &quot;this[alias name]&quot; syntax <em>after</em> the <code>.as(name)</code> command has finished. Cypress forces all commands to run one by one, thus we can use the &quot;this[alias name]&quot; syntax by making the access from a <code>.then(function () &#123; ... &#125;)</code>  callback function following the <code>.as</code> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;adds a todo (alias)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// set up the spy on &quot;client.mutate&quot; method</span></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;graphqlClient&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// once the &quot;.as&quot; command finishes</span></span><br><span class="line">      <span class="comment">// we can access the spy using the &quot;this.mutate&quot; property</span></span><br><span class="line">      cy.spy(client, <span class="string">&#x27;mutate&#x27;</span>).as(<span class="string">&#x27;mutate&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// have the application make the call by using the UI</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.new-todo&#x27;</span>)</span><br><span class="line">    .type(<span class="string">&#x27;Test!!!!&#123;enter&#125;&#x27;</span>)</span><br><span class="line">    <span class="comment">// note the &quot;function () &#123; ... &#125;&quot; syntax is used to</span></span><br><span class="line">    <span class="comment">// make sure the &quot;this&quot; points at the test context object</span></span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// confirm the call has happened with expected variables</span></span><br><span class="line">      <span class="comment">// by now the client.mutate has been called,</span></span><br><span class="line">      <span class="comment">// and the alias has been set (no retries for here)</span></span><br><span class="line">      expect(<span class="built_in">this</span>.mutate).to.have.been.calledOnce</span><br><span class="line">      expect(<span class="built_in">this</span>.mutate.firstCall.args[<span class="number">0</span>].variables)</span><br><span class="line">        .to.deep.include(&#123;</span><br><span class="line">          title: <span class="string">&#x27;Test!!!!&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        .and.to.have.property(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Since the <code>expect(this.mutate).to.have.been.calledOnce</code> does not <a href="https://on.cypress.io/retry-ability">retry</a> make sure to use it only <em>after</em> the client call has been made for sure.</p><p><img src="../images/request-graphql/spy2.png" alt="Use test context to access the aliased spy"></p><h2><span id="delete-all-todos">Delete all todos</span></h2><p>A very common problem for an end-to-end test is to clear the existing data before the test. Imagine you have a GraphQL endpoint, and you could get all Todo items? How would you go about deleting them? If you do not have a mutation &quot;delete all X&quot;, then you need to delete each item one by one.</p><p>Here is how to do this: first let&#39;s write a reusable method and place it in the <a href="https://github.com/bahmutov/todo-graphql-example/blob/master/cypress/integration/utils.js">utils.js</a> file.</p><figure class="highlight js"><figcaption><span>cypress/integration/utils.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; gql &#125; <span class="keyword">from</span> <span class="string">&#x27;@apollo/client&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; client &#125; <span class="keyword">from</span> <span class="string">&#x27;../../src/graphql-client&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// fetches all todo items, grabs their IDs, and deletes them</span></span><br><span class="line">  cy.log(<span class="string">&#x27;**deleteAll**&#x27;</span>)</span><br><span class="line">    .then(<span class="function">() =&gt;</span></span><br><span class="line">      client.query(&#123;</span><br><span class="line">        <span class="comment">// it is important to AVOID any caching here</span></span><br><span class="line">        <span class="comment">// and fetch the current server data</span></span><br><span class="line">        fetchPolicy: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        query: gql<span class="string">`</span></span><br><span class="line"><span class="string">          query getAllTodos &#123;</span></span><br><span class="line"><span class="string">            allTodos &#123;</span></span><br><span class="line"><span class="string">              id</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">    )</span><br><span class="line">    .its(<span class="string">&#x27;data.allTodos&#x27;</span>)</span><br><span class="line">    <span class="comment">// from each item, grab just the property &quot;id&quot;</span></span><br><span class="line">    .then(<span class="function">(<span class="params">items</span>) =&gt;</span> Cypress._.map(items, <span class="string">&#x27;id&#x27;</span>))</span><br><span class="line">    .then(<span class="function">(<span class="params">ids</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!ids.length) &#123;</span><br><span class="line">        cy.log(<span class="string">&#x27;Nothing to delete&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      cy.log(<span class="string">`Found **<span class="subst">$&#123;ids.length&#125;</span>** todos`</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// delete all items one by one</span></span><br><span class="line">      ids.forEach(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> mutation = gql<span class="string">`</span></span><br><span class="line"><span class="string">            mutation deleteTodo &#123;</span></span><br><span class="line"><span class="string">              removeTodo(id: &quot;<span class="subst">$&#123;id&#125;</span>&quot;) &#123;</span></span><br><span class="line"><span class="string">                id</span></span><br><span class="line"><span class="string">              &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          `</span></span><br><span class="line">        cy.log(<span class="string">`deleting item id:**<span class="subst">$&#123;id&#125;</span>**`</span>).then(</span><br><span class="line">          () =&gt;</span><br><span class="line">            client.mutate(&#123;</span><br><span class="line">              mutation,</span><br><span class="line">            &#125;),</span><br><span class="line">          &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can use this method before each test, or whenever we want:</p><figure class="highlight js"><figcaption><span>cypress/integration/delete-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="keyword">import</span> &#123; deleteAll &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Delete items&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  beforeEach(deleteAll)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;deletes all items by making GraphQL calls&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.intercept(&#123;</span><br><span class="line">      method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">      url: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        <span class="string">&#x27;x-gql-operation-name&#x27;</span>: <span class="string">&#x27;allTodos&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;).as(<span class="string">&#x27;allTodos&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.wait(<span class="string">&#x27;@allTodos&#x27;</span>).its(<span class="string">&#x27;response.body.data.allTodos&#x27;</span>).should(<span class="string">&#x27;be.empty&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/request-graphql/delete-all.gif" alt="Deleting each item one by one"></p><p>You can see deleting all items using GraphQL calls in this video below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/l7E7K7x7V8g" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Happy testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;pullquote&quot;&gt;&lt;p&gt;🧭 Find the source code for this blog post in the repository &lt;a href=&quot;https://github.com/bahmutov/todo-grap
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="graphql" scheme="https://glebbahmutov.com/blog/tags/graphql/"/>
    
  </entry>
  
  <entry>
    <title>Dynamic Tests From Cypress Fixture</title>
    <link href="https://glebbahmutov.com/blog/dynamic-tests-from-fixture/"/>
    <id>https://glebbahmutov.com/blog/dynamic-tests-from-fixture/</id>
    <published>2021-09-27T04:00:00.000Z</published>
    <updated>2021-10-12T03:11:02.784Z</updated>
    
    <content type="html"><![CDATA[<p>Often, you need to run the same test with different data. For example, one might want to test how the backend API handles creating an item for multiple items with different parameters. We could write a separate test for each item.</p><blockquote class="pullquote"><p>🔎 You can find the source code for this blog post in <a href="https://github.com/bahmutov/todo-graphql-example">bahmutov/todo-graphql-example</a> repo.</p></blockquote><h2><span id="hard-coded-data">Hard-coded data</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;Creates each item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;creates 1&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.request(&#123;</span><br><span class="line">      body: &#123;</span><br><span class="line">        title: <span class="string">&#x27;use GraphQL&#x27;</span>,</span><br><span class="line">        completed: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.contains(<span class="string">&#x27;.todo&#x27;</span>, <span class="string">&#x27;use GraphQL&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;creates 2&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.request(&#123;</span><br><span class="line">      body: &#123;</span><br><span class="line">        title: <span class="string">&#x27;write React frontend&#x27;</span>,</span><br><span class="line">        completed: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.contains(<span class="string">&#x27;.todo&#x27;</span>, <span class="string">&#x27;write React frontend&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;creates 3&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.request(&#123;</span><br><span class="line">      body: &#123;</span><br><span class="line">        title: <span class="string">&#x27;nice&#x27;</span>,</span><br><span class="line">        completed: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.contains(<span class="string">&#x27;.todo&#x27;</span>, <span class="string">&#x27;nice&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="fixture-data">Fixture data</span></h2><p>The separate tests have a lot of repetitive code, and we are not even checking if the item is marked completed on the page! We could the items in the JSON file to be loaded and used in a single test.</p><figure class="highlight json"><figcaption><span>cypress/fixtures/three.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;allTodos&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;use GraphQL&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;completed&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;__typename&quot;</span>: <span class="string">&quot;Todo&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;write React frontend&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;completed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;__typename&quot;</span>: <span class="string">&quot;Todo&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;21&quot;</span>, <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;nice&quot;</span>, <span class="attr">&quot;completed&quot;</span>: <span class="literal">true</span>, <span class="attr">&quot;__typename&quot;</span>: <span class="string">&quot;Todo&quot;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can load the fixture file using <a href="https://on.cypress.io/fixture">cy.fixture</a> command. Then we can iterate over the items, all in a single test.</p><figure class="highlight js"><figcaption><span>cypress/integration/dynamic-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;in a single test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.fixture(<span class="string">&#x27;three.json&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;data.allTodos&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</span><br><span class="line">      list.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// clear all existing items</span></span><br><span class="line">        deleteAll()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// create the item using a network call</span></span><br><span class="line">        cy.request(&#123;</span><br><span class="line">          method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">          url: <span class="string">&#x27;http://localhost:3000/&#x27;</span>,</span><br><span class="line">          body: &#123;</span><br><span class="line">            operationName: <span class="string">&#x27;AddTodo&#x27;</span>,</span><br><span class="line">            query: <span class="string">`</span></span><br><span class="line"><span class="string">            mutation AddTodo($title: String!, $completed: Boolean!) &#123;</span></span><br><span class="line"><span class="string">              createTodo(title: $title, completed: $completed) &#123;</span></span><br><span class="line"><span class="string">                id</span></span><br><span class="line"><span class="string">              &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          `</span>,</span><br><span class="line">            variables: &#123;</span><br><span class="line">              title: item.title,</span><br><span class="line">              completed: item.completed,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// visit the page and check the item is present</span></span><br><span class="line">        cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> classAssertion = item.completed</span><br><span class="line">          ? <span class="string">&#x27;have.class&#x27;</span></span><br><span class="line">          : <span class="string">&#x27;not.have.class&#x27;</span></span><br><span class="line">        cy.contains(<span class="string">&#x27;.todo&#x27;</span>, item.title).should(classAssertion, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test is a little cumbersome to read, and if a single request goes wrong, the test stops without trying to testing other items from the list. We would like to have a separate test for each item instead.</p><h2><span id="separate-tests">Separate tests</span></h2><figure class="highlight js"><figcaption><span>cypress/integration/dynamic-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;Creates each item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> items</span><br><span class="line">  <span class="comment">// DOES NOT WORK, CANNOT ADD NEW TESTS</span></span><br><span class="line">  <span class="comment">// AFTER THE RUN HAS STARTED</span></span><br><span class="line">  before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.fixture(<span class="string">&#x27;three.json&#x27;</span>).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      items = data.data.allTodos</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// hmm, how do we create a test for each item?</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If we load the list <em>dynamically</em> using <a href="https://on.cypress.io/fixture">cy.fixture</a> command, then the tests are already running, and it is too late to add new tests. Thus we need to load the fixture <em>before</em> any tests execute. We can import the JSON file instead of using <code>cy.fixture</code> - that way the bundler will load the JSON file into the spec and the loaded data will be available to define tests.</p><figure class="highlight js"><figcaption><span>cypress/integration/dynamic-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import the fixture with the data for new tests</span></span><br><span class="line"><span class="keyword">import</span> &#123; data &#125; <span class="keyword">from</span> <span class="string">&#x27;../fixtures/three.json&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; deleteAll &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Creates each item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  beforeEach(deleteAll)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create a test for each item imported from the fixture</span></span><br><span class="line">  data.allTodos.forEach(<span class="function">(<span class="params">item, k</span>) =&gt;</span> &#123;</span><br><span class="line">    it(<span class="string">`creates item <span class="subst">$&#123;k + <span class="number">1</span>&#125;</span>`</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// create the item using a network call</span></span><br><span class="line">      cy.request(&#123;</span><br><span class="line">        method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        url: <span class="string">&#x27;http://localhost:3000/&#x27;</span>,</span><br><span class="line">        body: &#123;</span><br><span class="line">          operationName: <span class="string">&#x27;AddTodo&#x27;</span>,</span><br><span class="line">          query: <span class="string">`</span></span><br><span class="line"><span class="string">              mutation AddTodo($title: String!, $completed: Boolean!) &#123;</span></span><br><span class="line"><span class="string">                createTodo(title: $title, completed: $completed) &#123;</span></span><br><span class="line"><span class="string">                  id</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">              &#125;</span></span><br><span class="line"><span class="string">            `</span>,</span><br><span class="line">          variables: &#123;</span><br><span class="line">            title: item.title,</span><br><span class="line">            completed: item.completed,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// visit the page and check the item is present</span></span><br><span class="line">      cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> classAssertion = item.completed ? <span class="string">&#x27;have.class&#x27;</span> : <span class="string">&#x27;not.have.class&#x27;</span></span><br><span class="line">      cy.contains(<span class="string">&#x27;.todo&#x27;</span>, item.title).should(classAssertion, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above approach creates a separate test for each item imported from the fixture. It is equivalent to having the items as a &quot;static&quot; list present in the spec file itself:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [&#123;</span><br><span class="line">  title: <span class="string">&#x27;first test&#x27;</span>,</span><br><span class="line">  completed: <span class="literal">false</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  title: <span class="string">&#x27;second test&#x27;</span>,</span><br><span class="line">  completed: <span class="literal">true</span></span><br><span class="line">&#125;]</span><br><span class="line">list.forEach(<span class="function">(<span class="params">item, k</span>) =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">`creates item <span class="subst">$&#123;k + <span class="number">1</span>&#125;</span>`</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// use the item</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>But I like having the data in a fixture file to clearly separate the test logic from the test data.</p><h2><span id="video">Video</span></h2><p>I have recorded a short video explaining the above approach, see it below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/EXVwvJrUGJ8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/import-cypress-fixtures/" title="Import Cypress fixtures">Import Cypress fixtures</a></li><li><a href="/blog/dynamic-api-tests-using-cypress-each/" title="Dynamic API Tests Using Cypress-Each Plugin">Dynamic API Tests Using Cypress-Each Plugin</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Often, you need to run the same test with different data. For example, one might want to test how the backend API handles creating an ite
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>What I Do After A Conference</title>
    <link href="https://glebbahmutov.com/blog/what-i-do-after-a-conference/"/>
    <id>https://glebbahmutov.com/blog/what-i-do-after-a-conference/</id>
    <published>2021-09-14T04:00:00.000Z</published>
    <updated>2021-09-14T13:52:59.212Z</updated>
    
    <content type="html"><![CDATA[<p>Here are the steps I take to ensure that each technical talk I deliver at a meetup, an online event, or at a conference brings me benefits long after the rounds of applause are over.</p><ol><li>A day or two before the conference I make my slide deck public. I use <a href="https://slides.com/bahmutov">slides.com/bahmutov</a> to create my presentations, and making the URL public allows me to quickly practice by flipping through the slides without the hassle of signing into my account.</li><li>I place the public presentation URL on my first / introduction slide to allow the audience to follow along during the talk. Sometimes my slides are code-heavy and one might prefer looking over them up close rather that just seeing them on the stage screen.</li></ol><p><img src="../images/after-conf/intro-slide.png" alt="My first slide shows the presentation URL"></p><ol start="3"><li>I always include the conference logo and name somewhere at the first and last slides. I take these images from the conference sites :) Someone scanning my slide decks should immediately see that the speaker has spoken at a variety of technical events.</li></ol><p><img src="../images/after-conf/logos.png" alt="First slides include the event logo"></p><p><strong>Tip:</strong> the position of the logo on the slides depends on the event format. For online events, I typically reserve the bottom right corner for my video feed. This <a href="https://www.youtube.com/watch?v=PIxaFbMBez0">ReactConf Finland</a> video shows a typical example.</p><p><img src="../images/after-conf/reactconf.png" alt="Do not put any info into the corner with the video feed"></p><p>For more tips about the slide formatting, see my blog post <a href="/blog/better-slide-format/" title="Better slide format">Better slide format</a>.</p><ol start="4"><li>Immediately after the conference I tweet / post the link to the slides and thank the audience for attending my talk. Here is an example tweet from a recent event</li></ol><p><img src="../images/after-conf/thankyou.png" alt="A tweet after the conference with the link to the presentation"></p><p>Do not forget to tag the conference so other people attending the event can find it.</p><ol start="5"><li>Once the video of your talk comes out (these days it happens very quickly), make sure to add the link to the talk&#39;s description and the slides. Here is my ReactConf Finland talk again: the link to the video is both on the slide and in the talk&#39;s description.</li></ol><p><img src="../images/after-conf/video.png" alt="Link to the video of the talk from the slides"></p><p><strong>Tip:</strong> always include the conference name and year in the talk&#39;s description so people know if the talk is recent. Something like &quot;Presented at ReactConf Finland 2021&quot;.</p><ol start="6"><li>If the video description does not include the link to the slides, add your own comment.</li></ol><p><img src="../images/after-conf/link-to-slides.png" alt="Link to the slides from the video"></p><ol start="7"><li>If your talk is based on the blog post (most of my talks start as one or multiple blog posts), definitely link and even embed the talk into the blog post. Make sure the presentation slides are also linked and even embedded like shown below from the blog post <a href="/blog/testing-react-native-app-using-cypress/" title="The Complete Guide to Testing React Native App Using Cypress">The Complete Guide to Testing React Native App Using Cypress</a>.</li></ol><p><img src="../images/after-conf/from-blog.png" alt="Link to the slides and video from the blog posts"></p><p>Sometimes I want to read about a topic, other times I want to watch someone explain it to me. And sometimes I simply want a summary and that&#39;s what the slide deck is for. So by linking all three formats to each other you cover every potential member of your audience.</p><ol start="8"><li>A day or two after the event, email a &quot;thank you&quot; to the organizers who have invited you. They might have taken a gamble inviting you, or you might not be even their first choice. But it is very very stressful to organize a conference, and they did it, and we never thank them enough for it. Tweet your &quot;thank you&quot; publicly, tag their company for more impact.</li></ol><h2><span id="final-thoughts">Final thoughts</span></h2><p>By making each resource link to the others, you make yourself discoverable. With time, these links will pay off. Someone will find your blog posts, then watch a linked video, will share the link with co-workers. They will jump to your other presentations, maybe even to your other blog posts. You can observe it yourself. Count the number of people seated in the audience during your talk. Was it 10? 100? 1000? Now go back to the video of your talk, or to the slides - if there is a counter, that number will be 10x that! Your audience is both the people present at the talk, and the online audience that finds and watches your talk later. Make it simple to find your work.</p><p>Here are some counters from a few physical events I did in 2019. None of these events had more than 50 people present at my presentation. Yet over 2 years, each slide deck was viewed by more than 1000 people. There is a long tail to every public presentation!</p><p><img src="../images/after-conf/counters.png" alt="Number of viewers for a few of my online presentation slide decks"></p><p>Finally, the physical conferences (even the online events!) are all about networking. Yes, you are making a presentation, but that takes such a small portion of your time; spend the rest talking to as many people as you can. You always find interesting, charming, wise people at every event you get a chance to speak at. Enjoy this time.</p><h2><span id="thank-you">Thank you</span></h2><p>This blog post was created based on the discussion with <a href="https://twitter.com/AtilaFassina">Atila Fassina</a> and <a href="https://twitter.com/giltayar">Gil Tayar</a> who are amazing people.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Here are the steps I take to ensure that each technical talk I deliver at a meetup, an online event, or at a conference brings me benefit
      
    
    </summary>
    
      <category term="people" scheme="https://glebbahmutov.com/blog/categories/people/"/>
    
    
      <category term="presentation" scheme="https://glebbahmutov.com/blog/tags/presentation/"/>
    
  </entry>
  
  <entry>
    <title>Test Plain Or Markdown File Using Cypress</title>
    <link href="https://glebbahmutov.com/blog/test-plain-or-markdown-file/"/>
    <id>https://glebbahmutov.com/blog/test-plain-or-markdown-file/</id>
    <published>2021-09-09T04:00:00.000Z</published>
    <updated>2021-09-09T05:54:54.947Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s imagine a web server that also returns a plain text file. We are already testing the web pages using Cypress test runner, so how can we request and validate the plain text file? What if the returned file is in Markdown format? Let&#39;s learn.</p><blockquote class="pullquote"><p>🎁 You can find the source code for the application and the Cypress tests in the repo <a href="https://github.com/bahmutov/check-text-file-example">bahmutov/check-text-file-example</a>.</p></blockquote><h2><span id="requesting-the-file">Requesting the file</span></h2><p>To download the file we can use the <a href="https://on.cypress.io/request">cy.request</a> command.</p><figure class="highlight js"><figcaption><span>spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;receives the right text file&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// request the text file using &quot;baseUrl + /text-file&quot; endpoint</span></span><br><span class="line">  cy.request(<span class="string">&#x27;/text-file&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>There is no page in the browser, but we can still see the server&#39;s response by clicking on the &quot;REQUEST&quot; command. The response is dumped in the DevTools Console.</p><p><img src="../images/text-file/file.png" alt="File response"></p><p>We can save the response as a file using the <a href="https://on.cypress.io/writefile">cy.writeFile</a> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;receives the right text file&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// request the text file using &quot;baseUrl + /text-file&quot; endpoint</span></span><br><span class="line">  cy.request(<span class="string">&#x27;/text-file&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// cy.writeFile automatically creates the output folder</span></span><br><span class="line">      cy.writeFile(<span class="string">&#x27;output/file.txt&#x27;</span>, text)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/text-file/save.png" alt="Write file to disk"></p><p><strong>Tip:</strong> store the downloaded file as a test artifact on your CI to be able to debug the testing step.</p><h2><span id="compare-the-file-text">Compare the file text</span></h2><p>We can compare the response text with the expected string. We can put the expected string inline into the spec file, or store it as a file in the repository, which we can read using the <a href="https://on.cypress.io/readfile">cy.readFile</a> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;receives the right text file&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// request the text file using &quot;baseUrl + /text-file&quot; endpoint</span></span><br><span class="line">  cy.request(<span class="string">&#x27;/text-file&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// cy.writeFile automatically creates the output folder</span></span><br><span class="line">      cy.writeFile(<span class="string">&#x27;output/file.txt&#x27;</span>, text)</span><br><span class="line"></span><br><span class="line">      cy.readFile(<span class="string">&#x27;expected/file.txt&#x27;</span>).then(<span class="function">(<span class="params">expectedText</span>) =&gt;</span> &#123;</span><br><span class="line">        expect(text).to.equal(expectedText)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/text-file/compare.png" alt="Compare the result to the file from the disk"></p><p>You can also check the file text for specific string or against a regular expression.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;receives the right text file&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// request the text file using &quot;baseUrl + /text-file&quot; endpoint</span></span><br><span class="line">  cy.request(<span class="string">&#x27;/text-file&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// cy.writeFile automatically creates the output folder</span></span><br><span class="line">      cy.writeFile(<span class="string">&#x27;output/file.txt&#x27;</span>, text)</span><br><span class="line"></span><br><span class="line">      cy.readFile(<span class="string">&#x27;expected/file.txt&#x27;</span>).then(<span class="function">(<span class="params">expectedText</span>) =&gt;</span> &#123;</span><br><span class="line">        expect(text).to.equal(expectedText)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      expect(text).to.include(<span class="string">&#x27;This is a file&#x27;</span>)</span><br><span class="line">      expect(text).to.match(<span class="regexp">/a plain/i</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/text-file/expect.png" alt="Checking the text using assertions"></p><p><strong>Tip:</strong> Cypress includes a large number of <a href="https://glebbahmutov.com/cypress-examples/commands/assertions.html">assertions</a> thanks to the bundled Chai library.</p><h2><span id="show-the-file">Show the file</span></h2><p>One thing we are not using during this test is the application iframe itself - it is empty because we are not visiting the site. We cannot use the <a href="https://on.cypress.io/visit">cy.visit</a> command because the returned content type is NOT <code>text/html</code>. Thus we need to write the contents into the document ourselves.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;visits the text file&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.request(<span class="string">&#x27;/text-file&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.document().invoke(<span class="string">&#x27;write&#x27;</span>, text)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> you can clear the application iframe before writing the new content by visiting the blank page, see the blog post <a href="/blog/cypress-tips-and-tricks/" title="Cypress Tips and Tricks">Cypress Tips and Tricks</a>.</p><p><img src="../images/text-file/write.png" alt="The plain text written into the application iframe"></p><p>The text does not look right - because it does not show the newlines correctly. Let&#39;s wrap the text in a <code>&lt;pre&gt;</code> element.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;visits the text file&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.request(<span class="string">&#x27;/text-file&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.document().invoke(<span class="string">&#x27;write&#x27;</span>, <span class="string">&#x27;&lt;pre&gt;&#x27;</span> + text + <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/text-file/wrap.png" alt="Preformatted text"></p><p>Much better.</p><p>Now we can use the other Cypress commands like <a href="https://on.cypress.io/contains">cy.contains</a> to assert the text.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;visits the text file&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.request(<span class="string">&#x27;/text-file&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.document().invoke(<span class="string">&#x27;write&#x27;</span>, <span class="string">&#x27;&lt;pre&gt;&#x27;</span> + text + <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  cy.contains(<span class="string">&#x27;This is a file&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/text-file/contains.png" alt="Using the cy.contains command"></p><h2><span id="markdown-files">Markdown files</span></h2><p>What if we receive a plain text Markdown file? We can render it using the <code>&lt;pre&gt;</code> element.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;visits the Markdown file&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.request(<span class="string">&#x27;/markdown-file&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.document().invoke(<span class="string">&#x27;write&#x27;</span>, <span class="string">&#x27;&lt;pre&gt;&#x27;</span> + text + <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  cy.contains(<span class="string">&#x27;- one&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;- two&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;- three&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/text-file/md1.png" alt="Checking the contents of the Markdown file"></p><p>Markdown file has structure. We can convert Markdown into HTML using a 3rd party library instead of using the <code>&lt;pre&gt;</code> element when writing the document. Then the test could use the CSS selectors to query the contents better.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mdToHtml = <span class="built_in">require</span>(<span class="string">&#x27;nano-markdown&#x27;</span>)</span><br><span class="line">it(<span class="string">&#x27;converts the Markdown file&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.request(<span class="string">&#x27;/markdown-file&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .then(mdToHtml)</span><br><span class="line">    .then(<span class="function">(<span class="params">html</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.document().invoke(<span class="string">&#x27;write&#x27;</span>, html)</span><br><span class="line">    &#125;)</span><br><span class="line">  cy.contains(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Example Topic&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">    .and(<span class="function">(<span class="params">$list</span>) =&gt;</span> &#123;</span><br><span class="line">      expect($list[<span class="number">0</span>]).to.contain(<span class="string">&#x27;one&#x27;</span>)</span><br><span class="line">      expect($list[<span class="number">1</span>]).to.contain(<span class="string">&#x27;two&#x27;</span>)</span><br><span class="line">      expect($list[<span class="number">2</span>]).to.contain(<span class="string">&#x27;three&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The HTML document from the converted Markdown text certainly looks nice.</p><p><img src="../images/text-file/md2.png" alt="Markdown file converted to HTML and shown in the app iframe"></p><h2><span id="running-all-tests">Running all tests</span></h2><p>When running all tests together, the <code>document.write(...)</code> command keeps appending to the same document.</p><p><img src="../images/text-file/all-tests.png" alt="Output of running all tests in the spec file"></p><p>You can clear the document before writing HTML using the <code>document.open()</code> method</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function">(<span class="params">html</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.document().invoke(<span class="string">&#x27;open&#x27;</span>)</span><br><span class="line">  cy.document().invoke(<span class="string">&#x27;write&#x27;</span>, html)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We can open the document before each test</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.document().invoke(<span class="string">&#x27;open&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Alternatively, we could visit the blank page to clear the document before each test. See this tip in the blog post <a href="/blog/visit-blank-page-between-tests/" title="Visit The Blank Page Between Cypress Tests">Visit The Blank Page Between Cypress Tests</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s imagine a web server that also returns a plain text file. We are already testing the web pages using Cypress test runner, so ho
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Skip Cypress Install On CI</title>
    <link href="https://glebbahmutov.com/blog/skip-cypress-install-on-ci/"/>
    <id>https://glebbahmutov.com/blog/skip-cypress-install-on-ci/</id>
    <published>2021-09-04T04:00:00.000Z</published>
    <updated>2021-09-06T08:30:59.523Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s say you want to introduce Cypress End-to-End tests in your company. You probably already have a repository with lots of tests, and the CI build script is ... complicated. Can you add Cypress without modifying lots of installation and caching steps in the CI config file? Can you avoid your coworkers&#39; anger?</p><p>Sure. At first, you can get away with <em>not installing</em> Cypress on CI. You can still run your initial tests (that are probably going to be simple) using a <a href="https://github.com/cypress-io/cypress-docker-images">cypress/included</a> Docker image with Cypress pre-installed.</p><p>Let&#39;s take an example application in <a href="https://github.com/bahmutov/todomvc-vercel">bahmutov/todomvc-vercel</a>. It is deployed to Vercel platform, and runs just the linting step using the GitHub Actions <a href="https://github.com/bahmutov/todomvc-vercel/blob/main/.github/workflows/lint.yml">lint.yml</a> workflow.</p><figure class="highlight yml"><figcaption><span>.github/workflows/lint.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">lint</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">lint:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="comment"># https://github.com/bahmutov/npm-install</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">bahmutov/npm-install@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Lint</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">lint</span></span><br></pre></td></tr></table></figure><p>Let&#39;s add Cypress NPM dependency.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D cypress</span></span><br></pre></td></tr></table></figure><p>We can write a few tests, like this sanity <a href="https://github.com/bahmutov/todomvc-vercel/blob/main/cypress/integration/spec.js">spec.js</a></p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;works&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// application starts with 3 todos</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=new-todo]&#x27;</span>).type(<span class="string">&#x27;Add tests!&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">    .eq(<span class="number">3</span>)</span><br><span class="line">    .should(<span class="string">&#x27;include.text&#x27;</span>, <span class="string">&#x27;Add tests!&#x27;</span>)</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let&#39;s see what happens next:</p><ul><li>the coworkers all get a Cypress binary on their machines the next time they run <code>npm install</code> or <code>yarn install</code>. This binary is stored in the central folder on their machine, thus it is downloaded and unzipped once per Cypress version. It is 1-2 minute process, but that is acceptable.</li><li>the continuous integration server will install the Cypress binary on every workflow execution, to avoid this you need to configure <a href="https://on.cypress.io/caching">Cypress caching</a>. If you have a complicated CI workflow, this will be complicated.</li></ul><p>We can take a middle path: we can use Cypress to run our tests without installing it on the CI during the NPM installation. Let&#39;s keep our lint workflow and just stop it from downloading the Cypress binary - since it is not going to run any Cypress tests.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">  <span class="comment"># https://github.com/bahmutov/npm-install</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">bahmutov/npm-install@v1</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="comment"># avoid downloading and unzipping Cypress binary</span></span><br><span class="line">    <span class="comment"># which saves time - we do not plan to run Cypress tests</span></span><br><span class="line">    <span class="comment"># in this lint workflow, see</span></span><br><span class="line">    <span class="comment"># https://on.cypress.io/installing</span></span><br><span class="line">    <span class="attr">CYPRESS_INSTALL_BINARY:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>By setting the environment variable <code>CYPRESS_INSTALL_BINARY: 0</code> during the NPM installation step, we can skip the Cypress binary download. All our complicated workflows stay (almost) the same, and the caching during those workflows never sees any delays.</p><p>Let&#39;s move to the next task: we do want to run our Cypress tests after the deploy. Here is the simplest trick I know of: use <code>cypress/included:x.y.z</code> Docker image, check out the source code to bring the specs to the local container, and call <code>cypress run</code> to execute all tests. For example, after Vercel deploys the application, it triggers the GitHub deploy event. If the deploy is successful, we can grab the deployed URL and run Cypress tests against it.</p><figure class="highlight yml"><figcaption><span>.github/workflows/deploy.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">deployment_status</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">tests-after-deploy:</span></span><br><span class="line">    <span class="comment"># only runs this job on successful deploy</span></span><br><span class="line">    <span class="comment"># https://glebbahmutov.com/blog/develop-preview-test/</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">github.event.deployment_status.state</span> <span class="string">==</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="comment"># Use a Docker image with Cypress installed globally</span></span><br><span class="line">    <span class="comment"># https://github.com/cypress-io/github-action#docker-image</span></span><br><span class="line">    <span class="comment"># https://github.com/cypress-io/cypress-docker-images</span></span><br><span class="line">    <span class="attr">container:</span> <span class="string">cypress/included:8.3.1</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># see if there is GITHUB_REF</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">GITHUB_REF</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;GITHUB_REF is $&#123;GITHUB_REF&#125;&quot;</span></span><br><span class="line">      <span class="comment"># to compute the branch name for the deployed commit</span></span><br><span class="line">      <span class="comment"># need to grab the repo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Notice that we do not install any dependencies in this job</span></span><br><span class="line">      <span class="comment"># Our Cypress tests do not use any plugins, so we just</span></span><br><span class="line">      <span class="comment"># need to invoke the global Cypress from the Docker image</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;Vercel unique deployment URL is $<span class="template-variable">&#123;&#123; github.event.deployment_status.target_url &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;Deployed commit $<span class="template-variable">&#123;&#123; github.sha &#125;&#125;</span>&quot;</span></span><br><span class="line">          <span class="string">export</span> <span class="string">BRANCH_NAME=$(git</span> <span class="string">show</span> <span class="string">-s</span> <span class="string">--pretty=%D</span> <span class="string">HEAD</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-s</span> <span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;\n&#x27;</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">&#x27;s/^ //&#x27;</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">-e</span> <span class="string">&#x27;origin/&#x27;</span> <span class="string">|</span> <span class="string">head</span> <span class="number">-1</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">&#x27;s/\origin\///g&#x27;</span><span class="string">)</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;Deployed branch $&#123;BRANCH_NAME&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="string">export</span> <span class="string">CYPRESS_baseUrl=$&#123;&#123;</span> <span class="string">github.event.deployment_status.target_url</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="string">cypress</span> <span class="string">run</span></span><br></pre></td></tr></table></figure><p>You can see the tests running at <a href="https://github.com/bahmutov/todomvc-vercel/actions">bahmutov/todomvc-vercel/actions</a>.</p><p><img src="../images/skip-cypress-install-on-ci/included.png" alt="Running tests using cypress/included image"></p><p>The <code>cypress/included:x.y.z</code> container has the Chrome browser installed. You can see what is inside using the <code>cypress info</code> command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># show the info about the browsers</span></span><br><span class="line"><span class="comment"># already installed in the Docker image</span></span><br><span class="line">cypress info</span><br><span class="line"><span class="comment"># one can use CYPRESS_ environment variables</span></span><br><span class="line"><span class="comment"># or --config ... arguments to configure Cypress values</span></span><br><span class="line"><span class="comment"># https://on.cypress.io/configuration</span></span><br><span class="line">cypress run --config baseUrl=<span class="variable">$&#123;&#123; github.event.deployment_status.target_url &#125;</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/skip-cypress-install-on-ci/info.png" alt="cypress info command output when running using cypress/included Docker image"></p><p>Nice - notice how fast the image executes, since nothing needs to be installed. On your CI, make sure to cache <code>cypress/included:x.y.z</code> images to avoid pulling them from Docker Hub on each run.</p><h2><span id="bonus-installing-just-cypress-plugins">Bonus: installing just Cypress plugins</span></h2><p>After a while, you might add some Cypress plugins to your testing pipeline. Thus you would need to install them before running tests in the <code>cypress/included</code> container. Just list the plugins to install explicitly.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if we did not _any_ Cypress plugins, we could skip the</span></span><br><span class="line"><span class="comment"># NPM install step completely. As we are using the &quot;cypress-grep&quot;</span></span><br><span class="line"><span class="comment"># plugin, we need to install it. But we do not need to install</span></span><br><span class="line"><span class="comment"># the heavy modules like Cypress itself</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Cypress</span> <span class="string">plugins</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">npm</span> <span class="string">i</span> <span class="string">-D</span> <span class="string">cypress-grep</span></span><br></pre></td></tr></table></figure><p>See the pull request <a href="https://github.com/bahmutov/todomvc-vercel/pull/1">#1</a>. Of course, at this point you might set up NPM module caching <em>just</em> for the plugins.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s say you want to introduce Cypress End-to-End tests in your company. You probably already have a repository with lots of tests, 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
      <category term="vercel" scheme="https://glebbahmutov.com/blog/tags/vercel/"/>
    
  </entry>
  
  <entry>
    <title>How To Verify Phone Number During Tests Part 2</title>
    <link href="https://glebbahmutov.com/blog/verify-phone-part-two/"/>
    <id>https://glebbahmutov.com/blog/verify-phone-part-two/</id>
    <published>2021-08-31T04:00:00.000Z</published>
    <updated>2021-09-13T13:03:36.771Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s continue looking at a web application that makes the users sign up using a phone number. We have covered the test phone prefix in the previous blog post <a href="/blog/verify-phone-part-one/" title="How To Verify Phone Number During Tests Part 1">How To Verify Phone Number During Tests Part 1</a>. In this blog post, I intend to show how the test runner can directly access the MySQL database to look up the user&#39;s record, rather than relying on the application&#39;s API to expose it.</p><blockquote class="pullquote"><p>🎁 You can find the full source code in the repo <a href="https://github.com/bahmutov/verify-code-example">bahmutov/verify-code-example</a>.</p></blockquote><h2><span id="the-application">The application</span></h2><p>To install all NPM dependencies to run the application we execute the command</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure><p>The above command also automatically installs the dependencies in the <code>api</code> subfolder via <code>postinstall</code> script in the <code>package.json</code> file</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;postinstall&quot;</span>: <span class="string">&quot;npm install --prefix api&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The database connection is made from the <code>api</code> folder via <code>mysql</code> module as I will show in the later sections.</p><h2><span id="the-user-id">The user id</span></h2><p>When a new user is added to the table, it gets assigned a user id. Later on, if we want to look up the user&#39;s record, we need to know this value in the test. We can see the user ID returned by the API call in the DevTools Network tab below</p><p><img src="../images/verify-part-2/user-id.png" alt="The Ajax call returns the user ID"></p><p><strong>Aside:</strong> the app is showing this user id as you can see below the input elements, but that&#39;s just to make the demo simpler to understand. Usually the item&#39;s ID is not exposed by the UI.</p><p>We can grab the returned user ID using the <a href="https://on.cypress.io/intercept">cy.intercept</a> command by spying on the API call that creates the user. Here is the test that prints the returned ID to the console.</p><figure class="highlight js"><figcaption><span>cypress/integration/user-id.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Lodash library is bundled with Cypress</span></span><br><span class="line"><span class="keyword">const</span> &#123; _ &#125; = Cypress;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;returns user id&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">`test-<span class="subst">$&#123;_.random(<span class="number">1e4</span>)&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> email = <span class="string">`<span class="subst">$&#123;username&#125;</span>@example.com`</span>;</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;[name=username]&#x27;</span>).type(username);</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=email]&#x27;</span>).type(email);</span><br><span class="line">  cy.intercept(<span class="string">&#x27;/signup.json&#x27;</span>).as(<span class="string">&#x27;signup&#x27;</span>);</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sign up&#x27;</span>).click();</span><br><span class="line">  cy.wait(<span class="string">&#x27;@signup&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;response.body&#x27;</span>)</span><br><span class="line">    <span class="comment">// the assertion &quot;have.property&quot; yields its value</span></span><br><span class="line">    .should(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;userId&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">userId</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;New user id %s&#x27;</span>, userId);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="../images/verify-part-2/spy.png" alt="The API returns the created user ID"></p><p>Now we need to use this ID to look up the user information in the database.</p><h2><span id="mysql-database-connection">MySQL database connection</span></h2><p>The Cypress test runs in the browser, but we want to connect to the MySQL database, which is only possible from outside the browser. Luckily, Cypress includes the plugin file that runs in its own Node process on the host machine. The plugin process can connect to the database, and communicate the results back to the browser when called using the <a href="https://on.cypress.io/task">cy.task</a> command.</p><p>Here is our <code>cypress/plugins/index.js</code> file. It will read the database connection information from the process environment variables that Node applications automatically have in the <code>process.env</code> object, see <a href="https://nodejs.org/api/process.html#process_process_env">Node API documentation</a>.</p><p><strong>Tip:</strong> read <a href="https://www.twilio.com/blog/2017/08/working-with-environment-variables-in-node-js.html">Working with Environment Variables in Node.js</a> to learn how to work with the environment variables.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-check</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="comment">// mysql dependency is installed in the API subfolder</span></span><br><span class="line"><span class="comment">// thus Cypress plugin file has to reach into that folder</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;../../api/node_modules/mysql&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// this function runs in Node at the start of the project</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">on, config</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// read the environment variables defined on the host machine</span></span><br><span class="line">  <span class="comment">// Node.js allows one to look up all variables defined in the environment</span></span><br><span class="line">  <span class="comment">// and then access them using process.env.&lt;VARIABLE_NAME&gt;</span></span><br><span class="line">  <span class="comment">// https://nodejs.org/api/process.html#process_process_env</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// in our system we assume that the database is running</span></span><br><span class="line">  <span class="comment">// at the host URL &quot;DB_HOST&quot;, and we can connect to it using</span></span><br><span class="line">  <span class="comment">// &quot;DB_USER&quot;, &quot;DB_PASSWORD&quot; environment values</span></span><br><span class="line">  <span class="comment">// The database name comes from the &quot;DB_NAME&quot; variable.</span></span><br><span class="line">  <span class="keyword">const</span> host = process.env.DB_HOST;</span><br><span class="line">  <span class="keyword">const</span> user = process.env.DB_USER;</span><br><span class="line">  <span class="keyword">const</span> database = process.env.DB_NAME;</span><br><span class="line">  <span class="keyword">const</span> password = process.env.DB_PASSWORD;</span><br><span class="line">  <span class="comment">// if the config variables are not set</span></span><br><span class="line">  <span class="comment">// throw an error and stop the application</span></span><br><span class="line">  <span class="keyword">if</span> (!host || !user || !database || !password) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;DB variables are not set&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">getUser</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> connection = mysql.createConnection(&#123;</span><br><span class="line">        host,</span><br><span class="line">        user,</span><br><span class="line">        password,</span><br><span class="line">        database</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      connection.connect();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> theUser = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        connection.query(</span><br><span class="line">          &#123;</span><br><span class="line">            sql: <span class="string">&#x27;SELECT * FROM users WHERE user_id = ?&#x27;</span>,</span><br><span class="line">            values: [id]</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (error) &#123;</span><br><span class="line">              <span class="built_in">console</span>.error(error);</span><br><span class="line">              <span class="keyword">return</span> reject(error);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!results.length) &#123;</span><br><span class="line">              <span class="built_in">console</span>.error(<span class="string">&#x27;Could not find user with username %s&#x27;</span>, id);</span><br><span class="line">              <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Unknown user <span class="subst">$&#123;id&#125;</span>`</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(results);</span><br><span class="line">            <span class="comment">// return all fields except for ID</span></span><br><span class="line">            <span class="comment">// also convert the isPhoneVerified to boolean</span></span><br><span class="line">            resolve(&#123;</span><br><span class="line">              ...results[<span class="number">0</span>],</span><br><span class="line">              isPhoneVerified: results[<span class="number">0</span>].isPhoneVerified === <span class="number">1</span>,</span><br><span class="line">              user_id: <span class="literal">undefined</span></span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      connection.end();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> theUser;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>It looks so much like the regular Node code - because it is. The spec can now call <code>cy.task(&#39;getUser&#39;, ...)</code> to fetch the user information. We can print the yielded object in the console.</p><p><img src="../images/verify-part-2/get-user.png" alt="Getting the user record from the database via cy.task"></p><p><strong>Note:</strong> the <code>mysql</code> NPM module is used and installed by the <code>package.json</code> file inside the <code>api</code> folder. Thus our Cypress plugin Node file requires it using the relative path <code>require(&#39;../../api/node_modules/mysql&#39;)</code>.</p><h3><span id="gotcha-es6-modules">Gotcha: ES6 modules</span></h3><p>By default, the web project uses ES6 modules by setting <code>type: module</code> in its <a href="https://github.com/bahmutov/verify-code-example/blob/main/package.json">package.json</a>. If we simply try to load the Cypress plugin file, it fails:</p><p><img src="../images/verify-part-2/needs-module.png" alt="Cypress fails to load its own plugin file"></p><p>To solve this, I added a dummy <a href="https://github.com/bahmutov/verify-code-example/blob/main/cypress/package.json">package.json</a> to the <code>cypress</code> subfolder. This file points back at the CommonJS resolution when Cypress loads its own files.</p><figure class="highlight json"><figcaption><span>cypress/package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;cypress-tests&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;commonjs&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="gotcha-native-database-driver-code">Gotcha: Native database driver code</span></h3><p>Sometimes when loading a database module, Cypress might need to load the native code. Since you might install dependencies using one version of Node (let&#39;s say Node 10), while Cypress comes with its own built-in Node used by default to load the plugin file, the native code install is incompatible. You can check the Node version bundled with Cypress using the <a href="https://on.cypress.io/command-line#cypress-version">cypress version</a> command:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npx cypress version</span><br><span class="line">Cypress package version: 8.3.1</span><br><span class="line">Cypress binary version: 8.3.1</span><br><span class="line">Electron version: 13.2.0</span><br><span class="line">Bundled Node version: 14.16.0</span><br></pre></td></tr></table></figure><p>Here is the tip if the native database driver does not load: tell Cypress to use the <a href="https://on.cypress.io/configuration">system Node version</a> by using the <code>cypress.json</code> file.</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;nodeVersion&quot;</span>: <span class="string">&quot;system&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="re-using-the-api-code">Re-using the API code</span></h2><p>The above plugin file code looks very much like the API code used to access the database. I suggest re-using part of the production code to create the database connection from the plugin file.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-check</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="keyword">const</span> &#123; makeConnection &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../../api/src/db.config&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">on, config</span>) </span>&#123;</span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">getUser</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> connection = makeConnection();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> theUser = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        connection.query(</span><br><span class="line">          &#123;</span><br><span class="line">            sql: <span class="string">&#x27;SELECT * FROM users WHERE user_id = ?&#x27;</span>,</span><br><span class="line">            values: [id]</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (error) &#123;</span><br><span class="line">              <span class="built_in">console</span>.error(error);</span><br><span class="line">              <span class="keyword">return</span> reject(error);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!results.length) &#123;</span><br><span class="line">              <span class="built_in">console</span>.error(<span class="string">&#x27;Could not find user with username %s&#x27;</span>, id);</span><br><span class="line">              <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Unknown user <span class="subst">$&#123;id&#125;</span>`</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(results);</span><br><span class="line">            <span class="comment">// return all fields except for ID</span></span><br><span class="line">            <span class="comment">// also convert the isPhoneVerified to boolean</span></span><br><span class="line">            resolve(&#123;</span><br><span class="line">              ...results[<span class="number">0</span>],</span><br><span class="line">              isPhoneVerified: results[<span class="number">0</span>].isPhoneVerified === <span class="number">1</span>,</span><br><span class="line">              user_id: <span class="literal">undefined</span></span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      connection.end();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> theUser;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Even better is to move the SQL query into the production code - it might be useful there, and just call the API code from the plugin file. Let&#39;s put the DB access into the <code>api/src/db.user.js</code> next to the other database queries.</p><figure class="highlight js"><figcaption><span>api/src/db.user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-check</span></span><br><span class="line"><span class="keyword">const</span> &#123; makeConnection &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./db.config&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> connection = makeConnection();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> theUser = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    connection.query(</span><br><span class="line">      &#123;</span><br><span class="line">        sql: <span class="string">&#x27;SELECT * FROM users WHERE user_id = ?&#x27;</span>,</span><br><span class="line">        values: [id]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params">error, results</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">          <span class="built_in">console</span>.error(error);</span><br><span class="line">          <span class="keyword">return</span> reject(error);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!results.length) &#123;</span><br><span class="line">          <span class="built_in">console</span>.error(<span class="string">&#x27;Could not find user with username %s&#x27;</span>, id);</span><br><span class="line">          <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Unknown user <span class="subst">$&#123;id&#125;</span>`</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(results);</span><br><span class="line">        <span class="comment">// return all fields except for ID</span></span><br><span class="line">        <span class="comment">// also convert the isPhoneVerified to boolean</span></span><br><span class="line">        resolve(&#123;</span><br><span class="line">          ...results[<span class="number">0</span>],</span><br><span class="line">          isPhoneVerified: results[<span class="number">0</span>].isPhoneVerified === <span class="number">1</span>,</span><br><span class="line">          user_id: <span class="literal">undefined</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  connection.end();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> theUser;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>From the Cypress plugin file, simply call the exported asynchronous function.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-check</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="keyword">const</span> getDbUser = <span class="built_in">require</span>(<span class="string">&#x27;../../api/src/db.user&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">on, config</span>) </span>&#123;</span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">getUser</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> user = <span class="keyword">await</span> getDbUser(id);</span><br><span class="line">      <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Beautiful.</p><h2><span id="looking-up-the-phone-verification-code">Looking up the phone verification code</span></h2><p>Finally, if we can look up the user info via <code>cy.task</code> + DB query, we do not need to use much of the special test phone code we wrote before. We can still prevent the SMS send for the phones that start with the test prefix. But now we can use randomly generated codes for such numbers too!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sendSms = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  process.env.TEST_PHONE_NUMBER_PREFIX &amp;&amp;</span><br><span class="line">  phoneNumber.startsWith(process.env.TEST_PHONE_NUMBER_PREFIX)</span><br><span class="line">) &#123;</span><br><span class="line">  sendSms = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> phoneConfirmationCode = <span class="built_in">String</span>(<span class="built_in">Math</span>.random()).slice(<span class="number">2</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure><p>After creating the user, we can look the code by querying the MySQL database using the task. Here is the complete test.</p><figure class="highlight js"><figcaption><span>cypress/integration/query-db.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; getTestPhoneNumber &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lodash library is bundled with Cypress</span></span><br><span class="line"><span class="keyword">const</span> &#123; _ &#125; = Cypress;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;queries code from DB&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">`test-<span class="subst">$&#123;_.random(<span class="number">1e4</span>)&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> email = <span class="string">`<span class="subst">$&#123;username&#125;</span>@example.com`</span>;</span><br><span class="line">  <span class="comment">// we will find the user id later</span></span><br><span class="line">  <span class="keyword">let</span> userId;</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;[name=username]&#x27;</span>).type(username);</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=email]&#x27;</span>).type(email);</span><br><span class="line">  cy.intercept(<span class="string">&#x27;/signup.json&#x27;</span>).as(<span class="string">&#x27;signup&#x27;</span>);</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sign up&#x27;</span>).click();</span><br><span class="line">  cy.wait(<span class="string">&#x27;@signup&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;response.body&#x27;</span>)</span><br><span class="line">    <span class="comment">// the assertion &quot;have.property&quot; yields its value</span></span><br><span class="line">    .should(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;userId&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      userId = id;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> phoneNumber = getTestPhoneNumber();</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=phone]&#x27;</span>).type(<span class="string">`<span class="subst">$&#123;phoneNumber&#125;</span>&#123;enter&#125;`</span>, &#123; <span class="attr">delay</span>: <span class="number">75</span> &#125;);</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=code]&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// now we can query the database to find out the confirmation code</span></span><br><span class="line">      <span class="comment">// need to use .then closure to make sure the userId is defined</span></span><br><span class="line">      cy.task(<span class="string">&#x27;getUser&#x27;</span>, userId)</span><br><span class="line">        .should(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;phoneConfirmationCode&#x27;</span>)</span><br><span class="line">        .then(<span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line">          cy.log(<span class="string">`code: **<span class="subst">$&#123;code&#125;</span>**`</span>);</span><br><span class="line">          cy.get(<span class="string">&#x27;[name=code]&#x27;</span>).type(code + <span class="string">&#x27;&#123;enter&#125;&#x27;</span>, &#123; <span class="attr">delay</span>: <span class="number">75</span> &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// at the end of all the previous commands</span></span><br><span class="line">  <span class="comment">// the phone number should have been verified</span></span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=PhoneVerified]&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="../images/verify-part-2/verified.gif" alt="Verified the user by looking up the code from the database"></p><p>Nice!</p><h2><span id="final-thoughts">Final thoughts</span></h2><p>I think the best practices for accessing the database from Cypress tests are:</p><ul><li>try avoiding the code duplication by re-using as much of the existing production code as possible</li><li>limit the number of shortcuts taken via DB lookups or modifications; use them to bypass 3rd party services that cannot be automated otherwise (like receiving an SMS message).</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s continue looking at a web application that makes the users sign up using a phone number. We have covered the test phone prefix 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="db" scheme="https://glebbahmutov.com/blog/tags/db/"/>
    
  </entry>
  
  <entry>
    <title>How To Verify Phone Number During Tests Part 1</title>
    <link href="https://glebbahmutov.com/blog/verify-phone-part-one/"/>
    <id>https://glebbahmutov.com/blog/verify-phone-part-one/</id>
    <published>2021-08-30T04:00:00.000Z</published>
    <updated>2021-09-04T19:45:23.592Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s take a look at a typical web application that makes the users sign up using a phone number. We want to verify the user via a phone number to avoid bots and spam accounts. We can ask for the user&#39;s phone number during the sign-up step, then send an SMS code, and then the user should enter that code. If the code matches the one we have sent, the phone has been verified.</p><blockquote class="pullquote"><p>🎁 You can find the full source code in the repo <a href="https://github.com/bahmutov/verify-code-example">bahmutov/verify-code-example</a>.</p></blockquote><h2><span id="the-users-database-table">The users database table</span></h2><p>I used a hosted MySQL database to store all users in a table. Here is the SQL definition for the <code>users</code> table.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users(</span><br><span class="line">  user_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  username <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  email <span class="type">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  phone <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">  phoneConfirmationCode <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">  isPhoneVerified <span class="type">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="literal">FALSE</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(user_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Notice the <code>phone</code>, <code>phoneConfirmationCode</code>, and <code>isPhoneVerified</code> columns are optional.</p><h2><span id="fake-username-and-email">Fake username and email</span></h2><p>We can generate a random fake username and email during the end-to-end test. We could use a library or just get random strings using the Lodash <a href="https://lodash.com/docs#random">_.random</a> method. Our test starts with entering these inputs.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Lodash library is bundled with Cypress</span></span><br><span class="line"><span class="keyword">const</span> &#123; _ &#125; = Cypress;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;fails with the wrong code&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">`test-<span class="subst">$&#123;_.random(<span class="number">1e4</span>)&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> email = <span class="string">`<span class="subst">$&#123;username&#125;</span>@example.com`</span>;</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;[name=username]&#x27;</span>).type(username);</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=email]&#x27;</span>).type(email);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/verify-part-1/enter-username.gif" alt="The test enters generated username and email"></p><p>Next we can click the &quot;Sign up&quot; button to create a new user record in the database. The message is relayed to the API:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">posting new user: &#123; username: &#x27;test-8773&#x27;, email: &#x27;test-8773@example.com&#x27; &#125;</span><br><span class="line"></span><br><span class="line">—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line">&gt; #2 POST /signup</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  username: &quot;test-8773&quot;,</span><br><span class="line">  email: &quot;test-8773@example.com&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">posting new user: &#123; username: &#x27;test-8773&#x27;, email: &#x27;test-8773@example.com&#x27; &#125;</span><br><span class="line">New user id: 52</span><br><span class="line">&lt; #2 200 [+473ms]</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  userId: 52</span><br><span class="line">&#125;</span><br><span class="line">POST /signup.json 200 497.528 ms - -</span><br></pre></td></tr></table></figure><p>The relevant part of the code inserts the new record.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;posting new user:&#x27;</span>, body);</span><br><span class="line"><span class="keyword">const</span> userId = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  connection.query(<span class="string">&#x27;INSERT INTO users SET ?&#x27;</span>, body, <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(error);</span><br><span class="line">      <span class="keyword">return</span> reject(error);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;New user id: %s&#x27;</span>, results.insertId);</span><br><span class="line">    resolve(results.insertId);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  connection.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  userId</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>We have a new user without a phone number yet. The user provides a phone number on the next step of the sign up process.</p><h2><span id="adding-the-phone-number">Adding the phone number</span></h2><p>We can enter a test number from the test. For now, let&#39;s use a hardcoded number from a non-existent area <a href="https://www.areacodehelp.com/where/area_code_555.shtml">code 555</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;[name=phone]&#x27;</span>)</span><br><span class="line">  <span class="comment">// add 1 second delay to show the number</span></span><br><span class="line">  <span class="comment">// in the video</span></span><br><span class="line">  .wait(<span class="number">1000</span>)</span><br><span class="line">  .type(<span class="string">&#x27;555-123-4060&#123;enter&#125;&#x27;</span>, &#123; <span class="attr">delay</span>: <span class="number">75</span> &#125;);</span><br></pre></td></tr></table></figure><p><img src="../images/verify-part-1/phone.gif" alt="The test sends the phone number for the user"></p><p>The phone number is sent with the user id to the backend API.</p><h2><span id="the-verification-code">The verification code</span></h2><p>Our API generates a random verification code. The code is sent to the given phone number via a 3rd party service (let&#39;s pretend), and the code is saved into the user&#39;s record.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> phoneConfirmationCode = <span class="built_in">String</span>(<span class="built_in">Math</span>.random()).slice(<span class="number">2</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// save the random phone verification code</span></span><br><span class="line"><span class="comment">// and &quot;send&quot; the phone verification code via SMS</span></span><br><span class="line"><span class="comment">// (in this demo we are NOT sending the verification code via SMS)</span></span><br><span class="line"><span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  connection.query(</span><br><span class="line">    &#123;</span><br><span class="line">      sql: <span class="string">`</span></span><br><span class="line"><span class="string">        UPDATE users</span></span><br><span class="line"><span class="string">        SET phone = ?, phoneConfirmationCode = ?, isPhoneVerified = false</span></span><br><span class="line"><span class="string">        WHERE user_id = ?</span></span><br><span class="line"><span class="string">      `</span>,</span><br><span class="line">      values: [phoneNumber, phoneConfirmationCode, userId]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(error);</span><br><span class="line">        <span class="keyword">return</span> reject(error);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;for user %s set phone %s&#x27;</span>, userId, phoneNumber);</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">&#x27;The phone confirmation code with this phone is %s&#x27;</span>,</span><br><span class="line">        phoneConfirmationCode</span><br><span class="line">      );</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// use 3rd party SMS service</span></span><br><span class="line"><span class="keyword">await</span> sendSMS(phoneNumber, phoneConfirmationCode);</span><br></pre></td></tr></table></figure><p>We could also add a timestamp, etc, to make the phone verification stronger. But for the demo purposes, the code above is enough.</p><h2><span id="confirming-the-code">Confirming the code</span></h2><p>The web UI is waiting for the user to enter the SMS code. Once the code is entered, it is compared to the code in the user&#39;s record. If they match, the user is confirmed.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// look up the code verification from the database</span></span><br><span class="line"><span class="keyword">const</span> expected = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  connection.query(</span><br><span class="line">    &#123;</span><br><span class="line">      sql: <span class="string">&#x27;SELECT phone,phoneConfirmationCode FROM users WHERE user_id = ?&#x27;</span>,</span><br><span class="line">      values: [userId]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(error);</span><br><span class="line">        <span class="keyword">return</span> reject(error);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> expected = results[<span class="number">0</span>];</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">&#x27;user %s expected phone %s confirmation %s&#x27;</span>,</span><br><span class="line">        userId,</span><br><span class="line">        expected.phone,</span><br><span class="line">        expected.phoneConfirmationCode</span><br><span class="line">      );</span><br><span class="line">      resolve(&#123;</span><br><span class="line">        phone: expected.phone,</span><br><span class="line">        phoneConfirmationCode: expected.phoneConfirmationCode</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (expected.phone !== phoneNumber) &#123;</span><br><span class="line">  <span class="keyword">const</span> error = <span class="string">&#x27;Phone number does not match&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">`Error: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">  connection.end();</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    error</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (expected.phoneConfirmationCode !== code) &#123;</span><br><span class="line">  <span class="keyword">const</span> error = <span class="string">&#x27;Wrong confirmation code&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">`Error: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">  connection.end();</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    error</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// user phone number is confirmed 🎉</span></span><br><span class="line"><span class="comment">// update the user - the phone number is confirmed</span></span><br><span class="line"><span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  connection.query(</span><br><span class="line">    &#123;</span><br><span class="line">      sql: <span class="string">`</span></span><br><span class="line"><span class="string">        UPDATE users</span></span><br><span class="line"><span class="string">        SET isPhoneVerified = true, phoneConfirmationCode = NULL</span></span><br><span class="line"><span class="string">        WHERE user_id = ?</span></span><br><span class="line"><span class="string">      `</span>,</span><br><span class="line">      values: [userId]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>We also check the database for any other user with the same phone number - we must remove the verified flag, since the phone number now belongs to another user.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// any existing user with the same phone number should</span></span><br><span class="line"><span class="comment">// lose their phone verified status</span></span><br><span class="line"><span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  connection.query(</span><br><span class="line">    &#123;</span><br><span class="line">      sql: <span class="string">`</span></span><br><span class="line"><span class="string">        UPDATE users</span></span><br><span class="line"><span class="string">        SET phoneConfirmationCode = NULL, isPhoneVerified = false</span></span><br><span class="line"><span class="string">        WHERE phone = ? AND isPhoneVerified = true</span></span><br><span class="line"><span class="string">      `</span>,</span><br><span class="line">      values: [phoneNumber]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(error);</span><br><span class="line">        <span class="keyword">return</span> reject(error);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;removed phone %s for any existing users&#x27;</span>, phoneNumber);</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Let&#39;s look at how we can write end-to-end tests that have to register new users and confirm the phone numbers.</p><h2><span id="send-the-wrong-code">Send the wrong code</span></h2><p>Our test has no idea what the phone confirmation code is. Thus it can simply confirm the wrong code generates an error message that is shown to the user.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Lodash library is bundled with Cypress</span></span><br><span class="line"><span class="keyword">const</span> &#123; _ &#125; = Cypress;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;shows an error message for wrong code&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">`test-<span class="subst">$&#123;_.random(<span class="number">1e4</span>)&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> email = <span class="string">`<span class="subst">$&#123;username&#125;</span>@example.com`</span>;</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;[name=username]&#x27;</span>).type(username);</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=email]&#x27;</span>).type(email);</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sign up&#x27;</span>).click();</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;[name=phone]&#x27;</span>).type(<span class="string">&#x27;555-123-4060&#123;enter&#125;&#x27;</span>, &#123; <span class="attr">delay</span>: <span class="number">75</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// use a wrong code on purpose</span></span><br><span class="line">  cy.get(<span class="string">&#x27;[name=code]&#x27;</span>).type(<span class="string">&#x27;0000&#x27;</span>, &#123; <span class="attr">delay</span>: <span class="number">75</span> &#125;);</span><br><span class="line">  cy.get(<span class="string">&#x27;button&#x27;</span>).click();</span><br><span class="line">  cy.contains(<span class="string">&#x27;.error-message&#x27;</span>, <span class="string">&#x27;Wrong confirmation code&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="../images/verify-part-1/wrong-code.gif" alt="The wrong verification code leads to an error message"></p><p>Great, the wrong code is rejected, but how do we really verify the user during the test?</p><h2><span id="use-a-special-test-number">Use a special test number</span></h2><p>Let&#39;s add a custom logic for allowing users with a special test numbers in. For example, we could specific via an environment variable <code>TEST_PHONE_NUMBER</code>. If this number arrives, we know this is an E2E test user, and thus skip sending the confirmation number via SMS. We also save a pre-determined code in the database.</p><figure class="highlight js"><figcaption><span>api/src/phone.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; userId, phoneNumber &#125; = <span class="keyword">await</span> json(req);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;adding phone %s for user %d&#x27;</span>, phoneNumber, userId);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> phoneConfirmationCode;</span><br><span class="line"><span class="keyword">const</span> specialTestNumber = process.env.TEST_PHONE_NUMBER;</span><br><span class="line"><span class="keyword">if</span> (specialTestNumber &amp;&amp; phoneNumber === specialTestNumber) &#123;</span><br><span class="line">  <span class="comment">// the test user! use the same code and do not send it</span></span><br><span class="line">  <span class="comment">// just store in the database</span></span><br><span class="line">  phoneConfirmationCode = <span class="string">&#x27;4467&#x27;</span>;</span><br><span class="line">  <span class="comment">// do not send this code via SMS service</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// generate a random code, send it via SMS to the phone number</span></span><br><span class="line">  phoneConfirmationCode = <span class="built_in">String</span>(<span class="built_in">Math</span>.random()).slice(<span class="number">2</span>, <span class="number">6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The spec can hard-code the phone number and the code, or read it using <a href="https://on.cypress.io/env">Cypress.env</a> method. See my blog post <a href="/blog/keep-passwords-secret-in-e2e-tests/" title="Keep passwords secret in E2E tests">Keep passwords secret in E2E tests</a> how to do so. In my case, I just put the numbers into the spec file.</p><figure class="highlight js"><figcaption><span>cypress/integration/test-number.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;confirms the test phone number&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">`test-<span class="subst">$&#123;_.random(<span class="number">1e4</span>)&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> email = <span class="string">`<span class="subst">$&#123;username&#125;</span>@example.com`</span>;</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;[name=username]&#x27;</span>).type(username);</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=email]&#x27;</span>).type(email);</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sign up&#x27;</span>).click();</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;[name=phone]&#x27;</span>).type(<span class="string">&#x27;555-909-0909&#123;enter&#125;&#x27;</span>, &#123; <span class="attr">delay</span>: <span class="number">75</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// when using the special phone number above</span></span><br><span class="line">  <span class="comment">// we can validate it using this code</span></span><br><span class="line">  cy.get(<span class="string">&#x27;[name=code]&#x27;</span>).type(<span class="string">&#x27;4467&#x27;</span>, &#123; <span class="attr">delay</span>: <span class="number">75</span> &#125;);</span><br><span class="line">  cy.get(<span class="string">&#x27;button&#x27;</span>).click();</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=PhoneVerified]&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="../images/verify-part-1/test-number.gif" alt="Using a special test phone number with its constant code"></p><h2><span id="use-alternative-use-test-number-prefix">Use alternative: use test number prefix</span></h2><p>Using a single special phone number leads to the problems down the line. Because a single user at a time can have the test phone number and have it verified, one test can kick out another test in the middle of the run. We will see a test that verifies this is happening later. Thus as an alternative, I suggest using not the exact test phone number, but a test phone <em>prefix</em>. Any number that starts with the test phone <em>prefix</em> should be considered the test user, and could be verified using the same hard-coded test code (or some other similar scheme).</p><p>If we used <code>TEST_PHONE_NUMBER=555-909-0909</code> before, we can chop off the last two digits to produce 100 test numbers. If we pick the test number randomly, the chance of collision is minimal. If the collisions still happen, we can chop off the last three digits to have a 1000 test phone numbers. We could also enable <a href="https://on.cypress.io/test-retries">test retries</a> to re-run the failed test and get through a temporary set back.</p><figure class="highlight js"><figcaption><span>api/src/phone.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> phoneConfirmationCode;</span><br><span class="line"><span class="keyword">if</span> (process.env.TEST_PHONE_NUMBER &amp;&amp; phoneNumber === process.env.TEST_PHONE_NUMBER) &#123;</span><br><span class="line">  <span class="comment">// the test user! use the same code and do not send it</span></span><br><span class="line">  <span class="comment">// just store in the database</span></span><br><span class="line">  phoneConfirmationCode = <span class="string">&#x27;4467&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">  process.env.TEST_PHONE_NUMBER_PREFIX &amp;&amp;</span><br><span class="line">  phoneNumber.startsWith(process.env.TEST_PHONE_NUMBER_PREFIX)</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="comment">// the test user that uses the phone number prefix</span></span><br><span class="line">  <span class="comment">// to allow multiple test phone numbers</span></span><br><span class="line">  phoneConfirmationCode = <span class="string">&#x27;4467&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// generate a random code, send it via SMS to the phone number</span></span><br><span class="line">  phoneConfirmationCode = <span class="built_in">String</span>(<span class="built_in">Math</span>.random()).slice(<span class="number">2</span>, <span class="number">6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The above code supports both methods just for clarity. It assumes that the environment variables are set like</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TEST_PHONE_NUMBER&#x3D;555-909-0909</span><br><span class="line">TEST_PHONE_NUMBER_PREFIX&#x3D;555-909-09</span><br></pre></td></tr></table></figure><p>Here is a test that draws a random number using <a href="https://lodash.com/docs/4.17.15#random">_.random</a> and <a href="https://lodash.com/docs/4.17.15#padStart">_.padStart</a> methods.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pick a random phone number that starts with the</span></span><br><span class="line"><span class="comment">// give prefix by adding two random digits to it.</span></span><br><span class="line"><span class="keyword">const</span> testNumberPrefix = <span class="string">&#x27;555-909-09&#x27;</span>;</span><br><span class="line"><span class="comment">// using _.random with _.padStart to make sure</span></span><br><span class="line"><span class="comment">// any shorter number is padded with leading zeroes</span></span><br><span class="line"><span class="keyword">const</span> phoneNumber = testNumberPrefix + _.padStart(_.random(<span class="number">0</span>, <span class="number">100</span>), <span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">cy.get(<span class="string">&#x27;[name=phone]&#x27;</span>).type(<span class="string">`<span class="subst">$&#123;phoneNumber&#125;</span>&#123;enter&#125;`</span>, &#123; <span class="attr">delay</span>: <span class="number">75</span> &#125;);</span><br></pre></td></tr></table></figure><p>The test passes with a random number.</p><p><img src="../images/verify-part-1/random-phone.gif" alt="Using a randomly drawn test phone number from a range of numbers"></p><p><strong>Tip:</strong> it is a good idea to move test phone number generation into a utility method to be imported into any spec that needs to verify the user&#39;s phone.</p><h2><span id="looking-up-the-user">Looking up the user</span></h2><p>What if our API has a method to look up the user by the username? Maybe we could expose such API endpoint during testing and protect it using some kind of header or API key. This method could return the phone verification code and status.</p><figure class="highlight js"><figcaption><span>api/src/user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; params &#125; = match(req, <span class="string">&#x27;/users/:username&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;looking up user %s&#x27;</span>, params.username);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  connection.query(</span><br><span class="line">    &#123;</span><br><span class="line">      sql: <span class="string">&#x27;SELECT * FROM users WHERE username = ?&#x27;</span>,</span><br><span class="line">      values: [params.username]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(error);</span><br><span class="line">        <span class="keyword">return</span> reject(error);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!results.length) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">&#x27;Could not find user with username %s&#x27;</span>, params.username);</span><br><span class="line">        <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Unknown user&#x27;</span>));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(results);</span><br><span class="line">      <span class="comment">// return all fields except for ID</span></span><br><span class="line">      <span class="comment">// also convert the isPhoneVerified to boolean</span></span><br><span class="line">      resolve(&#123;</span><br><span class="line">        ...results[<span class="number">0</span>],</span><br><span class="line">        isPhoneVerified: results[<span class="number">0</span>].isPhoneVerified === <span class="number">1</span>,</span><br><span class="line">        user_id: <span class="literal">undefined</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Our test could fetch the user information after each action to confirm the backend is updating the fields correctly. We can use the built-in <a href="https://on.cypress.io/request">cy.request</a> command:</p><figure class="highlight js"><figcaption><span>cypress/integration/look-up-user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; getTestPhoneNumber &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lodash library is bundled with Cypress</span></span><br><span class="line"><span class="keyword">const</span> &#123; _ &#125; = Cypress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getUserInfo = <span class="function">(<span class="params">username</span>) =&gt;</span></span><br><span class="line">  <span class="comment">// use the API url to request the user info</span></span><br><span class="line">  <span class="comment">// https://on.cypress.io/request</span></span><br><span class="line">  cy.request(<span class="string">`http://localhost:4343/users/<span class="subst">$&#123;username&#125;</span>`</span>).its(<span class="string">&#x27;body&#x27;</span>);</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;looks up the user via API call&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">`test-<span class="subst">$&#123;_.random(<span class="number">1e4</span>)&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> email = <span class="string">`<span class="subst">$&#123;username&#125;</span>@example.com`</span>;</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;[name=username]&#x27;</span>).type(username);</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=email]&#x27;</span>).type(email);</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sign up&#x27;</span>).click();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// important: wait for the next page to load</span></span><br><span class="line">  <span class="comment">// to know for sure the API call has finished</span></span><br><span class="line">  cy.get(<span class="string">&#x27;[name=phone]&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// find the user information and confirm the user has</span></span><br><span class="line">  <span class="comment">// no phone and no confirmation code</span></span><br><span class="line">  getUserInfo(username).should(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">    username,</span><br><span class="line">    email,</span><br><span class="line">    phone: <span class="literal">null</span>,</span><br><span class="line">    phoneConfirmationCode: <span class="literal">null</span>,</span><br><span class="line">    isPhoneVerified: <span class="literal">false</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> phoneNumber = getTestPhoneNumber();</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=phone]&#x27;</span>).type(<span class="string">`<span class="subst">$&#123;phoneNumber&#125;</span>&#123;enter&#125;`</span>, &#123; <span class="attr">delay</span>: <span class="number">75</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// again, wait for the next page to load before checking the API</span></span><br><span class="line">  cy.get(<span class="string">&#x27;[name=code]&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the user should have the random code and phone number set</span></span><br><span class="line">  getUserInfo(username)</span><br><span class="line">    .should(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">      username,</span><br><span class="line">      email,</span><br><span class="line">      phone: phoneNumber,</span><br><span class="line">      isPhoneVerified: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// confirm the code is a string of 4 digits</span></span><br><span class="line">    .its(<span class="string">&#x27;phoneConfirmationCode&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;match&#x27;</span>, <span class="regexp">/^\d&#123;4&#125;$/</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// let&#x27;s use the fetched code to verify the phone number</span></span><br><span class="line">      cy.get(<span class="string">&#x27;[name=code]&#x27;</span>).type(code, &#123; <span class="attr">delay</span>: <span class="number">75</span> &#125;);</span><br><span class="line">      cy.get(<span class="string">&#x27;button&#x27;</span>).click();</span><br><span class="line">      cy.get(<span class="string">&#x27;[data-cy=PhoneVerified]&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      getUserInfo(username).should(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">        username,</span><br><span class="line">        email,</span><br><span class="line">        phone: phoneNumber,</span><br><span class="line">        isPhoneVerified: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// phone confirmation code is reset to null</span></span><br><span class="line">        phoneConfirmationCode: <span class="literal">null</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="../images/verify-part-1/verify-user.gif" alt="Looking up the user object during the test to confirm the updates"></p><p><strong>Tip:</strong> to confirm multiple properties inside an object, I suggest using <a href="https://github.com/bahmutov/cy-spok">cy-spok</a>. It supports exact matches and properties using a very intuitive syntax and produces good output in the Cypress Command Log column.</p><h2><span id="testing-the-number-transfer">Testing the number transfer</span></h2><p>In our application, if the user has verified the number, then any other user who has previously had this number verified, loses that status. Let&#39;s confirm this via testing.</p><figure class="highlight js"><figcaption><span>cypress/integration/loses-confirmation.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; getTestPhoneNumber, getUserInfo &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lodash library is bundled with Cypress</span></span><br><span class="line"><span class="keyword">const</span> &#123; _ &#125; = Cypress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> signup = <span class="function">(<span class="params">username, email, phoneNumber</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=username]&#x27;</span>).type(username);</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=email]&#x27;</span>).type(email);</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sign up&#x27;</span>).click();</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=phone]&#x27;</span>).type(<span class="string">`<span class="subst">$&#123;phoneNumber&#125;</span>&#123;enter&#125;`</span>, &#123; <span class="attr">delay</span>: <span class="number">75</span> &#125;);</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=code]&#x27;</span>).type(<span class="string">&#x27;4467&#x27;</span>, &#123; <span class="attr">delay</span>: <span class="number">75</span> &#125;);</span><br><span class="line">  cy.get(<span class="string">&#x27;button&#x27;</span>).click();</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=PhoneVerified]&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;loses phone confirmation&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> firstUser = <span class="string">`test-first-<span class="subst">$&#123;_.random(<span class="number">1e4</span>)&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> firstEmail = <span class="string">`<span class="subst">$&#123;firstUser&#125;</span>@example.com`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> secondUser = <span class="string">`test-second-<span class="subst">$&#123;_.random(<span class="number">1e4</span>)&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> secondEmail = <span class="string">`<span class="subst">$&#123;secondUser&#125;</span>@example.com`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> phoneNumber = getTestPhoneNumber();</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;**first user**&#x27;</span>);</span><br><span class="line">  signup(firstUser, firstEmail, phoneNumber);</span><br><span class="line">  getUserInfo(firstUser).should(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">    phone: phoneNumber,</span><br><span class="line">    isPhoneVerified: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line">  cy.log(<span class="string">&#x27;**second user**&#x27;</span>);</span><br><span class="line">  signup(secondUser, secondEmail, phoneNumber);</span><br><span class="line">  getUserInfo(secondUser).should(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">    phone: phoneNumber,</span><br><span class="line">    isPhoneVerified: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// the first user no longer has verified phone number</span></span><br><span class="line">  getUserInfo(firstUser).should(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">    phone: phoneNumber,</span><br><span class="line">    isPhoneVerified: <span class="literal">false</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The video shows the two users sign up, then the first user loses its phone confirmed value.</p><p><img src="../images/verify-part-1/loses.gif" alt="The first user loses its phone verified status"></p><p>There is nothing in the UI to show for this, because we are using the API response to confirm the change in the user record. Of course, in the real application, the backend would not return the user status this easily. We sometimes need to connect to the database from the test runner and check of ourselves. I plan to describe how to do so in the next blog post, so subscribe now to be notified when it comes out.</p><p><strong>Update:</strong> part two is here; read the blog post <a href="/blog/verify-phone-part-two/" title="How To Verify Phone Number During Tests Part 2">How To Verify Phone Number During Tests Part 2</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s take a look at a typical web application that makes the users sign up using a phone number. We want to verify the user via a ph
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Solving The Element Is Detached From DOM Error In Cypress</title>
    <link href="https://glebbahmutov.com/blog/detached/"/>
    <id>https://glebbahmutov.com/blog/detached/</id>
    <published>2021-08-26T04:00:00.000Z</published>
    <updated>2021-08-26T12:56:28.378Z</updated>
    
    <content type="html"><![CDATA[<p>Many people complain about the dreaded &quot;Element is detached from DOM&quot; error in Cypress, see <a href="https://github.com/cypress-io/cypress/issues/7306">#7306</a>. I have recorded the video showing the problem and the possible solutions below.</p><center><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/CMOjrKoBBwc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p><strong>Tip:</strong> I have described previously this particular scenario in the blog post <a href="https://cypress.io/blog/2020/11/17/when-can-the-test-submit-a-form/">When Can the Test Submit a Form?</a> which is a part of my series of blog posts about <a href="https://cypress.io/blog/tag/flake/">test flake</a>.</p><p>When writing E2E tests, please consider what the application is doing. If the application is still performing an action, tell the test to &quot;wait&quot; for the action to complete. Otherwise the application might suddenly change, breaking the test. The &quot;element is detached from DOM&quot; is a sign of a problem, not the problem itself! There is a variety of ways the test can observe the application and wait for it to be ready. You can observe the DOM itself, the network traffic, listen for events, even reach into the code to spy on method calls.</p><p>A good pattern is to alternate test commands and assertions, relying on the built-in <a href="https://on.cypress.io/retry-ability">retry-ability</a> to wait for the application to finish updating. This way the test never waits longer than necessary.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.click(...) <span class="comment">// command</span></span><br><span class="line"><span class="comment">// application starts doing something</span></span><br><span class="line"><span class="comment">// now the test should wait for the app</span></span><br><span class="line"><span class="comment">// before calling another command</span></span><br><span class="line">cy.get(<span class="string">&#x27;...&#x27;</span>).should(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;ready&#x27;</span>)</span><br><span class="line"><span class="comment">// execute the next test command</span></span><br></pre></td></tr></table></figure><p>And if everything fails, if there is no observable application property to wait for - then add the <code>cy.wait(xxx)</code> command to wait for a second or two. I mean, if it fixes the detached element problem and the test becomes stable, why not?</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Many people complain about the dreaded &amp;quot;Element is detached from DOM&amp;quot; error in Cypress, see &lt;a href=&quot;https://github.com/cypress
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Scrape Slides</title>
    <link href="https://glebbahmutov.com/blog/scrape-slides/"/>
    <id>https://glebbahmutov.com/blog/scrape-slides/</id>
    <published>2021-08-21T04:00:00.000Z</published>
    <updated>2021-08-21T22:10:55.084Z</updated>
    
    <content type="html"><![CDATA[<p>I have a lot of presentations at <a href="https://slides.com/bahmutov">slides.com/bahmutov</a>, and it is difficult to find a specific slide sometimes, even when I know there is one. I was looking for ways to scrape my presentations and send the search records to Algolia for indexing. In this presentation, I will show the scraper I have written for this purpose.</p><!-- toc --><ul><li><a href="#the-presentation">The presentation</a></li><li><a href="#the-slide-format">The slide format</a></li><li><a href="#the-scrape-selectors">The scrape selectors</a></li><li><a href="#browsing-and-scraping-the-slides">Browsing and scraping the slides</a><ul><li><a href="#be-careful-about-the-stack">Be careful about the stack</a></li><li><a href="#scraping-multiple-elements">Scraping multiple elements</a></li></ul></li><li><a href="#filtering-records">Filtering records</a></li><li><a href="#algolia-application">Algolia application</a><ul><li><a href="#object-ids">Object IDs</a></li></ul></li><li><a href="#replacing-objects">Replacing objects</a></li><li><a href="#the-search-page">The search page</a></li><li><a href="#scraping-any-url">Scraping any URL</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><blockquote class="pullquote"><p>🎁 You can find the source code for this blog post at <a href="https://github.com/bahmutov/scrape-book-quotes">bahmutov/scrape-book-quotes</a>. This blog is necessarily long, since it needs to provide every relevant detail, but the ultimate truth is in the code.</p></blockquote><h2><span id="the-presentation">The presentation</span></h2><p>For this blog post I have created a small presentation <a href="https://slides.com/bahmutov/book-quotes">slides.com/bahmutov/book-quotes</a> with a few slides with famous book quotes. The slides are implemented using <a href="https://revealjs.com/">Reveal.js</a> framework that I <a href="/blog/reveal-vite/" title="like using">like using</a>. Here is the overview of the slides: there is a main horizontal row, and a single column in the middle.</p><p><img src="../images/slides-to-algolia/slides.png" alt="Presentation to be scraped"></p><h2><span id="the-slide-format">The slide format</span></h2><p>When editing Reveal.js slides, you can add text and various headers. Commonly, I use &quot;Heading 1&quot; for each slide&#39;s title.</p><p><img src="../images/slides-to-algolia/edit-slide.png" alt="The slide title is Heading 1"></p><p>The &quot;Heading 1&quot; text becomes the &quot;H1&quot; HTML element. The &quot;Heading 2&quot; becomes &quot;H2&quot; element, and so on. Regular text becomes &quot;P&quot; HTML element. You can see these elements marked in the HTML screenshot below.</p><p><img src="../images/slides-to-algolia/h1.png" alt="Heading 1 becomes the H1 element"></p><p>The slide deck also has an element below the presentation&#39;s title and description.</p><p><img src="../images/slides-to-algolia/deck-info.png" alt="The deck info markup"></p><p>The title and the description could be considered the top-level information in the deck.</p><p>The currently shown slide has the class &quot;present&quot;. We can scrape each slide one by one.</p><h2><span id="the-scrape-selectors">The scrape selectors</span></h2><p>The default <a href="https://docsearch.algolia.com/docs/scraper/">Algolia scraper</a> does not work very well with the highly dynamic Single-Page Application like a Reveal.js presentation. Thus we need to browse the slides, grab the text from the elements, and send the records to Algolia index ourselves.</p><p>In order to scrape each slide, we need to select the <code>h1</code>, <code>h2</code>, <code>p</code> elements. Algolia documents the various text levels in its <a href="https://docsearch.algolia.com/docs/config-file">config documentation</a>. In our case, the selectors I picked are:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lvl0: &quot;.deck-info h1&quot;</span><br><span class="line">lvl1: &quot;.deck-info .description&quot;</span><br><span class="line">lvl2: &quot;.slides .present h1&quot;</span><br><span class="line">lvl3: &quot;.slides .present h2&quot;</span><br><span class="line">lvl4: &quot;.slides .present h3&quot;</span><br><span class="line">content: &quot;.slides .present p, .slides .present blockquote&quot;</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> potentially we could grab all document elements&#39; using the selectors without the <code>.present</code> class and form the individual slide URLs like <code>bahmutov/book-quotes</code>, <code>bahmutov/book-quotes#/1</code>, <code>bahmutov/book-quotes#/2</code>, <code>bahmutov/book-quotes#/2/1</code>, etc. ourselves. But I would think really browsing the slides is more fun, isn&#39;t it?</p><h2><span id="browsing-and-scraping-the-slides">Browsing and scraping the slides</span></h2><p>To load the presentation, browse the slides, and scrape the HTML elements, I will use <a href="https://www.cypress.io">Cypress.io</a> test runner. To go through each slide, I am using <a href="https://github.com/bahmutov/cypress-recurse">cypress-recurse</a> plugin. See the <a href="https://youtu.be/oq2P1wtIZYY">video</a> below to learn how the test goes through the slides.</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/oq2P1wtIZYY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>While browsing, let&#39;s extract the matching elements from the slide and save them in an array to be uploaded to the Algolia index later. Here is the initial code</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; recurse &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-recurse&#x27;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;scrapes&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> records = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> scrape = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cy.document().then(<span class="function">(<span class="params">doc</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> url = doc.location.href</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> lvl0El = doc.querySelector(<span class="string">&#x27;.deck-info h1&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> lvl0 = lvl0El ? lvl0El.innerText : <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> lvl1El = doc.querySelector(<span class="string">&#x27;.deck-info .description&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> lvl1 = lvl1El ? lvl1El.innerText : <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> lvl2El = doc.querySelector(<span class="string">&#x27;.slides .present h1&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> lvl2 = lvl2El ? lvl2El.innerText : <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> lvl3El = doc.querySelector(<span class="string">&#x27;.slides .present h2&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> lvl3 = lvl3El ? lvl3El.innerText : <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> lvl4El = doc.querySelector(<span class="string">&#x27;.slides .present h3&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> lvl4 = lvl4El ? lvl4El.innerText : <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> consider ALL elements, not just the first one</span></span><br><span class="line">      <span class="keyword">const</span> textEl = doc.querySelector(</span><br><span class="line">        <span class="string">&#x27;.slides .present p, .slides .present blockquote&#x27;</span>,</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">const</span> content = textEl ? textEl.innerText : <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> record = &#123; url, lvl0, lvl1, lvl2, lvl3, lvl4, content &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(record)</span><br><span class="line">      records.push(record)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> goVertical = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> recurse(</span><br><span class="line">      () =&gt; scrape().then(<span class="function">() =&gt;</span> cy.get(<span class="string">&#x27;.navigate-down&#x27;</span>)),</span><br><span class="line">      ($button) =&gt; !$button.hasClass(<span class="string">&#x27;enabled&#x27;</span>),</span><br><span class="line">      &#123;</span><br><span class="line">        log: <span class="literal">false</span>,</span><br><span class="line">        delay: <span class="number">1000</span>,</span><br><span class="line">        timeout: <span class="number">200000</span>,</span><br><span class="line">        limit: <span class="number">200</span>,</span><br><span class="line">        <span class="function"><span class="title">post</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">          cy.get(<span class="string">&#x27;.navigate-down&#x27;</span>).click()</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  recurse(</span><br><span class="line">    () =&gt; goVertical().then(<span class="function">() =&gt;</span> cy.get(<span class="string">&#x27;.navigate-right&#x27;</span>)),</span><br><span class="line">    ($button) =&gt; !$button.hasClass(<span class="string">&#x27;enabled&#x27;</span>),</span><br><span class="line">    &#123;</span><br><span class="line">      log: <span class="literal">false</span>,</span><br><span class="line">      delay: <span class="number">1000</span>,</span><br><span class="line">      timeout: <span class="number">200000</span>,</span><br><span class="line">      limit: <span class="number">200</span>,</span><br><span class="line">      <span class="function"><span class="title">post</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        cy.get(<span class="string">&#x27;.navigate-right&#x27;</span>).click()</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The records accumulate in the <code>records</code> list with each slide, as you can see in the DevTools console.</p><p><img src="../images/slides-to-algolia/browsing.gif" alt="Scraping each slide"></p><p>We can save the records as a JSON file to be sent to Algolia next.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// recurse through the slides</span></span><br><span class="line"><span class="keyword">const</span> records = []</span><br><span class="line">recurse(...)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.writeFile(<span class="string">&#x27;records.json&#x27;</span>, records)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>records.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://slides.com/bahmutov/book-quotes/&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl0&quot;</span>: <span class="string">&quot;Book Quotes&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl1&quot;</span>: <span class="string">&quot;A test deck for practicing scraping slides.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl2&quot;</span>: <span class="string">&quot;Anna Karenina&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl3&quot;</span>: <span class="string">&quot;Leo Tolstoy&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl4&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;Happy families are all alike; every unhappy family is unhappy in its own way.&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://slides.com/bahmutov/book-quotes/#/1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl0&quot;</span>: <span class="string">&quot;Book Quotes&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl1&quot;</span>: <span class="string">&quot;A test deck for practicing scraping slides.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl2&quot;</span>: <span class="string">&quot;Moby Dick&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl3&quot;</span>: <span class="string">&quot;Herman Melville&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl4&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;Call me Ishmael.&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3><span id="be-careful-about-the-stack">Be careful about the stack</span></h3><p>Reveal.js decks can have columns of slides. The column is called a <code>stack</code>, and it <em>also</em> has its own &quot;present&quot; class.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;stack present&quot;</span>&gt;</span></span><br><span class="line">  ... previous slides</span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;present&quot;</span>&gt;</span></span><br><span class="line">    the current visible slide</span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  ... future slides</span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Thus to grab the current slide we need to use the class &quot;present&quot;, but without the &quot;stack&quot; class. In CSS this can be expressed as <code>.present:not(.stack)</code> selector. Thus our content selector that pulls the <code>p</code>, <code>blockquote</code>, and <code>li</code> items is:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> contentSelectors = [</span><br><span class="line">  <span class="string">&#x27;.slides .present:not(.stack) p&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;.slides .present:not(.stack) blockquote&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;.slides .present:not(.stack) li&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> selector = contentSelectors.join(<span class="string">&#x27;, &#x27;</span>)</span><br></pre></td></tr></table></figure><h3><span id="scraping-multiple-elements">Scraping multiple elements</span></h3><p>A single slide might have multiple paragraphs, list items, and block quotes which are all separate content items. If the slide has any heading elements, the content items should all share the same &quot;lvl0&quot;, &quot;lvl1&quot;, etc. For example, the next slide produces 4 separate content records, all sharing the &quot;Heading 2&quot; at &quot;lvl3&quot;:</p><p><img src="../images/slides-to-algolia/multiple.png" alt="A slide with 4 records"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://slides.com/bahmutov/book-quotes/#/5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl0&quot;</span>: <span class="string">&quot;Book Quotes&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl1&quot;</span>: <span class="string">&quot;A test deck for practicing scraping slides.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;lvl3&quot;</span>: <span class="string">&quot;A Bullet List&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl4&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;Bullet One&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://slides.com/bahmutov/book-quotes/#/5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl0&quot;</span>: <span class="string">&quot;Book Quotes&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl1&quot;</span>: <span class="string">&quot;A test deck for practicing scraping slides.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;lvl3&quot;</span>: <span class="string">&quot;A Bullet List&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl4&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;Bullet Two&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://slides.com/bahmutov/book-quotes/#/5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl0&quot;</span>: <span class="string">&quot;Book Quotes&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl1&quot;</span>: <span class="string">&quot;A test deck for practicing scraping slides.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;lvl3&quot;</span>: <span class="string">&quot;A Bullet List&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl4&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;Bullet Three&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://slides.com/bahmutov/book-quotes/#/5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl0&quot;</span>: <span class="string">&quot;Book Quotes&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl1&quot;</span>: <span class="string">&quot;A test deck for practicing scraping slides.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;lvl3&quot;</span>: <span class="string">&quot;A Bullet List&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl4&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;This slide has multiple list items, all should be scraped&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>We can create these records when scraping</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> contentSelectors = [</span><br><span class="line">  <span class="string">&#x27;.slides .present:not(.stack) p&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;.slides .present:not(.stack) blockquote&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;.slides .present:not(.stack) li&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> contentSelector = contentSelectors.join(<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> textEls = <span class="built_in">Array</span>.from(doc.querySelectorAll(contentSelector))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> record = &#123; url, lvl0, lvl1, lvl2, lvl3, lvl4, <span class="attr">content</span>: <span class="literal">null</span> &#125;</span><br><span class="line"><span class="keyword">if</span> (!textEls.length) &#123;</span><br><span class="line">  <span class="keyword">return</span> [record]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> records = textEls.map(<span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> r = &#123;</span><br><span class="line">    ...record,</span><br><span class="line">    content: el.innerText.trim(),</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> r</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>At the end we still have a flat list of individual records to upload. We can output messages for each scraped slide using <a href="https://on.cypress.io/log">cy.log</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scrapeOneSlide()</span><br><span class="line">  .then(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = r[<span class="number">0</span>].url</span><br><span class="line">    cy.log(url)</span><br><span class="line">    cy.log(<span class="string">`**<span class="subst">$&#123;r.length&#125;</span>** record(s)`</span>)</span><br><span class="line">    cy.task(<span class="string">&#x27;print&#x27;</span>, <span class="string">`<span class="subst">$&#123;url&#125;</span>: <span class="subst">$&#123;r.length&#125;</span> record(s)`</span>)</span><br><span class="line">    records.push(...r)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>The recorded video clearly shows the number of text records.</p><p><img src="../images/slides-to-algolia/scraping.gif" alt="Each slide gets scraped"></p><p>Watching Cypress browse the slides to scrape them is a lot of fun.</p><h2><span id="filtering-records">Filtering records</span></h2><p>Some text elements should be ignored. For example, often my slides have my Twitter handle <a href="https://twitter.com/bahmutov">@bahmutov</a> on them, or individual URLs. We want to filter such text elements out.</p><p><img src="../images/slides-to-algolia/filter.png" alt="Records to be filtered include the individual URLs and my Twitter handle"></p><p>We can filter such individual content fields using heuristics: the search records should be longer than 10 letter, should not match a URL regular expression, or match our list of banned words.</p><p>Once scraped we also need to ensure the records do not have duplicates. This can happen when the slide has animation blocks - the common text elements will be the same. Thus we make sure all records are unique by taking all content properties together. For example, the following deck of slides shows the new blocks in each slide.</p><p><img src="../images/slides-to-algolia/open-real-browser.gif" alt="The same slide will be scraped multiple times because its URL changes"></p><p>The above deck will generate the &quot;content: Open real browser&quot; four times. The other fields like &quot;lvl0&quot;, &quot;lvl1&quot;, etc are also going to be exactly the same.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://slides.com/bahmutov/automated-testing/#/3/0/3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl0&quot;</span>: <span class="string">&quot;Automated Testing with Cypress.io&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl1&quot;</span>: <span class="string">&quot;This talk shows how quick and simple it can be to write end-to-end tests for web applications – if your testing tools are not fighting you all the time. I will go over writing E2E tests using Cypress.io (https://www.cypress.io/), controlling the network during tests, using visual testing and setting up continuous integration to perform E2E tests on each commit.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl2&quot;</span>: <span class="string">&quot;Web application&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl3&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;lvl4&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;Open real browser&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;objectID&quot;</span>: <span class="string">&quot;https-slides-com-bahmutov-automated-testing-3-0-3-4&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://slides.com/bahmutov/automated-testing/#/3/0/4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl0&quot;</span>: <span class="string">&quot;Automated Testing with Cypress.io&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl1&quot;</span>: <span class="string">&quot;This talk shows how quick and simple it can be to write end-to-end tests for web applications – if your testing tools are not fighting you all the time. I will go over writing E2E tests using Cypress.io (https://www.cypress.io/), controlling the network during tests, using visual testing and setting up continuous integration to perform E2E tests on each commit.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl2&quot;</span>: <span class="string">&quot;Web application&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl3&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;lvl4&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;Open real browser&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;objectID&quot;</span>: <span class="string">&quot;https-slides-com-bahmutov-automated-testing-3-0-4-4&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Thus we remove all duplicate records using the text fields concatenated together to check for uniqueness.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> removeDuplicates = <span class="function">(<span class="params">records</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// often when slides have animations, individual blocks</span></span><br><span class="line">  <span class="comment">// come in one by one. This leads to the text elements</span></span><br><span class="line">  <span class="comment">// on the slide being duplicated.</span></span><br><span class="line">  <span class="comment">// thus we check all records for duplicate content</span></span><br><span class="line">  <span class="keyword">return</span> Cypress._.uniqBy(records, <span class="function">(<span class="params">r</span>) =&gt;</span></span><br><span class="line">    [r.content, r.lvl0, r.lvl1, r.lvl2, r.lvl3, r.lvl4].join(<span class="string">&#x27;-&#x27;</span>),</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="algolia-application">Algolia application</span></h2><p>Now let&#39;s send the records to Algolia index. I have created a new Algolia application with a new index &quot;quotes&quot;.</p><p><img src="../images/slides-to-algolia/algolia.png" alt="Algolia application with its new index"></p><p>Each record to be sent to Algolia needs a &quot;type&quot; property. Since our records all have <code>content</code> field filled, they have the type <code>content</code>. Otherwise, the type is the highest level number (if the record has <code>lvl3</code>, but no <code>lvl3</code>, then it has the <code>type: lvl3</code>). To send the records we can use the official <a href="https://www.npmjs.com/package/algoliasearch">algoliasearch</a> NPM module.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D algoliasearch</span></span><br><span class="line">+ algoliasearch@4.10.3</span><br></pre></td></tr></table></figure><p>The script file <a href="https://github.com/bahmutov/scrape-book-quotes/blob/main/send-records.js">send-records.js</a> loads the records, sets the type and replaces the entire index with the new records.</p><figure class="highlight js"><figcaption><span>send-records.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; scrapeToAlgoliaRecord &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./utils&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> records = <span class="built_in">require</span>(<span class="string">&#x27;./records.json&#x27;</span>).map(scrapeToAlgoliaRecord)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(records, <span class="literal">null</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://www.algolia.com/doc/api-client/getting-started</span></span><br><span class="line"><span class="keyword">const</span> algoliasearch = <span class="built_in">require</span>(<span class="string">&#x27;algoliasearch&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// tip: use https://github.com/bahmutov/as-a</span></span><br><span class="line"><span class="comment">// to inject the environment variables when running</span></span><br><span class="line"><span class="keyword">const</span> client = algoliasearch(</span><br><span class="line">  process.env.APPLICATION_ID,</span><br><span class="line">  process.env.ADMIN_API_KEY,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> index = client.initIndex(<span class="string">&#x27;quotes&#x27;</span>)</span><br><span class="line"><span class="comment">// for now replace all records in the index</span></span><br><span class="line">index</span><br><span class="line">  .replaceAllObjects(records, &#123; <span class="attr">autoGenerateObjectIDIfNotExist</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;uploaded %d records&#x27;</span>, records.length)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.error(err))</span><br></pre></td></tr></table></figure><p>The utility function <code>scrapeToAlgoliaRecord</code> moves individual levels into a <code>hierarchy</code> object.</p><figure class="highlight js"><figcaption><span>utils.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Converts a scrape record to an Algolia record</span></span><br><span class="line"><span class="comment"> * ready to be send.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> scrapeToAlgoliaRecord = <span class="function">(<span class="params">record</span>) =&gt;</span> &#123;</span><br><span class="line">  record.hierarchy = &#123;</span><br><span class="line">    lvl0: record.lvl0,</span><br><span class="line">    lvl1: record.lvl1,</span><br><span class="line">    lvl2: record.lvl2,</span><br><span class="line">    lvl3: record.lvl3,</span><br><span class="line">    lvl4: record.lvl4,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (record.content) &#123;</span><br><span class="line">    record.type = <span class="string">&#x27;content&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (record.lvl4) &#123;</span><br><span class="line">      record.type = <span class="string">&#x27;lvl4&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (record.lvl3) &#123;</span><br><span class="line">      record.type = <span class="string">&#x27;lvl3&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (record.lvl2) &#123;</span><br><span class="line">      record.type = <span class="string">&#x27;lvl2&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (record.lvl1) &#123;</span><br><span class="line">      record.type = <span class="string">&#x27;lvl1&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (record.lvl0) &#123;</span><br><span class="line">      record.type = <span class="string">&#x27;lvl0&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// we moved the levels into hierarchy</span></span><br><span class="line">  <span class="keyword">delete</span> record.lvl0</span><br><span class="line">  <span class="keyword">delete</span> record.lvl1</span><br><span class="line">  <span class="keyword">delete</span> record.lvl2</span><br><span class="line">  <span class="keyword">delete</span> record.lvl3</span><br><span class="line">  <span class="keyword">delete</span> record.lvl4</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> record</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123; scrapeToAlgoliaRecord &#125;</span><br></pre></td></tr></table></figure><p>The final record for a slide with just &quot;Heading 1&quot; could be</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>:<span class="string">&quot;https://slides.com/bahmutov/book-quotes/#/5&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;content&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;hierarchy&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;lvl0&quot;</span>:<span class="string">&quot;Book Quotes&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl1&quot;</span>:<span class="string">&quot;A test deck for practicing scraping slides.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl2&quot;</span>:<span class="string">&quot;The End&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl3&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;lvl4&quot;</span>:<span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;lvl2&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The final record with some content could be</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://slides.com/bahmutov/book-quotes/#/3&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;It was a pleasure to burn.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;hierarchy&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;lvl0&quot;</span>: <span class="string">&quot;Book Quotes&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl1&quot;</span>: <span class="string">&quot;A test deck for practicing scraping slides.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl2&quot;</span>: <span class="string">&quot;Fahrenheit 451&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl3&quot;</span>: <span class="string">&quot;Ray Bradbury&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl4&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;content&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Once uploaded, the records are searchable from the Algolia UI</p><p><img src="../images/slides-to-algolia/search.gif" alt="Finding quotes from Algolia App Index page"></p><h3><span id="object-ids">Object IDs</span></h3><p>Each object in Algolia&#39;s application should have a <a href="https://www.algolia.com/doc/api-reference/api-methods/add-objects/?client=javascript#method-param-object">unique ID</a>. Currently we let Algolia assign unique ids to each uploaded record. In the future this approach would not scale. For example, we might have need to replace a record for the given slide presentation - thus we would need to delete some of the records first, before adding new ones. Let&#39;s form a unique record ID based on the presentation slug and the slide number.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> slideId = Cypress._.kebabCase(doc.location.href)</span><br><span class="line"><span class="comment">// single record</span></span><br><span class="line"><span class="keyword">const</span> record = &#123;</span><br><span class="line">  url,</span><br><span class="line">  lvl0,</span><br><span class="line">  lvl1,</span><br><span class="line">  lvl2,</span><br><span class="line">  lvl3,</span><br><span class="line">  lvl4,</span><br><span class="line">  content: <span class="literal">null</span>,</span><br><span class="line">  objectID: slideId,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// multiple records: add the index</span></span><br><span class="line"><span class="keyword">const</span> records = textEls.map(<span class="function">(<span class="params">el, k</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> r = &#123;</span><br><span class="line">    ...record,</span><br><span class="line">    content: el.innerText.trim(),</span><br><span class="line">    <span class="comment">// give each record extracted from the slide</span></span><br><span class="line">    <span class="comment">// its own id</span></span><br><span class="line">    objectID: <span class="string">`<span class="subst">$&#123;record.objectID&#125;</span>-<span class="subst">$&#123;k&#125;</span>`</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> r</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Our object IDs will be something like:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;https-slides-com-bahmutov-book-quotes-0&quot;</span><br><span class="line">&quot;https-slides-com-bahmutov-book-quotes-1-0&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2><span id="replacing-objects">Replacing objects</span></h2><p>Currently we are using <code>index.replaceAllObjects</code> which removes all objects in the index before adding the updated records. If we have multiple presentations in the index, each slide deck will remove all previous ones. Thus we cannot blindly remove all records.</p><p>We cannot simply add new records, even when using the unique object IDs because it might leave &quot;orphan&quot; records in the index. Imagine the following scenario:</p><ul><li>we have a long presentation with 100 slides</li><li>we scrape the 100 slides into Algolia application</li><li>we change the presentation removing 99 slides, leaving just a single slide</li><li>we scrape the new presentation with one slide</li></ul><p>Hmm, there are 99 records that are still in the index, leading the user to non-existing URLs.</p><p>This is why I save the scraped objects and created Algolia records as JSON files before sending them to the Algolia index.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> slug</span><br><span class="line"><span class="comment">// derive the presentation slug from the pathname</span></span><br><span class="line">cy.location(<span class="string">&#x27;pathname&#x27;</span>).then(<span class="function">(<span class="params">pathname</span>) =&gt;</span> &#123;</span><br><span class="line">  slug = Cypress._.kebabCase(pathname)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// scrape the slides</span></span><br><span class="line">.then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.writeFile(<span class="string">`<span class="subst">$&#123;outputFolder&#125;</span>/<span class="subst">$&#123;slug&#125;</span>-records.json`</span>, records)</span><br><span class="line">  <span class="keyword">const</span> algoliaObjects = records.map(scrapeToAlgoliaRecord)</span><br><span class="line">  cy.writeFile(<span class="string">`<span class="subst">$&#123;outputFolder&#125;</span>/<span class="subst">$&#123;slug&#125;</span>-algolia-objects.json`</span>, algoliaObjects)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> Cypress command <a href="https://on.cypress.io/writefile">cy.writeFile</a> automatically creates the output folder if one does not exist yet.</p><p>We commit the output JSON files to Git, you can find my scraped files in the folder <a href="https://github.com/bahmutov/scrape-book-quotes/tree/main/scraped">scraped</a>.</p><p>We can do the following &quot;trick&quot; before scraping the site: load the <em>previous</em> Algolia records and remove all objects using their unique <code>objectID</code> from the file. That will clear the records for this particular presentation, and we will add the new records after scraping. See the <a href="https://www.algolia.com/doc/api-reference/api-methods/delete-objects/">Delete objects</a> documentation.</p><p><strong>Alternative method:</strong> when adding the new presentation slides we can use the presentation slug as a tag. Then, before adding the new records, we can use the <a href="https://www.algolia.com/doc/api-reference/api-methods/delete-by/">Delete By</a> method to remove any records related to this presentation.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> algoliaObjects = records.map(scrapeToAlgoliaRecord).map(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// add the same presentation slug to each record</span></span><br><span class="line">  <span class="comment">// this attribute will be very useful for deleting</span></span><br><span class="line">  <span class="comment">// all old records before scraping the presentation again</span></span><br><span class="line">  r._tags = [slug]</span><br><span class="line">  <span class="keyword">return</span> r</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Now we can delete all slides belonging to a specific presentation, see the <a href="https://github.com/bahmutov/scrape-book-quotes/blob/main/delete-records.js">delete-records.js</a> script</p><figure class="highlight js"><figcaption><span>delete-records.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> presentationSlug = <span class="string">&#x27;bahmutov-book-quotes&#x27;</span></span><br><span class="line"></span><br><span class="line">index</span><br><span class="line">  .deleteBy(&#123;</span><br><span class="line">    filters: presentationSlug,</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;deleted records with presentation &quot;%s&quot;&#x27;</span>, presentationSlug)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.error(err))</span><br></pre></td></tr></table></figure><h2><span id="the-search-page">The search page</span></h2><p>Let&#39;s confirm the search works by using a simple HTML page and <a href="https://www.algolia.com/doc/guides/building-search-ui/what-is-instantsearch/js/">InstantSearch.js</a>. You can find the full page at <a href="https://github.com/bahmutov/scrape-book-quotes/blob/main/index.html">index.html</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;searchbox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;hits&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> searchClient = algoliasearch(</span><br><span class="line">  <span class="string">&#x27;MYPSC2284D&#x27;</span>, <span class="comment">// public application ID</span></span><br><span class="line">  <span class="string">&#x27;1d382a9c7cdfa0b2c13664c9a6c75b73&#x27;</span>, <span class="comment">// search-only public API key</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> search = instantsearch(&#123;</span><br><span class="line">  indexName: <span class="string">&#x27;quotes&#x27;</span>,</span><br><span class="line">  searchClient,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">search.addWidgets([</span><br><span class="line">  instantsearch.widgets.searchBox(&#123;</span><br><span class="line">    container: <span class="string">&#x27;#searchbox&#x27;</span>,</span><br><span class="line">    placeholder: <span class="string">&#x27;Search for book quotes&#x27;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  instantsearch.widgets.hits(&#123;</span><br><span class="line">    container: <span class="string">&#x27;#hits&#x27;</span>,</span><br><span class="line">    templates: &#123;</span><br><span class="line">      <span class="function"><span class="title">item</span>(<span class="params">hit</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(hit)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`&lt;p&gt;<span class="subst">$&#123;hit.content&#125;</span> - &lt;a href=&quot;<span class="subst">$&#123;hit.url&#125;</span>&quot;&gt;<span class="subst">$&#123;hit.url&#125;</span>&lt;/p&gt;`</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">search.start()</span><br></pre></td></tr></table></figure><p><img src="../images/slides-to-algolia/search.png" alt="Searching the index for &quot;tale&quot; brings two hits"></p><h2><span id="scraping-any-url">Scraping any URL</span></h2><p>Finally, I have refactored the code to make it portable and be able to scrape any Reveal.js deck by just pointing at it via <code>CYPRESS_baseUrl</code> environment variable and running Cypress headlessly. The scraped records are saved as a JSON file for inspection, and also uploaded to Algolia using the <a href="https://github.com/bahmutov/scrape-book-quotes/blob/main/cypress/plugins/index.js">cypress/plugins/index.js</a> code. We need to run Cypress with Algolia&#39;s app ID and the secret Admin API key to be able to upload the records after scraping.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> CYPRESS_baseUrl=https://slides.com/bahmutov/slides-dark-mode \</span></span><br><span class="line"><span class="bash">  APPLICATION_ID=... ADMIN_API_KEY=...  \</span></span><br><span class="line"><span class="bash">  npx cypress run --spec cypress/integration/spec.js</span></span><br><span class="line">...</span><br><span class="line">removing existing records for bahmutov-slides-dark-mode</span><br><span class="line">adding 6 records</span><br><span class="line">  ✓ scrapes (5280ms)</span><br></pre></td></tr></table></figure><p>The scraped <a href="https://slides.com/bahmutov/slides-dark-mode">slides.com/bahmutov/slides-dark-mode</a> has been added to the search index.</p><p><img src="../images/slides-to-algolia/scraped-another.png" alt="Scraped another deck"></p><p>We can scrape multiple decks calling Cypress with each URL via its <a href="https://on.cypress.io/module-api">NPM module api</a>. You can find the full code at <a href="https://github.com/bahmutov/scrape-book-quotes/blob/main/scrape-all.js">scrape-all.js</a>.</p><figure class="highlight js"><figcaption><span>scrape-all.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> presentations = [...] <span class="comment">// all presentation URLs</span></span><br><span class="line"><span class="keyword">const</span> cypress = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">scrapePresentations</span>(<span class="params">urls</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!urls.length) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> presentation = urls.shift()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Scraping <span class="subst">$&#123;presentation&#125;</span>`</span>)</span><br><span class="line">  <span class="keyword">await</span> cypress.run(&#123;</span><br><span class="line">    config: &#123;</span><br><span class="line">      baseUrl: presentation,</span><br><span class="line">    &#125;,</span><br><span class="line">    spec: <span class="string">&#x27;cypress/integration/spec.js&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// scrape the rest of the presentations</span></span><br><span class="line">  <span class="keyword">await</span> scrapePresentations(urls)</span><br><span class="line">&#125;</span><br><span class="line">scrapePresentations(presentations).then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;all done&#x27;</span>))</span><br></pre></td></tr></table></figure><p>From now on, whenever we create another presentation and make it public, we should run the scrape job to make the deck searchable. You can see the search across my Cypress presentations tagged <a href="https://slides.com/bahmutov/decks/cypress-introduction">cypress-introduction</a> and <a href="https://slides.com/bahmutov/decks/cypress-io">cypress.io</a> at <a href="https://cypress.tips/search">cypress.tips/search</a> page. Here is a typical search</p><p><img src="../images/slides-to-algolia/search-widget.gif" alt="Searching across the slides"></p><p>Nice!</p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/scrape-list-of-slides/" title="Scraping the List of Presentation Slides">Scraping the List of Presentation Slides</a></li><li><a href="/blog/scrape-static-site-with-algolia/" title="Scrape Static Site with Algolia">Scrape Static Site with Algolia</a></li><li>Search Cypress Algolia documentation index from the terminal <a href="https://github.com/bahmutov/cy-search">cy-search</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have a lot of presentations at &lt;a href=&quot;https://slides.com/bahmutov&quot;&gt;slides.com/bahmutov&lt;/a&gt;, and it is difficult to find a specific sl
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="algolia" scheme="https://glebbahmutov.com/blog/tags/algolia/"/>
    
  </entry>
  
  <entry>
    <title>Code Coverage For Chat App</title>
    <link href="https://glebbahmutov.com/blog/code-coverage-for-chat-tests/"/>
    <id>https://glebbahmutov.com/blog/code-coverage-for-chat-tests/</id>
    <published>2021-08-16T04:00:00.000Z</published>
    <updated>2021-08-16T16:19:39.877Z</updated>
    
    <content type="html"><![CDATA[<p>In several blog posts I have shown how to test a Socket.io chat application using Cypress.io</p><table><thead><tr><th>Title</th><th>Description</th></tr></thead><tbody><tr><td><a href="/blog/test-socketio-chat-using-cypress/" title="Test a Socket.io Chat App using Cypress">Test a Socket.io Chat App using Cypress</a></td><td>Simulates the second user by connecting to the chat server from the plugins file</td></tr><tr><td><a href="/blog/run-two-cypress-runners/" title="Run Two Cypress Test Runners At The Same Time">Run Two Cypress Test Runners At The Same Time</a></td><td>Launches two test runners, giving them separate specs to run</td></tr><tr><td><a href="/blog/sync-two-cypress-runners/" title="Sync Two Cypress Runners via Checkpoints">Sync Two Cypress Runners via Checkpoints</a></td><td>Launches two test runners, which stay in sync by communicating via their own Socket.io server</td></tr></tbody></table><p>In this blog post I will show how to collect code coverage in each case. From the code coverage reports, we will see that using separate test runners to simulate two users is not necessary. The application code is already exercised when using a separate socket connection to simulate the second user. Even a test with 1 user going through the user interface covers 100% of the code, because every message, even own message, goes through the server before being shown.</p><blockquote class="pullquote"><p>🎁 You can find the source code in the repo <a href="https://github.com/bahmutov/cypress-socketio-chat">bahmutov/cypress-socketio-chat</a>. You can also flip through the slides for the presentation covering this topic at <a href="https://slides.com/bahmutov/e2e-for-chat">slides.com/bahmutov/e2e-for-chat</a>.</p></blockquote><h2><span id="code-instrumentation">Code instrumentation</span></h2><p>The application includes the source code using a script tag</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;scripts/app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>From the server, we can instrument the <code>scripts/app.js</code> source code before sending</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createInstrumenter &#125; = <span class="built_in">require</span>(<span class="string">&#x27;istanbul-lib-instrument&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> instrumenter = createInstrumenter()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/scripts/app.js&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> filename = path.join(__dirname, <span class="string">&#x27;scripts&#x27;</span>, <span class="string">&#x27;app.js&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> src = fs.readFileSync(filename, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> instrumented = instrumenter.instrumentSync(src, filename)</span><br><span class="line">  res.set(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/javascript&#x27;</span>)</span><br><span class="line">  res.send(instrumented)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>To check if the code has been instrumented, inspect the <code>window.__coverage__</code> object from the DevTools console.</p><p><img src="../images/chat-coverage/check-coverage.png" alt="Code coverage object exists"></p><p>We can also instrument the server code using <a href="https://istanbul.js.org/">nyc</a> module following the <a href="https://github.com/cypress-io/code-coverage#instrument-backend-code">Instrument backend code</a> section of the Cypress docs.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D nyc</span></span><br><span class="line">+ nyc@15.1.0</span><br></pre></td></tr></table></figure><p>Change the start server command</p><figure class="highlight diff"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- &quot;start&quot;: &quot;node .&quot;,</span></span><br><span class="line"><span class="addition">+ &quot;start&quot;: &quot;nyc --silent node .&quot;,</span></span><br></pre></td></tr></table></figure><p>And expose the code coverage endpoint</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/cypress-io/code-coverage#instrument-backend-code</span></span><br><span class="line"><span class="comment">/* istanbul ignore next */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">global</span>.__coverage__) &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;@cypress/code-coverage/middleware/express&#x27;</span>)(app)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To ensure the code coverage report always includes the client and the server code, add to the <code>package.json</code> &quot;nyc&quot; options</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;nyc&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;all&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;include&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">      <span class="string">&quot;scripts/*.js&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> if you need to instrument your application code, find an example matching your situation among the examples in the Cypress code coverage plugin <a href="https://github.com/cypress-io/code-coverage">repo</a>.</p><h2><span id="the-first-spec">The first spec</span></h2><p>Our first spec uses a single test runner to send the message to itself.</p><figure class="highlight js"><figcaption><span>cypress/integration/first-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;posts my messages&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://on.cypress.io/visit</span></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// when the application asks for the name</span></span><br><span class="line">      <span class="comment">// return &quot;Cy&quot; using https://on.cypress.io/stub</span></span><br><span class="line">      cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(<span class="string">&#x27;Cy&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// make sure the greeting message is shown</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">&#x27;Cy join the chat..&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// try posting a message</span></span><br><span class="line">  cy.get(<span class="string">&#x27;#txt&#x27;</span>).type(<span class="string">&#x27;Hello there&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, <span class="string">&#x27;Hello there&#x27;</span>).contains(<span class="string">&#x27;strong&#x27;</span>, <span class="string">&#x27;Cy&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The generated HTML report shows full client-side code coverage.</p><p><img src="../images/chat-coverage/first-coverage.png" alt="First spec code coverage report"></p><p>Drill down into the server file to see the two missed lines</p><p><img src="../images/chat-coverage/first-server.png" alt="First spec never disconnects from the server"></p><p>Unfortunately, it is hard to test the user disconnect if our page is the only one present.</p><h2><span id="mock-socket-spec">Mock socket spec</span></h2><p>In another spec we replace the actual socket connection with the Mock Socket object.</p><figure class="highlight js"><figcaption><span>cypress/integration/mock-socket-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> SocketMock <span class="keyword">from</span> <span class="string">&#x27;socket.io-mock&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Mock socket&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// these tests &quot;trick&quot; the application by injecting</span></span><br><span class="line">  <span class="comment">// a mock socket from the test into the application</span></span><br><span class="line">  <span class="comment">// instead of letting the application connect to the real one</span></span><br><span class="line">  <span class="keyword">const</span> socket = <span class="keyword">new</span> SocketMock()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// store info about the client connected from the page</span></span><br><span class="line">  <span class="keyword">let</span> username</span><br><span class="line">  <span class="keyword">let</span> lastMessage</span><br><span class="line">  socket.socketClient.on(<span class="string">&#x27;username&#x27;</span>, <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;user %s connected&#x27;</span>, name)</span><br><span class="line">    username = name</span><br><span class="line">    <span class="comment">// broadcast to everyone, mimicking the index.js server</span></span><br><span class="line">    socket.socketClient.emit(</span><br><span class="line">      <span class="string">&#x27;is_online&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;🔵 &lt;i&gt;&#x27;</span> + username + <span class="string">&#x27; join the chat..&lt;/i&gt;&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  socket.socketClient.on(<span class="string">&#x27;chat_message&#x27;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;user %s says &quot;%s&quot;&#x27;</span>, username, message)</span><br><span class="line">    lastMessage = <span class="string">&#x27;&lt;strong&gt;&#x27;</span> + username + <span class="string">&#x27;&lt;/strong&gt;: &#x27;</span> + message</span><br><span class="line">    socket.socketClient.emit(<span class="string">&#x27;chat_message&#x27;</span>, lastMessage)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;chats&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.intercept(<span class="string">&#x27;/scripts/app.js&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// delete any cache headers to get a fresh response</span></span><br><span class="line">      <span class="keyword">delete</span> req.headers[<span class="string">&#x27;if-none-match&#x27;</span>]</span><br><span class="line">      <span class="keyword">delete</span> req.headers[<span class="string">&#x27;if-modified-since&#x27;</span>]</span><br><span class="line"></span><br><span class="line">      req.continue(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        res.body = res.body.replace(</span><br><span class="line">          <span class="string">&quot;io.connect(&#x27;http://localhost:8080&#x27;)&quot;</span>,</span><br><span class="line">          <span class="string">&#x27;window.testSocket&#x27;</span>,</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;).as(<span class="string">&#x27;appjs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the browser is the 1st user</span></span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">`Cy_<span class="subst">$&#123;Cypress._.random(<span class="number">1000</span>)&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">    cy.log(<span class="string">`User **<span class="subst">$&#123;name&#125;</span>**`</span>)</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">      <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">        win.testSocket = socket</span><br><span class="line">        cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(name)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.wait(<span class="string">&#x27;@appjs&#x27;</span>) <span class="comment">// our code intercept has worked</span></span><br><span class="line">      <span class="comment">// verify we have received the username</span></span><br><span class="line">      <span class="comment">// use .should(callback) to retry</span></span><br><span class="line">      <span class="comment">// until the variable username has been set</span></span><br><span class="line">      .should(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        expect(username, <span class="string">&#x27;username&#x27;</span>).to.equal(name)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// try sending a message via page UI</span></span><br><span class="line">    cy.get(<span class="string">&#x27;#txt&#x27;</span>).type(<span class="string">&#x27;Hello there&#123;enter&#125;&#x27;</span>)</span><br><span class="line">    cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, <span class="string">&#x27;Hello there&#x27;</span>).contains(<span class="string">&#x27;strong&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// verify the mock socket has received the message</span></span><br><span class="line">    cy.should(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      expect(lastMessage, <span class="string">&#x27;the right text&#x27;</span>).to.include(<span class="string">&#x27;Hello there&#x27;</span>)</span><br><span class="line">      expect(lastMessage, <span class="string">&#x27;the sender&#x27;</span>).to.include(name)</span><br><span class="line">    &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// emit message from the test socket</span></span><br><span class="line">      <span class="comment">// to make sure the page shows it</span></span><br><span class="line">      socket.socketClient.emit(</span><br><span class="line">        <span class="string">&#x27;chat_message&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&lt;strong&gt;Cy&lt;/strong&gt;: Mock socket works!&#x27;</span>,</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">      cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, <span class="string">&#x27;Mock socket works&#x27;</span>).contains(<span class="string">&#x27;strong&#x27;</span>, <span class="string">&#x27;Cy&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Because we do not run <em>any</em> socket commands on the server, our server-side coverage drops.</p><p><img src="../images/chat-coverage/mock-coverage.png" alt="Code coverage summary when mocking the Socket"></p><p>The server report shows no socket callbacks have executed.</p><p><img src="../images/chat-coverage/mock-server.png" alt="When mocking the socket client-side, the server is not used"></p><h2><span id="second-user-via-socket-connection">Second user via socket connection</span></h2><p>Let&#39;s run the test that uses the UI page as the first user, while connecting to the server through another socket connection to simulate the 2nd user. For example, we can open that 2nd socket connection from the spec.</p><figure class="highlight js"><figcaption><span>cypress/integration/socket-from-browser-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">&#x27;socket.io-client&#x27;</span>)</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Open 2nd socket connection&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;communicates with 2nd user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// the browser is the 1st user</span></span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">`Cy_<span class="subst">$&#123;Cypress._.random(<span class="number">1000</span>)&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">    cy.log(<span class="string">`User **<span class="subst">$&#123;name&#125;</span>**`</span>)</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">      <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">        cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(name)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// make sure the greeting message is shown</span></span><br><span class="line">    cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;name&#125;</span> join the chat..`</span>)</span><br><span class="line">      .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">      .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// and now connect to the server using 2nd user</span></span><br><span class="line">        <span class="comment">// by opening a new Socket connection from the same browser window</span></span><br><span class="line">        <span class="keyword">const</span> secondName = <span class="string">&#x27;Ghost&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> socket = io.connect(<span class="string">&#x27;http://localhost:8080&#x27;</span>)</span><br><span class="line">        socket.emit(<span class="string">&#x27;username&#x27;</span>, secondName)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// keep track of the last message sent by the server</span></span><br><span class="line">        <span class="keyword">let</span> lastMessage</span><br><span class="line">        socket.on(<span class="string">&#x27;chat_message&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> (lastMessage = msg))</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the page shows that the second user has joined the chat</span></span><br><span class="line">        cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;secondName&#125;</span> join the chat..`</span>).should(</span><br><span class="line">          <span class="string">&#x27;be.visible&#x27;</span>,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the second user can send a message and the page shows it</span></span><br><span class="line">        <span class="keyword">const</span> message = <span class="string">&#x27;hello from 2nd user&#x27;</span></span><br><span class="line">        socket.emit(<span class="string">&#x27;chat_message&#x27;</span>, message)</span><br><span class="line">        cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, message)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// when the first user sends the message from the page</span></span><br><span class="line">        <span class="comment">// the second user receives it via socket</span></span><br><span class="line">        <span class="keyword">const</span> greeting = <span class="string">`Hello there <span class="subst">$&#123;Cypress._.random(<span class="number">10000</span>)&#125;</span>`</span></span><br><span class="line">        cy.get(<span class="string">&#x27;#txt&#x27;</span>).type(greeting)</span><br><span class="line">        cy.get(<span class="string">&#x27;form&#x27;</span>).submit()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// verify the web page shows the message</span></span><br><span class="line">        <span class="comment">// this ensures we can ask the 2nd user for its last message</span></span><br><span class="line">        <span class="comment">// and it should already be there</span></span><br><span class="line">        cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, greeting).contains(<span class="string">&#x27;strong&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// place the assertions in a should callback</span></span><br><span class="line">        <span class="comment">// to retry them, maybe there is a delay in delivery</span></span><br><span class="line">        cy.should(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// using &quot;include&quot; assertion since the server adds HTML markup</span></span><br><span class="line">          expect(lastMessage, <span class="string">&#x27;last message for 2nd user&#x27;</span>).to.include(greeting)</span><br><span class="line">          expect(lastMessage, <span class="string">&#x27;has the sender&#x27;</span>).to.include(name)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        cy.log(<span class="string">&#x27;**second user leaves**&#x27;</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          socket.disconnect()</span><br><span class="line">        &#125;)</span><br><span class="line">        cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;secondName&#125;</span> left the chat..`</span>).should(</span><br><span class="line">          <span class="string">&#x27;be.visible&#x27;</span>,</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Note that this test disconnects the second user and confirms the page shows the right message.</p><p><img src="../images/chat-coverage/second.png" alt="The Cypress test UI"></p><p>The fullstack code coverage achieves 100% for both the client and the server files.</p><p><img src="../images/chat-coverage/second-coverage.png" alt="The code coverage report shows 100% code coverage"></p><p>The server really exercised all Socket commands.</p><p><img src="../images/chat-coverage/second-server.png" alt="The server coverage during the test"></p><h2><span id="run-two-test-runners">Run two test runners</span></h2><p>Now let&#39;s switch to the more complicated way of verifying the chat between two users - by running two test runners. Does it give us any more confidence? Does it cover any more code lines? Well, it would be hard to cover more lines, since we already have reached 100% code coverage!</p><p>We will run two test runners and they will wait for each other using checkpoints. For example, here are the ends of the two spec files where the first user disconnects by going away from the page <code>localhost:8080</code> and the second user confirms it sees the message &quot;First left the chat&quot;</p><figure class="highlight js"><figcaption><span>cypress/pair/first-user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// disconnect from the chat by visiting the blank page</span></span><br><span class="line">cy.window().then(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">  win.location.href = <span class="string">&#x27;about:blank&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">cy.task(<span class="string">&#x27;waitForCheckpoint&#x27;</span>, <span class="string">&#x27;second user saw first user leave&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/pair/second-user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the first user will disconnect now</span></span><br><span class="line">cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;firstName&#125;</span> left the chat..`</span>).should(</span><br><span class="line">  <span class="string">&#x27;be.visible&#x27;</span>,</span><br><span class="line">)</span><br><span class="line">cy.task(<span class="string">&#x27;checkpoint&#x27;</span>, <span class="string">&#x27;second user saw first user leave&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The code coverage stays the same: more lines might be repeated, but no new lines can possible be added to the already full coverage.</p><table><thead><tr><th>Testing approach</th><th>Fullstack code coverage percentage</th></tr></thead><tbody><tr><td>Single spec</td><td>95%</td></tr><tr><td>Mock socket</td><td>75%</td></tr><tr><td>2nd user via socket</td><td>100%</td></tr><tr><td>Run two test runners</td><td>100%</td></tr></tbody></table><p>Happy fullstack testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In several blog posts I have shown how to test a Socket.io chat application using Cypress.io&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Title&lt;/th&gt;
&lt;th&gt;
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Test Video Play Using Cypress</title>
    <link href="https://glebbahmutov.com/blog/test-video-play/"/>
    <id>https://glebbahmutov.com/blog/test-video-play/</id>
    <published>2021-08-13T04:00:00.000Z</published>
    <updated>2021-08-13T18:37:49.773Z</updated>
    
    <content type="html"><![CDATA[<p>If you want to play a video using <code>&lt;video&gt;</code> element, how do you confirm that it is playing? By using its <a href="https://html.spec.whatwg.org/multipage/media.html#playing-the-media-resource">properties</a>.</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">video</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Video<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;test1.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>🎁 You can find the source code for this blog post in the repo <a href="https://github.com/bahmutov/video-example">bahmutov/video-example</a>. 📺 You can watch the explanation in the video <a href="https://www.youtube.com/watch?v=w5vZspiCiuQ">Test And Play Video From Cypress</a>.</p></blockquote><p>At the start, the video should be paused. We can confirm it using <a href="https://glebbahmutov.com/cypress-examples/commands/assertions.html">have.prop assertions</a>.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;plays video&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// https://html.spec.whatwg.org/multipage/media.html#playing-the-media-resource</span></span><br><span class="line">  cy.get(<span class="string">&#x27;video&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;paused&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">    .and(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;ended&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/video-example/load.png" alt="Video is paused"></p><p>Let&#39;s play the video. We need to get the <code>video</code> HTML element reference and call <code>play()</code> method.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;video&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;paused&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">  .and(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;ended&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">$video</span>) =&gt;</span> &#123;</span><br><span class="line">    $video[<span class="number">0</span>].play()</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>The video is playing - let&#39;s confirm it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;video&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;paused&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">  .and(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;ended&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">$video</span>) =&gt;</span> &#123;</span><br><span class="line">    $video[<span class="number">0</span>].play()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// once the video starts playing, check props</span></span><br><span class="line">cy.get(<span class="string">&#x27;video&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;paused&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">  .and(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;ended&#x27;</span>, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>Our video is pretty short (it is about 6 seconds long OBS recording). Thus we can use the built-in assertion <a href="https://on.cypress.io/retry-ability">retry-ability</a> to wait until the property <code>ended</code> turns to true.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;plays video&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// https://html.spec.whatwg.org/multipage/media.html#playing-the-media-resource</span></span><br><span class="line">  cy.get(<span class="string">&#x27;video&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;paused&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">    .and(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;ended&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">$video</span>) =&gt;</span> &#123;</span><br><span class="line">      $video[<span class="number">0</span>].play()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// once the video starts playing, check props</span></span><br><span class="line">  cy.get(<span class="string">&#x27;video&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;paused&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">    .and(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;ended&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// wait for the video to finish playing</span></span><br><span class="line">  <span class="comment">// by retrying the assertion</span></span><br><span class="line">  <span class="comment">// I think our video is about 6 seconds long</span></span><br><span class="line">  cy.get(<span class="string">&#x27;video&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">10000</span> &#125;).and(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;ended&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/video-example/test-play.gif" alt="The test plays the video to the end"></p><h2><span id="video-duration">Video duration</span></h2><p>If we know the expected video duration, we can confirm it</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;has known duration&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;video&#x27;</span>).should(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;duration&#x27;</span>, <span class="number">6.8</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If we do not known the video duration, we can assert that it is greater than zero seconds. At first the <code>duration</code> property is NaN, then it becomes defined as the video information loads.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;has some positive duration&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// at first it is NaN, then it becomes a number</span></span><br><span class="line">  cy.get(<span class="string">&#x27;video&#x27;</span>).should(<span class="function">(<span class="params">$video</span>) =&gt;</span> &#123;</span><br><span class="line">    expect($video[<span class="number">0</span>].duration).to.be.gt(<span class="number">0</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/video-example/duration.gif" alt="Confirming the video has the duration number"></p><h2><span id="controlling-the-playing-speed">Controlling the playing speed</span></h2><p>We can change how fast the video is played using the <code>playbackRate</code> property. The test can limit how long it waits for the <code>ended: true</code> assertion.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;plays video at 4x speed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;video&#x27;</span>).then(<span class="function">(<span class="params">$video</span>) =&gt;</span> &#123;</span><br><span class="line">    $video[<span class="number">0</span>].playbackRate = <span class="number">4</span></span><br><span class="line">    $video[<span class="number">0</span>].play()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// wait for the video to finish playing</span></span><br><span class="line">  <span class="comment">// because the video is playing at 4x speed</span></span><br><span class="line">  <span class="comment">// we don&#x27;t have to wait as long</span></span><br><span class="line">  cy.get(<span class="string">&#x27;video&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">2000</span> &#125;).and(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;ended&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/video-example/fast-speed.gif" alt="The test plays the video at 4x speed"></p><p>That was a fast test.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you want to play a video using &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; element, how do you confirm that it is playing? By using its &lt;a href=&quot;https:
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Mock Network When Using Next.js getServerSideProps Call</title>
    <link href="https://glebbahmutov.com/blog/mock-network-from-server/"/>
    <id>https://glebbahmutov.com/blog/mock-network-from-server/</id>
    <published>2021-08-10T04:00:00.000Z</published>
    <updated>2021-08-10T16:14:02.562Z</updated>
    
    <content type="html"><![CDATA[<p>Cypress has a great way to spy or stub network calls the application makes. Just use the <a href="https://on.cypress.io/intercept">cy.intercept</a> command and have the full control over Ajax calls and static resources. But sometimes, the application is making the network calls from the server-side call. For example, a Next.js application might use the <code>getServerSideProps</code> method to retrieve a joke to be shown to the user.</p><figure class="highlight js"><figcaption><span>pages/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./index.module.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HomePage</span>(<span class="params">&#123; joke &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.home&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-cy</span>=<span class="string">&quot;joke&quot;</span> <span class="attr">className</span>=<span class="string">&#123;styles.content&#125;</span>&gt;</span>&#123;joke&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getServerSideProps</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;getServerSideProps&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">&#x27;https://icanhazdadjoke.com/&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(url, &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> res.json()</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      joke: data.joke</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HomePage</span><br></pre></td></tr></table></figure><p>Without any network mocking, the Cypress test can only assert that there is some text on the page.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;fetches a random joke&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=joke]&#x27;</span>).should(<span class="string">&#x27;not.be.empty&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/mock-network-from-server/no-control.png" alt="A random joke is displayed"></p><p>It would be very nice to stub the <code>fetch</code> call used by the <code>getServerSideProps</code> method. Unfortunately, this call is not made from the web application running in the browser; it is made from the server process.</p><blockquote class="pullquote"><p>🎁 You can find the source code from this blog post in the repo <a href="https://github.com/bahmutov/nock-getServerSideProps">bahmutov/nock-getServerSideProps</a>. You can also watch the explanation in this video <a href="https://youtu.be/33Hq41O0bvU">Stub Network Calls Made by Next.js App in getServerSideProps Method</a>.</p></blockquote><p>What if we had access to the server process so we could install network stubs whenever we needed? We could use <a href="https://github.com/nock/nock">nock</a> library to control the network - the same network used by the Next.js server-side process.</p><p>Here is what we can do - we could run the Next.js server right inside the Cypress plugins process. This process runs in the background, and the test running in the browser can communicate with the process through the <a href="https://on.cypress.io/task">cy.task</a> command. We can start the Next.js application through the <a href="https://nextjs.org/docs/advanced-features/custom-server">custom http server</a> approach.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> next = <span class="built_in">require</span>(<span class="string">&#x27;next&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// start the Next.js server when Cypress starts</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (on, config) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> app = next(&#123; <span class="attr">dev</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  <span class="keyword">const</span> handleNextRequests = app.getRequestHandler()</span><br><span class="line">  <span class="keyword">await</span> app.prepare()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> customServer = <span class="keyword">new</span> http.Server(<span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> handleNextRequests(req, res)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    customServer.listen(<span class="number">3000</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;&gt; Ready on http://localhost:3000&#x27;</span>)</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>🤔 Wait, doesn&#39;t Cypress documentation advise <em>not</em> to start the server from the plugin process? Yes it does, but the documentation cannot <em>stop</em> us. We are like a professional driver on the closed track - we can do whatever we want.</p></blockquote><p>We start the server inside the Cypress process instead of an external process. This only works locally, of course. Let&#39;s add network mocking using <code>nock</code>. We need a way to reset the network mocks (we still want the first test to happen without stubbing), and we need a way to set a specific network mock. We can create tasks for these.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nock = <span class="built_in">require</span>(<span class="string">&#x27;nock&#x27;</span>)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// start the Next.js server when Cypress starts</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (on, config) =&gt; &#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment">// register handlers for cy.task command</span></span><br><span class="line">  <span class="comment">// https://on.cypress.io/task</span></span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">clearNock</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      nock.restore()</span><br><span class="line">      nock.cleanAll()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">nock</span>(<span class="params">&#123; hostname, method, path, statusCode, body &#125;</span>)</span> &#123;</span><br><span class="line">      nock.activate()</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;nock will: %s %s%s respond with %d %o&#x27;</span>,</span><br><span class="line">        method, hostname, path, statusCode, body)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// add one-time network stub like</span></span><br><span class="line">      <span class="comment">// nock(&#x27;https://icanhazdadjoke.com&#x27;).get(&#x27;/&#x27;).reply(200, ...)</span></span><br><span class="line">      method = method.toLowerCase()</span><br><span class="line">      nock(hostname)[method](path).reply(statusCode, body)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s write the spec.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.task(<span class="string">&#x27;clearNock&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;fetches a random joke&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=joke]&#x27;</span>).should(<span class="string">&#x27;not.be.empty&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;getServerSideProps returns mock&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> joke = <span class="string">&#x27;Our wedding was so beautiful, even the cake was in tiers.&#x27;</span></span><br><span class="line">  cy.task(<span class="string">&#x27;nock&#x27;</span>, &#123;</span><br><span class="line">    hostname: <span class="string">&#x27;https://icanhazdadjoke.com&#x27;</span>,</span><br><span class="line">    method: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    statusCode: <span class="number">200</span>,</span><br><span class="line">    body: &#123;</span><br><span class="line">      id: <span class="string">&#x27;NmbFtH69hFd&#x27;</span>,</span><br><span class="line">      joke,</span><br><span class="line">      status: <span class="number">200</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// nock has worked!</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;[data-cy=joke]&#x27;</span>, joke)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The browser shows our joke! The network stub has worked.</p><p><img src="../images/mock-network-from-server/nock.png" alt="The network stub has worked"></p><p>We can check the terminal output to confirm the <code>getServerSideProps</code> got the joke we have set up.</p><p><img src="../images/mock-network-from-server/term.png" alt="The terminal output shows mocking messages"></p><p>Our Cypress test and the Next.js app running inside the plugins process are shown in the diagram below.</p><p><img src="../images/mock-network-from-server/nock-next.png" alt="The server running inside the plugins process with network mocked by the nock library"></p><h2><span id="see-also">See also</span></h2><ul><li>if you can run your Next.js server inside the browser using StackBlitz, then you can stub the network calls from the server using <code>cy.intercept</code> command as the video below shows.</li></ul><center><iframe width="560" height="315" src="https://www.youtube.com/embed/xdVRVhUUgCI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><ul><li>I have described using <code>nock</code> to stub network calls in other blog posts, like <a href="/blog/mock-system-apis/" title="Mock system APIs">Mock system APIs</a> and <a href="/blog/simple-ajax-testing/" title="Simple Ajax testing">Simple Ajax testing</a>.</li><li>we could test the home page component using a component testing approach, read the post <a href="/blog/components-people-test/" title="Components People Test">Components People Test</a></li><li>we could also let the server fetch the real joke without mocking the network, but overwrite it in the page received by the browser, see <a href="/blog/control-nextjs-data-during-tests/" title="Control Next.js Server-Side Data During Cypress Tests">Control Next.js Server-Side Data During Cypress Tests</a>.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Cypress has a great way to spy or stub network calls the application makes. Just use the &lt;a href=&quot;https://on.cypress.io/intercept&quot;&gt;cy.int
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Listen To The Application Events From Cypress Tests</title>
    <link href="https://glebbahmutov.com/blog/listen-to-events/"/>
    <id>https://glebbahmutov.com/blog/listen-to-events/</id>
    <published>2021-08-08T04:00:00.000Z</published>
    <updated>2021-08-08T13:41:18.459Z</updated>
    
    <content type="html"><![CDATA[<p>Often the web application uses events that flow from one part of the application to another. You might need to observe these events from the end-to-end tests to confirm the application sends them. This blog post shows how to receive the custom DOM events and jQuery events. In every case, it is important to set up the listener before the application sends the event.</p><h2><span id="observe-the-dom-event-sent-to-the-document">Observe the DOM event sent to the document</span></h2><blockquote class="pullquote"><p>If you prefer watching the explanation, check out the video <a href="https://www.youtube.com/watch?v=h3O-ZxIItPk">Listen To The Application Dispatching Events To The Document</a>. You can find the source code in the repo <a href="https://github.com/bahmutov/listen-to-custom-event">bahmutov/listen-to-custom-event</a>.</p></blockquote><p>Imagine the application is sending a custom DOM event to the <code>document</code> object</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;sending DOM event loading to the document&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> loadingEvent = <span class="keyword">new</span> CustomEvent(<span class="string">&#x27;loading&#x27;</span>, &#123;</span><br><span class="line">  detail: &#123;</span><br><span class="line">    message: <span class="string">&#x27;Loading...&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.dispatchEvent(loadingEvent)</span><br></pre></td></tr></table></figure><p>We can receive the same event from the Cypress test by subscribing</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;sends an event to the document&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.document().then(<span class="function">(<span class="params">doc</span>) =&gt;</span> &#123;</span><br><span class="line">    doc.addEventListener(<span class="string">&#x27;loading&#x27;</span>, cy.stub().as(<span class="string">&#x27;loading&#x27;</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// on load the app should have sent an event</span></span><br><span class="line">  cy.get(<span class="string">&#x27;@loading&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/listen-to-events/doc.png" alt="Loading event confirmed"></p><p>We are getting the document object using <a href="https://on.cypress.io/document">cy.document</a> just to call its method <code>addEventListener</code>. We can invoke the method right away using the <a href="https://on.cypress.io/invoke">.invoke</a> command. We can also confirm the details in the event object.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;sends an event to the document&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.document().invoke(<span class="string">&#x27;addEventListener&#x27;</span>, <span class="string">&#x27;loading&#x27;</span>, cy.stub().as(<span class="string">&#x27;loading&#x27;</span>))</span><br><span class="line">  <span class="comment">// on load the app should have sent an event</span></span><br><span class="line">  cy.get(<span class="string">&#x27;@loading&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;firstCall.args.0.detail&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;deep.equal&#x27;</span>, &#123;</span><br><span class="line">      message: <span class="string">&#x27;Loading...&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/listen-to-events/doc2.png" alt="Refactored test using cy.invoke"></p><p>In the tests above we still might have a race condition; we call the <code>cy.document()... addEventListener</code> after the <code>cy.visit</code> command. By that time, the application might have fired the event already. The safest way to listen to the event sent at the application&#39;s startup is to register them <em>before</em> the application loads. We cannot simply move <code>addEventListener</code> before <code>cy.visit</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ⛔️ INCORRECT, WILL NOT WORK</span></span><br><span class="line">cy.document().invoke(<span class="string">&#x27;addEventListener&#x27;</span>, <span class="string">&#x27;loading&#x27;</span>, cy.stub().as(<span class="string">&#x27;loading&#x27;</span>))</span><br><span class="line">cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/listen-to-events/wrong.png" alt="Cannot use cy.document before cy.visit"></p><p>Every time <code>cy.visit</code> runs, it creates a <em>new</em> document, while our stub was attached to the <em>previous</em> document instance. We really need to listen to the document object created by the <code>cy.visit</code> command. Luckily, there is <code>onBeforeLoad</code> or <a href="https://on.cypress.io/catalog-of-events">&#39;window:before:load&#39;</a> callbacks - they run between creating a new <code>window</code> and <code>document</code> objects, and the application code.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✅ THE RIGHT WAY TO PREPARE FOR THE EVENT ON LOAD</span></span><br><span class="line">cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">    win.document.addEventListener(<span class="string">&#x27;loading&#x27;</span>, cy.stub().as(<span class="string">&#x27;loading&#x27;</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="observe-the-dom-event-sent-to-an-element">Observe the DOM event sent to an element</span></h2><p>The application might send event to a specific element.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ref = React.createRef()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> onButtonClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;sending DOM event loading to the ref element&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> myEvent = <span class="keyword">new</span> CustomEvent(<span class="string">&#x27;clicked&#x27;</span>, &#123;</span><br><span class="line">    detail: &#123;</span><br><span class="line">      message: <span class="string">&#x27;Button clicked&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  ref.current.dispatchEvent(myEvent)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;input data-cy=<span class="string">&quot;ref&quot;</span> type=<span class="string">&quot;text&quot;</span> ref=&#123;ref&#125; /&gt;</span><br><span class="line">&lt;button onClick=&#123;<span class="function">() =&gt;</span> onButtonClick()&#125;&gt;Send event to the input&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>We can listen to the events sent to the <code>input</code> element by using jQuery <code>on</code> method - because we get the jQuery object from the <a href="https://on.cypress.io/get">cy.get</a> and the <a href="https://on.cypress.io/contains">cy.contains</a> commands.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;sends an event to the ref component&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=ref]&#x27;</span>).invoke(<span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;clicked&#x27;</span>, cy.stub().as(<span class="string">&#x27;clicked&#x27;</span>))</span><br><span class="line">  cy.get(<span class="string">&#x27;button&#x27;</span>).click().click()</span><br><span class="line">  cy.get(<span class="string">&#x27;@clicked&#x27;</span>).should(<span class="string">&#x27;have.been.calledTwice&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/listen-to-events/ref.png" alt="Confirm the events send to the element"></p><p>You can watch the explanation in the video <a href="https://www.youtube.com/watch?v=Uo99lvfZLJQ">Testing DOM Events Sent to ref.current Element By React App</a>.</p><h2><span id="observe-the-jquery-events">Observe the jQuery events</span></h2><p>What if the application is sending custom jQuery events? You can receive these events but you have to be careful: you must use the <em>same jQuery instance</em> that sends them. From the test, you must get the reference to the jQuery instance running inside the application, not the jQuery instance bundled with Cypress under <code>Cypress.$</code> property.</p><blockquote class="pullquote"><p>If you prefer watching the explanation, check out the video <a href="https://www.youtube.com/watch?v=q4bhaXl3pEc">Test The Custom jQuery Events Using Cypress</a>. You can find the source code in the repo <a href="https://github.com/bahmutov/jquery-custom-events-example">bahmutov/jquery-custom-events-example</a>.</p></blockquote><p>Imagine our application is including jQuery on the page</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script</span><br><span class="line">  src=&quot;https://code.jquery.com/jquery-3.6.0.slim.min.js&quot;</span><br><span class="line">  integrity=&quot;sha256-u7e5khyithlIdTpu22PHhENmPcRdFiHRjhAuHcs05RI=&quot;</span><br><span class="line">  crossorigin=&quot;anonymous&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- example https://learn.jquery.com/events/introduction-to-custom-events/ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;room&quot;</span> <span class="attr">id</span>=<span class="string">&quot;kitchen&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Kitchen<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;lightbulb off&quot;</span>&gt;</span>💡<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;room&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bedroom&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Bedroom<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;lightbulb off&quot;</span>&gt;</span>💡<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;master_switch&quot;</span>&gt;</span>Master switch<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The application sends <a href="https://learn.jquery.com/events/introduction-to-custom-events/">custom jQuery events</a> in the <code>app.js</code> in response to the user clicks.</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.lightbulb&#x27;</span>)</span><br><span class="line">  .on(<span class="string">&#x27;light:on&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).removeClass(<span class="string">&#x27;off&#x27;</span>).addClass(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .on(<span class="string">&#x27;light:off&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).removeClass(<span class="string">&#x27;on&#x27;</span>).addClass(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#master_switch&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> lightbulbs = $(<span class="string">&#x27;.lightbulb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// trigger custom global event</span></span><br><span class="line">  $(<span class="string">&#x27;body&#x27;</span>).trigger(<span class="string">&#x27;lights:toggle&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check if any lightbulbs are on</span></span><br><span class="line">  <span class="keyword">if</span> (lightbulbs.is(<span class="string">&#x27;.on&#x27;</span>)) &#123;</span><br><span class="line">    lightbulbs.trigger(<span class="string">&#x27;light:off&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    lightbulbs.trigger(<span class="string">&#x27;light:on&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let&#39;s confirm the application triggers events like <code>lights:toggle</code>. We will get the jQuery from the application&#39;s window object, then we can get the document, wrap it in the jQuery object, and register a stub.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;triggers custom event&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  cy.window().then(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.document().then(<span class="function">(<span class="params">doc</span>) =&gt;</span> &#123;</span><br><span class="line">      win.$(doc).on(<span class="string">&#x27;lights:toggle&#x27;</span>, cy.stub().as(<span class="string">&#x27;toggle&#x27;</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;#master_switch&#x27;</span>).click().click().click()</span><br><span class="line">  cy.get(<span class="string">&#x27;@toggle&#x27;</span>).should(<span class="string">&#x27;have.been.calledThrice&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/listen-to-events/lights.png" alt="Receiving custom jQuery events"></p><p>Great, it works. We can simplify the test. The command <a href="https://on.cypress.io/visit">cy.visit</a> yields the <code>window</code> object, thus we do not need to call <code>cy.window</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;index.html&#x27;</span>).then(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.document().then(<span class="function">(<span class="params">doc</span>) =&gt;</span> &#123;</span><br><span class="line">    win.$(doc).on(<span class="string">&#x27;lights:toggle&#x27;</span>, cy.stub().as(<span class="string">&#x27;toggle&#x27;</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We are only interested in the <code>win.$</code> property, thus we can use <a href="https://on.cypress.io/its">.its</a> command to get <a href="https://glebbahmutov.com/cypress-examples/recipes/window-property.html">the window property</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  .its(<span class="string">&#x27;$&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">$</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.document().then(<span class="function">(<span class="params">doc</span>) =&gt;</span> &#123;</span><br><span class="line">      $(doc).on(<span class="string">&#x27;lights:toggle&#x27;</span>, cy.stub().as(<span class="string">&#x27;toggle&#x27;</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>We can also shorten getting the <code>document</code> object just to wrap it in the jQuery function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  .its(<span class="string">&#x27;$&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">$</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.document()</span><br><span class="line">      .then($)</span><br><span class="line">      .then(<span class="function">(<span class="params">$doc</span>) =&gt;</span> &#123;</span><br><span class="line">        $doc.on(<span class="string">&#x27;lights:toggle&#x27;</span>, cy.stub().as(<span class="string">&#x27;toggle&#x27;</span>))</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Finally, we get the <code>$doc</code> object just to invoke a method <code>on</code>. We can use the <a href="https://on.cypress.io/invoke">.invoke</a> command to shorten it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  .its(<span class="string">&#x27;$&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">$</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.document()</span><br><span class="line">      .then($)</span><br><span class="line">      .invoke(<span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;lights:toggle&#x27;</span>, cy.stub().as(<span class="string">&#x27;toggle&#x27;</span>))</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Short and sweet.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/test-pubsub/" title="Control The Application Through PubSub From Cypress">Control The Application Through PubSub From Cypress</a></li><li><a href="/blog/cypress-and-xstate/" title="Access XState from Cypress Test">Access XState from Cypress Test</a></li><li><a href="/blog/cypress-vs-other-test-runners/" title="Cypress vs Other Test Runners">Cypress vs Other Test Runners</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Often the web application uses events that flow from one part of the application to another. You might need to observe these events from 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Control The Application Through PubSub From Cypress</title>
    <link href="https://glebbahmutov.com/blog/test-pubsub/"/>
    <id>https://glebbahmutov.com/blog/test-pubsub/</id>
    <published>2021-08-06T04:00:00.000Z</published>
    <updated>2021-08-06T18:53:05.310Z</updated>
    
    <content type="html"><![CDATA[<p>A user has recently asked me about using Cypress tests not delivering events into the application. The application is using <a href="https://github.com/mroderick/PubSubJS">pubsub-js</a> from the &quot;Publisher&quot; component to publish events. Other components, like the &quot;Subscriber&quot; component can subscribe to PubSub events and then updates the page UI.</p><figure class="highlight text"><figcaption><span>Publisher</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type=&quot;button&quot; @click.prevent=&quot;notifyNavbar&quot; data-cy=&quot;publisherbutton&quot;&gt;</span><br><span class="line"></span><br><span class="line">import PubSub from &quot;pubsub-js&quot;;</span><br><span class="line">function notifyNavbar() &#123;</span><br><span class="line">  console.log(&quot;Sending Notification&quot;);</span><br><span class="line">  PubSub.publish(&#x27;notification-update&#x27;, 1);</span><br><span class="line">  console.log(&quot;Notification Sent&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight text"><figcaption><span>Subscriber</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;span data-cy=&quot;notficationcounter&quot;&gt;&#123;&#123; notificationCount &#125;&#125;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">import PubSub from &#x27;pubsub-js&#x27;;</span><br><span class="line"></span><br><span class="line">const notificationCount = ref(0);</span><br><span class="line"></span><br><span class="line">PubSub.subscribe(</span><br><span class="line">  &#x27;notification-update&#x27;,</span><br><span class="line">  (message: string, data: number) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;notification received.&#x27;);</span><br><span class="line">    console.log(data);</span><br><span class="line">    notificationCount.value += data;</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>The first test works correctly confirming the application is working</p><figure class="highlight js"><figcaption><span>cypress/integration/test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;click the button&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;http://localhost:8080/&#x27;</span>);</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=publisherbutton]&#x27;</span>).click();</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=notficationcounter]&#x27;</span>).contains(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/pubsub/first-test.png" alt="The application is working"></p><p><strong>Tip:</strong> move the <code>http://localhost:8080/</code> URL into the <code>cypress.json</code> file. This will avoid the test reload, watch the video <a href="https://youtu.be/f5UaXuAc52c">How to correctly use the baseUrl to visit a site in Cypress</a>.</p><blockquote class="pullquote"><p>📺 If you would rather watch the explanation from this blog post, watch my video <a href="https://youtu.be/Axr1Je9KKB8">How To Use PubSub From Cypress Test To Publish Events To Application</a>.</p></blockquote><h2><span id="the-broken-test">The broken test</span></h2><p>The user has written the second test, trying to publish the tests from the <em>test</em> and then check if the &quot;Subscriber&quot; component is updated.</p><figure class="highlight js"><figcaption><span>cypress/integration/test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">&quot;pubsub-js&quot;</span>;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;publish the event&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;http://localhost:8080/&#x27;</span>)</span><br><span class="line">  PubSub.publish(<span class="string">&#x27;notification-update&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=notficationcounter]&#x27;</span>).contains(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Unfortunately the test fails.</p><p><img src="../images/pubsub/second-test.png" alt="The application does not update after the dispatch"></p><p>The application does not see the updated count - it never receives the &quot;notification-update&quot; event. The reason is that Cypress test file is placed in a separate iframe from the application.</p><p><img src="../images/pubsub/iframes.png" alt="The application and the spec iframes"></p><p>Each iframe has its own JavaScript environment, its own <code>window</code> object, its own ... PubSub instance. It is as if two applications were loaded:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">&quot;pubsub-js&quot;</span>;</span></span><br><span class="line"><span class="javascript">    PubSub.subscribe(<span class="string">&#x27;hey&#x27;</span>, ...)</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">&quot;pubsub-js&quot;</span>;</span></span><br><span class="line"><span class="javascript">    PubSub.publish(<span class="string">&#x27;hey&#x27;</span>, ...)</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>While the code looks similar, the two PubSub instances <em>are completely separate</em>. The events published in one iframe are invisible and never mix with the events published in the second one. Our test file published the event - but on its own PubSub.</p><h2><span id="the-solution">The solution</span></h2><p>We need to access the application&#39;s PubSub instance from the spec file. The simplest way is for the application to share it by adding it as a property to the <code>window</code> object.</p><figure class="highlight js"><figcaption><span>Publisher</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">&quot;pubsub-js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.Cypress) &#123;</span><br><span class="line">  <span class="built_in">window</span>.PubSub = PubSub</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From the spec file we can access the application&#39;s <code>window</code> object using the <a href="https://on.cypress.io/window">cy.window</a> command, and then wait for the property <code>PubSub</code> to exist, see <a href="https://glebbahmutov.com/cypress-examples/recipes/window-property.html">The <code>window.property</code> recipe</a>.</p><figure class="highlight js"><figcaption><span>cypress/integration/test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;publish the event&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;http://localhost:8080/&#x27;</span>)</span><br><span class="line">  cy.window().its(<span class="string">&#x27;PubSub&#x27;</span>).then(<span class="function"><span class="params">PubSub</span> =&gt;</span> &#123;</span><br><span class="line">    PubSub.publish(<span class="string">&#x27;notification-update&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=notficationcounter]&#x27;</span>).contains(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Now the test works correctly.</p><p><img src="../images/pubsub/works.png" alt="The test published the event using the right PubSub"></p><p>We can simplify the above test a little. We need the <code>window</code> instance after the <a href="https://on.cypress.io/visit">cy.visit</a> command. The <code>cy.visit</code> command yields the application&#39;s <code>window</code> object, thus we can directly chain the <code>visit</code> and the <code>its</code> commands.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;publish the event&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;http://localhost:8080/&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;PubSub&#x27;</span>).then(<span class="function"><span class="params">PubSub</span> =&gt;</span> &#123;</span><br><span class="line">      PubSub.publish(<span class="string">&#x27;notification-update&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=notficationcounter]&#x27;</span>).contains(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We can simplify the above test even more. We are getting the <code>PubSub</code> object and then immediate invoke its method <code>publish</code>. We can use the Cypress command <a href="https://on.cypress.io/invoke"><code>.invoke</code></a> for this.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;publish the event&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;http://localhost:8080/&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;PubSub&#x27;</span>)</span><br><span class="line">    .invoke(<span class="string">&#x27;publish&#x27;</span>, <span class="string">&#x27;notification-update&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=notficationcounter]&#x27;</span>).contains(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The nice thing about Cypress <code>.invoke</code> command: if the method returns a Promise, the command will wait for the promise to resolve before continuing with the next Cypress command.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;A user has recently asked me about using Cypress tests not delivering events into the application. The application is using &lt;a href=&quot;http
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Visit The Blank Page Between Cypress Tests</title>
    <link href="https://glebbahmutov.com/blog/visit-blank-page-between-tests/"/>
    <id>https://glebbahmutov.com/blog/visit-blank-page-between-tests/</id>
    <published>2021-07-31T04:00:00.000Z</published>
    <updated>2021-08-02T19:04:23.640Z</updated>
    
    <content type="html"><![CDATA[<p>When a Cypress test finishes, the web application stays in the browser&#39;s window. This could be confusing if the next test does not immediately start with <code>cy.visit</code>. For example, the JavaScript callbacks from the application visited in the first test are still executing, and could &quot;leak&quot; into the second test. Imagine the application scheduling code to execute after a delay:</p><figure class="highlight js"><figcaption><span>src/App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;rendering app&#x27;</span>)</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;running app code&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>Imagine the test confirming the number of console logs calls. The application is printing a message on start up and when adding a todo. The first test successfully passes</p><figure class="highlight js"><figcaption><span>cypress/integration/log-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;logs message on startup&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.spy(win.console, <span class="string">&#x27;log&#x27;</span>).as(<span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the app has loaded</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;@log&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/between-tests/first-test.png" alt="The first test confirms the &quot;console.log&quot; was called exactly once"></p><p>In the screenshot above notice the second <code>log</code> call. It happens <em>after</em> the test has already finished and thus does not affect our assertion <code>cy.get(&#39;@log&#39;).should(&#39;have.been.calledOnce&#39;)</code>.</p><blockquote class="pullquote"><p>📺 If you prefer watching the explanation to reading this blog post, I have recorded the video <a href="https://youtu.be/H04KlMirMYs">Visit The Blank Page Between The Tests</a>.</p></blockquote><p>Let&#39;s add a second test that confirms the <code>console.log</code> is called when adding a new Todo item.</p><figure class="highlight js"><figcaption><span>cypress/integration/log-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;logs message on startup&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.spy(win.console, <span class="string">&#x27;log&#x27;</span>).as(<span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the app has loaded</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;@log&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;logs message when adding a todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// the spies and stubs are reset before each test</span></span><br><span class="line">  <span class="comment">// thus we need to spy on the console again</span></span><br><span class="line">  cy.window()</span><br><span class="line">    .its(<span class="string">&#x27;console&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params"><span class="built_in">console</span></span>) =&gt;</span> &#123;</span><br><span class="line">      cy.spy(<span class="built_in">console</span>, <span class="string">&#x27;log&#x27;</span>).as(<span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the app has loaded</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=new-todo]&#x27;</span>).type(<span class="string">&#x27;hello&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;@log&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The second test fails - there is an extra <code>console.log</code> call that now is included in the second test.</p><p><img src="../images/between-tests/second-test.png" alt="The second test fails due to the callback from the first test"></p><p>In my case, if the application uses a delay of 30ms when calling the <code>setTimeout</code>, the application because flaky - sometimes the tests pass and sometimes they fail.</p><figure class="highlight js"><figcaption><span>src/App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;running app code&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">30</span>) <span class="comment">// flaky value</span></span><br></pre></td></tr></table></figure><p><img src="../images/between-tests/flake.gif" alt="The test can pass or fail randomly"></p><p>I do not have to tell you, how frustrating flaky tests are.</p><blockquote class="pullquote"><p>📚 Read my other blog posts about <a href="https://cypress.io/blog/tag/flake/">flaky tests</a> on Cypress blog.</p></blockquote><p>A similar situation when the app does something unexpected due to the previous test can happen for other reasons. For example, a long-running network requests can finish and unexpectedly update the app. At best, the application&#39;s behavior can be hard to explain. At worst, you can get the dreaded <a href="https://on.cypress.io/error-messages#cy-failed-because-the-element-you-are-chaining-off-of-has-become-detached-or-removed-from-the-dom">this element is detached from the DOM</a> error.</p><h2><span id="solution-visiting-a-blank-page">Solution: visiting a blank page</span></h2><p>A good solution to clearly separate the tests and stop any application callbacks is to visit a &quot;neutral&quot; blank page. Unfortunately, using the <code>cy.visit(&#39;about:blank&#39;)</code> would not work.</p><figure class="highlight js"><figcaption><span>cypress/integration/log-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">afterEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;about:blank&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;logs message on startup&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.spy(win.console, <span class="string">&#x27;log&#x27;</span>).as(<span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the app has loaded</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;@log&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;logs message when adding a todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// the spies and stubs are reset before each test</span></span><br><span class="line">  <span class="comment">// thus we need to spy on the console again</span></span><br><span class="line">  cy.window()</span><br><span class="line">    .its(<span class="string">&#x27;console&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params"><span class="built_in">console</span></span>) =&gt;</span> &#123;</span><br><span class="line">      cy.spy(<span class="built_in">console</span>, <span class="string">&#x27;log&#x27;</span>).as(<span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the app has loaded</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=new-todo]&#x27;</span>).type(<span class="string">&#x27;hello&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;@log&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Notice the URL in the browser - we did NOT visit the <code>about:blank</code> page, instead we have visited our <code>baseUrl</code> + <code>about:blank</code>!</p><p><img src="../images/between-tests/wrong.png" alt="cy.visit does not work with about:blank address"></p><p>We need another way of visiting the blank page. We can use the <code>window.location = &#39;about:blank&#39;</code> instead. Note: we also need to visit the page in every test.</p><figure class="highlight js"><figcaption><span>cypress/integration/log-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.spy(win.console, <span class="string">&#x27;log&#x27;</span>).as(<span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// the app has loaded</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">afterEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.window().then(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">    win.location.href = <span class="string">&#x27;about:blank&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;logs message on startup&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">&#x27;@log&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnceWithExactly&#x27;</span>, <span class="string">&#x27;rendering app&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;logs message when adding a todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">&#x27;@log&#x27;</span>).invoke(<span class="string">&#x27;resetHistory&#x27;</span>) <span class="comment">// reset the spy</span></span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=new-todo]&#x27;</span>).type(<span class="string">&#x27;hello&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;@log&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnceWithExactly&#x27;</span>, <span class="string">&#x27;added todo&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The passing tests show the expected calls - and nothing else.</p><p><img src="../images/between-tests/location.png" alt="The first test no longer leaks console log calls into the second test"></p><p>The callback from the application is truly canceled. You can confirm it is never executed by looking at the DevTools console. The log message &quot;running app code&quot; is never printed, because the JavaScript VM executing the application code for <code>localhost:3000</code> is stopped.</p><p><img src="../images/between-tests/clear-console.png" alt="The DevTools console never shows the message &quot;running app code&quot; from the app callback"></p><p>Notice the application page is blank - because we visit the blank pages <em>after</em> each test. We could leave the application running and instead visit the blank page before each test. In that case make sure the <code>about:page</code> callback is the very first callback executed for each test. A good idea is to place it into the support file, because that file is always loaded before the spec file loads.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.window().then(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">    win.location.href = <span class="string">&#x27;about:blank&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/integration/log-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.spy(win.console, <span class="string">&#x27;log&#x27;</span>).as(<span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// the app has loaded</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Nice.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;When a Cypress test finishes, the web application stays in the browser&amp;#39;s window. This could be confusing if the next test does not im
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Burn Cypress Tests on CircleCI</title>
    <link href="https://glebbahmutov.com/blog/burn-tests-on-circle/"/>
    <id>https://glebbahmutov.com/blog/burn-tests-on-circle/</id>
    <published>2021-07-29T04:00:00.000Z</published>
    <updated>2021-08-03T15:33:01.204Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes you add a new end-to-end test and ask yourself: &quot;Is this test flake-free? Is it reliable?&quot; If a new test is unreliable, you are bound to break other people&#39;s test runs. One way to determine if a test is robust, is to run it multiple times in a row. If the tests are all green, the test is good to go.</p><blockquote class="pullquote"><p>📺 If you would rather watch the explanation from this blog post, watch it <a href="https://youtu.be/HxAjSUxr84w">here</a> and subscribe to my <a href="https://youtube.com/glebbahmutov">YouTube channel</a>.</p></blockquote><p>Cypress can run a single test on demand using the <a href="https://github.com/cypress-io/cypress-grep">cypress-grep</a> plugin. For example, from the browser&#39;s DevTools Console we can execute the method <code>Cypress.grep(&lt;name of the test&gt;, null, 10)</code> to run a single test ten times in a row.</p><p><img src="../images/burn-circle/ten.png" alt="Run a single test by title ten times in a row from DevTools Console"></p><p>You can grep the tests to run by title and run them N times in a row using Cypress headless mode. Pass the title and the burn number using <code>--env ...</code> argument. To execute the same test five times in a row:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ npx cypress run --env grep=&#x27;completes second&#x27;,burn=5</span><br><span class="line">cypress-grep: tests with &quot;completes second&quot; in their names</span><br><span class="line">cypress-grep: running filtered tests 5 times</span><br><span class="line">...</span><br><span class="line">  - works</span><br><span class="line">  ✓ completes second item: burning 1 of 5 (1677ms)</span><br><span class="line">  ✓ completes second item: burning 2 of 5 (1228ms)</span><br><span class="line">  ✓ completes second item: burning 3 of 5 (1196ms)</span><br><span class="line">  ✓ completes second item: burning 4 of 5 (1192ms)</span><br><span class="line">  ✓ completes second item: burning 5 of 5 (1188ms)</span><br><span class="line"></span><br><span class="line">  5 passing (7s)</span><br><span class="line">  1 pending</span><br></pre></td></tr></table></figure><p>There is another way to pass the environment variables besides <code>--env</code> argument. You can pass the values using the environment variables prefixed with <code>CYPRESS_</code> string. The command below is equivalent to the one above:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ CYPRESS_grep=&#x27;completes second&#x27; CYPRESS_burn=5 npx cypress run</span><br><span class="line">cypress-grep: tests with &quot;completes second&quot; in their names</span><br><span class="line">cypress-grep: running filtered tests 5 times</span><br><span class="line">...</span><br><span class="line">  - works</span><br><span class="line">  ✓ completes second item: burning 1 of 5 (1677ms)</span><br><span class="line">  ✓ completes second item: burning 2 of 5 (1228ms)</span><br><span class="line">  ✓ completes second item: burning 3 of 5 (1196ms)</span><br><span class="line">  ✓ completes second item: burning 4 of 5 (1192ms)</span><br><span class="line">  ✓ completes second item: burning 5 of 5 (1188ms)</span><br><span class="line"></span><br><span class="line">  5 passing (7s)</span><br><span class="line">  1 pending</span><br></pre></td></tr></table></figure><p>Sometimes we are not sure if a test is flaky or not when running it on a Continuous Integration (CI) server. If you are using a CircleCI to run Cypress tests, here is the way to be able to grep and burn a single test on demand.</p><blockquote class="pullquote"><p>🎁 You can find the full source code in the repo <a href="https://github.com/bahmutov/todomvc-tests-circleci">bahmutov/todomvc-tests-circleci</a>.</p></blockquote><p>Take your workflow that uses <a href="https://github.com/cypress-io/circleci-orb">Cypress CircleCI Orb</a>. It has a <code>cypress/run</code> job.</p><figure class="highlight yml"><figcaption><span>.circleci/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># to use orbs, must use version &gt;= 2.1</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="comment"># import Cypress orb by specifying an exact version x.y.z</span></span><br><span class="line">  <span class="comment"># or the latest version 1.x.x using &quot;@1&quot; syntax</span></span><br><span class="line">  <span class="comment"># https://github.com/cypress-io/circleci-orb</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">e2e:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">E2E</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">store_artifacts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>We need to pass parameters to this workflow when launching it. We can use the pipeline parameters for this. Let&#39;s add a top-level section to the file.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="comment"># allow running selected tests once or multiple times</span></span><br><span class="line">  <span class="comment"># using the cypress-grep plugin</span></span><br><span class="line">  <span class="comment"># https://github.com/cypress-io/cypress-grep</span></span><br><span class="line">  <span class="attr">GREP:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">default:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">BURN:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">integer</span></span><br><span class="line">    <span class="attr">default:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>Before the <code>cypress/run</code> launches the Bash shell to execute <code>npx cypress run</code> we need to export the <code>CYPRESS_grep</code> and <code>CYPRESS_burn</code> environment variables. We can use the <code>post-checkout</code> option in the <code>cypress/run</code> job to do so, following the <a href="https://circleci.com/docs/2.0/env-vars/">CircleCI env documentation</a>. We can put the values from the pipeline parameters using a special CircleCI syntax:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">e2e:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">E2E</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">store_artifacts:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">post-checkout:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">Export</span> <span class="string">grep</span> <span class="string">parameters</span> <span class="string">as</span> <span class="string">environment</span> <span class="string">variables</span></span><br><span class="line">                <span class="comment"># Exports GREP and BURN to environment variables</span></span><br><span class="line">                <span class="comment"># CYPRESS_GREP and CYPRESS_BURN</span></span><br><span class="line">                <span class="comment"># that Cypress will read automatically and</span></span><br><span class="line">                <span class="comment"># make available in Cypress.env() as Cypress.env(&#x27;grep&#x27;)</span></span><br><span class="line">                <span class="comment"># and Cypress.env(&#x27;burn&#x27;)</span></span><br><span class="line">                <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line">                  <span class="string">echo</span> <span class="string">&#x27;export CYPRESS_grep=&quot;&lt;&lt; pipeline.parameters.GREP &gt;&gt;&quot;&#x27;</span> <span class="string">&gt;&gt;</span> <span class="string">$BASH_ENV</span></span><br><span class="line">                  <span class="string">echo</span> <span class="string">&#x27;export CYPRESS_burn=&lt;&lt; pipeline.parameters.BURN &gt;&gt;&#x27;</span> <span class="string">&gt;&gt;</span> <span class="string">$BASH_ENV</span></span><br></pre></td></tr></table></figure><p>By default, the grep value is an empty string, thus all tests run once. But if we want to run just the second test to really stress-test it, we can launch the pipeline through the CircleCI web app.</p><p><img src="../images/burn-circle/trigger-pipeline.gif" alt="Launch a pipeline run and provide parameters for cypress-grep"></p><p><strong>Tip:</strong> switch to the desired branch before running the pipeline if needed.</p><p>The pipeline parameters are exported as the environment variables for Cypress to read and pass to the plugin. The test &quot;completes second item&quot; then runs by itself 11 times.</p><p><img src="../images/burn-circle/circle1.png" alt="Cypress receives the pipeline parameters through the environment variables"></p><p><img src="../images/burn-circle/circle2.png" alt="The selected test runs 11 times"></p><h2><span id="alternative-pass-the-environment-variables-as-command-prefix">Alternative: pass the environment variables as command prefix</span></h2><p>Cypress CircleCI Orb allows you to define a command prefix that is concatenated with the full <code>cypress run ...</code> command formed by the orb itself. We can use this method to avoid the variable export step.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">e2e:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">E2E</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">store_artifacts:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment"># set the environment variables before running Cypress</span></span><br><span class="line">          <span class="comment"># you can use &quot;yarn&quot; in place of &quot;npx&quot;</span></span><br><span class="line">          <span class="attr">command-prefix:</span> <span class="string">CYPRESS_grep=&quot;&lt;&lt;</span> <span class="string">pipeline.parameters.GREP</span> <span class="string">&gt;&gt;&quot;</span> <span class="string">CYPRESS_burn=&lt;&lt;</span> <span class="string">pipeline.parameters.BURN</span> <span class="string">&gt;&gt;</span> <span class="string">npx</span></span><br></pre></td></tr></table></figure><h2><span id="best-alternative-use-cypress-orb-env-parameter">Best alternative: use Cypress orb env parameter</span></h2><p>I have added <code>env: ...</code> parameter to Cypress orb, released as v1.29.0 (see <a href="https://github.com/cypress-io/circleci-orb/issues/355">issue #355</a>, PR <a href="https://github.com/cypress-io/circleci-orb/pull/358">#358</a>), so now you can pass the burn parameter very simply.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">e2e:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">E2E</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">store_artifacts:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">grep=&quot;&lt;&lt;</span> <span class="string">pipeline.parameters.GREP</span> <span class="string">&gt;&gt;&quot;,burn=&lt;&lt;</span> <span class="string">pipeline.parameters.BURN</span> <span class="string">&gt;&gt;</span></span><br></pre></td></tr></table></figure><h2><span id="run-a-single-test-once">Run a single test once</span></h2><p>If you only provide the <code>GREP</code> parameter, without <code>BURN</code>, then the selected test(s) will run once. For example, let&#39;s run the test with &quot;works&quot; in the title.</p><p><img src="../images/burn-circle/grep.png" alt="We want to run just the tests with &quot;works&quot; in the title"></p><p>Click the &quot;Run Pipeline&quot; button and observe only the selected test run.</p><p><img src="../images/burn-circle/one-test.png" alt="Only the picked test ran"></p><h2><span id="read-more">Read more</span></h2><ul><li><a href="/blog/burning-tests/" title="Burning Tests with cypress-grep">Burning Tests with cypress-grep</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sometimes you add a new end-to-end test and ask yourself: &amp;quot;Is this test flake-free? Is it reliable?&amp;quot; If a new test is unreliabl
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="circle" scheme="https://glebbahmutov.com/blog/tags/circle/"/>
    
  </entry>
  
  <entry>
    <title>Avoid Cypress Pyramid of Doom</title>
    <link href="https://glebbahmutov.com/blog/avoid-cypress-pyramid-of-doom/"/>
    <id>https://glebbahmutov.com/blog/avoid-cypress-pyramid-of-doom/</id>
    <published>2021-07-28T04:00:00.000Z</published>
    <updated>2021-07-28T02:14:25.758Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine an application with two input fields and a numerical result element. In the test we need to verify that the result is the sum of the inputs.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Calculator<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>a = <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;a&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>b = <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;b&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>a + b = <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>You can find this page and the spec file in the repo <a href="https://github.com/bahmutov/cypress-multiple-aliases">bahmutov/cypress-multiple-aliases</a>.</p><blockquote class="pullquote"><p>📺 If you would rather watch the explanation from this blog post, watch it <a href="https://youtu.be/MIIEndCTVxc">here</a> and subscribe to my <a href="https://youtube.com/glebbahmutov">YouTube channel</a>.</p></blockquote><p>If we grab each element, then (pun intended) the test will have a pyramid of callback functions.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;adds numbers&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=a]&#x27;</span>)</span><br><span class="line">    .invoke(<span class="string">&#x27;val&#x27;</span>)</span><br><span class="line">    .then(<span class="built_in">parseInt</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">a</span>) =&gt;</span> &#123;              <span class="comment">// level 1</span></span><br><span class="line">      cy.get(<span class="string">&#x27;[name=b]&#x27;</span>)</span><br><span class="line">        .invoke(<span class="string">&#x27;val&#x27;</span>)</span><br><span class="line">        .then(<span class="built_in">parseInt</span>)</span><br><span class="line">        .then(<span class="function">(<span class="params">b</span>) =&gt;</span> &#123;          <span class="comment">// level 2</span></span><br><span class="line">          cy.get(<span class="string">&#x27;#result&#x27;</span>)</span><br><span class="line">            .invoke(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">            .then(<span class="built_in">parseInt</span>)</span><br><span class="line">            .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123; <span class="comment">// level 3</span></span><br><span class="line">              expect(a + b).to.eq(result)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Can we avoid this? We could store each parsed number in an alias using <a href="https://on.cypress.io/as">.as</a> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;adds numbers via aliases&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=a]&#x27;</span>).invoke(<span class="string">&#x27;val&#x27;</span>).then(<span class="built_in">parseInt</span>).as(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=b]&#x27;</span>).invoke(<span class="string">&#x27;val&#x27;</span>).then(<span class="built_in">parseInt</span>).as(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;#result&#x27;</span>)</span><br><span class="line">    .invoke(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    .then(<span class="built_in">parseInt</span>)</span><br><span class="line">    .as(<span class="string">&#x27;result&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We now need to access all three values at once. If we had just a single value, we could have used <a href="https://on.cypress.io/get">cy.get</a> command. For three values, it would lead back to the pyramid of nested callbacks.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;adds numbers via aliases&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=a]&#x27;</span>).invoke(<span class="string">&#x27;val&#x27;</span>).then(<span class="built_in">parseInt</span>).as(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=b]&#x27;</span>).invoke(<span class="string">&#x27;val&#x27;</span>).then(<span class="built_in">parseInt</span>).as(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;#result&#x27;</span>)</span><br><span class="line">    .invoke(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    .then(<span class="built_in">parseInt</span>)</span><br><span class="line">    .as(<span class="string">&#x27;result&#x27;</span>)</span><br><span class="line">  <span class="comment">// a pyramid again!</span></span><br><span class="line">  cy.get(<span class="string">&#x27;@a&#x27;</span>).then(<span class="function"><span class="params">a</span> =&gt;</span> &#123;                <span class="comment">// level 1</span></span><br><span class="line">    cy.get(<span class="string">&#x27;@b&#x27;</span>).then(<span class="function"><span class="params">b</span> =&gt;</span> &#123;              <span class="comment">// level 2</span></span><br><span class="line">      cy.get(<span class="string">&#x27;@result&#x27;</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;  <span class="comment">// level 3</span></span><br><span class="line">        expect(a + b).to.eq(result)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Instead we can take advantage of the fact that each saved Cypress alias is also added into the test context object. We can access such properties using <code>this.name</code> later on. To make sure we access the <code>a</code>, <code>b</code>, and <code>result</code> properties <em>after</em> they have been set, we chain the access using <code>.then</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;adds numbers via aliases&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=a]&#x27;</span>).invoke(<span class="string">&#x27;val&#x27;</span>).then(<span class="built_in">parseInt</span>).as(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=b]&#x27;</span>).invoke(<span class="string">&#x27;val&#x27;</span>).then(<span class="built_in">parseInt</span>).as(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;#result&#x27;</span>)</span><br><span class="line">    .invoke(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    .then(<span class="built_in">parseInt</span>)</span><br><span class="line">    .as(<span class="string">&#x27;result&#x27;</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      expect(<span class="built_in">this</span>.a + <span class="built_in">this</span>.b).to.eq(<span class="built_in">this</span>.result)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test is happy.</p><p><img src="../images/avoid-cypress-pyramid-of-doom/test.png" alt="The passing test that uses Cypress aliases to avoid a pyramid of Doom of nested callbacks"></p><h2><span id="use-the-function-syntax">Use the function syntax</span></h2><p>Note that the callback that accesses the properties from the test context object using <code>this.a</code>, <code>this.b</code>, and <code>this.result</code> is a proper function that uses <code>function () &#123; ... &#125;</code> syntax. It cannot be <code>() =&gt; &#123; ... &#125;</code> expression, as such expression would not have the <code>this</code> pointing at the test context object; it would be the global object instead. Thus as a rule of thumb, whenever you use <code>this</code> inside a Cypress test, always have a proper <code>function</code>.</p><h2><span id="see-also">See also</span></h2><p>Read my blog post <a href="/blog/test-closures/" title="Tests, closures and arrow functions">Tests, closures and arrow functions</a> that has a fine Dante reference.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine an application with two input fields and a numerical result element. In the test we need to verify that the result is the sum of 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
</feed>
