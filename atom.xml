<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Better world by better software</title>
  
  <subtitle>Gleb Bahmutov PhD</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://glebbahmutov.com/blog/"/>
  <updated>2022-06-04T02:27:54.739Z</updated>
  <id>https://glebbahmutov.com/blog/</id>
  
  <author>
    <name>Gleb Bahmutov</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Run All Specs in Cypress v10</title>
    <link href="https://glebbahmutov.com/blog/run-all-specs-cypress-v10/"/>
    <id>https://glebbahmutov.com/blog/run-all-specs-cypress-v10/</id>
    <published>2022-06-04T04:00:00.000Z</published>
    <updated>2022-06-04T02:27:54.739Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Note:</strong> Cypress v10 has removed the &quot;Run all&quot; specs button because of its technical limitations. You can voice your feedback by commenting on the issue <a href="https://github.com/cypress-io/cypress/discussions/21628">#21628</a>. This blog post explains my workaround for running all specs together (or some specs only).</p><p>Let&#39;s say I have 3 End-to-End spec files. I can run each spec by clicking on it.</p><p><img src="../images/run-all/one-spec.png" alt="Running one spec at a time using Cypress v10"></p><p>Ok, so how do I run <em>all 3 specs together</em>? Hmm. That is a conundrum.</p><p>Here is what you do. Create a new e2e spec that just imports all other specs.</p><figure class="highlight js"><figcaption><span>cypress/e2e/all.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./clock.cy&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./play.cy&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./spec.cy&#x27;</span></span><br></pre></td></tr></table></figure><p>Click on the &quot;all.cy.js&quot; spec in Cypress and voil√† - you got all your specs running together, just like the good old days.</p><p><img src="../images/run-all/all.png" alt="Running all specs together"></p><p>Want to run just the test files &quot;spec.cy.js&quot; and &quot;clock.cy.js&quot; together? Comment out the &quot;play.cy&quot; import</p><figure class="highlight js"><figcaption><span>cypress/e2e/all.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./clock.cy&#x27;</span></span><br><span class="line"><span class="comment">// import &#x27;./play.cy&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./spec.cy&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="../images/run-all/two.png" alt="Skipping the play.cy.js spec file"></p><h2><span id="continuous-integration">Continuous integration</span></h2><p>What about the CI? We don&#39;t want to run all specs individually AND run them again by hitting the <code>all.cy.js</code> spec file on CI? You can <em>exclude</em> the <code>all.cy.js</code> when running the tests on CI</p><figure class="highlight js"><figcaption><span>cypress.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">e2e</span>: &#123;</span><br><span class="line">    <span class="attr">baseUrl</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">    <span class="attr">excludeSpecPattern</span>: process.<span class="property">env</span>.<span class="property">CI</span> ? [<span class="string">&#x27;cypress/e2e/all.cy.js&#x27;</span>] : [],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">component</span>: &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">framework</span>: <span class="string">&#x27;create-react-app&#x27;</span>,</span><br><span class="line">      <span class="attr">bundler</span>: <span class="string">&#x27;webpack&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If we run the tests locally using <code>cypress run</code> we see 4 specs included</p><p><img src="../images/run-all/local.png" alt="All specs are included by default"></p><p>But when we simulate the Continuous Integration server by setting the <code>CI=1</code> environment variable we see the <code>all.cy.js</code> spec file skipped, so only the real test files run.</p><p><img src="../images/run-all/ci.png" alt="The all.cy.js spec file skilled on CI"></p><p>Happy Cypress v10 testing</p><p><strong>PS:</strong> it would be nice to know in the <code>cypress.config.js</code> file if we are running using the <code>cypress open</code> or <code>cypress run</code> mode.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Cypress v10 has removed the &amp;quot;Run all&amp;quot; specs button because of its technical limitations. You can voice y
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>How We Run The Mobile Web Browser Tests at Mercari US</title>
    <link href="https://glebbahmutov.com/blog/mobile-tests/"/>
    <id>https://glebbahmutov.com/blog/mobile-tests/</id>
    <published>2022-05-19T04:00:00.000Z</published>
    <updated>2022-05-19T14:24:25.738Z</updated>
    
    <content type="html"><![CDATA[<p>At <a href="https://www.mercari.com/">Mercari US</a> users can buy and sell things. While most of the application traffic comes from our mobile application (which we <a href="https://medium.com/mercari-engineering/why-we-decided-to-rewrite-our-ios-android-apps-from-scratch-in-react-native-9f1737558299">are rewriting as a ReactNative App right now</a>), a big chunk of users use Mercari via web browsers, both desktop and mobile. The mobile web application is not simply a responsive version of the app, but it renders a lot of web components differently, and processes different user events, like &quot;touch&quot; instead of &quot;click.</p><p><img src="../images/mobile-tests/r-vs-web.png" alt="Responsive web vs mobile emulation Mercari home page"></p><p>In the right image above, I simulate a mobile web browser using Chrome DevTools mobile browser emulation.</p><p><img src="../images/mobile-tests/emulate.png" alt="The DevTools mobile web browser emulation"></p><p>The mobile web browser emulation works by attaching a custom &quot;user-agent&quot; header to every outgoing request. The Mercari web server looks at that request to determine what page to serve (including different CSS and JS bundles). Thus the page looks and behaves differently from the normal desktop page. How do we test the mobile version of the web page using Cypress Test Runner?</p><h2><span id="mobile-tests">Mobile tests</span></h2><p>We must request pages using the same emulation &quot;user-agent&quot; header. Cypress includes a <a href="https://on.cypress.io/configuration">configuration option</a> that let&#39;s you set an arbitrary <code>userAgent</code> value to sent with each request. The value does not even have to be very complicated. For example, in our NPM scripts, we have a command to run the &quot;normal&quot; desktop Cypress tests, and another command to open Cypress with a mobile user agent and set the app viewport to 400 by 600 pixels:</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;cy:open&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cypress open&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cy:open:mobile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cypress open --config viewportWidth=400,viewportHeight=600,</span></span><br><span class="line"><span class="string">      userAgent=\&quot;Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) Mobile/14E304\&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>When we execute <code>npm run cy:open:mobile</code> or <code>yarn cy:open:mobile</code> the configuration options <code>--config ...</code> are applied and set the viewport of the browser to <code>400x600</code> pixels, and set the &quot;user-agent&quot; header to a simplified string the backend server still considers a mobile browser client. Here is how a typical mobile test looks when running:</p><p><img src="../images/mobile-tests/mobile.png" alt="Typical mobile test"></p><p>Not every test needs to be executed in the mobile web browser emulation mode. While we have 500+ full end-to-end tests, only about 75 tests are meant to exercise mobile-specific web flows. We <a href="/blog/tag-tests/" title="tag tests">tag tests</a> to mark the tests that have mobile-specific features. The test above is defined as both a regression and a mobile test.</p><figure class="highlight js"><figcaption><span>buy-and-change-payment-method.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;Can change payment method on checkout&#x27;</span>,</span><br><span class="line">  &#123; <span class="attr">tags</span>: [<span class="string">&#x27;@regression&#x27;</span>, <span class="string">&#x27;@mobile&#x27;</span>] &#125;,</span><br><span class="line">  <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">signup</span>(seller)</span><br><span class="line">    cy.<span class="title function_">createListing</span>(&#123; name, price &#125;)</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>üí° For tagging individual tests and suites of tests, we use my <a href="https://github.com/cypress-io/cypress-grep">cypress-grep</a> plugin. For finding all tests tagged &quot;@mobile&quot; we use my <a href="https://github.com/bahmutov/find-cypress-specs">find-cypress-specs</a> utility.</p></blockquote><h2><span id="fast-feedback">Fast feedback</span></h2><p>It is extremely important to get early results when running lots of end-to-end tests. Whenever someone opens a pull request, we first run a CI job that only runs any new and modified spec files. Read my blog posts <a href="/blog/faster-ci-feedback/" title="Get Faster Feedback From Your Cypress Tests Running On GitHub Actions">Get Faster Feedback From Your Cypress Tests Running On GitHub Actions</a> and <a href="/blog/faster-ci-feedback-on-circleci/" title="Get Faster Feedback From Your Cypress Tests Running On CircleCI">Get Faster Feedback From Your Cypress Tests Running On CircleCI</a> how we do this. For mobile spec specifically, we have a separate CI step that runs any specs with the found <code>@mobile</code> tag inside using <code>cypress run --config viewport,userAgent=mobile..</code> command. The relevant CircleCI command is below</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># find all changed or new specs with the test tag &quot;@mobile&quot; inside</span><br><span class="line">specs=$(npx find-cypress-specs --branch main --parent --tagged @mobile)</span><br><span class="line">n=$(npx find-cypress-specs --branch main --parent --tagged @mobile --count)</span><br><span class="line">echo &quot;&quot;</span><br><span class="line">echo &quot;Changed and added $&#123;n&#125; Cypress mobile specs&quot;</span><br><span class="line">echo $&#123;specs&#125;</span><br><span class="line">echo &quot;&quot;</span><br><span class="line"></span><br><span class="line">if [ $&#123;n&#125; -lt 1 ]; then</span><br><span class="line">  echo &quot;No Cypress mobile specs changed, exiting...&quot;</span><br><span class="line">  exit 0</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># we have to form the Cypress run command ourselves</span><br><span class="line"># to only execute the changed specs using mobile user agent</span><br><span class="line">npx cypress run --record --parallel \</span><br><span class="line">  --group &quot;0. Changed mobile specs&quot; \</span><br><span class="line">  --browser chrome \</span><br><span class="line">  --config viewportWidth=400,viewportHeight=600, \</span><br><span class="line">    userAgent=&quot;Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) Mobile/14E304&quot; \</span><br><span class="line">  --spec $&#123;specs&#125;</span><br></pre></td></tr></table></figure><p>Any changed &quot;normal&quot; specs execute in a different CircleCI job. Only if changed (and added) specs pass, we run a sanity set of tests for each pull request.</p><p><img src="../images/mobile-tests/workflow.png" alt="CircleCI executes the changed specs first"></p><p>Because the changed specs passed in mobile and desktop modes, we can proceed with running all sanity tests in the &quot;Other specs&quot; group.</p><p><img src="../images/mobile-tests/dashboard.png" alt="All test results are recorded on Cypress Dashboard"></p><p><strong>Tip:</strong> the pull request text allows our engineers to run tests by topic or run a larger regression suite of tests, or even run all specs just by checking the PR checkboxes, see the blog post <a href="/blog/pick-tests-using-pull-request/" title="Pick Tests To Run Using The Pull Request Text">Pick Tests To Run Using The Pull Request Text</a>.</p><h2><span id="mobile-specific-steps">Mobile-specific steps</span></h2><p>Some tests should run in desktop and in mobile modes. Thus we need to have the conditional Cypress steps that look at the current user agent configuration setting.</p><figure class="highlight js"><figcaption><span>utils.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isMobile</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> userAgent = <span class="title class_">Cypress</span>.<span class="title function_">config</span>(<span class="string">&#x27;userAgent&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> userAgent &amp;&amp; userAgent.<span class="title function_">includes</span>(<span class="string">&#x27;Mobile&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;isMobile&#125; <span class="keyword">from</span> <span class="string">&#x27;./utils.js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> isMobilePage = <span class="title function_">isMobile</span>()</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;runs this test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span> (isMobilePage) &#123;</span><br><span class="line">    <span class="comment">// mobile page does not have user icon, only nav</span></span><br><span class="line">    cy.<span class="title function_">byTestId</span>(<span class="string">&#x27;InquiriesButtonNav&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;nav img[alt=avatar]&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Because the user agent cannot change while the tests are running, we can check the <code>Cypress.config(&#39;userAgent&#39;)</code> once and then use the value through the spec file.</p><h2><span id="the-next-steps">The next steps</span></h2><p>If you follow my <a href="https://cypress.tips/courses">Cypress Network Testing Exercises</a> course, you might have seen &quot;Bonus 20&quot; lesson that simulates the mobile mode using the <code>cy.intercept</code> command. I am exploring ways to NOT use the <code>userAgent</code> configuration option to run mobile tests, and instead attaching the request header to every outgoing request. Stay tuned.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;At &lt;a href=&quot;https://www.mercari.com/&quot;&gt;Mercari US&lt;/a&gt; users can buy and sell things. While most of the application traffic comes from our 
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Pass The Reference</title>
    <link href="https://glebbahmutov.com/blog/pass-reference/"/>
    <id>https://glebbahmutov.com/blog/pass-reference/</id>
    <published>2022-05-16T04:00:00.000Z</published>
    <updated>2022-05-16T11:34:22.930Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine your code is using a lot of <code>instanceof</code> checks. When running Cypress tests, you might want to also check if a given object is an instance of a given constructor function. The problem is, your specs and the application run in different iframes. Thus a constructor <em>might</em> have the same name (let&#39;s say <code>Alert</code>), but an instance of <code>Alert</code> from the spec&#39;s iframe window is different from an instance of the application&#39;s iframe window. Watch my video below for the introduction to this problem and one possible solution</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/5VJOpg09w2k" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><blockquote class="pullquote"><p>üìù For more, read the the recipe &quot;Be very careful with instanceof assertion&quot; from my <a href="https://glebbahmutov.com/cypress-examples">Cypress examples site</a>.</p></blockquote><p>In this blog post, I will show a general way of how to avoid this problem if you are making objects yourself from the spec. Let&#39;s say we have the following statements in the application and in the Cypress spec files:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// application code in &quot;src&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Alert</span> <span class="keyword">from</span> <span class="string">&#x27;./Alert&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isAlert</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="comment">// uses the imported &quot;Alert&quot; function</span></span><br><span class="line">  <span class="keyword">return</span> a <span class="keyword">instanceof</span> <span class="title class_">Alert</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// cypress/integration/spec.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Alert</span> <span class="keyword">from</span> <span class="string">&#x27;../../src/Alert&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isAlert</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="comment">// uses its own imported &quot;Alert&quot; function</span></span><br><span class="line">  <span class="keyword">return</span> a <span class="keyword">instanceof</span> <span class="title class_">Alert</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you are importing &quot;Alert&quot; from the spec, that this <code>Alert</code> function is <em>different</em> from the Alert imported in the application. If the spec calls <code>isAlert</code> and passes its own objects, the check will fail and return false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cypress/integration/spec.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Alert</span> <span class="keyword">from</span> <span class="string">&#x27;../../src/Alert&#x27;</span></span><br><span class="line"><span class="comment">// if get the instance of alert from the application</span></span><br><span class="line">cy.<span class="title function_">get</span>(...).<span class="title function_">then</span>(... =&gt; &#123;</span><br><span class="line">  <span class="comment">// NOPE, will fail!</span></span><br><span class="line">  <span class="title function_">expect</span>(<span class="title function_">isAlert</span>(appAlert)).<span class="property">to</span>.<span class="property">be</span>.<span class="property">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>So how do we ensure the spec has <em>the same Alert</em> reference as the application? By avoiding importing it and instead getting it from the application. Following the approach outlined in the blog post <a href="/blog/send-data-to-the-test/" title="Send Data From The Application To The Cypress Test">Send Data From The Application To The Cypress Test</a> we do the following in the application:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// application code in &quot;src&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Alert</span> <span class="keyword">from</span> <span class="string">&#x27;./Alert&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">Cypress</span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">Alert</span> = <span class="title class_">Alert</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isAlert</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a <span class="keyword">instanceof</span> <span class="title class_">Alert</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So when the application loads, it &quot;saves&quot; its <code>Alert</code> reference on the <code>window</code> object. From the spec we can get to that reference using the <a href="https://on.cypress.io/window">cy.window</a> and <a href="https://on.cypress.io/its">cy.its</a> commands. Even if it takes a little for the application to load and set the <code>window.Alert</code> no problem, the <code>cy.its</code> command <a href="https://on.cypress.io/retry-ability">retries automatically</a> until that property is found.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cypress/integration/spec.js</span></span><br><span class="line"><span class="comment">// do not import Alert, instead</span></span><br><span class="line">cy.<span class="title function_">window</span>().<span class="title function_">its</span>(<span class="string">&#x27;Alert&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">Alert</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ‚úÖ The Alert instance now comes from the application code</span></span><br><span class="line">  cy.<span class="title function_">get</span>(...).<span class="title function_">then</span>(... =&gt; &#123;</span><br><span class="line">    <span class="title function_">expect</span>(<span class="title function_">isAlert</span>(appAlert)).<span class="property">to</span>.<span class="property">be</span>.<span class="property">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Beautiful.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine your code is using a lot of &lt;code&gt;instanceof&lt;/code&gt; checks. When running Cypress tests, you might want to also check if a given o
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Check More Things Before Clicking</title>
    <link href="https://glebbahmutov.com/blog/check-more-things/"/>
    <id>https://glebbahmutov.com/blog/check-more-things/</id>
    <published>2022-05-11T04:00:00.000Z</published>
    <updated>2022-05-11T11:50:29.895Z</updated>
    
    <content type="html"><![CDATA[<p>I have my <a href="https://cypress.tips/">Cypress.tips</a> site with my <a href="https://cypress.tips/courses">Cypress courses</a> page. It needs some end-to-end tests. Since <a href="https://www.cypress.io/blog/2022/04/25/cypress-9-6-0-easily-test-multi-domain-workflows-with-cy-origin/">Cypress v9.6.0</a> came out, I had no problem logging in using 3rd party authentication provider, see the video <a href="https://www.youtube.com/watch?v=XMJP07Ft1nA">Instant Application Login Via External Domain Using cy.session And cy.origin Commands</a>.</p><p>For testing on CI I used my favorite <a href="/blog/trying-github-actions/" title="GitHub Actions">GitHub Actions</a>. Here is the GitHub workflow file:</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">this</span> <span class="string">repo</span> <span class="string">üõé</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">üß™</span></span><br><span class="line">        <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">yarn</span> <span class="string">dev</span></span><br><span class="line">          <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br></pre></td></tr></table></figure><p>In my first spec, I wanted to log into the course and scroll the list of lessons. You can find the test code in <a href="https://github.com/bahmutov/cypress-tips/pull/13">the pull request #13</a>. I started with one test.</p><figure class="highlight yml"><figcaption><span>cypress/integration/course-login.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">describe(&#x27;Course</span> <span class="string">login&#x27;,</span> &#123; <span class="attr">viewportHeight:</span> <span class="number">1200</span> &#125;<span class="string">,</span> <span class="string">()</span> <span class="string">=&gt;</span> &#123;</span><br><span class="line">  <span class="string">it(&#x27;uses</span> <span class="string">the</span> <span class="string">authentication&#x27;</span>, <span class="string">()</span> <span class="string">=&gt;</span> &#123;</span><br><span class="line">    <span class="string">cy.visit(&#x27;/courses&#x27;)</span></span><br><span class="line">    <span class="string">cy.contains(&#x27;h1&#x27;</span>, <span class="string">&#x27;Courses&#x27;</span><span class="string">).should(&#x27;be.visible&#x27;)</span></span><br><span class="line">    <span class="string">cy.contains(&#x27;button&#x27;</span>, <span class="string">&#x27;Log in&#x27;</span><span class="string">).click()</span></span><br><span class="line"></span><br><span class="line">    <span class="string">//</span> <span class="string">https://on.cypress.io/origin</span></span><br><span class="line">    <span class="string">cy.origin(&#x27;https://auth.coursekit.dev&#x27;</span>, <span class="string">()</span> <span class="string">=&gt;</span> &#123;</span><br><span class="line">      <span class="string">cy.contains(&#x27;#message&#x27;</span>, <span class="string">&#x27;Cypress Tips&#x27;</span><span class="string">).should(&#x27;be.visible&#x27;)</span></span><br><span class="line">      <span class="string">cy.get(&#x27;input#loginId&#x27;)</span></span><br><span class="line">        <span class="string">//</span> <span class="string">hide</span> <span class="string">the</span> <span class="string">email</span> <span class="string">from</span> <span class="string">the</span> <span class="string">video</span></span><br><span class="line">        <span class="string">.invoke(&#x27;attr&#x27;</span>, <span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;password&#x27;</span><span class="string">)</span></span><br><span class="line">        <span class="string">.type(Cypress.env(&#x27;COURSE_EMAIL&#x27;)</span>, &#123; <span class="attr">log:</span> <span class="literal">false</span> &#125;<span class="string">)</span></span><br><span class="line">      <span class="string">cy.get(&#x27;input#password&#x27;).type(Cypress.env(&#x27;COURSE_PASSWORD&#x27;)</span>, &#123;</span><br><span class="line">        <span class="attr">log:</span> <span class="literal">false</span>,</span><br><span class="line">      &#125;<span class="string">)</span></span><br><span class="line">      <span class="string">cy.contains(&#x27;button&#x27;</span>, <span class="string">&#x27;Log In&#x27;</span><span class="string">).click()</span></span><br><span class="line">    &#125;<span class="string">)</span></span><br><span class="line"></span><br><span class="line">    <span class="string">//</span> <span class="string">back</span> <span class="string">to</span> <span class="string">the</span> <span class="string">local</span> <span class="string">courses</span> <span class="string">page</span></span><br><span class="line">    <span class="string">cy.location(&#x27;pathname&#x27;).should(&#x27;equal&#x27;</span>, <span class="string">&#x27;/courses&#x27;</span><span class="string">)</span></span><br><span class="line">    <span class="string">cy.contains(&#x27;button&#x27;</span>, <span class="string">&#x27;Log out&#x27;</span><span class="string">).should(&#x27;be.visible&#x27;)</span></span><br><span class="line">    <span class="string">cy.contains(&#x27;h2&#x27;</span>, <span class="string">&#x27;Cypress Network Testing Exercises&#x27;</span><span class="string">).click()</span></span><br><span class="line">    <span class="string">cy.get(&#x27;section.summary&#x27;).should(&#x27;have.length.greaterThan&#x27;</span>, <span class="number">20</span><span class="string">)</span></span><br><span class="line">    <span class="string">cy.scrollTo(&#x27;bottom&#x27;</span>, &#123; <span class="attr">duration:</span> <span class="number">2000</span> &#125;<span class="string">)</span></span><br><span class="line">  &#125;<span class="string">)</span></span><br><span class="line">&#125;<span class="string">)</span></span><br></pre></td></tr></table></figure><p>The test works locally beautifully. We see the login (I hide the password by changing the type of the email input element to be <code>password</code>), we see the logged in course page, and we can go to the course itself to scroll through the lessons.</p><p><img src="../images/check-more-things/login-test1.gif" alt="Login test works locally"></p><p>Unfortunately the test failed on CI.</p><p><img src="../images/check-more-things/fails.png" alt="Login test failed on CI"></p><p>Ughh, the error might come from the test command <code>cy.get(&#39;section.summary&#39;).should(&#39;have.length.greaterThan&#39;, 20)</code> but we are not sure. I want to see the screenshot, so I set up recording the test results on <a href="https://on.cypress.io/dashboard-introduction">Cypress Dashboard</a>. The next CI run still failed, but it was recorded this time.</p><p><img src="../images/check-more-things/test.png" alt="The failed test info on Cypress Dashboard"></p><p>Why does it fail?</p><h2><span id="red-flags">Red flags</span></h2><p>When running on CI your main concern should be the timing. The CI machine is a small virtual box (unless you pay for custom resource class), nothing compared to your development machine. This underpowered virtual box has to run the web application and the Cypress Test Runner. When browsing Next.js application, each page has to be built, which takes time, then it is loaded by the browser, which also takes time. What it means is that everything is slower than when running locally.</p><p>Look at the local test duration in the GIF above - the local test took <strong>15.45</strong> seconds. Look at the CI screenshot - the same test took <strong>35</strong> seconds. And it did not even finish! Can the app execute fast enough to keep up with our clicks and other commands? Look at the Ajax messages around <code>cy.click</code> and the failing command. We want to click and see the course page, but the Ajax messages show the web application is still <em>doing something</em>.</p><p><img src="../images/check-more-things/building.png" alt="The web application is doing something on CI while we click"></p><p>Even working locally, we can see that our <code>cy.click</code> command is executed <em>while</em> the page is still loading. If I hover over it locally, I can see the page still loading images.</p><p><img src="../images/check-more-things/click.gif" alt="The images are still loading when we click"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;h2&#x27;</span>, <span class="string">&#x27;Cypress Network Testing Exercises&#x27;</span>).<span class="title function_">click</span>()</span><br></pre></td></tr></table></figure><p>Hmm, the test runner simply &quot;sees&quot; the &quot;H2&quot; element with expected text and clicks on it. But if the page is still loading and scaffolding, it might not process the <code>click</code> event. How do we prevent this? How do we tell the test to wait for the application to fully load?</p><p>Before we jump into event handlers and check if <a href="/blog/when-can-the-test-click/" title="there is one attached">there is one attached</a>, let&#39;s simple confirm what we see. Let&#39;s confirm the images have loaded before clicking on the course title. Let&#39;s confirm other page elements, like the enrolled status element.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">location</span>(<span class="string">&#x27;pathname&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/courses&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Log out&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;.status&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;Enrolled&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> courseTitle = <span class="string">&#x27;Cypress Network Testing Exercises&#x27;</span></span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;section.summary&#x27;</span>, courseTitle).<span class="title function_">within</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;img[alt=&quot;Course thumbnail&quot;]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    <span class="comment">// check if the image has finished loading</span></span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;0.naturalWidth&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.greaterThan&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h2&#x27;</span>, courseTitle).<span class="title function_">click</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Locally we see images have loaded when we get to the <code>cy.contains(&#39;h2&#39;, courseTitle).click()</code> commands</p><p><img src="../images/check-more-things/loaded-images.gif" alt="The images have fully loaded"></p><p>Ok, looks good locally. On CI? Still fails.</p><p><img src="../images/check-more-things/still-fails.png" alt="The test still failed on CI"></p><p>Hmm, let&#39;s check more things. We only checked if the course thumbnail image has finished loading. Let&#39;s also confirm the author&#39;s thumbnail has loaded.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let the page load and be ready to process the click</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;img[data-cy=&quot;author-photo&quot;]&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;0.naturalWidth&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;be.greaterThan&#x27;</span>, <span class="number">50</span>)</span><br><span class="line"><span class="keyword">const</span> courseTitle = <span class="string">&#x27;Cypress Network Testing Exercises&#x27;</span></span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;section.summary&#x27;</span>, courseTitle).<span class="title function_">within</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;img[alt=&quot;Course thumbnail&quot;]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    <span class="comment">// check if the image has finished loading</span></span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;0.naturalWidth&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.greaterThan&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h2&#x27;</span>, courseTitle).<span class="title function_">click</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I also added one more check - since the URL changes after the click, before we check the number of sections displayed on the page, we should confirm we got to the new page.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the url changes to include the course ID</span></span><br><span class="line">cy.<span class="title function_">location</span>(<span class="string">&#x27;pathname&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">10_000</span> &#125;).<span class="title function_">should</span>(</span><br><span class="line">  <span class="string">&#x27;match&#x27;</span>,</span><br><span class="line">  <span class="regexp">/\/courses\/[a-z0-9]+$/</span>,</span><br><span class="line">)</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;section.summary&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length.greaterThan&#x27;</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>Finally the CI is green!</p><p><img src="../images/check-more-things/ci-passed.png" alt="The test has passed"></p><p>So remember - it takes time to fully load the page before it is ready to react to the user events. If you find the test failing because the page is still loading, add more commands and assertions to check those loading elements. The test will give the page an opportunity to fully load, and then the test can proceed.</p><p>Worst comes to worst, and nothing on the page looks like it is loading and can be checked using Cypress commands? Nothing the <code>cy.intercept</code> can spy on? Add <code>cy.wait(10000)</code> to sleep for ten seconds while the page is loading.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/solve-the-first-click/" title="Solve The First Click">Solve The First Click</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have my &lt;a href=&quot;https://cypress.tips/&quot;&gt;Cypress.tips&lt;/a&gt; site with my &lt;a href=&quot;https://cypress.tips/courses&quot;&gt;Cypress courses&lt;/a&gt; page. 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>Set All Cypress Env Values Using A Single GitHub Actions Secret</title>
    <link href="https://glebbahmutov.com/blog/secrets-to-env/"/>
    <id>https://glebbahmutov.com/blog/secrets-to-env/</id>
    <published>2022-05-09T04:00:00.000Z</published>
    <updated>2022-05-09T21:29:41.457Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s say you need to pass some values to Cypress tests. You should use <a href="https://on.cypress.io/environment-variables">Cypress environment variables</a> (not to be confused with process environment variables) and read them using <a href="https://on.cypress.io/env">Cypress.env</a> command. For example, you could pass login information to your specs, as describe in <a href="/blog/keep-passwords-secret-in-e2e-tests/" title="Keep passwords secret in E2E tests">Keep passwords secret in E2E tests</a>. On CI, you could store the value as a secret, and then pass it to Cypress. The syntax differs, but for example on <a href="/blog/trying-github-actions/" title="GitHub Actions">GitHub Actions</a> you could use something like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx cypress run --env userName=$&#123;&#123; secrets.USERNAME &#125;&#125;,password=$&#123;&#123; secrets.PASSWORD &#125;&#125;</span><br></pre></td></tr></table></figure><p>It all works if you only have a few simple values to pass. If you have multiple values, or if they are complex JSON objects, passing them via command line is bound to break due to parsing and quotes. Luckily, there are other ways, and this blog post shows one good way for GitHub Actions.</p><blockquote class="pullquote"><p>üéÅ You can find the source code and see the executed GitHub Actions in the repo <a href="https://github.com/bahmutov/cypress-env-example">bahmutov&#x2F;cypress-env-example</a>.</p></blockquote><p>First, you could put the values into <code>env</code> key of the <code>cypress.json</code> file</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;person&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Jane&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">25</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;San Francisco&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>The test in our case simply checks the values.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;has valid env values&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title class_">Cypress</span>.<span class="title function_">env</span>())</span><br><span class="line">    .<span class="property">to</span>.<span class="property">be</span>.<span class="title function_">an</span>(<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">    .<span class="property">and</span>.<span class="property">to</span>.<span class="property">include</span>.<span class="title function_">keys</span>(<span class="string">&#x27;person&#x27;</span>, <span class="string">&#x27;location&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">wrap</span>(<span class="title class_">Cypress</span>.<span class="title function_">env</span>(<span class="string">&#x27;person&#x27;</span>))</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.keys&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.within&#x27;</span>, <span class="number">10</span>, <span class="number">99</span>)</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;**name:** &#x27;</span> + <span class="title class_">Cypress</span>.<span class="title function_">env</span>(<span class="string">&#x27;person&#x27;</span>).<span class="property">name</span>)</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;**city:** &#x27;</span> + <span class="title class_">Cypress</span>.<span class="title function_">env</span>(<span class="string">&#x27;location&#x27;</span>).<span class="property">city</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// save a screenshot of the test runner</span></span><br><span class="line">  <span class="comment">// to show what the env values were</span></span><br><span class="line">  cy.<span class="title function_">screenshot</span>(<span class="string">&#x27;env&#x27;</span>, &#123; <span class="attr">capture</span>: <span class="string">&#x27;runner&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I ran the test locally and it shows the expected values from the <code>cypress.json</code> file</p><p><img src="../images/secrets-to-env/env.png" alt="Cypress checked the env val"></p><p>To better separate Cypress own configuration values from the user&#39;s own values, you could move the <code>env</code> object from <code>cypress.json</code> to <code>cypress.env.json</code> file.</p><figure class="highlight json"><figcaption><span>cypress.env.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;person&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Jane&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">25</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;San Francisco&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>The test passes the same way.</p><h2><span id="continuous-integration">Continuous Integration</span></h2><p>Now let&#39;s move to CI. We probably will use different values when running the tests. I will add these values as a <em>secret</em>. GitHub Actions allow multiline secrets, so I add a complete JSON object there.</p><p><img src="../images/secrets-to-env/gh-action-secret.png" alt="Entire JSON we want to use on CI"></p><p>Now let&#39;s write our workflow file. I will skip using my own <a href="https://github.com/bahmutov/cypress-workflows">Cypress reusable workflows</a> and instead will use the plain <a href="https://github.com/cypress-io/github-action">Cypress GitHub Action</a>.</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">tests:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">üõé</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Write</span> <span class="string">the</span> <span class="string">cypress.env.json</span> <span class="string">file</span> <span class="string">üìù</span></span><br><span class="line">        <span class="comment"># use quotes around the secret, as its value</span></span><br><span class="line">        <span class="comment"># is simply inserted as a string into the command</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &#x27;$&#123;&#123; secrets.CYPRESS_ENV_CI &#125;&#125;&#x27; &gt; cypress.env.json</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span> <span class="string">üöÄ</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># you can use Cypress Dashboard to store the screenshots</span></span><br><span class="line">      <span class="comment"># or store them on GitHub and download the zip file</span></span><br><span class="line">      <span class="comment"># https://github.com/actions/upload-artifact</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Save</span> <span class="string">screenshots</span> <span class="string">üñº</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v3</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">always()</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">cypress-screenshots</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">cypress/screenshots</span></span><br></pre></td></tr></table></figure><p>As you can see, we echo the secret&#39;s value and redirect it to the &quot;cypress.env.json&quot; file, overwriting the existing file. Then we run the tests and save the screenshots folder produced by the tests. A typical run finishes successfully.</p><p><img src="../images/secrets-to-env/run.png" alt="GitHub Actions run"></p><p>We download the zip archive with the screenshots by clicking on it. The Test Runner shows the values from the CI secret were used in the test.</p><p><img src="../images/secrets-to-env/ci.png" alt="The test received the values from the secrets JSON"></p><p>Pretty sweet.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s say you need to pass some values to Cypress tests. You should use &lt;a href=&quot;https://on.cypress.io/environment-variables&quot;&gt;Cypress
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>A Quick React Component Test</title>
    <link href="https://glebbahmutov.com/blog/quick-click/"/>
    <id>https://glebbahmutov.com/blog/quick-click/</id>
    <published>2022-05-05T04:00:00.000Z</published>
    <updated>2022-05-05T01:05:45.311Z</updated>
    
    <content type="html"><![CDATA[<p>I laid <a href="/blog/my-vision-for-component-tests/" title="My Vision for Component Tests in Cypress">My Vision for Component Tests in Cypress</a> in Cypress a long time ago. The first public presentation about End-to-End + Component test combination was made in the presentation <a href="https://slides.com/bahmutov/assertjs">The Shape Of Testing Pyramid</a> at AssertJS in February of 2018, ughh 4 years ago. Where did the time go? Where is Cypress v10 (aka Cypress X) with full production component testing? I don&#39;t know.</p><p>But here is a user asking about it on <a href="https://on.cypress.io/discord">Cypress Discord channel</a></p><p><img src="../images/quick-click/question.png" alt="How to confirm the button was really clicked?"></p><p>Let me answer this question in the strongest way - but creating a working example.</p><blockquote class="pullquote"><p>üéÅ You can find my source code in the repository <a href="https://github.com/bahmutov/click-returns-true">bahmutov&#x2F;click-returns-true</a>.</p></blockquote><p>I have created a new project using the following commands:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># make a new folder</span><br><span class="line">$ mkdir click-returns-true</span><br><span class="line">$ cd click-returns-true</span><br><span class="line"># create a new Git repository</span><br><span class="line">$ git init</span><br><span class="line"># initialize a new NPM project</span><br><span class="line">$ npm init --yes</span><br><span class="line"># add Cypress and Prettier</span><br><span class="line">$ npm i -D cypress prettier</span><br><span class="line">+ cypress@9.6.0</span><br><span class="line">+ prettier@2.6.2</span><br></pre></td></tr></table></figure><p>I added Cypress and Prettier as dev dependencies. I love <a href="/blog/configure-prettier-in-vscode/" title="using Prettier">using Prettier</a>. <strong>Note:</strong> the coming Cypress v10 release might change how the application looks and runs, this blog post uses v9. I hope the post shows the main principles that still apply.</p><p>Ok, we need to execute a React component. So I will add React, Read DOM, and react-scripts dependencies.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -S react@17 react-dom@17 react-scripts</span><br><span class="line">+ react@17.0.2</span><br><span class="line">+ react-dom@17.0.2</span><br><span class="line">+ react-scripts@5.0.1</span><br></pre></td></tr></table></figure><p>I add <code>browserslist</code> field to the <code>package.json</code> file</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;click-returns-true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^17.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;react-dom&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^17.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;react-scripts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.0.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@cypress/react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.12.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@cypress/webpack-dev-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.8.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cypress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^9.6.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prettier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.6.2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;browserslist&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;&gt; 1%&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;last 2 versions&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;not ie &lt;= 11&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Question:</strong> why did I not use Yarn? In this example it does not matter if I use <code>npm</code> or <code>yarn</code> to install NPM dependencies.</p><p>Now I need to follow the Cypress <a href="https://on.cypress.io/component-testing">component testing</a> guide to install specific dependencies for mounting React components inside Cypress. I suggest following the examples in <a href="https://github.com/cypress-io/cypress-component-testing-examples">cypress-io&#x2F;cypress-component-testing-examples</a>. In particular, I installed two dev dependencies:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D @cypress/react @cypress/webpack-dev-server</span><br><span class="line">+ @cypress/react@5.12.4</span><br><span class="line">+ @cypress/webpack-dev-server@1.8.4</span><br></pre></td></tr></table></figure><p>Super, and here is my modified plugin file that uses the React dev server provided by the <code>react-scripts</code></p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> injectDevServer = <span class="built_in">require</span>(<span class="string">&#x27;@cypress/react/plugins/react-scripts&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">injectDevServer</span>(on, config)</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now let&#39;s test our React component. I write the following component spec file</p><figure class="highlight js"><figcaption><span>cypress/component/click.spec.ct.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&#x27;@cypress/react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">&#123; onClick &#125;</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;renders an active base button&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">mount</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;cy.stub().as(</span>&#x27;<span class="attr">click</span>&#x27;)&#125;&gt;</span>Click me<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let&#39;s open the Cypress in component testing mode</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx cypress open-ct</span><br></pre></td></tr></table></figure><p>Click on the &quot;click.spec.ct.js&quot; name shown in the browser file explorer. You see the button component running as a mini React web application.</p><p><img src="../images/quick-click/button.png" alt="The mounted Button component inside a browser"></p><p>A cool thing about React component testing in Cypress - the React DevTools are mounted automatically to make inspecting the complex components a breeze.</p><p><img src="../images/quick-click/tools.png" alt="The Button component inspected using included React DevTools"></p><h1><span id="the-stub">The stub</span></h1><p>Wait, did we just pass a stub reference from the spec code to the component? Yes we did</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Button</span> onClick=&#123;cy.<span class="title function_">stub</span>().<span class="title function_">as</span>(<span class="string">&#x27;click&#x27;</span>)&#125;&gt;<span class="title class_">Click</span> me&lt;/<span class="title class_">Button</span>&gt;</span><br></pre></td></tr></table></figure><p>This is the most powerful feature in the Cypress test runner. In the E2E and component tests, you can access the actual application and spy &#x2F; stub its methods, or browser APIs, because the test spec is running inside the browser itself, and not just sending browser automation commands. Read my blog post <a href="/blog/cypress-vs-other-test-runners/" title="Cypress vs Other Test Runners">Cypress vs Other Test Runners</a> for more information.</p><p>Ok, let&#39;s click on the button. There is <a href="https://on.cypress.io/click">cy.click</a> command, and all Cypress commands used normally during E2E tests work in the component tests (except the <code>cy.visit</code>, since you don&#39;t really visit an URL in a component test)</p><figure class="highlight js"><figcaption><span>cypress/component/click.spec.ct.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&#x27;@cypress/react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">&#123; onClick &#125;</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;renders an active base button&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">mount</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;cy.stub().as(</span>&#x27;<span class="attr">click</span>&#x27;)&#125;&gt;</span>Click me<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@click&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledOnce&#x27;</span>).<span class="title function_">invoke</span>(<span class="string">&#x27;resetHistory&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">click</span>().<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@click&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledTwice&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/quick-click/button-click.gif" alt="Confirming the Button component calls the passed prop on click"></p><p>Yup, this React component really calls the prop <code>onClick</code> when the user clicks the HTML element <code>button</code>.</p><h2><span id="disabled-button">Disabled button</span></h2><p>What happens if the HTML button is disabled? Does the <code>onClick</code> event handler fire? Let&#39;s try it out. By default <a href="https://on.cypress.io/click">cy.click</a> requires the button to be <a href="https://on.cypress.io/interacting-with-elements#Actionability">actionable</a> - being visible, enabled, and that sort of thing. Thus we need to use <code>.click(&#123; force: true &#125;)</code> to skip those checks.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&#x27;@cypress/react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">&#123; onClick, disabled &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">disabled</span>=<span class="string">&#123;disabled&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Click me</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;does not call the handler on the disabled button&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">mount</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">disabled</span>=<span class="string">&#123;true&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;cy.stub().as(</span>&#x27;<span class="attr">click</span>&#x27;)&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      Click me</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span>,</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">click</span>(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@click&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.have.been.called&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/quick-click/disabled.png" alt="Confirming the click event is ignored on a disabled button"></p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/my-vision-for-component-tests/" title="My Vision for Component Tests in Cypress">My Vision for Component Tests in Cypress</a></li><li><a href="/blog/react-app-actions/" title="Control React Applications From Cypress Tests">Control React Applications From Cypress Tests</a></li><li><a href="/blog/react-state-from-e2e-tests/" title="Access React Components From Cypress E2E Tests">Access React Components From Cypress E2E Tests</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I laid &lt;a href=&quot;/blog/my-vision-for-component-tests/&quot; title=&quot;My Vision for Component Tests in Cypress&quot;&gt;My Vision for Component Tests in C
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Spy On A Complex Method Call</title>
    <link href="https://glebbahmutov.com/blog/spy-on-complex-method-call/"/>
    <id>https://glebbahmutov.com/blog/spy-on-complex-method-call/</id>
    <published>2022-05-04T04:00:00.000Z</published>
    <updated>2022-05-04T13:55:08.321Z</updated>
    
    <content type="html"><![CDATA[<p>Here is a question that came from (deprecated) Cypress <a href="https://gitter.im/cypress-io/cypress">Gitter chat channel</a>. The user provided a repo with a reproducible test that tried to assert that <code>window.dataLayer.push</code> method was called with an object with the field <code>event: lead</code>. This is just one particular call among hundreds of calls the application is making to track its various events.</p><p><img src="../images/spy-data/calls.png" alt="We are trying to confirm this particular call amongst many others"></p><p>The user is struggling to write the correct test and asked me to help.</p><h2><span id="the-original-test">The original test</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;testin datalayer&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">before</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">intercept</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;**mule/customer/clicktocall&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;clicktocall&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;https://flsit.vtr.lla.digital/&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">wait</span>(<span class="number">5000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;wait &amp; assert&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">window</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-floating-button&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-click-to-call-form input&#x27;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">type</span>(<span class="string">&#x27;111111111&#x27;</span>)</span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-click-to-call-form input&#x27;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">type</span>(<span class="string">&#x27;9872819281&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-button.llad-contact-info-form__button button&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">      cy.<span class="title function_">wait</span>(<span class="string">&#x27;@clicktocall&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      cy.<span class="title function_">wait</span>(<span class="number">10000</span>)</span><br><span class="line">      <span class="comment">// find the index of the argument that corresponds to this event</span></span><br><span class="line">      <span class="comment">// cy.wrap(&#x27;@open&#x27;).should((res) =&gt; &#123;</span></span><br><span class="line">      <span class="comment">//   const index = res.args.findIndex((i) =&gt; i[0].event == &#x27;lead&#x27;);</span></span><br><span class="line">      <span class="comment">//   cy.log(index);</span></span><br><span class="line">      <span class="comment">// &#125;);</span></span><br><span class="line">      <span class="keyword">const</span> data = cy.<span class="title function_">spy</span>(win.<span class="property">dataLayer</span>, <span class="string">&#x27;push&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;dataL&#x27;</span>)</span><br><span class="line">      cy.<span class="title function_">log</span>(data.<span class="property">args</span>)</span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;@dataL&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        cy.<span class="title function_">log</span>(res.<span class="property">args</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>A few observations about this test right away:</p><ul><li>the base URL is hardcoded in the test, which is an anti-pattern. I prefer setting the base URL in the <code>cypress.json</code> file, watch the video <a href="https://www.youtube.com/watch?v=f5UaXuAc52c">How to correctly use the baseUrl to visit a site in Cypress</a></li><li>there are several hard-coded <code>cy.wait(ms)</code> commands, probably to let the page load the tracking library and create the <code>window.dataLayer</code> object. We can specifically wait for the <code>window.dataLayer</code> to exist, avoiding the hard-coded waits</li></ul><h2><span id="updated-test">Updated test</span></h2><p>Let&#39;s start by moving the base URL to the <code>cypress.json</code> file and removing the <code>cy.wait(ms)</code> commands. Instead we will wait for the <code>window</code> object to have a property <code>dataLayer</code> with the method <code>push</code>. See the inline code comments for the full explanation and links to more documentation.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;testing datalayer&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">before</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">intercept</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;**mule/customer/clicktocall&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;clicktocall&#x27;</span>)</span><br><span class="line">    <span class="comment">// cy.visit command yields the window object</span></span><br><span class="line">    <span class="comment">// and cy.its command retries until the &quot;dataLayer&quot; property is found</span></span><br><span class="line">    <span class="comment">// then we check if there is a method &quot;push&quot; on that object</span></span><br><span class="line">    <span class="comment">// https://on.cypress.io/visit</span></span><br><span class="line">    <span class="comment">// https://on.cypress.io/its</span></span><br><span class="line">    <span class="comment">// https://glebbahmutov.com/cypress-examples/commands/assertions.html</span></span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">its</span>(<span class="string">&#x27;dataLayer&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;respondTo&#x27;</span>, <span class="string">&#x27;push&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;wait &amp; assert&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-floating-button&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-click-to-call-form input&#x27;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">type</span>(<span class="string">&#x27;111111111&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-click-to-call-form input&#x27;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">type</span>(<span class="string">&#x27;9872819281&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-button.llad-contact-info-form__button button&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">    cy.<span class="title function_">wait</span>(<span class="string">&#x27;@clicktocall&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/spy-data/datalayer.gif" alt="The updated test waits only until the window.dataLayer property is found"></p><h2><span id="spying">Spying</span></h2><p>Ok, what about our spy? Sure, let&#39;s add a spy on the method <code>push</code> of the <code>dataLayer</code> object. The most interesting thing here is how to check if the spy function was called by the application. We have complex calls, and are only interested in the call where the first argument is an object with property <code>event: &quot;lead&quot;</code>. Luckily, Chai-Sinon assertions included with Cypress provide a way to use a custom matcher to check the calls.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;testing datalayer&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">before</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">intercept</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;**mule/customer/clicktocall&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;clicktocall&#x27;</span>)</span><br><span class="line">    <span class="comment">// cy.visit command yields the window object</span></span><br><span class="line">    <span class="comment">// and cy.its command retries until the &quot;dataLayer&quot; property is found</span></span><br><span class="line">    <span class="comment">// then we check if there is a method &quot;push&quot; on that object</span></span><br><span class="line">    <span class="comment">// https://on.cypress.io/visit</span></span><br><span class="line">    <span class="comment">// https://on.cypress.io/its</span></span><br><span class="line">    <span class="comment">// https://glebbahmutov.com/cypress-examples/commands/assertions.html</span></span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      .<span class="title function_">its</span>(<span class="string">&#x27;dataLayer&#x27;</span>)</span><br><span class="line">      .<span class="title function_">should</span>(<span class="string">&#x27;respondTo&#x27;</span>, <span class="string">&#x27;push&#x27;</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">dataLayer</span>) =&gt;</span> &#123;</span><br><span class="line">        cy.<span class="title function_">spy</span>(dataLayer, <span class="string">&#x27;push&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;dataL&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;wait &amp; assert&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-floating-button&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-click-to-call-form input&#x27;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">type</span>(<span class="string">&#x27;111111111&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-click-to-call-form input&#x27;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">type</span>(<span class="string">&#x27;9872819281&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-button.llad-contact-info-form__button button&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">    cy.<span class="title function_">wait</span>(<span class="string">&#x27;@clicktocall&#x27;</span>)</span><br><span class="line">    <span class="comment">// confirm there was a call that satisfies the custom predicate function</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">isLead</span> = (<span class="params">d</span>) =&gt; d.<span class="property">event</span> === <span class="string">&#x27;lead&#x27;</span></span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;@dataL&#x27;</span>).<span class="title function_">should</span>(</span><br><span class="line">      <span class="string">&#x27;have.been.calledWith&#x27;</span>,</span><br><span class="line">      <span class="title class_">Cypress</span>.<span class="property">sinon</span>.<span class="title function_">match</span>(isLead, <span class="string">&#x27;lead event&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>For more Chai-Sinon assertion examples, see my <a href="https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html"><code>cy.stub</code>, <code>cy.spy</code>, and <code>cy.clock</code> examples</a>. For now, the test works, even if it is pretty noisy - there are lots of <code>dataLayer.push</code> calls!</p><p><img src="../images/spy-data/assert-called.gif" alt="The application does call dataLayer.push with the lead event"></p><h2><span id="cut-the-noise">Cut the noise</span></h2><p>We only want to be informed about <code>dataLayer.push(lead)</code> events, not every call. Unfortunately, the built-in Sinon mechanism to create a targeted spy <code>cy.spy(dataLayer, &#39;push&#39;).withArgs(&#123; event: &#39;lead&#39; &#125;).as(&#39;lead&#39;)</code> expects the exact argument match, not part of the object. We could use the same match via predicate when creating a spy:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">spy</span>(dataLayer, <span class="string">&#x27;push&#x27;</span>)</span><br><span class="line">  .<span class="title function_">withArgs</span>(<span class="title class_">Cypress</span>.<span class="property">sinon</span>.<span class="title function_">match</span>(isLead))</span><br><span class="line">  .<span class="title function_">as</span>(<span class="string">&#x27;lead&#x27;</span>)</span><br></pre></td></tr></table></figure><p>It does simplify the assertion</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;@lead&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Unfortunately, this still records <em>other</em> calls to <code>dataLayer.push</code> method ‚òπÔ∏è</p><p><img src="../images/spy-data/many-spies.png" alt="The Cypress Command Log still shows all spy calls"></p><p>We really need to avoid using <code>cy.spy</code> for calls we are not interested in. We can do this by constructing a &quot;plain&quot; Sinon.js stub function avoiding the <code>cy.stub</code> or <code>cy.spy</code> command to avoid logging <em>every</em> call. Here is the entire test, including printing the event data to the Command Log.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;testing datalayer&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">isLead</span> = (<span class="params">d</span>) =&gt; d.<span class="property">event</span> === <span class="string">&#x27;lead&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">before</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">intercept</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;**mule/customer/clicktocall&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;clicktocall&#x27;</span>)</span><br><span class="line">    <span class="comment">// cy.visit command yields the window object</span></span><br><span class="line">    <span class="comment">// and cy.its command retries until the &quot;dataLayer&quot; property is found</span></span><br><span class="line">    <span class="comment">// then we check if there is a method &quot;push&quot; on that object</span></span><br><span class="line">    <span class="comment">// https://on.cypress.io/visit</span></span><br><span class="line">    <span class="comment">// https://on.cypress.io/its</span></span><br><span class="line">    <span class="comment">// https://glebbahmutov.com/cypress-examples/commands/assertions.html</span></span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      .<span class="title function_">its</span>(<span class="string">&#x27;dataLayer&#x27;</span>)</span><br><span class="line">      .<span class="title function_">should</span>(<span class="string">&#x27;respondTo&#x27;</span>, <span class="string">&#x27;push&#x27;</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">dataLayer</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// we need to call the real method on the dataLayer object</span></span><br><span class="line">        <span class="keyword">const</span> realPush = dataLayer.<span class="property">push</span>.<span class="title function_">bind</span>(dataLayer)</span><br><span class="line">        <span class="comment">// and our stub function to be able to check it later</span></span><br><span class="line">        <span class="keyword">const</span> leadStub = cy.<span class="title function_">stub</span>().<span class="title function_">as</span>(<span class="string">&#x27;lead&#x27;</span>)</span><br><span class="line">        <span class="comment">// use &quot;plain&quot; Sinon stub to replace dataLayer.push method</span></span><br><span class="line">        <span class="title class_">Cypress</span>.<span class="property">sinon</span>.<span class="title function_">stub</span>(dataLayer, <span class="string">&#x27;push&#x27;</span>).<span class="title function_">callsFake</span>(<span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// if this is a lead event, call the Cypress stub</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="title function_">isLead</span>(args[<span class="number">0</span>])) &#123;</span><br><span class="line">            <span class="title function_">leadStub</span>(...args)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// and always call the real dataLayer.push</span></span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">realPush</span>(...args)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;wait &amp; assert&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-floating-button&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-click-to-call-form input&#x27;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">type</span>(<span class="string">&#x27;111111111&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-click-to-call-form input&#x27;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">type</span>(<span class="string">&#x27;9872819281&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-button.llad-contact-info-form__button button&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">    cy.<span class="title function_">wait</span>(<span class="string">&#x27;@clicktocall&#x27;</span>)</span><br><span class="line">    <span class="comment">// confirm the cy.stub was called</span></span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;@lead&#x27;</span>)</span><br><span class="line">      .<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">      <span class="comment">// and grab its first call&#x27;s arguments</span></span><br><span class="line">      .<span class="title function_">its</span>(<span class="string">&#x27;firstCall.args&#x27;</span>)</span><br><span class="line">      <span class="comment">// and log them to Cypress Command Log</span></span><br><span class="line">      .<span class="title function_">then</span>(<span class="title class_">JSON</span>.<span class="property">stringify</span>)</span><br><span class="line">      .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test is beautiful ü•∞ and takes only four seconds üèé instead of 20+ seconds of the original test with hard-coded waits.</p><p><img src="../images/spy-data/spy-stub.gif" alt="Logging only the method call we are interested in"></p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/spy-on-dom-methods/" title="Spy On DOM Methods And Properties">Spy On DOM Methods And Properties</a></li><li><a href="https://on.cypress.io/stubs-spies-and-clocks">Cypress Stubs, Spies, and Clocks Guide</a></li><li>my <a href="https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html"><code>cy.stub</code>, <code>cy.spy</code>, and <code>cy.clock</code> examples</a></li><li>find more stubbing and spying examples by searching using my <a href="https://cypress.tips/search">cypress.tips&#x2F;search</a> page</li><li><a href="https://sinonjs.org/">Sinon.js documentation</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Here is a question that came from (deprecated) Cypress &lt;a href=&quot;https://gitter.im/cypress-io/cypress&quot;&gt;Gitter chat channel&lt;/a&gt;. The user p
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Send Data From The Application To The Cypress Test</title>
    <link href="https://glebbahmutov.com/blog/send-data-to-the-test/"/>
    <id>https://glebbahmutov.com/blog/send-data-to-the-test/</id>
    <published>2022-05-03T04:00:00.000Z</published>
    <updated>2022-05-03T15:49:09.180Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine an application where the user fills a form. The application takes the form, cleans up the entered data, and sends the form to the backend API. The <code>public/app.js</code> has the following code</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span></span><br><span class="line">  .<span class="title function_">querySelector</span>(<span class="string">&#x27;form input[type=submit]&#x27;</span>)</span><br><span class="line">  .<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>()</span><br><span class="line">    <span class="comment">// grab the form element and form the data to be sent</span></span><br><span class="line">    <span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>(form)</span><br><span class="line">    <span class="keyword">const</span> data = &#123;&#125;</span><br><span class="line">    formData.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">      data[key] = value</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (data.<span class="property">phone</span>) &#123;</span><br><span class="line">      <span class="comment">// clean up the phone number by removing all non-digit characters</span></span><br><span class="line">      data.<span class="property">phone</span> = data.<span class="property">phone</span>.<span class="title function_">replace</span>(<span class="regexp">/[^\d]/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// send the Ajax request to the server</span></span><br><span class="line">    <span class="keyword">const</span> request = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    request.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/api/v1/message&#x27;</span>)</span><br><span class="line">    request.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>)</span><br><span class="line">    request.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data))</span><br><span class="line">    request.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (request.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="comment">// all good</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">alert</span>(<span class="string">&#x27;Error: &#x27;</span> + request.<span class="property">status</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>üéÅ You can find the source code for this blog post in the repository <a href="https://github.com/bahmutov/cypress-track-events">bahmutov&#x2F;cypress-track-events</a>.</p></blockquote><p>Let&#39;s write a test. We need to visit the page, type the test data into the input fields, and confirm the outgoing network call. Because our backend API is not ready yet, we will stub the server&#39;s response.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;sends a form&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">intercept</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/api/v1/message&#x27;</span>, &#123;&#125;).<span class="title function_">as</span>(<span class="string">&#x27;post&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">within</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=name]&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;John Doe&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=email]&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;joe@doe.com&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=phone]&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;+1 (555) 555-5555&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=message]&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;input[type=submit]&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// confirm the network request was sent correctly</span></span><br><span class="line">  <span class="comment">// hmm, how do we verify the request as sent by the application?</span></span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@post&#x27;</span>).<span class="title function_">its</span>(<span class="string">&#x27;request.body&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">0</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/send-data-to-the-test/test1.gif" alt="The above test enters the data into the form and submits it"></p><p>We hit a slight problem. The application modifies the data before sending it. Of course, the test should know exactly what the expected data is, but let&#39;s pretend we do not know it. How do we check the network call?</p><p>When Cypress controls the browser, the application runs in an iframe, and Cypress sets a property <code>Cypress</code> on the application&#39;s window object. Thus the application can &quot;know&quot; if it is running inside a Cypress test by checking that property:</p><figure class="highlight js"><figcaption><span>public/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (data.<span class="property">phone</span>) &#123;</span><br><span class="line">  <span class="comment">// clean up the phone number by removing all non-digit characters</span></span><br><span class="line">  data.<span class="property">phone</span> = data.<span class="property">phone</span>.<span class="title function_">replace</span>(<span class="regexp">/[^\d]/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">Cypress</span>) &#123;</span><br><span class="line">  <span class="comment">// Hurray, we are being tested!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In our case, the application can pass to the test runner the data object it is about to send to the backend. If the application finds the <code>track()</code> method on the <code>Cypress</code> object, then it would call it with the constructed <code>data</code> object.</p><figure class="highlight js"><figcaption><span>public/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (data.<span class="property">phone</span>) &#123;</span><br><span class="line">  <span class="comment">// clean up the phone number by removing all non-digit characters</span></span><br><span class="line">  data.<span class="property">phone</span> = data.<span class="property">phone</span>.<span class="title function_">replace</span>(<span class="regexp">/[^\d]/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">Cypress</span>) &#123;</span><br><span class="line">  <span class="comment">// Hurray, we are being tested!</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">Cypress</span>.<span class="property">track</span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">Cypress</span>.<span class="title function_">track</span>(<span class="string">&#x27;form&#x27;</span>, data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using the modern ES6 <a href="https://github.com/tc39/proposal-optional-chaining">optional chaining</a> syntax supported by all modern browsers, we can safely pass the data using a one-liner (with lots of comments):</p><figure class="highlight js"><figcaption><span>public/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (data.<span class="property">phone</span>) &#123;</span><br><span class="line">  <span class="comment">// clean up the phone number by removing all non-digit characters</span></span><br><span class="line">  data.<span class="property">phone</span> = data.<span class="property">phone</span>.<span class="title function_">replace</span>(<span class="regexp">/[^\d]/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if we are running the application inside a Cypress browser test</span></span><br><span class="line"><span class="comment">// send the internal data to be confirmed or used by the test</span></span><br><span class="line"><span class="comment">// We are using optional chaining operator &quot;?.&quot; to safely</span></span><br><span class="line"><span class="comment">// access each property if it exists (or do nothing if it doesn&#x27;t)</span></span><br><span class="line"><span class="comment">// including the last call to the &quot;track()&quot; method if it exists</span></span><br><span class="line"><span class="comment">// See https://github.com/tc39/proposal-optional-chaining</span></span><br><span class="line"><span class="variable language_">window</span>?.<span class="property">Cypress</span>?.<span class="property">track</span>?.(<span class="string">&#x27;form&#x27;</span>, data)</span><br></pre></td></tr></table></figure><p>Of course, we need to create the <code>Cypress.track</code> method ourselves. We also need to clean it up to avoid accidentally leaking it from one test to another. Using <code>beforeEach</code> and <code>afterEach</code> hooks works well for this purpose.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">Cypress</span>.<span class="property">track</span> = cy.<span class="title function_">stub</span>().<span class="title function_">as</span>(<span class="string">&#x27;track&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">afterEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// clean up Cypress.track property</span></span><br><span class="line">  <span class="keyword">delete</span> <span class="title class_">Cypress</span>.<span class="property">track</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Now we can finish our test. We can confirm the <a href="https://on.cypress.io/stub">stub</a> function <code>Cypress.track</code> was called with the first argument &quot;form&quot;. From the first such call, we can grab the <em>second</em> argument, which should be an object. We can confirm some properties of the object, and then also use it to confirm what the application sent to the server.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;sends the expected form&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">intercept</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/api/v1/message&#x27;</span>, &#123;&#125;).<span class="title function_">as</span>(<span class="string">&#x27;post&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">within</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=name]&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;John Doe&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=email]&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;joe@doe.com&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=phone]&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;+1 (555) 555-5555&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=message]&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;input[type=submit]&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// hmm, how do we verify the request as sent by the application?</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@track&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.calledWith&#x27;</span>, <span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;firstCall.args.1&#x27;</span>)</span><br><span class="line">    <span class="comment">// you can confirm some properties of the sent data</span></span><br><span class="line">    <span class="comment">// Tip: use https://github.com/bahmutov/cy-spok</span></span><br><span class="line">    <span class="comment">// for similar object and array assertions</span></span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;Hello World&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data))</span><br><span class="line">      <span class="comment">// confirm the network request was sent correctly</span></span><br><span class="line">      cy.<span class="title function_">wait</span>(<span class="string">&#x27;@post&#x27;</span>)</span><br><span class="line">        .<span class="title function_">its</span>(<span class="string">&#x27;request.body&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">0</span> &#125;)</span><br><span class="line">        .<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/send-data-to-the-test/test2.gif" alt="Receive the data from the application and use it to confirm the network call"></p><p><strong>Tip:</strong> use <a href="https://github.com/bahmutov/cy-spok">cy-spok</a> to confirm properties of any object, thank me later.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine an application where the user fills a form. The application takes the form, cleans up the entered data, and sends the form to the
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Log in Using Collected Words</title>
    <link href="https://glebbahmutov.com/blog/login-words/"/>
    <id>https://glebbahmutov.com/blog/login-words/</id>
    <published>2022-05-02T04:00:00.000Z</published>
    <updated>2022-05-03T15:49:35.348Z</updated>
    
    <content type="html"><![CDATA[<p>Have you seen web sites that show you a list of random words to write down when signing up? When you go to log in, the site shows the same random words with some words missing. You need to enter the missing words exactly as they appeared, and this is how you log in. Here is a Cypress test showing this login in action:</p><p><img src="../images/login-words/words.gif" alt="Log in using words application test"></p><p>Let&#39;s see how the Cypress test can &quot;remember&quot; the words and type them at the correct positions. The application has two screens: the first one shows the words to find and save, the second one shows the input elements instead of some words. We need to look up the saved word at that position and enter it.</p><blockquote class="pullquote"><p>üéÅ You can find the source code for this blog post in the repository <a href="https://github.com/bahmutov/cypress-login-words">bahmutov&#x2F;cypress-login-words</a>. You can also watch the explanation in the video <a href="https://youtu.be/sUHs2zLFjIM">Log In Using Words</a>.</p></blockquote><h2><span id="login-fails">Login fails</span></h2><p>First, let&#39;s confirm the application <em>does not let</em> log in with incorrect words. On the second screen we can simply type &quot;word&quot; + index number.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;does not log in with wrong words&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">    <span class="comment">// wait 1 second for clarity</span></span><br><span class="line">    .<span class="title function_">wait</span>(<span class="number">1000</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;I remember&#x27;</span>, &#123; <span class="attr">matchCase</span>: <span class="literal">false</span> &#125;).<span class="title function_">click</span>()</span><br><span class="line">  <span class="comment">// the section changes</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;section#login&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;input[type=text]&#x27;</span>).<span class="title function_">each</span>(<span class="function">(<span class="params">$input, k</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// take the jQuery element $input</span></span><br><span class="line">    <span class="comment">// and wrap it using Cypress cy.wrap command</span></span><br><span class="line">    <span class="comment">// now we can correctly chain Cypress commands</span></span><br><span class="line">    cy.<span class="title function_">wrap</span>($input).<span class="title function_">type</span>(<span class="string">&#x27;word&#x27;</span> + (k + <span class="number">1</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;#login-button&#x27;</span>, <span class="string">&#x27;Log in&#x27;</span>, &#123; <span class="attr">matchCase</span>: <span class="literal">false</span> &#125;).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;#login-button&#x27;</span>, <span class="string">&#x27;Try again&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/login-words/cannot-random.gif" alt="The test types random strings and fails to log in"></p><p>We are using my favorite Cypress commands <a href="https://on.cypress.io/contains">cy.contains</a>, <a href="https://on.cypress.io/get">cy.get</a>, <a href="https://on.cypress.io/each">cy.each</a>, and <a href="https://on.cypress.io/wrap">cy.wrap</a>.</p><blockquote class="pullquote"><p>üìö You can find lots of Cypress command examples at my site <a href="https://glebbahmutov.com/cypress-examples">https://glebbahmutov.com/cypress-examples</a>. It has a good search that quickly shows my practical Cypress use examples.</p></blockquote><h2><span id="save-the-words">Save the words</span></h2><p>In order for the end-to-end test to log in correctly, the test needs to save the shown words. We can store the words in a regular array.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;remembers the words&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">    <span class="comment">// wait 1 second for clarity</span></span><br><span class="line">    .<span class="title function_">wait</span>(<span class="number">1000</span>)</span><br><span class="line">  <span class="comment">// remember the words from the list</span></span><br><span class="line">  <span class="keyword">const</span> words = []</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#show-words .words li&#x27;</span>)</span><br><span class="line">    .<span class="title function_">each</span>(<span class="function">(<span class="params">$li</span>) =&gt;</span> &#123;</span><br><span class="line">      words.<span class="title function_">push</span>($li.<span class="title function_">text</span>())</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// we can use the data from the page</span></span><br><span class="line">      <span class="comment">// in cy.then callback function</span></span><br><span class="line">      cy.<span class="title function_">log</span>(words.<span class="title function_">join</span>(<span class="string">&#x27;, &#x27;</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/login-words/store-words.png" alt="The test grabs the shown words from the page"></p><p>We store the extracted words in the local variable <code>words</code>. After the <code>cy.each</code> command finishes, that array is filled with words. We can use the array <em>after</em> <code>cy.each</code> command by using <a href="https://on.cypress.io/then">cy.then</a> callback.</p><blockquote class="pullquote"><p>ü§î Are you not sure why and how Cypress executes its commands? Read my blog post <a href="/blog/visualize-cypress-command-queue/" title="Visualize Cypress Command Queue">Visualize Cypress Command Queue</a>.</p></blockquote><h2><span id="type-the-saved-words">Type the saved words</span></h2><p>Now that we have the words in the correct order, we need to look at the list shown on the second page. Some of the list items are <code>&lt;input&gt;</code> elements and we need to enter the correct string from the array of strings. Here is how we look at each <code>li</code> item, and use <code>cy.each</code> command to check if there is an input element inside. We are using the jQuery <code>.find</code> method to synchronously see if there is <code>&lt;li&gt;&lt;input&gt;...&lt;/li&gt;</code> situation. If yes, we need to type the word at index <code>k</code> using a Cypress command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;#login .words li&#x27;</span>).<span class="title function_">each</span>(<span class="function">(<span class="params">$li, k</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> $input = $li.<span class="title function_">find</span>(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> ($input.<span class="property">length</span>) &#123;</span><br><span class="line">    cy.<span class="title function_">wrap</span>($input).<span class="title function_">type</span>(words[k])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Nice!</p><blockquote class="pullquote"><p>üò≥ Wait, isn&#39;t this an example of &quot;Conditional Testing&quot;, which is an anti-pattern? Yes, we are looking at the page to decide what the test needs to do. Sometimes it is necessary, so I have <a href="https://glebbahmutov.com/cypress-examples/recipes/conditional-testing.html">a few recipes how to handle it</a>.</p></blockquote><p>Here is the full test that saves and types the words, and checks if the page transitions are successful.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;logs in&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">    <span class="comment">// wait 1 second for clarity</span></span><br><span class="line">    .<span class="title function_">wait</span>(<span class="number">1000</span>)</span><br><span class="line">  <span class="comment">// remember the words from the list</span></span><br><span class="line">  <span class="keyword">const</span> words = []</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#show-words .words li&#x27;</span>)</span><br><span class="line">    .<span class="title function_">each</span>(<span class="function">(<span class="params">$li</span>) =&gt;</span> &#123;</span><br><span class="line">      words.<span class="title function_">push</span>($li.<span class="title function_">text</span>())</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// we can use the data from the page</span></span><br><span class="line">      <span class="comment">// in cy.then callback function</span></span><br><span class="line">      cy.<span class="title function_">log</span>(words.<span class="title function_">join</span>(<span class="string">&#x27;, &#x27;</span>))</span><br><span class="line"></span><br><span class="line">      cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;I remember&#x27;</span>, &#123; <span class="attr">matchCase</span>: <span class="literal">false</span> &#125;).<span class="title function_">click</span>()</span><br><span class="line">      <span class="comment">// the section changes</span></span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;section#login&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;#login .words li&#x27;</span>).<span class="title function_">each</span>(<span class="function">(<span class="params">$li, k</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> $input = $li.<span class="title function_">find</span>(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> ($input.<span class="property">length</span>) &#123;</span><br><span class="line">          cy.<span class="title function_">wrap</span>($input).<span class="title function_">type</span>(words[k])</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;#login-button&#x27;</span>, <span class="string">&#x27;Log in&#x27;</span>, &#123; <span class="attr">matchCase</span>: <span class="literal">false</span> &#125;).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;#login-button&#x27;</span>, <span class="string">&#x27;Success&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Beautiful, isn&#39;t it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Have you seen web sites that show you a list of random words to write down when signing up? When you go to log in, the site shows the sam
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Listen To The Message</title>
    <link href="https://glebbahmutov.com/blog/listen-to-the-message/"/>
    <id>https://glebbahmutov.com/blog/listen-to-the-message/</id>
    <published>2022-04-28T04:00:00.000Z</published>
    <updated>2022-04-28T18:15:09.154Z</updated>
    
    <content type="html"><![CDATA[<p>The <code>window.postMessage</code> calls are often used by complex web applications to <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage">send messages</a> between different frames. In this blog post, I will show how to confirm the message was sent when using Cypress end-to-end test runner.</p><h2><span id="the-application">The application</span></h2><blockquote class="pullquote"><p>üéÅ You can find the source code for this blog post in the repository <a href="https://github.com/bahmutov/cypress-window-message-example">bahmutov&#x2F;cypress-window-message-example</a>.</p></blockquote><p>The top document loads its JavaScript and includes an inner iframe element.</p><figure class="highlight html"><figcaption><span>public/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Top window<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;inner.html&quot;</span> <span class="attr">name</span>=<span class="string">&quot;inner&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;top.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><figcaption><span>public/inner.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Inner<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;inner.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The top window is listening to the messages sent by the inner frame</p><figure class="highlight js"><figcaption><span>public/top.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;TOP:&#x27;</span>, <span class="string">&#x27;message&#x27;</span>, e.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;listening for messages&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>public/inner.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;in the inner script&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">top</span>.<span class="title function_">postMessage</span>(<span class="string">&#x27;inner frame is ready&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>We see the console messages when visiting the page in the regular browser</p><p><img src="../images/listen-to-the-message/top-inner.gif" alt="The message sent by the inner frame gets to the top window"></p><p>Let&#39;s confirm this communication works.</p><h2><span id="make-the-application-work">Make the application work</span></h2><p>Let&#39;s visit the page from a Cypress test and see if it works</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;loads and communicates&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Open Cypress with <code>npx cypress open</code> ... and the message from the <code>inner</code> frame never shows up ‚òπÔ∏è</p><p><img src="../images/listen-to-the-message/no-messages.gif" alt="The message from the inner frame gets &quot;lost&quot; somehow"></p><p>The problem happens because the inner frame communicates using <code>window.top.postMessage</code> method call. When Cypress visits the site, it embeds the site in an iframe. Thus the <em>Cypress</em> is the top window, and <em>it</em> receives the message from the <code>inner</code> frame.</p><p><img src="../images/listen-to-the-message/windows.png" alt="The three different windows"></p><p>Hmm, how do we tell the <code>inner</code> iframe to send the message to the correct application window? Luckily, Cypress can rewrite the <code>window.top</code> references on the fly to make sure the message gets to the original intended top <code>window</code> object. In the <code>cypress.json</code> enable the following flag:</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;experimentalSourceRewriting&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Now we see the message sent during the test.</p><p><img src="../images/listen-to-the-message/top-message.gif" alt="The message now gets to the application window"></p><p>Ok, let&#39;s test it.</p><h2><span id="spy-on-the-consolelog-method-call">Spy on the console.log method call</span></h2><p>The top window logs the received messages. Let&#39;s confirm one of the <code>console.log</code> calls prints the message from the inner frame with text &quot;inner frame is ready&quot;. We can spy on the <code>console.log</code> method, see the <a href="https://on.cypress.io/stubs-spies-and-clocks">Stubs, Spies, and Clocks</a> guide.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;spies on console.log call&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">onBeforeLoad</span>(<span class="params">win</span>) &#123;</span><br><span class="line">      cy.<span class="title function_">spy</span>(win.<span class="property">console</span>, <span class="string">&#x27;log&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@log&#x27;</span>).<span class="title function_">should</span>(</span><br><span class="line">    <span class="string">&#x27;have.been.calledWith&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;TOP:&#x27;</span>,</span><br><span class="line">    <span class="title class_">Cypress</span>.<span class="property">sinon</span>.<span class="property">match</span>.<span class="property">string</span>,</span><br><span class="line">    <span class="string">&#x27;inner frame is ready&#x27;</span>,</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Notice the placeholder <code>Cypress.sinon.match.string</code> used during the assertion - we are not interested in the second argument, we only want to find if the <code>console.log</code> was called with <code>(&quot;TOP:&quot;, some string, &quot;inner frame is ready&quot;)</code> parameters. For Sinon spying assertion examples see my <a href="https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html">Spies and stubs examples page</a>. There are several <code>console.log</code> calls made by the application, but we confirm only the one that interests us.</p><p><img src="../images/listen-to-the-message/spy-log.gif" alt="Spying on the console.log test"></p><h2><span id="listening-to-the-windowpostmessage">Listening to the window.postMessage</span></h2><p>What if the top application window does not log the message send by the inner frame? What if we are only interested in the message &quot;inner frame is ready&quot; sent by the inner frame to know that the application is ready to be tested? We can listen to that message from the spec file.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;receives the window messages&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://on.cypress.io/stub</span></span><br><span class="line">  <span class="keyword">const</span> winMessage = cy.<span class="title function_">stub</span>().<span class="title function_">as</span>(<span class="string">&#x27;message&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">onBeforeLoad</span>(<span class="params">win</span>) &#123;</span><br><span class="line">      win.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// call our cy.stub (which is just a function)</span></span><br><span class="line">        <span class="title function_">winMessage</span>(e.<span class="property">data</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// confirm the inner frame sent the ready message</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@message&#x27;</span>).<span class="title function_">should</span>(</span><br><span class="line">    <span class="string">&#x27;have.been.calledOnceWithExactly&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;inner frame is ready&#x27;</span>,</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The command <a href="https://on.cypress.io/stub">cy.stub</a> creates a function that we can call ourselves. In the test above, we call the stub function with the message data, which should be just the string &quot;inner frame is ready&quot;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">win.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// call our cy.stub (which is just a function)</span></span><br><span class="line">  <span class="title function_">winMessage</span>(e.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>By giving our stub an alias, we can conveniently load it again and confirm that at some point it gets called with the expected argument</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// confirm the inner frame sent the ready message</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;@message&#x27;</span>).<span class="title function_">should</span>(</span><br><span class="line">  <span class="string">&#x27;have.been.calledOnceWithExactly&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;inner frame is ready&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="../images/listen-to-the-message/calls-stub.gif" alt="Listening to the window messages and calling our test stub"></p><p>Pretty sweet, isn&#39;t it</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The &lt;code&gt;window.postMessage&lt;/code&gt; calls are often used by complex web applications to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>The Rendered Font</title>
    <link href="https://glebbahmutov.com/blog/rendered-font/"/>
    <id>https://glebbahmutov.com/blog/rendered-font/</id>
    <published>2022-04-26T04:00:00.000Z</published>
    <updated>2022-04-26T14:34:34.936Z</updated>
    
    <content type="html"><![CDATA[<p>This blog post shows another example <a href="/blog/cypress-automation/" title="automation">automation</a> use case in Cypress Test Runner via its <a href="https://github.com/bahmutov/cypress-cdp">Chrome Debugger Protocol</a> connection. Let&#39;s take a page that uses a custom fancy font from Google Fonts site to render the body text. You can find this example page in the repo <a href="https://github.com/bahmutov/fastify-example">bahmutov&#x2F;fastify-example</a>.</p><figure class="highlight html"><figcaption><span>public/fancy.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Fancy<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css2?family=Satisfy&amp;display=swap&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&#x27;Satisfy&#x27;</span>, cursive;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">2rem</span> <span class="number">4rem</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Fancy Page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      Lorem ipsum dolor sit amet consectetur adipisicing elit. Recusandae</span><br><span class="line">      expedita dolore natus itaque cum, exercitationem consequatur possimus,</span><br><span class="line">      illo dignissimos fugiat a deserunt sunt, sed maiores libero rem eveniet</span><br><span class="line">      aspernatur. Omnis.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>How does the page look while the font is loading? Using the <a href="https://on.cypress.io/intercept">cy.intercept</a> command we can slow down loading either the initial CSS resource, or the actual font (see the bonus lesson in my <a href="https://cypress.tips/courses">Cypress network testing course</a> to learn how to slow down network calls). While the font &quot;Satisfy&quot; is loading, the browser shows the fallback font family &quot;cursive&quot; which loads the system font from my laptop.</p><p><img src="../images/rendered-font/fancy.gif" alt="The test delays by two seconds loading the custom font"></p><p>How do we confirm the font &quot;Satisfy&quot; really loads? If we ask the browser what the font <em>should</em> be used, it will answer &quot;Satisfy&quot; right away. The DOM simply returns what we listed in the element&#39;s styles. Let&#39;s write a test that uses the Chai-jQuery assertion &quot;have.css&quot;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows the font listed in the style&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/fancy.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.css&#x27;</span>, <span class="string">&#x27;font-family&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;Satisfy&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hmm, the <code>.should(&#39;have.css&#39;, &#39;font-family&#39;)</code> assertion yields the &quot;Satisfy, cursive&quot; style string, not the actual rendered font name. You can see how the test passes, even if the laptop has its network WiFi turned off.</p><p><img src="../images/rendered-font/test-passes.png" alt="The test checks the font listed in the body style"></p><p>The font &quot;Satisfy&quot; does not even load, yet the test only looks at the listed style. How do we get the actual rendered font name?</p><h2><span id="rendered-font-in-devtools">Rendered font in DevTools</span></h2><p>If you inspect the element in the Chrome DevTools, you can find the &quot;rendered font&quot; name after the font successfully loads and is applied to the element. The system font name is available in the DevTools Elements Tab at the bottom of the &quot;Computed&quot; properties sub tab.</p><p><img src="../images/rendered-font/font.png" alt="The DevTools shows the current rendered font name"></p><p>Let&#39;s get this rendered font name from the test. It takes a few calls via <code>Cypress.automation</code> low-level command which uses the existing <a href="/blog/cypress-automation/" title="Cypress Automation">Cypress Automation</a> Chrome Debugger Protocol connection to send CDP commands.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Cypress.automation returns a Promise</span></span><br><span class="line"><span class="title class_">Cypress</span>.<span class="title function_">automation</span>(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">command</span>: <span class="string">&#x27;... CDP command ...&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="comment">// command params</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>I will use my <a href="https://github.com/bahmutov/cypress-cdp">cypress-cdp</a> plugin to get the element&#39;s Node ID we need to fetch the rendered fonts using CDP command.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress-cdp</span><br><span class="line">+ cypress-cdp@1.1.0</span><br></pre></td></tr></table></figure><p>From the spec file I import the plugin and use a Chrome-based browser to run the test. We need to get the rendered font, which we can do using the Chrome Debugger Protocol command <a href="https://chromedevtools.github.io/devtools-protocol/tot/CSS/#method-getPlatformFontsForNode">CSS.getPlatformFontsForNode</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-cdp&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;confirms the rendered font after a delay&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// disable network caching</span></span><br><span class="line">  cy.<span class="title function_">CDP</span>(<span class="string">&#x27;Network.setCacheDisabled&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">cacheDisabled</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// slow down the font load</span></span><br><span class="line">  cy.<span class="title function_">intercept</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">hostname</span>: <span class="string">&#x27;fonts.gstatic.com&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="title class_">Cypress</span>.<span class="property">Promise</span>.<span class="title function_">delay</span>(<span class="number">2000</span>),</span><br><span class="line">  )</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/fancy.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// wait for the rendered font to be &quot;Satisfy&quot;</span></span><br><span class="line">  cy.<span class="title function_">getCDPNodeId</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">nodeId</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">CDP</span>(<span class="string">&#x27;CSS.getPlatformFontsForNode&#x27;</span>, &#123;</span><br><span class="line">      nodeId,</span><br><span class="line">    &#125;).<span class="title function_">should</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">expect</span>(result.<span class="property">fonts</span>)</span><br><span class="line">        .<span class="property">to</span>.<span class="property">be</span>.<span class="title function_">an</span>(<span class="string">&#x27;array&#x27;</span>)</span><br><span class="line">        .<span class="property">and</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">length</span>(<span class="number">1</span>)</span><br><span class="line">      <span class="title function_">expect</span>(</span><br><span class="line">        result.<span class="property">fonts</span>[<span class="number">0</span>].<span class="property">familyName</span>,</span><br><span class="line">        <span class="string">&#x27;font family&#x27;</span>,</span><br><span class="line">      ).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&#x27;Satisfy&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test retries fetching the rendered font until the real font &quot;Satisfy&quot; loads and is used by the browser to render the text in the <code>&lt;body&gt;</code> element.</p><p><img src="../images/rendered-font/check-font.gif" alt="The test confirming that the remote custom font &quot;Satisfy&quot; is used to render the text"></p><p>Nice!</p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/cypress-automation/" title="Cypress Automation">Cypress Automation</a></li><li><a href="/blog/cypress-vs-other-test-runners/" title="Cypress vs Other Test Runners">Cypress vs Other Test Runners</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This blog post shows another example &lt;a href=&quot;/blog/cypress-automation/&quot; title=&quot;automation&quot;&gt;automation&lt;/a&gt; use case in Cypress Test Runne
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Solve The First Click</title>
    <link href="https://glebbahmutov.com/blog/solve-the-first-click/"/>
    <id>https://glebbahmutov.com/blog/solve-the-first-click/</id>
    <published>2022-04-22T04:00:00.000Z</published>
    <updated>2022-04-22T19:47:24.180Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I wrote a blog post <a href="/blog/cypress-module-problem/" title="Cypress Module Problem">Cypress Module Problem</a> where I tested a sample Svelte Kit application <a href="https://github.com/bahmutov/my-svelte-app">bahmutov&#x2F;my-svelte-app</a>. The simple test I wrote just confirmed the home page Counter application works.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;counts&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> incrementSelector = <span class="string">&#x27;[aria-label=&quot;Increase the counter by one&quot;]&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> decrementSelector = <span class="string">&#x27;[aria-label=&quot;Decrease the counter by one&quot;]&#x27;</span>;</span><br><span class="line">cy.<span class="title function_">get</span>(incrementSelector).<span class="title function_">click</span>().<span class="title function_">click</span>();</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">get</span>(decrementSelector).<span class="title function_">click</span>();</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The tests works locally just fine.</p><p><img src="../images/solve-the-first-click/local.gif" alt="The passing local test"></p><h2><span id="continuous-integration">Continuous Integration</span></h2><p>One of the first things I recommend anyone do when writing end-to-end tests is to run the tests on continuous integration service. So I set up a GitHub Actions workflow using my own <a href="https://github.com/bahmutov/cypress-workflows">bahmutov&#x2F;cypress-workflows</a> reusable workflow called &quot;standard&quot;.</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="comment"># use the reusable workflow to check out the code, install dependencies</span></span><br><span class="line">    <span class="comment"># and run the Cypress tests</span></span><br><span class="line">    <span class="comment"># https://github.com/bahmutov/cypress-workflows</span></span><br><span class="line">    <span class="attr">uses:</span> <span class="string">bahmutov/cypress-workflows/.github/workflows/standard.yml@v1</span></span><br><span class="line">    <span class="attr">with:</span></span><br><span class="line">      <span class="attr">start:</span> <span class="string">&#x27;npm run dev&#x27;</span></span><br><span class="line">      <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">      <span class="attr">wait-on-timeout:</span> <span class="number">60</span></span><br></pre></td></tr></table></figure><p>The workflow installs the dependencies, caches them, starts the application using the command <code>npm run dev</code> and runs Cypress when the application responds on port 3000. All was good until I pushed the code. The workflow failed.</p><p><img src="../images/solve-the-first-click/step1.png" alt="The test has failed on CI"></p><p>Hmm, what has happened? Seems the element <code>[data-cy=count]</code> was present, but had a number different from 2. Was it 0? Was it 1? Was it something else? I need to see the browser at the moment of failure.</p><h2><span id="cypress-dashboard">Cypress Dashboard</span></h2><p>I have decided to set up recording the test results on <a href="https://on.cypress.io/dashboard-introduction">Cypress Dashboard</a>. In the Cypress running locally I switched to the &quot;Runs&quot; tab.</p><p><img src="../images/solve-the-first-click/runs.png" alt="Cypress Desktop GUI &quot;Runs&quot; tab"></p><p>I clicked the &quot;Connect to Dashboard&quot; button. On the next screen I have picked my <a href="https://on.cypress.io/organizations#Open-Source-Plan">Open Source organization plan</a> and set the project visibility to &quot;Public&quot;.</p><p><img src="../images/solve-the-first-click/project.png" alt="Picking the Dashboard organization to record the project to"></p><p>The next screen shows the Record key created by the Cypress Dashboard for this project. Keep this key private.</p><p><img src="../images/solve-the-first-click/key.png" alt="The recording key created for this project"></p><p>Great, now let&#39;s record the CI results to the Dashboard.</p><h2><span id="recording">Recording</span></h2><p>To record the test results and error screenshots on the Cypress Dashboard, I could have set the shown Cypress record key as an environment variable <code>CYPRESS_RECORD_KEY</code>. Since I am using GitHub Actions, I need to set the key as a secret.</p><p><img src="../images/solve-the-first-click/secret.png" alt="Set the record key as a repo Actions secret"></p><p>We need to pass our secret value to the reusable GitHub workflow, and tell the workflow to record. Here is the updated <a href="https://github.com/bahmutov/my-svelte-app/blob/main/.github/workflows/ci.yml">ci.yml</a> file</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="comment"># use the reusable workflow to check out the code, install dependencies</span></span><br><span class="line">    <span class="comment"># and run the Cypress tests</span></span><br><span class="line">    <span class="comment"># https://github.com/bahmutov/cypress-workflows</span></span><br><span class="line">    <span class="attr">uses:</span> <span class="string">bahmutov/cypress-workflows/.github/workflows/standard.yml@v1</span></span><br><span class="line">    <span class="attr">with:</span></span><br><span class="line">      <span class="attr">start:</span> <span class="string">&#x27;npm run dev&#x27;</span></span><br><span class="line">      <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">      <span class="attr">wait-on-timeout:</span> <span class="number">60</span></span><br><span class="line">      <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">secrets:</span></span><br><span class="line">      <span class="attr">recordKey:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CYPRESS_RECORD_KEY</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>The CI runs and shows the Dashboard run URL for us to open.</p><p><img src="../images/solve-the-first-click/first-run.png" alt="The terminal output shows the Cypress Dashboard URL"></p><p>Let&#39;s open the shown URL. Each test result has its own wealth of information, including the stack, the code frame, and the screenshot.</p><p><img src="../images/solve-the-first-click/run1.png" alt="The failed test run and the error location"></p><p>The Dashboard has the screenshot of the failure. Hmm, the button did work once, we can see the count was 0 and then became 1. Why isn&#39;t it 2?</p><p><img src="../images/solve-the-first-click/click2.png" alt="The screenshot from the test that failed on CI shows count of 1 instead of 2"></p><h2><span id="debugging-the-failure">Debugging the failure</span></h2><p>Ok, maybe the test clicked the button twice too quickly. Maybe we need to wait for the counter to show 1 before clicking the second time? I have modified the test to add an assertion between the two clicks.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;counts&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> incrementSelector = <span class="string">&#x27;[aria-label=&quot;Increase the counter by one&quot;]&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> decrementSelector = <span class="string">&#x27;[aria-label=&quot;Decrease the counter by one&quot;]&#x27;</span>;</span><br><span class="line">cy.<span class="title function_">get</span>(incrementSelector).<span class="title function_">click</span>();</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">get</span>(incrementSelector).<span class="title function_">click</span>();</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">get</span>(decrementSelector).<span class="title function_">click</span>();</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>I push the code and watch. The CI fails again, the Cypress Dashboard shows the new error screenshot.</p><p><img src="../images/solve-the-first-click/only-1.png" alt="The very first click does not work"></p><p>Ok, seems the very first click on the button does not register. The second click did work (in the previous version of the test). Is this a problem caused by the event listeners yet to be attached to the button, as I described in the blog post <a href="/blog/when-can-the-test-click/" title="When Can The Test Click">When Can The Test Click</a>?</p><p>To check, I first added a wait of one second before clicking the button for the very first time. This should give some time to the JavaScript framework to register the event listeners and be ready to process the user events.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;counts&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> incrementSelector = <span class="string">&#x27;[aria-label=&quot;Increase the counter by one&quot;]&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> decrementSelector = <span class="string">&#x27;[aria-label=&quot;Decrease the counter by one&quot;]&#x27;</span>;</span><br><span class="line">cy.<span class="title function_">wait</span>(<span class="number">1000</span>);</span><br><span class="line">cy.<span class="title function_">get</span>(incrementSelector).<span class="title function_">click</span>();</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">get</span>(incrementSelector).<span class="title function_">click</span>();</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">get</span>(decrementSelector).<span class="title function_">click</span>();</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Nice, the test worked on CI.</p><p><img src="../images/solve-the-first-click/passed.png" alt="The test is working if we wait one second before clicking the button"></p><p>Of course, to be really sure, I would need to run the test repeatedly as described in my blog post <a href="/blog/burning-tests/" title="Burning Tests with cypress-grep">Burning Tests with cypress-grep</a> or my other blog post <a href="https://www.cypress.io/blog/2020/12/03/retry-rerun-repeat/">Retry, Rerun, Repeat</a>.</p><p>Ok, so waiting a little bit seems to solve the &quot;missing click&quot; problem. How does the application handle the click? Let&#39;s inspect the button in the browser.</p><p><img src="../images/solve-the-first-click/el.png" alt="The Counter component attaches the click event listener to the button"></p><p>Super. So the page shows the button very quickly, before the Counter component is listening. Cypress Test Runner sees the button and clicks it right away: the button is there, it is not disabled, so good to go ... but not really. A very quick user could also click the button before the application is ready to react to the clicks.</p><h2><span id="the-solution">The solution</span></h2><p>There are no observable attributes on the page I could find that would let me know when the application has finished attaching its event listeners. Thus I need to ask the button itself &quot;do you have click event listener?&quot; as described in <a href="/blog/when-can-the-test-click/" title="When Can The Test Click">When Can The Test Click</a> blog post. I installed the <a href="https://github.com/bahmutov/cypress-cdp">cypress-cdp</a> plugin and added a command to the test file <a href="https://github.com/bahmutov/my-svelte-app/blob/main/cypress/integration/spec.js">cypress&#x2F;integration&#x2F;spec.js</a>.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-cdp&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;counts&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> incrementSelector = <span class="string">&#x27;[aria-label=&quot;Increase the counter by one&quot;]&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> decrementSelector = <span class="string">&#x27;[aria-label=&quot;Decrease the counter by one&quot;]&#x27;</span>;</span><br><span class="line">cy.<span class="title function_">hasEventListeners</span>(incrementSelector, &#123; <span class="attr">type</span>: <span class="string">&#x27;click&#x27;</span> &#125;);</span><br><span class="line">cy.<span class="title function_">get</span>(incrementSelector).<span class="title function_">click</span>();</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">get</span>(incrementSelector).<span class="title function_">click</span>();</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">get</span>(decrementSelector).<span class="title function_">click</span>();</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="../images/solve-the-first-click/wait-for-click-listener.png" alt="The test waits for the click event listener to be attached to the button"></p><p>Beautiful.</p><p><img src="../images/solve-the-first-click/actions.png" alt="The spec seems to be reliable on CI"></p><p>Our test now seems to work reliable on CI, see for yourself at <a href="https://github.com/bahmutov/my-svelte-app/actions">bahmutov&#x2F;my-svelte-app&#x2F;actions</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently I wrote a blog post &lt;a href=&quot;/blog/cypress-module-problem/&quot; title=&quot;Cypress Module Problem&quot;&gt;Cypress Module Problem&lt;/a&gt; where I te
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="cypress dashboard" scheme="https://glebbahmutov.com/blog/tags/cypress-dashboard/"/>
    
  </entry>
  
  <entry>
    <title>Cypress Module Problem</title>
    <link href="https://glebbahmutov.com/blog/cypress-module-problem/"/>
    <id>https://glebbahmutov.com/blog/cypress-module-problem/</id>
    <published>2022-04-21T04:00:00.000Z</published>
    <updated>2022-04-22T18:53:46.983Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes you might see an error message when adding Cypress to an existing project that uses ES6 modules. When you run the <code>cypress open</code> command and it opens the first window, it tries to load the plugins file and shows an error</p><p><img src="../images/cypress-module-problem/module-error.png" alt="Cypress shows an error trying to load the plugins file"></p><p>For completeness, the full error text is below</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">**Message:** Your `pluginsFile` is invalid: `/Users/glebbahmutov/git/my-svelte-app/cypress/plugins/index.js`</span><br><span class="line"></span><br><span class="line">It threw an error when required, check the stack trace below:</span><br><span class="line"></span><br><span class="line">**Details:** Error [ERR_REQUIRE_ESM]: require() of ES Module</span><br><span class="line">/Users/glebbahmutov/git/my-svelte-app/cypress/plugins/index.js from</span><br><span class="line">/Users/glebbahmutov/Library/Caches/Cypress/9.5.4/Cypress.app/Contents/Resources/app/packages/server/lib/plugins/child/run_plugins.js not supported.</span><br><span class="line">index.js is treated as an ES module file as it is a .js file whose nearest parent package.json</span><br><span class="line">contains &quot;type&quot;: &quot;module&quot; which declares all .js files in that package scope as ES modules.</span><br><span class="line">Instead rename index.js to end in .cjs, change the requiring code to use dynamic import()</span><br><span class="line">which is available in all CommonJS modules, or change &quot;type&quot;: &quot;module&quot; to &quot;type&quot;: &quot;commonjs&quot;</span><br><span class="line">in /Users/glebbahmutov/git/my-svelte-app/package.json to treat all .js files as CommonJS</span><br><span class="line">(using .mjs for all ES modules instead).</span><br><span class="line"></span><br><span class="line">    at runPlugins (/Users/glebbahmutov/Library/Caches/Cypress/9.5.4/Cypress.app/Contents/Resources/app/packages/server/lib/plugins/child/run_plugins.js:186:15)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/Users/glebbahmutov/Library/Caches/Cypress/9.5.4/Cypress.app/Contents/Resources/app/packages/server/lib/plugins/child/index.js:8:25)</span><br><span class="line"></span><br><span class="line">**Stack trace:**</span><br></pre></td></tr></table></figure><p>It seems if the application has <code>type: module</code> setting in its <code>package.json</code>, the Cypress plugins that runs in Node and tries to load CommonJS modules fails to even load. The specs are happy - if the Cypress config file <code>cypress.json</code> specifies no plugins file, the specs load.</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;pluginsFile&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="../images/cypress-module-problem/project-loads.png" alt="Without the plugins file the project loads even if type:module is used"></p><h2><span id="the-solution">The solution</span></h2><p>The solution to this problem comes from the error description itself:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">... it is a .js file whose nearest parent package.json contains &quot;type&quot;: &quot;module&quot; ...</span><br></pre></td></tr></table></figure><p>Did you see it? The phrase &quot;nearest parent package.json&quot; is the key. If the entire project has <code>package.json</code> with <code>type: module</code>, all we need to do is to create another <code>package.json</code> closer to the Cypress plugins file that has <code>type: commonjs</code>. Here is what I do:</p><ul><li>I create a file &quot;package.json&quot; and place it in the &quot;cypress&quot; folder. It becomes the &quot;nearest&quot; package for the Cypress plugins file</li><li>I place the following JSON into that file:</li></ul><figure class="highlight js"><figcaption><span>cypress/package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;cypress-tests&quot;</span>,</span><br><span class="line"><span class="string">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;type&quot;</span>: <span class="string">&quot;commonjs&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This solves the plugins loading problem.</p><p><img src="../images/cypress-module-problem/counts.gif" alt="Without the plugins file the project loads even if type:module is used"></p><p>You can find the full source code in the repo <a href="https://github.com/bahmutov/my-svelte-app">bahmutov&#x2F;my-svelte-app</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sometimes you might see an error message when adding Cypress to an existing project that uses ES6 modules. When you run the &lt;code&gt;cypress
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>When Can The Test Click</title>
    <link href="https://glebbahmutov.com/blog/when-can-the-test-click/"/>
    <id>https://glebbahmutov.com/blog/when-can-the-test-click/</id>
    <published>2022-04-15T04:00:00.000Z</published>
    <updated>2022-04-22T19:32:42.003Z</updated>
    
    <content type="html"><![CDATA[<p>Many many moons ago I wrote a blog post <a href="https://www.cypress.io/blog/2019/01/22/when-can-the-test-click/">When Can The Test Click?</a>. It was part of a <a href="https://www.cypress.io/blog/tag/flake/">series of blog posts</a> that explain why an end-to-end test might be flaky. The main reason in my opinion that causes a test to sometimes not work, is that the test runner does not <em>know</em> when the application is ready to receive test commands, like click. There might be many reasons why that is the case, but one of the hardest to reliably solve is knowing when the application has finished its initial load. Is the application ready to receive the user click? Or does it need extra 100ms to finish loading and starting its JavaScript code? I have discussed a possible solution in the blog post <a href="/blog/app-loaded/" title="When Has The App Loaded">When Has The App Loaded</a>. In this blog post, I will show another solution that goes directly to the heart of the problem of &quot;missing&quot; clicks - checking if the application has attached its event listeners to the button before clicking on it.</p><h2><span id="the-problem">The problem</span></h2><p>Let&#39;s take an application that responds to a button click event.</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">output</span> <span class="attr">id</span>=<span class="string">&quot;output&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#one&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> output = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#output&#x27;</span>)</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  output.<span class="property">innerText</span> = <span class="string">&#x27;clicked&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above application registers the event handler synchronously. When the <code>cy.visit</code> command finishes, the application is ready to go.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec1.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;clicks on the button&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;button#one&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;#output&#x27;</span>, <span class="string">&#x27;clicked&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test reliably passes.</p><p><img src="../images/when-click/spec1.png" alt="The test can immediately click on the button"></p><p>But what if the application delays its load? What if it attaches the &quot;click&quot; event listener by one second? What if the application is slowly loading chunks of its code? While the user sees the page elements, they are not ready to process any events, and the test fails.</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#one&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> output = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#output&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// add event listeners after a short delay</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    output.<span class="property">innerText</span> = <span class="string">&#x27;clicked&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>The same test now fails - because the &quot;click&quot; even gets lost. The test runner clicks before the application starts listening.</p><p><img src="../images/when-click/click-fails.gif" alt="The test fails because it clicks before the application registers the click event handler"></p><h2><span id="the-diagnosis">The diagnosis</span></h2><p>A good way to determine if the test acts before the application is ready to respond is to add <a href="https://on.cypress.io/wait">cy.wait</a> commands. You can wait for some external <a href="/blog/app-loaded/" title="observable event">observable event</a>, or simply wait N milliseconds (I know, I know, but this is temporary).</p><figure class="highlight js"><figcaption><span>cypress/integration/spec1.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;clicks on the button&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// let the application fully load</span></span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="number">5000</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;button#one&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;#output&#x27;</span>, <span class="string">&#x27;clicked&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test now reliably passes</p><p><img src="../images/when-click/wait5.png" alt="The test waits five seconds before clicking"></p><p>How can we avoid the hard-coded wait, and instead click after the application is ready to receive the &quot;click&quot; event?</p><h2><span id="event-listeners">Event listeners</span></h2><p>If you open the DevTools and look at the button DOM element, the tab &quot;Event Listeners&quot; shows the currently attached ... event listeners.</p><p><img src="../images/when-click/event-listener.png" alt="The button element has the click event listener attached"></p><p>This &quot;click&quot; event listener is attached to the element by the application code after it is done initializing.</p><h2><span id="cypress-cdp">cypress-cdp</span></h2><p>Hmm, if only our test could wait for this event listener to exist before clicking... Well, let&#39;s check! If the DevTools panel can query an element to show its event listeners, we can do the same thing from Cypress using Chrome Debugger Protocol. After all, Cypress has this connection already and even exposes it to the test code, as I show in my blog post <a href="/blog/cypress-vs-other-test-runners/" title="Cypress vs Other Test Runners">Cypress vs Other Test Runners</a>. In general, this looks like</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cypress</span>.<span class="title function_">automation</span>(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">command</span>: rdpCommand,</span><br><span class="line">  params,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Because <code>Cypress.automation</code> is a very low-level primitive, it eagerly returns a Promise, which your code needs to <code>cy.wrap(Promise)</code> to wait to resolve. But since I am a nice person, I wrote a little NPM plugin that exposes the Chrome Debugger Protocol via a Cypress custom command <code>cy.CDP</code>. You can find the source code in the repo <a href="https://github.com/bahmutov/cypress-cdp">bahmutov&#x2F;cypress-cdp</a>.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress-cdp</span><br></pre></td></tr></table></figure><p>In your support or spec file, import the <code>cypress-cdp</code> and you will get the <code>cy.CDP</code> command. Let&#39;s use it to wait for the event listeners to be attached. First, we need to find the internal browser object ID for the button we want to click. We can ask the <code>Runtime</code> object to <code>evaluate</code> the expression in the application&#39;s iframe:</p><figure class="highlight js"><figcaption><span>cypress/integration/click.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-cdp&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;clicks on the button when there is an event handler&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> selector = <span class="string">&#x27;button#one&#x27;</span></span><br><span class="line">  cy.<span class="title function_">CDP</span>(<span class="string">&#x27;Runtime.evaluate&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">expression</span>: <span class="string">&#x27;frames[0].document.querySelector(&quot;&#x27;</span> + selector + <span class="string">&#x27;&quot;)&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">expect</span>(v.<span class="property">result</span>).<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">property</span>(<span class="string">&#x27;objectId&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;result.objectId&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The command <code>cy.CDP</code> has DOM snapshots and checks the attached assertions, so it is meant to be retry-able. You can see the button&#39;s internal object ID printed in the Command Log.</p><p><img src="../images/when-click/button-id.png" alt="We got the internal button ID from the browser using the Chrome Debugger Protocol"></p><p>Now that we have the ID, let&#39;s query the event listeners - and because the <code>cy.CDP</code> command retries the assertions that follow it, we can check the returned event listeners array. If there are no event listeners (we could also check their types), then we can throw an error to re-query the element.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;clicks on the button when there is an event handler&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> selector = <span class="string">&#x27;button#one&#x27;</span></span><br><span class="line">  cy.<span class="title function_">CDP</span>(<span class="string">&#x27;Runtime.evaluate&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">expression</span>: <span class="string">&#x27;frames[0].document.querySelector(&quot;&#x27;</span> + selector + <span class="string">&#x27;&quot;)&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">expect</span>(v.<span class="property">result</span>).<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">property</span>(<span class="string">&#x27;objectId&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;result.objectId&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">objectId</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">CDP</span>(<span class="string">&#x27;DOMDebugger.getEventListeners&#x27;</span>, &#123;</span><br><span class="line">        objectId,</span><br><span class="line">        <span class="attr">depth</span>: -<span class="number">1</span>,</span><br><span class="line">        <span class="attr">pierce</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;).<span class="title function_">should</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">expect</span>(v.<span class="property">listeners</span>).<span class="property">to</span>.<span class="property">have</span>.<span class="property">length</span>.<span class="title function_">greaterThan</span>(<span class="number">0</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// now we can click that button</span></span><br><span class="line">  cy.<span class="title function_">get</span>(selector).<span class="title function_">click</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Does it work? Let&#39;s see:</p><p><img src="../images/when-click/clicked.gif" alt="The test waits for the event listener to be attached before clicking"></p><p>Beautiful!</p><p><strong>Tip:</strong> you can find the full list of Chrome Debugger Protocol commands <a href="https://chromedevtools.github.io/devtools-protocol/">here</a>.</p><h2><span id="update-1-example-application">Update 1: example application</span></h2><p>Just as I wrote this blog post, I hit a real-world use case for waiting for the &quot;click&quot; event listener to be attached, read my blog post <a href="/blog/solve-the-first-click/" title="Solve The First Click">Solve The First Click</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Many many moons ago I wrote a blog post &lt;a href=&quot;https://www.cypress.io/blog/2019/01/22/when-can-the-test-click/&quot;&gt;When Can The Test Click
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Elements Visible In The Current Viewport</title>
    <link href="https://glebbahmutov.com/blog/visible-in-the-viewport/"/>
    <id>https://glebbahmutov.com/blog/visible-in-the-viewport/</id>
    <published>2022-04-13T04:00:00.000Z</published>
    <updated>2022-04-14T14:50:11.855Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine your application loads in stages and shows several loading elements. There are two loading elements visible to the user right away (above the fold), and one more loading element below the fold. Here is a sample page showing this situation:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;page1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loading&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loading&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;page2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loading&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The <code>#page1</code> and <code>#page2</code> sections are marked with different colors. Each is 1000x1000 pixels and if we zoom out look like this:</p><p><img src="../images/visible-in-the-viewport/sections.png" alt="Two sections with three loading elements"></p><p><strong>Tip:</strong> I set the viewport width and height as 1000 pixels in the <code>cypress.json</code> file. To show the two sections at once, I modified the viewport height using per-test configuration:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;loads&#x27;</span>, &#123; <span class="attr">viewportHeight</span>: <span class="number">2000</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>üéÅ You can find the source code and the tests shown in this bog post in the repo <a href="https://github.com/bahmutov/loading-elements">bahmutov&#x2F;loading-elements</a>.</p></blockquote><p><strong>Video:</strong> I have recorded a <a href="https://youtu.be/XLgwQsSa9PM">short video</a> showing how to check the loading elements in the current viewport. You can watch the video below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/XLgwQsSa9PM" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>The application &quot;loads&quot; and removes the first two loading elements.</p><figure class="highlight js"><figcaption><span>public/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [loading1, loading2] = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;#page1 .loading&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hiding the first loading element&#x27;</span>)</span><br><span class="line">  loading1.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;removing the second loading element&#x27;</span>)</span><br><span class="line">  loading2.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(loading2)</span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>If we want to check if the loading elements <em>above</em> the fold disappear, we cannot just check the visibility - because it will include the third loading element that is still visible, even if the user cannot see it without scrolling.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;the loading element below the fold never goes away&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// at first, all loading elements are visible</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.loading&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>).<span class="title function_">and</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  <span class="comment">// the loaders on the first page disappear</span></span><br><span class="line">  <span class="comment">// but the loader on the second page is still visible</span></span><br><span class="line">  <span class="comment">// so the next assertion fails</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.loading&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/visible-in-the-viewport/failing-test.gif" alt="The test fails, as the third loading element remains visible below the fold"></p><p>How do we check if the loading elements inside the <em>current viewport</em> are no longer visible? By using the bounding rectangle of the elements before checking them! See the documentation for the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect">Element.getBoundingClientRect</a> which returns the rectangle in the current viewport. I took this chart from the documentation page:</p><p><img src="../images/visible-in-the-viewport/element-box-diagram.png" alt="The element bounding box, source: Mozilla Developer docs"></p><p>If the bottom of the element is less than zero, then the element is above the current viewport. If the top of the element is larger than the viewport height, then the element is still below the current viewport. Similarly, we can check the Let me write a custom command to repeatedly check the DOM until the elements in the current viewport become hidden.</p><figure class="highlight js"><figcaption><span>cypress/integration/support.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Cypress</span>.<span class="property">Commands</span>.<span class="title function_">add</span>(<span class="string">&#x27;invisibleInViewport&#x27;</span>, <span class="function">(<span class="params">selector</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">window</span>(&#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// get the current viewport of the application</span></span><br><span class="line">    <span class="keyword">const</span> &#123; innerHeight, innerWidth &#125; = win</span><br><span class="line">    cy.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; innerHeight, innerWidth &#125;))</span><br><span class="line"></span><br><span class="line">    cy.<span class="title function_">get</span>(selector).<span class="title function_">should</span>(<span class="function">(<span class="params">$el</span>) =&gt;</span> &#123;</span><br><span class="line">      $el.<span class="title function_">each</span>(<span class="function">(<span class="params">k, el</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// skip stray and hidden elements</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title class_">Cypress</span>.<span class="property">dom</span>.<span class="title function_">isAttached</span>(el)) &#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title class_">Cypress</span>.<span class="property">dom</span>.<span class="title function_">isVisible</span>(el)) &#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect</span></span><br><span class="line">        <span class="keyword">const</span> rect = el.<span class="title function_">getBoundingClientRect</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rect.<span class="property">bottom</span> &lt; <span class="number">0</span> || rect.<span class="property">top</span> &gt; innerHeight) &#123;</span><br><span class="line">          <span class="comment">// the element is outside the viewport vertically</span></span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rect.<span class="property">right</span> &lt; <span class="number">0</span> || rect.<span class="property">left</span> &gt; innerWidth) &#123;</span><br><span class="line">          <span class="comment">// the element is outside the viewport horizontally</span></span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`loader <span class="subst">$&#123;k + <span class="number">1</span>&#125;</span> is visible`</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;selector&#125;</span> is invisible in viewport`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let&#39;s make our application even more complicated. We will hide &#x2F; remove all loading elements one by one after 2, 3 and 4.5 seconds.</p><figure class="highlight js"><figcaption><span>public/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [loading1, loading2] = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;#page1 .loading&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> loading3 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#page2 .loading&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hiding the first loading element&#x27;</span>)</span><br><span class="line">  loading1.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;removing the second loading element&#x27;</span>)</span><br><span class="line">  loading2.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(loading2)</span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;removing the third loading element&#x27;</span>)</span><br><span class="line">  loading3.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(loading3)</span><br><span class="line">&#125;, <span class="number">4500</span>)</span><br></pre></td></tr></table></figure><p>Our test will wait for the above the folder loading elements to disappear before scrolling to the bottom of the page and verifying the last loading element is also gone from the view.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec2.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;checks if the loading element is visible within the current viewport&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// at first, both loading elements are visible</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.loading&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>).<span class="title function_">and</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">invisibleInViewport</span>(<span class="string">&#x27;.loading&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">scrollTo</span>(<span class="string">&#x27;bottom&#x27;</span>, &#123; <span class="attr">duration</span>: <span class="number">500</span> &#125;)</span><br><span class="line">  <span class="comment">// there is one more loading element visible here</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.loading:visible&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="comment">// then the last loading element goes away</span></span><br><span class="line">  cy.<span class="title function_">invisibleInViewport</span>(<span class="string">&#x27;.loading&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test works beautifully.</p><p><img src="../images/visible-in-the-viewport/spec2.gif" alt="The test correctly looks at the loading elements in the current viewport"></p><p>Happy Testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine your application loads in stages and shows several loading elements. There are two loading elements visible to the user right awa
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>When Has The App Loaded</title>
    <link href="https://glebbahmutov.com/blog/app-loaded/"/>
    <id>https://glebbahmutov.com/blog/app-loaded/</id>
    <published>2022-03-31T04:00:00.000Z</published>
    <updated>2022-03-31T13:44:22.773Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s take an application that fetches data from the server and write end-to-end tests for it. What happens if the application takes a little bit longer than usual to bootstrap, get the data, and render it? Will the test fail because it does not wait for the data to finish loading?</p><p>The example I am about to show comes from <a href="https://github.com/bahmutov/cypress-workshop-basics">bahmutov&#x2F;cypress-workshop-basics</a>. The test visits the application URL and confirms there are no items on the page.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with zero items&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hmm, the test passes, yet I can clearly see 2 todo items on the page? Is the assertion <code>cy.get(&#39;li.todo&#39;).should(&#39;have.length&#39;, 0)</code> not doing its job?</p><p><img src="../images/app-loaded/todos.png" alt="The test passes when it should have failed"></p><p>The test finishes <em>too quickly</em>. While the application is still loading the data, the assertion <code>cy.get(&#39;li.todo&#39;).should(&#39;have.length&#39;, 0)</code> checks the empty initial page. There are no todo items, and the test completes. Only then the Ajax call returns and the 2 items are rendered on the page. By then the test has finished.</p><p>Note that the <code>.should(&#39;have.length&#39;, 0)</code> assertion is similar to the <code>.should(&#39;not.exist&#39;)</code> assertion. Such negative assertions are dangerous in my opinion, they can pass for the wrong reason (like in our case). Read the blog posts <a href="/blog/negative-assertions/" title="Be Careful With Negative Assertions">Be Careful With Negative Assertions</a> and <a href="/blog/negative-assertions-and-missing-states/" title="Negative Assertions And Missing States">Negative Assertions And Missing States</a> for more examples.</p><h2><span id="waiting-for-the-data-load">Waiting for the data load</span></h2><p>The simplest solution to this problem, is to make the test wait for the data to load. Perhaps a one second delay would be enough?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with zero items (waits)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="number">1000</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Yes, now the test fails as expected, because the page shows the loaded data when the test checks it.</p><p><img src="../images/app-loaded/wait.png" alt="The test waits one second before checking the page"></p><p>Is one second wait enough? It might be enough when running the application locally. When running the tests against a remote server, we might need to wait longer. The worst is when the data load takes approximately one second. It leads to a race condition between the application and the test. Sometimes the application takes slightly longer than one second, and the test fails to detect the data, leading to the <a href="https://on.cypress.io/flaky-test-management">flaky tests</a>.</p><h2><span id="waiting-for-network-call-to-finish">Waiting for network call to finish</span></h2><p>A much better solution is to spy on the Ajax call made by the application and wait for the data to return before checking the page. You can use <a href="https://on.cypress.io/intercept">cy.intercept</a> command to spy on calls made by the application. You can spy on Ajax calls or any resource requested by the browser.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with zero items&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// start Cypress network server</span></span><br><span class="line">  <span class="comment">// spy on route `GET /todos`</span></span><br><span class="line">  <span class="comment">// THEN visit the page</span></span><br><span class="line">  cy.<span class="title function_">intercept</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@todos&#x27;</span>) <span class="comment">// wait for `GET /todos` response</span></span><br><span class="line">    <span class="comment">// inspect the server&#x27;s response</span></span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;response.body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">  <span class="comment">// then check the DOM</span></span><br><span class="line">  <span class="comment">// note that we don&#x27;t have to use &quot;cy.wait(...).then(...)&quot;</span></span><br><span class="line">  <span class="comment">// because all Cypress commands are flattened into a single chain</span></span><br><span class="line">  <span class="comment">// automatically. Thus just write &quot;cy.wait(); cy.get();&quot; naturally</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/app-loaded/network.png" alt="The test waits for the network call to complete"></p><p>The command <code>cy.wait(&#39;@todos&#39;)</code> waits for the network call, even if the call is made later.</p><p>In my application example, I can force the application to wait N seconds before making the initial load.</p><p>The application might delay the Ajax call.</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// state.delay comes from URL query parameter</span></span><br><span class="line"><span class="comment">// ?delay=2000</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">commit</span>(<span class="string">&#x27;SET_LOADING&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  axios</span><br><span class="line">    .<span class="title function_">get</span>(<span class="string">&#x27;/todos&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> r.<span class="property">data</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">todos</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;SET_TODOS&#x27;</span>, todos)</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;SET_LOADING&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;could not load todos&#x27;</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(e.<span class="property">message</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(e.<span class="property">response</span>.<span class="property">data</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// an easy way for the application to signal</span></span><br><span class="line">      <span class="comment">// that it is done loading</span></span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;loaded&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, state.<span class="property">delay</span>)</span><br></pre></td></tr></table></figure><p>The delay makes no difference, the test still correctly waits for the application to load its initial data.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with zero items (delay)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">intercept</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/?delay=2000&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@todos&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Look at the recording below. The Ajax call is detected two seconds after the visit, yet <code>cy.wait(&#39;@todos&#39;)</code> happily waits for it before Cypress proceeds to the next command.</p><p><img src="../images/app-loaded/delay.gif" alt="The test waits for the delayed Ajax call"></p><h2><span id="render-delay">Render delay</span></h2><p>What if our application has a delay between receiving the data and rendering it on the page?</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">axios</span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&#x27;/todos&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> r.<span class="property">data</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">todos</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;SET_TODOS&#x27;</span>, todos)</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;SET_LOADING&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">    &#125;, state.<span class="property">renderDelay</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Hmm, our test again passes when it should have failed.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with zero items (delay plus render delay)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">intercept</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/?delay=2000&amp;renderDelay=1500&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@todos&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/app-loaded/render-delay.gif" alt="The delay between the network call and showing items on the page confuses the test"></p><p>The &quot;missing&quot; step between finishing the network call and rendering the data on the page is exactly the problem I have described in the blog post <a href="/blog/negative-assertions-and-missing-states/" title="Negative Assertions And Missing States">Negative Assertions And Missing States</a>. The test does not &quot;know&quot; that the application is still not done loading. We need an explicit way of signalling from the application to the test runner &quot;I am done loading the data&quot;.</p><h2><span id="observe-the-page">Observe the page</span></h2><p>The best approach to tell that the application has finished loading ... is for application to set something observable to tell the test runner (and the human users) that the data load is done. For example, the application can set a CSS class or a utility data attribute</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">SET_LOADING</span>(<span class="params">state, flag</span>) &#123;</span><br><span class="line">  state.<span class="property">loading</span> = flag</span><br><span class="line">  <span class="keyword">if</span> (flag === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="comment">// an easy way for the application to signal</span></span><br><span class="line">    <span class="comment">// that it is done loading</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;loaded&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then the test can tell when the application has finished loading by observing the <code>&lt;body&gt;</code> element.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with zero items (check body.loaded)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// use delays to simulate the delayed load and render</span></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/?delay=2000&amp;renderDelay=1500&#x27;</span>)</span><br><span class="line">  <span class="comment">// the application sets &quot;loaded&quot; class on the body</span></span><br><span class="line">  <span class="comment">// in the test we can check for this class</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;loaded&#x27;</span>)</span><br><span class="line">  <span class="comment">// then check the number of items</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test behaves correctly and fails as expected.</p><p><img src="../images/app-loaded/body-loaded.gif" alt="The test waits for the body element to have class loaded"></p><p>Note: the assertion <code>.should(&#39;have.class&#39;, &#39;loaded&#39;)</code> passes after 3.5 seconds; the application requests the data after 2 seconds, and renders it after 1.5 seconds. The assertion might time out if the data load takes slightly longer, since the default command timeout is 4 seconds. I would suggest using a longer command time out in this case:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;body&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">7_000</span> &#125;).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;loaded&#x27;</span>)</span><br></pre></td></tr></table></figure><h2><span id="check-the-window-object">Check the window object</span></h2><p>We can use another mechanism to signal the test runner that the application has finished loading the data. We can even pass the data we got from the server!</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">SET_TODOS</span>(<span class="params">state, todos</span>) &#123;</span><br><span class="line">  state.<span class="property">todos</span> = todos</span><br><span class="line">  <span class="comment">// expose the todos via the global &quot;window&quot; object</span></span><br><span class="line">  <span class="comment">// but only if we are running Cypress tests</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">Cypress</span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">todos</span> = todos</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The test then can detect when the <code>window.todos</code> property is set using <a href="https://on.cypress.io/window">cy.window</a> and <a href="https://on.cypress.io/its">cy.its</a> commands.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with zero items (check the window)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// use delays to simulate the delayed load and render</span></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/?delay=2000&amp;renderDelay=1500&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">window</span>().<span class="title function_">its</span>(<span class="string">&#x27;todos&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">7_000</span> &#125;)</span><br><span class="line">  <span class="comment">// then check the number of items</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/app-loaded/window.png" alt="Continue the test when the application sets the window.todos object"></p><p>If we can detect when the <code>window.todos</code> property is set, we can read the actual todos and use them to check the rendered page.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with N items&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// use delays to simulate the delayed load and render</span></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/?delay=2000&amp;renderDelay=1500&#x27;</span>)</span><br><span class="line">  <span class="comment">// access the loaded Todo items</span></span><br><span class="line">  cy.<span class="title function_">window</span>()</span><br><span class="line">    <span class="comment">// you can drill down nested properties using &quot;.&quot;</span></span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;todos.length&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// then check the number of items</span></span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, n)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/app-loaded/todos-n.gif" alt="Using the data from the app to check the rendered page"></p><p>You can even use the <code>window.todos</code> to check what the page renders.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with N items and checks the page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// use delays to simulate the delayed load and render</span></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/?delay=2000&amp;renderDelay=1500&#x27;</span>)</span><br><span class="line">  <span class="comment">// access the loaded Todo items</span></span><br><span class="line">  cy.<span class="title function_">window</span>()</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">todos</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// then check the number of items</span></span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, todos.<span class="property">length</span>)</span><br><span class="line">      todos.<span class="title function_">forEach</span>(<span class="function">(<span class="params">todo</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (todo.<span class="property">completed</span>) &#123;</span><br><span class="line">          cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo&#x27;</span>, todo.<span class="property">title</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo&#x27;</span>, todo.<span class="property">title</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/app-loaded/check-todos.png" alt="Check if the page renders each todo correctly"></p><p>For more on accessing the application data from the Cypress test via the <code>window</code> object, see the blog post <a href="/blog/stub-via-window/" title="Stub Objects By Passing Them Via Window Property">Stub Objects By Passing Them Via Window Property</a>.</p><h2><span id="conclusion">Conclusion</span></h2><p>The test runner should not &quot;run away&quot; from the application. If the application is still loading the data, the test runner should wait for the data to load and the page to be ready to continue testing. In this blog post, I have shown how to wait for the data to load using:</p><ul><li>a hard-coded <code>cy.wait(N)</code> command</li><li>network spy using the <code>cy.intercept</code> command</li><li>a <code>body</code> element property added after the load</li><li>a property on the <code>window</code> object set by the application after the load</li></ul><p>Happy testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s take an application that fetches data from the server and write end-to-end tests for it. What happens if the application takes 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Stub Objects By Passing Them Via Window Property</title>
    <link href="https://glebbahmutov.com/blog/stub-via-window/"/>
    <id>https://glebbahmutov.com/blog/stub-via-window/</id>
    <published>2022-03-30T04:00:00.000Z</published>
    <updated>2022-03-30T12:55:27.063Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine you have an application that imports a config object from another file, and then uses the config to control what it shows on the page.</p><figure class="highlight ts"><figcaption><span>Config.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;Todo App&#x27;</span>,</span><br><span class="line">  <span class="attr">showCount</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>App.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Config</span> <span class="keyword">from</span> <span class="string">&#x27;./Config&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;Config.title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Can you change the <code>Config</code> object from a Cypress end-to-end test?</p><blockquote class="pullquote"><p>üéÅ You can find the source code in the repo <a href="https://github.com/bahmutov/stub-window-object-example">bahmutov&#x2F;stub-window-object-example</a></p></blockquote><h2><span id="set-config-on-the-window">Set Config on the window</span></h2><p>To let the test &quot;know&quot; the config values, the simplest is to assign it to a property of the <code>window</code> object.</p><figure class="highlight ts"><figcaption><span>App.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Config</span> <span class="keyword">from</span> <span class="string">&#x27;./Config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">Cypress</span>) &#123;</span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">Config</span> = <span class="title class_">Config</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;Config.title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The test can confirm the keys in the config object, and use the title from the config to check the page.</p><figure class="highlight js"><figcaption><span>cypress/integration/config-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;sets the window config&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">// cy.visit yields the window object</span></span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;Config&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.keys&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;showCount&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">title</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, title)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/stub-via-window/title.png" alt="Checking the title"></p><p><strong>Tip:</strong> I am using <code>// @ts-ignore</code> above some source lines to avoid fighting the TypeScript compiler.</p><p><img src="../images/stub-via-window/ts-ignore.png" alt="Not today, TypeScript"></p><h2><span id="override-the-config-object">Override the config object</span></h2><p>If we can read the config object from the window object, we can also override it. We just need to define a custom property that lets us return a new value from the test. In the application, we make an intermediate variable to pass the config object.</p><figure class="highlight ts"><figcaption><span>App.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _config <span class="keyword">from</span> <span class="string">&#x27;./Config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Config</span> = _config</span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">Cypress</span>) &#123;</span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">Config</span> = <span class="title class_">Config</span></span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  <span class="title class_">Config</span> = <span class="variable language_">window</span>.<span class="property">Config</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// use the Config object</span></span><br></pre></td></tr></table></figure><p>Our Cypress test can intercept the assignment &quot;window.Config &#x3D; Config&quot; and replace its value and return its own object. We just need to make sure we are ready before the application loads its application code. We can do this in the <code>onBeforeLoad</code> callback of the <a href="https://on.cypress.io/visit">cy.visit</a> command.</p><figure class="highlight js"><figcaption><span>cypress/integration/override-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;overrides the config&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">onBeforeLoad</span>(<span class="params">win</span>) &#123;</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(win, <span class="string">&#x27;Config&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">// ignore the config the application sets</span></span><br><span class="line">        <span class="comment">// and instead use our own test config object</span></span><br><span class="line">        <span class="attr">set</span>: cy.<span class="title function_">stub</span>().<span class="title function_">as</span>(<span class="string">&#x27;setConfig&#x27;</span>),</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;Cypress Test&#x27;</span>,</span><br><span class="line">            <span class="attr">showCount</span>: <span class="literal">false</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Cypress Test&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-cy=&quot;pending-count&quot;]&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/stub-via-window/override.png" alt="The test returns its own config object"></p><h2><span id="combine-the-config-object">Combine the config object</span></h2><p>We do not have to completely replace the application&#39;s config object. We can combine its value with some of our test properties.</p><figure class="highlight js"><figcaption><span>cypress/integration/combine-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;combines the config&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">onBeforeLoad</span>(<span class="params">win</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> appValue</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(win, <span class="string">&#x27;Config&#x27;</span>, &#123;</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">v</span>) &#123;</span><br><span class="line">          appValue = v</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="comment">// returns a combined config</span></span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            ...appValue,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;Cypress Test&#x27;</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// we only check the property we have set</span></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Cypress Test&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/stub-via-window/combine.png" alt="The test returns its own config object"></p><h2><span id="mock-config-module">Mock Config module</span></h2><p>We can go one step beyond the previous solutions. Instead of modifying the application code to expose the Config object, we can directly mock the <code>src/Config.tsx</code> module in our JavaScript bundle (assuming the &quot;standard&quot; Webpack module format). We can do this using the plugin <a href="https://github.com/bahmutov/mock-in-bundle">mock-in-bundle</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D mock-in-bundle</span><br><span class="line">+ mock-in-bundle@1.3.0</span><br></pre></td></tr></table></figure><p>From the spec file, specify the module and the new default export.</p><figure class="highlight js"><figcaption><span>cypress/integration/mock-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mockInBundle &#125; <span class="keyword">from</span> <span class="string">&#x27;mock-in-bundle&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;mocks the Config module&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">mockInBundle</span>(<span class="string">&#x27;src/Config.tsx&#x27;</span>, &#123; <span class="attr">default</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;Mock Test&#x27;</span> &#125; &#125;)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Mock Test&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Boom üí£ the mock title is shown.</p><p><img src="../images/stub-via-window/mock.png" alt="The Cypress test mocks the module by name in the JavaScript bundle loaded by the application"></p><p>Happy testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine you have an application that imports a config object from another file, and then uses the config to control what it shows on the 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>How Cypress Freezes CSS Animations And You Can Too</title>
    <link href="https://glebbahmutov.com/blog/css-animations/"/>
    <id>https://glebbahmutov.com/blog/css-animations/</id>
    <published>2022-03-29T04:00:00.000Z</published>
    <updated>2022-03-29T16:08:18.751Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s take a web application with beautiful CSS animations showing time of day. Each click of the button sets a different CSS class which triggers CSS transitions.</p><p><img src="../images/css-animations/day-sunset.gif" alt="Time of day via CSS animations"></p><blockquote class="pullquote"><p>üñº You can find the example application in the repo <a href="https://github.com/bahmutov/css-animation-cypress-example">bahmutov&#x2F;css-animation-cypress-example</a>. It is based on <a href="https://codepen.io/oliviale/pen/ELPvLM">this Codepen</a> created by Olivia Ng.</p></blockquote><h2><span id="css-animations">CSS Animations</span></h2><p>To create the transitions, the application sets a different CSS class name</p><figure class="highlight js"><figcaption><span>public/script.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.option&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="string">&#x27;.option&#x27;</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> type = $(<span class="variable language_">this</span>).<span class="title function_">data</span>(<span class="string">&#x27;option&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="string">&#x27;day&#x27;</span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;.time&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;time day&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&#x27;night&#x27;</span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;.time&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;time night&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&#x27;dusk&#x27;</span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;.time&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;time dusk&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&#x27;sunset&#x27;</span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;.time&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;time sunset&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The application CSS specifies the transition duration applied to different elements. For example, to move the sun and the clouds, the application uses SVG shapes. Each shape will change its &quot;fill&quot; property in five seconds.</p><figure class="highlight css"><figcaption><span>public/style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">path,</span><br><span class="line">polygon,</span><br><span class="line">circle,</span><br><span class="line">rect &#123;</span><br><span class="line">  <span class="attribute">transition</span>: fill <span class="number">5s</span> ease;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Similarly, the &quot;.sun&quot; and other CSS classes will change its styles when applied in five seconds</p><figure class="highlight css"><figcaption><span>public/style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sun</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">5s</span> ease;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clouds</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">5s</span> ease <span class="number">0.1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.night</span> <span class="selector-class">.stars</span>,</span><br><span class="line"><span class="selector-class">.night</span> <span class="selector-class">.moon</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">5s</span> ease <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="cypress-tests">Cypress tests</span></h2><p>Ok, pretty slick. But how do the slow transitions affect the Cypress tests? Well, Cypress test does not &quot;know&quot; about five seconds it takes to finish the transition after clicking each button. Thus a typical test will show a weird start of the transition before abruptly starting a new one.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> times = [<span class="string">&#x27;Day&#x27;</span>, <span class="string">&#x27;Sunset&#x27;</span>, <span class="string">&#x27;Night&#x27;</span>, <span class="string">&#x27;Dusk&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;goes through the day&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  times.<span class="title function_">forEach</span>(<span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">contains</span>(time)</span><br><span class="line">      .<span class="title function_">click</span>()</span><br><span class="line">      <span class="comment">// add one second delay to show the animation in progress</span></span><br><span class="line">      .<span class="title function_">wait</span>(<span class="number">1000</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/css-animations/too-short.gif" alt="The test only waits one second before the next step"></p><p>We could slow down the test by waiting five seconds, but what if we could speed up the animations instead? Or disable them completely?</p><h2><span id="cypress-screenshots">Cypress screenshots</span></h2><p>If you every used <a href="https://on.cypress.io/screenshot">cy.screenshot</a> command, you might have noticed the option <code>disableTimersAndAnimations</code> in its documentation page:</p><p><img src="../images/css-animations/screenshot-option.png" alt="The cy.screenshot command mentions CSS animations"></p><p>Hmm, does <code>cy.screenshot</code> know how to disable CSS animations?! Let&#39;s try it out.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;takes a screenshot&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  times.<span class="title function_">forEach</span>(<span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">contains</span>(time).<span class="title function_">click</span>()</span><br><span class="line">    <span class="comment">// notice we are taking a screenshot immediately</span></span><br><span class="line">    <span class="comment">// without waiting for anything to finish updating</span></span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;.window&#x27;</span>).<span class="title function_">screenshot</span>(time, &#123;</span><br><span class="line">      <span class="attr">overwrite</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Look at the screenshots - they all show the page as if the CSS animations ran to the finish!</p><p><img src="../images/css-animations/combined.png" alt="Somehow cy.screenshot shows the final transition in each image"></p><p>How does it do it? How does it bypass waiting 5 seconds?</p><p>Let&#39;s search the <a href="https://github.com/cypress-io/cypress">Cypress source code</a> for &quot;disableTimersAndAnimations&quot;. This search result seems very relevant.</p><p><img src="../images/css-animations/search1.png" alt="Looks like cy.screenshot is injecting something into the application&#39;s frame to disable CSS animations"></p><p>Let&#39;s click on the search result to find the utility method <code>addCssAnimationDisabler</code>. It seems to just add a style to overwrite all CSS transitions in the page and set their duration to zero!</p><p><img src="../images/css-animations/search2.png" alt="How Cypress skips CSS animations during screenshots"></p><h2><span id="disabling-animations-from-out-test">Disabling animations from out test</span></h2><p>Nice, we can do the same thing ourselves from the Cypress test. We can use jQuery bundled with Cypress under <code>Cypress.$</code> to make the code simpler.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;disables animations&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">invoke</span>(</span><br><span class="line">    <span class="string">&#x27;append&#x27;</span>,</span><br><span class="line">    <span class="title class_">Cypress</span>.$(<span class="string">`</span></span><br><span class="line"><span class="string">      &lt;style id=&quot;__cypress-animation-disabler&quot;&gt;</span></span><br><span class="line"><span class="string">        *, *:before, *:after &#123;</span></span><br><span class="line"><span class="string">          transition-property: none !important;</span></span><br><span class="line"><span class="string">          animation: none !important;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &lt;/style&gt;</span></span><br><span class="line"><span class="string">    `</span>),</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  times.<span class="title function_">forEach</span>(<span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">contains</span>(time).<span class="title function_">click</span>().<span class="title function_">wait</span>(<span class="number">1000</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test shows the nice final state of each animation.</p><p><img src="../images/css-animations/disabled.gif" alt="The Cypress test with disabled CSS animations"></p><p>Note: I should record a video showing what I have explained in this blog post. Subscribe to <a href="https://www.youtube.com/glebbahmutov">my YouTube channel</a> to find the video when it comes out.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s take a web application with beautiful CSS animations showing time of day. Each click of the button sets a different CSS class w
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Negative Assertions And Missing States</title>
    <link href="https://glebbahmutov.com/blog/negative-assertions-and-missing-states/"/>
    <id>https://glebbahmutov.com/blog/negative-assertions-and-missing-states/</id>
    <published>2022-03-28T04:00:00.000Z</published>
    <updated>2022-03-28T14:19:26.139Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine you got lost in a foreign town. You see someone and ask them a question in whatever little foreign language you have: &quot;what street is this?&quot; When they tell you the name of the street, you are no longer lost, assuming you know every street or have a map with you. But what if you ask, and the stranger instead of naming the street simply states a negative &quot;you are NOT on Main street&quot;, then what? If the town only has two streets: Main and Second, then you are fine too. If you are not on Main street, then you are on Second street. Of course, if there are more than two streets, the answer &quot;you are NOT on Main street&quot; does not help you at all. You could be on any of the town&#39;s other N - 1 streets.</p><p>In the same town, now imagine you were walking with some directions. From the ocean shore, you were going down the Ocean ave, then you were taking the Main street to your destination. But the town has a fork in the road, the Ocean ave can lead to Main street and to Second street. At the end of Second street there is a fire-breathing dragon, and he is hungry. You do not want to go there.</p><p><img src="../images/missing-state/streets.png" alt="The town you are walking through"></p><p>Let&#39;s say at some point in your journey you ask someone &quot;This is NOT Second street, is this?&quot; You only hope to eliminate the dangerous section. But that is a wrong question to ask (props to <a href="https://en.wikipedia.org/wiki/All_the_Wrong_Questions">Lemony Snicket</a>). It only eliminates one street, and our town has three. Thus we could be on two streets, including Ocean avenue. We could still be approaching the dangerous fork and not even know it!</p><h2><span id="application-states">Application states</span></h2><p>Often when walking through a new city, it helps to separate the journey into logical sections. In our case, the two legs of the journey are &quot;before the fork&quot; and &quot;after the fork&quot;.</p><p><img src="../images/missing-state/fork.png" alt="The journey has two sections"></p><p>If we get disoriented, but know the section we are on, we can safely use a &quot;This is NOT Second street, is this?&quot; Each section cuts the number of possible choices to two.</p><ul><li>when walking before the fork, the only answer possible is &quot;No, this is not Second street&quot; (we can only be on Ocean ave)</li><li>when walking after the fork, the only two choices are Second and Main. If we hear &quot;Yes, you are on Second street&quot;, we turn around and run back to the fork in the road.</li></ul><p>Here is how this translates to web applications. Let&#39;s model our application&#39;s state using <a href="https://xstate.js.org/">xstate.js</a> library. In my case, we will start with the simple Promise machine example from the Xstate documentation.</p><figure class="highlight js"><figcaption><span>machine.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createMachine &#125; <span class="keyword">from</span> <span class="string">&#x27;xstate&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> promiseMachine = <span class="title function_">createMachine</span>(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;promise&#x27;</span>,</span><br><span class="line">  <span class="attr">initial</span>: <span class="string">&#x27;pending&#x27;</span>,</span><br><span class="line">  <span class="attr">states</span>: &#123;</span><br><span class="line">    <span class="attr">pending</span>: &#123;</span><br><span class="line">      <span class="attr">on</span>: &#123;</span><br><span class="line">        <span class="attr">RESOLVE</span>: &#123; <span class="attr">target</span>: <span class="string">&#x27;resolved&#x27;</span> &#125;,</span><br><span class="line">        <span class="attr">REJECT</span>: &#123; <span class="attr">target</span>: <span class="string">&#x27;rejected&#x27;</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resolved</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;final&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rejected</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;final&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The machine only has two 3 states, almost like the 3 streets in our town. We can copy &#x2F; paste the above code into the <a href="https://stately.ai/viz">Xstate visualizer</a> to see the states.</p><p><img src="../images/missing-state/machine.png" alt="The Promise state machine"></p><p>If we emit the &quot;REJECT&quot; event, the machine transitions to the &quot;rejected&quot; state. If we emit the &quot;RESOLVE&quot; event, the machine goes to the &quot;resolved&quot; state.</p><p>Let&#39;s implement a web interface.</p><figure class="highlight js"><figcaption><span>App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useMachine &#125; <span class="keyword">from</span> <span class="string">&#x27;@xstate/react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; promiseMachine &#125; <span class="keyword">from</span> <span class="string">&#x27;./machine&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Component</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, send] = <span class="title function_">useMachine</span>(promiseMachine)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex flex-col&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;mb-5 self-center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/** You can listen to what state the service is in */&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;state.matches(&#x27;pending&#x27;) &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>Loading it...<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;state.matches(&#x27;rejected&#x27;) &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;settled&quot;</span>&gt;</span>Promise Rejected<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;state.matches(&#x27;resolved&#x27;) &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;settled&quot;</span>&gt;</span>Promise Resolved<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/** You can send events to the running service */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> send(&#x27;RESOLVE&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">          type=&quot;button&quot;</span></span><br><span class="line"><span class="language-xml">          disabled=&#123;!state.matches(&#x27;pending&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;</span></span><br><span class="line"><span class="language-xml">          Resolve</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> send(&#x27;REJECT&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">          type=&quot;button&quot;</span></span><br><span class="line"><span class="language-xml">          disabled=&#123;!state.matches(&#x27;pending&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;</span></span><br><span class="line"><span class="language-xml">          Reject</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex flex-col justify-center items-center h-screen&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Component</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The application reacts to your button clicks. Each button emits its own event, which the machine uses as input. The machine the transitions to the new state, and the web app re-renders.</p><p><img src="../images/missing-state/resolved.gif" alt="The app in action"></p><blockquote class="pullquote"><p>üéÅ You can find the source code for this blog post in the repo <a href="https://github.com/bahmutov/xstate-load-state">bahmutov&#x2F;xstate-load-state</a>.</p></blockquote><p>How can we verify that application is working correctly? We can write a Cypress test to click the button and check the page.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;resolves the promise (wrong question)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Loading...&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Resolve&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Loading...&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test uses a negative assertion <code>cy.contains(&#39;Loading...&#39;).should(&#39;not.exist&#39;)</code> and while it passes, it does not tell us if the state machine is working correctly.</p><p><img src="../images/missing-state/no-loading.png" alt="The test passes"></p><p>For example, the application might wire the state machine incorrectly. On clicking the &quot;Resolve&quot; button it might go to the &quot;Rejected&quot; state, yet our test will still pass.</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  pending: &#123;</span><br><span class="line">    on: &#123;</span><br><span class="line"><span class="deletion">-     RESOLVE: &#123; target: &#x27;resolved&#x27; &#125;,</span></span><br><span class="line"><span class="addition">+     RESOLVE: &#123; target: &#x27;rejected&#x27; &#125;,</span></span><br><span class="line">      REJECT: &#123; target: &#x27;rejected&#x27; &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><img src="../images/missing-state/wrong1.png" alt="The test passes but the application is incorrect"></p><p>Ughh, our test gives us false confidence. The application is broken, yet the test is green. It asked a wrong question. Remember that there 3 three streets, and your negative assertion only eliminates one of them.</p><p>What if we ask a negative assertion about the &quot;Rejected&quot; message? That still does not eliminate all the possible problem states.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;resolves the promise (more wrong questions)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Loading it...&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Resolve&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Promise Rejected&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The negative assertion <code>cy.contains(&#39;Promise Rejected&#39;).should(&#39;not.exist&#39;)</code> only helps us IF we are in the binary situation &quot;Promise Rejected | Promise Resolved&quot;. If the application wires the states incorrectly, we could still be at the loading state! Let&#39;s break the app by removing the &quot;onClick&quot; handler from the &quot;Resolve&quot; button.</p><figure class="highlight diff"><figcaption><span>App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  &lt;button</span><br><span class="line"><span class="deletion">-   onClick=&#123;() =&gt; send(&#x27;RESOLVE&#x27;)&#125;</span></span><br><span class="line">    type=&quot;button&quot;</span><br><span class="line">    disabled=&#123;!state.matches(&#x27;pending&#x27;)&#125;</span><br><span class="line">  &gt;</span><br><span class="line">    Resolve</span><br><span class="line">  &lt;/button&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/missing-state/still-loading.png" alt="The app is still loading, yet we asked about the rejected state"></p><p>Negative assertions only work if we are for sure in a binary situation. The best way in our situation to ensure this is to eliminate states, even with negative assertions.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;resolves the promise after no longer loading&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Loading it...&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Resolve&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Loading it...&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Promise Rejected&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Now the test correctly detects the broken application.</p><p><img src="../images/missing-state/fails1.png" alt="The test uses negative assertion correctly"></p><h3><span id="test-the-state">Test the state</span></h3><p>While checking the UI is nice, we can go beyond it. We can expose the current state from the application during end-to-end tests by checking the presense of <code>window.Cypress</code> property. Then our test assertions can be a lot more powerful.</p><figure class="highlight diff"><figcaption><span>App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  const Component = () =&gt; &#123;</span><br><span class="line">    const [state, send] = useMachine(promiseMachine)</span><br><span class="line"></span><br><span class="line"><span class="addition">+   if (window.Cypress) &#123;</span></span><br><span class="line"><span class="addition">+     window.state = state</span></span><br><span class="line"><span class="addition">+   &#125;</span></span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>From the test we can get to the <code>window.state</code> object and directly ask it.</p><figure class="highlight js"><figcaption><span>spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;moves away from the pending state&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Resolve&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  <span class="comment">// observe the state machine</span></span><br><span class="line">  <span class="comment">// Tip: have to use a should(callback)</span></span><br><span class="line">  <span class="comment">// because window.state is replaced when the state changes</span></span><br><span class="line">  <span class="comment">// see https://on.cypress.io/retry-ability</span></span><br><span class="line">  cy.<span class="title function_">window</span>().<span class="title function_">should</span>(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(win.<span class="property">state</span>.<span class="title function_">matches</span>(<span class="string">&#x27;pending&#x27;</span>)).<span class="property">to</span>.<span class="property">be</span>.<span class="property">false</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// now check if the promise is resolved or rejected</span></span><br><span class="line">  <span class="comment">// even better, check for the correct state</span></span><br><span class="line">  cy.<span class="title function_">window</span>().<span class="title function_">should</span>(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(win.<span class="property">state</span>.<span class="title function_">matches</span>(<span class="string">&#x27;resolved&#x27;</span>)).<span class="property">to</span>.<span class="property">be</span>.<span class="property">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/missing-state/state-fails1.png" alt="The test checks the state machine"></p><p>So remember, instead of checking if you no longer can see the ocean, check if you are on the right street. And maybe then check if you for real cannot see the ocean any more.</p><p>So by using positive assertions, or by using negative assertions in binary situations, we can correctly test everything? Almost - as long as the state machine is correct.</p><h2><span id="the-missing-state">The missing state</span></h2><p>When someone gives you directions, they might misremember, or assume you know the details. A fork in the road might be more like a T intersection. Ocean ave might become Main street <em>before</em> Second street branches out.</p><p><img src="../images/missing-state/changes-name.png" alt="Ocean ave becomes Main ave slightly before Second street fork"></p><p>The above situation is dangerous to the traveler. They might think they are safe as they see &quot;Main street&quot; signs, and then accidentally continue down Second street. Asking &quot;This is NOT Second street, is it?&quot; gives them a false sense of security, as they do not know that the answer might change as they keep walking - the fork is still coming up!</p><p>The states &quot;Ocean ave &#x3D; before the road fork&quot;, &quot;Main ave &#x3D; after the road fork&quot; do not cover the real world. The part between the street changing the name from Ocean ave to Main st, but before Second st branches out is ... weird. It is not covered by our description at the start of the walk. Asking questions (even good ones, like &quot;Are we on Main street?&quot;) does not gives us enough information. Even when the answer is &quot;Yes&quot;, we are still in danger, and we can turn to Second street accidentally.</p><p>This part of the road is missing its own state. Our journey is really three states as shown in the next diagram: before the street changes its name, after the name change, but before the fork, and after the fork.</p><p><img src="../images/missing-state/three-states.png" alt="We need to use three states to show the journey"></p><h3><span id="testing-an-app-with-a-missing-state">Testing an app with a missing state</span></h3><p>Here is how a missing state can happen in your web application. We will take our &quot;Promise&quot; state machine which works very well, and then we will try to implement &quot;application loading&quot; state machine. We will start by what we think is a reasonable first step - emit the event &quot;Reject&quot; after a short delay.</p><figure class="highlight diff"><figcaption><span>App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  &lt;button</span><br><span class="line"><span class="deletion">-   onClick=&#123;() =&gt; send(&#x27;RESOLVE&#x27;)&#125;</span></span><br><span class="line"><span class="addition">+   onClick=&#123;() =&gt; setTimeout(() =&gt; send(&#x27;REJECT&#x27;), 70)&#125;</span></span><br><span class="line">    type=&quot;button&quot;</span><br><span class="line">    disabled=&#123;!state.matches(&#x27;pending&#x27;)&#125;</span><br><span class="line">  &gt;</span><br><span class="line">    Resolve</span><br><span class="line">  &lt;/button&gt;</span><br></pre></td></tr></table></figure><p>Adding a 70ms delay should not change the app too much, right? I hope our tests catch the error though - we are sending the &quot;REJECT&quot; event to the app instead of &quot;RESOLVE&quot;. Let&#39;s see our test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;A negative assertion and app delay&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Loading it...&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Reject&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Promise Resolved&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We assume that clicking the button &quot;Reject&quot; moves the app out of &quot;pending&quot; state to the &quot;Rejected | Resolved&quot; state. Now that we have binary option to check, we can use the negative assertion <code>cy.contains(&#39;Promise Resolved&#39;).should(&#39;not.exist&#39;)</code> to correctly test the app.</p><p><img src="../images/missing-state/delay.png" alt="The test passes even though it should have failed"></p><p>The test does not catch the problem. The assumption that we are no longer in the &quot;pending&quot; state immediately after clicking the button &quot;Reject&quot; is false - the application stays in that state during <code>onClick=&#123;() =&gt; setTimeout(() =&gt; send(&#39;RESOLVE&#39;), 70)&#125;</code> duration.</p><p>I see this error a lot. A widget is loading, and the test checks if an error message is shown. There is no error message, so the test continues. But that is wrong, since the app is still loading. Then the app finishes the loading and displays an error, but it is too late for the test to detect.</p><p>So what&#39;s a better way?</p><ol><li>Explicitly model the &quot;loading&quot; state here. Let&#39;s change our state machine a little.</li></ol><figure class="highlight js"><figcaption><span>loadingMachine.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createMachine &#125; <span class="keyword">from</span> <span class="string">&#x27;xstate&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> loadingMachine = <span class="title function_">createMachine</span>(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;loading&#x27;</span>,</span><br><span class="line">  <span class="attr">initial</span>: <span class="string">&#x27;pending&#x27;</span>,</span><br><span class="line">  <span class="attr">states</span>: &#123;</span><br><span class="line">    <span class="attr">pending</span>: &#123;</span><br><span class="line">      <span class="attr">on</span>: &#123;</span><br><span class="line">        <span class="attr">LOAD</span>: &#123;</span><br><span class="line">          <span class="attr">target</span>: <span class="string">&#x27;loading&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">loading</span>: &#123;</span><br><span class="line">      <span class="attr">on</span>: &#123;</span><br><span class="line">        <span class="attr">RESOLVE</span>: &#123; <span class="attr">target</span>: <span class="string">&#x27;resolved&#x27;</span> &#125;,</span><br><span class="line">        <span class="attr">REJECT</span>: &#123; <span class="attr">target</span>: <span class="string">&#x27;rejected&#x27;</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resolved</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;final&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rejected</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;final&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let&#39;s visualize this tate machine</p><p><img src="../images/missing-state/loading-machine-viz.png" alt="The above state machine visualized"></p><ol start="2"><li>Have an explicit way to check the current state from the test. This way the test can check if the application is still loading the data.</li></ol><p>For example, you could set class or data attribute</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;mb-5 self-center&quot;</span>&gt;</span><br><span class="line">  &#123;<span class="comment">/** You can listen to what state the service is in */</span>&#125;</span><br><span class="line">  &#123;state.<span class="title function_">matches</span>(<span class="string">&#x27;pending&#x27;</span>) &amp;&amp; <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">data-state</span>=<span class="string">&quot;initial&quot;</span>&gt;</span>Initial<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#125;</span><br><span class="line">  &#123;state.<span class="title function_">matches</span>(<span class="string">&#x27;loading&#x27;</span>) &amp;&amp; <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">data-state</span>=<span class="string">&quot;loading&quot;</span>&gt;</span>Loading it...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#125;</span><br><span class="line">  &#123;state.<span class="title function_">matches</span>(<span class="string">&#x27;rejected&#x27;</span>) &amp;&amp; (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">data-state</span>=<span class="string">&quot;loaded&quot;</span>&gt;</span>Promise Rejected<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  )&#125;</span><br><span class="line">  &#123;state.<span class="title function_">matches</span>(<span class="string">&#x27;resolved&#x27;</span>) &amp;&amp; (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">data-state</span>=<span class="string">&quot;loaded&quot;</span>&gt;</span>Promise Resolved<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  )&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>Then the test can explicitly check how the state moved along the expected transitions.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;Checks the state&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-state=&quot;initial&quot;]&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Reject&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-state=&quot;loaded&quot;]&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Promise Resolved&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Another alternative to checking the page, is to check the underlying state of the state machine. We can access the state machine from the test, just like before; the application code needs to put the state object on the <code>window</code> object. I suggest adding a custom command for checking the expected state.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cypress</span>.<span class="property">Commands</span>.<span class="title function_">add</span>(<span class="string">&#x27;reachedState&#x27;</span>, <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">`expecting **<span class="subst">$&#123;state&#125;</span>** state`</span>)</span><br><span class="line">  cy.<span class="title function_">window</span>(&#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;).<span class="title function_">should</span>(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (win.<span class="property">state</span>.<span class="title function_">matches</span>(state) !== <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Expected state &quot;<span class="subst">$&#123;state&#125;</span>&quot;, got &quot;<span class="subst">$&#123;win.state.value&#125;</span>&quot;`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;Checks the state machine&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">reachedState</span>(<span class="string">&#x27;pending&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Reject&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  <span class="comment">// optional: check the intermediate state</span></span><br><span class="line">  cy.<span class="title function_">reachedState</span>(<span class="string">&#x27;loading&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">reachedState</span>(<span class="string">&#x27;rejected&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Promise Resolved&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>For example, in our case it catches the transition to the wrong state.</p><p><img src="../images/missing-state/wrong-state.png" alt="The application gets into an unexpected state"></p><p>Finally, after fixing the application code, we have a passing test</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;Checks the state machine&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">reachedState</span>(<span class="string">&#x27;pending&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Reject&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  <span class="comment">// optional: check the intermediate state</span></span><br><span class="line">  cy.<span class="title function_">reachedState</span>(<span class="string">&#x27;loading&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">reachedState</span>(<span class="string">&#x27;rejected&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Promise Rejected&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/missing-state/states.gif" alt="The passing test for the fixed application"></p><p>The test is tight - it will be hard for the application to be broken with this kind of test that confirms the app&#39;s state transitions step by step using positive assertions.</p><h2><span id="use-better-questions">Use better questions</span></h2><ul><li>when getting lost in a city, ask which street intersection you are on. That gives you a unique precise position, eliminating all other possibilities.</li><li>when testing a web application and the user flow, use properties that eliminate as many other states as possible. For example, I love using <a href="https://on.cypress.io/location">cy.location</a> to know when the application has transitioned to the new state. A positive assertion eliminates a lot more possible states than a negative assertion.</li></ul><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/negative-assertions/" title="Be Careful With Negative Assertions">Be Careful With Negative Assertions</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine you got lost in a foreign town. You see someone and ask them a question in whatever little foreign language you have: &amp;quot;what 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Compare The Response To A Fixture</title>
    <link href="https://glebbahmutov.com/blog/fixture-and-request/"/>
    <id>https://glebbahmutov.com/blog/fixture-and-request/</id>
    <published>2022-03-24T04:00:00.000Z</published>
    <updated>2022-03-24T13:38:39.072Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine a situation: you need to make an HTTP request from your Cypress test and compare the result to a JSON object stored in a fixture file. There are several ways of writing such test.</p><h2><span id="using-cyfixture">Using cy.fixture</span></h2><p>We can load the fixture file when needed using <a href="https://on.cypress.io/fixture">cy.fixture</a> command. We can make the request first, then load the fixture file. Since the response <code>body</code> variable is in the lexical scope, we can use it to form the assertion.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;gives a response matching a fixture object&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;/sale&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">body</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">fixture</span>(<span class="string">&#x27;sale.json&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, body)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> always compare the JavaScript objects and arrays by value using the &quot;deep.equal&quot; assertion.</p><p>Of course, we can reverse the order and load the fixture before making the request using the <a href="https://on.cypress.io/request">cy.request</a> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;gives a response matching a fixture object, loads the fixture first&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">fixture</span>(<span class="string">&#x27;sale.json&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">sale</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">request</span>(<span class="string">&#x27;/sale&#x27;</span>)</span><br><span class="line">      .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">      .<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, sale)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="import-the-json-object">Import the JSON object</span></h2><p>Instead of loading the expected response object using <code>cy.fixture</code>, we can simply import or require it, letting the bundler load it for us.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sale <span class="keyword">from</span> <span class="string">&#x27;../fixtures/sale.json&#x27;</span></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;gives a response matching a fixture object loaded using import keyword&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;/sale&#x27;</span>).<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, sale)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>To be honest, this is my favorite way of loading JSON fixtures in my tests.</p><h2><span id="alias-and-test-context-property">Alias and test context property</span></h2><p>If we load the fixture from a hook, we can alias its value using <a href="https://on.cypress.io/as">cy.as</a> command. The aliases are then available as the test context properties of the &quot;this&quot; object in the <code>function () &#123; ... &#125;</code> callbacks.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">fixture</span>(<span class="string">&#x27;sale.json&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;sale&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;gives a response matching an alias set as a property&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;/sale&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, <span class="variable language_">this</span>.<span class="property">sale</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="load-a-fixture-once">Load a fixture once</span></h2><p>All aliases are reset before each test, thus in the example above I use <code>beforeEach</code> hook. This repeats loading the fixture again and again. We can optimize the load a little by using a <code>before</code> plus a local variable.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> loadedSale</span><br><span class="line"><span class="title function_">before</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">fixture</span>(<span class="string">&#x27;sale.json&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">sale</span>) =&gt;</span> &#123;</span><br><span class="line">    loadedSale = sale</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;gives a response matching a fixture loaded once&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;/sale&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, loadedSale)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If you really want to use <code>this.alias</code> syntax, you can even set the fixture as an alias from the local variable</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tempSale</span><br><span class="line"><span class="title function_">before</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">fixture</span>(<span class="string">&#x27;sale.json&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">sale</span>) =&gt;</span> &#123;</span><br><span class="line">    tempSale = sale</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">wrap</span>(tempSale).<span class="title function_">as</span>(<span class="string">&#x27;sale&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;gives a response matching a fixture reset from a local variable&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;/sale&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, <span class="variable language_">this</span>.<span class="property">sale</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="use-cypressenv-to-keep-data">Use Cypress.env to keep data</span></h2><p>We can also load the fixture once using the <code>before</code> hook and throw it into the <code>Cypress.env</code> object.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">before</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">fixture</span>(<span class="string">&#x27;sale.json&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">sale</span>) =&gt;</span></span><br><span class="line">    <span class="title class_">Cypress</span>.<span class="title function_">env</span>(<span class="string">&#x27;sale&#x27;</span>, sale),</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;uses sale from Cypress.env object&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;/sale&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, <span class="title class_">Cypress</span>.<span class="title function_">env</span>(<span class="string">&#x27;sale&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="use-cypress-data-session">Use cypress-data-session</span></h2><p>For all more advanced scenarios of loading and caching data, see <a href="https://github.com/bahmutov/cypress-data-session">cypress-data-session</a> plugin. In our case</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">dataSession</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;sale&#x27;</span>,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> cy.<span class="title function_">fixture</span>(<span class="string">&#x27;sale.json&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;matches the sale&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;/sale&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, <span class="variable language_">this</span>.<span class="property">sale</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Which only initializes the data once and keeps it in memory (or even shares it with other specs), and verifies that it is still valid and should not be recreated.</p><p><img src="../images/fixture-and-request/sale.png" alt="All the fixture and requests tests with the final cypress-data-session command"></p><p>I think this about covers it for now.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/import-cypress-fixtures/" title="Import Cypress fixtures">Import Cypress fixtures</a></li><li><a href="/blog/dynamic-tests-from-fixture/" title="Dynamic Tests From Cypress Fixture">Dynamic Tests From Cypress Fixture</a></li><li><a href="https://on.cypress.io/variables-and-aliases">Cypress Variables and Aliases Guide</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine a situation: you need to make an HTTP request from your Cypress test and compare the result to a JSON object stored in a fixture 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress Test-Driven Development Example</title>
    <link href="https://glebbahmutov.com/blog/cypress-tdd/"/>
    <id>https://glebbahmutov.com/blog/cypress-tdd/</id>
    <published>2022-03-21T04:00:00.000Z</published>
    <updated>2022-03-21T15:42:15.721Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="pullquote"><p>üéÅ You can find the pull request with the tests from this blog post in the branch <a href="https://github.com/bahmutov/cypress-workshop-basics/tree/implement-toggle-video">implement-toggle-video</a> of the repo <a href="https://github.com/bahmutov/cypress-workshop-basics">bahmutov&#x2F;cypress-workshop-basics</a>. The code can be seen in the pull request <a href="https://github.com/bahmutov/cypress-workshop-basics/pull/75">#75</a>.</p></blockquote><p>The step by step tests and the application changes described in this blog post are shown in my new video below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/xlc6yQLAqNg" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="the-application">The application</span></h2><p>In the workshop repository, I have a simple TodoMVC with the items stored by the backend server. Unfortunately, the application does not implement storing the &quot;completed&quot; item property. The user interface shows the item as completed, but when reloading the page, the completed status disappears.</p><p><img src="../images/cypress-tdd/complete.gif" alt="Todo item loses the completed status after the page reload"></p><h2><span id="the-testing-plan">The testing plan</span></h2><p>Let&#39;s implement this feature. While working on the feature I will follow the test-drive development practice. I will first write a failing Cypress test, then implement the application code to make the test green. To start testing, I first will plan my &quot;attack&quot; by looking at the application architecture. The application has the web page interface, which shows the data in the Veux data store. The data store is synced with the backend via REST API calls. My first test will verify the REST API is working correctly. Then I will test how the web application passes the &quot;completed&quot; property to the Veux data store. Finally, I will test the web page UI and confirm it calls the backend API by using the <a href="https://on.cypress.io/intercept">cy.intercept</a> command.</p><p><img src="../images/cypress-tdd/vue-vuex-rest.png" alt="The application layers and the order of testing and implementation steps"></p><h2><span id="the-api-test">The API test</span></h2><p>We first confirm that our backend supports changing the todo&#39;s &quot;completed&quot; property and correctly updates the database. We can write a <a href="https://www.cypress.io/blog/2017/11/07/add-gui-to-your-e2e-api-tests/">Cypress API test</a>. Cypress can be quite happily calling the HTTP endpoints and verifying the results, as the video below shows:</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/OWTrczUUVpA" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Let&#39;s write our test:</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;completes an item using API&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/reset&#x27;</span>, &#123; <span class="attr">todos</span>: [] &#125;)</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>).<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, [])</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>, &#123; <span class="attr">title</span>: <span class="string">&#x27;first&#x27;</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.include&#x27;</span>, &#123; <span class="attr">title</span>: <span class="string">&#x27;first&#x27;</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">request</span>(<span class="string">&#x27;PATCH&#x27;</span>, <span class="string">`/todos/<span class="subst">$&#123;id&#125;</span>`</span>, &#123; <span class="attr">completed</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">        .<span class="title function_">its</span>(<span class="string">&#x27;status&#x27;</span>)</span><br><span class="line">        .<span class="title function_">should</span>(<span class="string">&#x27;eq&#x27;</span>, <span class="number">200</span>)</span><br><span class="line">      cy.<span class="title function_">request</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">`/todos/<span class="subst">$&#123;id&#125;</span>`</span>)</span><br><span class="line">        .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">        .<span class="title function_">should</span>(<span class="string">&#x27;deep.equals&#x27;</span>, &#123; id, <span class="attr">title</span>: <span class="string">&#x27;first&#x27;</span>, <span class="attr">completed</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-tdd/api-test.png" alt="The API test"></p><p>The above test uses the <a href="https://on.cypress.io/request">cy.request</a> command to make HTTP calls. We first create an item using the <code>POST /todos &lt;item&gt;</code> call. Then we verify the todos by asking the server using <code>GET /todos</code>. We then use the REST convention to <code>PATCH /todos/:id &lt;changed properties&gt;</code>. Finally, we verify the server has saved the changed &quot;completed&quot; property by request the Todo item and confirmed its properties.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">request</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">`/todos/<span class="subst">$&#123;id&#125;</span>`</span>)</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;deep.equals&#x27;</span>, &#123; id, <span class="attr">title</span>: <span class="string">&#x27;first&#x27;</span>, <span class="attr">completed</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> while running an API test, the application is not visited, leaving the entire iframe empty. You can use it to display the requests and responses by using the <a href="https://github.com/bahmutov/cy-api">cy-api plugin</a>.</p><h2><span id="the-ui-to-vuex-data-store-test">The UI to Vuex data store test</span></h2><p>The REST part was easy - our server already supports updating an object using the <code>PATCH</code> method. Can our application call these methods? Let&#39;s write a test to first confirm that the UI updates the internal data store. To access the internal Vuex data store, we can expose it to the test by setting it as a <code>window</code> property.</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// our application instance</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">app</span> = app</span><br></pre></td></tr></table></figure><p>Then from the test we can check the data store using the <a href="https://on.cypress.io/window">cy.window</a> and <a href="https://on.cypress.io/its">cy.its</a> commands.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">window</span>()</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;app.$store.state.todos&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The entire test</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;updates the Vuex store&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/reset&#x27;</span>, &#123; <span class="attr">todos</span>: [] &#125;)</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>, &#123; <span class="attr">title</span>: <span class="string">&#x27;first&#x27;</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list li&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    .<span class="title function_">first</span>()</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;not.have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">    .<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;not.be.checked&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo-list li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">window</span>()</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;app.$store.state.todos&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="number">0</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-tdd/store.png" alt="Testing the updated Vuex data store"></p><p><strong>Tip:</strong> notice that the above test has a combination of API calls (to reset all existing todos and to create the first todo) and page commands (to verify the list of todos). I like using REST API calls to set the data really quickly.</p><p>Super, our application UI does update the data store. But does the store update the backend? Let&#39;s make the test fail.</p><h2><span id="observe-the-network-test">Observe the network test</span></h2><p>Let&#39;s spy on the network traffic to confirm if the Vuex data store calls the backend with <code>PATCH</code> method.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;toggles an item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/reset&#x27;</span>, &#123; <span class="attr">todos</span>: [] &#125;)</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>, &#123; <span class="attr">title</span>: <span class="string">&#x27;first&#x27;</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">intercept</span>(<span class="string">&#x27;PATCH&#x27;</span>, <span class="string">&#x27;/todos/*&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;patch&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list li&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    .<span class="title function_">first</span>()</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;not.have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">    .<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;not.be.checked&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@patch&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;request.body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, &#123; <span class="attr">completed</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-tdd/fails.png" alt="The application never makes the expected PATCH call"></p><p>Ok, our Vuex data store that syncs the data with the backend never calls the backend to update the Todo item when we click the &quot;toggle&quot; checkbox. Let&#39;s implement it in the <code>app.js</code></p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add toggleTodo to Vuex actions</span></span><br><span class="line"><span class="title function_">toggleTodo</span>(<span class="params">&#123; commit &#125;, todo</span>) &#123;</span><br><span class="line">  <span class="title function_">track</span>(<span class="string">&#x27;todo.toggle&#x27;</span>, todo.<span class="property">title</span>)</span><br><span class="line"></span><br><span class="line">  axios</span><br><span class="line">    .<span class="title function_">patch</span>(<span class="string">`/todos/<span class="subst">$&#123;todo.id&#125;</span>`</span>, &#123; <span class="attr">completed</span>: !todo.<span class="property">completed</span> &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;toggled todo&#x27;</span>, todo.<span class="property">id</span>)</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;TOGGLE_TODO&#x27;</span>, todo)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>The test turns green.</p><p><img src="../images/cypress-tdd/green.png" alt="Now the application updates the server via a PATCH call"></p><p>We can even confirm that clicking the item again sends the 2nd call to clear the property</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;toggles an item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/reset&#x27;</span>, &#123; <span class="attr">todos</span>: [] &#125;)</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>, &#123; <span class="attr">title</span>: <span class="string">&#x27;first&#x27;</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">intercept</span>(<span class="string">&#x27;PATCH&#x27;</span>, <span class="string">&#x27;/todos/*&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;patch&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list li&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    .<span class="title function_">first</span>()</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;not.have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">    .<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;not.be.checked&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@patch&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;request.body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, &#123; <span class="attr">completed</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// toggle back</span></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo-list li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@patch&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;request.body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, &#123; <span class="attr">completed</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo-list li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="the-final-test">The final test</span></h2><p>Let&#39;s put the final test together that reloads the page and checks the completed property is still there.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;stays completed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// reset + create the first todo</span></span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/reset&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">todos</span>: [&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">&#x27;first&#x27;</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;]</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list li&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    .<span class="title function_">first</span>()</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;not.have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">    .<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;not.be.checked&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo-list li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">    .<span class="title function_">wait</span>(<span class="number">1000</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;) <span class="comment">// for clarity</span></span><br><span class="line">  <span class="comment">// the item stays completed</span></span><br><span class="line">  cy.<span class="title function_">reload</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo-list li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-tdd/reload.gif" alt="The final test ensures the completed items stay completed after a page reload"></p><p>Happy Testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;pullquote&quot;&gt;&lt;p&gt;üéÅ You can find the pull request with the tests from this blog post in the branch &lt;a href=&quot;https://github.c
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>A Better cy.each Iteration</title>
    <link href="https://glebbahmutov.com/blog/better-cy-each/"/>
    <id>https://glebbahmutov.com/blog/better-cy-each/</id>
    <published>2022-03-16T04:00:00.000Z</published>
    <updated>2022-03-16T00:34:57.263Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="pullquote"><p>üéÅ You can find these tests in the repo <a href="https://github.com/bahmutov/better-cypress-each-example">bahmutov&#x2F;better-cypress-each-example</a>.</p></blockquote><p>Imagine you have an application where you have bunch of table rows. After you click a button in a row, it reveals a random number from 0 to 9. Your goal is to click the buttons until you get the number 7.</p><p><img src="../images/better-cy-each/demo.gif" alt="Clicking on the button"></p><p>Can we write a Cypress test that would iterate over potentially all buttons, but stop when it finds 7?</p><h2><span id="cypress-cyeach-command">Cypress cy.each command</span></h2><p>Cypress has <a href="https://on.cypress.io/each">cy.each</a> command. This command is nice for doing the same set of actions for each element. For example, you can quickly click every button on the page</p><figure class="highlight js"><figcaption><span>cypress/integration/spec01.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;clicks every button&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// https://on.cypress.io/each</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;tbody button&#x27;</span>).<span class="title function_">each</span>(<span class="function">(<span class="params">$button</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">wrap</span>($button).<span class="title function_">click</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/better-cy-each/spec01.gif" alt="Clicking each button"></p><p>You can see me writing the above spec in the video <a href="https://www.youtube.com/watch?v=M0RxEeJaq_E">Iterate Over Table Rows And Click A Button In Each Row Using cy.each Command</a> and below:</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/M0RxEeJaq_E" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>The test does not stop, even if the number 7 is clearly visible. The test does not even <em>wait</em> for the number to be revealed before moving to the next table row and clicking the next button. Not good. We can make the test wait, of course. We need to grab the next cell and confirm it shows a single digit number.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec02.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;clicks every button waits for the number&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;tbody button&#x27;</span>).<span class="title function_">each</span>(<span class="function">(<span class="params">$button</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">wrap</span>($button)</span><br><span class="line">      .<span class="title function_">click</span>()</span><br><span class="line">      .<span class="title function_">parent</span>()</span><br><span class="line">      .<span class="title function_">parent</span>()</span><br><span class="line">      .<span class="title function_">contains</span>(<span class="string">&#x27;td&#x27;</span>, <span class="regexp">/\d/</span>)</span><br><span class="line">      .<span class="title function_">invoke</span>(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">s</span>) =&gt;</span> cy.<span class="title function_">log</span>(<span class="string">`got <span class="subst">$&#123;s&#125;</span>`</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>But what about stopping if we see the number 7? We still to implement this.</p><h2><span id="stop-the-iteration-early">Stop the iteration early</span></h2><p>If you use a simple synchronous callbacks, you can return <code>false</code> to stop the iteration early. For example, the next step that iterates over strings will stop when it sees the 3rd string.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec03.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;cy.each stops iteration when returning false&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> fruits = [<span class="string">&#x27;apples&#x27;</span>, <span class="string">&#x27;bananas&#x27;</span>, <span class="string">&#x27;oranges&#x27;</span>, <span class="string">&#x27;pears&#x27;</span>]</span><br><span class="line">  cy.<span class="title function_">wrap</span>(fruits)</span><br><span class="line">    .<span class="title function_">each</span>(<span class="function">(<span class="params">fruit, k</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(k, fruit)</span><br><span class="line">      <span class="keyword">if</span> (k === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      cy.<span class="title function_">log</span>(<span class="string">&#x27;fruit&#x27;</span>, fruit)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// cy.each yields the original subject</span></span><br><span class="line">    <span class="comment">// even if you stop the iteration early</span></span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, fruits)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><center><iframe width="560" height="315" src="https://www.youtube.com/embed/lhb5Lt9RwE4" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Can we return or yield <code>false</code> to stop the iteration if we use Cypress commands in the <code>each(callback)</code> function? Something like this does NOT work:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// üö® JUST FOR DEMO, INCORRECT TEST</span></span><br><span class="line"><span class="comment">// this does not stop the iteration</span></span><br><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;tbody button&#x27;</span>).<span class="title function_">each</span>(<span class="function">(<span class="params">$button, k</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;button&#x27;</span>, k)</span><br><span class="line">  cy.<span class="title function_">wrap</span>($button)</span><br><span class="line">    .<span class="title function_">click</span>()</span><br><span class="line">    .<span class="title function_">parent</span>()</span><br><span class="line">    .<span class="title function_">parent</span>()</span><br><span class="line">    .<span class="title function_">contains</span>(<span class="string">&#x27;td&#x27;</span>, <span class="regexp">/\d/</span>)</span><br><span class="line">    .<span class="title function_">invoke</span>(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="title class_">Number</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> n === <span class="number">7</span> ? <span class="literal">false</span> : <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Unfortunately, the above test does not work. It quickly iterates over <em>all</em> buttons, queuing up all Cypress commands inside the <code>each(callback)</code>. The queue after finding the buttons looks like this:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- visit</span><br><span class="line">- get</span><br><span class="line">- wrap button 1</span><br><span class="line">- click</span><br><span class="line">- ....</span><br><span class="line">- wrap button 2</span><br><span class="line">- click</span><br><span class="line">- ....</span><br><span class="line">- wrap button 3</span><br><span class="line">- click</span><br><span class="line">- ....</span><br><span class="line">- wrap button 16</span><br><span class="line">- click</span><br><span class="line">- ....</span><br></pre></td></tr></table></figure><p>Even if you yield <code>false</code> from the first button, there are all the commands already queued up and they cannot be removed. We need a way to <em>avoid</em> queuing unnecessary commands. To do this, we can queue <code>cy.then(callback)</code> inside the <code>each(callback)</code>. Inside the <code>then(callback)</code> we can decide if we need to queue up more Cypress commands, or simply do nothing. Instead of returning or yielding <code>false</code>, we will use a local variable to signal an early exit.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec04.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;stops when it sees 7&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> shouldStop = <span class="literal">false</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;tbody button&#x27;</span>)</span><br><span class="line">    .<span class="title function_">each</span>(<span class="function">(<span class="params">$button, k</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (shouldStop) &#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;button&#x27;</span>, k)</span><br><span class="line">        cy.<span class="title function_">wrap</span>($button)</span><br><span class="line">          .<span class="title function_">click</span>()</span><br><span class="line">          .<span class="title function_">parent</span>()</span><br><span class="line">          .<span class="title function_">parent</span>()</span><br><span class="line">          .<span class="title function_">contains</span>(<span class="string">&#x27;td&#x27;</span>, <span class="regexp">/\d/</span>)</span><br><span class="line">          .<span class="title function_">invoke</span>(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">          .<span class="title function_">then</span>(<span class="title class_">Number</span>)</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (n === <span class="number">7</span>) &#123;</span><br><span class="line">              shouldStop = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// cy.each yields the original subject</span></span><br><span class="line">    <span class="comment">// even if you stop the iteration early</span></span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">16</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You can see the derivation of the above test in the video <a href="https://www.youtube.com/watch?v=G4xs9_cAm2c">Stop cy.each Iteration When Using Cypress Commands Inside The Callback Function</a> and below:</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/G4xs9_cAm2c" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p><strong>Tip:</strong> in the video, I use the <a href="https://github.com/bahmutov/cypress-command-chain">cypress-command-chain</a> to visualize the already queued commands. Read the blog post <a href="/blog/visualize-cypress-command-queue/" title="Visualize Cypress Command Queue">Visualize Cypress Command Queue</a> for more details.</p><h2><span id="reusable-each-function">Reusable each function</span></h2><p>The boilerplate logic for iteration and early exit can be abstracted into a library. In fact, it looks so much like my recursive iteration in the plugin <a href="https://github.com/bahmutov/cypress-recurse">bahmutov&#x2F;cypress-recurse</a> that I just added the <code>each</code> as one of its features. Import the <code>each</code> into your spec and provide the callback function and the optional predicate function that tells <code>each</code> when to stop. Without the predicate function, it simply iterates over the each subject item. To stop early, for example when we see the number 7, we write the test like this one:</p><figure class="highlight js"><figcaption><span>cypress/integration/spec05.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/bahmutov/cypress-recurse</span></span><br><span class="line"><span class="keyword">import</span> &#123; each &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-recurse&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;stops when it sees 7 using each from cypress-recurse&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;tbody button&#x27;</span>).<span class="title function_">then</span>(</span><br><span class="line">    <span class="title function_">each</span>(</span><br><span class="line">      <span class="function">(<span class="params">$button</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cy</span><br><span class="line">          .<span class="title function_">wrap</span>($button)</span><br><span class="line">          .<span class="title function_">click</span>()</span><br><span class="line">          .<span class="title function_">parent</span>()</span><br><span class="line">          .<span class="title function_">parent</span>()</span><br><span class="line">          .<span class="title function_">contains</span>(<span class="string">&#x27;td&#x27;</span>, <span class="regexp">/\d/</span>)</span><br><span class="line">          .<span class="title function_">invoke</span>(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">          .<span class="title function_">then</span>(<span class="title class_">Number</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">n</span>) =&gt;</span> n === <span class="number">7</span>, <span class="comment">// predicate function</span></span><br><span class="line">    ),</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We use the <code>each</code> function to create the callback to the <code>cy.then</code> callback which will yield the list of items to iterate over. This is how the test looks in action:</p><p><img src="../images/better-cy-each/stop-each.gif" alt="Stop the iteration when we see the number 7"></p><p>You can see me writing the above test in the video <a href="https://www.youtube.com/watch?v=a-LErnTG1lU">Use each Function From cypress-recurse Plugin To Iterate And Stop</a> or below:</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/a-LErnTG1lU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="replace-the-cyeach-command">Replace the cy.each command</span></h2><p>Finally, we can replace the existing <code>cy.each</code> command with the <code>each</code> from <code>cypress-recurse</code>. Here is how the spec could do this.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec06.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/bahmutov/cypress-recurse</span></span><br><span class="line"><span class="keyword">import</span> &#123; each &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-recurse&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Cypress</span>.<span class="property">Commands</span>.<span class="title function_">overwrite</span>(</span><br><span class="line">  <span class="string">&#x27;each&#x27;</span>,</span><br><span class="line">  <span class="function">(<span class="params">originalFn, items, itemCallback, stopPredicate</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">each</span>(itemCallback, stopPredicate)(items)</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;overwrites cy.each to find 7 and stop&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;tbody button&#x27;</span>).<span class="title function_">each</span>(</span><br><span class="line">    <span class="function">(<span class="params">$button</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> cy</span><br><span class="line">        .<span class="title function_">wrap</span>($button)</span><br><span class="line">        .<span class="title function_">click</span>()</span><br><span class="line">        .<span class="title function_">parent</span>()</span><br><span class="line">        .<span class="title function_">parent</span>()</span><br><span class="line">        .<span class="title function_">contains</span>(<span class="string">&#x27;td&#x27;</span>, <span class="regexp">/\d/</span>)</span><br><span class="line">        .<span class="title function_">invoke</span>(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="title class_">Number</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">n</span>) =&gt;</span> n === <span class="number">7</span>,</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Watch the video <a href="https://www.youtube.com/watch?v=8LcTNeILQtQ">Overwrite The cy.each Command</a> to see me writing the above test.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;pullquote&quot;&gt;&lt;p&gt;üéÅ You can find these tests in the repo &lt;a href=&quot;https://github.com/bahmutov/better-cypress-each-example&quot;&gt;b
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress Lighthouse Example</title>
    <link href="https://glebbahmutov.com/blog/cypress-lighthouse/"/>
    <id>https://glebbahmutov.com/blog/cypress-lighthouse/</id>
    <published>2022-03-10T05:00:00.000Z</published>
    <updated>2022-03-10T21:19:02.359Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="pullquote"><p>You can find the Cypress tests shown in this blog post in the repo <a href="https://github.com/bahmutov/cypress-lighthouse-example">bahmutov&#x2F;cypress-lighthouse-example</a>.</p></blockquote><p>Let&#39;s see how fast my blog <a href="https://glebbahmutov.com/blog/">https://glebbahmutov.com/blog/</a> loads in the browser. I will use Cypress to visit the site and use a plugin <a href="https://github.com/mfrachet/cypress-audit/tree/master/packages/lighthouse">@cypress-audit&#x2F;lighthouse</a> to report the performance metrics.</p><p>In the tests repository, install Cypress and the plugin</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress @cypress-audit/lighthouse</span><br><span class="line">+ cypress@9.5.1</span><br><span class="line">+ @cypress-audit/lighthouse@1.2.0</span><br></pre></td></tr></table></figure><p>Following the plugin&#39;s README, I have added its initialization</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cypress/support/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@cypress-audit/lighthouse/commands&#x27;</span></span><br><span class="line"><span class="comment">// cypress/plugins/index.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; lighthouse, prepareAudit &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@cypress-audit/lighthouse&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">on</span>(<span class="string">&#x27;before:browser:launch&#x27;</span>, <span class="function">(<span class="params">browser = &#123;&#125;, launchOptions</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">prepareAudit</span>(launchOptions)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">on</span>(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">lighthouse</span>: <span class="title function_">lighthouse</span>(), <span class="comment">// calling the function is important</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="the-test">The test</span></h2><p>The moment of truth. My test should visit the site and run the Lighthouse.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;@cypress-audit/lighthouse&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;loads fast enough&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">lighthouse</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Tip: I am using the special &quot;reference types&quot; comment to load the TypeScript definitions that come with the Lighthouse plugin to load the definition for its custom command <code>cy.lighthouse</code></p><p><img src="../images/lighthouse/sense.png" alt="Custom command cy.lighthouse IntelliSense"></p><p>Open Cypress Test Runner with <code>npx cypress open</code> and pick the Chrome browser to run the tests.</p><p><img src="../images/lighthouse/chrome.png" alt="Lighthouse audit requires Chrome browser to run"></p><p>Launch the spec file. Ughh, we definitely did not hit 100 across each category.</p><p><img src="../images/lighthouse/error.png" alt="Lighthouse audit with default parameters"></p><p>By default, Lighthouse audits in the mobile mode and requires each score to equal 100. Let&#39;s change the thresholds to match our situation.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;@cypress-audit/lighthouse&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;loads fast enough&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">lighthouse</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">performance</span>: <span class="number">60</span>,</span><br><span class="line">      <span class="attr">accessibility</span>: <span class="number">90</span>,</span><br><span class="line">      <span class="string">&#x27;best-practices&#x27;</span>: <span class="number">80</span>,</span><br><span class="line">      <span class="attr">seo</span>: <span class="number">80</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">formFactor</span>: <span class="string">&#x27;desktop&#x27;</span>,</span><br><span class="line">      <span class="attr">screenEmulation</span>: &#123;</span><br><span class="line">        <span class="attr">mobile</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">disable</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="title class_">Cypress</span>.<span class="title function_">config</span>(<span class="string">&#x27;viewportWidth&#x27;</span>),</span><br><span class="line">        <span class="attr">height</span>: <span class="title class_">Cypress</span>.<span class="title function_">config</span>(<span class="string">&#x27;viewportHeight&#x27;</span>),</span><br><span class="line">        <span class="attr">deviceScaleRatio</span>: <span class="number">1</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Now it is passing!</p><p><img src="../images/lighthouse/pass.png" alt="Running audit in Desktop mode"></p><p>A word of caution: Cypress by intercepting and forwarding all network requests and observing the page affects the performance measurements.</p><h2><span id="customize-the-report">Customize the report</span></h2><p>You can insert your own summary to the Lighthouse report before returning from the plugins file to the spec. Here is the custom code</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; lighthouse, prepareAudit &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@cypress-audit/lighthouse&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">on</span>(<span class="string">&#x27;before:browser:launch&#x27;</span>, <span class="function">(<span class="params">browser = &#123;&#125;, launchOptions</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">prepareAudit</span>(launchOptions)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">on</span>(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">lighthouse</span>(<span class="params">allOptions</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> txt</span><br><span class="line">      <span class="comment">// calling the function is important</span></span><br><span class="line">      <span class="keyword">const</span> lighthouseTask = <span class="title function_">lighthouse</span>(<span class="function">(<span class="params">lighthouseReport</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> lighthouseScoreText = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">let</span> lighthouseResult = lighthouseReport?.<span class="property">lhr</span>?.<span class="property">categories</span></span><br><span class="line">        <span class="keyword">let</span> lighthousePerformance =</span><br><span class="line">          <span class="string">&#x27;Performance: &#x27;</span> + lighthouseResult?.<span class="property">performance</span>?.<span class="property">score</span> + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        <span class="keyword">let</span> lighthouseAccessibility =</span><br><span class="line">          <span class="string">&#x27;Accessibility: &#x27;</span> + lighthouseResult?.<span class="property">accessibility</span>?.<span class="property">score</span> + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        <span class="keyword">let</span> lighthouseBestPractices =</span><br><span class="line">          <span class="string">&#x27;Best Practices: &#x27;</span> +</span><br><span class="line">          lighthouseResult?.[<span class="string">&#x27;best-practices&#x27;</span>]?.<span class="property">score</span> +</span><br><span class="line">          <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        <span class="keyword">let</span> lighthouseSEO = <span class="string">&#x27;SEO: &#x27;</span> + lighthouseResult?.<span class="property">seo</span>?.<span class="property">score</span> + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        lighthouseScoreText =</span><br><span class="line">          lighthousePerformance +</span><br><span class="line">          lighthouseAccessibility +</span><br><span class="line">          lighthouseBestPractices +</span><br><span class="line">          lighthouseSEO</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(lighthouseScoreText)</span><br><span class="line">        txt = lighthouseScoreText</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> report = <span class="keyword">await</span> <span class="title function_">lighthouseTask</span>(allOptions)</span><br><span class="line">      <span class="comment">// insert the text into the report returned the test</span></span><br><span class="line">      report.<span class="property">txt</span> = txt</span><br><span class="line">      <span class="keyword">return</span> report</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the spec file we want to log the <code>txt</code> property to the Command Log. Unfortunately, the default <code>cy.lighthouse()</code> command provided by the plugin ignores all properties returned by the <code>cy.task(&#39;lighthouse&#39;)</code> command, except for the <code>errors</code>. Thus we can call that task ourselves, rather than going through the plugin.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">it.<span class="title function_">only</span>(<span class="string">&#x27;shows the text report returned by from the plugins task&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> thresholds = &#123;</span><br><span class="line">    <span class="attr">performance</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="attr">accessibility</span>: <span class="number">90</span>,</span><br><span class="line">    <span class="string">&#x27;best-practices&#x27;</span>: <span class="number">80</span>,</span><br><span class="line">    <span class="attr">seo</span>: <span class="number">80</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> opts = &#123;</span><br><span class="line">    <span class="attr">formFactor</span>: <span class="string">&#x27;desktop&#x27;</span>,</span><br><span class="line">    <span class="attr">screenEmulation</span>: &#123;</span><br><span class="line">      <span class="attr">mobile</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">disable</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">width</span>: <span class="title class_">Cypress</span>.<span class="title function_">config</span>(<span class="string">&#x27;viewportWidth&#x27;</span>),</span><br><span class="line">      <span class="attr">height</span>: <span class="title class_">Cypress</span>.<span class="title function_">config</span>(<span class="string">&#x27;viewportHeight&#x27;</span>),</span><br><span class="line">      <span class="attr">deviceScaleRatio</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  cy.<span class="title function_">url</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">task</span>(<span class="string">&#x27;lighthouse&#x27;</span>, &#123;</span><br><span class="line">        url,</span><br><span class="line">        thresholds,</span><br><span class="line">        opts,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">report</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; errors, results, txt &#125; = report</span><br><span class="line">      <span class="comment">// our custom code in the plugins file has summarized the report</span></span><br><span class="line">      cy.<span class="title function_">log</span>(report.<span class="property">txt</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We now see the performance summary in the terminal</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Performance: 0.62</span><br><span class="line">Accessibility: 0.92</span><br><span class="line">Best Practices: 0.87</span><br><span class="line">SEO: 0.8</span><br></pre></td></tr></table></figure><p>We can see the same message text in the Cypress Command Log</p><p><img src="../images/lighthouse/summary.png" alt="Logged text from the Lighthouse report"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;pullquote&quot;&gt;&lt;p&gt;You can find the Cypress tests shown in this blog post in the repo &lt;a href=&quot;https://github.com/bahmutov/cyp
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="performance" scheme="https://glebbahmutov.com/blog/tags/performance/"/>
    
  </entry>
  
  <entry>
    <title>Code Coverage For Nextjs Application</title>
    <link href="https://glebbahmutov.com/blog/code-coverage-for-nextjs-app/"/>
    <id>https://glebbahmutov.com/blog/code-coverage-for-nextjs-app/</id>
    <published>2022-03-09T05:00:00.000Z</published>
    <updated>2022-03-14T22:14:37.686Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="pullquote"><p>üì¶ you can find the source code for this blog post in the repository <a href="https://github.com/bahmutov/next-ts-app">bahmutov&#x2F;next-ts-app</a> and the deployed application at <a href="https://next-ts-app-swart.vercel.app/">https://next-ts-app-swart.vercel.app/</a>. You can find the tests in the separate repo <a href="https://github.com/bahmutov/next-ts-app-tests">bahmutov&#x2F;next-ts-app-tests</a>.</p></blockquote><!-- toc --><ul><li><a href="#the-application">The application</a></li><li><a href="#instrument-when-necessary">Instrument when necessary</a></li><li><a href="#cypress-tests-with-code-coverage-report">Cypress tests with code coverage report</a></li><li><a href="#deployment-and-testing">Deployment and testing</a></li><li><a href="#tests-in-a-separate-repo">Tests in a separate repo</a><ul><li><a href="#cloning-the-app-repo-into-the-tests-repo">Cloning the app repo into the tests repo</a></li><li><a href="#fetching-the-right-application-source-code">Fetching the right application source code</a></li><li><a href="#code-coverage-on-circleci">Code coverage on CircleCI</a></li></ul></li><li><a href="#see-more">See more</a></li></ul><!-- tocstop --><h2><span id="the-application">The application</span></h2><p>I have scaffolded the Next.js application using the recommended command</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-next-app@latest --typescript</span><br><span class="line">+ next@12.1.0</span><br></pre></td></tr></table></figure><p>There are two modes for running the application: the dev and the prod. I would like to instrument the application in both modes. Thus I have added the following <code>.babelrc</code> file</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;next/babel&quot;],</span><br><span class="line">  &quot;plugins&quot;: [&quot;istanbul&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I have installed the <code>babel-plugin-istanbul@6</code> NPM module and if everything works, then starting <code>npm run dev</code> and opening <code>localhost:3000</code> shows the code coverage counters under <code>window.__coverage__</code> object</p><p><img src="../images/cc-for-nextjs/local.png" alt="Code was instrumented successfully"></p><h2><span id="instrument-when-necessary">Instrument when necessary</span></h2><p>We want to instrument the app when necessary, thus the simplest way is to look at an environment variable. I have renamed the <code>.babelrc</code> file into <code>.babelrc.js</code> file to include the Istanbul plugin only when the environment variable <code>INSTRUMENT_CODE</code> is present.</p><figure class="highlight js"><figcaption><span>.babelrc.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shouldInstrumentCode = <span class="string">&#x27;INSTRUMENT_CODE&#x27;</span> <span class="keyword">in</span> process.<span class="property">env</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;shouldInstrumentCode&#x27;</span>, shouldInstrumentCode)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>: [<span class="string">&quot;next/babel&quot;</span>],</span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>: shouldInstrumentCode ? [<span class="string">&quot;istanbul&quot;</span>] : []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="variable language_">module</span>.<span class="property">exports</span>, &#123;<span class="attr">depth</span>: <span class="literal">null</span>&#125;)</span><br></pre></td></tr></table></figure><p>I am using Vercel to run the application, and I set this variable to have the code coverage counters present in the deployed code.</p><p><img src="../images/cc-for-nextjs/var.png" alt="Set the INSTRUMENT_CODE variable to instrument the build on Vercel"></p><p><strong>Note:</strong> code coverage can add some overhead to the production application, so decide if it is worth it. You can still instrument the dev builds and run the end-to-end tests to collect the code coverage, while keeping the production build lean.</p><p><strong>Tip:</strong> to make sure the instrumentation really regenerates the bundles, delete the <code>.next</code> folder before running. In my <a href="https://github.com/bahmutov/next-ts-app/blob/main/package.json">package.json</a> I have the following scripts for running locally</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;next dev&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;next build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;next start&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;predev:instrumented&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rm -rf .nyc_output coverage .next&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev:instrumented&quot;</span><span class="punctuation">:</span> <span class="string">&quot;INSTRUMENT_CODE=1 next dev&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Locally I use <code>npm run dev:instrumented</code> to launch the instrumented application.</p><h2><span id="cypress-tests-with-code-coverage-report">Cypress tests with code coverage report</span></h2><p>Let&#39;s install Cypress test runner and its <a href="https://github.com/cypress-io/code-coverage">code coverage plugin</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress @cypress/code-coverage</span><br><span class="line">+ cypress@9.5.1</span><br><span class="line">+ @cypress/code-coverage@3.9.12</span><br></pre></td></tr></table></figure><p>I have registered the code coverage report in the plugins file</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// `on` is used to hook into various events Cypress emits</span></span><br><span class="line">  <span class="comment">// `config` is the resolved Cypress config</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;@cypress/code-coverage/task&#x27;</span>)(on, config)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and loaded the plugin from the support file</p><figure class="highlight js"><figcaption><span>cypress/support/index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@cypress/code-coverage/support&#x27;</span></span><br></pre></td></tr></table></figure><p>My test is simple: just visiting the site defined in the <code>cypress.json</code> as <code>baseUrl: http://localhost:3000</code></p><figure class="highlight ts"><figcaption><span>cypress/integration/spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;loads the home page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>In the Cypress Command Log I see the code coverage report messages.</p><p><img src="../images/cc-for-nextjs/messages.png" alt="The code coverage plugin logs its messages"></p><p>If you are not sure where the generated report is saved, open the DevTools console and click on the last message. It shows the report was written in the &quot;coverage&quot; folder.</p><p><img src="../images/cc-for-nextjs/report-path.png" alt="We should look for the coverage report in the coverage folder"></p><p>There are coverage reports in various formats</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ls -la coverage</span><br><span class="line">total 32</span><br><span class="line">drwxr-xr-x   7 glebbahmutov  staff   224 Mar  8 15:05 .</span><br><span class="line">drwxr-xr-x  21 glebbahmutov  staff   672 Mar  8 15:29 ..</span><br><span class="line">-rw-r--r--   1 glebbahmutov  staff  1022 Mar  8 16:55 clover.xml</span><br><span class="line">-rw-r--r--   1 glebbahmutov  staff  1394 Mar  8 16:55 coverage-final.json</span><br><span class="line">-rw-r--r--   1 glebbahmutov  staff   883 Mar  8 16:55 coverage-summary.json</span><br><span class="line">drwxr-xr-x  12 glebbahmutov  staff   384 Mar  8 15:05 lcov-report</span><br><span class="line">-rw-r--r--   1 glebbahmutov  staff   256 Mar  8 16:55 lcov.info</span><br></pre></td></tr></table></figure><p>I am interested in the HTML report showing code coverage on top of the source files.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ open coverage/lcov-report/index.html</span><br></pre></td></tr></table></figure><p>The top level report shows 75% of all instrumented statements executed by the <code>cy.visit(&#39;/&#39;)</code> command.</p><p><img src="../images/cc-for-nextjs/report1.png" alt="The top level report shows coverage by file"></p><p>We can click on the filename to see the individual coverage report</p><p><img src="../images/cc-for-nextjs/report2.png" alt="The function &quot;add&quot; was never called by the application"></p><h2><span id="deployment-and-testing">Deployment and testing</span></h2><p>I have set up my Next.js application to deploy on Vercel. You can find the production version of the application at <a href="https://next-ts-app-swart.vercel.app/">https://next-ts-app-swart.vercel.app/</a>. The <code>INSTRUMENT_CODE</code> environment variable is set during the Vercel build, thus you can see the code coverage object if you open the DevTools.</p><p><img src="../images/cc-for-nextjs/deployed-cc.png" alt="The deployed production code has the code coverage object"></p><p>Take a look that the source paths in the code coverage object in the deployed production application (marked with an orange arrow). The source paths are different from the source paths to the files when running locally. Let&#39;s run the tests to see if we can correctly generate the test coverage report from this coverage object. I will open Cypress test runner pointing at the deployed URL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ CYPRESS_baseUrl=https://next-ts-app-swart.vercel.app/ npx cypress open</span><br></pre></td></tr></table></figure><p>The tests finish and generate the code coverage report.</p><p><img src="../images/cc-for-nextjs/prod.png" alt="The E2E test visited the production site"></p><p>The code coverage plugin has successfully mapped the production code paths to the local source files and generated the report</p><p><img src="../images/cc-for-nextjs/prod-report.png" alt="The code coverage report for the production app"></p><p>We can see the source code &quot;search&quot; and mapping from the production paths to the local application source paths by enabling the debug logs when starting Cypress</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ DEBUG=code-coverage CYPRESS_baseUrl=https://next-ts-app-swart.vercel.app/ npx cypress open</span><br></pre></td></tr></table></figure><p>The logs show how the plugin is looking for a parent folder so that all paths in the code coverage object map to the existing file paths.</p><p><img src="../images/cc-for-nextjs/paths.png" alt="The production source paths were mapped to the local source files"></p><p>To generate the report we need to code coverage information and the application source files.</p><h2><span id="tests-in-a-separate-repo">Tests in a separate repo</span></h2><p>In some situations, the tests live in a repository separate from the application. I have described such situation in the blog posts <a href="/blog/how-to-keep-cypress-tests-in-another-repo/" title="How to Keep Cypress Tests in Another Repo While Using GitHub Actions">How to Keep Cypress Tests in Another Repo While Using GitHub Actions</a> and <a href="/blog/how-to-keep-cypress-tests-in-another-repo-with-circleci/" title="How to Keep Cypress Tests in Another Repo While Using CircleCI">How to Keep Cypress Tests in Another Repo While Using CircleCI</a>. For this blog post, I have created repository <a href="https://github.com/bahmutov/next-ts-app-tests">bahmutov&#x2F;next-ts-app-tests</a> with a copy of Cypress tests. We can run these tests against the deployed application</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ DEBUG=code-coverage CYPRESS_baseUrl=https://next-ts-app-swart.vercel.app/ npx cypress open</span><br></pre></td></tr></table></figure><p>This time, the code coverage cannot be mapped to the source files, since there are no local files to find</p><p><img src="../images/cc-for-nextjs/cannot-find-files.png" alt="The code coverage plugin could not find source files referenced in the coverage object"></p><p>The plugin has still generated the overall report, but you cannot drill down into the individual source file reports</p><p><img src="../images/cc-for-nextjs/no-files-report.gif" alt="Without the source files, you cannot see the code coverage report per file"></p><p>If we copy just the <code>pages</code> folder from the <a href="https://github.com/bahmutov/next-ts-app/tree/main/pages">next-ts-app</a> into the &quot;next-ts-app-tests&quot; folder before running the Cypress tests, then it finds it and can generate the report.</p><p><strong>Tip:</strong> instead of copying the <code>pages</code> folder from the application&#39;s folder to the test folder, I create a symbolic link</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># assuming the following structure</span><br><span class="line">#   next-ts-app/</span><br><span class="line">#     the application with &quot;pages&quot; folder</span><br><span class="line">#   next-ts-app-tests/</span><br><span class="line">#     the folder with the tests</span><br><span class="line"># from the &quot;next-ts-app-tests&quot; folder call</span><br><span class="line">$ ln -s ../next-ts-app/pages</span><br></pre></td></tr></table></figure><p>Now the &quot;pages&quot; folder is linked to the tests folder</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ls -la</span><br><span class="line">...</span><br><span class="line">pages -&gt; ../next-ts-app/pages</span><br></pre></td></tr></table></figure><h3><span id="cloning-the-app-repo-into-the-tests-repo">Cloning the app repo into the tests repo</span></h3><p>Let&#39;s give our tests the application&#39;s source code so it can generate the file code coverage reports. I will use <a href="/blog/trying-github-actions/" title="GitHub Actions">GitHub Actions</a> to checkout out both repos and copy the &quot;pages&quot; folder from the application folder into the tests folder.</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># https://github.com/actions/checkout</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">this</span> <span class="string">repo</span> <span class="string">üõé</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">the</span> <span class="string">application</span> <span class="string">repo</span> <span class="string">üõé</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">bahmutov/next-ts-app</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">next-ts-app</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># help the code coverage tool find the source files</span></span><br><span class="line">      <span class="comment"># can also move or link the source files</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Copy</span> <span class="string">application</span> <span class="string">source</span> <span class="string">files</span> <span class="string">üíæ</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">cp</span> <span class="string">-r</span> <span class="string">next-ts-app/pages</span> <span class="string">.</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">against</span> <span class="string">the</span> <span class="string">production</span> <span class="string">site</span> <span class="string">üß™</span></span><br><span class="line">        <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">config:</span> <span class="string">&#x27;baseUrl=https://next-ts-app-swart.vercel.app/&#x27;</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">DEBUG:</span> <span class="string">code-coverage</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># https://github.com/marketplace/actions/github-pages-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">code</span> <span class="string">coverage</span> <span class="string">report</span> <span class="string">üöÄ</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./coverage/lcov-report</span></span><br></pre></td></tr></table></figure><p>Tip: I have used <a href="https://github.com/marketplace/actions/github-pages-action">actions&#x2F;github-pages-action</a> step at the end to publish the generated HTML code coverage report to GitHub Pages. You can find it at <a href="https://glebbahmutov.com/next-ts-app-tests/">https://glebbahmutov.com/next-ts-app-tests/</a>.</p><p><img src="../images/cc-for-nextjs/hosted-report.gif" alt="The code coverage report produced on CI and hosted on GitHub Pages"></p><h3><span id="fetching-the-right-application-source-code">Fetching the right application source code</span></h3><p>Imagine you are deploying an instrumented application to some environment, like <code>https://instrumented.acme.co</code> once per day. Then you run the tests against it to generate the full code coverage report. You only do this once per day because instrumenting and running the tests is slow, but there might be multiple commits to the application source code itself. How do you use the right source code when generating the coverage reports? By checking out the right source code commit for the deployed application.</p><p>Next.js applications embed the <code>buildId</code> in the pages, and you can control the ID. For example, you can concatenate the branch and the source code commit SHA, like <a href="https://github.com/bahmutov/next-ts-app/blob/main/next.config.js">this</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// next.config.js</span></span><br><span class="line"><span class="comment">// https://github.com/cypress-io/commit-info</span></span><br><span class="line"><span class="keyword">const</span> &#123; getBranch, getSha &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@cypress/commit-info&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">import(&#x27;next&#x27;).NextConfig</span>&#125; */</span></span><br><span class="line"><span class="keyword">const</span> nextConfig = &#123;</span><br><span class="line">  <span class="attr">reactStrictMode</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">generateBuildId</span>: <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// make sure to use Vercel variables if available</span></span><br><span class="line">    <span class="comment">// https://vercel.com/docs/concepts/projects/environment-variables</span></span><br><span class="line">    <span class="keyword">const</span> branch =</span><br><span class="line">      process.<span class="property">env</span>.<span class="property">VERCEL_GIT_COMMIT_REF</span> ||</span><br><span class="line">      (<span class="keyword">await</span> <span class="title function_">getBranch</span>()) ||</span><br><span class="line">      <span class="string">&#x27;unknown branch&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> sha =</span><br><span class="line">      process.<span class="property">env</span>.<span class="property">VERCEL_GIT_COMMIT_SHA</span> || (<span class="keyword">await</span> <span class="title function_">getSha</span>()) || <span class="string">&#x27;unknown sha&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> buildId = <span class="string">`<span class="subst">$&#123;branch&#125;</span>:::<span class="subst">$&#123;sha&#125;</span>`</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;generated build id &quot;%s&quot;&#x27;</span>, buildId)</span><br><span class="line">    <span class="keyword">return</span> buildId</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = nextConfig</span><br></pre></td></tr></table></figure><p>I wrote a little GitHub action to query the HTML page and extract the build ID value and split it into branch and commit SHA. Then you can check out the right source code commit when checking out the application on CI.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/actions/checkout</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">this</span> <span class="string">repo</span> <span class="string">üõé</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">the</span> <span class="string">build</span> <span class="string">info</span> <span class="string">üñ®</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">bahmutov/get-build-id@v1</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">get-build-id</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&#x27;https://next-ts-app-swart.vercel.app/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Print</span> <span class="string">the</span> <span class="string">build</span> <span class="string">outputs</span> <span class="string">üñ®</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    echo &quot;Next.js build ID: $&#123;&#123; steps.get-build-id.outputs.buildId &#125;&#125;&quot;</span></span><br><span class="line"><span class="string">    echo &quot;Next.js build branch: $&#123;&#123; steps.get-build-id.outputs.branch &#125;&#125;&quot;</span></span><br><span class="line"><span class="string">    echo &quot;Next.js build commit: $&#123;&#123; steps.get-build-id.outputs.commit &#125;&#125;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">the</span> <span class="string">application</span> <span class="string">repo</span> <span class="string">üõé</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">bahmutov/next-ts-app</span></span><br><span class="line">    <span class="comment"># from the build ID, we get the commit matching the deployed site</span></span><br><span class="line">    <span class="comment"># so let&#x27;s fetch just that commit to make sure our report</span></span><br><span class="line">    <span class="comment"># uses the correct source files</span></span><br><span class="line">    <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.get-build-id.outputs.commit</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">next-ts-app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># help the code coverage tool find the source files</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Copy</span> <span class="string">application</span> <span class="string">source</span> <span class="string">files</span> <span class="string">üíæ</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">cp</span> <span class="string">-r</span> <span class="string">next-ts-app/pages</span> <span class="string">.</span></span><br></pre></td></tr></table></figure><h3><span id="code-coverage-on-circleci">Code coverage on CircleCI</span></h3><p>I have set up an equivalent code coverage collection on CircleCI. The tests project logs in using a <a href="https://circleci.com/docs/2.0/gh-bb-integration/#enable-your-project-to-check-out-additional-private-repositories">machine user account</a> and checks out the application source code before running the tests and generating the report. See <a href="https://github.com/bahmutov/next-ts-app-tests/blob/main/.circleci/config.yml">.circleci&#x2F;config.yml</a> file for the current code</p><figure class="highlight yml"><figcaption><span>.circleci/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="comment"># https://github.com/cypress-io/circleci-orb</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="attr">branches:</span></span><br><span class="line">              <span class="attr">ignore:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">gh-pages</span></span><br><span class="line">          <span class="attr">post-checkout:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;Checking out the application&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">git@github.com:bahmutov/next-ts-app.git</span> <span class="string">--depth</span> <span class="number">1</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">Link</span> <span class="string">source</span> <span class="string">pages</span> <span class="string">to</span> <span class="string">this</span> <span class="string">repo</span></span><br><span class="line">                <span class="comment"># syntax is: &quot;ln &lt;existing folder&gt; &lt;link path&gt;&quot;</span></span><br><span class="line">                <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line"><span class="string">                  ln -s next-ts-app/pages pages</span></span><br><span class="line"><span class="string">                  ls -la</span></span><br><span class="line"><span class="string"></span>          <span class="attr">config:</span> <span class="string">&#x27;baseUrl=https://next-ts-app-swart.vercel.app/&#x27;</span></span><br><span class="line">          <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">post-steps:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">store_artifacts:</span></span><br><span class="line">                <span class="attr">path:</span> <span class="string">coverage/lcov-report</span></span><br></pre></td></tr></table></figure><p>The source code report is stored as a test artifact on CircleCI</p><p><img src="../images/cc-for-nextjs/circleci-coverage.gif" alt="The code coverage report on CircleCI"></p><p><strong>Tip:</strong> if you do not want to set up SSH key to check out the second repository, you could use a GitHub token</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://$&#123;GITHUB_TOKEN&#125;:x-oauth-basic@github.com/owner/repo &lt;local folder name&gt; --depth 1</span><br></pre></td></tr></table></figure><h2><span id="see-more">See more</span></h2><ul><li>read my other <a href="../tags/code-coverage/">blog posts about code coverage</a></li><li>see the JavaScript application <a href="https://github.com/bahmutov/next-and-cypress-example">bahmutov&#x2F;next-and-cypress-example</a></li><li><a href="https://medium.com/geekculture/component-testing-next-js-application-with-cypress-28fa311adda6">Component Testing Next.js Application with Cypress</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;pullquote&quot;&gt;&lt;p&gt;üì¶ you can find the source code for this blog post in the repository &lt;a href=&quot;https://github.com/bahmutov/n
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="code coverage" scheme="https://glebbahmutov.com/blog/tags/code-coverage/"/>
    
      <category term="vercel" scheme="https://glebbahmutov.com/blog/tags/vercel/"/>
    
  </entry>
  
  <entry>
    <title>Control LaunchDarkly From Cypress Tests</title>
    <link href="https://glebbahmutov.com/blog/cypress-and-launchdarkly/"/>
    <id>https://glebbahmutov.com/blog/cypress-and-launchdarkly/</id>
    <published>2022-03-04T05:00:00.000Z</published>
    <updated>2022-06-02T19:56:00.680Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s say you are using <a href="https://launchdarkly.com/">LaunchDarkly</a> to develop and test new web application features behind a flag. You have end-to-end tests too. How do you test the features behind the flag? In this blog post, I will show how to target features using individual user IDs. We will use the plugin <a href="https://github.com/bahmutov/cypress-ld-control">cypress-ld-control</a> to set the user ID as an explicit target for the experiment and then confirm the web application behaves correctly using Cypress test.</p><!-- toc --><ul><li><a href="#launchdarkly-project">LaunchDarkly project</a></li><li><a href="#demo-react-application">Demo React application</a></li><li><a href="#cypress-setup">Cypress setup</a><ul><li><a href="#sensitive-variables">Sensitive variables</a></li><li><a href="#starting-the-app-and-the-tests">Starting the app and the tests</a></li><li><a href="#make-launchdarkly-optional">Make LaunchDarkly optional</a></li><li><a href="#the-plugin-api">The plugin API</a></li></ul></li><li><a href="#the-tests">The tests</a></li><li><a href="#cleaning-up">Cleaning up</a></li><li><a href="#inspecting-a-feature-flag">Inspecting a feature flag</a></li><li><a href="#running-tests-on-ci">Running tests on CI</a></li><li><a href="#single-test">Single test</a></li><li><a href="#see-also">See also</a></li><li><a href="#bonus-1-control-the-feature-lifetime">Bonus 1: control the feature lifetime</a></li></ul><!-- tocstop --><h2><span id="launchdarkly-project">LaunchDarkly project</span></h2><p>I have created a new LaunchDarkly project with project &quot;Demo Project&quot; and two environments. We will concentrate on the &quot;Test&quot; environment.</p><p><img src="../images/ld-control/project.png" alt="LaunchDarkly demo project"></p><p>In the project, I have created a new String feature flag <code>testing-launch-darkly-control-from-cypress</code> with three variations.</p><p><img src="../images/ld-control/flag.png" alt="Test feature flag variations"></p><p>Because we want to turn different flag variations for specific users, we will turn on the &quot;Targeting&quot; option. Currently there are no targets yet.</p><p><img src="../images/ld-control/targeting.png" alt="Turn the feature flag targeting on"></p><h2><span id="demo-react-application">Demo React application</span></h2><p>To demonstrate controlling the feature flags from Cypress tests, I grabbed a copy of the LD&#39;s React application. I got a copy using the <a href="https://github.com/Rich-Harris/degit#readme">degit</a> command.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npx degit launchdarkly/react-client-sdk/examples/hoc ld-example</span><br><span class="line">&gt; cloned launchdarkly/react-client-sdk#HEAD to ld-example</span><br><span class="line">$ cd ld-example</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>üéÅ You can find my version of the application used in this blog post in the repo <a href="https://github.com/bahmutov/cypress-ld-control-example">bahmutov&#x2F;cypress-ld-control-example</a>.</p></blockquote><p>I have changed the code to use my project&#39;s Client SDK ID and show the current greeting using the feature flag value. For the demo, I have passed a made-up user ID (in the real application, the user ID would be set after authentication step)</p><figure class="highlight js"><figcaption><span>universal/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; withLDProvider &#125; <span class="keyword">from</span> <span class="string">&#x27;launchdarkly-react-client-sdk&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  ...</span><br><span class="line">);</span><br><span class="line"><span class="comment">// Set clientSideID to your own Client-side ID. You can find this in</span></span><br><span class="line"><span class="comment">// your LaunchDarkly portal under Account settings / Projects</span></span><br><span class="line"><span class="comment">// https://docs.launchdarkly.com/sdk/client-side/javascript#initializing-the-client</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;USER_1234&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">withLDProvider</span>(&#123; <span class="attr">clientSideID</span>: <span class="string">&#x27;YOUR_CLIENT_SIDE_ID&#x27;</span>, <span class="attr">user</span>: <span class="string">&#x27;USER_1234&#x27;</span> &#125;)(<span class="title class_">App</span>);</span><br></pre></td></tr></table></figure><p>My Home page uses the flag&#39;s value to show the greeting.</p><figure class="highlight js"><figcaption><span>universal/home.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; withLDConsumer &#125; <span class="keyword">from</span> <span class="string">&#x27;launchdarkly-react-client-sdk&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params">&#123; flags &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Root</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Heading</span>&gt;</span>&#123;flags.testingLaunchDarklyControlFromCypress&#125;, World<span class="tag">&lt;/<span class="name">Heading</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      This is a LaunchDarkly React example project. The message above changes the greeting,</span></span><br><span class="line"><span class="language-xml">      based on the current feature flag variation.</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">withLDConsumer</span>()(<span class="title class_">Home</span>);</span><br></pre></td></tr></table></figure><p>When I start the application, it shows the default causal greeting</p><p><img src="../images/ld-control/hello.png" alt="The application uses the casual greeting variation of the flag"></p><p>Great. Let&#39;s target the user <code>USER_1234</code> with a more formal greeting. At LaunchDarkly app, I will create a new targeting list. Don&#39;t forget to save the changes for them to be applied!</p><p><img src="../images/ld-control/target-user.png" alt="Target the user by ID"></p><p>LaunchDarkly SDK includes real-time updates using server-side events, thus the Home page immediately changes to the formal greeting.</p><p><img src="../images/ld-control/formal.png" alt="The current user receives its own feature flag value"></p><p>Nice, let&#39;s do the same from a Cypress test.</p><h2><span id="cypress-setup">Cypress setup</span></h2><p>Let&#39;s install Cypress test runner</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn add -D cypress</span></span><br><span class="line">success Saved 1 new dependency.</span><br><span class="line">info Direct dependencies</span><br><span class="line">‚îî‚îÄ cypress@9.5.1</span><br></pre></td></tr></table></figure><p>We will need to control LaunchDarkly flags via HTTP calls. While you can make HTTP calls from Node and from Cypress easily, there is higher-level logic LaunchDarkly uses that makes implementing feature flag changes a chore. I have abstracted everything necessary to add individual user targets into a plugin <a href="https://github.com/bahmutov/cypress-ld-control">cypress-ld-control</a> that Cypress tests can use to avoid the complexity. Let&#39;s install this plugin and start using it.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn add -D cypress-ld-control</span></span><br><span class="line">info Direct dependencies</span><br><span class="line">‚îî‚îÄ cypress-ld-control@1.1.2</span><br></pre></td></tr></table></figure><p>To change the flag values and add individual user targets, the plugin needs to access the LaunchDarkly REST API. We need to make an access token.</p><p><img src="../images/ld-control/token.png" alt="LaunchDarkly token"></p><p>Let&#39;s load the plugin and create tasks for the Cypress tests to call using the <a href="https://on.cypress.io/task">cy.task</a> - after all, <a href="/blog/powerful-cy-task/" title="cy.task is very powerful">cy.task is very powerful</a> command.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; initLaunchDarklyApiTasks &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress-ld-control&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> tasks = &#123;</span><br><span class="line">    <span class="comment">// add your other Cypress tasks if any</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// https://github.com/bahmutov/cypress-ld-control</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    process.<span class="property">env</span>.<span class="property">LAUNCH_DARKLY_PROJECT_KEY</span> &amp;&amp;</span><br><span class="line">    process.<span class="property">env</span>.<span class="property">LAUNCH_DARKLY_AUTH_TOKEN</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">const</span> ldApiTasks = <span class="title function_">initLaunchDarklyApiTasks</span>(&#123;</span><br><span class="line">      <span class="attr">projectKey</span>: process.<span class="property">env</span>.<span class="property">LAUNCH_DARKLY_PROJECT_KEY</span>,</span><br><span class="line">      <span class="attr">authToken</span>: process.<span class="property">env</span>.<span class="property">LAUNCH_DARKLY_AUTH_TOKEN</span>,</span><br><span class="line">      <span class="attr">environment</span>: <span class="string">&#x27;test&#x27;</span>, <span class="comment">// the key of the environment to use</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// copy all LaunchDarkly methods as individual tasks</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(tasks, ldApiTasks)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Skipping cypress-ld-control plugin&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// register all tasks with Cypress</span></span><br><span class="line">  <span class="title function_">on</span>(<span class="string">&#x27;task&#x27;</span>, tasks)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// IMPORTANT: return the updated config object</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Whenever we open Cypress locally or run on a continuous integration system, we need to provide two environment variables <code>LAUNCH_DARKLY_PROJECT_KEY</code> and <code>LAUNCH_DARKLY_AUTH_TOKEN</code>. The token is your private secret key we have just created. The project key is the unique string identifying each project shown in the URL and on the <code>https://app.launchdarkly.com/settings/projects</code> page.</p><p><img src="../images/ld-control/project-key.png" alt="LaunchDarkly project key"></p><h3><span id="sensitive-variables">Sensitive variables</span></h3><p>You can store sensitive values and inject them as needed using my <a href="https://github.com/bahmutov/as-a">as-a</a> CLI tool. In my case, I have <code>.as-a.ini</code> file that is never checked into source control</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; https://github.com/bahmutov/as-a</span></span><br><span class="line"><span class="section">[cypress-ld-control-demo]</span></span><br><span class="line"><span class="attr">LAUNCH_DARKLY_PROJECT_KEY</span>=...</span><br><span class="line"><span class="attr">LAUNCH_DARKLY_AUTH_TOKEN</span>=...</span><br></pre></td></tr></table></figure><p>I open Cypress using the command <code>as-a cypress-ld-control-demo yarn cypress open</code>.</p><h3><span id="starting-the-app-and-the-tests">Starting the app and the tests</span></h3><p>I typically use <a href="https://github.com/bahmutov/start-server-and-test">start-server-and-test</a> to start the application and open &#x2F; run Cypress tests. In my <code>package.json</code> file I have set up the command <code>dev</code>:</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node src/server/index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;start-test 3000 &#x27;cypress open&#x27;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>I run the application and inject the sensitive variables into Cypress tests using the terminal command</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ as-a cypress-ld-control-demo yarn run dev</span><br></pre></td></tr></table></figure><p>For more, see video <a href="https://www.youtube.com/watch?v=6iDjbAXvLa0">Start server and test</a>.</p><h3><span id="make-launchdarkly-optional">Make LaunchDarkly optional</span></h3><p>It is up to you to require these environment variables or gracefully handle it and only require them in some tests. For example, you could set an environment variable if the LaunchDarkly has been initialized:</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; initLaunchDarklyApiTasks &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress-ld-control&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://github.com/bahmutov/cypress-ld-control</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    process.<span class="property">env</span>.<span class="property">LAUNCH_DARKLY_PROJECT_KEY</span> &amp;&amp;</span><br><span class="line">    process.<span class="property">env</span>.<span class="property">LAUNCH_DARKLY_AUTH_TOKEN</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">const</span> ldApiTasks = <span class="title function_">initLaunchDarklyApiTasks</span>(&#123;</span><br><span class="line">      <span class="attr">projectKey</span>: process.<span class="property">env</span>.<span class="property">LAUNCH_DARKLY_PROJECT_KEY</span>,</span><br><span class="line">      <span class="attr">authToken</span>: process.<span class="property">env</span>.<span class="property">LAUNCH_DARKLY_AUTH_TOKEN</span>,</span><br><span class="line">      <span class="attr">environment</span>: <span class="string">&#x27;test&#x27;</span>, <span class="comment">// the key of the environment to use</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// copy all LaunchDarkly methods as individual tasks</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(tasks, ldApiTasks)</span><br><span class="line">    <span class="comment">// set an environment variable for specs to use</span></span><br><span class="line">    <span class="comment">// to check if the LaunchDarkly can be controlled</span></span><br><span class="line">    config.<span class="property">env</span>.<span class="property">launchDarklyApiAvailable</span> = <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Skipping cypress-ld-control plugin&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// register all tasks with Cypress</span></span><br><span class="line">  <span class="title function_">on</span>(<span class="string">&#x27;task&#x27;</span>, tasks)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// IMPORTANT: return the updated config object</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the test files that really need to call LaunchDarkly API we can check the variable once:</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">before</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title class_">Cypress</span>.<span class="title function_">env</span>(<span class="string">&#x27;launchDarklyApiAvailable&#x27;</span>), <span class="string">&#x27;LaunchDarkly&#x27;</span>).<span class="property">to</span>.<span class="property">be</span>.<span class="property">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3><span id="the-plugin-api">The plugin API</span></h3><p>The &quot;cypress-ld-control&quot; plugin can be used by itself without Cypress to target users. When you initialize the <code>ldApi</code> object, it has the following methods: <code>getFeatureFlag</code>, <code>setFeatureFlagForUser</code>, and others, see <a href="https://github.com/bahmutov/cypress-ld-control#api">README#API</a> section. When using the plugin from Cypress specs, you need to call these methods via the <a href="https://on.cypress.io/task">cy.task</a> command. To avoid clashing with other tasks, and conform to the <code>cy.task</code> semantics, the plugin follows the following rules:</p><ul><li>every task it returns is prefixed with <code>cypress-ld-control:</code> string. Thus you to get the feature flag you would call <code>cy.task(&#39;cypress-ld-control:getFeatureFlag&#39;)</code> command.</li><li>every command takes zero or a single options object as an argument, for example: <code>cy.task(&#39;cypress-ld-control:setFeatureFlagForUser&#39;, (&#123;featureFlagKey, userId, variationIndex&#125;))</code></li><li>every command returns either an object or a null, never <code>undefined</code></li></ul><h2><span id="the-tests">The tests</span></h2><p>For each experiment variation, I wrote a test placeholder to verify the application&#39;s behavior. In every test we can set the feature flag target that specific user, load the application, and check its behavior.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">before</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title class_">Cypress</span>.<span class="title function_">env</span>(<span class="string">&#x27;launchDarklyApiAvailable&#x27;</span>), <span class="string">&#x27;LaunchDarkly&#x27;</span>).<span class="property">to</span>.<span class="property">be</span>.<span class="property">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows the casual greeting&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows formal greeting&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows vacation greeting&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Let&#39;s start with the first test. Set the flag, load the app, confirm the user sees a casual greeting heading.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">before</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title class_">Cypress</span>.<span class="title function_">env</span>(<span class="string">&#x27;launchDarklyApiAvailable&#x27;</span>), <span class="string">&#x27;LaunchDarkly&#x27;</span>).<span class="property">to</span>.<span class="property">be</span>.<span class="property">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> featureFlagKey = <span class="string">&#x27;testing-launch-darkly-control-from-cypress&#x27;</span></span><br><span class="line"><span class="keyword">const</span> userId = <span class="string">&#x27;USER_1234&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows the casual greeting&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// target the given user to receive the first variation of the feature flag</span></span><br><span class="line">  cy.<span class="title function_">task</span>(<span class="string">&#x27;cypress-ld-control:setFeatureFlagForUser&#x27;</span>, &#123;</span><br><span class="line">    featureFlagKey,</span><br><span class="line">    userId,</span><br><span class="line">    <span class="attr">variationIndex</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Hello, World&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/ld-control/ld.gif" alt="The test sets the feature flag and confirm the user sees the first variation"></p><p>Similarly, the second test can target the user and confirm the second variant (index 1) is working as expected.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows formal greeting&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">task</span>(<span class="string">&#x27;cypress-ld-control:setFeatureFlagForUser&#x27;</span>, &#123;</span><br><span class="line">    featureFlagKey,</span><br><span class="line">    userId,</span><br><span class="line">    <span class="attr">variationIndex</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;How do you do, World&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/ld-control/test-formal.png" alt="Testing the second variation that shows the formal greeting"></p><p>Finally, when on vacation, the greeting is relaxed</p><p><img src="../images/ld-control/test-aloha.png" alt="Testing the Aloha greeting"></p><p>Note: you can see a flash of empty content while the application is fetching the features from LaunchDarkly. See <a href="https://docs.launchdarkly.com/sdk/client-side/javascript/default-variations">LaunchDarkly docs</a> on how to avoid it. For my simple application it was fine to have the flash.</p><h2><span id="cleaning-up">Cleaning up</span></h2><p>When the tests are finished, the last target for the user remains. We should clean up these targets to avoid adding more and more individual test users to LaunchDarkly. I am not sure, but it probably makes it slower to fetch the status for a particular user, and makes the web UI noisier. Let&#39;s remove any targeting after all tests are done.</p><p><img src="../images/ld-control/remains.png" alt="The user target remains after the last test"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">after</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">task</span>(<span class="string">&#x27;cypress-ld-control:removeUserTarget&#x27;</span>, &#123; featureFlagKey, userId &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Nice, the user target is automatically removed.</p><p><img src="../images/ld-control/cleaned.png" alt="The test removed the individual user target after finishing"></p><p>Note: the <code>after</code> hook runs even if any of the tests fail. The only reason it can be completely skipped is if the test runner crashes.</p><h2><span id="inspecting-a-feature-flag">Inspecting a feature flag</span></h2><p>If you are just interested in the feature flag and its variations, you can fetch the flag&#39; state using the &quot;cypress-ld-control:getFeatureFlag&quot; task</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows vacation greeting&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">task</span>(<span class="string">&#x27;cypress-ld-control:setFeatureFlagForUser&#x27;</span>, &#123;</span><br><span class="line">    featureFlagKey,</span><br><span class="line">    userId,</span><br><span class="line">    <span class="attr">variationIndex</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Aloha, World&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// print the current state of the feature flag and its variations</span></span><br><span class="line">  cy.<span class="title function_">task</span>(<span class="string">&#x27;cypress-ld-control:getFeatureFlag&#x27;</span>, featureFlagKey)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br><span class="line">    <span class="comment">// let&#x27;s print the variations to the Command Log side panel</span></span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;variations&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">variations</span>) =&gt;</span> &#123;</span><br><span class="line">      variations.<span class="title function_">forEach</span>(<span class="function">(<span class="params">v, k</span>) =&gt;</span> &#123;</span><br><span class="line">        cy.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;k&#125;</span>: <span class="subst">$&#123;v.name&#125;</span> is <span class="subst">$&#123;v.value&#125;</span>`</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The entire feature flag object is quite large, as we see in the DevTools console. The highlighted variations are visible in the Command Log.</p><p><img src="../images/ld-control/print-flag.png" alt="The feature flag object"></p><h2><span id="running-tests-on-ci">Running tests on CI</span></h2><p>Let&#39;s use <a href="/blog/trying-github-actions/" title="GitHub Actions">GitHub Actions</a> to run the same tests on CI. I will use <a href="https://github.com/cypress-io/github-action">cypress-io&#x2F;github-action</a> to install the dependencies, cache Cypress, start the application, and run the tests. I will need to set the same environment secrets in the repo.</p><p><img src="../images/ld-control/secrets.png" alt="Setting secrets on GitHub"></p><p>The CI workflow <a href="https://github.com/bahmutov/cypress-ld-control-example/blob/main/.github/workflows/ci.yml">ci.yml</a> uses the GH action and injects the secrets as environment variables.</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">üõé</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">üß™</span></span><br><span class="line">        <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">&#x27;yarn start&#x27;</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">LAUNCH_DARKLY_PROJECT_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.LAUNCH_DARKLY_PROJECT_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">LAUNCH_DARKLY_AUTH_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.LAUNCH_DARKLY_AUTH_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>The terminal output on CI shows the messages from <code>cypress-ld-control</code> plugin as it calls LaunchDarkly API</p><p><img src="../images/ld-control/terminal.png" alt="The plugin logs its LaunchDarkly operations"></p><h2><span id="single-test">Single test</span></h2><p>Because LaunchDarkly client-side SDK includes real-time updates, we can write a single test that goes through every variation of the flag without visiting the page again or even reloading it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">it.<span class="title function_">only</span>(<span class="string">&#x27;shows all greetings&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">task</span>(<span class="string">&#x27;cypress-ld-control:setFeatureFlagForUser&#x27;</span>, &#123;</span><br><span class="line">    featureFlagKey,</span><br><span class="line">    userId,</span><br><span class="line">    <span class="attr">variationIndex</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Hello, World&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    <span class="comment">// I have added one second waits for clarity</span></span><br><span class="line">    .<span class="title function_">wait</span>(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">task</span>(<span class="string">&#x27;cypress-ld-control:setFeatureFlagForUser&#x27;</span>, &#123;</span><br><span class="line">    featureFlagKey,</span><br><span class="line">    userId,</span><br><span class="line">    <span class="attr">variationIndex</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;How do you do, World&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>).<span class="title function_">wait</span>(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">task</span>(<span class="string">&#x27;cypress-ld-control:setFeatureFlagForUser&#x27;</span>, &#123;</span><br><span class="line">    featureFlagKey,</span><br><span class="line">    userId,</span><br><span class="line">    <span class="attr">variationIndex</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Aloha, World&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/ld-control/single-test.gif" alt="A single test will all feature flag states"></p><p>Note: the plugin &quot;cypress-ld-control&quot; handles LaunchDarkly rate-limiting, retrying API calls if the test runner receives 429 HTTP response code.</p><p>Note 2: in the test above you see a flash of &quot;Hello, World&quot; default flag state between the formal and the vacation greetings. The plugin automatically removes the current user target from a variation before adding it to another one (the same user cannot be target of two variations at the same time). Thus you see that brief moment between the remove and add commands.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="https://github.com/bahmutov/cypress-ld-control">bahmutov&#x2F;cypress-ld-control</a> plugin repo</li><li><a href="https://github.com/bahmutov/cypress-ld-control-example">bahmutov&#x2F;cypress-ld-control-example</a> example app repo</li><li><a href="/blog/test-feature-flags/" title="Test Feature Flags Using Cypress and Flagsmith">Test Feature Flags Using Cypress and Flagsmith</a></li></ul><h2><span id="bonus-1-control-the-feature-lifetime">Bonus 1: control the feature lifetime</span></h2><p>When someone introduces a new experiment behind the feature flag, one has to be careful not to break all existing tests. Here is what I think the feature lifetime should be:</p><ol><li><strong>an experiment</strong> A new feature flag is added to enable the new behavior. At first, the developer is experimenting with the behavior, thus the feature is strictly opt-in. All existing users are seeing the existing default behavior. No updates to the tests are necessary.</li><li><strong>a prototype</strong> The new feature seems to be a success and has been given a go. Now the team is implementing it and is planning to release it. A few end-to-end tests are added that use the LD plugin to turn the feature on and test the new feature flow. All existing tests are still seeing the old behavior because the old behavior is the default one.</li><li><strong>an alternative</strong> In this stage, more and more users are seeing the new feature, and the old behavior will be removed in the future. We need to start thinking about the test changes. We now switch the existing tests to explicitly opt-in to turn the old behavior. So some tests opt-in and test the new feature, and other tests opt-in and test the new feature.</li><li><strong>the switch</strong> The feature is being turned on by default for most or all users. The tests written while developing the feature are now working without opt-in. The old tests are still running with opt-in to the old behavior.</li><li><strong>the removal</strong> The old behavior is removed and all old tests are disabled. The feature flag is now always pointing to the new behavior.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s say you are using &lt;a href=&quot;https://launchdarkly.com/&quot;&gt;LaunchDarkly&lt;/a&gt; to develop and test new web application features behind 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Visualize Cypress Command Queue</title>
    <link href="https://glebbahmutov.com/blog/visualize-cypress-command-queue/"/>
    <id>https://glebbahmutov.com/blog/visualize-cypress-command-queue/</id>
    <published>2022-02-28T05:00:00.000Z</published>
    <updated>2022-02-28T12:29:30.796Z</updated>
    
    <content type="html"><![CDATA[<p>You can watch my video &quot;<a href="https://youtu.be/K5x2oXWsWqI">Cypress Command Chain Plugin Introduction</a>&quot; that covers the contents of this blog post.</p><h2><span id="the-problem">The problem</span></h2><p>A lot of times, people new to Cypress get an unexpected result while trying to print a value. For example, the following (incorrect) test is supposed to print the number from the page.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// INCORRECT, does not print &quot;n&quot;</span></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;prints a number of projects&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> n</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#projects-count&#x27;</span>)</span><br><span class="line">    .<span class="title function_">invoke</span>(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;match&#x27;</span>, <span class="regexp">/^\d+/</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">      n = <span class="title class_">Number</span>(text.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">    &#125;)</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;number&#x27;</span>, n)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/queue/undefined-n.png" alt="Cy.log does not print &quot;n&quot;"></p><p>Hmm, why is the <code>n</code> variable empty?</p><h2><span id="cypress-command-queue">Cypress command queue</span></h2><p>When Cypress runs through the test, it first queues all commands, and then starts executing them. Each command with its arguments is added to the list. It is almost like instructions you might write down and give to a human tester to run later. The above code would be something like this if I ask you to test the page:</p><ul><li>visit the index page</li><li>get the element with id &quot;project-count&quot;</li><li>confirm the text matches the regular expression <code>/^\d+/</code></li><li>convert the text to a number</li><li>print the string &quot;number&quot; and <code>undefined</code></li><li>START the test</li></ul><p>Wait, why is the last instruction says to print &quot;number&quot; and <code>undefined</code>? Because these are the parameters the test uses when calling <code>cy.log(&#39;number&#39;, n)</code>. At the moment of the call, the value of <code>n</code> is still undefined. It will be set much later.</p><h2><span id="visualize-the-command-queue">Visualize the command queue</span></h2><p>To better show the queued up commands and make it clear, I have written the <a href="https://github.com/bahmutov/cypress-command-chain">cypress-command-chain</a> plugin. Cypress emits events every time a command is queued, started, and ended. You can see these events yourself:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cypress</span>.<span class="title function_">on</span>(<span class="string">&#x27;command:enqueued&#x27;</span>, <span class="function">(<span class="params">command</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;command enqueued %s with args %o&#x27;</span>, command.<span class="property">name</span>, command.<span class="property">args</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>By inspect the <code>command.args</code> you can see the arguments at the moment <code>cy.log(&#39;number&#39;, n)</code> but before the test starts running.</p><p><img src="../images/queue/args.png" alt="Arguments passed with each command when they were queued"></p><p>Cypress Command Log shows the current test command and all finished commands. I have written the plugin <code>cypress-command-chain</code> to show <em>all enqueued</em> commands. This makes it clear which commands are scheduled to run and their arguments. The plugin even warns you if any of the arguments have <code>undefined</code> value, since it is a sign of a problem.</p><p><img src="../images/queue/queue.png" alt="cypress-command-chain plugin shows the commands and their arguments"></p><h2><span id="the-fix">The fix</span></h2><p>From the command queue, we see that we call <code>cy.log(&#39;number&#39;, n)</code> too soon. We need to call the <code>log</code> command after the value of <code>n</code> is set, which happens inside the <code>.then(...)</code> callback.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;prints a number of projects&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#projects-count&#x27;</span>)</span><br><span class="line">    .<span class="title function_">invoke</span>(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;match&#x27;</span>, <span class="regexp">/^\d+/</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> n = <span class="title class_">Number</span>(text.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">      cy.<span class="title function_">log</span>(<span class="string">&#x27;number&#x27;</span>, n)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test goes by too quickly, let&#39;s add <code>cy.wait</code> just to slow it down so we can see the Cypress command queue in action.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;prints a number of projects&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#projects-count&#x27;</span>)</span><br><span class="line">    .<span class="title function_">invoke</span>(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    .<span class="title function_">wait</span>(<span class="number">3000</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;match&#x27;</span>, <span class="regexp">/^\d+/</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> n = <span class="title class_">Number</span>(text.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">      cy.<span class="title function_">log</span>(<span class="string">&#x27;number&#x27;</span>, n)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/queue/chain.gif" alt="Notice how the cy.log command is added later when the value of &quot;n&quot; becomes known"></p><p>Now you can see that the test starts with a queue of commands ending at <code>.then cb()</code> command. The test runner does not know about the <code>cy.log</code> command yet. Only when it reaches the <code>.then cb()</code> callback function, it runs the <code>cy.log</code> and inserts it into the queue, and then continues executing the commands. When <code>cy.log</code> is called inside the <code>.then</code> callback, the value of <code>n</code> is known, so the command enqueued shows <code>&quot;number&quot;, 355</code> as expected.</p><p><strong>Tip:</strong> <code>cy.then</code> command might confuse some people, since it reminds them of JavaScript promises. This is why I suggest <a href="/blog/replace-and-remove-cy-then-command/" title="renaming it to cy.later">renaming it to cy.later</a> for clarity.</p><h2><span id="chains">Chains</span></h2><p>Cypress command queue and fluent syntax make it simpler to &quot;pass the value forward&quot; instead of getting into a variable. Thus the above test could be written as:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;prints a number of projects&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#projects-count&#x27;</span>)</span><br><span class="line">    .<span class="title function_">invoke</span>(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    .<span class="title function_">wait</span>(<span class="number">5000</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;match&#x27;</span>, <span class="regexp">/^\d+/</span>)</span><br><span class="line">    .<span class="title function_">invoke</span>(<span class="string">&#x27;split&#x27;</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="number">0</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="title class_">Number</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">log</span>(<span class="string">&#x27;number&#x27;</span>, n)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above fluent chain shows nicely</p><p><img src="../images/queue/fluent-chain.png" alt="The command chain for the above test"></p><p>The best approach to writing concise tests like this in my opinion is to see more examples. Read <a href="../tags/cypress/">my Cypress blogs</a> and watch the <a href>Cypress Tips &amp; Tricks</a> YouTube videos to learn and check out my collection of commands and recipes at <a href="https://glebbahmutov.com/cypress-examples/">glebbahmutov.com&#x2F;cypress-examples&#x2F;</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;You can watch my video &amp;quot;&lt;a href=&quot;https://youtu.be/K5x2oXWsWqI&quot;&gt;Cypress Command Chain Plugin Introduction&lt;/a&gt;&amp;quot; that covers the c
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Replace The cy.then Command</title>
    <link href="https://glebbahmutov.com/blog/replace-and-remove-cy-then-command/"/>
    <id>https://glebbahmutov.com/blog/replace-and-remove-cy-then-command/</id>
    <published>2022-02-22T05:00:00.000Z</published>
    <updated>2022-02-22T03:48:57.959Z</updated>
    
    <content type="html"><![CDATA[<p>Many people complain that the Cypress <a href="https://on.cypress.io/then">cy.then</a> command is confusing. It looks like a Promise, yet it is not.</p><ul><li>you cannot replace it with <code>async / await</code> syntax sugar</li><li>it behaves differently from the <code>Promise.then</code>, for example if the callback returns undefined value, then the original subject value is passed to the next command or assertion</li></ul><p>To avoid the confusion, you can disallow using the <code>cy.then</code> command completely.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if anyone tries to use cy.then in the spec code or in a plugin</span></span><br><span class="line"><span class="comment">// we will get an error</span></span><br><span class="line"><span class="title class_">Cypress</span>.<span class="property">Commands</span>.<span class="title function_">overwrite</span>(<span class="string">&#x27;then&#x27;</span>, <span class="keyword">function</span> (<span class="params">then, subject, cb</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Using cy.then command is disallowed&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">cy.<span class="title function_">wrap</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x + x)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;HelloHello&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/cy-later/ban-cy-then.png" alt="Banning the cy.then command"></p><p>We still want the functionality of the <code>cy.then</code> command, but under the less confusing name. We do need the original <code>cy.then</code> command functionality. Thus we will grab the reference to the function so we can call it from our command. We can find the reference by inspecting the <code>Cypress.Commands</code> object.</p><p><img src="../images/cy-later/commands.png" alt="All command functions are stored in Cypress.Commands._commands object"></p><p>Let&#39;s add a custom command <code>cy.later</code> that calls the banned <code>cy.then</code> command function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// find and save the reference to the original cy.then command</span></span><br><span class="line"><span class="comment">// by inspecting the internals of the Cypress.Commands object</span></span><br><span class="line"><span class="keyword">const</span> thenCommand = <span class="title class_">Cypress</span>.<span class="property">Commands</span>.<span class="property">_commands</span>.<span class="property">then</span>.<span class="property">fn</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// if anyone tries to use cy.then in the spec code or in a plugin</span></span><br><span class="line"><span class="comment">// we will get an error</span></span><br><span class="line"><span class="title class_">Cypress</span>.<span class="property">Commands</span>.<span class="title function_">overwrite</span>(<span class="string">&#x27;then&#x27;</span>, <span class="keyword">function</span> (<span class="params">then, subject, cb</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Using cy.then command is disallowed&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Cypress</span>.<span class="property">Commands</span>.<span class="title function_">add</span>(</span><br><span class="line">  <span class="string">&#x27;later&#x27;</span>,</span><br><span class="line">  &#123; <span class="attr">prevSubject</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  <span class="function">(<span class="params">subject, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// cy.later behaves just like cy.then</span></span><br><span class="line">    <span class="comment">// which we implement by calling the original cy.then command</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">thenCommand</span>(subject, cb)</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">cy.<span class="title function_">wrap</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">  .<span class="title function_">later</span>(cy.<span class="property">log</span>)</span><br><span class="line">  .<span class="title function_">later</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x + x)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;HelloHello&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The new command is working as expected, but hopefully does not lead the users down the wrong path.</p><p><img src="../images/cy-later/later.png" alt="The new custom command cy.later is working as expected"></p><p>I hope this helps.</p><blockquote class="pullquote"><p>üéÅ You can find the above code in a recipe at <a href="https://glebbahmutov.com/cypress-examples">glebbahmutov.com&#x2F;cypress-examples</a>.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Many people complain that the Cypress &lt;a href=&quot;https://on.cypress.io/then&quot;&gt;cy.then&lt;/a&gt; command is confusing. It looks like a Promise, yet
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Incremental Blog Scraping</title>
    <link href="https://glebbahmutov.com/blog/incremental-post-scraping/"/>
    <id>https://glebbahmutov.com/blog/incremental-post-scraping/</id>
    <published>2022-02-18T05:00:00.000Z</published>
    <updated>2022-02-18T14:39:42.756Z</updated>
    
    <content type="html"><![CDATA[<p>In the previous blog post <a href="/blog/scrape-static-site-with-algolia/" title="Scrape Static Site with Algolia">Scrape Static Site with Algolia</a> I have shown how to scrape a static site to make it instantly searchable. After each deploy, you run the scraper which replaces the entire Algolia index with new content. That might work for smaller sites, but quickly runs into Algolia usage limits as the site scales up. I have an Algolia index for all my <a href="../tags/cypress/">Cypress blog posts</a> and scraping all blog posts again and again generated way too many record operations, hitting the 10k limit on my free Algolia plan.</p><p>The worst thing was - when I publish a new Cypress blog post, the rest of the posts stay unchanged, so all that scraping is replacing the search records with identical records. We need to devise a way to only scrape the new and the changed blog posts. This is what I call &quot;incremental&quot; scraping.</p><h2><span id="text-records">Text records</span></h2><p>Another problem one can run into is the number of records created by blog post. At first, I used a CSS selector that returns all paragraphs, list items, and even the code comments to create individual Algolia records</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.article .article-inner .article-entry p,</span><br><span class="line">.article .article-inner .article-entry li,</span><br><span class="line">.article .article-inner .article-entry figure.highlight .comment</span><br></pre></td></tr></table></figure><p>For a typical blog post like <a href="/blog/email-cypress-report/" title="Email Cypress Test Report">Email Cypress Test Report</a> the above selector returns 20 text records.</p><p><img src="../images/incremental-scraping/selectors.png" alt="A small blog post might generate more than twenty records"></p><p>In addition, the text records, we scrape the H1, H2, and the blog description, creating hierarchical Algolia records. All this means that a typical post on my blog generates 25 - 80 Algolia records. Multiply by the number of Cypress posts I have written over the years (180+ as of this writing) and each scraping session might use up 9k Algolia operations. For comparison: the free Algolia monthly plan has a limit of 10k operations - and we are hitting it in a single scrape!</p><h2><span id="changing-the-text-records">Changing the text records</span></h2><p>After consulting with the Algolia engineers, I have decided to change how the scraping records are formed. Instead of taking the individual <code>P</code>, <code>LI</code>, and <code>.comment</code> elements, and creating a record for each one, I have decided to combine them all into a single text record. After all - you cannot individually target a <code>P</code> record. My blog post only has anchor links for the header elements, thus all the <code>P</code>, <code>LI</code>, and other elements between them could be a single Algolia text record with the header anchor.</p><p><img src="../images/incremental-scraping/merge.png" alt="Our goal is to have a single text record between the headers"></p><p>Unfortunately, the default <a href="https://docsearch.algolia.com/docs/legacy/run-your-own/">Algolia scraper code</a> does not allow merging the text records into one large record before uploading. Thus I needed to implement something myself. Luckily, Cypress can load the page and process it in every possible way. Time to write our own scraper.</p><h2><span id="scraper-inside-cypress">Scraper inside Cypress</span></h2><blockquote class="pullquote"><p>üéÅ You can find my source code used to incrementally scrape the blog posts in the repository <a href="https://github.com/bahmutov/scrape-blog-post-page">bahmutov&#x2F;scrape-blog-post-page</a>.</p></blockquote><p>Using the <a href="https://on.cypress.io/get">cy.get</a> command we get the individual records, including the headers. Then we combine them into largr text records, up until we see a header element. Then we start a new text record. This is done by Cypress in <a href="https://github.com/bahmutov/scrape-blog-post-page/blob/main/cypress/integration/utils.js">cypress&#x2F;integration&#x2F;utils.js</a> file</p><figure class="highlight js"><figcaption><span>cypress/integration/utils.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">hasAnchor</span>(<span class="params">$el</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> $anchor = $el.<span class="title function_">find</span>(<span class="string">&#x27;[id]&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> $anchor.<span class="property">length</span> &gt; <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getAnchor</span>(<span class="params">$el</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> $anchor = $el.<span class="title function_">find</span>(<span class="string">&#x27;[id]&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> $anchor.<span class="title function_">attr</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// now process all article elements, grouping them by the anchor</span></span><br><span class="line"><span class="keyword">return</span> cy</span><br><span class="line">  .<span class="title function_">get</span>(</span><br><span class="line">    <span class="string">`</span></span><br><span class="line"><span class="string">      header.article-header h2,</span></span><br><span class="line"><span class="string">      article .article-inner h2,</span></span><br><span class="line"><span class="string">      .article .article-inner .article-entry p,</span></span><br><span class="line"><span class="string">      .article .article-inner .article-entry figure.highlight .comment</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">each</span>(<span class="function">(<span class="params">$snippet</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">hasAnchor</span>($snippet)) &#123;</span><br><span class="line">      <span class="keyword">const</span> anchor = <span class="title function_">getAnchor</span>($snippet)</span><br><span class="line">      currentRecord = &#123;</span><br><span class="line">        anchor,</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">      records.<span class="title function_">push</span>(currentRecord)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      currentRecord.<span class="property">text</span> += <span class="string">&#x27;\n&#x27;</span> + $snippet.<span class="title function_">text</span>().<span class="title function_">replace</span>(<span class="regexp">/\s+/g</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Whenever we see a header element with an anchor, we start a new text record. All the individual <code>P</code> and <code>.comment</code> records after that are appended as text, forming one large chunk of text (the code later checks the total text record size, Algolia recommends the records to be below 10k or 100k bytes). Thus instead of 20 individual text records, the &quot;Email Cypress Test Report&quot; blog post will have just 3 text records plus a few header records.</p><p><img src="../images/incremental-scraping/record.png" alt="Typical text record after scraping"></p><p>A typical Algolia record has one or several paragraphs of text, an anchor, and the full URL that uses the anchor to immediately direct the user to the right place. Here is the user searching using a part of the text above. You can try searching yourself by going to <a href="https://cypress.tips/search">cypress.tips&#x2F;search</a></p><p><img src="../images/incremental-scraping/the-search.png" alt="The search widget finds the scraped text"></p><p>When the user clicks on the search result, they are directed to the section&#39;s URL.</p><p><img src="../images/incremental-scraping/the-result.png" alt="The click on the search result takes you to the section"></p><p>I use Cypress to scrape, even if something like <a href="https://cheerio.js.org/">cheerio.js</a> is faster. I can see and debug the scraper much better by using the Cypress GUI. I can see each found DOM element (including using at the DevTools Elements panel), step through the code, save the intermediate records - all to understand what the scraping algorithm is doing. If I wanted, I could then transfer the scraper logic into a Node script using <code>cheerio.js</code>. But as you will see in the next section, there is no need to optimize the speed of the scraper at the expense of the debugging experience - because we will scrape very few posts at a time.</p><p><img src="../images/incremental-scraping/cy-scrape.png" alt="Observing the records being merged in Cypress browser"></p><p>The merged text and header records are then uploading to Algolia using the code inside the Cypress <a href="https://github.com/bahmutov/scrape-blog-post-page/blob/main/cypress/plugins/index.js">plugins file</a>.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> algoliasearch = <span class="built_in">require</span>(<span class="string">&#x27;algoliasearch&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">on</span>(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// upload scraped records to Algolia</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">uploadRecords</span>(<span class="params">&#123; records, slug &#125;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; <span class="variable constant_">APPLICATION_ID</span>, <span class="variable constant_">ADMIN_API_KEY</span>, <span class="variable constant_">INDEX_NAME</span> &#125; = process.<span class="property">env</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable constant_">APPLICATION_ID</span> || !<span class="variable constant_">ADMIN_API_KEY</span> || !<span class="variable constant_">INDEX_NAME</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Algolia app/key not set&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">          <span class="string">&#x27;Skipping uploading %d records for slug %s&#x27;</span>,</span><br><span class="line">          records.<span class="property">length</span>,</span><br><span class="line">          slug,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> client = <span class="title function_">algoliasearch</span>(<span class="variable constant_">APPLICATION_ID</span>, <span class="variable constant_">ADMIN_API_KEY</span>)</span><br><span class="line">      <span class="keyword">const</span> index = client.<span class="title function_">initIndex</span>(<span class="variable constant_">INDEX_NAME</span>)</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;%s: removing existing records for %s&#x27;</span>, <span class="variable constant_">INDEX_NAME</span>, slug)</span><br><span class="line">      <span class="keyword">await</span> index.<span class="title function_">deleteBy</span>(&#123;</span><br><span class="line">        <span class="attr">filters</span>: slug,</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;%s: adding %d records&#x27;</span>, <span class="variable constant_">INDEX_NAME</span>, records.<span class="property">length</span>)</span><br><span class="line">      <span class="comment">// each record should have a unique id set</span></span><br><span class="line">      <span class="keyword">await</span> index.<span class="title function_">saveObjects</span>(records, &#123;</span><br><span class="line">        <span class="attr">autoGenerateObjectIDIfNotExist</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// cy.task must return something</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note that if a blog post has been edited, we need to remove any existing records, which I do by using the post slug</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// take the last part of the url which is the post name</span></span><br><span class="line"><span class="keyword">const</span> slug = _.<span class="title function_">last</span>(_.<span class="title function_">filter</span>(_.<span class="title function_">split</span>(baseUrl, <span class="string">&#x27;/&#x27;</span>), <span class="title class_">Boolean</span>)</span><br></pre></td></tr></table></figure><p>Now we just need to make sure we only scrape the changed and the new blog posts.</p><h2><span id="incremental-scraping">Incremental scraping</span></h2><p>On my Hexo blog every published blog post has its &quot;lastmod&quot; date, which you can find in the <a href="https://glebbahmutov.com/blog/sitemap.xml">sitemap.xml</a></p><p><img src="../images/incremental-scraping/sitemap.png" alt="Blog post URLs and last modified dates"></p><p>We can get the list of Cypress blog posts from the <a href="https://glebbahmutov.com/blog/tags/cypress/">&#x2F;tags&#x2F;cypress&#x2F;</a> page.</p><p><img src="../images/incremental-scraping/tag.png" alt="A page with all Cypress blog posts"></p><p><strong>Tip:</strong> if you use the pagination in Hexo blog, then the &quot;tag&quot; page only shows the first N blog posts for a tag. I have removed this limit by cloning the pagination plugin which you can find at <a href="https://github.com/bahmutov/hexo-generator-gleb">bahmutov&#x2F;hexo-generator-gleb</a>.</p><p>Getting the list of URLs from the tag page is simple to do using <code>cheerio.js</code> in <a href="https://github.com/bahmutov/scrape-blog-post-page/blob/main/get-post-urls.js">get-post-urls.js</a></p><figure class="highlight js"><figcaption><span>get-post-urls.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="variable constant_">URL</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getBlogPostUrls</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> tagPageUrl = <span class="string">&#x27;https://glebbahmutov.com/blog/tags/cypress/&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">got</span>(tagPageUrl)</span><br><span class="line">  <span class="keyword">const</span> $ = cheerio.<span class="title function_">load</span>(res.<span class="property">body</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// find all tags pointing at the blog posts</span></span><br><span class="line">  <span class="comment">// and put the full URL in the array</span></span><br><span class="line">  <span class="keyword">const</span> links = []</span><br><span class="line">  $(<span class="string">&#x27;a.archive-article-title&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params">k, el</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> relativeUrl = $(el).<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> fullUrl = <span class="keyword">new</span> <span class="title function_">URL</span>(relativeUrl, tagPageUrl)</span><br><span class="line">    links.<span class="title function_">push</span>(fullUrl.<span class="property">href</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;found %d links&#x27;</span>, links.<span class="property">length</span>)</span><br><span class="line">  <span class="keyword">return</span> links</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Any time we want to get the list of blog posts to scrape, we can get the sitemap, parse it into URLs and the last modified dates. At the same time we get the Cypress post URLs and intersect the two lists.</p><figure class="highlight js"><figcaption><span>get-modified-post-urls.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; getBlogPostUrls &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./get-post-urls&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; getSiteMap &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./get-sitemap&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">getSiteMap</span>(), <span class="title function_">getBlogPostUrls</span>()]).<span class="title function_">then</span>(<span class="function">(<span class="params">[modified, posts]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> cypressPostsWithModified = &#123;&#125;</span><br><span class="line">  posts.<span class="title function_">forEach</span>(<span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!modified[url]) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;missing modified date for %s&#x27;</span>, url)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cypressPostsWithModified[url] = modified[url]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> filename = <span class="string">&#x27;blog-post-urls.json&#x27;</span></span><br><span class="line">  fs.<span class="title function_">writeFileSync</span>(</span><br><span class="line">    filename,</span><br><span class="line">    <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(cypressPostsWithModified, <span class="literal">null</span>, <span class="number">2</span>) + <span class="string">&#x27;\n&#x27;</span>,</span><br><span class="line">  )</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">    <span class="string">&#x27;saved %d links to %s&#x27;</span>,</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(cypressPostsWithModified).<span class="property">length</span>,</span><br><span class="line">    filename,</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I like saving the intermediate results as JSON files, because that allows me to inspect the data, and continue from a known state. Now we need to decide for each URL if it needs scraping. At first, I tried to use Algolia to tell me the scraped timestamps, but later decided to simplify the logic and just have a database of records and the scrape timestamps. I have created <a href="https://github.com/bahmutov/was-it-scraped">was-it-scraped</a> NPM module to abstract saving which records were scraped already. Under the hood it uses an external Supabase database, but you could use a local JSON file as well. Now we can write a script to filter all the found Cypress blog posts and only leave the ones that need scraping:</p><figure class="highlight js"><figcaption><span>filter-scraped-posts.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">// an object with [url] =&gt; [modified]</span></span><br><span class="line"><span class="comment">// with modified string in the format &quot;YYYY-MM-DD&quot;</span></span><br><span class="line"><span class="keyword">const</span> allPosts = <span class="built_in">require</span>(<span class="string">&#x27;./blog-post-urls.json&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  <span class="string">&#x27;checking %d posts if they are scraped&#x27;</span>,</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(allPosts).<span class="property">length</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; wasScrapedAfter &#125; = <span class="built_in">require</span>(<span class="string">&#x27;was-it-scraped&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">checkScrapeStatus</span>(<span class="params">urlsModified</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> urls = <span class="title class_">Object</span>.<span class="title function_">keys</span>(urlsModified)</span><br><span class="line">  <span class="keyword">const</span> results = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> url <span class="keyword">of</span> urls) &#123;</span><br><span class="line">    <span class="keyword">const</span> modified = <span class="keyword">new</span> <span class="title class_">Date</span>(urlsModified[url])</span><br><span class="line">    <span class="keyword">const</span> scraped = <span class="keyword">await</span> <span class="title function_">wasScrapedAfter</span>(url, modified)</span><br><span class="line">    <span class="keyword">if</span> (!scraped) &#123;</span><br><span class="line">      results.<span class="title function_">push</span>(url)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">checkScrapeStatus</span>(allPosts).<span class="title function_">then</span>(<span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> filename = <span class="string">&#x27;need-scraping.json&#x27;</span></span><br><span class="line">  fs.<span class="title function_">writeFileSync</span>(filename, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(list, <span class="literal">null</span>, <span class="number">2</span>) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;saved %d links to be scraped into %s&#x27;</span>, list.<span class="property">length</span>, filename)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>A typical run quickly goes through the hundreds of URLs to only find the new and the modified blog posts.</p><p><img src="../images/incremental-scraping/filter.png" alt="Filtering all URLs by the last scraped vs modified dates"></p><p>In the above run, only a single blog post URL will require scraping.</p><p><img src="../images/incremental-scraping/cat.png" alt="The saved JSON file lists a single blog post URL that needs scraping"></p><p>The last Node script goes through the list of URLs to scrape and fires up Cypress via its <a href="https://on.cypress.io/module-api">NPM module API</a>. After scraping it marks the last scraped timestamp in the database for those blog posts using the <code>was-it-scraped</code> module and its <code>markScraped</code> function.</p><figure class="highlight js"><figcaption><span>scrape-filtered-posts.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; markScraped &#125; = <span class="built_in">require</span>(<span class="string">&#x27;was-it-scraped&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cypress = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> urlsToScrape = <span class="built_in">require</span>(<span class="string">&#x27;./need-scraping.json&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;to scrape %d posts&#x27;</span>, urlsToScrape.<span class="property">length</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">scrapeOnePost</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> outputFolder = <span class="string">&#x27;scraped&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> slug = url.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">filter</span>(<span class="title class_">Boolean</span>).<span class="title function_">pop</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;scraping url %s, slug %s&#x27;</span>, url, slug)</span><br><span class="line">  <span class="keyword">const</span> outputRecordsFilename = path.<span class="title function_">join</span>(</span><br><span class="line">    outputFolder,</span><br><span class="line">    <span class="string">`<span class="subst">$&#123;slug&#125;</span>-algolia-objects.json`</span>,</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> cypress.<span class="title function_">run</span>(&#123;</span><br><span class="line">    <span class="attr">config</span>: &#123;</span><br><span class="line">      <span class="attr">baseUrl</span>: url,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">env</span>: &#123;</span><br><span class="line">      slug,</span><br><span class="line">      outputRecordsFilename,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">spec</span>: <span class="string">&#x27;cypress/integration/spec2.js&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> records = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(fs.<span class="title function_">readFileSync</span>(outputRecordsFilename))</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">uploadRecordsToAlgolia</span>(records, slug)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">markScraped</span>(url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">scrapeUrls</span>(<span class="params">urls</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> url <span class="keyword">of</span> urls) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">scrapeOnePost</span>(url)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">scrapeUrls</span>(urlsToScrape)</span><br></pre></td></tr></table></figure><h2><span id="continuous-incremental-scraping">Continuous incremental scraping</span></h2><p>We can do the scraping locally, but a more consistent way is to let the CI run the scraper every night. I am using GitHub actions to call the above scripts, see the code in the <a href="https://github.com/bahmutov/scrape-blog-post-page/blob/main/.github/workflows/scrape.yml">.github&#x2F;workflows&#x2F;scrape.yml</a> file.</p><figure class="highlight yml"><figcaption><span>.github/workflows/scrape.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Scrape</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="comment"># scrape any new blog posts every night</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;0 1 * * *&#x27;</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">scrape:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">üõé</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Install NPM dependencies, cache them correctly</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span> <span class="string">üì¶</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">runTests:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">modified</span> <span class="string">posts</span> <span class="string">üì∞</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">node</span> <span class="string">./get-modified-post-urls</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Filter</span> <span class="string">scraped</span> <span class="string">posts</span> <span class="string">üì§</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">node</span> <span class="string">./filter-scraped-posts</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">SUPABASE_URL:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SUPABASE_URL</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">SUPABASE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SUPABASE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Show</span> <span class="string">list</span> <span class="string">of</span> <span class="string">posts</span> <span class="string">to</span> <span class="string">scrape</span> <span class="string">üñ®</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">cat</span> <span class="string">need-scraping.json</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Scrape</span> <span class="string">the</span> <span class="string">changed</span> <span class="string">posts</span> <span class="string">üöÄ</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">node</span> <span class="string">./scrape-filtered-posts</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="comment"># for updating the scraped timestamps</span></span><br><span class="line">          <span class="attr">SUPABASE_URL:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SUPABASE_URL</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">SUPABASE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SUPABASE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># for updating the Algolia index</span></span><br><span class="line">          <span class="attr">APPLICATION_ID:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.APPLICATION_ID</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">INDEX_NAME:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.INDEX_NAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ADMIN_API_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ADMIN_API_KEY</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>The above workflow is fast. For example, a recent run with one blog post to scrape took 35 seconds.</p><p><img src="../images/incremental-scraping/run.png" alt="Running the scrape workflow on GitHub Actions"></p><p>When scraping the blog post, Cypress outputs the main messages about the scraping progress.</p><p><img src="../images/incremental-scraping/scrape.png" alt="Scraping the blog post and uploading the records to Algolia"></p><p>Even this blog post will be scraped automatically, as it tagged &quot;cypress&quot; too. And here it is - scraped by the CI üéâ</p><p><img src="../images/incremental-scraping/scrape-itself.png" alt="This blog has been scraped"></p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/scrape-static-site-with-algolia/" title="Scrape Static Site with Algolia">Scrape Static Site with Algolia</a> is a good introduction to scraping</li><li><a href="/blog/scrape-slides/" title="Scrape Slides">Scrape Slides</a> how similarly to this approach I scrape my [slides.com/bahmutov](https://slides.com/bahmutov) presentations</li><li>I scrape my YouTube <a href="https://www.youtube.com/playlist?list=PLP9o9QNnQuAYYRpJzDNWpeuOVTwxmIxcI">Cypress Tips &amp; Tricks playlist</a> using the code in <a href="https://github.com/bahmutov/scrape-youtube-videos">bahmutov&#x2F;scrape-youtube-videos</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the previous blog post &lt;a href=&quot;/blog/scrape-static-site-with-algolia/&quot; title=&quot;Scrape Static Site with Algolia&quot;&gt;Scrape Static Site wit
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
      <category term="algolia" scheme="https://glebbahmutov.com/blog/tags/algolia/"/>
    
  </entry>
  
  <entry>
    <title>Email Cypress Test Report</title>
    <link href="https://glebbahmutov.com/blog/email-cypress-report/"/>
    <id>https://glebbahmutov.com/blog/email-cypress-report/</id>
    <published>2022-02-16T05:00:00.000Z</published>
    <updated>2022-04-15T20:16:13.314Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes you run the Cypress end-to-end tests on CI and want to be notified quickly if something has failed. Most CIs can be configured to send you an email on test job failure, but they do not send detailed information about <em>what</em> has failed. In this blog post, I will show my simple <a href="https://github.com/bahmutov/cypress-email-results">cypress-email-results</a> plugin that can send an email after each Cypress run.</p><p><strong>Important:</strong> this plugin only sends the test results from the current Cypress instance. If you are using <a href="https://on.cypress.io/parallelization">Cypress parallelization</a> then each test runner will send its portion of the results.</p><h2><span id="install-and-use">Install and use</span></h2><p>I will install the plugin in the <a href="https://github.com/bahmutov/chat.io">bahmutov&#x2F;chat.io</a> repo where I am testing a Chat application. The plugin is an NPM module that I install as a dev dependency.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress-email-results</span><br><span class="line">+ cypress-email-results@1.8.0</span><br></pre></td></tr></table></figure><p>In the Cypress plugins file, let&#39;s send an email after a failed test run (by default, the plugin sends an email after each run)</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://github.com/bahmutov/cypress-email-results</span></span><br><span class="line">  <span class="comment">// only configure the email plugin if the environment variable is set</span></span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">EMAIL_TO</span>) &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;cypress-email-results&#x27;</span>)(on, config, &#123;</span><br><span class="line">      <span class="attr">email</span>: process.<span class="property">env</span>.<span class="property">EMAIL_TO</span>,</span><br><span class="line">      <span class="attr">emailOnSuccess</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="ci-configuration">CI configuration</span></h2><p>For my needs I have configured a SendGrid account, but you can pass any email transport module as an option</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;cypress-email-results&#x27;</span>)(on, config, &#123;</span><br><span class="line">  <span class="attr">email</span>: process.<span class="property">env</span>.<span class="property">EMAIL_TO</span>,</span><br><span class="line">  <span class="comment">// use your own email sender</span></span><br><span class="line">  <span class="attr">transport</span>: &#123; sendEmail ... &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Because I am using SendGrid, I need to pass the API key with the permission &quot;Mail Send&quot;</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">SENDGRID_HOST</span>=smtp.sendgrid.net</span><br><span class="line"><span class="attr">SENDGRID_PORT</span>=<span class="number">465</span></span><br><span class="line"><span class="attr">SENDGRID_USER</span>=apikey</span><br><span class="line"><span class="attr">SENDGRID_PASSWORD</span>=... the api key ...</span><br><span class="line"><span class="attr">SENDGRID_FROM</span>=email address</span><br></pre></td></tr></table></figure><p>I will pass the on GitHub Actions I set config values as secrets</p><p><img src="../images/email-results/ci-secrets.png" alt="Setting CI secrets"></p><p>On GitHub Actions I need to explicitly pass the secrets as environment variables when running the <a href="https://github.com/cypress-io/github-action">Cypress GitHub Action</a></p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">tests</span> <span class="string">üß™</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="comment"># email test results after the tests are finished</span></span><br><span class="line">    <span class="attr">EMAIL_TO:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.EMAIL_TO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="comment"># pass SendGrid settings to the plugin via environment variables</span></span><br><span class="line">    <span class="attr">SENDGRID_HOST:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SENDGRID_HOST</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">SENDGRID_PORT:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SENDGRID_PORT</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">SENDGRID_USER:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SENDGRID_USER</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">SENDGRID_PASSWORD:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SENDGRID_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">SENDGRID_FROM:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SENDGRID_FROM</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>Let&#39;s push the code and let the CI run. We see the &quot;results emailed&quot; message at the end of the run.</p><p><img src="../images/email-results/emailed.png" alt="Cypress has emailed its test results"></p><p>The received email has all the information, including the Cypress Dashboard URL (via SendGrid redirect)</p><p><img src="../images/email-results/my-email.png" alt="Cypress test run results email"></p><p>Nice.</p><p><strong>Tip:</strong> to learn about Cypress test statuses like &quot;pending&quot; and &quot;skipped&quot;, read the blog post <a href="/blog/cypress-test-statuses/" title="Cypress Test Statuses">Cypress Test Statuses</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sometimes you run the Cypress end-to-end tests on CI and want to be notified quickly if something has failed. Most CIs can be configured 
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Re-run The Tests By Clicking A Checkbox</title>
    <link href="https://glebbahmutov.com/blog/re-run-the-tests-with-checkbox/"/>
    <id>https://glebbahmutov.com/blog/re-run-the-tests-with-checkbox/</id>
    <published>2022-02-09T05:00:00.000Z</published>
    <updated>2022-02-08T16:22:09.684Z</updated>
    
    <content type="html"><![CDATA[<p>I am heavy user of <a href="/blog/renovate-app/" title="Renovate App">Renovate App</a> that keeps <a href="/blog/keep-examples-up-to-date/" title="all my repos up-to-date">all my repos up-to-date</a>. One thing that is really nice and useful is a checkbox in the Renovate master GitHub issue that I can click to re-run the dependency check.</p><p><img src="../images/re-run/renovate.png" alt="A checkbox click in the GitHub issue triggers Renovate run"></p><p>If I click on that checkbox, the Renovate app runs and checks the dependencies. How does it do it? Can I use the same approach to re-run the tests when changing the <a href="/blog/pick-tests-using-pull-request/" title="tests I want to run via Pull Request">tests I want to run via Pull Request</a>? Turns out, it is pretty simple to set up using GitHub Actions.</p><blockquote class="pullquote"><p>üéÅ You can find the example project in the repo <a href="https://github.com/bahmutov/todomvc-tests-circleci">bahmutov&#x2F;todomvc-tests-circleci</a>. Specifically, see the GitHub Workflow file <a href="https://github.com/bahmutov/todomvc-tests-circleci/blob/main/.github/workflows/pr.yml">.github&#x2F;workflows&#x2F;pr.yml</a> and the file <a href="https://github.com/bahmutov/todomvc-tests-circleci/blob/main/.github/PULL_REQUEST_TEMPLATE.md">.github&#x2F;PULL_REQUEST_TEMPLATE.md</a>.</p></blockquote><h2><span id="the-pull-request-template">The pull request template</span></h2><p>We can add a checkbox to the pull request file like this</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">To re-run the tests, pick the tags above then click the checkbox below</span><br><span class="line"></span><br><span class="line">- [ ] re-run the tests</span><br></pre></td></tr></table></figure><p>By default the checkbox is unfilled. The user can fill it by editing the pull request text or by clicking on the checkbox in the GitHub UI (assuming the user has the edit permission). Let&#39;s open a pull request and click on the checkbox.</p><p><img src="../images/re-run/check.gif" alt="Clicking on the checkbox"></p><p>We need to detect the click and run the tests.</p><h2><span id="github-actions">GitHub Actions</span></h2><p>The easiest way to detect the change in the checkbox is to run a GitHub workflow on pull request edit. You can run a workflow on different pull request events: opened, synchronized, closed, edited. We only are interested in the &quot;edited&quot; events.</p><figure class="highlight yml"><figcaption><span>.github/workflows/pr.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">pr</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">edited</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">trigger-tests:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># inspect the event, see if the user</span></span><br><span class="line">  <span class="comment"># has filled the checkbox &quot;re-run the tests&quot;</span></span><br></pre></td></tr></table></figure><p>To detect if the user clicked the previously empty checkbox, we need to inspect the <code>github.event</code> object provided to the GitHub action.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Dump</span> <span class="string">GitHub</span> <span class="string">event</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">GITHUB_CONTEXT:</span> <span class="string">$&#123;&#123;</span> <span class="string">toJson(github.event)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;$GITHUB_CONTEXT&quot;</span></span><br></pre></td></tr></table></figure><p>The dumped JSON object shows the change and the current body text of the pull request.</p><p><img src="../images/re-run/pr1.png" alt="The body of the pull request before the edit"></p><p><img src="../images/re-run/pr2.png" alt="The current body of the pull request"></p><p>Thus we can compare the <code>event.changes.body.from</code> and the <code>event.pull_request.body</code> text to see if the checkbox flipped from empty to filled. I have written this check in the <a href="https://github.com/bahmutov/should-run-github-action">bahmutov&#x2F;should-run-github-action</a> and created a reusable GitHub action everyone can use to determine if the user has filled the checkbox. In our project we use by providing an <code>id</code> and passing the GH event as an environment variable <code>GITHUB_EVENT</code>.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">the</span> <span class="string">PR</span></span><br><span class="line">  <span class="comment"># https://github.com/bahmutov/should-run-github-action</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">bahmutov/should-run-github-action@v1</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">check-pr</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">GITHUB_EVENT:</span> <span class="string">$&#123;&#123;</span> <span class="string">toJson(github.event)</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>After that we can look at the <code>check-pr</code> step and the output variable it sets called <code>shouldRun</code> to decide if we need to run the tests.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">the</span> <span class="string">PR</span></span><br><span class="line">  <span class="comment"># https://github.com/bahmutov/should-run-github-action</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">bahmutov/should-run-github-action@v1</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">check-pr</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">GITHUB_EVENT:</span> <span class="string">$&#123;&#123;</span> <span class="string">toJson(github.event)</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># we could trigger the tests to run on CircleCI</span></span><br><span class="line"><span class="comment"># or we can just run them here using the action</span></span><br><span class="line"><span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">if</span> <span class="string">the</span> <span class="string">user</span> <span class="string">filled</span> <span class="string">the</span> <span class="string">checkbox</span></span><br><span class="line">  <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.check-pr.outputs.shouldRun</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>This is how we can run the tests only when the user filled the checkbox. Of course, if the box is filled already and we click it the first time, it is emptied. The workflow runs, but immediately skips the test step. Then we click the checkbox and the tests run.</p><p><img src="../images/re-run/workflows.png" alt="All edits trigger the workflow, but it quickly finishes"></p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/pick-tests-using-pull-request/" title="Pick Tests To Run Using The Pull Request Text">Pick Tests To Run Using The Pull Request Text</a></li><li><a href="/blog/how-to-keep-cypress-tests-in-another-repo/" title="How to Keep Cypress Tests in Another Repo While Using GitHub Actions">How to Keep Cypress Tests in Another Repo While Using GitHub Actions</a></li><li><a href="/blog/how-to-keep-cypress-tests-in-another-repo-with-circleci/" title="How to Keep Cypress Tests in Another Repo While Using CircleCI">How to Keep Cypress Tests in Another Repo While Using CircleCI</a></li><li><a href="/blog/tag-tests/" title="How To Tag And Run End-to-End Tests">How To Tag And Run End-to-End Tests</a></li><li><a href="/blog/trying-github-actions/" title="Trying GitHub Actions">Trying GitHub Actions</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I am heavy user of &lt;a href=&quot;/blog/renovate-app/&quot; title=&quot;Renovate App&quot;&gt;Renovate App&lt;/a&gt; that keeps &lt;a href=&quot;/blog/keep-examples-up-to-date
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="advice" scheme="https://glebbahmutov.com/blog/tags/advice/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
  </entry>
  
</feed>
