<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Better world by better software</title>
  
  <subtitle>Gleb Bahmutov PhD</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://glebbahmutov.com/blog/"/>
  <updated>2021-06-15T18:59:39.064Z</updated>
  <id>https://glebbahmutov.com/blog/</id>
  
  <author>
    <name>Gleb Bahmutov</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>I Am Joining Mercari US</title>
    <link href="https://glebbahmutov.com/blog/joining-mercari/"/>
    <id>https://glebbahmutov.com/blog/joining-mercari/</id>
    <published>2021-06-15T04:00:00.000Z</published>
    <updated>2021-06-15T18:59:39.064Z</updated>
    
    <content type="html"><![CDATA[<p>I am happy to announce to all my friends and followers that I have joined <a href="https://www.mercari.com/">Mercari US</a> as a Senior Director of Engineering. Mercari US is an American subsidiary of the first Japanese startup to reach the unicorn valuation before <a href="https://techcrunch.com/2018/05/15/mercari-japans-first-unicorn-files-to-raise-1-1b-in-tokyo-ipo/">going IPO in 2018</a>. At first, I will help with <a href="../tags/testing">testing</a> the web and mobile applications. Later on, I hope to bring my <a href="https://glebbahmutov.com">open-source experience</a> to the company, improving the <a href="../tags/modular-development/">tooling</a>, <a href="../tags/documentation/">documentation</a>, <a href="../tags/hiring">hiring</a>, and <a href="/blog/multiple-benefits/" title="development practices">development practices</a> of every engineer.</p><p>On the personal level, I am excited to work directly with Dr. Mok Oh, the Chief Technical Officer at Mercari. We worked together many many years ago at EveryScape and have achieved some nice results. I hope we can do even better this time around, considering the engineering resources available at the company. I am also excited about the mission of the company: help find the things you no longer need a second home. As a <a href="../tags/climate">climate activist</a>, I strongly believe in the <a href="https://www.ted.com/playlists/740/reduce_reuse_recycle">reduce, reuse, recycle</a> approach to fighting the climate crisis. Mercari marketplace directly provides an easy way to reuse the things you no longer need.</p><p>The scale of operations and engineering challenges facing Mercari is large - it is used by tens of millions of users every day, and those numbers are growing rapidly. The engineering team has to maintain lots of services chugging along, keeping the mobile and web users happy. While I am impressed by everyone I have met at the company so far, I know we cannot do it alone. Do you want to join me? Take a look at the <a href="https://www.mercari.com/careers/">open Mercari US positions</a>, and if anything catches your eye, apply. The company is remote-first and you can work from anywhere in United States and Japan. If you have questions, ping me as I would answer them as much as I can. Of course, reading <a href="/blog/help-me-say-yes/" title="Help Me Say Yes">Help Me Say Yes</a> post first is a good strategy ;)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I am happy to announce to all my friends and followers that I have joined &lt;a href=&quot;https://www.mercari.com/&quot;&gt;Mercari US&lt;/a&gt; as a Senior D
      
    
    </summary>
    
      <category term="people" scheme="https://glebbahmutov.com/blog/categories/people/"/>
    
    
      <category term="hiring" scheme="https://glebbahmutov.com/blog/tags/hiring/"/>
    
  </entry>
  
  <entry>
    <title>Run Two Cypress Test Runners At The Same Time</title>
    <link href="https://glebbahmutov.com/blog/run-two-cypress-runners/"/>
    <id>https://glebbahmutov.com/blog/run-two-cypress-runners/</id>
    <published>2021-06-12T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.343Z</updated>
    
    <content type="html"><![CDATA[<p>Please start by reading the blog post <a href="/blog/test-socketio-chat-using-cypress/" title="Test a Socket.io Chat App using Cypress">Test a Socket.io Chat App using Cypress</a>. In this blog post we will run two Cypress test runners concurrently without any synchronization between them to test a real-time chat application.</p><p><img src="../images/two-cy/chat2.png" alt="Two Cypress test runners chatting with each other"></p><h2><span id="separate-specs">Separate specs</span></h2><p>First, we want to give each Cypress test runner its own configuration and the spec to run. While the first Cypress test runner executes the spec file <code>cypress/pair/first-user.js</code>, the second Cypress test runner should execute the spec file <code>cypress/pair/second-user.js</code>.</p><figure class="highlight js"><figcaption><span>cypress/pair/first-user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// this test behaves as the first user to join the chat</span></span><br><span class="line">it(<span class="string">&#x27;chats with the second user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">&#x27;First&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> secondName = <span class="string">&#x27;Second&#x27;</span></span><br><span class="line"></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(name)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// make sure the greeting message is shown</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;name&#125;</span> join the chat..`</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// at some point, the second user enters the chat and posts a message</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, <span class="string">&#x27;Good to see you&#x27;</span>)</span><br><span class="line">    .contains(<span class="string">&#x27;strong&#x27;</span>, secondName)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// reply to the second user</span></span><br><span class="line">  cy.get(<span class="string">&#x27;#txt&#x27;</span>).type(<span class="string">&#x27;Glad to be here&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, <span class="string">&#x27;Glad to be here&#x27;</span>)</span><br><span class="line">    .contains(<span class="string">&#x27;strong&#x27;</span>, name)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The second user&#39;s spec sends the opposite message:</p><figure class="highlight js"><figcaption><span>cypress/pair/second-user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// this test behaves as the second user to join the chat</span></span><br><span class="line">it(<span class="string">&#x27;chats with the first user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">&#x27;Second&#x27;</span></span><br><span class="line">  <span class="comment">// we are chatting with the first user</span></span><br><span class="line">  <span class="keyword">const</span> firstName = <span class="string">&#x27;First&#x27;</span></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(name)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// make sure the greeting message is shown</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;name&#125;</span> join the chat..`</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;#txt&#x27;</span>).type(<span class="string">&#x27;Good to see you&#123;enter&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// a message from the first user arrives</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, <span class="string">&#x27;Glad to be here&#x27;</span>)</span><br><span class="line">    .contains(<span class="string">&#x27;strong&#x27;</span>, firstName)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="the-configuration-files">The configuration files</span></h2><p>To precisely control the test runners, each instance will have its own configuration file. The first test runner will use <code>cy-first-user.json</code> file.</p><figure class="highlight json"><figcaption><span>cy-first-user.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;fixturesFolder&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;supportFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;pluginsFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;http://localhost:8080&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;integrationFolder&quot;</span>: <span class="string">&quot;cypress/pair&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;testFiles&quot;</span>: <span class="string">&quot;**/first-user.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;viewportWidth&quot;</span>: <span class="number">400</span>,</span><br><span class="line">  <span class="attr">&quot;viewportHeight&quot;</span>: <span class="number">400</span>,</span><br><span class="line">  <span class="attr">&quot;defaultCommandTimeout&quot;</span>: <span class="number">15000</span>,</span><br><span class="line">  <span class="attr">&quot;videosFolder&quot;</span>: <span class="string">&quot;cypress/videos-pair/first&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;screenshotsFolder&quot;</span>: <span class="string">&quot;cypress/screenshots-pair/first&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;$schema&quot;</span>: <span class="string">&quot;https://on.cypress.io/cypress.schema.json&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The property <code>$schema</code> allows the modern code editors to apply <a href="/blog/json-schema-for-the-win/" title="custom JSON schema">custom JSON schema</a> to the configuration file and show intelligent code popups for the fields.</p><p>The second configuration file is almost identical.</p><figure class="highlight json"><figcaption><span>cy-second-user.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;fixturesFolder&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;supportFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;pluginsFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;http://localhost:8080&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;integrationFolder&quot;</span>: <span class="string">&quot;cypress/pair&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;testFiles&quot;</span>: <span class="string">&quot;**/second-user.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;viewportWidth&quot;</span>: <span class="number">400</span>,</span><br><span class="line">  <span class="attr">&quot;viewportHeight&quot;</span>: <span class="number">400</span>,</span><br><span class="line">  <span class="attr">&quot;defaultCommandTimeout&quot;</span>: <span class="number">15000</span>,</span><br><span class="line">  <span class="attr">&quot;videosFolder&quot;</span>: <span class="string">&quot;cypress/videos-pair/second&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;screenshotsFolder&quot;</span>: <span class="string">&quot;cypress/screenshots-pair/second&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;$schema&quot;</span>: <span class="string">&quot;https://on.cypress.io/cypress.schema.json&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>While running two Cypress instances, we are not using any plugins or custom commands, thus we disable the fixtures, the support files, and the plugins file.</li><li>We use a custom integration folder to separate the two concurrent specs from any other any other individual specs. We also set the explicit single test file for each runner.</li><li>We increase the default command timeout because it might take a while to start the second test runner.</li><li>We use separate folders and videos to avoid each test runner clobbering the common folder on start.</li></ol><blockquote class="pullquote"><p><strong>Tip:</strong> we could have used <a href="https://github.com/bahmutov/cypress-extends">cypress-extends</a> plugin to reuse the common configuration data, but I prefer to be explicit in these examples for clarity.</p></blockquote><p>Now we can manually start the application, open the first Cypress instance with <code>npx cypress open --config-file cy-first-user.json</code>, then open the second Cypress instance with <code>npx cypress open --config-file cy-second-user.json</code> command. The tests pass:</p><p><img src="../images/two-cy/tests.png" alt="The first and the second tests"></p><h2><span id="running-concurrently">Running concurrently</span></h2><p>To execute the two test runners together, we can install NPM module <a href="https://github.com/kimmobrunfeldt/concurrently#readme">concurrently</a></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D concurrently</span><br><span class="line">+ concurrently@6.2.0</span><br></pre></td></tr></table></figure><p>Let&#39;s define common scripts in the <a href="https://github.com/bahmutov/cypress-socketio-chat/blob/main/package.json">package.json</a> file</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;node .&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cy:first&quot;</span>: <span class="string">&quot;cypress run --config-file cy-first-user.json&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cy:second&quot;</span>: <span class="string">&quot;cypress run --config-file cy-second-user.json&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;chat&quot;</span>: <span class="string">&quot;concurrently npm:cy:first npm:cy:second&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Whenever we need to run the tests, we start the application and call <code>npm run chat</code>. The <code>concurrently</code> module shows the output from each instance prefixed by the command&#39;s name:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$ npm start &amp;</span><br><span class="line">$ npm run chat</span><br><span class="line"></span><br><span class="line">&gt; cypress-socketio-chat@1.0.0 chat /Users/gleb/git/cypress-socketio-chat</span><br><span class="line">&gt; concurrently npm:cy:first npm:cy:second</span><br><span class="line"></span><br><span class="line">[cy:first]</span><br><span class="line">[cy:first] &gt; cypress-socketio-chat@1.0.0 cy:first /Users/gleb/git/cypress-socketio-chat</span><br><span class="line">[cy:first] &gt; cypress run --config-file cy-first-user.json</span><br><span class="line">[cy:first]</span><br><span class="line">[cy:second]</span><br><span class="line">[cy:second] &gt; cypress-socketio-chat@1.0.0 cy:second /Users/gleb/git/cypress-socketio-chat</span><br><span class="line">[cy:second] &gt; cypress run --config-file cy-second-user.json</span><br><span class="line">[cy:second]</span><br><span class="line">[cy:second]</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[cy:first]</span><br><span class="line">[cy:first]</span><br><span class="line">[cy:second]        Spec                                              Tests  Passing  Failing  Pending  Skipped</span><br><span class="line">[cy:second]   ┌────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">[cy:second]   │ ✔  second-user.js                           00:01        1        1        -        -        - │</span><br><span class="line">[cy:second]   └────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line">[cy:second]     ✔  All specs passed!                        00:01        1        1        -        -        -</span><br><span class="line">[cy:second]</span><br><span class="line">[cy:first]        Spec                                              Tests  Passing  Failing  Pending  Skipped</span><br><span class="line">[cy:first]   ┌────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">[cy:first]   │ ✔  first-user.js                            00:01        1        1        -        -        - │</span><br><span class="line">[cy:first]   └────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line">[cy:first]     ✔  All specs passed!                        00:01        1        1        -        -        -</span><br><span class="line">[cy:first]</span><br><span class="line">[cy:first] npm run cy:first exited with code 0</span><br><span class="line">[cy:second] npm run cy:second exited with code 0</span><br></pre></td></tr></table></figure><p>We can watch the video saved by each test runner. We can even run the E2E tests on CI. I am using GitHub Actions, first running all E2E tests, then running the two Cypress instances:</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">code</span> <span class="string">🛎</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># install dependencies, start the app,</span></span><br><span class="line"><span class="comment"># and run E2E tests using Cypress GitHub action</span></span><br><span class="line"><span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:8080&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># run two Cypress instances at the same time</span></span><br><span class="line"><span class="comment"># so they truly chat with each other</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="number">2</span> <span class="string">Cypresses</span> <span class="string">🧪</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="comment"># we already have installed everything</span></span><br><span class="line">    <span class="attr">install:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># the application is running already</span></span><br><span class="line">    <span class="comment"># from the previous &quot;start&quot; command</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">chat</span></span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> sometimes starting two Cypress instances creates a race condition while starting the X11 server. A more robust approach would start a separate XServer, then start two Cypress runners.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Please start by reading the blog post &lt;a href=&quot;/blog/test-socketio-chat-using-cypress/&quot; title=&quot;Test a Socket.io Chat App using Cypress&quot;&gt;T
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress vs Other Test Runners</title>
    <link href="https://glebbahmutov.com/blog/cypress-vs-other-test-runners/"/>
    <id>https://glebbahmutov.com/blog/cypress-vs-other-test-runners/</id>
    <published>2021-06-10T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.261Z</updated>
    
    <content type="html"><![CDATA[<p>Note: the diagram in this blog post is similar to the diagram used by <a href="https://github.com/rainerhahnekamp">Rainer Hahnekamp</a> in his presentation <a href="https://www.rainerhahnekamp.com/en/angular-e2e-testing-protractor-is-dead-long-live-cypress/">Angular &amp; Cypress</a>.</p><p>The browser automation end-to-end (E2E) test runners are very different in their architecture. I think they can broadly be categorized in three categories depending on how they communicate and control the browser and the application under the test.</p><p><img src="../images/protocols/protocols1.png" alt="End-to-end test runners and how they control the browser"></p><ol><li><p>WebDriver protocol is a HTTP JSON protocol that sends the commands from the test runner to the browser, see <a href="https://webdriver.io/docs/automationProtocols/">1</a>. The most important part that makes it different from Cypress is that it is a &quot;wire protocol as a way for out-of-process programs to remotely instruct the behavior of web browsers.&quot; Thus the test is running outside of the application running in the browser. Most browsers implement this protocol, thus the test runners using this protocol can provide the widest cross-browser testing.</p></li><li><p>The DevTools protocol like Chrome debugger protocol (CDP) uses WebSocket connection to communicate from the test runner to the browser. The browser can expose a lot more via CDP, but this protocol is driven by Chrome and is partially implemented by Firefox. Again, the test runner runs in the separate process from the browser.</p></li><li><p>JavaScript loaded in the same browser tab as the application, and running in the same event loop. The tests and the app share the same process and domain, thus the test can directly access the DOM, the application&#39;s objects, and the browser APIs. By sharing the event loop, the test and the app &quot;take turns&quot;: when the test code is running, the application is paused. When the application is running, the test code is waiting. This guarantees that the application does not change between the test steps; when the test has located an element, that element cannot suddenly disappear right before the test clicks on it.</p></li></ol><p>Cypress loads its test code in the test iframe, while the application is running in another iframe in the same browser tab. This gives the test code direct access to the application and most of the browser APIs the application can use.</p><p><img src="../images/protocols/proxy.png" alt="Cypress test code controls the application directly from the same browser tab"></p><p>For example, the spec code can stub the <code>navigator</code> object to <a href="/blog/stub-navigator-api/" title="Mock the battery level">Mock the battery level</a> during test:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;calls navigator.getBattery&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> mockBatteryInfo = &#123;</span><br><span class="line">    level: <span class="number">0.75</span>,</span><br><span class="line">    charging: <span class="literal">true</span>,</span><br><span class="line">    chargingTime: <span class="number">1800</span>, <span class="comment">// seconds</span></span><br><span class="line">    dischargingTime: <span class="literal">Infinity</span>,</span><br><span class="line">    addEventListener: <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    onBeforeLoad (win) &#123;</span><br><span class="line">      <span class="keyword">delete</span> win.navigator.battery</span><br><span class="line">      <span class="comment">// we can create Cypress stub and check</span></span><br><span class="line">      <span class="comment">// that is is really being called by the application code</span></span><br><span class="line">      win.navigator.getBattery = cy</span><br><span class="line">        .stub()</span><br><span class="line">        .resolves(mockBatteryInfo)</span><br><span class="line">        .as(<span class="string">&#x27;getBattery&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.contains(<span class="string">&#x27;.battery-percentage&#x27;</span>, <span class="string">&#x27;75%&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  <span class="comment">// ensure our stub has been called by the application</span></span><br><span class="line">  cy.get(<span class="string">&#x27;@getBattery&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>When the test runs, the mocked methods are invoked by the application.</p><p><img src="../images/battery/get-battery2.png" alt="Mocking browser APIs from the test"></p><h2><span id="current-trends">Current trends</span></h2><p>I believe (and I am trying not to run afoul of my own rule <a href="../common-documentation-mistakes-and-how-to-avoid-them/#do-not-compare-yourself-to-other-tools">Do not compare yourself to other tools</a>) that currently Selenium and WebDriver.io are trying to go beyond JSON HTTP to using a bidirectional WebSocket protocol similar to CDP.</p><p>On the other hand, Playwright team is hard at work patching the Firefox and WebKit to allow CDP to work with all major browsers.</p><p>Finally, Cypress has CDP support built-in already. Yup, it is there - this is how Cypress tells the browser to visit an URL or how Cypress sets cookies from the test. These actions cannot be done from the &quot;regular&quot; JavaScript code and require a privileged access to work. You too can use CDP from Cypress tests, see the <a href="/blog/cypress-automation/" title="Cypress Automation">Cypress Automation</a> blog post. Note: we still need to expose <a href="https://github.com/cypress-io/cypress/issues/7942">listening to CDP events</a> for full feature support.</p><p>Taking it all together, the current state of the browser automation protocols is:</p><p><img src="../images/protocols/current.png" alt="Current state of browser automation from E2E test runners"></p><p>Happy testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Note: the diagram in this blog post is similar to the diagram used by &lt;a href=&quot;https://github.com/rainerhahnekamp&quot;&gt;Rainer Hahnekamp&lt;/a&gt; i
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Test a Socket.io Chat App using Cypress</title>
    <link href="https://glebbahmutov.com/blog/test-socketio-chat-using-cypress/"/>
    <id>https://glebbahmutov.com/blog/test-socketio-chat-using-cypress/</id>
    <published>2021-06-09T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.363Z</updated>
    
    <content type="html"><![CDATA[<p>This is the first blog post showing how to test a <a href="https://socket.io/">Socket.io</a> real-time chat using the <a href="https://www.cypress.io/">Cypress.io</a> test runner. Subscribe to the <a href="../atom.xml">Atom RSS feed</a> and follow <a href="https://twitter.com/bahmutov">@bahmutov</a> to learn when the new parts are published.</p><!-- toc --><ul><li><a href="#the-app">The app</a></li><li><a href="#the-first-test">The first test</a></li><li><a href="#use-a-random-user-name">Use a random user name</a></li><li><a href="#sending-events-from-the-test">Sending events from the test</a></li><li><a href="#use-socketio-from-cypress">Use Socket.io from Cypress</a></li><li><a href="#verify-message-received-by-the-second-user">Verify message received by the second user</a></li><li><a href="#test-user-leaving-the-chat">Test user leaving the chat</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><h2><span id="the-app">The app</span></h2><p>As the example app, I used the chat app from <a href="https://github.com/dkhd/node-group-chat">dkhd/node-group-chat</a> repo, as described in <a href="https://itnext.io/build-a-group-chat-app-in-30-lines-using-node-js-15bfe7a2417b">Build A Group-Chat App in 30 Lines Using Node.js</a> blog post. The app allows you to open multiple chat browser windows and exchange group messages.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br><span class="line"></span><br><span class="line">&gt; cypress-socketio-chat@1.0.0 start &#x2F;Users&#x2F;gleb&#x2F;git&#x2F;cypress-socketio-chat</span><br><span class="line">&gt; node .</span><br><span class="line"></span><br><span class="line">listening on *:8080</span><br><span class="line">new connection</span><br><span class="line">set username Joe</span><br><span class="line">new connection</span><br><span class="line">set username Ann</span><br><span class="line">&gt; Joe: Hi there, Ann</span><br><span class="line">&gt; Ann: Good to see you, Joe</span><br></pre></td></tr></table></figure><p><img src="../images/chat-intro/chat-two.png" alt="Two users chatting"></p><p>The server is relaying the messages from the users, the front end code is using event subscriptions to display new messages.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../socket.io/socket.io.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;messages&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">id</span>=<span class="string">&quot;chatForm&quot;</span>&gt;</span></span><br><span class="line">    &lt;input</span><br><span class="line">      id=&quot;txt&quot;</span><br><span class="line">      autocomplete=&quot;off&quot;</span><br><span class="line">      autofocus=&quot;on&quot;</span><br><span class="line">      placeholder=&quot;type your message here...&quot;</span><br><span class="line">    /&gt;<span class="tag">&lt;<span class="name">button</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> socket = io.connect(<span class="string">&#x27;http://localhost:8080&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="comment">// submit text message without reload/refresh the page</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;form&#x27;</span>).submit(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      e.preventDefault() <span class="comment">// prevents page reloading</span></span></span><br><span class="line"><span class="javascript">      socket.emit(<span class="string">&#x27;chat_message&#x27;</span>, $(<span class="string">&#x27;#txt&#x27;</span>).val())</span></span><br><span class="line"><span class="javascript">      $(<span class="string">&#x27;#txt&#x27;</span>).val(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    socket.on(<span class="string">&#x27;chat_message&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span></span></span><br><span class="line"><span class="javascript">      $(<span class="string">&#x27;#messages&#x27;</span>).append($(<span class="string">&#x27;&lt;li&gt;&#x27;</span>).html(msg)),</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="javascript">    socket.on(<span class="string">&#x27;is_online&#x27;</span>, <span class="function">(<span class="params">username</span>) =&gt;</span></span></span><br><span class="line"><span class="javascript">      $(<span class="string">&#x27;#messages&#x27;</span>).append($(<span class="string">&#x27;&lt;li&gt;&#x27;</span>).html(username)),</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// ask username</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> username = prompt(<span class="string">&#x27;Please tell me your name&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    socket.emit(<span class="string">&#x27;username&#x27;</span>, username)</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Note:</strong> you can find the source code for the app, and the tests in the repo <a href="https://github.com/bahmutov/cypress-socketio-chat">bahmutov/cypress-socketio-chat</a>.</p><h2><span id="the-first-test">The first test</span></h2><p>Even if there is a single user, the chat application is showing every message. Thus our first test can confirm the submitted messages appear.</p><figure class="highlight js"><figcaption><span>cypress/integration/first-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;shows the message&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// when the application asks for the name</span></span><br><span class="line">      <span class="comment">// return &quot;Cy&quot; using https://on.cypress.io/stub</span></span><br><span class="line">      cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(<span class="string">&#x27;Cy&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.get(<span class="string">&#x27;#txt&#x27;</span>).type(<span class="string">&#x27;Hello there&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, <span class="string">&#x27;Hello there&#x27;</span>).contains(<span class="string">&#x27;strong&#x27;</span>, <span class="string">&#x27;Cy&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> to start the server and open Cypress when the <code>localhost:8080</code> responds I use <a href="https://github.com/bahmutov/start-server-and-test">start-server-and-test</a> utility.</p><p><img src="../images/chat-intro/first-test.png" alt="First test passing"></p><p>As soon as I have the first Cypress test passing, I configure the <a href="https://on.cypress.io/ci">continuous integration</a> service to test every commit. In this repo, I will be using <a href="https://github.com/cypress-io/github-action">Cypress GitHub Action</a> to run the tests, see <a href="https://github.com/bahmutov/cypress-socketio-chat/blob/main/.github/workflows/ci.yml">.github/workflows/ci.yml</a> file:</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">code</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># install dependencies, start the app,</span></span><br><span class="line">      <span class="comment"># and run E2E tests using Cypress GitHub action</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">wait:</span> <span class="string">&#x27;http://localhost:8080&#x27;</span></span><br></pre></td></tr></table></figure><p>You can find the CI runs at <a href="https://github.com/bahmutov/cypress-socketio-chat/actions">bahmutov/cypress-socketio-chat/actions</a>.</p><p><img src="../images/chat-intro/runs.png" alt="Test runs on CI using GitHub Actions"></p><h2><span id="use-a-random-user-name">Use a random user name</span></h2><p>We are working towards testing the full chat, thus we will have multiple users. To avoid every test typing the same <code>Cy</code> name, let&#39;s create the user names randomly using the bundled <a href="https://on.cypress.io/_">Lodash</a> library.</p><figure class="highlight js"><figcaption><span>cypress/integration/random-name-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;chats&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">`Cy_<span class="subst">$&#123;Cypress._.random(<span class="number">1000</span>)&#125;</span>`</span></span><br><span class="line">  <span class="comment">// we can make text bold using Markdown &quot;**&quot;</span></span><br><span class="line">  cy.log(<span class="string">`User **<span class="subst">$&#123;name&#125;</span>**`</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(name)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.get(<span class="string">&#x27;#txt&#x27;</span>).type(<span class="string">&#x27;Hello there&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, <span class="string">&#x27;Hello there&#x27;</span>).contains(<span class="string">&#x27;strong&#x27;</span>, name)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/chat-intro/random.png" alt="Using a randomly generates user name"></p><blockquote class="pullquote"><p>🌍 Notice the name <code>Cy_350</code> in the command log. By coincidence <a href="https://350.org/">350.org</a> is a climate organization fighting to bring us back to 350 parts per million (ppm) of carbon dioxide gas (CO2) in the atmosphere - which is the safe limit. Currently we are at <a href="https://research.noaa.gov/article/ArtMID/587/ArticleID/2764/Coronavirus-response-barely-slows-rising-carbon-dioxide">420 ppm</a> - a level of this greenhouse planet-warming gas we had 4 million years ago, when the average temperatures were 3C / 7F higher, and the sea level were higher by 26m / 70 feet. Plan your future with this in mind.</p></blockquote><h2><span id="sending-events-from-the-test">Sending events from the test</span></h2><p>We need to see what happens when some other user joins the chat and sends a message. Because this communication happens over WebSockets, we cannot simply use <a href="https://on.cypress.io/intercept">cy.intercept</a>, at least not in v7. But let&#39;s see what happens <em>immediately</em> after a new message arrives via a socket channel:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">socket.on(<span class="string">&#x27;chat_message&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span></span><br><span class="line">  $(<span class="string">&#x27;#messages&#x27;</span>).append($(<span class="string">&#x27;&lt;li&gt;&#x27;</span>).html(msg)),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">socket.on(<span class="string">&#x27;is_online&#x27;</span>, <span class="function">(<span class="params">username</span>) =&gt;</span></span><br><span class="line">  $(<span class="string">&#x27;#messages&#x27;</span>).append($(<span class="string">&#x27;&lt;li&gt;&#x27;</span>).html(username)),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>We want to trigger those events from the test. The simplest way is to create an object abstraction between the <code>socket</code> and the rest of the code.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> socket = io.connect(<span class="string">&#x27;http://localhost:8080&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clientActions = &#123;</span><br><span class="line">  <span class="function"><span class="title">onChatMessage</span>(<span class="params">msg</span>)</span> &#123;</span><br><span class="line">    $(<span class="string">&#x27;#messages&#x27;</span>).append($(<span class="string">&#x27;&lt;li&gt;&#x27;</span>).html(msg))</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">isOnline</span>(<span class="params">username</span>)</span> &#123;</span><br><span class="line">    $(<span class="string">&#x27;#messages&#x27;</span>).append($(<span class="string">&#x27;&lt;li&gt;&#x27;</span>).html(username))</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">socket.on(<span class="string">&#x27;chat_message&#x27;</span>, clientActions.onChatMessage)</span><br><span class="line">socket.on(<span class="string">&#x27;is_online&#x27;</span>, clientActions.isOnline)</span><br></pre></td></tr></table></figure><p>The application works, the same, but now we can expose the <code>clientActions</code> object during end-to-end tests.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.Cypress) &#123;</span><br><span class="line">  <span class="built_in">window</span>.clientActions = clientActions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is how we can use it from the test to test what happens when another user joins the chat and posts a message. We are not delivering the messages via the socket connection, instead we trigger them <em>right</em> after.</p><figure class="highlight js"><figcaption><span>cypress/integration/client-api-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows status for 2nd user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">`Cy_<span class="subst">$&#123;Cypress._.random(<span class="number">1000</span>)&#125;</span>`</span></span><br><span class="line">  cy.log(<span class="string">`User **<span class="subst">$&#123;name&#125;</span>**`</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(name)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;#txt&#x27;</span>).type(<span class="string">&#x27;Hello there&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, <span class="string">&#x27;Hello there&#x27;</span>)</span><br><span class="line">    .contains(<span class="string">&#x27;strong&#x27;</span>, name)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      cy.log(<span class="string">&#x27;**second user**&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// pretend to send a message from another user</span></span><br><span class="line">  cy.window()</span><br><span class="line">    .its(<span class="string">&#x27;clientActions&#x27;</span>)</span><br><span class="line">    .invoke(<span class="string">&#x27;isOnline&#x27;</span>, <span class="string">&#x27;👻 &lt;i&gt;Ghost is testing&lt;/i&gt;&#x27;</span>)</span><br><span class="line">  cy.window()</span><br><span class="line">    .its(<span class="string">&#x27;clientActions&#x27;</span>)</span><br><span class="line">    .invoke(<span class="string">&#x27;onChatMessage&#x27;</span>, <span class="string">&#x27;&lt;strong&gt;Ghost&lt;/strong&gt;: Boo&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, <span class="string">&#x27;Boo&#x27;</span>).contains(<span class="string">&#x27;strong&#x27;</span>, <span class="string">&#x27;Ghost&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/chat-intro/client-api-spec.png" alt="Testing messages from another user"></p><p>We can refactor the spec code and save the <code>clientActions</code> reference as an <a href="https://on.cypress.io/as">alias</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pretend to send a message from another user</span></span><br><span class="line">cy.window().its(<span class="string">&#x27;clientActions&#x27;</span>).as(<span class="string">&#x27;client&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;@client&#x27;</span>).invoke(<span class="string">&#x27;isOnline&#x27;</span>, <span class="string">&#x27;👻 &lt;i&gt;Ghost is testing&lt;/i&gt;&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;@client&#x27;</span>).invoke(<span class="string">&#x27;onChatMessage&#x27;</span>, <span class="string">&#x27;&lt;strong&gt;Ghost&lt;/strong&gt;: Boo&#x27;</span>)</span><br><span class="line">cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, <span class="string">&#x27;Boo&#x27;</span>).contains(<span class="string">&#x27;strong&#x27;</span>, <span class="string">&#x27;Ghost&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> the above approach is what I call <a href="/blog/realworld-app-action/" title="app actions">app actions</a>.</p><h2><span id="use-socketio-from-cypress">Use Socket.io from Cypress</span></h2><p>The above approach has an advantage - it does not require the backend to run. We can simply use <code>clientActions</code> without a server to exercise our web page as needed. But we really won&#39;t have any confidence in the server running correctly. We won&#39;t have confidence in our WebSocket communication channel working either. Let&#39;s truly &quot;drive&quot; the conversation by opening a second connection to the server and &quot;chatting&quot; with our web user.</p><p>First, let&#39;s install the <code>socket.io-client</code> NPM module</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D socket.io-client</span><br><span class="line">+socket.io-client@4.1.2</span><br></pre></td></tr></table></figure><p>Now in Cypress plugin file <a href="https://github.com/bahmutov/cypress-socketio-chat/blob/main/cypress/plugins/index.js">cypress/plugins/index.js</a> we will add an optional socket.io client logic to be controlled using the <a href="https://on.cypress.io/task">cy.task</a> command.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Socket.io client to allow Cypress itself</span></span><br><span class="line"><span class="comment">// to connect from the plugin file to the chat app</span></span><br><span class="line"><span class="comment">// to play the role of another user</span></span><br><span class="line"><span class="comment">// https://socket.io/docs/v4/client-initialization/</span></span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">&#x27;socket.io-client&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type <span class="type">&#123;Cypress.PluginConfig&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// eslint-disable-next-line no-unused-vars</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// `on` is used to hook into various events Cypress emits</span></span><br><span class="line">  <span class="comment">// `config` is the resolved Cypress config</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// connection to the chat server</span></span><br><span class="line">  <span class="keyword">let</span> socket</span><br><span class="line"></span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">connect</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;Cypress is connecting to socket server under name %s&#x27;</span>, name)</span><br><span class="line">      socket = io(<span class="string">&#x27;http://localhost:8080&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      socket.emit(<span class="string">&#x27;username&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The test can call the task and confirm the web UI receives the new user message</p><figure class="highlight js"><figcaption><span>cypress/integration/socket-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;sees the 2nd user join&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// the browser is the 1st user</span></span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">`Cy_<span class="subst">$&#123;Cypress._.random(<span class="number">1000</span>)&#125;</span>`</span></span><br><span class="line">  cy.log(<span class="string">`User **<span class="subst">$&#123;name&#125;</span>**`</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(name)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// make sure the greeting message is shown</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;name&#125;</span> join the chat..`</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// connect to the server using 2nd user</span></span><br><span class="line">  <span class="keyword">const</span> secondName = <span class="string">&#x27;Ghost&#x27;</span></span><br><span class="line">  cy.task(<span class="string">&#x27;connect&#x27;</span>, secondName)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;secondName&#125;</span> join the chat..`</span>).should(</span><br><span class="line">    <span class="string">&#x27;be.visible&#x27;</span>,</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes, our web page really sees the users joining the running Socket.io server.</p><p><img src="../images/chat-intro/join.png" alt="Seeing the second user join"></p><p>Let&#39;s send a message from the second user and confirm the web page receives it. We can add another task to the plugin file:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// task in cypress/plugins/index.js file</span></span><br><span class="line"><span class="function"><span class="title">say</span>(<span class="params">message</span>)</span> &#123;</span><br><span class="line">  socket.emit(<span class="string">&#x27;chat_message&#x27;</span>, message)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>The test can send the message using the 2nd user (via <code>cy.task</code>) and verify it shows up in the web page</p><figure class="highlight js"><figcaption><span>cypress/integration/socket-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;sees messages from the 2nd user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// the browser is the 1st user</span></span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">`Cy_<span class="subst">$&#123;Cypress._.random(<span class="number">1000</span>)&#125;</span>`</span></span><br><span class="line">  cy.log(<span class="string">`User **<span class="subst">$&#123;name&#125;</span>**`</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(name)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> secondName = <span class="string">&#x27;Ghost&#x27;</span></span><br><span class="line">  cy.task(<span class="string">&#x27;connect&#x27;</span>, secondName)</span><br><span class="line">  <span class="keyword">const</span> message = <span class="string">&#x27;hello from 2nd user&#x27;</span></span><br><span class="line">  cy.task(<span class="string">&#x27;say&#x27;</span>, message)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, message)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes - but it shows the typical distributed system behavior; it is hard to guarantee that messages are delivered in the expected order.</p><p><img src="../images/chat-intro/order.png" alt="Unexpected order of messages"></p><p>We really want to ensure the first user joins before sending messages from the 2nd user, let&#39;s add assertions.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js file</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// make sure the greeting message is shown</span></span><br><span class="line">cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;name&#125;</span> join the chat..`</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> secondName = <span class="string">&#x27;Ghost&#x27;</span></span><br><span class="line">cy.task(<span class="string">&#x27;connect&#x27;</span>, secondName)</span><br><span class="line">cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;secondName&#125;</span> join the chat..`</span>)</span><br><span class="line">  .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> message = <span class="string">&#x27;hello from 2nd user&#x27;</span></span><br><span class="line">cy.task(<span class="string">&#x27;say&#x27;</span>, message)</span><br><span class="line">cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, message)</span><br></pre></td></tr></table></figure><p>Now the test behaves as expected</p><p><img src="../images/chat-intro/right-order.png" alt="Additional commands ensure the expected order of events"></p><p>We have verified that web page shows the messages sent to the Socket.io server from other users.</p><h2><span id="verify-message-received-by-the-second-user">Verify message received by the second user</span></h2><p>Let&#39;s verify the messages sent by the web page reach the other users connected to the Socket.io server. We will store the last received message in the plugin file and will add fetching it via <code>cy.task</code>. This is similar to checking the last received email I have described in the blog post <a href="https://www.cypress.io/blog/2021/05/24/full-testing-of-html-emails-using-ethereal-accounts/">Full Testing of HTML Emails using SendGrid and Ethereal Accounts</a>.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js file</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// connection to the chat server</span></span><br><span class="line"><span class="keyword">let</span> socket</span><br><span class="line"><span class="keyword">let</span> lastMessage</span><br><span class="line"></span><br><span class="line">on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="title">connect</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Cypress is connecting to socket server under name %s&#x27;</span>, name)</span><br><span class="line">    socket = io(<span class="string">&#x27;http://localhost:8080&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    socket.emit(<span class="string">&#x27;username&#x27;</span>, name)</span><br><span class="line">    socket.on(<span class="string">&#x27;chat_message&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> (lastMessage = msg))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">say</span>(<span class="params">message</span>)</span> &#123;</span><br><span class="line">    socket.emit(<span class="string">&#x27;chat_message&#x27;</span>, message)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">getLastMessage</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// cy.task cannot return undefined value</span></span><br><span class="line">    <span class="keyword">return</span> lastMessage || <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test sends the message using the web page UI and then fetches it for the second user.</p><figure class="highlight js"><figcaption><span>cypress/integration/socket-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;verifies messages received&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// the browser is the 1st user</span></span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">`Cy_<span class="subst">$&#123;Cypress._.random(<span class="number">1000</span>)&#125;</span>`</span></span><br><span class="line">  cy.log(<span class="string">`User **<span class="subst">$&#123;name&#125;</span>**`</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(name)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// make sure the greeting message is shown</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;name&#125;</span> join the chat..`</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> secondName = <span class="string">&#x27;Ghost&#x27;</span></span><br><span class="line">  cy.task(<span class="string">&#x27;connect&#x27;</span>, secondName)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;secondName&#125;</span> join the chat..`</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// send the message from the first user</span></span><br><span class="line">  <span class="comment">// and use a random code to guarantee we truly receive our message</span></span><br><span class="line">  <span class="keyword">const</span> message = <span class="string">`Hello there <span class="subst">$&#123;Cypress._.random(<span class="number">10000</span>)&#125;</span>`</span></span><br><span class="line">  cy.get(<span class="string">&#x27;#txt&#x27;</span>).type(message)</span><br><span class="line">  cy.get(<span class="string">&#x27;form&#x27;</span>).submit()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// verify the web page shows the message</span></span><br><span class="line">  <span class="comment">// this ensures we can ask the 2nd user for its last message</span></span><br><span class="line">  <span class="comment">// and it should already be there</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, message).contains(<span class="string">&#x27;strong&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line">  cy.task(<span class="string">&#x27;getLastMessage&#x27;</span>)</span><br><span class="line">    <span class="comment">// note that the message includes the sending user</span></span><br><span class="line">    <span class="comment">// and the message itself</span></span><br><span class="line">    .should(<span class="string">&#x27;include&#x27;</span>, name)</span><br><span class="line">    .and(<span class="string">&#x27;include&#x27;</span>, message)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/chat-intro/last-message.gif" alt="Verifying the message is received"></p><p><strong>Tip:</strong> you can poll the plugin process for the last message using <a href="https://github.com/bahmutov/cypress-recurse">cypress-recurse</a> plugin.</p><h2><span id="test-user-leaving-the-chat">Test user leaving the chat</span></h2><p>Finally, let&#39;s confirm the web page shows the users leaving the chat. In the plugin file, let&#39;s add another task:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// task in cypress/plugins/index.js file</span></span><br><span class="line"><span class="function"><span class="title">disconnect</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  socket.disconnect()</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The test can verify the messages shown by the web page.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> secondName = <span class="string">&#x27;Ghost&#x27;</span></span><br><span class="line">cy.task(<span class="string">&#x27;connect&#x27;</span>, secondName)</span><br><span class="line">cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;secondName&#125;</span> join the chat..`</span>)</span><br><span class="line">  .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"><span class="comment">// the 2nd user is leaving</span></span><br><span class="line">cy.task(<span class="string">&#x27;disconnect&#x27;</span>)</span><br><span class="line">cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;secondName&#125;</span> left the chat..`</span>)</span><br><span class="line">  .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Beautiful.</p><p><img src="../images/chat-intro/left.png" alt="The user has left the chat test"></p><blockquote class="pullquote"><p>🧭 You can find the source code for the app, and the tests in the repo <a href="https://github.com/bahmutov/cypress-socketio-chat">bahmutov/cypress-socketio-chat</a>.</p></blockquote><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/run-two-cypress-runners/" title="Run Two Cypress Test Runners At The Same Time">Run Two Cypress Test Runners At The Same Time</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is the first blog post showing how to test a &lt;a href=&quot;https://socket.io/&quot;&gt;Socket.io&lt;/a&gt; real-time chat using the &lt;a href=&quot;https://ww
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress Automation</title>
    <link href="https://glebbahmutov.com/blog/cypress-automation/"/>
    <id>https://glebbahmutov.com/blog/cypress-automation/</id>
    <published>2021-06-02T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.256Z</updated>
    
    <content type="html"><![CDATA[<p>When Cypress controls a Chromium browser, it has an open remote interface connection between Cypress and the browser. Typically, Cypress uses it to visit the site and perform special operations like setting cookies, or setting the file downloads folder. In this blog post I will show how to use <code>Cypress.automation</code> command to set the browser permission and to take native screenshot images.</p><!-- toc --><ul><li><a href="#set-the-browser-permission">Set the browser permission</a></li><li><a href="#saving-native-screenshots">Saving native screenshots</a></li><li><a href="#printing-pdf-of-the-page">Printing PDF of the page</a></li><li><a href="#limitation">Limitation</a></li></ul><!-- tocstop --><h2><span id="set-the-browser-permission">Set the browser permission</span></h2><p>This code example comes from the recipe in the <a href="https://github.com/cypress-io/cypress-example-recipes">cypress-example-recipes</a> repo.</p><p>If we want to access the clipboard from the test, the browser asks the user for permission. The test can always query the current permission</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;can be queried in Chrome&#x27;</span>, &#123; <span class="attr">browser</span>: <span class="string">&#x27;chrome&#x27;</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;index.html&#x27;</span>) <span class="comment">// yields the window object</span></span><br><span class="line">    .its(<span class="string">&#x27;navigator.permissions&#x27;</span>)</span><br><span class="line">    <span class="comment">// permission names taken from</span></span><br><span class="line">    <span class="comment">// https://w3c.github.io/permissions/#enumdef-permissionname</span></span><br><span class="line">    .invoke(<span class="string">&#x27;query&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;clipboard-read&#x27;</span> &#125;)</span><br><span class="line">    <span class="comment">// by default it is &quot;prompt&quot; which shows a popup asking</span></span><br><span class="line">    <span class="comment">// the user if the site can have access to the clipboard</span></span><br><span class="line">    <span class="comment">// if the user allows, then next time it will be &quot;granted&quot;</span></span><br><span class="line">    <span class="comment">// If the user denies access to the clipboard, on the next</span></span><br><span class="line">    <span class="comment">// run the state will be &quot;denied&quot;</span></span><br><span class="line">    .its(<span class="string">&#x27;state&#x27;</span>).should(<span class="string">&#x27;be.oneOf&#x27;</span>, [<span class="string">&#x27;prompt&#x27;</span>, <span class="string">&#x27;granted&#x27;</span>, <span class="string">&#x27;denied&#x27;</span>])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If we look at the <a href="https://chromedevtools.github.io/devtools-protocol/">Chrome Debugger Protocol</a>, we can see that there is a way to call a command to set the permission using <a href="https://chromedevtools.github.io/devtools-protocol/tot/Browser/#method-setPermission">Browser.setPermission</a> command. By granting the test runner the permission, the browser skips showing the &quot;should this site have access to the clipboard?&quot; user prompt.</p><p><img src="../images/automation/set-permission.png" alt="Browser.setPermission command"></p><p>To call this command from the Cypress test, use <code>Cypress.automation</code> command:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// only the Chrome CDP is supported</span></span><br><span class="line"><span class="comment">// thus the first argument is always &quot;remote:debugger:protocol&quot;</span></span><br><span class="line">Cypress.automation(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>, &#123;</span><br><span class="line">  command: <span class="string">&#x27;Browser.grantPermissions&#x27;</span>,</span><br><span class="line">  params: &#123;</span><br><span class="line">    permissions: [<span class="string">&#x27;clipboardReadWrite&#x27;</span>, <span class="string">&#x27;clipboardSanitizedWrite&#x27;</span>],</span><br><span class="line">    <span class="comment">// make the permission tighter by allowing the current origin only</span></span><br><span class="line">    <span class="comment">// like &quot;http://localhost:56978&quot;</span></span><br><span class="line">    origin: <span class="built_in">window</span>.location.origin,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The promise-returning <code>Cypress.automation</code> command is very low-level, thus it is NOT automatically inserted into the Cypress test command chain. To make the test &quot;wait&quot; for the promise to resolve, use the <a href="https://on.cypress.io/wrap">cy.wrap</a> command:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cy.wrap(Cypress.automation(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>, &#123;</span><br><span class="line">  command: <span class="string">&#x27;Browser.grantPermissions&#x27;</span>,</span><br><span class="line">  params: &#123;</span><br><span class="line">    permissions: [<span class="string">&#x27;clipboardReadWrite&#x27;</span>, <span class="string">&#x27;clipboardSanitizedWrite&#x27;</span>],</span><br><span class="line">    <span class="comment">// make the permission tighter by allowing the current origin only</span></span><br><span class="line">    <span class="comment">// like &quot;http://localhost:56978&quot;</span></span><br><span class="line">    origin: <span class="built_in">window</span>.location.origin,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> if you want to run the automation command <em>after</em> other Cypress commands, make sure to return the the <code>Cypress.automation(...)</code> promise from the <code>.then</code> callback; we will see such example in the next section.</p><p>You can watch setting the browser permission in this video below:</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/SExmed1dCL4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="saving-native-screenshots">Saving native screenshots</span></h2><p>This example comes from the <a href="https://github.com/bahmutov/monalego">bahmutov/monalego</a> repo.</p><p>If you want to save the application page without any visual artifacts introduced by <a href="https://on.cypress.io/screenshot">cy.screenshot</a> command, you can use the <a href="https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-captureScreenshot">Page.captureScreenshot</a> CDP command.</p><p><img src="../images/automation/page-screenshot.png" alt="Page.captureScreenshot command"></p><p>Let&#39;s say we want to capture the screenshot after a two second delay. We place the <code>Cypress.automation</code> inside a <a href="https://on.cypress.io/then">.then</a> callback after the <a href="https://on.cypress.io/wait">cy.wait</a> command. The callback automatically waits for the returned promise to resolve.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;/smile&#x27;</span>)</span><br><span class="line">  .wait(<span class="number">2000</span>)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.log(<span class="string">&#x27;Page.captureScreenshot&#x27;</span>)</span><br><span class="line">    <span class="comment">// https://chromedevtools.github.io/devtools-protocol/</span></span><br><span class="line">    <span class="comment">// https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-captureScreenshot</span></span><br><span class="line">    <span class="keyword">return</span> Cypress.automation(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>, &#123;</span><br><span class="line">      command: <span class="string">&#x27;Page.captureScreenshot&#x27;</span>,</span><br><span class="line">      params: &#123;</span><br><span class="line">        format: <span class="string">&#x27;png&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>The CDP documentation says the method returns an object with <code>data</code> property that is base64-encoded PNG image. We can grab this property and use <a href="https://on.cypress.io/writefile">cy.writeFile</a> command to save the image.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;/smile&#x27;</span>)</span><br><span class="line">  .wait(<span class="number">2000</span>)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.log(<span class="string">&#x27;Page.captureScreenshot&#x27;</span>)</span><br><span class="line">    <span class="comment">// https://chromedevtools.github.io/devtools-protocol/</span></span><br><span class="line">    <span class="comment">// https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-captureScreenshot</span></span><br><span class="line">    <span class="keyword">return</span> Cypress.automation(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>, &#123;</span><br><span class="line">      command: <span class="string">&#x27;Page.captureScreenshot&#x27;</span>,</span><br><span class="line">      params: &#123;</span><br><span class="line">        format: <span class="string">&#x27;png&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .its(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">base64</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.writeFile(<span class="string">&#x27;test-smile.png&#x27;</span>, base64, <span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>The test runs and saves and image like this one:</p><p><img src="../images/automation/test-smile.png" alt="Saved screenshot PNG image"></p><p>If you want to capture only a portion of the page, grab the bounding box of an element and pass it as a parameter.</p><!--## Printing PDF of the pageThis example comes from the [bahmutov/cypress-grep-example](https://github.com/bahmutov/cypress-grep-example) repo.--><h2><span id="limitation">Limitation</span></h2><p>As of Cypress v7, you can only execute a CDP automation command, not to subscribe to the browser events. If you need to subscribe, you would need to open your own remote interface connection, just like <a href="https://github.com/flotwig/cypress-log-to-output">cypress-log-to-output</a> does.</p><p>Yet, despite of this limitation right now, think what having an automation command in Cypress means - everyone that Puppeteer can do, Cypress can do too - it is the same Chrome Debugger Protocol connection after all! You want real click events? You want hover? You want a tab? No problem, see <a href="https://github.com/dmtrKovalenko/cypress-real-events">cypress-real-events</a> for example.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;When Cypress controls a Chromium browser, it has an open remote interface connection between Cypress and the browser. Typically, Cypress 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Common Documentation Mistakes and How to Avoid Them</title>
    <link href="https://glebbahmutov.com/blog/common-documentation-mistakes-and-how-to-avoid-them/"/>
    <id>https://glebbahmutov.com/blog/common-documentation-mistakes-and-how-to-avoid-them/</id>
    <published>2021-05-28T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.250Z</updated>
    
    <content type="html"><![CDATA[<p>Writing docs is hard and takes effort. Luckily, describing something is still easier than making that something. We at Cypress put a lot of effort into <a href="https://www.cypress.io/blog/2017/07/05/10-ways-we-improved-our-docs/">improving our documentation</a> which is really appreciated by our users. In this blog post, I want to list things we tried to avoid, because they <em>hurt the documentation</em> in my opinion.</p><!-- toc --><ul><li><a href="#the-marketing-copy">The marketing copy</a></li><li><a href="#the-documentation-guides">The documentation guides</a></li><li><a href="#the-reference-pages">The reference pages</a></li><li><a href="#the-tutorials">The tutorials</a></li><li><a href="#the-blog-posts">The blog posts</a></li><li><a href="#the-conference-talks-and-presentations">The conference talks and presentations</a></li><li><a href="#common-obstacles-to-good-documentation">Common obstacles to good documentation</a></li><li><a href="#tips">Tips</a></li><li><a href="#do-not-compare-yourself-to-other-tools">Do not compare yourself to other tools</a></li><li><a href="#recap">Recap</a></li></ul><!-- tocstop --><p>Most of these things are also covered in <a href="https://slides.com/bahmutov/test-driven-documentation">my presentation</a> for CityJS 2021 titled &quot;TDD: Test-Driven Documentation&quot;. You can flip through the slides below:</p><center><iframe src="https://slides.com/bahmutov/test-driven-documentation/embed?style=light" width="720" height="500" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></center><h2><span id="the-marketing-copy">The marketing copy</span></h2><p>Marketing copy is everything you have on your static site and the introductory pages - things that describe your tool to the first time visitor. The marketing copy often suffers from what is jokingly described as:</p><blockquote><p>Selling the drills and not the holes</p></blockquote><p>Imagine you are making electric drills and selling them at a hardware store. People come to buy a drill, but they really do not need or want <em>your</em> drill. They need a hole! Thus you should describe how your tool makes the right hole for that customer.</p><p>Cypress&#39; marketing static site at <a href="https://www.cypress.io/">www.cypress.io</a> avoids the trap of selling the drills pretty well. It does not describe itself as &quot;A cross-platform e2e test runner.&quot; for example. Instead we talk about the user problems we solve: &quot;Fast, easy and reliable testing for anything that runs in a browser.&quot;</p><h2><span id="the-documentation-guides">The documentation guides</span></h2><p>Often your documentation contains a longer guide like <a href="https://on.cypress.io/ci">running Cypress on CI</a> or <a href="https://on.cypress.io/visual-testing">using Cypress for Visual Testing</a>. If you do not explain to the user <em>why</em> they would benefit from reading such a long document, <em>what</em> they would learn, then the users are likely skip it.</p><blockquote><p>Do not start the long page with &quot;step 1: ...&quot;</p></blockquote><p>Instead, list what the user is about to learn. Here is how <a href="https://on.cypress.io/command-line">Cypress Command Line Guide</a> starts:</p><p><img src="../images/doc-mistakes/command-line.png" alt="Cypress Command Line Guide starts with &quot;What you will learn&quot; section"></p><p>A related mistake when writing longer guides is to skip the prerequisites. Clearly state what you assume the user knows before starting the reading journey: &quot;This guide assumes you know X and have Y and Z&quot;.</p><h2><span id="the-reference-pages">The reference pages</span></h2><p>Reference pages explains particular methods or classes your documentation provides. A typical example would be Cypress <a href="https://on.cypress/check">cy.check()</a> or <a href="https://on.cypress/click">cy.click()</a> command pages:</p><p><img src="../images/doc-mistakes/check.png" alt="Cypress cy.check command reference page"></p><p>I often see the reference pages underwhelming due to:</p><ol><li>Lack of examples</li><li>Examples out of date</li><li>Examples are all &quot;foo&quot; and &quot;bar&quot;</li><li>Non-uniform page structure</li><li>Missing command history</li><li>Not linking to larger guides and tutorials</li></ol><p>If your reference page is longer than a few paragraphs, make sure every subsection includes an anchor link the user can copy and share.</p><p><img src="../images/doc-mistakes/anchor.png" alt="Every section of the page includes an obvious anchor link"></p><h2><span id="the-tutorials">The tutorials</span></h2><p>A tutorial is a step-by-step guide teaching the user how to solve a very particular problem. Again, we are not selling a drill, we are teaching the user how to drill a hole in a specific situation. Common problems to avoid:</p><ol><li>Tutorials are out of date</li><li>Missing source code</li><li>Missing CI</li><li>Expectations not stated</li></ol><p>I always try to explicitly state the software versions used, and to have an evergreen example repo linked from for the tutorial. The repo must have a configured continuous integration service to run the tests and keep the <a href="/blog/keep-examples-up-to-date/" title="dependencies up to date">dependencies up to date</a>.</p><h2><span id="the-blog-posts">The blog posts</span></h2><p>I like to blog, a huge surprise, right? Well, when you write a blog post, make sure that:</p><blockquote><p>The blog post has the published date</p></blockquote><p>Really, this is my number one question when reading a blog post - is this still relevant? This blog post has a date at the top. Cypress blog posts have the date at the top AND in their URLs</p><p><img src="../images/doc-mistakes/blog-date.png" alt="Make it obvious when the blog post was published"></p><p>Please include the software versions used during writing of the blog. Sometimes I will include it at the start of the writing.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In this blog post I am using Cypress v6.5.0.</span><br></pre></td></tr></table></figure><p>A useful tip is to include the code block with the install command and dependency versions</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D cypress</span></span><br><span class="line">+ cypress@6.4.0</span><br></pre></td></tr></table></figure><p>Or show the <code>package.json</code> file if it is small, like the blog post <a href="/blog/reveal-vite/" title="Presentations with Reveal.js and Vite">Presentations with Reveal.js and Vite</a> does:</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;reveal-vite&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;vite&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;vite build&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;serve&quot;</span>: <span class="string">&quot;vite preview&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;reveal.js&quot;</span>: <span class="string">&quot;4.1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vite&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="the-conference-talks-and-presentations">The conference talks and presentations</span></h2><p>When giving a talk you can only show the highlights and a very limited amount of text on the slide. Please, include any relevant links and put them on the slide to allow viewers to browse if they are interested in that topic. Do not wait until the very last slide - include the links where they are relevant!</p><p>Here is my &quot;Installing Cypress&quot; slide from the recent <a href="https://slides.com/bahmutov/commited-intro-to-cypress">Introduction to Cypress</a> presentation. Notice the links to the Cypress repository and the introduction guide.</p><p><img src="../images/doc-mistakes/links.png" alt="Every slide should include relevant links"></p><p>Here is the next slide showing a typical Cypress test. The slide includes the link to the Cypress API commands, so someone just browsing can immediately take a look.</p><p><img src="../images/doc-mistakes/api-link.png" alt="Linking to the Cypress API"></p><p>Make the links obvious, make them actual HREFs (so the user can click, no need to copy and paste), and do not split the links across the multiple lines.</p><p><strong>Tip:</strong> for more information about links, slides, and effective presentations, read my post <a href="/blog/better-slide-format/" title="Better slide format">Better slide format</a></p><p>Conference talks require a lot of preparation. I myself suffer from a common mistake: after the presentation is over, I forget to link it from our documentation site. All this effort - and the users never see it! So please, link the presentation from the relevant parts of the documentation.</p><h2><span id="common-obstacles-to-good-documentation">Common obstacles to good documentation</span></h2><ul><li>private documentation repository; no outside user can contribute even a small fix!</li><li>diffuse responsibility for maintaining the docs</li><li>hard to maintain due to technical stack</li></ul><p>Remember - it is easier to write documentation describing what you already have solved, than to solve it! Without good docs, the users will not discover your awesome software, will not understand its brilliance, and will not use it.</p><h2><span id="tips">Tips</span></h2><ol><li>Let people learn more. At the end of every doc, include links to the related topics.</li></ol><p><img src="../images/doc-mistakes/learn-more1.png" alt="Links to the related commands"></p><p>If the user read through the long guide, link them to particular tutorials and talks</p><p><img src="../images/doc-mistakes/learn-more2.png" alt="Links to the related tutorials and blog posts"></p><ol start="2"><li>Implement good documentation search</li></ol><p>See my presentations <a href="https://slides.com/bahmutov/find-me-if-you-can">Find Me If You Can</a> and <a href="https://slides.com/bahmutov/testing-docs">Testing Your Documentation Search</a> for details.</p><ol start="3"><li>Include links to the tools in the source comments</li></ol><p>I often put the link to the GitHub repo right into the source comment. Users often copy the entire code fragment including the comment. The comment is then useful to everyone reading the code. For example, the GitHub Actions workflow file includes the link to the action&#39;s repo:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install dependencies, start the app,</span></span><br><span class="line"><span class="comment"># and run E2E tests using Cypress GitHub action</span></span><br><span class="line"><span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">wait:</span> <span class="string">&#x27;http://localhost:8080&#x27;</span></span><br></pre></td></tr></table></figure><h2><span id="do-not-compare-yourself-to-other-tools">Do not compare yourself to other tools</span></h2><p>Ughh this will be controversial.</p><p>I do not think you should have a table comparing your tool to the competitors&#39; tools. Again, the users care about drilling the holes, not comparing drills. Show the users how your tool helps them. But more importantly, you are subjective and won&#39;t be impartial when describing other tools. If you have a table saying the competitor&#39;s tool does the thing X, you won&#39;t hear the end of &quot;you looked at version A of the tool, the version B does it!&quot; or &quot;you did not know how to do thing X correctly&quot;, or similar things. At best, such lists will become a constant source of complaints. At worst, they will make you look mean, unfair, and even ignorant.</p><p>Here is an example from Testim&#39;s <a href="https://help.testim.io/docs/why-not-cypress">Why not Cypress</a> documentation page:</p><p><img src="../images/doc-mistakes/why-not-cypress.png" alt="Testim.io: why not Cypress"></p><p>Where to even begin here? You got us, Testim! We wrote Cypress in High Elvish language invented by J.R.R. Tolkien, good catch. Of course, the above paragraph would be very surprising to anyone who has seen or tried Cypress. Or opened the browser DevTools and used breakpoints or <code>debugger</code> keyword to step through the code. So by writing this one paragraph, Testim just destroyed any credibility with the readers, and for what?! I don&#39;t get it.</p><p>On a personal level, the above paragraph even hurts for another reason. Cypress is built on top of <a href="http://bluebirdjs.com/docs/getting-started.html">Blurbird</a> promise library - we love its API, speed, features. It is even bundled under <a href="https://on.cypress.io/promise">Cypress.Promise</a>, that&#39;s how much we love this library! One of the core maintainers of <a href="https://github.com/petkaantonov/bluebird/graphs/contributors">Bluebird</a> is Benjamin Gruenbaum who is now ... working at Testim. The FUD about promises and asynchronous actions from someone who should have known better is just weird, in my opinion.</p><p>Ok. So when the users <strong>do</strong> need to know the differences between the tools, how do you answer them? Here is the trick: you send them comparisons written by other users. Written by someone who can appear impartial and objective - someone you have not paid to write those reviews. Of course, no one forces you to send every review. You can pick the ones that make you look good, and you consider fair.</p><p>Whenever anyone asks me about other tools, I stress that our &quot;competitor&quot; are NOT other testing tools, but people who do not write tests. You can see such answer in my presentation <a href="https://slides.com/bahmutov/reactive-conf">End-to-end testing is hard - but it doesn&#39;t have to be</a>, which you can watch on <a href="https://www.youtube.com/watch?v=swpz0H0u13k">YouTube</a>. The relevant slide is at the end and below:</p><p><img src="../images/doc-mistakes/cypress-vs-x.png" alt="We want everyone to write end-to-end tests"></p><h2><span id="recap">Recap</span></h2><blockquote><p>Remember: when the user is struggling with your software, you cannot be there for them 99.9% of the time. But you know what can be helping the users every second and minute of the day? Your great documentation!</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Writing docs is hard and takes effort. Luckily, describing something is still easier than making that something. We at Cypress put a lot 
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="advice" scheme="https://glebbahmutov.com/blog/tags/advice/"/>
    
      <category term="documentation" scheme="https://glebbahmutov.com/blog/tags/documentation/"/>
    
  </entry>
  
  <entry>
    <title>Burning Tests with cypress-grep</title>
    <link href="https://glebbahmutov.com/blog/burning-tests/"/>
    <id>https://glebbahmutov.com/blog/burning-tests/</id>
    <published>2021-05-18T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.238Z</updated>
    
    <content type="html"><![CDATA[<p>Recently a project of mine <a href="https://github.com/bahmutov/cypress-grep-example">bahmutov/cypress-grep-example</a> showed two flaky tests.</p><p><img src="/blog/images/burn/flaky-tests.png" alt="Cypress Dashboard showing two flaky tests"></p><p>Are the tests really showing a problem with the application? Or are the tests themselves unreliable? Would these tests show failures if we run them 100 times in a row?</p><p>This is where the <a href="https://github.com/bahmutov/cypress-grep">cypress-grep</a> plugin comes in very handy. Just <a href="https://github.com/bahmutov/cypress-grep#install-and-use">instal it</a> and add to the support file</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D cypress-grep</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add to cypress/support/index.js</span></span><br><span class="line"><span class="comment">// load and register the grep feature</span></span><br><span class="line"><span class="comment">// https://github.com/bahmutov/cypress-grep</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;cypress-grep&#x27;</span>)()</span><br></pre></td></tr></table></figure><p>We have the project with multiple spec files. The first flaky test &quot;should cancel edits on escape&quot; is located in spec file editing-spec.js. Let&#39;s run this test by itself 10 times.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx cypress run --spec cypress/integration/editing-spec.js \</span></span><br><span class="line"><span class="bash">  --env grep=<span class="string">&quot;should cancel edits on escape&quot;</span>,burn=10</span></span><br><span class="line">cypress-grep: tests with &quot;should cancel edits on escape&quot; in their names</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>The spec runs and the test we are grepping by title text &quot;should cancel edits on escape&quot; is repeated 10 times. The other tests are all pending.</p><p><img src="/blog/images/burn/burn.png" alt="Burning the selected test"></p><p>So there is definitely something wrong with this test or the application. We can grab any screenshot - they all show the same failure: the first letter is missing from the title.</p><p><img src="/blog/images/burn/fail.png" alt="The missing letter"></p><p>Often the application is not ready to receive the <code>cy.type</code> command while still loading. In our case, this seems unlikely - after all, the failure happens in the 3rd todo item, not at the very first item. Maybe something is wrong with typing the characters? Or editing them? Let&#39;s make sure the 3 todo items created before each test are typed correctly.</p><figure class="highlight js"><figcaption><span>cypress/integration/editing-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.createDefaultTodos().as(<span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We are using a custom command <code>cy.createDefaultTodos</code> to enter the 3 todo items. We can add assertions checking the input field values right there.</p><figure class="highlight js"><figcaption><span>cypress/support/commands.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Cypress.Commands.add(<span class="string">&#x27;createDefaultTodos&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  cy.get(<span class="string">&#x27;.new-todo&#x27;</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    .type(<span class="string">`<span class="subst">$&#123;TODO_ITEM_ONE&#125;</span>&#123;enter&#125;`</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    .type(<span class="string">`<span class="subst">$&#123;TODO_ITEM_TWO&#125;</span>&#123;enter&#125;`</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    .type(<span class="string">`<span class="subst">$&#123;TODO_ITEM_THREE&#125;</span>&#123;enter&#125;`</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">    .and(<span class="function">(<span class="params">$listItems</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// check the text in each list item</span></span><br><span class="line">      expect($listItems[<span class="number">0</span>], <span class="string">&#x27;first item&#x27;</span>).to.have.text(TODO_ITEM_ONE)</span><br><span class="line">      expect($listItems[<span class="number">1</span>], <span class="string">&#x27;second item&#x27;</span>).to.have.text(TODO_ITEM_TWO)</span><br><span class="line">      expect($listItems[<span class="number">2</span>], <span class="string">&#x27;third item&#x27;</span>).to.have.text(TODO_ITEM_THREE)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And let&#39;s burn the test again.</p><p><img src="/blog/images/burn/first-letter.png" alt="The first letter was missing on creation"></p><p>The problem seems to be in typing the initial text, not in editing it afterwards. Cypress types pretty quickly, much faster than a normal human being. Maybe the application cannot keep up for some reason? Let&#39;s add a delay of 20ms after each character.</p><figure class="highlight js"><figcaption><span>cypress/support/commands.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> opts = &#123; <span class="attr">log</span>: <span class="literal">false</span>, <span class="attr">delay</span>: <span class="number">20</span> &#125;</span><br><span class="line">cy.get(<span class="string">&#x27;.new-todo&#x27;</span>, opts)</span><br><span class="line">  .type(<span class="string">`<span class="subst">$&#123;TODO_ITEM_ONE&#125;</span>&#123;enter&#125;`</span>, opts)</span><br><span class="line">  .type(<span class="string">`<span class="subst">$&#123;TODO_ITEM_TWO&#125;</span>&#123;enter&#125;`</span>, opts)</span><br><span class="line">  .type(<span class="string">`<span class="subst">$&#123;TODO_ITEM_THREE&#125;</span>&#123;enter&#125;`</span>, opts)</span><br></pre></td></tr></table></figure><p>Time to burn it to find out if we have fixed it.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">... --env grep&#x3D;&quot;should cancel edits on escape&quot;,burn&#x3D;100</span><br></pre></td></tr></table></figure><p>The tests seem to be stable. 100 tests pass.</p><p><img src="/blog/images/burn/delay.png" alt="Burning tests with delay"></p><p>Now we can decide if we want to move on, or keep digging into the application&#39;s code to find why the first letter is lost sometimes. There is one other way. We have slowed down every test that creates the default todo items by 400-500ms. Is this a good trade-off to make 1 or 2 tests stable?</p><p>Or is the <a href="https://docs.cypress.io/guides/guides/test-retries">test retries</a> a better answer? In this instance I would prefer to get to the bottom of the problem and not use the test retries.</p><h2><span id="bonus-video">Bonus: video</span></h2><p>See how I am burning a test in this short video below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/kB2uyJ2W41I" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently a project of mine &lt;a href=&quot;https://github.com/bahmutov/cypress-grep-example&quot;&gt;bahmutov/cypress-grep-example&lt;/a&gt; showed two flaky 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Make Example Code Copy Pastable</title>
    <link href="https://glebbahmutov.com/blog/make-example-code-copy-pastable/"/>
    <id>https://glebbahmutov.com/blog/make-example-code-copy-pastable/</id>
    <published>2021-05-13T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.306Z</updated>
    
    <content type="html"><![CDATA[<p>People joke that a senior software engineer is someone who knows how to Google and copy / paste examples from StackOverflow. I agree :) That&#39;s why I spend so much time making my blog posts and code searchable. Check out these talks I gave where I discuss how to make good code examples and put them right in front of the users:</p><ul><li><a href="https://slides.com/bahmutov/find-me-if-you-can">Find Me If You Can</a></li><li><a href="https://slides.com/bahmutov/testing-docs">Testing Your Documentation Search</a></li><li><a href="https://slides.com/bahmutov/test-driven-documentation">TDD: Test-Driven Documentation</a></li><li><a href="https://slides.com/bahmutov/tests-are-docs">Using End-to-End Tests as Documentation</a></li></ul><p>Even GitHub now understands that copy and paste of code is super important. They have added a button to <em>every</em> code block to copy its content with a single click.</p><p><img src="/blog/images/copy-paste/github-copy.gif" alt="Copying code block from GitHub.com"></p><p>In this blog post I will list my tips for making <em>your</em> code examples easier to find and use.</p><h2><span id="put-the-full-example">Put the full example</span></h2><p>Even if you are showing a particular step of the process, try to put the complete code example on the page. For example, in <a href="https://github.com/cypress-io/github-action">cypress-io/github-action</a> every code example is the complete GitHub workflow file:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">End-to-end</span> <span class="string">tests</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">cypress-run:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="comment"># Install NPM dependencies, cache them correctly</span></span><br><span class="line">      <span class="comment"># and run all Cypress tests</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br></pre></td></tr></table></figure><p>I use the complete file especially for the &quot;hello world&quot; examples, because if the user is interested in such example, they probably do not have a GitHub workflow file yet. By providing the full file source code, I make it simple for someone to start right without going to the GitHub documentation to see how to write a workflow YML file, then come back to insert my <code>cypress-io/github-action@v2</code> step there.</p><h2><span id="show-the-filename">Show the filename</span></h2><p>Add a comment showing the source filename where the snippet should go to avoid confusion. Here is how I write code examples for <a href="https://github.com/bahmutov/cypress-grep">cypress-grep</a> - I show the destination filenames as comments.</p><p><img src="/blog/images/copy-paste/filenames.png" alt="The code blocks with source filename comments"></p><h2><span id="over-explain-the-code-blocks">Over-explain the code blocks</span></h2><p>Put yourself into the user&#39;s shoes and over-explain everything in the code example. The users, if they copy your code would lose all context, right? Thus you need to generously add the code comments, hoping the would be included in the pasted code. Any user reading the code later should understand what is going on from those comments.</p><p>Here is a typical example from <a href="https://github.com/bahmutov/cypress-examples">cypress-examples</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  <span class="comment">// an assertion ensures we have elements</span></span><br><span class="line">  <span class="comment">// before starting filtering</span></span><br><span class="line">  .should(<span class="string">&#x27;have.length.gt&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">$els</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> $filtered = $els.filter(<span class="function">(<span class="params">k, el</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// if the found element is inside &lt;UL&gt; element</span></span><br><span class="line">      <span class="comment">// then reject it by returning false</span></span><br><span class="line">      <span class="keyword">const</span> $ul = Cypress.$(el).closest(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> $ul.length === <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $filtered</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// finds only the elements outside the &lt;UL&gt; element</span></span><br><span class="line">  .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">  <span class="comment">// check by confirming the class on each found element</span></span><br><span class="line">  .and(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;target&#x27;</span>)</span><br></pre></td></tr></table></figure><p>That&#39;s a lot of comments :)</p><h2><span id="scrape-the-code-comments">Scrape the code comments</span></h2><p>If you are generating the static site showing the code examples, make sure you are scraping the code comments too. This will ensure your effort commenting and explaining is going to help user when they search your documentation.</p><p><img src="/blog/images/copy-paste/scrape-code-comments.png" alt="The search scraper config includes the selector for code comments"></p><p>You can try the search yourself at <a href="https://glebbahmutov.com/cypress-examples">glebbahmutov.com/cypress-examples</a> - it is pretty good!</p><p>See my presentation <a href="https://slides.com/bahmutov/find-me-if-you-can">Find Me If You Can</a> for full details.</p><h2><span id="add-a-comment-with-the-source-link">Add a comment with the source link</span></h2><p>When showing how to install or use your library, if you expect the block to be copied and pasted, add a comment with the source link. The users will keep the URL I bet, and all people looking at that code in the future will know where to go to find out more.</p><p>The installation snippet for <code>cypress-grep</code> utility is a good example.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cypress/support/index.js</span></span><br><span class="line"><span class="comment">// load and register the grep feature</span></span><br><span class="line"><span class="comment">// https://github.com/bahmutov/cypress-grep</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;cypress-grep&#x27;</span>)()</span><br></pre></td></tr></table></figure><h2><span id="test-the-examples">Test the examples</span></h2><p>And add a link to the test or full application containing the code example. You do not want to have incorrect code examples in your documentation. You can test your code blocks, see <a href="/blog/answer-cypress-question/" title="How I Answer a Cypress Question">How I Answer a Cypress Question</a>, or link the code block to the full test or application. For example, the complex sample workflow showing how to record Cypress tests has a link underneath pointing at the full workflow that is executed on each commit and thus is correct.</p><p><img src="/blog/images/copy-paste/link.png" alt="Link the code block to the test or tested application"></p><h2><span id="related-posts">Related posts</span></h2><ul><li><a href="/blog/good-examples/" title="Good examples">Good examples</a></li><li><a href="/blog/keep-examples-up-to-date/" title="Keep Examples Up To Date">Keep Examples Up To Date</a></li><li><a href="/blog/cypress-fiddle/" title="Run End-to-end Tests from Markdown Files">Run End-to-end Tests from Markdown Files</a></li><li>other blog posts tagged <a href="../tags/documentation">documentation</a></li><li>my <a href="https://slides.com/bahmutov/decks/documentation">documentation presentations</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;People joke that a senior software engineer is someone who knows how to Google and copy / paste examples from StackOverflow. I agree :) T
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="advice" scheme="https://glebbahmutov.com/blog/tags/advice/"/>
    
      <category term="documentation" scheme="https://glebbahmutov.com/blog/tags/documentation/"/>
    
  </entry>
  
  <entry>
    <title>Git Tips And Tricks</title>
    <link href="https://glebbahmutov.com/blog/git-tips-and-tricks/"/>
    <id>https://glebbahmutov.com/blog/git-tips-and-tricks/</id>
    <published>2021-05-04T04:00:00.000Z</published>
    <updated>2021-06-15T13:30:57.120Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="show-local-and-remote-branches">Show local and remote branches</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br><span class="line">git branch -r</span><br></pre></td></tr></table></figure><h2><span id="see-branches-sorted-by-the-last-commit">See branches sorted by the last commit</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --sort&#x3D;-committerdate</span><br></pre></td></tr></table></figure><p>Note: some git commands require installing globally NPM module <a href="https://github.com/so-fancy/diff-so-fancy#readme">diff-so-fancy</a>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g diff-so-fancy</span><br></pre></td></tr></table></figure><h2><span id="see-the-diffs-with-the-log">See the diffs with the log</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log -p</span><br></pre></td></tr></table></figure><h2><span id="get-the-file-from-another-branch">Get the file from another branch</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branch name&gt; &lt;filename&gt;</span><br><span class="line"># even from another commit</span><br><span class="line">git checkout &lt;sha&gt; &lt;filename&gt;</span><br></pre></td></tr></table></figure><h2><span id="git-cli-commands">Git CLI commands</span></h2><p>I use <a href="https://github.com/tj/git-extras">git-extras</a> to perform all my Git commands from the terminal.</p><h2><span id="see-more">See more</span></h2><p>Read my other <a href="../tags/git">Git blog posts</a>, starting with <a href="/blog/git-aliases/" title="Git aliases">Git aliases</a>.</p><h2><span id="related-posts">Related posts</span></h2><ul><li><a href="/blog/npm-tips-and-tricks/" title="NPM Tips and Tricks">NPM Tips and Tricks</a></li><li><a href="/blog/git-tips-and-tricks/" title="Git Tips And Tricks">Git Tips And Tricks</a></li><li><a href="/blog/large-web-app-development/" title="Large Web App Development">Large Web App Development</a></li><li><a href="/blog/cypress-tips-and-tricks/" title="Cypress Tips and Tricks">Cypress Tips and Tricks</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;show-local-and-remote-branches&quot;&gt;Show local and remote branches&lt;/span&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="git" scheme="https://glebbahmutov.com/blog/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>In Support of the Cambridge Green New Deal Zoning Petition</title>
    <link href="https://glebbahmutov.com/blog/in-support-of-cambridge-new-green-deal/"/>
    <id>https://glebbahmutov.com/blog/in-support-of-cambridge-new-green-deal/</id>
    <published>2021-05-01T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.295Z</updated>
    
    <content type="html"><![CDATA[<p>This is an email I have sent to Cambridge City Council in May 2021 in suport of the . You too can read and support the GND zoning proposal at <a href="https://www.cambridgegnd.org/">https://www.cambridgegnd.org/</a>.</p><p>Dear Cambridge City Council members,</p><p>I am writing to strongly express my support for the Green New Deal Zoning Petition as described at <a href="https://www.cambridgegnd.org/">https://www.cambridgegnd.org/</a>. The climate crisis is here, it is affecting everyone, and we must act quickly. The commercial real estate we got in our city emits a lot of greenhouse gases, and thus should be taxed to minimize this harm. I especially like how the money collected from the pollution is going to be used to lower the carbon emissions in the rest of Cambridge. If we are all in the same boat, let&#39;s all plug the holes in it before we sink.</p><p>Thank you,Gleb Bahmutov, PhD</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is an email I have sent to Cambridge City Council in May 2021 in suport of the . You too can read and support the GND zoning proposa
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="climate" scheme="https://glebbahmutov.com/blog/tags/climate/"/>
    
  </entry>
  
  <entry>
    <title>NPM Tips and Tricks</title>
    <link href="https://glebbahmutov.com/blog/npm-tips-and-tricks/"/>
    <id>https://glebbahmutov.com/blog/npm-tips-and-tricks/</id>
    <published>2021-04-30T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.315Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#install-and-test">Install and test</a></li><li><a href="#run-the-command-in-a-different-folder">Run the command in a different folder</a></li><li><a href="#keep-npm-dependencies-up-to-date">Keep NPM dependencies up-to-date</a></li><li><a href="#control-the-npm-cache">Control the NPM cache</a></li><li><a href="#generate-random-string">Generate random string</a></li><li><a href="#extra-tools">Extra tools</a></li><li><a href="#my-npm-blog-posts">My NPM blog posts</a></li><li><a href="#related-posts">Related posts</a></li></ul><!-- tocstop --><h2><span id="install-and-test">Install and test</span></h2><p>You can install NPM dependencies and run tests with a single command:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm it</span><br><span class="line"># is equivalent to</span><br><span class="line">$ npm install</span><br><span class="line">$ npm test</span><br></pre></td></tr></table></figure><p>If you use the <code>package-lock.json</code> file:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm cit</span><br><span class="line"># is equivalent to</span><br><span class="line">$ npm ci</span><br><span class="line">$ npm test</span><br></pre></td></tr></table></figure><h2><span id="run-the-command-in-a-different-folder">Run the command in a different folder</span></h2><p>You can use the option <code>--prefix &lt;path/to/folder&gt;</code> to run NPM command in a particular folder. It works like a cross-platform <code>cd &lt;path/to/folder&gt;; npm ...</code> combination.</p><p>Let&#39;s say we are in a larger project, and the server we want to launch is in its own subfolder</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app/</span><br><span class="line">  package.json      # top-level project (optional)</span><br><span class="line">  sub/</span><br><span class="line">    folder/</span><br><span class="line">      package.json</span><br><span class="line">      index.js</span><br></pre></td></tr></table></figure><p>Let&#39;s say the <code>sub/folder/package.json</code> has a &quot;start&quot; script</p><figure class="highlight json"><figcaption><span>sub/folder/package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;node .&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then we can install the dependencies and launch the app in the <code>sub/folder</code> all from the root <code>app/</code> folder:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app/ $ npm --prefix sub/folder install</span><br><span class="line">app/ $ npm --prefix sub/folder start</span><br><span class="line">...</span><br><span class="line"># after each command, the current directory is still app/</span><br><span class="line">app/ $</span><br></pre></td></tr></table></figure><h2><span id="keep-npm-dependencies-up-to-date">Keep NPM dependencies up-to-date</span></h2><ul><li>using an external service like my favorite Renovate is my preferred way of keeping NPM dependencies up-to-date, read <a href="../tags/renovate/">my Renovate blog posts</a></li><li>using local tool <a href="https://github.com/bahmutov/next-update">next-update</a> gives you stats and runs the tests when upgrading each module to ensure the update does not break the project</li></ul><h2><span id="control-the-npm-cache">Control the NPM cache</span></h2><p>By default NPM downloads the modules to install into <code>~/.npm</code> folder (and a similar user folder on Windows). You can change the cache folder using an environment variable <code>npm_config_cache</code>. You can also change it at run-time by providing <code>--cache &lt;path/to/folder&gt;</code> argument:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># install NPM dependencies using a local folder &quot;.npm&quot; to</span><br><span class="line"># cache, prefer already found modules from the cache</span><br><span class="line">$ npm i --cache .npm --prefer-offline</span><br></pre></td></tr></table></figure><h2><span id="generate-random-string">Generate random string</span></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node -p <span class="string">&#x27;crypto.randomBytes(4).toString(&quot;hex&quot;)&#x27;</span></span></span><br><span class="line">657bfb6c</span><br></pre></td></tr></table></figure><p>Pseudo-random using `Math.random()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.random().toString().slice(<span class="number">2</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2><span id="extra-tools">Extra tools</span></h2><p>Here are some useful tools I use every day:</p><ul><li><a href="https://github.com/bahmutov/npm-quick-run">npm-quick-run</a> lets you run NPM scripts without typing the full script name.</li><li><a href="https://github.com/bahmutov/available-versions">available-versions</a> fetches the new versions for the given NPM package name and shows them in a nice console table.</li><li><a href="https://github.com/bahmutov/as-a">as-a</a> runs a given command, including NPM scripts with additional settings from the secrets file injected as environment variables.</li><li><a href="https://github.com/bahmutov/bin-up">bin-up</a> Finds an installed tool in node_modules/.bin folders from current up to the git root.</li><li><a href="https://github.com/bahmutov/npm-install">bahmutov/npm-install</a> is my GitHub action for simple NPM installs (with caching) when using <a href="/blog/trying-github-actions/" title="GitHub Actions">GitHub Actions</a>.</li></ul><h2><span id="my-npm-blog-posts">My NPM blog posts</span></h2><ul><li><a href="/blog/organize-npm-scripts/" title="How I Organize my NPM Scripts">How I Organize my NPM Scripts</a></li><li><a href="/blog/do-not-let-npm-cache-snowball/" title="Do Not Let NPM Cache Snowball on CI">Do Not Let NPM Cache Snowball on CI</a></li><li><a href="/blog/subfolders-as-dependencies/" title="Subfolders as Dependencies">Subfolders as Dependencies</a></li><li><a href="/blog/do-not-use-node-env-for-staging/" title="Do not use NODE_ENV for staging">Do not use NODE_ENV for staging</a></li><li><a href="/blog/how-i-publish-to-npm/" title="How I publish to NPM">How I publish to NPM</a></li><li><a href="/blog/shell-variables-in-npm-scripts/" title="Shell variables in NPM scripts">Shell variables in NPM scripts</a></li><li><a href="/blog/smaller-published-NPM-modules/" title="Smaller published NPM modules">Smaller published NPM modules</a></li></ul><h2><span id="related-posts">Related posts</span></h2><ul><li><a href="/blog/npm-tips-and-tricks/" title="NPM Tips and Tricks">NPM Tips and Tricks</a></li><li><a href="/blog/git-tips-and-tricks/" title="Git Tips And Tricks">Git Tips And Tricks</a></li><li><a href="/blog/large-web-app-development/" title="Large Web App Development">Large Web App Development</a></li><li><a href="/blog/cypress-tips-and-tricks/" title="Cypress Tips and Tricks">Cypress Tips and Tricks</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#install-and-test&quot;&gt;Install and test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#run-the-command-in-a-different-folder&quot;&gt;Run the com
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="nodejs" scheme="https://glebbahmutov.com/blog/tags/nodejs/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>How I Answer a Cypress Question</title>
    <link href="https://glebbahmutov.com/blog/answer-cypress-question/"/>
    <id>https://glebbahmutov.com/blog/answer-cypress-question/</id>
    <published>2021-04-24T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.229Z</updated>
    
    <content type="html"><![CDATA[<p>I read and answer the user Cypress questions in the Cypress <a href="https://on.cypress.io/chat">chat</a> a lot. Answering just a single specific question does not scale - every answer should be a change in our documentation so that all future users that come with the same question can find the answer themselves. This blog post describes how I do this very quickly.</p><h2><span id="the-question">The question</span></h2><p>Here is a typical question from the chat:</p><p><img src="/blog/images/answer/question.png" alt="The user is trying to assert that multiple elements are invisible"></p><p>Hmm. I do not remember asserting if multiple elements are invisible. I remember asserting that multiple elements <em>are</em> visible. Maybe Cypress has something broken? Maybe the negative visibility assertion does not handle multiple elements? Negative assertions <a href="/blog/negative-assertions/" title="can be tricky">can be tricky</a>, and checking visibility is <a href="/blog/debug-visibility/" title="complicated">complicated</a>.</p><h2><span id="the-markdown-test">The Markdown test</span></h2><p>I need to test this myself. I open the <a href="https://github.com/bahmutov/cypress-examples">cypress-examples</a> project in my code editor and launch Cypress. This project uses <a href="https://github.com/bahmutov/cypress-markdown-preprocessor">cypress-markdown-preprocessor</a> to use Markdown files as spec. I can surrounds the example HTML markup and the Cypress test commands code blocks with &quot;fiddle&quot; HTML comments - and this region becomes a test.</p><p><img src="/blog/images/answer/fiddle1.png" alt="The example application markup block"></p><p>The test commands can be even split across several JS code blocks with inserted explanations.</p><p><img src="/blog/images/answer/fiddle2.png" alt="The Cypress test commands to run against the example markup"></p><p>The Cypress runs the above test by mounting the HTML block as a live mini web application and then running the commands against it.</p><p><img src="/blog/images/answer/multiple.gif" alt="Cypress correctly retries the assertions until the elements are hidden"></p><p>So our negative visibility assertion works correctly in the situations with multiple elements.</p><h2><span id="the-documentation">The documentation</span></h2><p>Our test was embedded right inside the Markdown file. This file can be converted into the static HTML page. In the cypress-examples projects, we use Vuepress to convert MD to HTML. You can find the commit <a href="https://github.com/bahmutov/cypress-examples/commit/b588b6e9225c2436f9621de5d3c3ba97f4e319bb">b588b</a> in the repository. The commit was tested again as Markdown and as JavaScript against the converted HTML static pages.</p><p><img src="/blog/images/answer/ci.png" alt="The GitHub Actions workflow tests all documentation examples"></p><p>The entire workflow runs very quickly, thanks to <a href="/blog/parallel-cypress-tests-gh-action/" title="running all tests in parallel">running all tests in parallel</a>. After all tests pass, the static pages are deployed.</p><p><img src="/blog/images/answer/doc-page.gif" alt="The Markdown page converted to HTML and deployed"></p><p>You can see the latest version of this page at <a href="https://glebbahmutov.com/cypress-examples/commands/assertions.html">https://glebbahmutov.com/cypress-examples/commands/assertions.html</a> or go to the Cypress version-specific page at <a href="https://glebbahmutov.com/cypress-examples/7.1.0/commands/assertions.html">https://glebbahmutov.com/cypress-examples/7.1.0/commands/assertions.html</a>.</p><p>Once the page is deployed, we can send the anchor link to the example to the user who asked the question.</p><p><img src="/blog/images/answer/answer.png" alt="Answering the user question with the link to the example"></p><blockquote class="pullquote"><p>📺 I have recently delivered a presentation about using the user Markdown documentation as tests. You can watch the presentation <a href="https://youtu.be/H9VqsTZ9NME">here</a> and browse the slides at <a href="https://slides.com/bahmutov/tests-are-docs">slides.com/bahmutov/tests-are-docs</a>.</p></blockquote><h2><span id="search">Search</span></h2><p>After the successful deployment, the example pages are scraped, see the workflow file <a href="https://github.com/bahmutov/cypress-examples/blob/master/.github/workflows/deployed.yml">.github/workflows/deployed.yml</a>.</p><p><img src="/blog/images/answer/scrape-workflow.png" alt="The scrape workflow runs after each successful deployment"></p><p>From now on, any user can quickly discover an example of checking if multiple elements are invisible by searching using the Algolia search widget.</p><p><img src="/blog/images/answer/search.png" alt="The search finds our new example"></p><p>You can learn more about scraping the technical documentation from my presentations <a href="https://slides.com/bahmutov/testing-docs">Testing Your Documentation Search</a> and <a href="https://slides.com/bahmutov/find-me-if-you-can">Find Me If You Can</a> and from the blog post <a href="/blog/scrape-static-site-with-algolia/" title="Scrape Static Site with Algolia">Scrape Static Site with Algolia</a>.</p><p>To &quot;quote&quot; the &quot;Find My If You Can&quot; presentation, I strongly believe that the users should find the answers to their questions via the search. If the answer does not exist in documentation, then:</p><p><img src="/blog/images/answer/add.png" alt="Answer the user question with the link"></p><h2><span id="video">Video</span></h2><p>You can see the entire process in this 10 minute screen recording below. In this video, I answer the question &quot;how to get and confirm attributes from multiple elements?&quot;:</p><center>  <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/Cj1g_PWZJF8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Yes, it only takes a few minutes to create another <em>tested</em> example that is deployed only in a few minutes after all tests still pass!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I read and answer the user Cypress questions in the Cypress &lt;a href=&quot;https://on.cypress.io/chat&quot;&gt;chat&lt;/a&gt; a lot. Answering just a single 
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Scraping the List of Presentation Slides</title>
    <link href="https://glebbahmutov.com/blog/scrape-list-of-slides/"/>
    <id>https://glebbahmutov.com/blog/scrape-list-of-slides/</id>
    <published>2021-04-23T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.344Z</updated>
    
    <content type="html"><![CDATA[<p>I love using slides.com to give my presentations, that&#39;s why you can see 150 of my public slide decks at <a href="https://slides.com/bahmutov">slides.com/bahmutov</a>. Lately I am experiencing a huge problem: when someone is asking me a question, or I need to explain a topic, often I know that I gave a presentation that has the right content. But how do I find it? How do I find the right slide?</p><p>It is becoming an issue, so let&#39;s see what we can do. I have used documentation scraping very <a href="/blog/scrape-static-site-with-algolia/" title="successfully before">successfully before</a>, so I know if I can feed the text contents of the slide decks to Algolia for example, I could quickly find the answers. But unfortunately, Slides.com <a href="https://slides.com/developers">does not expose</a> the API to grab the slide text and URLs directly. Thus I need to scrape my slide decks myself. Let&#39;s do this!</p><!-- toc --><ul><li><a href="#the-list-of-decks-markup">The list of decks markup</a></li><li><a href="#getting-slide-elements-from-the-test">Getting slide elements from the test</a></li><li><a href="#use-aliases">Use aliases</a></li><li><a href="#save-deck-information-into-a-file">Save deck information into a file</a></li><li><a href="#scraper-the-list-periodically">Scraper the list periodically</a></li><li><a href="#discussion">Discussion</a></li></ul><!-- tocstop --><blockquote class="pullquote"><p>🎁 You can find the source code for this blog post in the <a href="https://github.com/bahmutov/scrape-slides">bahmutov/scrape-slides</a> repository.</p></blockquote><h2><span id="the-list-of-decks-markup">The list of decks markup</span></h2><p>First, we need to grab the list of all my public decks from &quot;slides.com/bahmutov&quot;. The list of decks has very nice CSS classes, and by inspecting and trying them in the DevTools console we can find the right one <code>&#39;.decks.visible .deck.public&#39;</code>:</p><p><img src="/blog/images/scrape-slides/select-public-decks.png" alt="We can select all public decks with a CSS selector"></p><p>This selector returns 126 public decks. Can we grab the main properties of every deck from the DOM element, like the presentation&#39;s description, URL, etc? Yes! If you look at the properties of the DOM elements found, then you can locate the <code>dataset</code> property with everything I am interested in:</p><p><img src="/blog/images/scrape-slides/dataset.png" alt="Presentation properties are stored in the dataset object"></p><h2><span id="getting-slide-elements-from-the-test">Getting slide elements from the test</span></h2><p>Let&#39;s get the deck information using Cypress. Our configuration file is very bare-bones right now: we only use the <code>baseUrl</code> to directly visit the site</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;fixturesFolder&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;supportFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;pluginsFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;https://slides.com/bahmutov&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Our first test grabs the decks using the selector we found:</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line">describe(<span class="string">&#x27;Bahmutov slides&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;has decks&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">// there are a log of slide decks</span></span><br><span class="line">    cy.get(<span class="string">&#x27;.decks.visible .deck.public&#x27;</span>).should(<span class="string">&#x27;have.length.gt&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes.</p><p><img src="/blog/images/scrape-slides/test-decks.png" alt="Decks are found during the test"></p><p>Can we get the <code>dataset</code> property, let&#39;s say from the first presentation? Yes, by invoking the <code>prop</code> method of the jQuery wrapper returned by the <a href="https://on.cypress.io/get">cy.get</a> command. Let&#39;s run just the second test:</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line">describe(<span class="string">&#x27;Bahmutov slides&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;has decks&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">// there are a log of slide decks</span></span><br><span class="line">    cy.get(<span class="string">&#x27;.decks.visible .deck.public&#x27;</span>).should(<span class="string">&#x27;have.length.gt&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it.only(<span class="string">&#x27;has deck dataset&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// there are a log of slide decks</span></span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">// there are a log of slide decks</span></span><br><span class="line">    cy.get(<span class="string">&#x27;.decks.visible .deck.public&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.length.gt&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">      .first()</span><br><span class="line">      .invoke(<span class="string">&#x27;prop&#x27;</span>, <span class="string">&#x27;dataset&#x27;</span>)</span><br><span class="line">      .then(<span class="function">(<span class="params">props</span>) =&gt;</span> cy.log(<span class="built_in">JSON</span>.stringify(props)))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/scrape-slides/get-dataset.png" alt="The dataset from the first deck element"></p><p>We are only interested in some properties from the dataset, let&#39;s pick them using the bundled Lodash library.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Picks only immutable (mostly) properties from the deck, like</span></span><br><span class="line"><span class="comment"> * when it was created (as UTC string), description, etc.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;object&#125;</span> <span class="variable">dataset</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="variable">object</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> pickDeckProperties = <span class="function">(<span class="params">dataset</span>) =&gt;</span></span><br><span class="line">  Cypress._.pick(dataset, [</span><br><span class="line">    <span class="string">&#x27;createdAt&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;slug&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;url&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;visibility&#x27;</span>,</span><br><span class="line">  ])</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Bahmutov slides&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;has decks&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">// there are a log of slide decks</span></span><br><span class="line">    cy.get(<span class="string">&#x27;.decks.visible .deck.public&#x27;</span>).should(<span class="string">&#x27;have.length.gt&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it.only(<span class="string">&#x27;has deck dataset&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">// there are a log of slide decks</span></span><br><span class="line">    cy.get(<span class="string">&#x27;.decks.visible .deck.public&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.length.gt&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">      .first()</span><br><span class="line">      .invoke(<span class="string">&#x27;prop&#x27;</span>, <span class="string">&#x27;dataset&#x27;</span>)</span><br><span class="line">      .then(pickDeckProperties)</span><br><span class="line">      .then(<span class="function">(<span class="params">props</span>) =&gt;</span> cy.log(<span class="built_in">JSON</span>.stringify(props)))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Beautiful.</p><h2><span id="use-aliases">Use aliases</span></h2><p>Let&#39;s take a second to refactor our spec file. Every test needs the page, every test needs the list of presentation DOM elements. We can visit the page before each test, or even once using <code>before</code> hook and have all tests work after that:</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Picks only immutable (mostly) properties from the deck, like</span></span><br><span class="line"><span class="comment"> * when it was created (as UTC string), description, etc.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;object&#125;</span> <span class="variable">dataset</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="variable">object</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> pickDeckProperties = <span class="function">(<span class="params">dataset</span>) =&gt;</span></span><br><span class="line">  Cypress._.pick(dataset, [</span><br><span class="line">    <span class="string">&#x27;createdAt&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;slug&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;url&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;visibility&#x27;</span>,</span><br><span class="line">  ])</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Bahmutov slides&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;has decks&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// there are a log of slide decks</span></span><br><span class="line">    cy.get(<span class="string">&#x27;.decks.visible .deck.public&#x27;</span>).should(<span class="string">&#x27;have.length.gt&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;has deck dataset&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// there are a log of slide decks</span></span><br><span class="line">    cy.get(<span class="string">&#x27;.decks.visible .deck.public&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.length.gt&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">      .first()</span><br><span class="line">      .invoke(<span class="string">&#x27;prop&#x27;</span>, <span class="string">&#x27;dataset&#x27;</span>)</span><br><span class="line">      .then(pickDeckProperties)</span><br><span class="line">      .then(<span class="function">(<span class="params">props</span>) =&gt;</span> cy.log(<span class="built_in">JSON</span>.stringify(props)))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hmm, every test starts with getting the list of deck elements. Can we move the <code>cy.get</code> command to be with <code>cy.visit</code> and save the result into <a href="https://on.cypress.io/as">an alias</a>?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 🔥 THIS WILL NOT WORK, JUST A DEMO</span></span><br><span class="line">before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// there are a log of slide decks</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.decks.visible .deck.public&#x27;</span>).as(<span class="string">&#x27;decks&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;has decks&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">&#x27;@decks&#x27;</span>).should(<span class="string">&#x27;have.length.gt&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;has deck dataset&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">&#x27;@decks&#x27;</span>)</span><br><span class="line">    .first()</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Unfortunately the above code DOES NOT WORK because aliases are reset before each test, see the <a href="https://on.cypress.io/variables-and-aliases">Variables and Aliases</a> guide for details. Instead we can visit the page once, and then save the alias before each test by using both <code>before</code> and <code>beforeEach</code> hooks:</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;Bahmutov slides&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// there are a log of slide decks</span></span><br><span class="line">    cy.get(<span class="string">&#x27;.decks.visible .deck.public&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.length.gt&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">      .as(<span class="string">&#x27;decks&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;has decks&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.get(<span class="string">&#x27;@decks&#x27;</span>).should(<span class="string">&#x27;have.length.gt&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;has deck dataset&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.get(<span class="string">&#x27;@decks&#x27;</span>)</span><br><span class="line">      .first()</span><br><span class="line">      ...</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="save-deck-information-into-a-file">Save deck information into a file</span></h2><p>Now let&#39;s grab the dataset property from each found deck element, and then save the result into a JSON file. I will omit the first two test we have already written, this is the test to write the file using <a href="https://on.cypress.io/writefile">cy.writeFile</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Picks only immutable (mostly) properties from the deck, like</span></span><br><span class="line"><span class="comment"> * when it was created (as UTC string), description, etc.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;object&#125;</span> <span class="variable">dataset</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="variable">object</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> pickDeckProperties = <span class="function">(<span class="params">dataset</span>) =&gt;</span></span><br><span class="line">  Cypress._.pick(dataset, [</span><br><span class="line">    <span class="string">&#x27;createdAt&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;slug&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;url&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;visibility&#x27;</span>,</span><br><span class="line">  ])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getDeckProperties = <span class="function">(<span class="params">deck$</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> dataset = deck$.prop(<span class="string">&#x27;dataset&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> pickDeckProperties(dataset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Bahmutov slides&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// grab all decks before each test because the aliases</span></span><br><span class="line">  <span class="comment">// are reset before every test</span></span><br><span class="line">  beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// there are a log of slide decks</span></span><br><span class="line">    cy.get(<span class="string">&#x27;.decks.visible .deck.public&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.length.gt&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">      .as(<span class="string">&#x27;decks&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;saves all deck props&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> decks = []</span><br><span class="line">    cy.get(<span class="string">&#x27;@decks&#x27;</span>)</span><br><span class="line">      .each(<span class="function">(<span class="params">deck$</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> deckProps = getDeckProperties(deck$)</span><br><span class="line">        decks.push(deckProps)</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        cy.writeFile(<span class="string">&#x27;decks.json&#x27;</span>, decks)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Notice how we iterate over the DOM elements, saving the extracted and cleaned up dataset objects in an array to be saved later. The saved file <a href="https://github.com/bahmutov/scrape-slides/blob/main/decks.json">decks.json</a> can be found at the root of the project:</p><figure class="highlight json"><figcaption><span>decks.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;createdAt&quot;</span>: <span class="string">&quot;2021-04-09 19:31:53 UTC&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;In this presentation, Gleb will show how every commit and every pull request can run the full set of realistic end-to-end tests, ensuring the web application is going to work for the user. He will look at the modern CI setup, benefits of clean data environments, and parallelization speed-ups. Anyone looking to learn how awesome the modern automated testing pipeline can be would benefit from this presentation. Presented at BrightTALK 2021&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;slug&quot;</span>: <span class="string">&quot;no-excuses&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;/bahmutov/no-excuses&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;bahmutov&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;visibility&quot;</span>: <span class="string">&quot;all&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;createdAt&quot;</span>: <span class="string">&quot;2021-04-01 17:19:27 UTC&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot; Keeping the documentation up-to-date with the web application is hard. The screenshots and the videos showing the user how to perform some task quickly fall out of sync with the latest design and logic changes. In this presentation, I will show how to use end-to-end tests to generate the documentation. By keeping the tests in sync with the application, and by running them on every commit, we will update the documentation, ensuring our users never get confused by the obsolete docs. Presented at TestingStage 2021, video at https://youtu.be/H9VqsTZ9NME&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;slug&quot;</span>: <span class="string">&quot;tests-are-docs&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;/bahmutov/tests-are-docs&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;bahmutov&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;visibility&quot;</span>: <span class="string">&quot;all&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Super.</p><h2><span id="scraper-the-list-periodically">Scraper the list periodically</span></h2><p>Before we get into the presentation text search, we need to make sure we can run our list scraping operation periodically. Since our <code>decks.json</code> file can be checked into the source control, let&#39;s use GitHub Actions to run our Cypress tests - because the GH Actions have very nice access to the repo and push any changed files back to the repo, see my blog post <a href="/blog/trying-github-actions/" title="Trying GitHub Actions">Trying GitHub Actions</a> for details.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">scrape</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;0 3 * * *&#x27;</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">cypress-run:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="comment"># pass the Dashboard record key as an environment variable</span></span><br><span class="line">          <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CYPRESS_RECORD_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># pass GitHub token to allow accurately detecting</span></span><br><span class="line">          <span class="comment"># a build vs a re-run build</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># if the decks.json file has been updated by the test</span></span><br><span class="line">      <span class="comment"># commit and push it to the repo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Commit</span> <span class="string">deck.json</span> <span class="string">if</span> <span class="string">changed</span> <span class="string">💾</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">stefanzweifel/git-auto-commit-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">commit_message:</span> <span class="string">Updated</span> <span class="string">decks.json</span> <span class="string">file</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line">          <span class="attr">file_pattern:</span> <span class="string">&#x27;decks.json&#x27;</span></span><br></pre></td></tr></table></figure><p>Now every night the <code>decks.json</code> will be recreated - and if it changed, then the updated file will be pushed back into the repository.</p><h2><span id="discussion">Discussion</span></h2><p>This is just the start, we are scraping the list of presentations as the first step to scraping each presentation&#39;s content. By using Cypress to scrape we can see what the algorithm does at each step. If something fails during scraping, we can inspect the screenshots and videos to determine what has changed. Follow this blog to read the future blog posts where we will look at each presentation and how to scrape its content.</p><p>For more information, see these blog posts and presentations</p><ul><li>presentation <a href="https://slides.com/bahmutov/test-driven-documentation">Test-Driven Documentation</a></li><li>presentation <a href="https://slides.com/bahmutov/testing-docs">Testing Your Documentation Search</a></li><li>presentation <a href="https://slides.com/bahmutov/find-me-if-you-can">Find Me If You Can</a></li><li>blog post <a href="/blog/scrape-static-site-with-algolia/" title="Scrape Static Site with Algolia">Scrape Static Site with Algolia</a></li><li>blog post <a href="/blog/custom-search-for-my-projects-and-blog-posts/" title="Search across my blog posts and github projects">Search across my blog posts and github projects</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I love using slides.com to give my presentations, that&amp;#39;s why you can see 150 of my public slide decks at &lt;a href=&quot;https://slides.com/
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="presentation" scheme="https://glebbahmutov.com/blog/tags/presentation/"/>
    
  </entry>
  
  <entry>
    <title>Cypress request and cookies</title>
    <link href="https://glebbahmutov.com/blog/cypress-request-and-cookies/"/>
    <id>https://glebbahmutov.com/blog/cypress-request-and-cookies/</id>
    <published>2021-04-21T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.259Z</updated>
    
    <content type="html"><![CDATA[<p>While running the Cypress tests you can make requests to the backend with full set of the page&#39;s cookies using the <a href="https://on.cypress.io/request">cy.request</a> command. You can also add more cookies and other request headers using <code>cy.request</code> options. If you need to make an HTTP request <em>without</em> default cookies, use the <code>window.fetch</code> or the <a href="https://on.cypress.io/task">cy.task</a> command.</p><!-- toc --><ul><li><a href="#page-cookies">Page cookies</a></li><li><a href="#http-request">HTTP request</a></li><li><a href="#http-request-with-extra-cookies">HTTP request with extra cookies</a></li><li><a href="#windowfetch">window.fetch</a></li><li><a href="#windowfetch-without-cookies">window.fetch without cookies</a></li><li><a href="#request-from-node">Request from Node</a></li></ul><!-- tocstop --><blockquote class="pullquote"><p>🎁 You can find the source code for this blog post in the <a href="https://github.com/cypress-io/cypress-example-recipes#server-communication">Server communication</a> recipes.</p></blockquote><h2><span id="page-cookies">Page cookies</span></h2><p>When Cypress visits the page using <a href="https://on.cypress.io/visit">cy.visit</a> command, any cookies sent by the server via the response header <code>Set-Cookie</code> are set in the browser. For example, if the server sends the index page like this:</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (req.url === <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">  res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)</span><br><span class="line">  res.setHeader(<span class="string">&#x27;Set-Cookie&#x27;</span>, <span class="string">&#x27;mycookie=testcookie&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> send(res, <span class="number">200</span>, <span class="string">&#x27;&lt;body&gt;&lt;h1&gt;Hi there&lt;/h1&gt;&lt;/body&gt;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/blog/images/request/set-cookie.png" alt="The HTML document sets the browser cookie using the response header"></p><p>The Cypress test can confirm the cookies was set using the <a href="https://on.cypress.io/getcookie">cy.getCookie</a> command:</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// enables intelligent code completion for Cypress commands</span></span><br><span class="line"><span class="comment">// https://on.cypress.io/intelligent-code-completion</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Making requests&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;sets the test cookie&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.getCookie(<span class="string">&#x27;mycookie&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">        name: <span class="string">&#x27;mycookie&#x27;</span>,</span><br><span class="line">        value: <span class="string">&#x27;testcookie&#x27;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes.</p><p><img src="/blog/images/request/get-cookie.png" alt="The yielded cookie object includes our expected properties"></p><p>Note that the full cookie object includes other properties, but we are not interested in them for this test.</p><h2><span id="http-request">HTTP request</span></h2><p>Let&#39;s say we want to make an HTTP call from the test to the backend as if the application made the call. The request should include the cookies from the page. We can use the <a href="https://on.cypress.io/request">cy.request</a> command.</p><p>First, let&#39;s add an API endpoint to our server to simply print the request cookies and return them back as a JSON object.</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (req.url === <span class="string">&#x27;/print-cookies&#x27;</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;=== all cookies 🍪 ===&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(req.cookies)</span><br><span class="line">  <span class="keyword">return</span> send(res, <span class="number">200</span>, req.cookies || &#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> I am using <a href="https://github.com/vercel/micro#readme">micro</a> to handle the requests on the server, and <a href="https://github.com/Zakjholt/micro-cookie#readme">micro-cookie</a> to parse the incoming cookies.</p><p>Let&#39;s write a Cypress test to confirm the <code>cy.request</code> by default includes the cookies set by visiting the index page itself.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;sends the cookie when using cy.request&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://on.cypress.io/request</span></span><br><span class="line">  <span class="comment">// the endpoint /print-cookies returns the sent cookies</span></span><br><span class="line">  <span class="comment">// back to use so we can validate</span></span><br><span class="line">  cy.request(<span class="string">&#x27;/print-cookies&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;deep.equal&#x27;</span>, &#123; <span class="attr">mycookie</span>: <span class="string">&#x27;testcookie&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/request/request.png" alt="The cy.request includes the page cookies"></p><h2><span id="http-request-with-extra-cookies">HTTP request with extra cookies</span></h2><p>What if we want to include additional cookies or headers when making the request? Sure!</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;sends additional cookies via cy.request headers&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://on.cypress.io/request</span></span><br><span class="line">  <span class="comment">// can add more headers and cookies</span></span><br><span class="line">  cy.request(&#123;</span><br><span class="line">    url: <span class="string">&#x27;/print-cookies&#x27;</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;cookieA=valueA; cookieB=valueB&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">    .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    <span class="comment">// the cookies sent to the server are the combination</span></span><br><span class="line">    <span class="comment">// of the cookies set by the page via cy.visit</span></span><br><span class="line">    <span class="comment">// and the cookies we sent via the Cookie header</span></span><br><span class="line">    .should(<span class="string">&#x27;deep.equal&#x27;</span>, &#123;</span><br><span class="line">      mycookie: <span class="string">&#x27;testcookie&#x27;</span>,</span><br><span class="line">      cookieA: <span class="string">&#x27;valueA&#x27;</span>,</span><br><span class="line">      cookieB: <span class="string">&#x27;valueB&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/request/extra-cookies.png" alt="Adding more cookies when calling cy.request"></p><p>If you want to include additional headers, like <code>Bearer</code> when makig the request, add more headers.</p><h2><span id="windowfetch">window.fetch</span></h2><p>We can use <code>fetch</code> function to make the request with the page cookies; the usual browser cross-original restrictions apply (that&#39;s why <code>cy.request</code> is so useful, as it bypasses those)</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;fetch makes request with page cookies&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// by wrapping the Promise returned by the &quot;fetch&quot; function</span></span><br><span class="line">  <span class="comment">// we place it into the Cypress command chain</span></span><br><span class="line">  cy.wrap(fetch(<span class="string">&#x27;/print-cookies&#x27;</span>))</span><br><span class="line">    <span class="comment">// to get the JSON from the response object</span></span><br><span class="line">    <span class="comment">// need to call res.json()</span></span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> do not use cy.invoke as it can be retried</span></span><br><span class="line">    <span class="comment">// and the response cannot have res.json() called more than once</span></span><br><span class="line">    .then(<span class="function"><span class="params">r</span> =&gt;</span> r.json())</span><br><span class="line">    .should(<span class="string">&#x27;deep.equal&#x27;</span>, &#123;</span><br><span class="line">      mycookie: <span class="string">&#x27;testcookie&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/request/fetch-cookies.png" alt="Using fetch sends page cookies"></p><h2><span id="windowfetch-without-cookies">window.fetch without cookies</span></h2><p>You can omit sending page cookies, even to the same origin.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;fetch without page cookies&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.wrap(fetch(<span class="string">&#x27;/print-cookies&#x27;</span>, &#123; <span class="attr">credentials</span>: <span class="string">&#x27;omit&#x27;</span> &#125;))</span><br><span class="line">    .then(<span class="function"><span class="params">r</span> =&gt;</span> r.json())</span><br><span class="line">    <span class="comment">// no cookies were sent with the fetch request</span></span><br><span class="line">    .should(<span class="string">&#x27;deep.equal&#x27;</span>, &#123;&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/request/omit-cookies.png" alt="Omit cookies when sending the fetch request"></p><h2><span id="request-from-node">Request from Node</span></h2><p>If you want to make some other HTTP request without any restrictions, you can make it from the Node environment - by using the plugin file. Let&#39;s use the popular module <a href="https://github.com/sindresorhus/got#api">got</a> to make the requests. In the plugin file:</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="keyword">const</span> got = <span class="built_in">require</span>(<span class="string">&#x27;got&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type <span class="type">&#123;Cypress.PluginConfig&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// eslint-disable-next-line no-unused-vars</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">httpRequest</span>(<span class="params">params</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;making the HTTP request:&#x27;</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(params)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// use the &quot;got&quot; module to make HTTP requests</span></span><br><span class="line">      <span class="comment">// https://github.com/sindresorhus/got#readme</span></span><br><span class="line">      <span class="keyword">return</span> got(params).then(<span class="function"><span class="params">r</span> =&gt;</span> r.body)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Our test simply passes the explicit cookies via the header we want to send.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;request from Node&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// makes HTTP request using the &quot;got&quot; module</span></span><br><span class="line">  <span class="comment">// https://github.com/sindresorhus/got#api</span></span><br><span class="line">  cy.task(<span class="string">&#x27;httpRequest&#x27;</span>, &#123;</span><br><span class="line">    url: Cypress.config(<span class="string">&#x27;baseUrl&#x27;</span>) + <span class="string">&#x27;/print-cookies&#x27;</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;cookieA=valueA; cookieB=valueB&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    responseType: <span class="string">&#x27;json&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">    <span class="comment">// only the explicit cookies are included</span></span><br><span class="line">    <span class="comment">// in the request, no page cookies</span></span><br><span class="line">    .should(<span class="string">&#x27;deep.equal&#x27;</span>, &#123;</span><br><span class="line">      cookieA: <span class="string">&#x27;valueA&#x27;</span>,</span><br><span class="line">      cookieB: <span class="string">&#x27;valueB&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes - and only sends the explicit cookies we sent when making the <a href="https://on.cypress.io/task">cy.task</a> call. In the screenshot below I show the terminal from the Cypress process that prints the <code>console.log</code> statements from the plugin file.</p><p><img src="/blog/images/request/got-cookies.png" alt="The plugin file making the request"></p><p>As the above tests show you have a choice of methods to use to make HTTP requests from Cypress tests. You can make calls using <code>cy.request</code> or <code>window.fetch</code> if you need the page cookies, with <code>cy.request</code> being more powerful, since it is not CORS-limited. If you need to make an absolutely arbitrary HTTP request without sending the page cookies, you can make your own call from the plugin file.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;While running the Cypress tests you can make requests to the backend with full set of the page&amp;#39;s cookies using the &lt;a href=&quot;https://o
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Testing Mongo with Cypress</title>
    <link href="https://glebbahmutov.com/blog/testing-mongo-with-cypress/"/>
    <id>https://glebbahmutov.com/blog/testing-mongo-with-cypress/</id>
    <published>2021-04-20T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.368Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine your web application is using MongoDB to store its data. How would you take advantage of it during Cypress tests? This blog post shows how to clear the data from a local Mongo database before each test by connecting to the DB directly from the Cypress plugin file.</p><h2><span id="the-setup">The setup</span></h2><p>My &quot;application&quot; is very simply - it is a single API endpoint that collects pizza information. You can post new pizza names plus ingredients and get the full list.</p><figure class="highlight js"><figcaption><span>server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; connect &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./db&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.use(bodyParser.json()) <span class="comment">// for parsing application/json</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> db</span><br><span class="line"><span class="keyword">let</span> pizzas</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/pizza&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;getting pizza list&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!pizzas) &#123;</span><br><span class="line">    pizzas = db.collection(<span class="string">&#x27;pizzas&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> cursor = pizzas.find()</span><br><span class="line">  <span class="keyword">const</span> count = <span class="keyword">await</span> cursor.count()</span><br><span class="line">  <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;No pizzas found!&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> res.json([])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Found %d&#x27;</span>, count)</span><br><span class="line">  <span class="keyword">const</span> list = <span class="keyword">await</span> cursor.toArray()</span><br><span class="line">  res.json(list)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/pizza&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;POST pizza&#x27;</span>, req.body)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!pizzas) &#123;</span><br><span class="line">    pizzas = db.collection(<span class="string">&#x27;pizzas&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> pizzas.insertOne(req.body)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;inserted %s&#x27;</span>, result.insertedId)</span><br><span class="line">  res.json(&#123; <span class="attr">_id</span>: result.insertedId &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">initServer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  db = <span class="keyword">await</span> connect()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> PORT = process.env.PORT || <span class="number">8080</span></span><br><span class="line">  app.listen(PORT, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Server listening on port <span class="subst">$&#123;PORT&#125;</span>...`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// TODO implement disconnect on quit signal</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">initServer().catch(<span class="built_in">console</span>.dir)</span><br></pre></td></tr></table></figure><p>The Mongo connection is made in the file <code>db.js</code> shown below:</p><figure class="highlight js"><figcaption><span>db.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; MongoClient &#125; = <span class="built_in">require</span>(<span class="string">&#x27;mongodb&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> uri = process.env.MONGO_URI</span><br><span class="line"><span class="keyword">if</span> (!uri) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Missing MONGO_URI&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> MongoClient(uri)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Connect the client to the server</span></span><br><span class="line">  <span class="keyword">await</span> client.connect()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> client.db(<span class="string">&#x27;foods&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">disconnect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Ensures that the client will close when you finish/error</span></span><br><span class="line">  <span class="keyword">await</span> client.close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123; connect, disconnect &#125;</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>🎁 You can find the source code at <a href="https://github.com/bahmutov/cypress-example-mongodb">bahmutov/cypress-example-mongodb</a>.</p></blockquote><p>Notice that we connect to the Mongo instance using the single connection string from the <code>MONGO_URI</code> environment variable.</p><h2><span id="run-mongo-locally">Run Mongo locally</span></h2><p>The simplest way to run Mongo instance locally is by using Docker container, read <a href="https://www.code4it.dev/blog/run-mongodb-on-docker">this post</a>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker pull mongo</span><br><span class="line">docker run -d --name mongo-on-docker \</span><br><span class="line">  -p 27017:27017 \</span><br><span class="line">  -e MONGO_INITDB_ROOT_USERNAME=mongoadmin \</span><br><span class="line">  -e MONGO_INITDB_ROOT_PASSWORD=secret \</span><br><span class="line">  mongo</span><br></pre></td></tr></table></figure><p>The above command starts a new container called <code>mongo-on-docker</code> using the pulled image <code>mongo</code>. The container will expose the port 27017 (Mongo&#39;s default port for connection). We also pass the admin user name and password we want to use.</p><p>The user name and the password then can be used to create the connection string environment variable:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MONGO_URI&#x3D;mongodb:&#x2F;&#x2F;mongoadmin:secret@localhost:27017&#x2F;?authSource&#x3D;admin</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> to stop and remove the container later use the following commands:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop mongo-on-docker</span><br><span class="line">docker rm mongo-on-docker</span><br></pre></td></tr></table></figure><h2><span id="start-the-server">Start the server</span></h2><p>After starting the Mongo DB instance, we can start the server. We can pass the <code>MONGO_URI</code> inline</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> MONGO_URI=mongodb://mongoadmin:secret@localhost:27017/?authSource=admin \</span></span><br><span class="line"><span class="bash">    node ./server</span></span><br></pre></td></tr></table></figure><p>A better idea is to use <a href="http://github.com/bahmutov/as-a">as-a</a> to keep the secret environment variable outside the repository and easily inject them when running the commands. Thus I place the <code>MONGO_URI</code> into <code>~/.as-a/.as-a.ini</code> file</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mongo-example]</span></span><br><span class="line"><span class="attr">MONGO_URI</span>=mongodb://mongoadmin:secret@localhost:<span class="number">27017</span>/?authSource=admin</span><br></pre></td></tr></table></figure><p>and start the server like this after installing <code>as-a</code> globally</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -g as-a</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> as-a mongo-example node ./server</span></span><br><span class="line"></span><br><span class="line">Server listening on port 8080...</span><br></pre></td></tr></table></figure><p>Super, we can hit the server endpoint <code>/pizza</code> from the command line to check:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl http://localhost:8080/pizza</span></span><br><span class="line">[]</span><br></pre></td></tr></table></figure><h2><span id="the-first-api-test">The first API test</span></h2><p>Let&#39;s write Cypress <a href="https://www.cypress.io/blog/2017/11/07/add-gui-to-your-e2e-api-tests/">API test</a> using <a href="https://on.cypress.io/request">cy.request</a> command.</p><p>We will always hit the local URL, so let&#39;s place it into the <code>baseUrl</code> setting in the configuration file <code>cypress.json</code>:</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;fixturesFolder&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;supportFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;http://localhost:8080&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Pizzas&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;shows an empty list initially&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// https://on.cypress.io/request</span></span><br><span class="line">    cy.request(<span class="string">&#x27;/pizza&#x27;</span>).its(<span class="string">&#x27;body&#x27;</span>).should(<span class="string">&#x27;deep.equal&#x27;</span>, [])</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/mongo/first-mongo-test.png" alt="The first passing API test"></p><p>Let&#39;s write a test that adds a pizza and verifies it is returned.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Pizzas&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;shows an empty list initially&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// https://on.cypress.io/request</span></span><br><span class="line">    cy.request(<span class="string">&#x27;/pizza&#x27;</span>).its(<span class="string">&#x27;body&#x27;</span>).should(<span class="string">&#x27;deep.equal&#x27;</span>, [])</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;adds pizzas&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/pizza&#x27;</span>, &#123;</span><br><span class="line">      name: <span class="string">&#x27;Margherita&#x27;</span>,</span><br><span class="line">      ingredients: [<span class="string">&#x27;tomatoes&#x27;</span>, <span class="string">&#x27;mozzarella&#x27;</span>],</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.request(<span class="string">&#x27;/pizza&#x27;</span>)</span><br><span class="line">      .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">      .its(<span class="number">0</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Margherita&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The tests pass. One advantage of using Cypress to work with API tests is that you can inspect every request to see what was returned. For example, by clicking on the <code>cy.request</code> in the second test we can see the full list of returned objects.</p><p><img src="/blog/images/mongo/pizzas.png" alt="Inspecting the objects returned from the backend"></p><p><strong>Tip:</strong> did you notice that during the API tests the application&#39;s iframe stays empty? You can pipe the request information there, see the <a href="https://github.com/bahmutov/cy-api">cy-api project</a>.</p><h2><span id="clear-the-collection">Clear the collection</span></h2><p>If we re-run the tests again, our tests fail.</p><p><img src="/blog/images/mongo/fail.png" alt="Failing tests"></p><p>Of course, we have never cleared the collection of objects before the tests, so the database keeps them around. How should we clear the collection, if the API does not expose the clear method?</p><p>By connecting to the Mongo database directly from the Cypress test runner and clearing it using a <a href="https://on.cypress.io/task">cy.task</a> command. Let&#39;s add the following code to the plugin file:</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; connect &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../../db&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (on, config) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> db = <span class="keyword">await</span> connect()</span><br><span class="line">  <span class="keyword">const</span> pizzas = db.collection(<span class="string">&#x27;pizzas&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">clearPizzas</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;clear pizzas&#x27;</span>)</span><br><span class="line">      <span class="keyword">await</span> pizzas.remove(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> Cypress v6+ comes with Node v12+ built-in, thus we can use all the modern ES6 syntax like <code>async / await</code> sugar to write asynchronous code.</p><p>From the spec file, we should all the <code>clearPizzas</code> task before the tests start.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;Pizzas&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.task(<span class="string">&#x27;clearPizzas&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Because Cypress needs to connect to the Mongo instance (just like the server.js), we start it by passing the <code>MONGO_URI</code> environment variable. The plugin file runs in Node, requires the <code>db.js</code> file, which uses that environment variable to connect.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> as-a mongo-example npx cypress open</span></span><br></pre></td></tr></table></figure><p>We can now write more tests, if we want to</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Pizzas&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.task(<span class="string">&#x27;clearPizzas&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;shows an empty list initially&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// https://on.cypress.io/request</span></span><br><span class="line">    cy.request(<span class="string">&#x27;/pizza&#x27;</span>).its(<span class="string">&#x27;body&#x27;</span>).should(<span class="string">&#x27;deep.equal&#x27;</span>, [])</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;adds pizzas&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/pizza&#x27;</span>, &#123;</span><br><span class="line">      name: <span class="string">&#x27;Margherita&#x27;</span>,</span><br><span class="line">      ingredients: [<span class="string">&#x27;tomatoes&#x27;</span>, <span class="string">&#x27;mozzarella&#x27;</span>],</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.request(<span class="string">&#x27;/pizza&#x27;</span>)</span><br><span class="line">      .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">      .its(<span class="number">0</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Margherita&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// bad practice: assume this test runs after the previous test</span></span><br><span class="line">  it(<span class="string">&#x27;adds vegan pizza&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/pizza&#x27;</span>, &#123;</span><br><span class="line">      name: <span class="string">&#x27;Vegan&#x27;</span>,</span><br><span class="line">      ingredients: [<span class="string">&#x27;Roma tomatoes&#x27;</span>, <span class="string">&#x27;bell peppers&#x27;</span>],</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.request(<span class="string">&#x27;/pizza&#x27;</span>)</span><br><span class="line">      .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">      .its(<span class="number">1</span>)</span><br><span class="line">      <span class="comment">// ignore &quot;_id&quot; property</span></span><br><span class="line">      .should(<span class="string">&#x27;include.keys&#x27;</span>, [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;ingredients&#x27;</span>])</span><br><span class="line">      .and(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">        name: <span class="string">&#x27;Vegan&#x27;</span>,</span><br><span class="line">        ingredients: [<span class="string">&#x27;Roma tomatoes&#x27;</span>, <span class="string">&#x27;bell peppers&#x27;</span>],</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>And they all pass</p><p><img src="/blog/images/mongo/all.png" alt="Passing tests"></p><h2><span id="testing-on-ci">Testing on CI</span></h2><p>I will run the same tests on CircleCI using the <a href="https://github.com/cypress-io/circleci-orb">Cypress Orb</a>. To run MongoDB we can use a <a href="https://circleci.com/docs/2.0/databases/">service container</a> that spins the second Docker container linked to the first one (where our server and tests execute) automatically. See the <a href="https://github.com/cypress-io/circleci-orb/blob/master/docs/recipes.md">Cypress recipes</a> for more examples.</p><figure class="highlight yml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"><span class="comment"># using service containers on CircleCI</span></span><br><span class="line"><span class="comment"># https://circleci.com/docs/2.0/databases/</span></span><br><span class="line"><span class="attr">executors:</span></span><br><span class="line">  <span class="attr">with-mongo:</span></span><br><span class="line">    <span class="attr">docker:</span></span><br><span class="line">      <span class="comment"># image used to install source code,</span></span><br><span class="line">      <span class="comment"># run our server and run Cypress tests</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">cypress/base:14.16.0</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">          <span class="attr">MONGO_URI:</span> <span class="string">mongodb://$MONGO_USERNAME:$MONGO_PASSWORD@localhost:27017/?authSource=admin</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># image used to run Mongo in a separate container</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">mongo:4.4.5</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">          <span class="attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="string">$MONGO_USERNAME</span></span><br><span class="line">          <span class="attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="string">$MONGO_PASSWORD</span></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">executor:</span> <span class="string">with-mongo</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="comment"># no need to save the workspace after this job</span></span><br><span class="line">          <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>In the CircleCI project&#39;s page set the environment variables <code>MONGO_USERNAME</code> and <code>MONGO_PASSWORD</code> to use during testing. The Circle YML file forms the <code>MONGO_URI</code> environment variable to use in the server and Cypress to connect from those user name and password values.</p><p><img src="/blog/images/mongo/circle-settings.png" alt="Set the picked Mongo username and password as environment variables"></p><p>Push a new commit to the repository to trigger the build. The build should pass.</p><p><img src="/blog/images/mongo/cypress-run.png" alt="Successful Cypress test run"></p><p>You can drill down to see the individual test steps performed by the orb. For example, you can see the log output from the Mongo container running during the entire test job.</p><p><img src="/blog/images/mongo/mongo-log.png" alt="Log output from the Mongo service container"></p><p>And you can see the output from the server and from Cypress tests. Clearing the collection, adding new pizzas, all that delicious jazz.</p><p><img src="/blog/images/mongo/test-log.png" alt="Log output from the server and Cypress"></p><p>Happy testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine your web application is using MongoDB to store its data. How would you take advantage of it during Cypress tests? This blog post 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="circle" scheme="https://glebbahmutov.com/blog/tags/circle/"/>
    
      <category term="db" scheme="https://glebbahmutov.com/blog/tags/db/"/>
    
  </entry>
  
  <entry>
    <title>Writing Tests Progress</title>
    <link href="https://glebbahmutov.com/blog/writing-tests-progress/"/>
    <id>https://glebbahmutov.com/blog/writing-tests-progress/</id>
    <published>2021-04-19T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.393Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine you have a web application, and you need to write the end-to-end tests. The project never had them, so you are starting from scratch. How would you approach it? Here is what I would do to test a <a href="https://todomvc.com/">TodoMVC web application</a> using Cypress.</p><p><strong>Note:</strong> I strongly recommend reading the blog post <a href="/blog/cypress-test-statuses/" title="Cypress Test Statuses">Cypress Test Statuses</a> first, as it explains the difference between <em>pending</em> and <em>skipped</em> test statuses.</p><!-- toc --><ul><li><a href="#start">Start</a></li><li><a href="#the-first-test">The first test</a></li><li><a href="#the-feature-tests">The feature tests</a></li><li><a href="#the-smoke-test">The smoke test</a></li><li><a href="#placeholder-tests">Placeholder tests</a></li><li><a href="#start-recording">Start recording</a></li><li><a href="#write-tests">Write tests</a></li><li><a href="#bonus-1-split-into-the-separate-specs">Bonus 1: split into the separate specs</a></li><li><a href="#wish-show-the-test-breakdown-over-time">Wish: show the test breakdown over time</a></li></ul><!-- tocstop --><p>This post was motivated by the &quot;Cypress &amp; Ansible&quot; webinar with John Hill. You can watch the webinar <a href="https://www.youtube.com/watch?v=fwdXOynDD0Q">here</a> and flip through the <a href="https://cypress.slides.com/cypress-io/cypress-and-ansible">slides</a>. John has pointed out how they write the test plan before writing tests, and how tracking the implemented / pending tests is hard when you assume the tests themselves are the truth. This blog post tries to show one solution to this problem.</p><h2><span id="start">Start</span></h2><blockquote class="pullquote"><p>📦 You can find the application and the tests from this blog post at <a href="https://github.com/bahmutov/cypress-example-test-status">bahmutov/cypress-example-test-status</a> repository.</p></blockquote><p>First, I would install <a href="https://github.com/cypress-io/cypress">Cypress</a> and <a href="https://github.com/bahmutov/start-server-and-test">start-server-and-test</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D cypress start-server-and-test</span></span><br><span class="line">+ cypress@7.1.0</span><br><span class="line">+ start-server-and-test@1.12.1</span><br></pre></td></tr></table></figure><p>Then I would define NPM scripts to start the server and open Cypress as I work on the tests locally.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;http-server -p 8888 -c-1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start:ci&quot;</span>: <span class="string">&quot;http-server -p 8888 -c-1 --silent&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;cypress open&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;start-test start:ci 8888&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> see my blog post <a href="/blog/organize-npm-scripts/" title="How I Organize my NPM Scripts">How I Organize my NPM Scripts</a> to learn how I typically organize the NPM scripts in my projects.</p><p>When working with the tests I just fire up <code>npm run dev</code> to start the server (without its verbose logging), and once the server is ready, open Cypress test runner.</p><h2><span id="the-first-test">The first test</span></h2><p>At first, I want to have a sanity test that makes sure the main feature of the application works. This test ensures right away the application is usable to most users.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;TodoMVC&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;adds 2 todos&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;.new-todo&#x27;</span>).type(<span class="string">&#x27;learn testing&#123;enter&#125;&#x27;</span>).type(<span class="string">&#x27;be cool&#123;enter&#125;&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Great, the test passes locally.</p><p><img src="/blog/images/tests-progress/first-test.png" alt="The first test adds new todos"></p><p>When we have a single E2E test running locally, we want to immediately start running the tests on CI. I will use <a href="/blog/trying-github-actions/" title="GitHub Actions">GitHub Actions</a> to run these tests. The workflow file uses the <a href="https://github.com/cypress-io/github-action">Cypress GitHub Action</a> to install dependencies, start the server, and run the tests.</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">cypress-run:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">E2E</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">&quot;npm run start:ci&quot;</span></span><br><span class="line">          <span class="attr">wait-on:</span> <span class="string">&quot;http://localhost:8888&quot;</span></span><br></pre></td></tr></table></figure><p>The tests now pass on every commit.</p><p><img src="/blog/images/tests-progress/ci.png" alt="The tests passing on GitHub Actions CI"></p><h2><span id="the-feature-tests">The feature tests</span></h2><p>Now let&#39;s think about all the features our application has. The user should be able to:</p><ul><li>add new todos</li><li>edit the existing todos</li><li>complete a todo</li><li>remove the completed todo status</li><li>filter todos by the status</li><li>delete all completes todos</li></ul><p>We can extend the above list, filling the list, grouping every related little detail by the main feature. After a while we derive about 20-30 feature &quot;lists&quot; or user stories that capture everything our application can do - and this list naturally maps to an end-to-end test. Let&#39;s write the final list describing the application and its features:</p><ul><li>TodoMVC app<ul><li>on start<ul><li>sets the focus on the todo input field</li></ul></li><li>without todos<ul><li>hides any filters and actions</li></ul></li><li>new todo<ul><li>allows to add new todos</li><li>clears the input field when adding</li><li>adds new items to the bottom of the list</li><li>trims text input</li><li>shows the filters and actions after adding a todo</li></ul></li><li>completing all todos<ul><li>can mark all todos as completed</li><li>can remove completed status for all todos</li><li>updates the state when changing one todo</li></ul></li><li>one todo<ul><li>can be completed</li><li>can remove completed status</li><li>can be edited</li></ul></li><li>editing todos<ul><li>hides other controls</li><li>saves edit on blur</li><li>trims entered text</li><li>removes todo if text is empty</li><li>cancels edit on escape</li></ul></li><li>counter<ul><li>shows the current number of todos</li></ul></li><li>clear completed todos<ul><li>shows the right text</li><li>should remove completed todos</li><li>is hidden if there are no completed todos</li></ul></li><li>persistence<ul><li>saves the todos data and state</li></ul></li><li>routing<ul><li>goes to the active items view</li><li>respects the browser back button</li><li>goes to the completed items view</li><li>goes to the display all items view</li><li>highlights the current view</li></ul></li></ul></li></ul><p>Wow, it is a long list. We don&#39;t have to discover all the features of the application to test, we can iterate and add more features as we think of them. But how do keep track of the currently tested features vs tests still to write? How do our tests stay in sync with the application features? How do we see the test coverage over time to make sure we are filling the gaps?</p><h2><span id="the-smoke-test">The smoke test</span></h2><p>Here is what I advise to do first: move the very first sanity test we already have into its own smoke spec file.</p><figure class="highlight js"><figcaption><span>cypress/integration/smoke-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;TodoMVC&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;adds 2 todos&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;.new-todo&#x27;</span>).type(<span class="string">&#x27;learn testing&#123;enter&#125;&#x27;</span>).type(<span class="string">&#x27;be cool&#123;enter&#125;&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above smoke spec can be run any time we want to quickly confirm the app is correct. We can even run it by itself whenever we need to:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx cypress run --spec cypress/integration/smoke-spec.js</span></span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> read the blog post <a href="https://www.cypress.io/blog/2019/12/06/use-meaningful-smoke-tests/">Use meaningful smoke tests</a> for more details; you can even run the same smoke test in multiple resolutions to ensure the site works on mobile screens and on desktops.</p><h2><span id="placeholder-tests">Placeholder tests</span></h2><p>Currently we have a smoke spec and an empty &quot;main&quot; spec file. Take the above text list of feature stories, copy it and paste it into the Cypress integration spec file. Of course, the text is not JavaScript, so our code editor will start showing all red.</p><p><img src="/blog/images/test-status/copy-list.png" alt="The initial pasted list of features to test"></p><p>Make the top levels of the list into <code>describe</code> and <code>context</code> callbacks. Make the &quot;leaves&quot; items into the tests <em>without</em> test bodies. Just the test with a title argument like this <code>it(&#39;title...&#39;)</code>. This is a valid spec file!</p><p><img src="/blog/images/tests-progress/placeholder-tests.png" alt="Created placeholder tests from the feature list"></p><p>If you open this spec in Cypress, all 28 tests are shown as pending.</p><p><img src="/blog/images/tests-progress/pending-tests.png" alt="All tests have status &quot;Pending&quot;"></p><p>If you execute this spec in the headless mode using <code>cypress run</code> it shows the breakdown of tests by status:</p><p><img src="/blog/images/tests-progress/pending-run.png" alt="Test status breakdown after the run"></p><p>Nice - we plan to write a lot of tests to thoroughly test the application.</p><h2><span id="start-recording">Start recording</span></h2><p>We start with 28 placeholder tests, and now let&#39;s fill in the test bodies. We can incrementally test the most important features, and every pull request would drive down the number of pending tests and drive up the number of passing tests. You can use the &quot;depth first&quot; strategy where you write all the related tests for each context, or the &quot;breadth first&quot; strategy to write a few simple tests for each context first, before testing the edge cases.</p><p>Let&#39;s knock off a few simple tests in some contexts.</p><p>Before I start doing this, I will start recording the tests on <a href="https://on.cypress.io/dashboard-introduction">Cypress Dashboard</a>. You do NOT have to do this, of course. You can simply look at the number of pending tests at any time to see the test writing progress, or store the test artifacts yourself. Cypress Dashboard just makes it so much easier, and so much more visible when you work as a team.</p><p><img src="/blog/images/tests-progress/record.png" alt="Setting up the project to record on Cypress Dashboard"></p><p>We can pass the created <a href="https://on.cypress.io/projects#Record-key">Cypress record key</a> as GH secret when running the Cypress GitHub Action</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  - name: Run E2E tests 🧪</span><br><span class="line">    uses: cypress-io/github-action@v2</span><br><span class="line">    with:</span><br><span class="line">      start: &#x27;npm run start:ci&#x27;</span><br><span class="line">      wait-on: &#x27;http://localhost:8888&#x27;</span><br><span class="line"><span class="addition">+     record: true</span></span><br><span class="line"><span class="addition">+   env:</span></span><br><span class="line"><span class="addition">+     CYPRESS_RECORD_KEY: $&#123;&#123; secrets.CYPRESS_RECORD_KEY &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>You can find the Cypress Dashboard for the example project <a href="https://github.com/bahmutov/cypress-example-test-status">bahmutov/cypress-example-test-status</a> at <a href="https://dashboard.cypress.io/projects/9g2jiu">dashboard.cypress.io/projects/9g2jiu</a>.</p><p>After the first GH Actions execution the Dashboard shows the passing and pending tests. That&#39;s our start baseline.</p><p><img src="/blog/images/tests-progress/record.png" alt="Setting up the project to record on Cypress Dashboard"></p><p>I think it is important to make these numbers as prominent and easily tracked as possible, as the team&#39;s goal is to implement all the pending tests.</p><p>I will always enable the <a href="https://on.cypress.io/github-integration">Cypress GitHub Integration</a> for this repository. The integration will post the latest test counts for each pull request.</p><p><img src="/blog/images/tests-progress/enable-gh-integration.png" alt="Enable Cypress GitHub Integration for the repository"></p><h2><span id="write-tests">Write tests</span></h2><p>Let&#39;s open a pull request with a few end-to-end tests implementations. We implement a few tests and watch them pass locally.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;TodoMVC app&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  context(<span class="string">&#x27;on start&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    it(<span class="string">&#x27;sets the focus on the todo input field&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      cy.focused().should(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;new-todo&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  context(<span class="string">&#x27;without todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    it(<span class="string">&#x27;hides any filters and actions&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">      cy.get(<span class="string">&#x27;.main&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">      cy.get(<span class="string">&#x27;.footer&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  context(<span class="string">&#x27;new todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    it(<span class="string">&#x27;allows to add new todos&#x27;</span>)</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/tests-progress/first-tests.png" alt="First two tests implemented"></p><p>We can probably move <code>cy.visit(&#39;/&#39;)</code> into <code>beforeEach</code> hook, since every test probably needs to visit the site first.</p><p>When we open the <a href="https://github.com/bahmutov/cypress-example-test-status/pull/1">first pull request</a> the Cypress GH Integration application posts a comment with the test numbers. Good start - 3 tests are passing (1 smoke test plus two regular tests) and 26 pending tests to be implemented. I wish the PR comment had the &quot;delta&quot; numbers - how many tests were added / passing / pending compared to the main branch.</p><p><img src="/blog/images/tests-progress/pr-comment.png" alt="Pull request comment by the Cypress GH app"></p><p>The tests pass, so let&#39;s merge the pull request.</p><p>As we <a href="https://github.com/bahmutov/cypress-example-test-status/pull/2">write more tests</a>, we can refactor the existing test code, creating utility functions.</p><figure class="highlight js"><figcaption><span>cypress/integration/utils.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> TODO_ITEM_ONE = <span class="string">&#x27;buy some cheese&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> TODO_ITEM_TWO = <span class="string">&#x27;feed the cat&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> TODO_ITEM_THREE = <span class="string">&#x27;book a doctors appointment&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createDefaultTodos = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// do not log any commands inside this utility function</span></span><br><span class="line">  <span class="keyword">const</span> options = &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;</span><br><span class="line">  cy.get(<span class="string">&#x27;.new-todo&#x27;</span>, options)</span><br><span class="line">    .type(<span class="string">`<span class="subst">$&#123;TODO_ITEM_ONE&#125;</span>&#123;enter&#125;`</span>, options)</span><br><span class="line">    .type(<span class="string">`<span class="subst">$&#123;TODO_ITEM_TWO&#125;</span>&#123;enter&#125;`</span>, options)</span><br><span class="line">    .type(<span class="string">`<span class="subst">$&#123;TODO_ITEM_THREE&#125;</span>&#123;enter&#125;`</span>, options)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>, options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can use the <code>createDefaultTodos</code> function to quickly get a few Todo items to test the app features other than adding the new todos.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;adds new items to the bottom of the list&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// this is an example of a custom command</span></span><br><span class="line">  <span class="comment">// defined in cypress/support/commands.js</span></span><br><span class="line">  createDefaultTodos().as(<span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// even though the text content is split across</span></span><br><span class="line">  <span class="comment">// multiple &lt;span&gt; and &lt;strong&gt; elements</span></span><br><span class="line">  <span class="comment">// `cy.contains` can verify this correctly</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.todo-count&#x27;</span>).contains(<span class="string">&#x27;3 items left&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;@todos&#x27;</span>).eq(<span class="number">0</span>).find(<span class="string">&#x27;label&#x27;</span>).should(<span class="string">&#x27;contain&#x27;</span>, TODO_ITEM_ONE)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;@todos&#x27;</span>).eq(<span class="number">1</span>).find(<span class="string">&#x27;label&#x27;</span>).should(<span class="string">&#x27;contain&#x27;</span>, TODO_ITEM_TWO)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;@todos&#x27;</span>)</span><br><span class="line">    .eq(<span class="number">2</span>)</span><br><span class="line">    .find(<span class="string">&#x27;label&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;contain&#x27;</span>, TODO_ITEM_THREE)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Then we can implement the &quot;complete all&quot; suite of tests, providing the test bodies for these pending tests:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">context(<span class="string">&#x27;completing all todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;can mark all todos as completed&#x27;</span>)</span><br><span class="line">  it(<span class="string">&#x27;can remove completed status for all todos&#x27;</span>)</span><br><span class="line">  it(<span class="string">&#x27;updates the state when changing one todo&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You can see the pull request <a href="https://github.com/bahmutov/cypress-example-test-status/pull/3">#3</a> that drives the number pf pending tests down to 20.</p><p>The next pull request <a href="https://github.com/bahmutov/cypress-example-test-status/pull/4">#4</a> implements completing the single todo tests</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">context(<span class="string">&#x27;one todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;can be completed&#x27;</span>)</span><br><span class="line">  it(<span class="string">&#x27;can remove completed status&#x27;</span>)</span><br><span class="line">  it(<span class="string">&#x27;can be edited&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>What we expect to see in the long term is the number of pending tests going down, and the number of passing tests going up.</p><p><img src="/blog/images/tests-progress/runs-numbers.gif" alt="Pending vs passing test numbers in the Dashboard list"></p><p>When the number of pending tests hits zero we know we have implemented all the tests planned.</p><p><img src="/blog/images/tests-progress/reach-zero.png" alt="All tests are passing, there are no pending tests to write"></p><h2><span id="bonus-1-split-into-the-separate-specs">Bonus 1: split into the separate specs</span></h2><p>Once we have a lot of tests in a single spec file, it becomes unwieldy. We can move the test suites into separate spec files; potentially this will speed the test run if we want to run the specs in parallel. Read the blog post <a href="/blog/parallel-cypress-tests-gh-action/" title="Split Long GitHub Action Workflow Into Parallel Cypress Jobs">Split Long GitHub Action Workflow Into Parallel Cypress Jobs</a> for details.</p><p>Our current integration specs folder can look like this:</p><p><img src="/blog/images/tests-progress/split-specs.png" alt="Split all tests into separate spec files"></p><p>I have left only a few smaller tests in the <code>spec.js</code> file.</p><p>Because the <code>utils.js</code> file contains the utility functions like <code>createDefaultTodos</code> and no tests of its own, we can hide it from the Cypress test runner using the <code>ignoreTestFiles</code> list in the config file</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;http://localhost:8888&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;fixturesFolder&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;pluginsFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;ignoreTestFiles&quot;</span>: [<span class="string">&quot;utils.js&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;projectId&quot;</span>: <span class="string">&quot;9g2jiu&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When splitting a single spec into multiple, I recommend setting the <a href="https://on.cypress.io/github-integration">Cypress GitHub Integration</a> to display a single status check per spec file. Then every PR has detailed information for every spec file.</p><p><img src="/blog/images/tests-progress/per-spec.png" alt="Cypress reports test stats per spec file"></p><h2><span id="wish-show-the-test-breakdown-over-time">Wish: show the test breakdown over time</span></h2><p>I really would like to see the number of pending tests vs passing tests over time, probably per branch. Today I can look at the column of test numbers for the <code>main</code> branch to kind of see it.</p><p><img src="/blog/images/tests-progress/latest-runs.png" alt="Number of pending tests goes to zero over time"></p><p>But I would love to see it explicitly over time / over commits.</p><p><img src="/blog/images/tests-progress/test-counts-bar-chart.png" alt="Test counts going over time with each run"></p><p>Hope the above analytics helps the project execute its testing strategy better.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine you have a web application, and you need to write the end-to-end tests. The project never had them, so you are starting from scra
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress Test Statuses</title>
    <link href="https://glebbahmutov.com/blog/cypress-test-statuses/"/>
    <id>https://glebbahmutov.com/blog/cypress-test-statuses/</id>
    <published>2021-04-17T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.260Z</updated>
    
    <content type="html"><![CDATA[<p>After the Cypress spec completes every test has one of the 4 statuses: passing, failing, pending, or skipped. Let&#39;s look into each status.</p><h2><span id="passing">Passing</span></h2><p>Passing tests are the best, aren&#39;t they? The have successfully completed all their commands, never failing any assertions. Our smoke test below is a passing test:</p><p><img src="/blog/images/test-status/passing-test.png" alt="Passing test"></p><p>Note that a test can pass after several <a href="https://docs.cypress.io/guides/guides/test-retries">test retries</a>. In that case the Command Log shows the attempts, but ultimately the entire test has finished successfully.</p><h2><span id="failing">Failing</span></h2><p>Good news - the failing test has found a problem. Could be much worse - it could be a user hitting this bug.</p><p><img src="/blog/images/test-status/failing-test.png" alt="The test failed because there are two items and not 100"></p><p>After the test fails, use the screenshot and the video to find the problem and fix it.</p><h2><span id="pending-tests">Pending tests</span></h2><p>The placeholder tests we have written were marked <em>pending</em>. They did not execute because the user did not want them to run - the user did not write them. Slightly confusingly, if the user does not want an existing test to run, they can use the <code>it.skip</code> or <code>xit</code> syntax to skip the test or a block of tests. Cypress marks all these tests <em>pending</em>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;TodoMVC&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;is not written yet&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  it.skip(<span class="string">&#x27;adds 2 todos&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;.new-todo&#x27;</span>).type(<span class="string">&#x27;learn testing&#123;enter&#125;&#x27;</span>).type(<span class="string">&#x27;be cool&#123;enter&#125;&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  xit(<span class="string">&#x27;another test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    expect(<span class="literal">false</span>).to.true</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>All 3 tests above are marked <em>pending</em> when Cypress finishes running the spec file.</p><p><img src="/blog/images/test-status/different-pending.png" alt="Different ways to get a pending test"></p><p>So remember - if you (the test writer) knowingly skip a test using one of the above three ways, Cypress counts it as a <em>pending</em> test. The result will be known in the future when you enable the test again.</p><p>The status and the name &quot;pending&quot; comes from Mocha.js test engine that Cypress uses internally. See the <a href="https://mochajs.org/#pending-tests">pending tests</a> section of the Mocha&#39;s documentation captured below.</p><p><img src="/blog/images/test-status/mocha-pending.png" alt="The definition of the pending test from Mocha"></p><h2><span id="skipped-tests">Skipped tests</span></h2><p>The last test status is for tests that the user <em>meant</em> to run, but these tests were skipped due to some run-time error. For example, imagine a group of tests sharing the same <code>beforeEach</code> hook. The hook executes the common commands. For example, we could visit the page in the <code>beforeEach</code> hook because every test needs to start at the page.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;TodoMVC&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;hides footer initially&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.get(<span class="string">&#x27;.filters&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;adds 2 todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.get(<span class="string">&#x27;.new-todo&#x27;</span>).type(<span class="string">&#x27;learn testing&#123;enter&#125;&#x27;</span>).type(<span class="string">&#x27;be cool&#123;enter&#125;&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If the <code>beforeEach</code> hook completes and both tests finish, two tests are passing.</p><p><img src="/blog/images/test-status/two-passing.png" alt="Two passing tests"></p><p>But what happens if a command inside the <code>beforeEach</code> hook fails? For example, let&#39;s pretend we want to visit a non-existent page <code>/hmm</code> instead of the <code>/</code>. If we change our <code>beforeEach</code> to fail:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/hmm&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>When Cypres starts executing the first test, the <code>beforeEach</code> hook fails. Now the first test is marked &quot;failing&quot;. BUT if the <code>beforeEach</code> hook failed once, why would we execute it <em>again</em> before the second test? It would just fail the same way! So Cypress <em>skips</em> the remaining tests in that block, because they would also fail for sure due to the bad <code>beforeEach</code> hook.</p><p><img src="/blog/images/test-status/1-skipped.png" alt="One failed test and the rest of tests were skipped"></p><p>If we collapse the test commands, we can see the empty box marking the skipped test &quot;adds 2 todos&quot;.</p><p><img src="/blog/images/test-status/skipped.png" alt="Skipped test"></p><p>The tests that were meant to be executed, but were skipped due to some run-time problem are marked &quot;skipped&quot; by Cypress.</p><p>The same situation happens if instead of the <code>beforeEach</code> hook, the <code>before</code> hook fails.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;TodoMVC&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/hmm&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;hides footer initially&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.get(<span class="string">&#x27;.filters&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;adds 2 todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.get(<span class="string">&#x27;.new-todo&#x27;</span>).type(<span class="string">&#x27;learn testing&#123;enter&#125;&#x27;</span>).type(<span class="string">&#x27;be cool&#123;enter&#125;&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The Cypress Test Runner fails the first test (the one that really executes the <code>before</code> hook), and skips the rest of the scheduled tests.</p><p><img src="/blog/images/test-status/before-skip.png" alt="The rest of the tests are skipped when the before hook fails"></p><p>Hope this explanation clarifies the Cypress test statuses.</p><h2><span id="bonus-track-the-test-statuses-over-time">Bonus: track the test statuses over time</span></h2><p>I have described in the blog post <a href="/blog/writing-tests-progress/" title="Writing Tests Progress">Writing Tests Progress</a> how to start testing the project by writing a lot of pending tests and then fill the tests with actual implementations.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;After the Cypress spec completes every test has one of the 4 statuses: passing, failing, pending, or skipped. Let&amp;#39;s look into each st
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Load Fixtures from Cypress Custom Commands</title>
    <link href="https://glebbahmutov.com/blog/fixtures-in-custom-commands/"/>
    <id>https://glebbahmutov.com/blog/fixtures-in-custom-commands/</id>
    <published>2021-04-16T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.280Z</updated>
    
    <content type="html"><![CDATA[<p>This blog post multiples ways to pick a random item from a fixture file, and then reuse that picked item in multiple Cypress tests. We will look at fixtures, aliases, hooks, and custom commands.</p><!-- toc --><ul><li><a href="#the-application">The application</a></li><li><a href="#the-database">The database</a></li><li><a href="#picking-a-random-user">Picking a random user</a></li><li><a href="#using-a-before-hook">Using a before hook</a></li><li><a href="#problem-aliases-are-reset">Problem: aliases are reset</a><ul><li><a href="#use-a-common-variable">Use a common variable</a></li><li><a href="#use-before-and-beforeeach-hooks">Use before and beforeEach hooks</a></li><li><a href="#use-the-cypressconfig-method">Use the Cypress.config method</a></li><li><a href="#use-the-cypressenv-method">Use the Cypress.env method</a></li></ul></li><li><a href="#custom-command">Custom command</a></li><li><a href="#using-the-memo-pattern">Using the memo pattern</a></li><li><a href="#support-file">Support file</a></li><li><a href="#use-imports">Use imports</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><h2><span id="the-application">The application</span></h2><p>Let&#39;s take a Cypress test verifies the application loads and displays the user name:</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;loads the first user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#user&#x27;</span>, <span class="string">&#x27;Joe Smith&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/fixtures/current-user.png" alt="The passing test"></p><p>We can inspect the application code to see how to fetches the user, it fetches it from the REST resource on load:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;/users/1&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (r.ok) &#123;</span><br><span class="line">      <span class="keyword">return</span> r.json()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(r.statusText)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;user&#x27;</span>).innerText =</span><br><span class="line">      <span class="string">`<span class="subst">$&#123;user.name.first&#125;</span> <span class="subst">$&#123;user.name.last&#125;</span>`</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;user&#x27;</span>).innerText = e.message</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>📦 You can find the application and the test for this blog post at <a href="https://github.com/bahmutov/cy-user-register-example">bahmutov/cy-user-register-example</a> repository.</p></blockquote><h2><span id="the-database">The database</span></h2><p>Our application has a very simply database implemented using <a href="https://www.npmjs.com/package/json-server">json-server</a> utility. It servers the REST resources from the <code>db.json</code> file. Currently we have a single hard-coded user object there.</p><figure class="highlight json"><figcaption><span>db.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;users&quot;</span>: [&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;first&quot;</span>: <span class="string">&quot;Joe&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;last&quot;</span>: <span class="string">&quot;Smith&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Having a single permanent user is no fun, what is the point of that? So let&#39;s reset the database <code>/users</code> list before each test, and instead place our test user there. Then we can verify the test user is displayed on load. We are including the <a href="https://github.com/bahmutov/json-server-reset">json-server-reset</a> middleware module for this:</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;json-server --port 6001 --watch db.json --middlewares ./node_modules/json-server-reset&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From the test we can send the <code>POST /reset</code> HTTP message using the <a href="https://on.cypress.io/request">cy.request</a> command.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;loads the test user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> testUser = &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    name: &#123;</span><br><span class="line">      first: <span class="string">&#x27;Testing&#x27;</span>,</span><br><span class="line">      last: <span class="string">&#x27;Expert&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// we need to send the entire database object</span></span><br><span class="line">  cy.request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/reset&#x27;</span>, &#123;</span><br><span class="line">    users: [testUser],</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#user&#x27;</span>, <span class="string">`<span class="subst">$&#123;testUser.name.first&#125;</span> <span class="subst">$&#123;testUser.name.last&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We can see the successful test and the reset message from the server in the terminal</p><p><img src="/blog/images/fixtures/reset.png" alt="Posting and verifying using the test user"></p><h2><span id="picking-a-random-user">Picking a random user</span></h2><p>It is no fun to always see the same one user. Let&#39;s have a list of users to test with instead. We can pick a random user from the list when starting the test. Here is our fixture file: notice that every user has the same id 1 - because that will be the resource id later</p><figure class="highlight json"><figcaption><span>cypress/fixtures/data.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;users&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;first&quot;</span>: <span class="string">&quot;Joe&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;last&quot;</span>: <span class="string">&quot;Smith&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;first&quot;</span>: <span class="string">&quot;Mary&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;last&quot;</span>: <span class="string">&quot;Adams&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;first&quot;</span>: <span class="string">&quot;Mike&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;last&quot;</span>: <span class="string">&quot;Valente&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Our test can load the entire object from the <code>cypress/fixtures/data.json</code> file using the <a href="https://on.cypress.io/fixture">cy.fixture</a> command, then pick a random user and send the <code>POST /reset</code> request.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;sets the random user from the fixture list&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.fixture(<span class="string">&#x27;data.json&#x27;</span>).then(<span class="function">(<span class="params">&#123; users &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// the index k will be from 0 to users.length - 1</span></span><br><span class="line">    <span class="keyword">const</span> k = Cypress._.random(users.length - <span class="number">1</span>)</span><br><span class="line">    expect(k, <span class="string">&#x27;random user index&#x27;</span>).to.be.within(<span class="number">0</span>, users.length - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> testUser = users[k]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// we need to send the entire database object</span></span><br><span class="line">    cy.request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/reset&#x27;</span>, &#123;</span><br><span class="line">      users: [testUser],</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.contains(<span class="string">&#x27;#user&#x27;</span>, <span class="string">`<span class="subst">$&#123;testUser.name.first&#125;</span> <span class="subst">$&#123;testUser.name.last&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If we run the test several times, it shows a different user.</p><p><img src="/blog/images/fixtures/pick-random-user.gif" alt="Testing with a randomly picked user from the fixture"></p><h2><span id="using-a-before-hook">Using a before hook</span></h2><p>If we have several tests, we do not need to reset the user inside each test. Instead we can reset the test once using the <code>before</code> hook. We just need to decide how to pass the picked <code>testUser</code> object from the hook to the test, because it needs the name to find on the page.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.fixture(<span class="string">&#x27;data.json&#x27;</span>).then(<span class="function">(<span class="params">&#123; users &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// the index k will be from 0 to users.length - 1</span></span><br><span class="line">    <span class="keyword">const</span> k = Cypress._.random(users.length - <span class="number">1</span>)</span><br><span class="line">    expect(k, <span class="string">&#x27;random user index&#x27;</span>).to.be.within(<span class="number">0</span>, users.length - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> testUser = users[k]</span><br><span class="line">    <span class="comment">// save the picked user using an alias</span></span><br><span class="line">    cy.wrap(testUser).as(<span class="string">&#x27;testUser&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// we need to send the entire database object</span></span><br><span class="line">    cy.request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/reset&#x27;</span>, &#123;</span><br><span class="line">      users: [testUser],</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;sets the random user from the fixture list&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// because we used the &quot;function () &#123; ... &#125;&quot; callback</span></span><br><span class="line">  <span class="comment">// the &quot;this&quot; points at the test context</span></span><br><span class="line">  <span class="comment">// where the &quot;testUser&quot; property was already set</span></span><br><span class="line">  <span class="comment">// by the &quot;before&quot; hook via &quot;.as(&#x27;testUser&#x27;)&quot;</span></span><br><span class="line">  <span class="keyword">const</span> name = <span class="built_in">this</span>.testUser.name</span><br><span class="line">  cy.contains(<span class="string">&#x27;#user&#x27;</span>, <span class="string">`<span class="subst">$&#123;name.first&#125;</span> <span class="subst">$&#123;name.last&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes, we can see the alias set using the <a href="https://on.cypress.io/as">.as</a> command.</p><p><img src="/blog/images/fixtures/before-hook.png" alt="Setting the picked user in the before hook"></p><h2><span id="problem-aliases-are-reset">Problem: aliases are reset</span></h2><p>Unfortunately this implementation has a problem: all <a href="https://on.cypress.io/variables-and-aliases">aliases are reset before each test</a>. If we add another test that needs the <code>testUser</code> object, it would fail.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;sets the random user from the fixture list&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// because we used the &quot;function () &#123; ... &#125;&quot; callback</span></span><br><span class="line">  <span class="comment">// the &quot;this&quot; points at the test context</span></span><br><span class="line">  <span class="comment">// where the &quot;testUser&quot; property was already set</span></span><br><span class="line">  <span class="comment">// by the &quot;before&quot; hook via &quot;.as(&#x27;testUser&#x27;)&quot;</span></span><br><span class="line">  <span class="keyword">const</span> name = <span class="built_in">this</span>.testUser.name</span><br><span class="line">  cy.contains(<span class="string">&#x27;#user&#x27;</span>, <span class="string">`<span class="subst">$&#123;name.first&#125;</span> <span class="subst">$&#123;name.last&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;has the test user&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  expect(<span class="built_in">this</span>.testUser).to.be.an(<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/fixtures/alias-was-reset.png" alt="The alias testUser is unavailable after the first test"></p><h3><span id="use-a-common-variable">Use a common variable</span></h3><p>We solve this problem in several ways - it is just JavaScript, after all. For example, we could store the test user reference in a variable in the shared lexical scope bypassing the alias.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// use a common variable to store the random user</span></span><br><span class="line"><span class="keyword">let</span> testUser</span><br><span class="line"></span><br><span class="line">before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.fixture(<span class="string">&#x27;data.json&#x27;</span>).then(<span class="function">(<span class="params">&#123; users &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// the index k will be from 0 to users.length - 1</span></span><br><span class="line">    <span class="keyword">const</span> k = Cypress._.random(users.length - <span class="number">1</span>)</span><br><span class="line">    expect(k, <span class="string">&#x27;random user index&#x27;</span>).to.be.within(<span class="number">0</span>, users.length - <span class="number">1</span>)</span><br><span class="line">    testUser = users[k]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// we need to send the entire database object</span></span><br><span class="line">    cy.request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/reset&#x27;</span>, &#123;</span><br><span class="line">      users: [testUser],</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;sets the random user from the fixture list&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> name = testUser.name</span><br><span class="line">  cy.contains(<span class="string">&#x27;#user&#x27;</span>, <span class="string">`<span class="subst">$&#123;name.first&#125;</span> <span class="subst">$&#123;name.last&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;has the test user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  expect(testUser).to.be.an(<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The tests work</p><p><img src="/blog/images/fixtures/variable.png" alt="Using a shared variable to pass the picked user"></p><h3><span id="use-before-and-beforeeach-hooks">Use before and beforeEach hooks</span></h3><p>We can still use the hooks and aliases. We can pick the user once, and then reset the database and set the alias before each test using the <code>before</code> + <code>beforeEach</code> hook combination.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// use a common variable to store the random user</span></span><br><span class="line"><span class="keyword">let</span> testUser</span><br><span class="line"></span><br><span class="line">before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.fixture(<span class="string">&#x27;data.json&#x27;</span>).then(<span class="function">(<span class="params">&#123; users &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// the index k will be from 0 to users.length - 1</span></span><br><span class="line">    <span class="keyword">const</span> k = Cypress._.random(users.length - <span class="number">1</span>)</span><br><span class="line">    expect(k, <span class="string">&#x27;random user index&#x27;</span>).to.be.within(<span class="number">0</span>, users.length - <span class="number">1</span>)</span><br><span class="line">    testUser = users[k]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.wrap(testUser).as(<span class="string">&#x27;testUser&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// we need to send the entire database object</span></span><br><span class="line">  cy.request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/reset&#x27;</span>, &#123;</span><br><span class="line">    users: [testUser],</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;sets the random user from the fixture list&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> name = testUser.name</span><br><span class="line">  cy.contains(<span class="string">&#x27;#user&#x27;</span>, <span class="string">`<span class="subst">$&#123;name.first&#125;</span> <span class="subst">$&#123;name.last&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;has the test user&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  expect(<span class="built_in">this</span>.testUser).to.be.an(<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The tests pass, the user is generated once in the <code>before</code> hook, and the <code>beforeEach</code> hooks reset the database to that user, and set the alias to be available in every test.</p><p><img src="/blog/images/fixtures/before-each.png" alt="Resetting the alias using the beforeEach hook"></p><h3><span id="use-the-cypressconfig-method">Use the Cypress.config method</span></h3><p>There is another way to store and pass a value: <a href="https://on.cypress.io/config">Cypress.config</a> command. Under the hood it is nothing but a plain object, and we can store any values there. Who is going to stop us? There is no Cypress police to tell the users what to do.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.fixture(<span class="string">&#x27;data.json&#x27;</span>).then(<span class="function">(<span class="params">&#123; users &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// the index k will be from 0 to users.length - 1</span></span><br><span class="line">    <span class="keyword">const</span> k = Cypress._.random(users.length - <span class="number">1</span>)</span><br><span class="line">    expect(k, <span class="string">&#x27;random user index&#x27;</span>).to.be.within(<span class="number">0</span>, users.length - <span class="number">1</span>)</span><br><span class="line">    Cypress.config(<span class="string">&#x27;testUser&#x27;</span>, users[k])</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> testUser = Cypress.config(<span class="string">&#x27;testUser&#x27;</span>)</span><br><span class="line">  <span class="comment">// we need to send the entire database object</span></span><br><span class="line">  cy.request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/reset&#x27;</span>, &#123;</span><br><span class="line">    users: [testUser],</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;sets the random user from the fixture list&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> testUser = Cypress.config(<span class="string">&#x27;testUser&#x27;</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> name = testUser.name</span><br><span class="line">  cy.contains(<span class="string">&#x27;#user&#x27;</span>, <span class="string">`<span class="subst">$&#123;name.first&#125;</span> <span class="subst">$&#123;name.last&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;has the test user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> testUser = Cypress.config(<span class="string">&#x27;testUser&#x27;</span>)</span><br><span class="line">  expect(testUser).to.be.an(<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3><span id="use-the-cypressenv-method">Use the Cypress.env method</span></h3><p>I prefer a different method for storing and retrieving my own values - <a href="https://on.cypress.io/env">Cypress.env</a>. It works exactly like <code>Cypress.config</code> under the hood - just a plain object to store your properties.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.fixture(<span class="string">&#x27;data.json&#x27;</span>).then(<span class="function">(<span class="params">&#123; users &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// the index k will be from 0 to users.length - 1</span></span><br><span class="line">    <span class="keyword">const</span> k = Cypress._.random(users.length - <span class="number">1</span>)</span><br><span class="line">    expect(k, <span class="string">&#x27;random user index&#x27;</span>).to.be.within(<span class="number">0</span>, users.length - <span class="number">1</span>)</span><br><span class="line">    Cypress.env(<span class="string">&#x27;testUser&#x27;</span>, users[k])</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> testUser = Cypress.env(<span class="string">&#x27;testUser&#x27;</span>)</span><br><span class="line">  <span class="comment">// we need to send the entire database object</span></span><br><span class="line">  cy.request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/reset&#x27;</span>, &#123;</span><br><span class="line">    users: [testUser],</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;sets the random user from the fixture list&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> testUser = Cypress.env(<span class="string">&#x27;testUser&#x27;</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> name = testUser.name</span><br><span class="line">  cy.contains(<span class="string">&#x27;#user&#x27;</span>, <span class="string">`<span class="subst">$&#123;name.first&#125;</span> <span class="subst">$&#123;name.last&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;has the test user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> testUser = Cypress.env(<span class="string">&#x27;testUser&#x27;</span>)</span><br><span class="line">  expect(testUser).to.be.an(<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="custom-command">Custom command</span></h2><p>If we always want to pick a random user, might as well make it into a reusable command. First, let&#39;s write a single custom command to pick a user and reset the database.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">Cypress.Commands.add(<span class="string">&#x27;pickTestUser&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.fixture(<span class="string">&#x27;data.json&#x27;</span>).then(<span class="function">(<span class="params">&#123; users &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// the index k will be from 0 to users.length - 1</span></span><br><span class="line">    <span class="keyword">const</span> k = Cypress._.random(users.length - <span class="number">1</span>)</span><br><span class="line">    expect(k, <span class="string">&#x27;random user index&#x27;</span>).to.be.within(<span class="number">0</span>, users.length - <span class="number">1</span>)</span><br><span class="line">    Cypress.env(<span class="string">&#x27;testUser&#x27;</span>, users[k])</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.pickTestUser()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> testUser = Cypress.env(<span class="string">&#x27;testUser&#x27;</span>)</span><br><span class="line">  <span class="comment">// we need to send the entire database object</span></span><br><span class="line">  cy.request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/reset&#x27;</span>, &#123;</span><br><span class="line">    users: [testUser],</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;sets the random user from the fixture list&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> testUser = Cypress.env(<span class="string">&#x27;testUser&#x27;</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> name = testUser.name</span><br><span class="line">  cy.contains(<span class="string">&#x27;#user&#x27;</span>, <span class="string">`<span class="subst">$&#123;name.first&#125;</span> <span class="subst">$&#123;name.last&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;has the test user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> testUser = Cypress.env(<span class="string">&#x27;testUser&#x27;</span>)</span><br><span class="line">  expect(testUser).to.be.an(<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Using <code>Cypress.env</code> to store data has one small advantage: at the end of the test or while pausing it, you can always fetch the current value by opening the DevTools console and simply running <code>Cypress.env(&#39;testUser&#39;)</code> command - all methods on the Cypress object are always available and can be executed at any time.</p><p><img src="/blog/images/fixtures/log-test-user.png" alt="Log the current user using DevTools"></p><h2><span id="using-the-memo-pattern">Using the memo pattern</span></h2><p>Picking the random user does not need to use <code>Cypress.env</code> or other methods to yield the <code>testUser</code> object. Instead it can use a memo pattern. If the value does not exist (we can use a local variable for example), then we can generate the random user and remember it. Next time, we can simply return that value.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// local variable to remember the once generated user</span></span><br><span class="line"><span class="keyword">let</span> testUser</span><br><span class="line"></span><br><span class="line">Cypress.Commands.add(<span class="string">&#x27;pickTestUser&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (testUser) &#123;</span><br><span class="line">    <span class="keyword">return</span> cy.wrap(testUser)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cy.fixture(<span class="string">&#x27;data.json&#x27;</span>).then(<span class="function">(<span class="params">&#123; users &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// the index k will be from 0 to users.length - 1</span></span><br><span class="line">    <span class="keyword">const</span> k = Cypress._.random(users.length - <span class="number">1</span>)</span><br><span class="line">    expect(k, <span class="string">&#x27;random user index&#x27;</span>).to.be.within(<span class="number">0</span>, users.length - <span class="number">1</span>)</span><br><span class="line">    testUser = users[k]</span><br><span class="line">    <span class="comment">// yield the generated test user object</span></span><br><span class="line">    cy.wrap(testUser)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.pickTestUser().then(<span class="function">(<span class="params">testUser</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// we need to send the entire database object</span></span><br><span class="line">    cy.request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/reset&#x27;</span>, &#123;</span><br><span class="line">      users: [testUser],</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;sets the random user from the fixture list&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.pickTestUser().then(<span class="function">(<span class="params">testUser</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> name = testUser.name</span><br><span class="line">    cy.contains(<span class="string">&#x27;#user&#x27;</span>, <span class="string">`<span class="subst">$&#123;name.first&#125;</span> <span class="subst">$&#123;name.last&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;has the test user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// use .should assertion on the yielded object</span></span><br><span class="line">  cy.pickTestUser().should(<span class="string">&#x27;be.an&#x27;</span>, <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If you inspect the Command Log, you can confirm that the random user was indeed picked once, and then the same user was yielded before each test.</p><p><img src="/blog/images/fixtures/memo.png" alt="Memo pattern for the picked user"></p><h2><span id="support-file">Support file</span></h2><p>Since the custom command and the tests do not use any shared variables to pass the data, we can safely move the custom command to the <a href="https://on.cypress.io/writing-and-organizing-tests#Support-file">Cypress support file</a>. This will make the new command available in every spec.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// local variable to remember the once generated user</span></span><br><span class="line"><span class="keyword">let</span> testUser</span><br><span class="line"></span><br><span class="line">Cypress.Commands.add(<span class="string">&#x27;pickTestUser&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (testUser) &#123;</span><br><span class="line">    <span class="keyword">return</span> cy.wrap(testUser)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cy.fixture(<span class="string">&#x27;data.json&#x27;</span>).then(<span class="function">(<span class="params">&#123; users &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// the index k will be from 0 to users.length - 1</span></span><br><span class="line">    <span class="keyword">const</span> k = Cypress._.random(users.length - <span class="number">1</span>)</span><br><span class="line">    expect(k, <span class="string">&#x27;random user index&#x27;</span>).to.be.within(<span class="number">0</span>, users.length - <span class="number">1</span>)</span><br><span class="line">    testUser = users[k]</span><br><span class="line">    <span class="comment">// yield the generated test user object</span></span><br><span class="line">    cy.wrap(testUser)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.pickTestUser().then(<span class="function">(<span class="params">testUser</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// we need to send the entire database object</span></span><br><span class="line">    cy.request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/reset&#x27;</span>, &#123;</span><br><span class="line">      users: [testUser],</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;sets the random user from the fixture list&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.pickTestUser().then(<span class="function">(<span class="params">testUser</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> name = testUser.name</span><br><span class="line">    cy.contains(<span class="string">&#x27;#user&#x27;</span>, <span class="string">`<span class="subst">$&#123;name.first&#125;</span> <span class="subst">$&#123;name.last&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;has the test user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// use .should assertion on the yielded object</span></span><br><span class="line">  cy.pickTestUser().should(<span class="string">&#x27;be.an&#x27;</span>, <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> since we have just one custom command, I simply placed it into the <code>cypress/support/index.js</code> file. If we had many custom commands, I would have them in their own JS files and would import them from the support file.</p><h2><span id="use-imports">Use imports</span></h2><p>Our list of users comes from the JSON fixture file. We can directly import or require this JSON file from the JavaScript files, our bundler knows how to load a JSON object. Thus picking of the test user could be rewritten as:</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; users &#125; <span class="keyword">from</span> <span class="string">&#x27;../fixtures/data.json&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// note that Cypress._ is available outside of any test.</span></span><br><span class="line"><span class="comment">// the index k will be from 0 to users.length - 1</span></span><br><span class="line"><span class="keyword">const</span> k = Cypress._.random(users.length - <span class="number">1</span>)</span><br><span class="line">expect(k, <span class="string">&#x27;random user index&#x27;</span>).to.be.within(<span class="number">0</span>, users.length - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> testUser = users[k]</span><br><span class="line"></span><br><span class="line">Cypress.Commands.add(<span class="string">&#x27;pickTestUser&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.wrap(testUser)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test works the same way as before (well, almost the same way).</p><p><img src="/blog/images/fixtures/import.png" alt="Importing the fixture file to pick the user"></p><p>Notice the difference: we had an <code>expect(k, &#39;random user index)</code> assertion <em>outside</em> of any test. Such assertions when passing do NOT show up in the Command Log at all. If they fail, Cypress does show them. Let&#39;s modify the assertion to make it fail to see it:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expect(k, <span class="string">&#x27;random user index&#x27;</span>).to.be.within(<span class="number">100</span>, users.length - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/fixtures/fail-expect.png" alt="Failed assertion outside a test"></p><p>Nice!</p><h2><span id="see-also">See also</span></h2><ul><li><a href="https://on.cypress.io/fixture">cy.fixture</a> command</li><li><a href="https://on.cypress.io/recipes#Server-Communication">data recipes</a></li><li>Cypress <a href="https://on.cypress.io/variables-and-aliases">Variables and Aliases</a> guide</li><li>the final code in <a href="https://github.com/bahmutov/cy-user-register-example">bahmutov/cy-user-register-example</a> repo</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This blog post multiples ways to pick a random item from a fixture file, and then reuse that picked item in multiple Cypress tests. We wi
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Stub window.track</title>
    <link href="https://glebbahmutov.com/blog/stub-window-track/"/>
    <id>https://glebbahmutov.com/blog/stub-window-track/</id>
    <published>2021-04-06T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.358Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#the-analytics-method-windowtrack">The analytics method window.track</a></li><li><a href="#stub-the-method-after-the-visit">Stub the method after the visit</a></li><li><a href="#testing-windowload-call">Testing window.load call</a></li><li><a href="#stub-every-widow">Stub every widow</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><h2><span id="the-analytics-method-windowtrack">The analytics method window.track</span></h2><p>Imagine our app is loading a tiny analytics script that tracks the window load event.</p><figure class="highlight js"><figcaption><span>analytics.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example analytics lib</span></span><br><span class="line"><span class="built_in">window</span>.track = <span class="function">(<span class="params">eventName</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;tracking event &quot;%s&quot;&#x27;</span>, eventName)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  track(<span class="string">&#x27;window.load&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The application can also track other events, for example creating and removing the todo items</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// adding a todo</span></span><br><span class="line">track(<span class="string">&#x27;todo.add&#x27;</span>, todo.title)</span><br><span class="line">axios.post(<span class="string">&#x27;/todos&#x27;</span>, todo).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  commit(<span class="string">&#x27;ADD_TODO&#x27;</span>, todo)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// removing a todo</span></span><br><span class="line">track(<span class="string">&#x27;todo.remove&#x27;</span>, todo.title)</span><br><span class="line">axios.delete(<span class="string">`/todos/<span class="subst">$&#123;todo.id&#125;</span>`</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  commit(<span class="string">&#x27;REMOVE_TODO&#x27;</span>, todo)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>How do we test the analytics calls from the Cypress test?</p><blockquote class="pullquote"><p><strong>Important:</strong> if you want the function to be stubbable, declare it as a property on the window object like <code>window.track = () =&gt; {...}</code> or <code>window.track = function () {...}</code>. Do NOT simply declare a global function like <code>function track () {...}</code>, since the global function would simply clash with our <code>Object.defineProperty</code> variable with the same name. See the <a href="https://github.com/cypress-io/cypress/discussions/15694">issue #15694</a> for example.</p></blockquote><h2><span id="stub-the-method-after-the-visit">Stub the method after the visit</span></h2><p>You can see me explaining how to stub the <code>window.track</code> after the page visit to track <code>todo.add</code> and <code>todo.remove</code> events in the video below</p><center><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/eOEDCmqpMjE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>The final test code is below:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="keyword">import</span> &#123; enterTodo, resetData, removeTodo &#125; <span class="keyword">from</span> <span class="string">&#x27;../support/utils&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Stubbing window.track&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  beforeEach(resetData)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;tracks added and removed todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>).then(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;track&#x27;</span>).as(<span class="string">&#x27;track&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    enterTodo(<span class="string">&#x27;write tests&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;@track&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.been.calledOnceWithExactly&#x27;</span>, <span class="string">&#x27;todo.add&#x27;</span>, <span class="string">&#x27;write tests&#x27;</span>)</span><br><span class="line">      .invoke(<span class="string">&#x27;reset&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    removeTodo(<span class="string">&#x27;write tests&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;@track&#x27;</span>).should(</span><br><span class="line">      <span class="string">&#x27;have.been.calledOnceWithExactly&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;todo.remove&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;write tests&#x27;</span></span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2><span id="testing-windowload-call">Testing window.load call</span></h2><p>If we want to test that the <code>window.load</code> call happens, we have to stub the method <code>window.track</code> <em>before</em> the application calls it. We can use the <code>cy.visit onBeforeLoad</code> callback for this. It executes when the <code>window</code> object has been created, but the application code has not executed yet.</p><p>You can watch the video below</p><center><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/tkpz20haiCA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>And see the finished code below</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="keyword">import</span> &#123; resetData &#125; <span class="keyword">from</span> <span class="string">&#x27;../support/utils&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Stubbing window.track&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  beforeEach(resetData)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;tracks page load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">      <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(win, <span class="string">&#x27;track&#x27;</span>, &#123;</span><br><span class="line">          <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> cy.stub().as(<span class="string">&#x27;track&#x27;</span>)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function"><span class="title">set</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.get(<span class="string">&#x27;@track&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnceWithExactly&#x27;</span>, <span class="string">&#x27;window.load&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    cy.reload()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="stub-every-widow">Stub every widow</span></h2><p>If the browser navigates to a different page, or even simply reloads the current page, the <code>window</code> object is recreated, removing our stub. Thus we need to recreate the stub every time a new <code>window</code> object is created and before the application code is loaded. We can do this by using the <code>cy.on</code> event callback:</p><center><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/wkcot8eOcvs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>The finished code is below:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;tracks page load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> track = cy.stub().as(<span class="string">&#x27;track&#x27;</span>)</span><br><span class="line">  cy.on(<span class="string">&#x27;window:before:load&#x27;</span>, <span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(win, <span class="string">&#x27;track&#x27;</span>, &#123;</span><br><span class="line">      <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> track</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">set</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;@track&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnceWithExactly&#x27;</span>, <span class="string">&#x27;window.load&#x27;</span>)</span><br><span class="line">  cy.reload()</span><br><span class="line">  cy.get(<span class="string">&#x27;@track&#x27;</span>).should(<span class="string">&#x27;have.been.calledTwice&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/stub-window-open/" title="Stub window.open">Stub window.open</a> blog post</li><li>Guide <a href="https://on.cypress.io/stubs-spies-and-clocks">Stubs, Spies, and Clocks</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#the-analytics-method-windowtrack&quot;&gt;The analytics method window.track&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#stub-the-method-a
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Fast Cypress spec bundling using ESBuild</title>
    <link href="https://glebbahmutov.com/blog/fast-esbuild/"/>
    <id>https://glebbahmutov.com/blog/fast-esbuild/</id>
    <published>2021-03-30T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.277Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#cypress-webpack-bundler">Cypress Webpack bundler</a></li><li><a href="#esbuild">ESBuild</a></li><li><a href="#esbuild-file-preprocessor">ESBuild file preprocessor</a></li></ul><!-- tocstop --><h2><span id="cypress-webpack-bundler">Cypress Webpack bundler</span></h2><p>By default, Cypress bundles the spec files using the built-in preprocessor that uses Webpack under the hood. I wanted to see how long it takes to bundle average spec files in the <a href="http://github.com/cypress-io/cypress-example-todomvc">cypress-io/cypress-example-todomvc</a> application. Unfortunately, the preprocessor does not expose the timings directly, but we can always <a href="https://on.cypress.io/troubleshooting#Edit-the-installed-Cypress-code">hack on Cypress code</a> right in the binary.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npx cypress info</span><br><span class="line">...</span><br><span class="line">Binary Caches: &#x2F;Users&#x2F;gleb&#x2F;Library&#x2F;Caches&#x2F;Cypress</span><br><span class="line"></span><br><span class="line">Cypress Version: 6.7.1</span><br></pre></td></tr></table></figure><p>Next, I open the file in that binary cache folder that serves the spec files to the browser. In this case it is the file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;Users&#x2F;gleb&#x2F;Library&#x2F;Caches&#x2F;Cypress&#x2F;6.7.1&#x2F;Cypress.app&#x2F;Contents&#x2F;Resources&#x2F;app&#x2F;packages&#x2F;server&#x2F;lib&#x2F;controllers&#x2F;spec.js</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> this is the transpiled file, you can find the original in <a href="https://github.com/cypress-io/cypress/tree/develop/packages/server/lib/controllers">Cypress repo</a></p><p>The <code>controllers/spec.js</code> uses the <a href="https://github.com/visionmedia/debug#readme">debug module</a> to print the debug messages</p><figure class="highlight js"><figcaption><span>server/lib/controllers/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">&#x27;debug&#x27;</span>)(<span class="string">&#x27;cypress:server:controllers:spec&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> most source files in Cypress Test Runner use <code>debug</code> to print debug messages, allowing you to peek under the hood. Find some common log sources in the <a href="https://on.cypress.io/troubleshooting#Log-sources">docs</a>.</p><p>I have inserted a few additional debug statements to measure how long the preprocessor takes to bundle the spec file.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">&#x27;debug&#x27;</span>)(<span class="string">&#x27;cypress:server:controllers:spec&#x27;</span>)</span><br><span class="line"><span class="comment">// built-in Cypress file bundler, uses Webpack</span></span><br><span class="line"><span class="keyword">const</span> preprocessor = <span class="built_in">require</span>(<span class="string">&#x27;../plugins/preprocessor&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// by filename</span></span><br><span class="line"><span class="keyword">const</span> starts = &#123;&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  handle (spec, req, res, config, next, onError) &#123;</span><br><span class="line">    debug(<span class="string">&#x27;request for %o&#x27;</span>, &#123; spec &#125;)</span><br><span class="line">    starts[spec] = + <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="comment">// bundle the given spec file</span></span><br><span class="line">    <span class="keyword">return</span> preprocessor</span><br><span class="line">    .getFile(spec, config)</span><br><span class="line">      .then(<span class="function">(<span class="params">filePath</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> ended = + <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">        <span class="keyword">const</span> elapsed = ended - starts[spec]</span><br><span class="line">        debug(<span class="string">&#x27;sending spec %o after %d ms&#x27;</span>, &#123; filePath &#125;, elapsed)</span><br><span class="line">        <span class="keyword">const</span> sendFile = <span class="built_in">Promise</span>.promisify(res.sendFile.bind(res))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sendFile(filePath)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s run the tests in using <a href="https://on.cypress.io/command-line#cypress-run"><code>cypress run</code> command</a>. During the execution the spec and the support files are each bundled just once. It is a cold start - Cypress does not store or load any bundling information to speed things up.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ DEBUG&#x3D;cypress:server:controllers:spec npm run test:ci</span><br><span class="line"></span><br><span class="line">Running:  app_spec.js                                                                     (1 of 1)</span><br><span class="line">cypress:server:controllers:spec request for &#123; spec: &#39;cypress&#x2F;support&#x2F;index.js&#39; &#125; +0ms</span><br><span class="line">cypress:server:controllers:spec request for &#123; spec: &#39;cypress&#x2F;integration&#x2F;app_spec.js&#39; &#125; +3ms</span><br><span class="line">cypress:server:controllers:spec sending spec &#123;</span><br><span class="line">  filePath: &#39;&#x2F;Users&#x2F;gleb&#x2F;Library&#x2F;Application Support&#x2F;Cypress&#x2F;cy&#x2F;production&#x2F;projects&#x2F;</span><br><span class="line">  cypress-example-todomvc-411ba7b931279226890f4fef43e9d6c5&#x2F;bundles&#x2F;cypress&#x2F;integration&#x2F;app_spec.js&#39; &#125;</span><br><span class="line">  after 1143 ms +1s</span><br><span class="line">cypress:server:controllers:spec sending spec &#123;</span><br><span class="line">  filePath: &#39;&#x2F;Users&#x2F;gleb&#x2F;Library&#x2F;Application Support&#x2F;Cypress&#x2F;cy&#x2F;production&#x2F;projects&#x2F;</span><br><span class="line">  cypress-example-todomvc-411ba7b931279226890f4fef43e9d6c5&#x2F;bundles&#x2F;cypress&#x2F;support&#x2F;index.js&#39; &#125;</span><br><span class="line">  after 1702 ms +557ms</span><br></pre></td></tr></table></figure><p>I have run the same command 3 times on my Mac to get the following timings:</p><table><thead><tr><th>Support file (ms)</th><th>Spec file (ms)</th></tr></thead><tbody><tr><td>1702</td><td>1143</td></tr><tr><td>1708</td><td>1178</td></tr><tr><td>1715</td><td>1171</td></tr></tbody></table><p>Ok, so about 1700ms to bundle the support file and 1100ms to bundle the spec file.</p><p>We can look at the files we are bundling. The support file only imports two other modules:</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./commands&#x27;</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;cypress-axe&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The <code>commands.js</code> file only defines 3 custom commands:</p><figure class="highlight js"><figcaption><span>cypress/support/commands.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cypress.Commands.add(<span class="string">&#x27;createDefaultTodos&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;)</span><br><span class="line">Cypress.Commands.add(<span class="string">&#x27;createTodo&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">todo</span>) </span>&#123; ... &#125;)</span><br><span class="line">Cypress.Commands.add(<span class="string">&#x27;addAxeCode&#x27;</span>, <span class="function">() =&gt;</span> &#123; ... &#125;)</span><br></pre></td></tr></table></figure><p>The support is pretty much just bundling the <a href="https://github.com/component-driven/cypress-axe">cypress-axe</a> NPM module.</p><p>The spec file has no imports, it is a single standalone JavaScript spec file.</p><h2><span id="esbuild">ESBuild</span></h2><p>The <a href="https://esbuild.github.io/">ESBuild</a> is the new bundler that uses an optimized binary bundler. Let&#39;s see how fast it is.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D esbuild</span><br><span class="line">+ esbuild@0.9.3</span><br></pre></td></tr></table></figure><p>We can bundle the files from the command line</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ npx esbuild cypress&#x2F;support&#x2F;index.js --bundle --outfile&#x3D;out.js</span><br><span class="line"></span><br><span class="line">  out.js  994.9kb</span><br><span class="line"></span><br><span class="line">⚡ Done in 93ms</span><br><span class="line"></span><br><span class="line">$ npx esbuild cypress&#x2F;integration&#x2F;app_spec.js --bundle --outfile&#x3D;out.js</span><br><span class="line"></span><br><span class="line">  out.js  11.7kb</span><br><span class="line"></span><br><span class="line">⚡ Done in 4ms</span><br></pre></td></tr></table></figure><p>Wow. Ok. Can we use the <code>esbuild</code> bundler from Cypress?</p><h2><span id="esbuild-file-preprocessor">ESBuild file preprocessor</span></h2><p>ESBuild has good <a href="https://esbuild.github.io/api/">JavaScript API</a> which we can use to write our own file preprocessor. You can find my NPM module in <a href="https://github.com/bahmutov/cypress-esbuild-preprocessor">bahmutov/cypress-esbuild-preprocessor</a> repo and install via NPM</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D @bahmutov&#x2F;cypress-esbuild-preprocessor</span><br><span class="line">+ @bahmutov&#x2F;cypress-esbuild-preprocessor@1.1.1</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> <code>esbuild</code> is a peer dependency.</p><p>For example to build the spec file, the preprocessor does the following:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> esbuild = <span class="built_in">require</span>(<span class="string">&#x27;esbuild&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">&#x27;debug&#x27;</span>)(<span class="string">&#x27;cypress-esbuild-preprocessor&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// bundled[filename] =&gt; promise</span></span><br><span class="line"><span class="keyword">const</span> bundled = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bundleOnce = <span class="function">(<span class="params">&#123; filePath, outputPath &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> started = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"></span><br><span class="line">  esbuild.buildSync(&#123;</span><br><span class="line">    entryPoints: [filePath],</span><br><span class="line">    outfile: outputPath,</span><br><span class="line">    bundle: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> finished = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  <span class="keyword">const</span> elapsed = finished - started</span><br><span class="line">  debug(<span class="string">&#x27;bundling %s took %dms&#x27;</span>, filePath, elapsed)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filePreprocessor = <span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; filePath, outputPath, shouldWatch &#125; = file</span><br><span class="line"></span><br><span class="line">  debug(&#123; filePath, outputPath, shouldWatch &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!shouldWatch) &#123;</span><br><span class="line">    bundleOnce(&#123; filePath, outputPath &#125;)</span><br><span class="line">    <span class="keyword">return</span> outputPath</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// watch mode</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can point Cypress to use the above preprocessor</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// `on` is used to hook into various events Cypress emits</span></span><br><span class="line">  <span class="comment">// `config` is the resolved Cypress config</span></span><br><span class="line">  on(<span class="string">&#x27;file:preprocessor&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;@bahmutov/cypress-esbuild-preprocessor&#x27;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>My preprocessor includes timing, thus we can directly see the bundling performance</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ DEBUG&#x3D;cypress-esbuild-preprocessor npm run test:ci</span><br><span class="line"></span><br><span class="line">  Running:  app_spec.js                                                                     (1 of 1)</span><br><span class="line">  cypress-esbuild-preprocessor bundling &#x2F;Users&#x2F;gleb&#x2F;git&#x2F;cypress-example-todomvc&#x2F;cypress&#x2F;integration&#x2F;app_spec.js</span><br><span class="line">  took 22ms +24ms</span><br><span class="line">  cypress-esbuild-preprocessor bundling &#x2F;Users&#x2F;gleb&#x2F;git&#x2F;cypress-example-todomvc&#x2F;cypress&#x2F;support&#x2F;index.js</span><br><span class="line">  took 104ms +104ms</span><br></pre></td></tr></table></figure><p>I ran the test three times, and here are the timings</p><table><thead><tr><th>Support file (ms)</th><th>Spec file (ms)</th></tr></thead><tbody><tr><td>104</td><td>22</td></tr><tr><td>104</td><td>22</td></tr><tr><td>101</td><td>22</td></tr></tbody></table><p>That&#39;s pretty strong statement: the ESBuild preprocessor is 17 times faster in bundling the support file and 50 (fifty!) times faster in bundling the spec file.</p><p>I am pretty impressed.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#cypress-webpack-bundler&quot;&gt;Cypress Webpack bundler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#esbuild&quot;&gt;ESBuild&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a hre
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="performance" scheme="https://glebbahmutov.com/blog/tags/performance/"/>
    
  </entry>
  
  <entry>
    <title>Stub window.open</title>
    <link href="https://glebbahmutov.com/blog/stub-window-open/"/>
    <id>https://glebbahmutov.com/blog/stub-window-open/</id>
    <published>2021-03-27T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.358Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#stub-windowopen">Stub <code>window.open</code></a><ul><li><a href="#motivation">Motivation</a></li><li><a href="#stubbing-an-objects-method">Stubbing an object&#39;s method</a></li></ul></li><li><a href="#when-window-changes">When window changes</a></li><li><a href="#cyon-vs-cypresson">cy.on vs Cypress.on</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><h2><span id="stub-windowopen">Stub <code>window.open</code></span></h2><h3><span id="motivation">Motivation</span></h3><p>If an application calls <code>window.open</code> during Cypress test it might lead to two problems:</p><ul><li>the new URL might point at a different domain, rendering Cypress &quot;blind&quot; and unable to continue the test</li><li>the new URL might open in the second tab, invisible to Cypress</li></ul><h3><span id="stubbing-an-object39s-method">Stubbing an object&#39;s method</span></h3><p>In order to stub (replace) an object&#39;s method we need three things:</p><ul><li>a reference to the object</li><li>method&#39;s name</li><li>we also have to register the stub before the application calls the method we are replacing</li></ul><blockquote class="pullquote"><p>🖥 I explain how the commands <a href="https://on.cypress.io/spy">cy.spy</a> and <a href="https://on.cypress.io/stub">cy.stub</a> work at the start of the presentation <a href="https://slides.com/bahmutov/how-cy-intercept-works#/2">How <code>cy.intercept</code> works</a>.</p></blockquote><p>Luckily for us stubbing the <code>window.open</code> satisfies all the criteria easily</p><ul><li>the command <a href="https://on.cypress.io/window">cy.window</a> gets the reference to the application&#39;s <code>window</code> object</li><li>the method&#39;s name is <code>open</code></li><li>we can use <code>onBeforeLoad</code> callback in the <a href="https://on.cypress.io/visit">cy.visit</a> to stub the <code>window.open</code> method. This callback runs when the <code>window</code> object is ready, but before any application code runs</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;opens a new window&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    onBeforeLoad (win) &#123;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;open&#x27;</span>).as(<span class="string">&#x27;open&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// triggers the application to call window.open</span></span><br><span class="line">  cy.click(<span class="string">&#x27;Open new window&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;@open&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="when-window-changes">When window changes</span></h2><p>If the application navigates to a new page or even reloads, the old <code>window</code> object is destroyed and the new <code>window</code> object is created. Thus our <code>window.open</code> stub can &quot;disappear&quot;: the application calls <code>window.open</code>, but the stub does not intercept the new calls.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 🚨 SHOWING THE PROBLEM</span></span><br><span class="line">it(<span class="string">&#x27;opens a new window&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    onBeforeLoad (win) &#123;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;open&#x27;</span>).as(<span class="string">&#x27;open&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// triggers the application to call window.open</span></span><br><span class="line">  cy.click(<span class="string">&#x27;Open new window&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;@open&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// cause the window to be recreated</span></span><br><span class="line">  cy.reload()</span><br><span class="line">  cy.click(<span class="string">&#x27;Open new window&#x27;</span>)</span><br><span class="line">  <span class="comment">// THE PROBLEM: the stub does not &quot;see&quot;</span></span><br><span class="line">  <span class="comment">// second the window.open call</span></span><br><span class="line">  cy.get(<span class="string">&#x27;@open&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We need to register <code>window.open</code> stub for <em>every</em> window object created during the test. We can use <a href="https://on.cypress.io/catalog-of-events"><code>cy.on(&#39;window:before:load&#39;)</code> event</a>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✅ CORRECT SOLUTION</span></span><br><span class="line">it(<span class="string">&#x27;opens a new window&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// create a single stub we will use</span></span><br><span class="line">  <span class="keyword">const</span> stub = cy.stub().as(<span class="string">&#x27;open&#x27;</span>)</span><br><span class="line">  cy.on(<span class="string">&#x27;window:before:load&#x27;</span>, <span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.stub(win, <span class="string">&#x27;open&#x27;</span>).callsFake(stub)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// triggers the application to call window.open</span></span><br><span class="line">  cy.click(<span class="string">&#x27;Open new window&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;@open&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// cause the window to be recreated</span></span><br><span class="line">  cy.reload()</span><br><span class="line">  cy.click(<span class="string">&#x27;Open new window&#x27;</span>)</span><br><span class="line">  <span class="comment">// all window.open calls are correctly forwarded to our stub</span></span><br><span class="line">  cy.get(<span class="string">&#x27;@open&#x27;</span>).should(<span class="string">&#x27;have.been.calledTwice&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test correctly prevents <code>window.open</code> from causing problems when the application reloads or navigates to another page.</p><h2><span id="cyon-vs-cypresson">cy.on vs Cypress.on</span></h2><p>We have used <code>cy.on(&#39;window:before:load&#39;)</code> to register our stub. We could have used <code>Cypress.on(&#39;window:before:load&#39;)</code>, but then we could not use the <code>cy.stub</code> command inside the callback - <code>Cypress.on</code> runs outside a test context and thus cannot use any <code>cy.</code> commands. It is often used to perform general application actions. For example we could remove <code>window.fetch</code> method from every window object</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Cypress.on(<span class="string">&#x27;window:before:load&#x27;</span>, <span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// test how the application handles</span></span><br><span class="line">  <span class="comment">// older browsers without fetch support</span></span><br><span class="line">  <span class="keyword">delete</span> <span class="built_in">window</span>.fetch</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>In our <code>window.open</code> case we can bypass the problem. We can return the same stub for every window, we just have to return the variable prepared by the test via <a href="/blog/javascript-closures/" title="closure scope">closure scope</a>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// variable that will hold cy.stub created in the test</span></span><br><span class="line"><span class="keyword">let</span> stub</span><br><span class="line"></span><br><span class="line">Cypress.on(<span class="string">&#x27;window:before:load&#x27;</span>, <span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// if the test has prepared a stub</span></span><br><span class="line">  <span class="keyword">if</span> (stub) &#123;</span><br><span class="line">    <span class="comment">// the stub function is ready</span></span><br><span class="line">    <span class="comment">// always returns it when the application</span></span><br><span class="line">    <span class="comment">// is trying to use &quot;window.open&quot;</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(win, <span class="string">&#x27;open&#x27;</span>, &#123;</span><br><span class="line">      <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stub</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// let the test create the stub if it needs it</span></span><br><span class="line">  stub = <span class="literal">null</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;works&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// note: cy.stub returns a function</span></span><br><span class="line">  stub = cy.stub().as(<span class="string">&#x27;open&#x27;</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// triggers the application to call window.open</span></span><br><span class="line">  cy.click(<span class="string">&#x27;Open new window&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;@open&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// cause the window to be recreated</span></span><br><span class="line">  cy.reload()</span><br><span class="line">  cy.click(<span class="string">&#x27;Open new window&#x27;</span>)</span><br><span class="line">  <span class="comment">// all window.open calls are correctly forwarded to our stub</span></span><br><span class="line">  cy.get(<span class="string">&#x27;@open&#x27;</span>).should(<span class="string">&#x27;have.been.calledTwice&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> you can reset a spy or a stub by invoking its <code>reset()</code> method</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// triggers the application to call window.open</span></span><br><span class="line">cy.click(<span class="string">&#x27;Open new window&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;@open&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">  .invoke(<span class="string">&#x27;reset&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// the stub was reset and started from zero</span></span><br><span class="line">cy.reload()</span><br><span class="line">cy.click(<span class="string">&#x27;Open new window&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;@open&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br></pre></td></tr></table></figure><h2><span id="see-also">See also</span></h2><p>I have described in detail how to deal with anchor links and <code>window.open</code> in two sections in the blog post <a href="/blog/cypress-tips-and-tricks/" title="Cypress Tips and Tricks">Cypress Tips and Tricks</a>:</p><ul><li><a href="../cypress-tips-and-tricks/#deal-with-target_blank">Deal with <code>target=_blank</code></a></li><li>I strongly recommend reading <a href="../cypress-tips-and-tricks/#deal-with-windowopen">Deal with <code>window.open</code></a></li></ul><p>There is also more documentation and examples available at:</p><ul><li><a href="https://sinonjs.org/">Sinon.js</a></li><li>Cypress guide to <a href="https://on.cypress.io/stubs-spies-and-clocks">Stubs, Spies, and Clocks</a></li><li><a href="https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html"><code>cy.stub</code> and <code>cy.spy</code> examples</a></li></ul><p>You can also read about and practice with <code>cy.stub</code> in the section of the <a href="https://github.com/cypress-io/testing-workshop-cypress#stubbing-methods">Cypress Testing Workshop</a></p><p>See the blog post <a href="/blog/stub-window-track/" title="Stub window.track">Stub window.track</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#stub-windowopen&quot;&gt;Stub &lt;code&gt;window.open&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#motivation&quot;&gt;Motivation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Same Data = Same Page</title>
    <link href="https://glebbahmutov.com/blog/same-data-same-page/"/>
    <id>https://glebbahmutov.com/blog/same-data-same-page/</id>
    <published>2021-03-20T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.344Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I have built a &quot;Vote for the next topic&quot; page for my <a href="https://cypress.tips">cypress.tips</a> site where you can rank the topics for my next Cypress-related <a href="../tags/cypress/">blog post</a> or <a href="https://www.youtube.com/glebbahmutov">video</a>.</p><p><img src="../images/same-data/vote.png" alt="The vote choices without styling"></p><p><strong>Tip:</strong> the vote calculation is done using <a href="https://github.com/bahmutov/borda-count">Borda count</a> NPM module. It is a simple points-based system: when there are N choices, the first choice gets N - 1 points, the second choice gets N - 2 points, and so on.</p><p>To prevent any bias, the list is randomly sorted. My Next.js page randomizes the topics like this</p><figure class="highlight js"><figcaption><span>pages/vote.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> topics = &#123;</span><br><span class="line">  <span class="string">&#x27;npm-alias&#x27;</span>: <span class="string">&#x27;Useful NPM alias commands for running the app and the tests&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;connect-to-db&#x27;</span>: <span class="string">&#x27;Connecting to the database from the plugin file&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;crawl-links&#x27;</span>: <span class="string">&#x27;Crawling site links checking for invalid URLs&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;cy-log-tips&#x27;</span>: <span class="string">&#x27;Tips for using &quot;cy.log&quot; command&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;doom-fixtures&#x27;</span>: <span class="string">&#x27;How to avoid a pyramid of doom when loading fixtures&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> randomizeTopics = <span class="function">(<span class="params">topics</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> shuffle(topics)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">VotePage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// only logged in users can vote</span></span><br><span class="line">  <span class="keyword">const</span> [session, loading] = useSession()</span><br><span class="line">  <span class="keyword">if</span> (!session) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">VoteAccessDenied</span> /&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> randomizedTopics = randomizeTopics(topics)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">      &#123;<span class="built_in">Object</span>.keys(randomizedTopics).map(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> topic = randomizedTopics[key]</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          &lt;tr key=&#123;key&#125;&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">              &lt;input type=<span class="string">&quot;number&quot;</span> name=&#123;key&#125; min=<span class="string">&quot;1&quot;</span> max=<span class="string">&quot;5&quot;</span> /&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&#123;topic&#125;&lt;/td&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">        )</span><br><span class="line">      &#125;)&#125;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Everything looks right, except for the generated page. It does show the topics in the random order, but there is a weird &quot;double&quot; shuffle on load.</p><p><img src="../images/same-data/double-shuffle.gif" alt="Double shuffle on load"></p><p>Weird. Let&#39;s open the DevTools console. It shows an error.</p><p><img src="../images/same-data/error.png" alt="Vote page console error"></p><p>What is going on here?</p><p>The Next.js generates pre-rendered page, you can see it in the browser or by fetching it from the command line using <a href="https://httpie.io/">httpie</a></p><p><img src="../images/same-data/server-page.png" alt="HTML page returned from the server"></p><p>The server ran the page JSX code, got the shuffled topics with &quot;Crawl sites ...&quot; at the first place and rendered the HTML. When the browser loads this page, it renders <code>&lt;TR&gt;&lt;TD&gt;Craw sites ...&lt;/TD&gt;&lt;/TR&gt;</code> and then Next.js starts running. It calls the <code>VotePage</code> function, which returns live React component ... which calls <code>const randomizedTopics = randomizeTopics(topics)</code> and generates a <em>different order</em> of topics, causing the client page to reshuffle. The rendering even catches the difference during rendering, warning us that the server and the client pages did not match.</p><p>Our server-side page was rendered from <code>randomizeTopics(topics)</code> and the client-side page was rendered from another call to <code>randomizeTopics(topics)</code>, causing the mismatch.</p><blockquote class="pullquote"><p>📝 Want to see more examples of hydration and how to implement it yourself? Read my <a href="/blog/hydrate-your-apps/" title="Hydrate your apps">Hydrate your apps</a> and <a href="/blog/hydrate-at-build-time/" title="Hydrate at build time">Hydrate at build time</a> posts.</p></blockquote><p>If the <code>randomizeTopics</code> returned the topics in the same order, the server and the client pages would have the same HTML and there would be no problem. The static page from the server would be hydrated without the user noticing. So to solve our shuffle problem we need to ... move data generation so it happens only once on the server. For Next.js this can be done inside the <a href="https://nextjs.org/docs/basic-features/data-fetching">getServerSideProps</a> callback that every page can set up. In my case this function already was setting up the session, I just needed to add one more property to return.</p><figure class="highlight js"><figcaption><span>pages/vote.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getServerSideProps</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// an array of [key, description]</span></span><br><span class="line">  <span class="keyword">const</span> randomizedTopics = randomizeTopics(topics)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      randomizedTopics,</span><br><span class="line">      session: <span class="keyword">await</span> getSession(context),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>props</code> are then passed to the page component</p><figure class="highlight js"><figcaption><span>pages/vote.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">VotePage</span>(<span class="params">&#123; randomizedTopics &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// render randomizedTopics</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The final page is all good: no weird artifacts on load, no console errors, and has ok styles.</p><p><img src="../images/same-data/fixed-shuffle.gif" alt="The page with fixed shuffle"></p><p>The lesson: if you want to generate the same page, you have to have the same data.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently I have built a &amp;quot;Vote for the next topic&amp;quot; page for my &lt;a href=&quot;https://cypress.tips&quot;&gt;cypress.tips&lt;/a&gt; site where you ca
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="react" scheme="https://glebbahmutov.com/blog/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Green Investing</title>
    <link href="https://glebbahmutov.com/blog/green-investing/"/>
    <id>https://glebbahmutov.com/blog/green-investing/</id>
    <published>2021-03-16T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.286Z</updated>
    
    <content type="html"><![CDATA[<p>Money talks and money matters. Thus how we invest money matters for the climate crisis.</p><h2><span id="do-no-harm">Do no harm</span></h2><p>Thus I stopped using and doing business with the companies that finance the planet&#39;s destruction: Bank of America, Chase, Liberty Mutual. You can read about it in <a href="/blog/stop-the-money-pipeline/" title="Stop The Money Pipeline">Stop The Money Pipeline</a>.</p><h2><span id="invest-in-green">Invest in green</span></h2><p>Second, invest in the green economy. In the next 20-40 years the world has to stop using all fossil fuels in favor of renewables (of course, I want something faster, like 10 years to avoid chance of the catastrophic collapse, but let&#39;s not dwell on it for now). This means, the fossil industries that are already on shaky grounds will die. There is no other way - either Aramco, Shell, BP, Total, Gazprom, etc make money, or the planet survives.</p><p>The above companies are already living on borrowed time though. Their products <em>are more expensive</em> for producing electricity today, and the only way the can still keep going is through the political inertia and bribery. There is no technical obstacles to prevent the renewables from completely misplacing the fossils in the nearest future. And with the coming <a href="http://energyinnovationact.com/">carbon fees</a> the fossil producers are going to be bankrupt.</p><p>Meanwhile, this means that in the next 20-40 years (and probably faster) we need to expand the clean electricity production and transmission 5-20 times. Which is huge, and is an enormous investment opportunity. Which is why I went through a list of ETFs and picked a few that invest in the companies that make wind mills, solar farms, etc. By using ETFs I spread the risk of the investment - I don&#39;t want to pick the individual stocks, I want to invest in the entire sector.</p><h2><span id="show-me-the-tickers">Show me the tickers</span></h2><p>Here are my picks for small long-term investments:</p><ul><li><a href="https://www.etf.com/ETHO#overview">ETHO</a> selects U.S. equities of companies that exhibit the least carbon impact within its industry, with an equal weight to each selected company.</li><li><a href="https://www.etf.com/PBW#overview">PBW</a> are stocks of publicly traded companies in the United States that are engaged in the business of the advancement of cleaner energy and conservation.</li><li><a href="https://www.etf.com/TAN#overview">TAN</a> includes solar energy players.</li><li><a href="https://www.etf.com/FAN#overview">FAN</a> has the wind energy and technology companies</li><li><a href="https://www.etf.com/PZD#overview">PZD</a> &quot;clean-tech&quot; ETF designed to target companies that derive the majority of their revenue from products or services that are environmentally conscious.</li><li><a href="https://www.etf.com/PHO#overview">PHO</a> are water companies and utilities</li></ul><p>Aside: I love the ticker names like &quot;TAN&quot; for solar companies and &quot;FAN&quot; for wind companies.</p><p>The way I see it, the above sector either grows 10-20 times in the near future or we all die, in that case money does not matter.</p><p>Sources of information:</p><ul><li><a href="https://fossilfreefunds.org/">Fossil Free Funds</a></li><li><a href="https://money.usnews.com/investing/funds/slideshows/great-etfs-to-invest-in-climate-change">7 Great ETFs to Invest in Climate Change</a></li></ul><h2><span id="where-is-nuclear">Where is nuclear?</span></h2><p>I do not think the nuclear energy makes much sense to invest in. It is more expensive than renewables in producing electricity, and we do not have a way to handle the waste yet. The question of energy storage is solved or going to be solved depending on how you look at it; the battery technology is improving drastically every year,</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Money talks and money matters. Thus how we invest money matters for the climate crisis.&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;do-no-harm&quot;&gt;Do no harm&lt;/span&gt;&lt;/
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="climate" scheme="https://glebbahmutov.com/blog/tags/climate/"/>
    
  </entry>
  
  <entry>
    <title>How I Organize my NPM Scripts</title>
    <link href="https://glebbahmutov.com/blog/organize-npm-scripts/"/>
    <id>https://glebbahmutov.com/blog/organize-npm-scripts/</id>
    <published>2021-03-11T05:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.317Z</updated>
    
    <content type="html"><![CDATA[<p>In the web applications I come across or write myself I typically have a few scripts to build and start the application. This blog post describes the scripts and how I run them every day.</p><!-- toc --><ul><li><a href="#scripts-names">Scripts names</a></li><li><a href="#start-and-test">Start and test</a></li><li><a href="#the-ci-script">The CI script</a></li><li><a href="#quick-run">Quick run</a><ul><li><a href="#stop-dot">Stop dot</a></li></ul></li></ul><!-- tocstop --><h2><span id="scripts-names">Scripts names</span></h2><p>Typically and application needs to be built and served or started. For example in <a href="https://github.com/bahmutov/cypress-example-forms">bahmutov/cypress-example-forms</a> web application we have these three scripts at the start:</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;prettier --write &#x27;cypress/**/*.js&#x27;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;parcel serve index.html&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;parcel build index.html&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you are inside the project&#39;s folder, you can see all available scripts by executing <code>npm run</code> command</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ npm run</span><br><span class="line">Lifecycle scripts included in cypress-example-forms:</span><br><span class="line">  start</span><br><span class="line">    parcel serve index.html</span><br><span class="line"></span><br><span class="line">available via &#96;npm run-script&#96;:</span><br><span class="line">  format</span><br><span class="line">    prettier --write &#39;cypress&#x2F;**&#x2F;*.js&#39;</span><br><span class="line">  build</span><br><span class="line">    parcel build index.html</span><br></pre></td></tr></table></figure><p>If we want to format our code, we can use</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run-script format</span><br></pre></td></tr></table></figure><p>The <code>run-script</code> has an alias <code>run</code>, thus we can execute the scripts by running simply <code>npm run &lt;script name&gt;</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm run format</span><br><span class="line">## the start command is special, you can skip the &quot;run&quot; word</span><br><span class="line">$ npm start</span><br></pre></td></tr></table></figure><p>When using Yarn we can usually skip even the &quot;run&quot; command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yarn run build</span><br><span class="line">## is the same as</span><br><span class="line">$ yarn build</span><br></pre></td></tr></table></figure><p>Later we add Cypress end-to-end tests and thus need to add two more scripts for running Cypress interactively and on CI.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;prettier --write &#x27;cypress/**/*.js&#x27;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;parcel serve index.html&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;parcel build index.html&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cy:open&quot;</span>: <span class="string">&quot;cypress open&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cy:run&quot;</span>: <span class="string">&quot;cypress run&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> for my personal projects I prefer the short &quot;cy:open&quot; and &quot;cy:run&quot; script names. When sharing projects with others I prefer the explicit &quot;cypress:open&quot; and &quot;cypress:run&quot; script names.</p><p>Watch the script organization video below</p><center><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/jJLMZ8k85OA" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="start-and-test">Start and test</span></h2><p>Right now to work on Cypress tests we need to start the application and then use the second terminal to execute <code>npm run cy:open</code> command. When we are done with testing, we would close the Cypress Test Runner, switch back to the first terminal and stop the app.</p><p>We can do it all using a single command by using <a href="https://github.com/bahmutov/start-server-and-test">start-server-and-test</a> utility. Install it as a dev dependency with <code>npm i -D start-server-and-test</code> or <code>yarn add -D start-server-and-test</code> and then add a new script. For example, I would like to develop the application which means starting it and starting Cypress. Thus I would add <code>dev</code> script:</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;prettier --write &#x27;cypress/**/*.js&#x27;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;parcel serve index.html&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;parcel build index.html&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cy:open&quot;</span>: <span class="string">&quot;cypress open&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cy:run&quot;</span>: <span class="string">&quot;cypress run&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;start-test-and-test start 1234 cy:open&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Thus I can simply use <code>npm run dev</code> to do my local development. The script itself refers to other NPM scripts: it runs <code>npm start</code> in the background to start the app. The <code>1234</code> in the script refers to the port number - the utility <code>start-server-and-test</code> waits for this local port to respond. Once the <code>localhost:1234</code> responds, it runs <code>npm run cy:open</code>. When I close Cypress, the utility automatically stops my application.</p><p>The utility registers two aliases in the <code>node_modules/.bin</code> folder: <code>start-test-and-test</code> and <code>start-test</code>. Thus I can use shorter command name:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;start-test start 1234 cy:open&quot;</span><br></pre></td></tr></table></figure><p>Since the <code>npm start</code> command is very command, <code>start-test</code> understands it could be the default, thus we can skip it:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;start-test 1234 cy:open&quot;</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> for all options, consult the <a href="https://github.com/bahmutov/start-server-and-test#start-server-and-test">start-server-and-test README</a></p><p>If the script name <code>dev</code> is unavailable, I use something like <code>e2e</code>. For example, <a href="https://nextjs.org/">Next.js</a> typically sets the <code>dev</code> script to start the <code>next</code> command, so my scripts in <a href="https://github.com/bahmutov/next-and-cypress-example">bahmutov/next-and-cypress-example</a> uses <code>e2e</code>:</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;next&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;next build&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;next start&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;e2e&quot;</span>: <span class="string">&quot;start-test dev 3000 cy:open&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cy:open&quot;</span>: <span class="string">&quot;cypress open&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;pree2e&quot;</span>: <span class="string">&quot;rm -rf .nyc_output coverage .next || true&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;check-coverage-limits&quot;</span>: <span class="string">&quot;check-total --min 100&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="the-ci-script">The CI script</span></h2><p>Sometimes we want to simply run all the tests, without opening Cypress. Thus I typically have the second script to execute <code>cy:run</code> via <code>npm test</code> or <code>npm t</code>:</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;prettier --write &#x27;cypress/**/*.js&#x27;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;parcel serve index.html&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;parcel build index.html&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cy:open&quot;</span>: <span class="string">&quot;cypress open&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cy:run&quot;</span>: <span class="string">&quot;cypress run&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;start-test 1234 cy:open&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;start-test 1234 cy:run&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Whenever we clone the project we can install and test it:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm it</span><br><span class="line">## equivalent to</span><br><span class="line">npm install</span><br><span class="line">npm test</span><br></pre></td></tr></table></figure><p>We can use the <code>package-lock.json</code> file when doing the install</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm cit</span><br><span class="line">## equivalent to</span><br><span class="line">npm ci</span><br><span class="line">npm test</span><br></pre></td></tr></table></figure><p>Watch the &quot;start server and test&quot; in action in this video</p><center><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/6iDjbAXvLa0" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="quick-run">Quick run</span></h2><p>For larger projects, the number of scripts grows, and the average length of the script name creeps towards Icelandic volcano&#39;s name. Sometimes we get variations on the <code>cypress run</code> script: one for recording the test results, another one for running in Chrome browser, etc</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;prettier --write &#x27;cypress/**/*.js&#x27;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;parcel serve index.html&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;parcel build index.html&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cy:open&quot;</span>: <span class="string">&quot;cypress open&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cy:run&quot;</span>: <span class="string">&quot;cypress run&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cy:run:record&quot;</span>: <span class="string">&quot;cypress run --record&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cy:run:chrome&quot;</span>: <span class="string">&quot;cypress run --browser chrome&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cy:run:record:chrome&quot;</span>: <span class="string">&quot;cypress run --record --browser chrome&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;start-test 1234 cy:open&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;start-test 1234 cy:run&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To quickly run the right script I suggest using my <a href="https://github.com/bahmutov/npm-quick-run">npm-quick-run</a> utility. Install it globally with <code>npm i -g npm-quick-run</code> and then use <code>nr</code> alias to quickly run a script by its prefix:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nr d</span><br><span class="line">## same as</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>If there are multiple scripts starting with the given prefix, the <code>npm-quick-run</code> lists them and exits</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ nr cy</span><br><span class="line">running command with prefix &quot;cy&quot;</span><br><span class="line">Several scripts start with &quot;cy&quot;</span><br><span class="line">cy:open, cy:run, cy:run:record, cy:run:chrome, cy:run:record:chrome</span><br></pre></td></tr></table></figure><p>Notice that our scripts use several words separated by the <code>:</code> character (the <code>-</code> works as well). We can give the prefix for several words to find the right script. We can use <code>:</code> or <code>-</code> when calling <code>nr</code>. I personally prefer using <code>-</code> since I can type it without pressing Shift key.</p><p>For example, let&#39;s open Cypress</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nr c-o</span><br><span class="line">## finds the script &quot;cy:open&quot; and runs it</span><br></pre></td></tr></table></figure><p>Let&#39;s run tests in Chrome</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nr c-r-c</span><br><span class="line">## finds the script &quot;cy:run:chrome&quot; and runs it</span><br></pre></td></tr></table></figure><p>The <code>npm-quick-run</code> utility also passes the arguments to the script it finds. For example, we could keep our original <code>cypress run</code> script and just pass CLI arguments when needed:</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;prettier --write &#x27;cypress/**/*.js&#x27;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;parcel serve index.html&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;parcel build index.html&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cy:open&quot;</span>: <span class="string">&quot;cypress open&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cy:run&quot;</span>: <span class="string">&quot;cypress run&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;start-test 1234 cy:open&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;start-test 1234 cy:run&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## record tests</span><br><span class="line">nr c-r --record</span><br><span class="line">## record tests in Chrome</span><br><span class="line">nr c-r --record --browser chrome</span><br></pre></td></tr></table></figure><p>Watch the NPM quick run in action in the video below</p><center><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/f2uXdCOkJb0" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h3><span id="stop-dot">Stop dot</span></h3><p>The <code>npm-quick-run</code> has a little utility for handling the number of words. If you place a dot character <code>.</code> at the end of the prefix, it will only match that number of words. Consider the following <code>package.json</code> file:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;cypress&quot;</span>: <span class="string">&quot;cypress -help&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cypress:open&quot;</span>: <span class="string">&quot;cypress open&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cypress:run&quot;</span>: <span class="string">&quot;cypress run&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cypress:run:record&quot;</span>: <span class="string">&quot;cypress run --record&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In order to run &quot;cypress&quot; script use prefix with &quot;.&quot; at the end:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># same as &quot;npm run cypress&quot;</span><br><span class="line">$ nr c. # finds the script with a single word starting with &quot;c&quot;</span><br><span class="line"></span><br><span class="line"># same as &quot;npm run cypress:open&quot;</span><br><span class="line">$ nr c-o.</span><br><span class="line"></span><br><span class="line"># same as &quot;npm run cypress:run&quot;</span><br><span class="line">$ nr c-r.</span><br><span class="line"></span><br><span class="line"># these commands are equivalent</span><br><span class="line">$ npm run cypress:run:record</span><br><span class="line">$ yarn cypress:run:record</span><br><span class="line">$ nr c-r-r</span><br><span class="line">$ nr c-r-r.</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>Why did I typically use <code>-</code> and <code>.</code> characters to split the words and stop the match? Because I can type them without pressing the Shift key 🥳</p></blockquote><p>Happy testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the web applications I come across or write myself I typically have a few scripts to build and start the application. This blog post d
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="nodejs" scheme="https://glebbahmutov.com/blog/tags/nodejs/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Write Cypress Markdown Preprocessor</title>
    <link href="https://glebbahmutov.com/blog/write-cypress-preprocessor/"/>
    <id>https://glebbahmutov.com/blog/write-cypress-preprocessor/</id>
    <published>2021-03-10T05:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.393Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#the-idea">The idea</a></li><li><a href="#markdown-preprocessor">Markdown preprocessor</a></li><li><a href="#bundle-js-file">Bundle JS file</a></li><li><a href="#promises">Promises</a></li><li><a href="#shouldwatch">shouldWatch</a></li><li><a href="#the-result">The result</a></li></ul><!-- tocstop --><h2><span id="the-idea">The idea</span></h2><p>Wouldn&#39;t it be cool to write a more descriptive tests? Tests that talk about what is going on? Tests that include more context, more explanation, more images? What if the tests were written in Markdown and just embedded the code blocks to be executed?</p><p>A good example is <a href="https://github.com/bahmutov/cypress-examples">bahmutov/cypress-examples</a> where the same Markdown files have the tests and also become the static HTML pages that you can see at <a href="https://glebbahmutov.com/cypress-examples/">https://glebbahmutov.com/cypress-examples/</a>. Here is the start of the Location.md file with a Cypress test</p><p><img src="/blog/images/write-preprocessor/md.png" alt="Location.md with cy.hash test"></p><p>Using VuePress we can convert the Markdown file into a static page, shown deployed here</p><p><img src="/blog/images/write-preprocessor/page.png" alt="Location tests page"></p><blockquote class="pullquote"><p>📚 Another use for Markdown files is to generate application demos, read the <a href="/blog/cypress-book/" title="Cypress Book">Cypress Book</a> blog post.</p></blockquote><h2><span id="markdown-preprocessor">Markdown preprocessor</span></h2><p>If we plan to convert a Markdown file into a bundled JavaScript the browser can execute, we need a Markdown file preprocessor. The <a href="https://on.cypress.io/preprocessors-api">Cypress preprocessor</a> is literally just a bundler - it receives the source filename and responds with a filename of the JavaScript bundle. The Test Runner then loads the bundle and runs the tests.</p><p><strong>Tip:</strong> by default Cypress only expects <code>.js</code> and <code>.ts</code> spec files. If we want to bundle Markdown files, in the <code>cypress.json</code> set the <code>&quot;testFiles&quot;: &quot;*.md&quot;</code> property.</p><p>Let&#39;s write one.</p><blockquote class="pullquote"><p>🧭 You can find the Markdown preprocessor in <a href="https://github.com/bahmutov/cypress-markdown-preprocessor">bahmutov/cypress-markdown-preprocessor</a> repo.</p></blockquote><p>The Cypress plugin file will register the preprocessor</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mdPreprocessor = <span class="built_in">require</span>(<span class="string">&#x27;cypress-markdown-preprocessor&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// `on` is used to hook into various events Cypress emits</span></span><br><span class="line">  on(<span class="string">&#x27;file:preprocessor&#x27;</span>, mdPreprocessor)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Great, it is a start. Now let&#39;s fill the placeholder code - it will simply print how Cypress calls the preprocessor.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mdPreprocessor</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; filePath, outputPath, shouldWatch &#125; = file</span><br><span class="line">  <span class="built_in">console</span>.log(&#123; filePath, outputPath, shouldWatch &#125;)</span><br><span class="line">  <span class="comment">// we need to output something</span></span><br><span class="line">  fs.writeFileSync(outputPath, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> outputPath</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = mdPreprocessor</span><br></pre></td></tr></table></figure><p>When we run Cypress in the interactive mode the <code>shouldWatch</code> is set to true, but for now let&#39;s solve the simple problem of bundling a file once for the <code>cypress run</code> mode.</p><p>If we call our project now, it shows the filenames of the two bundled files: the support file and the spec file.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ npx cypress run</span><br><span class="line">...</span><br><span class="line">  Running:  spec.md                                                                         (1 of 1)</span><br><span class="line">&#123;</span><br><span class="line">  filePath: &#x27;/Users/gleb/git/cypress-markdown-preprocessor/cypress/integration/spec.md&#x27;,</span><br><span class="line">  outputPath: &#x27;/Users/gleb/Library/Application Support/Cypress/cy/production/projects/cypress-markdown-preprocessor-bb8141ea63a521b0f99b838f2338a5b3/bundles/cypress/integration/spec.md&#x27;,</span><br><span class="line">  shouldWatch: false</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  filePath: &#x27;/Users/gleb/git/cypress-markdown-preprocessor/cypress/support/index.js&#x27;,</span><br><span class="line">  outputPath: &#x27;/Users/gleb/Library/Application Support/Cypress/cy/production/projects/cypress-markdown-preprocessor-bb8141ea63a521b0f99b838f2338a5b3/bundles/cypress/support/index.js&#x27;,</span><br><span class="line">  shouldWatch: false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  0 passing (1ms)</span><br></pre></td></tr></table></figure><p>Because our preprocessor simply has written an empty output string, Cypress runs zero tests. We need to generate actual JavaScript tests from the Markdown text. We can use some special syntax to mark the test blocks. For example, I use <code>fiddle</code> and <code>fiddle-end</code> comments with <code>html</code> and <code>js</code> code blocks. Each block becomes an &quot;app&quot; and the test by using <a href="https://github.com/cypress-io/cypress-fiddle">cypress-fiddle</a> module.</p><p><img src="/blog/images/write-preprocessor/fiddle.png" alt="Example code block we want to extract from the Markdown file"></p><h2><span id="bundle-js-file">Bundle JS file</span></h2><p>What happens if we wanted to bundle a JavaScript file? We would use one of the Cypress&#39; preprocessors, like <a href="https://github.com/cypress-io/cypress-browserify-preprocessor#readme">@cypress/browserify-preprocessor</a>. Our file could check the input file extension and direct the JS file bundling to that preprocessor like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cyBrowserify = <span class="built_in">require</span>(<span class="string">&#x27;@cypress/browserify-preprocessor&#x27;</span>)()</span><br><span class="line"><span class="keyword">const</span> mdPreprocessor = <span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; filePath, outputPath, shouldWatch &#125; = file</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (filePath.endsWith(<span class="string">&#x27;.js&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> cyBrowserify(file)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we extract the test blocks from Markdown text, we can call the <code>cyBrowserify</code> too:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bundleMdFile = <span class="function">(<span class="params">filePath, outputPath</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> md = fs.readFileSync(filePath, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">  <span class="comment">// extract tests into variable &quot;specSource&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> writtenTempFilename = tempWrite.sync(</span><br><span class="line">    specSource,</span><br><span class="line">    path.basename(filePath) + <span class="string">&#x27;.js&#x27;</span>,</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> cyBrowserify(&#123;</span><br><span class="line">    filePath: writtenTempFilename,</span><br><span class="line">    outputPath,</span><br><span class="line">    <span class="comment">// since the file is generated once, no need to watch it</span></span><br><span class="line">    shouldWatch: <span class="literal">false</span>,</span><br><span class="line">    on: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The above function <code>bundleMdFile</code> is our workhorse - we can call it anytime we need to bundle a Markdown file. The function <code>cyBrowserify</code> returns a promise, which will resolve when the full bundle is written to the <code>outputPath</code> file.</p><h2><span id="promises">Promises</span></h2><p>Speaking of promises - what happens if multiple spec files are bundled? Well, every spec file is bundled, but also the support file needs to be bundled first. For every spec file. Of course we do not want to repeat this work - we want to bundle every spec <em>once</em>. Thus a good pattern is to save the bundling promises in an object as a local cache.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bundleMdFile = <span class="function">(<span class="params">filePath, outputPath</span>) =&gt;</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bundled[filename] =&gt; promise</span></span><br><span class="line"><span class="keyword">const</span> bundled = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> mdPreprocessor = <span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; filePath, outputPath, shouldWatch &#125; = file</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (filePath.endsWith(<span class="string">&#x27;.js&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> cyBrowserify(file)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (bundled[filePath]) &#123;</span><br><span class="line">    <span class="comment">// we have the bundle in progress or finished</span></span><br><span class="line">    <span class="keyword">return</span> bundled[filePath]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  bundled[filePath] = bundleMdFile(filePath, outputPath)</span><br><span class="line">  <span class="keyword">return</span> bundled[filePath]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The first time we need to bundle the support file, we get a promise, which eventually resolves. The Test Runner grabs the output file and serves it. Whenever the support file needs to be bundled again (which happens when the second spec is running), the Test Runner is asking for the same file name, and immediately gets the promise from the <code>bundled[filePath]</code> value.</p><h2><span id="shouldwatch">shouldWatch</span></h2><p>During the interactive test execution with <code>cypress open</code>, the Test Runner should watch the source files. If the user edits and saves the spec, the tests should re-run, which means the preprocessor bundles the spec file again. This is how it can be done for a Markdown file:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chokidar = <span class="built_in">require</span>(<span class="string">&#x27;chokidar&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> mdPreprocessor = <span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span> (shouldWatch) &#123;</span><br><span class="line">    <span class="comment">// start bundling the first time</span></span><br><span class="line">    bundled[filePath] = bundleMdFile(filePath, outputPath)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// and start watching the input Markdown file</span></span><br><span class="line">    <span class="keyword">const</span> watcher = chokidar.watch(filePath)</span><br><span class="line">    watcher.on(<span class="string">&#x27;change&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// if the Markdown file changes, we want to rebundle it</span></span><br><span class="line">      <span class="comment">// and tell the Test Runner to run the tests again</span></span><br><span class="line">      bundled[filePath] = bundleMdFile(filePath, outputPath)</span><br><span class="line">      bundled[filePath].then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        file.emit(<span class="string">&#x27;rerun&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// when the test runner closes this spec</span></span><br><span class="line">    file.on(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">delete</span> bundled[filePath]</span><br><span class="line">      watcher.close()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bundled[filePath]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// non-interactive mode</span></span><br><span class="line">  bundled[filePath] = bundleMdFile(filePath, outputPath)</span><br><span class="line">  <span class="keyword">return</span> bundled[filePath]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the interactive mode we create a <a href="https://github.com/paulmillr/chokidar">Chokidar file watcher</a>. Every time the file changes, we rebundle it and emit the Cypress &quot;rerun&quot; event. The Cypress <code>file</code> object we receive is an event emitter. The same object also emits the <code>close</code> event when the Test Runner closes the window and stops running a particular spec. In that case we close the file watcher.</p><h2><span id="the-result">The result</span></h2><p>Our Markdown preprocessor is shown in action - as I edit the source file the Test Runner re-runs the updated test.</p><p><img src="/blog/images/write-preprocessor/md-in-action.gif" alt="Cypress runs the tests from a Markdown file"></p><p>Now you can use what this blog post has shown to write your own file preprocessor.</p><p>PS: I have also written <a href="https://github.com/bahmutov/cy-rollup">@bahmutov/cy-rollup</a> which is a Cypress Rollup file preprocessor.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#the-idea&quot;&gt;The idea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#markdown-preprocessor&quot;&gt;Markdown preprocessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="tutorial" scheme="https://glebbahmutov.com/blog/tags/tutorial/"/>
    
  </entry>
  
  <entry>
    <title>My testimony in support of Building Justice with Jobs Act</title>
    <link href="https://glebbahmutov.com/blog/building-justice-testimony/"/>
    <id>https://glebbahmutov.com/blog/building-justice-testimony/</id>
    <published>2021-03-08T05:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.238Z</updated>
    
    <content type="html"><![CDATA[<p>Last week as part of <a href="https://www.mapowerforward.com/">Mass Power Forward</a> Lobby day I and other volunteers have met with our State Representative Marjorie Decker and State Senator Pat Jehlen. I have asked them to co-sponsor the bill SD.2102/HD.3338 &quot;Building Justice with Jobs Act&quot;. You can see why I support this bill from its <a href="https://drive.google.com/file/d/1uYjzWdyOghgyruOFVd_CMimUqp9Dw5-R/view">summary here</a>.</p><p>Here is my testimony:</p><p>Thank you for meeting with us. The climate crisis is the biggest emergency we are facing and will profoundly affect our lives and lives of our children. Please stand strong and make sure the Governor Baker signs the NextGen Climate Roadmap S9 bill without watering it down. This bill is not a &quot;pie in the sky&quot;, but a bare minimum, a start. We have to move much faster to avert a catastrophe.</p><p>Which is why I am asking you to support and co-sponsor the SD.2102/HD.3338 &quot;Building Justice with Jobs Act&quot;.</p><p>Greenhouse limits per sector is an important part of NextGen climate bill, and SD.2102/HD.3338 &quot;Building Justice with Jobs Act&quot; is a practical mechanism to address the emissions from the housing sector.</p><p>We have to think what to do with all our houses that already use oil and gas for heating and how to switch them off the fossil fuels. We need a mechanism to make sure all residents can afford to upgrade to electric power, because it is in everyone&#39;s interest to stop burning fossil fuels. That bill builds upon the <a href="https://www.masssave.com/">MassSave program</a> and will retrofit 1 million homes in Massachusetts within the next 10 years, driving the housing-related emissions 50% by 2030, and then drive them to 0 by 2040, all while creating good jobs for our residents.</p><p>Please consider co-sponsoring it. Thank you.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Last week as part of &lt;a href=&quot;https://www.mapowerforward.com/&quot;&gt;Mass Power Forward&lt;/a&gt; Lobby day I and other volunteers have met with our 
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="climate" scheme="https://glebbahmutov.com/blog/tags/climate/"/>
    
  </entry>
  
  <entry>
    <title>Canvas Visual Testing with Retries</title>
    <link href="https://glebbahmutov.com/blog/canvas-testing/"/>
    <id>https://glebbahmutov.com/blog/canvas-testing/</id>
    <published>2021-03-04T05:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.240Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine you are drawing something into HTML5 Canvas element. You want to confirm that the application is working, so you compare the drawing with a previously saved good image. This blog post shows how to do this using Cypress with a bonus feature meant to solve visual flake: the visual diffing is retried until the rendering matches the saved image (or the command times out).</p><!-- toc --><ul><li><a href="#the-smiley-face">The smiley face</a></li><li><a href="#saving-the-canvas">Saving the canvas</a></li><li><a href="#visual-test-using-odiff">Visual test using odiff</a></li><li><a href="#the-test-must-wait">The test must wait</a></li><li><a href="#visual-flake">Visual flake</a></li><li><a href="#retry-ability">Retry-ability</a></li><li><a href="#visual-retry-ability">Visual retry-ability</a></li><li><a href="#waiting-for-static-canvas">Waiting for static canvas</a></li></ul><!-- tocstop --><h2><span id="the-smiley-face">The smiley face</span></h2><p>The example application in the <a href="https://github.com/bahmutov/monalego">bahmutov/monalego</a> repo uses <a href="https://legrajs.com/">Legra.js</a> to draw a smiley face. The face is stretching its smile</p><p><img src="/blog/images/canvas-testing/smile.gif" alt="Animated canvas smile"></p><p>The script to draw the face is below</p><figure class="highlight js"><figcaption><span>public/smile.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Legra <span class="keyword">from</span> <span class="string">&#x27;https://unpkg.com/legra?module&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ctx = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;canvas&#x27;</span>).getContext(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> legra = <span class="keyword">new</span> Legra(ctx)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> direction = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> smileY = <span class="number">12</span></span><br><span class="line"><span class="keyword">const</span> draw = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">480</span>, <span class="number">480</span>)</span><br><span class="line">  legra.circle(<span class="number">10</span>, <span class="number">10</span>, <span class="number">8</span>, &#123; <span class="attr">filled</span>: <span class="literal">true</span>, <span class="attr">color</span>: <span class="string">&#x27;yellow&#x27;</span> &#125;)</span><br><span class="line">  legra.rectangle(<span class="number">6</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">2</span>, &#123; <span class="attr">filled</span>: <span class="literal">true</span>, <span class="attr">color</span>: <span class="string">&#x27;green&#x27;</span> &#125;)</span><br><span class="line">  legra.rectangle(<span class="number">13</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">2</span>, &#123; <span class="attr">filled</span>: <span class="literal">true</span>, <span class="attr">color</span>: <span class="string">&#x27;green&#x27;</span> &#125;)</span><br><span class="line">  legra.polygon(</span><br><span class="line">    [</span><br><span class="line">      [<span class="number">10</span>, <span class="number">8</span>],</span><br><span class="line">      [<span class="number">8</span>, <span class="number">11</span>],</span><br><span class="line">      [<span class="number">12</span>, <span class="number">11</span>],</span><br><span class="line">    ],</span><br><span class="line">    &#123; <span class="attr">filled</span>: <span class="literal">true</span>, <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;,</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  legra.quadraticCurve(<span class="number">5</span>, <span class="number">13</span>, <span class="number">10</span>, smileY, <span class="number">15</span>, <span class="number">13</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawNext</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    smileY += direction</span><br><span class="line">    draw()</span><br><span class="line">    <span class="keyword">if</span> (smileY &gt;= <span class="number">20</span>) &#123;</span><br><span class="line">      <span class="comment">// the last slide</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    drawNext()</span><br><span class="line">  &#125;, <span class="number">150</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">drawNext()</span><br></pre></td></tr></table></figure><p>We want to confirm the final rendering - the full smile, so we have saved the PNG at the end of the animation. How do we confirm the smile is rendered from now on?</p><h2><span id="saving-the-canvas">Saving the canvas</span></h2><p>First, let&#39;s save the canvas as a PNG image we can compare against the good image. We can convert the HTML5 canvas to data URL and then save the base64 string on disk using <a href="https://on.cypress.io/writefile">cy.writeFile</a> command.</p><figure class="highlight js"><figcaption><span>cypress/integration/utils.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> downloadPng = <span class="function">(<span class="params">filename</span>) =&gt;</span> &#123;</span><br><span class="line">  expect(filename).to.be.a(<span class="string">&#x27;string&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the simplest way is to grab the data url and use</span></span><br><span class="line">  <span class="comment">// https://on.cypress.io/writefile to save PNG file</span></span><br><span class="line">  <span class="keyword">return</span> cy.get(<span class="string">&#x27;canvas&#x27;</span>).then(<span class="function">(<span class="params">$canvas</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = $canvas[<span class="number">0</span>].toDataURL()</span><br><span class="line">    <span class="keyword">const</span> data = url.replace(<span class="regexp">/^data:image\/png;base64,/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    cy.writeFile(filename, data, <span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">    cy.wrap(filename)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/integration/smile-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; downloadPng &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Lego face&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;saves canvas as an image&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/smile&#x27;</span>)</span><br><span class="line">    cy.wait(<span class="number">4000</span>)</span><br><span class="line">    downloadPng(<span class="string">&#x27;good-smile.png&#x27;</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>The file is saved - note we had to wait for 4 seconds to be safe the animation has fully finished and the canvas has finished rendering.</p><p><img src="/blog/images/canvas-testing/good-smile.gif" alt="Cypress test saved the canvas after 4 seconds"></p><p>I have moved the saved PNG file into <code>images/darwin/smile.png</code> file to be used as good &quot;gold&quot; image for the comparison.</p><p><img src="/blog/images/canvas-testing/saved.png" alt="Saved PNG image"></p><p>Let&#39;s write the visual test.</p><h2><span id="visual-test-using-odiff">Visual test using odiff</span></h2><p>Our test should download the canvas as a PNG image and compare the new image against the saved good image. For fast comparison I will use <a href="https://github.com/dmtrKovalenko/odiff">odiff</a> module from my co-worker Dmitriy Kovalenko <a href="https://twitter.com/dmtrKovalenko">@dmtrKovalenko</a>. Since this is a Node operation I will call <code>odiff</code> from the plugins file.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; compare &#125; = <span class="built_in">require</span>(<span class="string">&#x27;odiff-bin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> osName = os.platform()</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type <span class="type">&#123;Cypress.PluginConfig&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// `on` is used to hook into various events Cypress emits</span></span><br><span class="line">  <span class="comment">// `config` is the resolved Cypress config</span></span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">compare</span>(<span class="params">&#123; filename, options &#125;</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> baseFolder = <span class="string">&#x27;images&#x27;</span></span><br><span class="line">      <span class="keyword">const</span> baseImage = path.join(baseFolder, osName, path.basename(filename))</span><br><span class="line">      <span class="keyword">const</span> newImage = filename</span><br><span class="line">      <span class="keyword">const</span> diffImage = <span class="string">&#x27;diff.png&#x27;</span></span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">&#x27;comparing base image %s to the new image %s&#x27;</span>,</span><br><span class="line">        baseImage,</span><br><span class="line">        newImage,</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">if</span> (options) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;odiff options %o&#x27;</span>, options)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> started = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> compare(baseImage, newImage, diffImage, options)</span><br><span class="line">      <span class="keyword">const</span> finished = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">      <span class="keyword">const</span> elapsed = finished - started</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;odiff took %dms&#x27;</span>, elapsed)</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(result)</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is our test that calls the image comparison using <a href="https://on.cypress.io/task">cy.task</a></p><figure class="highlight js"><figcaption><span>cypress/integration/smile-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;smiles broadly with wait&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/smile&#x27;</span>)</span><br><span class="line">  cy.wait(<span class="number">4000</span>)</span><br><span class="line"></span><br><span class="line">  downloadPng(<span class="string">&#x27;smile.png&#x27;</span>).then(<span class="function">(<span class="params">filename</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.log(<span class="string">`saved <span class="subst">$&#123;filename&#125;</span>`</span>)</span><br><span class="line">    cy.task(<span class="string">&#x27;compare&#x27;</span>, &#123; filename &#125;).should(<span class="string">&#x27;deep.equal&#x27;</span>, &#123;</span><br><span class="line">      match: <span class="literal">true</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/canvas-testing/smile-diff.gif" alt="Visual test confirms the smile is the same"></p><p>Meanwhile we can see the terminal output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">comparing base image images&#x2F;darwin&#x2F;smile.png to the new image smile.png</span><br><span class="line">odiff took 37ms</span><br><span class="line">&#123; match: true &#125;</span><br></pre></td></tr></table></figure><h2><span id="the-test-must-wait">The test must wait</span></h2><p>Can we speed up the test? Can we remove the <code>cy.wait(4000)</code>? Well, if we remove it completely, the test fails - because the canvas has not rendered at all</p><p><img src="/blog/images/canvas-testing/no-wait.png" alt="Zero wait - the canvas is blank during the comparison"></p><p>Here is the diff PNG image the <code>odiff</code> comparison generates showing in red the pixels different from the good image.</p><p><img src="/blog/images/canvas-testing/blank-diff.png" alt="Zero wait - the pixel difference"></p><p>Maybe we can only wait one second? No, the test still fails</p><p><img src="/blog/images/canvas-testing/one-sec-wait.png" alt="The test fails if we wait only one second"></p><p>The visual difference image shows a smiling image, but not enough to match our good image.</p><p><img src="/blog/images/canvas-testing/one-sec-diff.png" alt="Visual difference after one second wait"></p><p>We see the mismatched red pixels around the mouth - our smile is bad!</p><h2><span id="visual-flake">Visual flake</span></h2><p>In general, &quot;catching&quot; the page at the right moment so that all its pixels are updated turns out to be tricky and flakey. There could be JavaScript and CSS animations still running, there could be asynchronous data loading, there could be little page alerts and badges suddenly showing up. I have written about <a href="https://www.cypress.io/blog/2020/10/02/debug-a-flaky-visual-regression-test/">debugging a flaky visual regression test</a> and must say - it is no picnic.</p><p>Things like a text box that hasn&#39;t fully opened are common:</p><p><img src="/blog/images/canvas-testing/flake-box.png" alt="The text box hasn&#39;t expanded yet"></p><p>Or the entire element is missing from the DOM</p><p><img src="/blog/images/canvas-testing/flake-render.png" alt="The DOM section hasn&#39;t rendered yet"></p><p>Or the element is present, but its text hasn&#39;t been rendered yet</p><p><img src="/blog/images/canvas-testing/flake-text.png" alt="The element&#39;s text is missing"></p><p>What do we do? How do we fight the visual flake?</p><h2><span id="retry-ability">Retry-ability</span></h2><p>First, let me note that the flake in our case is due to comparing the image <em>prematurely</em>. The good image has been taken <em>after</em> the canvas has completely finished its animation. The good image was &quot;approved&quot; by the human user, thus we know it is good. Our test has a problem - it takes an image too soon.</p><p>A similar problem happens in E2E testing very often - the Cypress Test Runner cannot know when an element is ready to pass an assertion, thus it just retries again and again. Eventually the element changes its state and the assertion passes. If the assertion never passes, no matter how many times the command retries, then the command times out, and the test fails. This Cypress feature is called <a href="https://on.cypress.io/retry-ability">retry-ability</a> and it is the keystone to fighting the test flake.</p><p>Here is a typical test that relies on the retrying the command until the assertion passes</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>)     <span class="comment">// command</span></span><br><span class="line">  .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>) <span class="comment">// assertion</span></span><br></pre></td></tr></table></figure><p>Here is the retry-ability in action. Notice how the application inserts the new todo items after a noticeable delay - maybe the items have to be saved at a remote server first, thus they appear in the DOM only after a few seconds.</p><p><img src="/blog/images/canvas-testing/todos.gif" alt="The command is retried until the assertion passes"></p><p>The command is retried until the page reaches the desired state. The page is similar to the smiling face, the page is changing - and the test keeps &quot;grabbing&quot; the elements and checking if there are two of them. Once there are two elements found, the test is done.</p><h2><span id="visual-retry-ability">Visual retry-ability</span></h2><p>The solution to visual flake is to retry getting the canvas and comparing it to the good image. Getting the canvas is similar to getting the DOM elements - it is an idempotent operation that is safe to run again and again. Our only challenge is to implement the retries using the same commands we used during the visual test above; the Cypress commands <code>cy.writeFile</code> and <code>cy.task</code> are NOT retried by default.</p><p>Luckily, I have written a small reusable module called <a href="https://github.com/bahmutov/cypress-recurse">cypress-recurse</a> for recursively calling any series of Cypress commands until a predicate becomes true. You can read and watch how I coded it up in the <a href="/blog/cypress-recurse/" title="Writing Cypress Recurse Function">Writing Cypress Recurse Function</a> tutorial.</p><p>In our case the test is so simple, the code speaks for itself:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;smiles broadly&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/smile&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  recurse(</span><br><span class="line">    <span class="comment">// a function with Cypress commands to perform</span></span><br><span class="line">    () =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> downloadPng(<span class="string">&#x27;smile.png&#x27;</span>).then(<span class="function">(<span class="params">filename</span>) =&gt;</span> &#123;</span><br><span class="line">        cy.log(<span class="string">`saved <span class="subst">$&#123;filename&#125;</span>`</span>)</span><br><span class="line">        <span class="keyword">return</span> cy.task(<span class="string">&#x27;compare&#x27;</span>, &#123; filename &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// a predicate function</span></span><br><span class="line">    (&#123; match &#125;) =&gt; match,</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test calls the first function that performs the Cypress commands. This function downloads the canvas PNG and calls the <code>cy.task(&#39;compare&#39;)</code>. The task yields an object with a property <code>match</code>. Our predicate function simply grabs that property. Once the <code>match</code> is true the visual test is done - the two images matched.</p><p><img src="/blog/images/canvas-testing/recurse-smile.gif" alt="Visual retries using cypress-recurse and odiff"></p><p>Of course, we can turn off such verbose logging. But here I kept it on to show how every iteration of saving the canvas and image comparison takes about 100-150ms. The <code>odiff</code> visual comparison only takes 25ms for a 480x480 pixel image - the rest of the time is taken by saving the image and the Cypress command overhead.</p><p>You can see how I am writing the above test in this video and find the full project at <a href="https://github.com/bahmutov/monalego">bahmutov/monalego</a></p><center><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/xSK6fe5WD1g" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Of course we can refactor the code and make it into a reusable utility function:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; looksTheSame &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line">it(<span class="string">&#x27;looks the same&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/smile&#x27;</span>)</span><br><span class="line">  looksTheSame(<span class="string">&#x27;smile.png&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="waiting-for-static-canvas">Waiting for static canvas</span></h2><p>One optimization we can do to avoid relatively expensive visual image retries, is to wait for the canvas to become static (unchanging) first, before doing the image comparison with the file on disk. An image diffing module like <a href="https://github.com/mapbox/pixelmatch#readme">pixelmatch</a> can compare canvas pixels right in the browser. Thus we can check the canvas against itself after N milliseconds. If there are pixel differences, then the canvas is still changing. We need to wait then try again. If the images match - the canvas is static and can be compared to an image on disk.</p><p>The utility function can still use the <code>cypress-recurse</code> module to implement such in-browser image diffing</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; recurse &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-recurse&#x27;</span></span><br><span class="line"><span class="keyword">import</span> pixelmatch <span class="keyword">from</span> <span class="string">&#x27;pixelmatch&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ensureCanvasStatic</span>(<span class="params">selector = <span class="string">&#x27;canvas&#x27;</span></span>) </span>&#123;</span><br><span class="line">  cy.log(<span class="string">`ensure the image in **<span class="subst">$&#123;selector&#125;</span>** is static`</span>)</span><br><span class="line">  <span class="keyword">const</span> noLog = &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> delay = <span class="number">300</span> <span class="comment">// ms, when grabbing new image</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// take the current image</span></span><br><span class="line">  <span class="keyword">return</span> cy</span><br><span class="line">    .get(selector, noLog)</span><br><span class="line">    .then(<span class="function">(<span class="params">$canvas</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> ctx1 = $canvas[<span class="number">0</span>].getContext(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> width = $canvas[<span class="number">0</span>].width</span><br><span class="line">      <span class="keyword">const</span> height = $canvas[<span class="number">0</span>].height</span><br><span class="line">      <span class="keyword">let</span> img1 = ctx1.getImageData(<span class="number">0</span>, <span class="number">0</span>, width, height)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;canvas is %d x %d pixels&#x27;</span>, width, height)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// initial delay to make sure we catch updates</span></span><br><span class="line">      cy.wait(delay, noLog)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> recurse(</span><br><span class="line">        <span class="comment">// &quot;work&quot; function</span></span><br><span class="line">        () =&gt; &#123;</span><br><span class="line">          <span class="keyword">return</span> cy.get(selector, noLog).then(<span class="function">(<span class="params">$canvas</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> ctx2 = $canvas[<span class="number">0</span>].getContext(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> img2 = ctx2.getImageData(<span class="number">0</span>, <span class="number">0</span>, width, height)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> diff = ctx2.createImageData(width, height)</span><br><span class="line">            <span class="comment">// number of different pixels</span></span><br><span class="line">            <span class="keyword">const</span> number = pixelmatch(</span><br><span class="line">              img1.data,</span><br><span class="line">              img2.data,</span><br><span class="line">              diff.data,</span><br><span class="line">              width,</span><br><span class="line">              height,</span><br><span class="line">              &#123;</span><br><span class="line">                threshold: <span class="number">0.1</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">            )</span><br><span class="line">            <span class="built_in">console</span>.log(number)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// for next comparison, use the new image</span></span><br><span class="line">            <span class="comment">// as the base - this way we can get to the end</span></span><br><span class="line">            <span class="comment">// of any animation</span></span><br><span class="line">            img1 = img2</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> number</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// predicate function</span></span><br><span class="line">        (numberOfDifferentPixels) =&gt; numberOfDifferentPixels &lt; <span class="number">10</span>,</span><br><span class="line">        <span class="comment">// recurse options</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// by default uses the default command timeout</span></span><br><span class="line">          log: <span class="function">(<span class="params">numberOfDifferentPixels</span>) =&gt;</span></span><br><span class="line">            cy.log(<span class="string">`**<span class="subst">$&#123;numberOfDifferentPixels&#125;</span>** diff pixels`</span>),</span><br><span class="line">          delay,</span><br><span class="line">        &#125;,</span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      cy.log(<span class="string">`picture in **<span class="subst">$&#123;selector&#125;</span>** is static`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A typical test would call the <code>ensureCanvasStatic</code> function first, then the function <code>looksTheSame</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; looksTheSame &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ensureCanvasStatic</span>(<span class="params">selector = <span class="string">&#x27;canvas&#x27;</span></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;can wait for canvas to become static&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/smile&#x27;</span>)</span><br><span class="line">  ensureCanvasStatic(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line">  <span class="comment">// after this it is pretty much guaranteed to</span></span><br><span class="line">  <span class="comment">// immediately pass the image diffing on the 1st try</span></span><br><span class="line">  looksTheSame(<span class="string">&#x27;smile.png&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The GIF below shows the dwindling number of different pixels. As it reaches 0, the canvas finished animation and is ready to be compared against the baseline image on disk.</p><p><img src="/blog/images/canvas-testing/canvas-static.gif" alt="Waiting for canvas to finish animation"></p><p>Happy Visual Testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine you are drawing something into HTML5 Canvas element. You want to confirm that the application is working, so you compare the draw
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="visual testing" scheme="https://glebbahmutov.com/blog/tags/visual-testing/"/>
    
  </entry>
  
  <entry>
    <title>Writing Cypress Recurse Function</title>
    <link href="https://glebbahmutov.com/blog/cypress-recurse/"/>
    <id>https://glebbahmutov.com/blog/cypress-recurse/</id>
    <published>2021-03-03T05:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.259Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/bahmutov/cypress-recurse">cypress-recurse</a> is a small utility for re-running Cypress commands until a predicate function passes. This blog post collects several videos <a href="https://www.youtube.com/playlist?list=PLP9o9QNnQuAbegJlN5ZTRxqtUBtKwXOHQ">I have recorded</a> explaining how to code <code>cypress-recurse</code> from zero all the way to publishing the NPM module and using it in other tests.</p><!-- toc --><ul><li><a href="#the-problem">The problem</a></li><li><a href="#recursively-call-cytask-from-the-test">Recursively call cy.task from the test</a></li><li><a href="#reusable-function">Reusable function</a></li><li><a href="#iteration-limit">Iteration limit</a></li><li><a href="#timeout">Timeout</a></li><li><a href="#options-object">Options object</a></li><li><a href="#adding-types-via-jsdoc-comments">Adding types via JSDoc comments</a></li><li><a href="#published-npm-package">Published NPM package</a></li><li><a href="#use-case-1-find-the-downloaded-file">Use case 1: find the downloaded file</a></li><li><a href="#use-case-2-visual-testing-retries">Use case 2: visual testing retries</a></li><li><a href="#recurse-vs-test-retries">recurse vs test retries</a></li></ul><!-- tocstop --><h2><span id="the-problem">The problem</span></h2><p>Recently a user asked how the test can do the following: reload the page until it shows the number 7. The page shows a random digit on every load, so we need to run <code>cy.reload()</code> until the page shows it. The final solution would look like this:</p><p><img src="/blog/images/recurse/lucky-7.gif" alt="Reloading the page from the test until we get the number 7"></p><p>The user tried to implement the test using a JavaScript <code>while</code> loop which only crashes the browser window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ⛔️ DOES NOT WORK, crashes the browser</span></span><br><span class="line">it(<span class="string">&#x27;yields 7 from the task (crashes)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> found</span><br><span class="line">  <span class="keyword">while</span> (!found) &#123;</span><br><span class="line">    cy.task(<span class="string">&#x27;randomNumber&#x27;</span>).then(<span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (n === <span class="number">7</span>) &#123;</span><br><span class="line">        found = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>In the next several videos I show the correct way of implementing the test and progressively refactor it to be a reusable function. You can read a short description of every step and watch the embedded videos from the <a href="https://www.youtube.com/playlist?list=PLP9o9QNnQuAbegJlN5ZTRxqtUBtKwXOHQ">YouTube playlist</a>. The final solution is available on NPM as <a href="https://github.com/bahmutov/cypress-recurse">cypress-recurse</a> module.</p><h2><span id="recursively-call-cytask-from-the-test">Recursively call cy.task from the test</span></h2><p>First, let&#39;s figure out what goes wrong with the <code>while</code> loop, and how a test can avoid the runaway loop by calling an intermediate function recursively. The video below does that and then derives the correct solution.</p><center><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/r8_hFwYAo5c" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>The final solution uses the <code>checkNumber</code> function - it calls the Cypress command, checks the yielded value. If the value is not work we need, it calls itself recursively.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;yields 7 from the task&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> checkNumber = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.task(<span class="string">&#x27;randomNumber&#x27;</span>).then(<span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.log(<span class="string">`**<span class="subst">$&#123;n&#125;</span>**`</span>)</span><br><span class="line">      <span class="keyword">if</span> (n === <span class="number">7</span>) &#123;</span><br><span class="line">        cy.log(<span class="string">&#x27;**NICE!**&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      checkNumber()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  checkNumber()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="reusable-function">Reusable function</span></h2><p>It makes sense to factor out the solution and make it usable from other tests.</p><center><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/Q_7-gRQLLMA" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>The final result is a reusable little function that can call the given two functions: one is a chain of Cypress commands, another one is a predicate function checking the result to know when to stop.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;yields 7 from the task (recursive)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> recurse = <span class="function">(<span class="params">commandsFn, checkFn</span>) =&gt;</span> &#123;</span><br><span class="line">    commandsFn().then(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (checkFn(x)) &#123;</span><br><span class="line">        cy.log(<span class="string">&#x27;**NICE!**&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      recurse(commandsFn, checkFn)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  recurse(</span><br><span class="line">    () =&gt; cy.task(<span class="string">&#x27;randomNumber&#x27;</span>),</span><br><span class="line">    (n) =&gt; n === <span class="number">7</span>,</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="iteration-limit">Iteration limit</span></h2><p>If our predicate never return true, we can execute the Cypress commands until the end of times. We better limit the maximum number of attempts. The next video adds the maximum iteration limit to the function.</p><center><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/I1oNKD6NNjg" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>The solution uses only local variables without global state</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;yields 7 from the task (limit)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> recurse = <span class="function">(<span class="params">commandsFn, checkFn, limit = <span class="number">3</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (limit &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Recursion limit reached&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    cy.log(<span class="string">`remaining attempts **<span class="subst">$&#123;limit&#125;</span>**`</span>)</span><br><span class="line"></span><br><span class="line">    commandsFn().then(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (checkFn(x)) &#123;</span><br><span class="line">        cy.log(<span class="string">&#x27;**NICE!**&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      recurse(commandsFn, checkFn, limit - <span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  recurse(</span><br><span class="line">    () =&gt; cy.task(<span class="string">&#x27;randomNumber&#x27;</span>),</span><br><span class="line">    (n) =&gt; n === <span class="number">7</span>,</span><br><span class="line">    <span class="number">30</span>,</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="timeout">Timeout</span></h2><p>Most Cypress commands use a time limit, not an attempt counter limit. Thus the next improvement we are making is adding a time limit to the <code>recurse</code> function.</p><center><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/Cn8Ubhd49Gw" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Again, we are using arguments and avoid global state</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;yields 7 from the task (time limit)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> recurse = <span class="function">(<span class="params">commandsFn, checkFn, timeRemaining = <span class="number">4000</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> started = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="keyword">if</span> (timeRemaining &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Max time limit reached&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    cy.log(<span class="string">`time remaining **<span class="subst">$&#123;timeRemaining&#125;</span>**`</span>)</span><br><span class="line"></span><br><span class="line">    commandsFn().then(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (checkFn(x)) &#123;</span><br><span class="line">        cy.log(<span class="string">&#x27;**NICE!**&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> finished = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">      <span class="keyword">const</span> elapsed = finished - started</span><br><span class="line">      recurse(commandsFn, checkFn, timeRemaining - elapsed)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  recurse(</span><br><span class="line">    () =&gt; cy.task(<span class="string">&#x27;randomNumber&#x27;</span>),</span><br><span class="line">    (n) =&gt; n === <span class="number">7</span>,</span><br><span class="line">    <span class="number">10000</span>,</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="options-object">Options object</span></h2><p>We want to use both the iteration and time limit and also add &quot;log&quot; flag to enable logging. Using positional arguments quickly becomes hard, thus we switch to using an options object.</p><center><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/DeMRtTD5p7s" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Here is the options pattern, including applying the defaults</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;yields 7 from the task (options object)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> recurse = <span class="function">(<span class="params">commandsFn, checkFn, options = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    Cypress._.defaults(options, &#123;</span><br><span class="line">      limit: <span class="number">30</span>,</span><br><span class="line">      timeRemaining: <span class="number">30000</span>,</span><br><span class="line">      log: <span class="literal">true</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> started = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (options.limit &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Recursion limit reached&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (options.log) &#123;</span><br><span class="line">      cy.log(<span class="string">`remaining attempts **<span class="subst">$&#123;options.limit&#125;</span>**`</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (options.timeRemaining &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Max time limit reached&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (options.log) &#123;</span><br><span class="line">      cy.log(<span class="string">`time remaining **<span class="subst">$&#123;options.timeRemaining&#125;</span>**`</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    commandsFn().then(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (checkFn(x)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (options.log) &#123;</span><br><span class="line">          cy.log(<span class="string">&#x27;**NICE!**&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> finished = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">      <span class="keyword">const</span> elapsed = finished - started</span><br><span class="line">      recurse(commandsFn, checkFn, &#123;</span><br><span class="line">        timeRemaining: options.timeRemaining - elapsed,</span><br><span class="line">        limit: options.limit - <span class="number">1</span>,</span><br><span class="line">        log: options.log,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  recurse(</span><br><span class="line">    () =&gt; cy.task(<span class="string">&#x27;randomNumber&#x27;</span>, <span class="literal">null</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;),</span><br><span class="line">    (n) =&gt; n === <span class="number">7</span>,</span><br><span class="line">    &#123; <span class="attr">timeRemaining</span>: <span class="number">10000</span>, <span class="attr">log</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The user can omit the options, or specify just some of them.</p><h2><span id="adding-types-via-jsdoc-comments">Adding types via JSDoc comments</span></h2><p>We want to make the reusable function <code>recurse</code> ... easier to reuse. Having the type information for the function&#39;s signature is a big help to the users, but I do not want to write TypeScript. Thus I take a middle road by adding JSDoc comments describing the types of the arguments. Modern code editors like VSCode can read and use <a href="/blog/trying-typescript/" title="JSDoc type comments">JSDoc type comments</a> to show IntelliSense.</p><center><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/g4qispkHH-o" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Here are these JSDoc comments</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@typedef <span class="type">&#123;object&#125;</span> <span class="variable">RecurseOptions</span></span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@property <span class="type">&#123;number=&#125;</span> </span>limit The max number of iterations</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@property <span class="type">&#123;number=&#125;</span> </span>timeRemaining In milliseconds</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@property <span class="type">&#123;boolean=&#125;</span> </span>log Log to Command Log</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Recursively calls the given command until the predicate is true.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="type">&#123;() =&gt; Cypress.Chainable&#125;</span> <span class="variable">commandsFn</span></span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="type">&#123;(any) =&gt; boolean&#125;</span> <span class="variable">checkFn</span></span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="type">&#123;RecurseOptions&#125;</span> <span class="variable">options</span></span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recurse</span>(<span class="params">commandsFn, checkFn, options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  Cypress._.defaults(options, &#123;</span><br><span class="line">    limit: <span class="number">30</span>,</span><br><span class="line">    timeRemaining: <span class="number">30000</span>,</span><br><span class="line">    log: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="published-npm-package">Published NPM package</span></h2><p>Our reusable function is ready - we can now move out from a Cypress test and into its own repository <a href="https://github.com/bahmutov/cypress-recurse">bahmutov/cypress-recurse</a> and publish it on NPM.</p><center><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/V82p7qTowXg" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>We definitely need a CI setup and <a href="/blog/keep-examples-up-to-date/" title="automated dependency updates">automated dependency updates</a> to make sure our NPM package is working with the newer versions of Cypress.</p><p><img src="/blog/images/recurse/readme.png" alt="cypress-recurse README file"></p><h2><span id="use-case-1-find-the-downloaded-file">Use case 1: find the downloaded file</span></h2><p>Now that we have <code>cypress-recurse</code>, let&#39;s use it. Calling <code>cy.task</code> repeatedly to find a file is a good use case. Here is an example from our <a href>Cypress example recipes</a> where we try to find a downloaded file</p><center><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/Ty5ltRdgr5M" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; recurse &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-recurse&#x27;</span></span><br><span class="line"><span class="keyword">const</span> isNonEmptyString = <span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> x === <span class="string">&#x27;string&#x27;</span> &amp;&amp; <span class="built_in">Boolean</span>(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;using recurse&#x27;</span>, &#123; <span class="attr">browser</span>: <span class="string">&#x27;!firefox&#x27;</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// imagine we do not know the exact filename after download</span></span><br><span class="line">  <span class="comment">// so let&#x27;s call a task to find the file on disk before verifying it</span></span><br><span class="line">  <span class="comment">// image comes from the same domain as the page</span></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=download-png]&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;**find the image**&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> mask = <span class="string">`<span class="subst">$&#123;downloadsFolder&#125;</span>/*.png`</span></span><br><span class="line"></span><br><span class="line">  recurse(</span><br><span class="line">    () =&gt; cy.task(<span class="string">&#x27;findFiles&#x27;</span>, mask),</span><br><span class="line">    isNonEmptyString</span><br><span class="line">  )</span><br><span class="line">  .then(<span class="function">(<span class="params">foundImage</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.log(<span class="string">`found image <span class="subst">$&#123;foundImage&#125;</span>`</span>)</span><br><span class="line">    cy.log(<span class="string">&#x27;**confirm downloaded image**&#x27;</span>)</span><br><span class="line">    validateImage()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="use-case-2-visual-testing-retries">Use case 2: visual testing retries</span></h2><p>In the blog post <a href="#">Post not found: Invalid post_link</a> I show how to use the <code>cypress-recurse</code> to download and compare HTML5 canvas to a previously saved image. The code is using <code>recurse</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;smiles broadly&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/smile&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  recurse(</span><br><span class="line">    () =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> downloadPng(<span class="string">&#x27;smile.png&#x27;</span>).then(<span class="function">(<span class="params">filename</span>) =&gt;</span> &#123;</span><br><span class="line">        cy.log(<span class="string">`saved <span class="subst">$&#123;filename&#125;</span>`</span>)</span><br><span class="line">        <span class="keyword">return</span> cy.task(<span class="string">&#x27;compare&#x27;</span>, &#123; filename &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    (&#123; match &#125;) =&gt; match,</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You can see how I am writing the above test in this video and find the full project at <a href="https://github.com/bahmutov/monalego">bahmutov/monalego</a></p><center><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/xSK6fe5WD1g" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="recurse-vs-test-retries">recurse vs test retries</span></h2><p>Cypress already includes <a href="https://on.cypress.io/test-retries">test retries</a>. If a test fails, you can re-run the entire test up to N times, called attempts. The test retries could be configured globally, per suite, or per individual test:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this test can fail, then retry up to 2 times more</span></span><br><span class="line">it(<span class="string">&#x27;retries if fails&#x27;</span>, &#123; <span class="attr">retries</span>: <span class="number">2</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>There are differences between the test retries and <code>cypress-recurse</code>:</p><ul><li>test retries only apply to the body of the test, they do not retry the test hooks like <code>before</code> and <code>beforeEach</code></li><li>test retries re-run the entire test, while <code>recurse</code> only retries the given commands.</li></ul><p>In general I would consider the <code>recurse</code> a &quot;normal&quot; part of running tests, similar to the command <a href="https://on.cypress.io/retry-ability">retry-ability</a>, but extended to an arbitrary number of commands. Test retries are a mechanism to fight the truly unpredictable test flake, like slow responses from the server.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/bahmutov/cypress-recurse&quot;&gt;cypress-recurse&lt;/a&gt; is a small utility for re-running Cypress commands until a pred
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="tutorial" scheme="https://glebbahmutov.com/blog/tags/tutorial/"/>
    
  </entry>
  
  <entry>
    <title>How to Test Anchor Ping</title>
    <link href="https://glebbahmutov.com/blog/anchor-ping/"/>
    <id>https://glebbahmutov.com/blog/anchor-ping/</id>
    <published>2021-02-22T05:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.224Z</updated>
    
    <content type="html"><![CDATA[<p>If you add <code>ping</code> attribute to your anchor elements like this <code>&lt;a ping=&quot;/track&quot; ...&gt;</code>, the any time the user clicks on the anchor, the browser sends POST request to the <code>/track</code> endpoint. This blog post shows how to confirm this behavior using Cypress.</p><!-- toc --><ul><li><a href="#video">Video</a></li><li><a href="#application">Application</a></li><li><a href="#the-test">The test</a></li><li><a href="#the-firefox-exception">The Firefox exception</a></li><li><a href="#the-firefox-flag">The Firefox flag</a></li></ul><!-- tocstop --><h2><span id="video">Video</span></h2><p>If you prefer learning about the ping attribute by watching a short video, I have recorded this:</p><center><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/OiVFiLnmXEM" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="application">Application</span></h2><blockquote class="pullquote"><p>🧭 You can find this application example and described tests in the <a href="https://github.com/cypress-io/cypress-example-recipes#stubbing-and-spying">Stubbing using <code>cy.intercept</code></a> recipe.</p></blockquote><p>Our application has an anchor element with <code>ping</code> attribute</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/page2.html&quot;</span> <span class="attr">ping</span>=<span class="string">&quot;/track&quot;</span>&gt;</span>Go to page 2 (with ping)<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can see the browser sending the request to the server when we go from the first page using the link. Since we do not have a backend responding the the <code>POST /track</code> call, the browser receives 404.</p><p><img src="/blog/images/anchor-ping/click.gif" alt="Navigating through an anchor with ping attribute"></p><p>If we inspect the <code>/track</code> request, we can find two request headers that track the click: <code>Ping-From</code> and <code>Ping-To</code>.</p><p><img src="/blog/images/anchor-ping/ping-from.png" alt="Tracking request headers"></p><p>Can we confirm the tracking request is happening? We need some tests.</p><h2><span id="the-test">The test</span></h2><p>In our test, we need to visit the page, set up the intercept, click on the button, and then check the intercept. Since there is no backend right now, we can use a network stub. Here is our test.</p><figure class="highlight js"><figcaption><span>cypress/integration/ping-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;intercept&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;stubs anchor ping&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.intercept(&#123;</span><br><span class="line">      method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">      pathname: <span class="string">&#x27;/track&#x27;</span>,</span><br><span class="line">    &#125;, &#123;&#125;).as(<span class="string">&#x27;ping&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    cy.get(<span class="string">&#x27;a[ping]&#x27;</span>).click()</span><br><span class="line">    cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/page2.html&#x27;</span>)</span><br><span class="line">    cy.wait(<span class="string">&#x27;@ping&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes</p><p><img src="/blog/images/anchor-ping/test-passes.png" alt="Passing test confirms the browser sends the tracking request"></p><p>Let&#39;s also confirm the tracking request has the expected <code>Ping-From</code> and <code>Ping-to</code> headers. Note the headers are normalized to lowercase in the intercept:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cy.wait(<span class="string">&#x27;@ping&#x27;</span>)</span><br><span class="line">  .its(<span class="string">&#x27;request.headers&#x27;</span>).should(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">    <span class="string">&#x27;ping-from&#x27;</span>: <span class="string">&#x27;http://localhost:7080/&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ping-to&#x27;</span>: <span class="string">&#x27;http://localhost:7080/page2.html&#x27;</span>,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>The above test confirms the request headers include the above two lines</p><p><img src="/blog/images/anchor-ping/confirm-headers.png" alt="Confirming the headers"></p><h2><span id="the-firefox-exception">The Firefox exception</span></h2><p>The anchor ping attribute is <a href="https://caniuse.com/?search=anchor%20ping">widely supported</a> by the modern browsers, except the Firefox browser puts it behind a flag for privacy reasons.</p><p><img src="/blog/images/anchor-ping/caniuse.png" alt="Anchor ping feature as reported by caniuse.com"></p><p>Thus our test can run in every browser but firefox. We can skip it using <a href="https://on.cypress.io/configuration#Test-Configuration">pre-test configuration</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;stubs anchor ping&#x27;</span>, &#123; <span class="attr">browser</span>: <span class="string">&#x27;!firefox&#x27;</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>When we run this spec in Firefox browser we see it skipped</p><p><img src="/blog/images/anchor-ping/firefox-skipped-test.png" alt="Firefox skips the test"></p><h2><span id="the-firefox-flag">The Firefox flag</span></h2><p>What if we do want to run the test in the Firefox browser? We could enable the &quot;browser.send_pings&quot; flag by opening a new tab at &quot;about:config&quot;, finding the flag, and setting it to true.</p><p><img src="/blog/images/anchor-ping/send_pings.gif" alt="Enable browser.send_pings to make the test pass in Firefox"></p><p>Great, we can flip the flag manually, but what about CI? Can we set this Firefox feature flag programmatically?</p><p>Yes, we can - via <a href="https://on.cypress.io/browser-launch-api">browser launch API</a>. Inside the plugin file we can flip the flag:</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  on(<span class="string">&#x27;before:browser:launch&#x27;</span>, <span class="function">(<span class="params">browser = &#123;&#125;, launchOptions</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (browser.family === <span class="string">&#x27;firefox&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// One of the tests uses &lt;a ping=&quot;...&quot;&gt; feature that</span></span><br><span class="line">      <span class="comment">// is behind a flag in Firefox browser.</span></span><br><span class="line">      <span class="comment">// We can programmatically enable an option</span></span><br><span class="line">      <span class="comment">// in Firefox using launch options</span></span><br><span class="line">      launchOptions.preferences[<span class="string">&#x27;browser.send_pings&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// whatever you return here becomes the launchOptions</span></span><br><span class="line">    <span class="keyword">return</span> launchOptions</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/blog/images/anchor-ping/terminal.png" alt="The anchor ping test running in headless Firefox browser"></p><p>Now our tests pass on CI in all browsers.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you add &lt;code&gt;ping&lt;/code&gt; attribute to your anchor elements like this &lt;code&gt;&amp;lt;a ping=&amp;quot;/track&amp;quot; ...&amp;gt;&lt;/code&gt;, the any time
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Deploy E-Commerce Site to Netlify and Test Using GitHub Actions</title>
    <link href="https://glebbahmutov.com/blog/tested-ecommerce/"/>
    <id>https://glebbahmutov.com/blog/tested-ecommerce/</id>
    <published>2021-02-19T05:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.364Z</updated>
    
    <content type="html"><![CDATA[<p>This blog post shows how to deploy a Netlify e-commerce site. The site uses Netlify functions and Stripe payment system. To ensure the site works, we will run a full end-to-end Cypress test after each deploy by triggering a GitHub workflow.</p><!-- toc --><ul><li><a href="#repo">Repo</a></li><li><a href="#end-to-end-test">End-to-end test</a></li><li><a href="#deploying-to-netlify">Deploying to Netlify</a><ul><li><a href="#the-dispatch-plugin">The dispatch plugin</a></li><li><a href="#the-workflow">The workflow</a></li></ul></li><li><a href="#record-to-cypress-dashboard">Record to Cypress Dashboard</a><ul><li><a href="#status-check">Status check</a></li><li><a href="#parallel-tests">Parallel tests</a></li></ul></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><p><img src="/blog/images/tested-ecommerce/site.png" alt="The deployed and tested e-commerce site"></p><h2><span id="repo">Repo</span></h2><p>I have cloned a simple e-commerce site <a href="https://github.com/sdras/ecommerce-netlify">sdras/ecommerce-netlify</a> to <a href="https://github.com/bahmutov/ecommerce-netlify">bahmutov/ecommerce-netlify</a> and set up deploying to Netlify. You can find the site at <a href="https://tested-ecommerce-store.netlify.app/">tested-ecommerce-store.netlify.app</a> and its deploy logs at <a href="https://app.netlify.com/sites/tested-ecommerce-store/deploys">Netlify</a>. In this blog post I will show how to write a simple end-to-end test for the site. The test should run after each preview and production deploy to make sure the site&#39;s customer can actually buy items from the online store.</p><p>Or at least pretend they do - the site does no-op after the Stripe payment.</p><p>The interesting part is triggering the CI build after Netlify deploys the site. Instead of <a href="/blog/test-netlify/" title="testing on Netlify">testing on Netlify</a> via <a href="https://github.com/cypress-io/netlify-plugin-cypress">netlify-plugin-cypress</a> build plugin, we are going to trigger our GitHub Actions workflow by using the <a href="https://github.com/bahmutov/netlify-plugin-github-dispatch">netlify-plugin-github-dispatch</a>. Running the tests on GitHub Actions allows us to run multiple test jobs in parallel, use Chrome or Firefox browser, and run tests on every major operating system. The Netlify Build is still limited to a single container and, compared to GitHub Actions, is more expensive.</p><h2><span id="end-to-end-test">End-to-end test</span></h2><p>I will install <a href="https://github.com/cypress-io/cypress">Cypress</a> and write a few basic tests. The most important test goes through the entire workflow: selects a few items, goes to the cart page, enters the credit card number, and ends up on the &quot;thank you for your order&quot; page. In this blog post I am using Cypress v6.5.0.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line">describe(<span class="string">&#x27;e-commerce site&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;sells two items&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.contains(<span class="string">&#x27;nav li&#x27;</span>, <span class="string">&#x27;Men&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">    cy.log(<span class="string">&#x27;**men\&#x27; items**&#x27;</span>)</span><br><span class="line">    cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/men&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// let&#x27;s not go crazy here, $30 is plenty!</span></span><br><span class="line">    <span class="comment">// we change the max value by setting the value</span></span><br><span class="line">    <span class="comment">// of the slider and then triggering the &quot;input&quot; event</span></span><br><span class="line">    cy.get(<span class="string">&#x27;#pricerange&#x27;</span>).invoke(<span class="string">&#x27;val&#x27;</span>, <span class="number">30</span>).trigger(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check the number of items &lt; $30</span></span><br><span class="line">    cy.get(<span class="string">&#x27;.content .item&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">      .first()</span><br><span class="line">      .click()</span><br><span class="line"></span><br><span class="line">    cy.log(<span class="string">&#x27;**item page**&#x27;</span>)</span><br><span class="line">    cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;match&#x27;</span>, <span class="regexp">/\/product\//</span>)</span><br><span class="line">    cy.contains(<span class="string">&#x27;.product-info h1&#x27;</span>, <span class="string">&#x27;Armin Basilio&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;.size-picker&#x27;</span>).select(<span class="string">&#x27;Large&#x27;</span>)</span><br><span class="line">    <span class="comment">// this jacket is so lovely, let&#x27;s order 2</span></span><br><span class="line">    cy.contains(<span class="string">&#x27;.update-num&#x27;</span>, <span class="string">&#x27;+&#x27;</span>).click()</span><br><span class="line">    cy.get(<span class="string">&#x27;.quantity input[type=number]&#x27;</span>).should(<span class="string">&#x27;have.value&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">    cy.contains(<span class="string">&#x27;.purchase&#x27;</span>, <span class="string">&#x27;Add to Cart&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">    cy.contains(<span class="string">&#x27;nav .carttotal&#x27;</span>, <span class="number">2</span>) <span class="comment">// the little badge is present</span></span><br><span class="line">    <span class="comment">// spy on the Netlify function call</span></span><br><span class="line">    cy.intercept(&#123;</span><br><span class="line">      method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">      pathname: <span class="string">&#x27;/.netlify/functions/create-payment-intent&#x27;</span></span><br><span class="line">    &#125;).as(<span class="string">&#x27;paymentIntent&#x27;</span>)</span><br><span class="line">    cy.contains(<span class="string">&#x27;nav li&#x27;</span>, <span class="string">&#x27;Cart&#x27;</span>).click()</span><br><span class="line">    cy.log(<span class="string">&#x27;**cart page**&#x27;</span>)</span><br><span class="line">    cy.wait(<span class="string">&#x27;@paymentIntent&#x27;</span>)</span><br><span class="line">      .its(<span class="string">&#x27;response.body&#x27;</span>)</span><br><span class="line">      .then(<span class="built_in">JSON</span>.parse)</span><br><span class="line">      .should(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;clientSecret&#x27;</span>)</span><br><span class="line">    <span class="comment">// always confirm the total before paying</span></span><br><span class="line">    cy.contains(<span class="string">&#x27;.total .golden&#x27;</span>, <span class="string">&#x27;$41.98&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    cy.log(<span class="string">&#x27;**fill payment**&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;input#email&#x27;</span>).type(<span class="string">&#x27;test@test.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// working with cross-origin Stripe iframe</span></span><br><span class="line">    <span class="comment">// https://www.cypress.io/blog/2020/02/12/working-with-iframes-in-cypress/</span></span><br><span class="line">    <span class="keyword">const</span> ccNumber = <span class="string">&#x27;4242424242424242&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> month = <span class="string">&#x27;12&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> year = <span class="string">&#x27;30&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> cvc = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> zipCode = <span class="string">&#x27;90210&#x27;</span></span><br><span class="line">    getIframeBody(<span class="string">&#x27;.stripe-card iframe&#x27;</span>)</span><br><span class="line">      .find(<span class="string">&#x27;input[name=cardnumber]&#x27;</span>).type(<span class="string">`<span class="subst">$&#123;ccNumber&#125;</span><span class="subst">$&#123;month&#125;</span><span class="subst">$&#123;year&#125;</span><span class="subst">$&#123;cvc&#125;</span><span class="subst">$&#123;zipCode&#125;</span>`</span>)</span><br><span class="line">    cy.contains(<span class="string">&#x27;.pay-with-stripe&#x27;</span>, <span class="string">&#x27;Pay with credit card&#x27;</span>).click()</span><br><span class="line">    <span class="comment">// if the payment went through</span></span><br><span class="line">    cy.contains(<span class="string">&#x27;.success&#x27;</span>, <span class="string">&#x27;Success!&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// automatically resets to empty cart</span></span><br><span class="line">    cy.scrollTo(<span class="string">&#x27;top&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;nav .carttotal&#x27;</span>, &#123;<span class="attr">timeout</span>: <span class="number">6000</span>&#125;).should(<span class="string">&#x27;not.exist&#x27;</span>) <span class="comment">// the little badge is gone</span></span><br><span class="line">    cy.contains(<span class="string">&#x27;Your cart is empty, fill it up!&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Little utility to find an iframe</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see </span>https://www.cypress.io/blog/2020/02/12/working-with-iframes-in-cypress/</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> getIframeBody = <span class="function">(<span class="params">iframeSelector</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// get the iframe &gt; document &gt; body</span></span><br><span class="line">    <span class="comment">// and retry until the body element is not empty</span></span><br><span class="line">    <span class="keyword">return</span> cy</span><br><span class="line">    .get(iframeSelector)</span><br><span class="line">    .its(<span class="string">&#x27;0.contentDocument.body&#x27;</span>).should(<span class="string">&#x27;not.be.empty&#x27;</span>)</span><br><span class="line">    <span class="comment">// wraps &quot;body&quot; DOM element to allow</span></span><br><span class="line">    <span class="comment">// chaining more Cypress commands, like &quot;.find(...)&quot;</span></span><br><span class="line">    <span class="comment">// https://on.cypress.io/wrap</span></span><br><span class="line">    .then(cy.wrap)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test runs for 10 seconds - most of it waiting for the cart to reset to empty after the successful purchase.</p><p><img src="/blog/images/tested-ecommerce/purchase-test.gif" alt="The purchase user journey"></p><p>Let&#39;s run this test on CI.</p><p><strong>Tip:</strong> I am skipping writing more tests in favor of showing the entire testing setup in this blog post. But one thing I would add is going through the same test with <a href="https://on.cypress.io/viewport">mobile viewport</a> to make sure the site works for users using smaller screens. See <a href="https://www.cypress.io/blog/2019/12/06/use-meaningful-smoke-tests/">Use meaningful smoke tests</a> for example. I would also immediately add a few <a href="https://on.cypress.io/visual-testing">visual tests</a>. A full page screenshot at each major step along the customer journey would ensure we do not accidentally deploy a site with layout or styles problems.</p><h2><span id="deploying-to-netlify">Deploying to Netlify</span></h2><p>We will build the static site and deploy using Netlify Build process. Since we are NOT going to run Cypress on Netlify, there is no point in installing it. We can set <a href="https://on.cypress.io/installing#Skipping-installation">skip installing</a> by setting the <code>CYPRESS_INSTALL_BINARY=0</code> environment variable under the &quot;Deploy Settings&quot; on Netlify or in our <code>netlify.toml</code> file.</p><h3><span id="the-dispatch-plugin">The dispatch plugin</span></h3><p>At the end of the deploy we will trigger a GitHub Actions workflow in this repository, allowing the Workflow to install Cypress and run E2E tests against the deployed URL. To trigger the GitHub workflow we need to use the Netlify Build plugin <a href="https://github.com/bahmutov/netlify-plugin-github-dispatch">netlify-plugin-github-dispatch</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add -D netlify-plugin-github-dispatch</span></span><br><span class="line">info Direct dependencies</span><br><span class="line">└─ netlify-plugin-github-dispatch@1.0.3</span><br></pre></td></tr></table></figure><p>We need to <a href="https://github.com/settings/tokens/new">create a GitHub token</a> with &quot;repo&quot; permissions so that the plugin can create the new workflow run. Keep this token secret and set it as environment variable <code>GITHUB_TOKEN</code> under Netlify build settings &quot;Environment&quot;</p><p><img src="/blog/images/tested-ecommerce/set-token.png" alt="Set the GITHUB_TOKEN in Netlify Build environment"></p><p>And then add the plugin to the <code>netlify.toml</code> file. Here is our project&#39;s <a href="https://github.com/bahmutov/ecommerce-netlify/blob/main/netlify.toml">netlify.toml</a> file.</p><figure class="highlight toml"><figcaption><span>netlify.toml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[build]</span></span><br><span class="line">  <span class="attr">command</span> = <span class="string">&quot;yarn generate&quot;</span></span><br><span class="line">  <span class="attr">functions</span> = <span class="string">&quot;functions&quot;</span></span><br><span class="line">  <span class="attr">publish</span> = <span class="string">&quot;dist&quot;</span></span><br><span class="line"><span class="section">[build.environment]</span></span><br><span class="line">  <span class="comment"># skip installing Cypress during the build step</span></span><br><span class="line">  <span class="comment"># because we will run Cypress tests in the GitHub workflow</span></span><br><span class="line">  <span class="attr">CYPRESS_INSTALL_BINARY</span> = <span class="string">&quot;0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[plugins]]</span></span><br><span class="line">  <span class="attr">package</span> = <span class="string">&quot;netlify-plugin-github-dispatch&quot;</span></span><br><span class="line">  <span class="section">[plugins.inputs]</span></span><br><span class="line">    <span class="attr">owner</span> = <span class="string">&quot;bahmutov&quot;</span></span><br><span class="line">    <span class="attr">repo</span> = <span class="string">&quot;ecommerce-netlify&quot;</span></span><br><span class="line">    <span class="attr">workflow</span> = <span class="string">&quot;.github/workflows/e2e.yml&quot;</span></span><br></pre></td></tr></table></figure><p>We have provided the <code>inputs</code> object with configuration. We basically just pointed back at the repository. But here it a pro tip: we could have triggered a GitHub Actions workflow in any repository at the end of the Netlify deploy, as long as we have the right permissions! Thus our end-to-end tests could reside in a separate repository from our web application. I personally prefer to keep the tests and the app in the same repository; it helps keep them in sync.</p><h3><span id="the-workflow">The workflow</span></h3><p>We need a workflow to trigger at the end of the Netlify deploy. GitHub workflows can be triggered by different events, <code>push</code> and <code>pull_request</code> being the most common. We will use <code>workflow_dispatch</code>, which is a special event that can easily be triggered by the outside services or <a href="https://www.youtube.com/watch?v=4TeSOj2Iy_Q">even manually</a>.</p><p>We should create the workflow using the same relative path as entered in the dispatch inputs, in our case it will be file <code>.github/workflows/e2e.yml</code>.</p><p>Notice how we set up the <code>workflow_dispatch</code> inputs - we need to receive the <code>deployPrimeUrl</code> parameter - that&#39;s the Netlify URL our plugin will send. A good tip is to print it later to make it obvious in the CI logs using <code>echo &quot;Testing url $&#123;&#123; github.event.inputs.deployPrimeUrl &#125;&#125;&quot;</code> command.</p><figure class="highlight yml"><figcaption><span>.github/workflows/e2e.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test the deployed Netlify site</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">e2e</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">siteName:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Netlify</span> <span class="string">Site</span> <span class="string">Name</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">deployPrimeUrl:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Deployed</span> <span class="string">URL</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">show-event:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;Current Git info $GITHUB_WORKFLOW $GITHUB_REF $GITHUB_SHA&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;Testing url $<span class="template-variable">&#123;&#123; github.event.inputs.deployPrimeUrl &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">⬇️</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># test the deployed site using</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span> <span class="string">🏃‍♀️</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">config:</span> <span class="string">baseUrl=$&#123;&#123;</span> <span class="string">github.event.inputs.deployPrimeUrl</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>We are using the <a href="https://github.com/cypress-io/github-action">Cypress GitHub Action</a> to install, cache, and execute Cypress. The only thing we need to configure is the <a href="https://on.cypress.io/configuration">baseUrl</a> option to point at the deploy URL.</p><p><img src="/blog/images/tested-ecommerce/run.png" alt="GitHub Actions run"></p><p>Great! The tests have passed, the preview deploy is working.</p><h2><span id="record-to-cypress-dashboard">Record to Cypress Dashboard</span></h2><p>How does our site look during testing? What happens if a test fails? The simplest way to find out is to record the test results to <a href="https://on.cypress.io/dashboard-introduction">Cypress Dashboard</a>. From Cypress running locally, click the &quot;Runs&quot; tab.</p><p><img src="/blog/images/tested-ecommerce/set-up-recording.png" alt="Set up project to record to Cypress Dashboard"></p><p>Follow the steps and store the created private recording key under the repository&#39;s secrets.</p><p><img src="/blog/images/tested-ecommerce/add-secret.png" alt="GitHub Actions run"></p><p><strong>Tip:</strong> I keep it simple and use the same name for the secret as for the environment variable.</p><p>Now let&#39;s modify our workflow file to tell Cypress to record the test results to Cypress Dashboard.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test the deployed site using</span></span><br><span class="line"><span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span> <span class="string">🏃‍♀️</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">config:</span> <span class="string">baseUrl=$&#123;&#123;</span> <span class="string">github.event.inputs.deployPrimeUrl</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CYPRESS_RECORD_KEY</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>Let&#39;s open a pull request and we should see the Dashboard run URL in the Cypress output</p><p><img src="/blog/images/tested-ecommerce/run-url.png" alt="Recorded run shows the Dashboard run URL"></p><p>We can go the Dashboard and see the test results, view the video of the run, etc.</p><p><img src="/blog/images/tested-ecommerce/dashboard.gif" alt="Cypress Dashboard plays the video of the Test Runner"></p><p>You can see the recorded test results yourself by clicking on this badge</p><p><a href="https://dashboard.cypress.io/projects/nz8crj/runs"><img src="https://img.shields.io/endpoint?url=https://dashboard.cypress.io/badge/simple/nz8crj/main&amp;style=flat&amp;logo=cypress" alt="ecommerce-netlify"></a></p><h3><span id="status-check">Status check</span></h3><p>Notice that our pull request does not show the E2E workflow&#39;s status amongst the checks. Only the Netlify checks are present.</p><p><img src="/blog/images/tested-ecommerce/checks.png" alt="GitHub pull request shows only Netlify checks"></p><p>This is because we do not associate the triggered workflow with the pull request. The best way I know to comment on the pull request with test status is <a href>Cypress GitHub Integration</a> app. And I am not saying this just because I work at Cypress - no, it really makes sense to just flip the switch.</p><p>Scroll in the Cypress Dashboard project settings to &quot;GitHub Integration&quot;</p><p><img src="/blog/images/tested-ecommerce/github-app.png" alt="GitHub Integration"></p><p>Pick the repo from the dropdown list. If the repo is not listed, you need to adjust the Cypress GitHub App&#39;s permissions under your GitHub settings and allow the app to access the repository.</p><p>After selecting the &quot;bahmutov/ecommerce-netlify&quot; repository, I flip the switch.</p><p><img src="/blog/images/tested-ecommerce/github-app-set.png" alt="Turn on Cypress GH Integration"></p><p><strong>Tip:</strong> Cypress Dashboard has <a href="https://on.cypress.io/gitlab-integration">GitLab</a> and <a href="https://on.cypress.io/bitbucket-integration">Bitbucket</a> integrations too!</p><p>Let&#39;s test the integration. Let&#39;s open a pull request with a <em>failing test</em>. Netlify deploys the site, and GitHub workflow fails. We can see why in the test results on the Dashboard, plus there is the screenshot at the moment of failure, and the video of the tet run.</p><p><img src="/blog/images/tested-ecommerce/failed-test-run.gif" alt="Looking at the test output and failed screenshot at Cypress Dashboard"></p><p>Now let&#39;s go back to the pull request. Notice the red Cypress status check - this pull request should not be merged! The Cypress integration also comments on the pull request. The comment has the error and even the error screenshot thumbnail.</p><p><img src="/blog/images/tested-ecommerce/failed-pull-request.gif" alt="Cypress GitHub Integration adds the test information to the pull request"></p><p>By running a battery of end-to-end tests we can ensure that every pull request is works, and we are not merging code that would break the production site for our users.</p><h3><span id="parallel-tests">Parallel tests</span></h3><p>If our test set grows, running all tests on a single machine starts to take too long. In that case, we can easily parallelize the tests across multiple GitHub machines. Read the <a href="https://github.com/cypress-io/github-action#parallel">Cypress GH Action documentation</a> and my blog post <a href="/blog/parallel-cypress-tests-gh-action/" title="Split Long GitHub Action Workflow Into Parallel Cypress Jobs">Split Long GitHub Action Workflow Into Parallel Cypress Jobs</a>. With all we have done so far, running the job in parallel should be easy.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/test-netlify/" title="Test Sites Deployed To Netlify Using netlify-plugin-cypress">Test Sites Deployed To Netlify Using netlify-plugin-cypress</a></li><li><a href="/blog/trying-github-actions/" title="Trying GitHub Actions">Trying GitHub Actions</a></li><li><a href="/blog/parallel-cypress-tests-gh-action/" title="Split Long GitHub Action Workflow Into Parallel Cypress Jobs">Split Long GitHub Action Workflow Into Parallel Cypress Jobs</a></li><li><a href="https://github.com/cypress-io/github-action">Cypress GitHub Action</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This blog post shows how to deploy a Netlify e-commerce site. The site uses Netlify functions and Stripe payment system. To ensure the si
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="cypress dashboard" scheme="https://glebbahmutov.com/blog/tags/cypress-dashboard/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
      <category term="netlify" scheme="https://glebbahmutov.com/blog/tags/netlify/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
  </entry>
  
</feed>
