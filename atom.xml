<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Better world by better software</title>
  
  <subtitle>Gleb Bahmutov PhD</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://glebbahmutov.com/blog/"/>
  <updated>2022-04-15T16:48:31.206Z</updated>
  <id>https://glebbahmutov.com/blog/</id>
  
  <author>
    <name>Gleb Bahmutov</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>When Can The Test Click</title>
    <link href="https://glebbahmutov.com/blog/when-can-the-test-click/"/>
    <id>https://glebbahmutov.com/blog/when-can-the-test-click/</id>
    <published>2022-04-15T04:00:00.000Z</published>
    <updated>2022-04-15T16:48:31.206Z</updated>
    
    <content type="html"><![CDATA[<p>Many many moons ago I wrote a blog post <a href="https://www.cypress.io/blog/2019/01/22/when-can-the-test-click/">When Can The Test Click?</a>. It was part of a <a href="https://www.cypress.io/blog/tag/flake/">series of blog posts</a> that explain why an end-to-end test might be flaky. The main reason in my opinion that causes a test to sometimes not work, is that the test runner does not <em>know</em> when the application is ready to receive test commands, like click. There might be many reasons why that is the case, but one of the hardest to reliably solve is knowing when the application has finished its initial load. Is the application ready to receive the user click? Or does it need extra 100ms to finish loading and starting its JavaScript code? I have discussed a possible solution in the blog post <a href="/blog/app-loaded/" title="When Has The App Loaded">When Has The App Loaded</a>. In this blog post, I will show another solution that goes directly to the heart of the problem of &quot;missing&quot; clicks - checking if the application has attached its event listeners to the button before clicking on it.</p><h2><span id="the-problem">The problem</span></h2><p>Let&#39;s take an application that responds to a button click event.</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">output</span> <span class="attr">id</span>=<span class="string">&quot;output&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#one&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> output = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#output&#x27;</span>)</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  output.<span class="property">innerText</span> = <span class="string">&#x27;clicked&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above application registers the event handler synchronously. When the <code>cy.visit</code> command finishes, the application is ready to go.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec1.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;clicks on the button&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;button#one&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;#output&#x27;</span>, <span class="string">&#x27;clicked&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test reliably passes.</p><p><img src="../images/when-click/spec1.png" alt="The test can immediately click on the button"></p><p>But what if the application delays its load? What if it attaches the &quot;click&quot; event listener by one second? What if the application is slowly loading chunks of its code? While the user sees the page elements, they are not ready to process any events, and the test fails.</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#one&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> output = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#output&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// add event listeners after a short delay</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    output.<span class="property">innerText</span> = <span class="string">&#x27;clicked&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>The same test now fails - because the &quot;click&quot; even gets lost. The test runner clicks before the application starts listening.</p><p><img src="../images/when-click/click-fails.gif" alt="The test fails because it clicks before the application registers the click event handler"></p><h2><span id="the-diagnosis">The diagnosis</span></h2><p>A good way to determine if the test acts before the application is ready to respond is to add <a href="https://on.cypress.io/wait">cy.wait</a> commands. You can wait for some external <a href="/blog/app-loaded/" title="observable event">observable event</a>, or simply wait N milliseconds (I know, I know, but this is temporary).</p><figure class="highlight js"><figcaption><span>cypress/integration/spec1.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;clicks on the button&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// let the application fully load</span></span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="number">5000</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;button#one&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;#output&#x27;</span>, <span class="string">&#x27;clicked&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test now reliably passes</p><p><img src="../images/when-click/wait5.png" alt="The test waits five seconds before clicking"></p><p>How can we avoid the hard-coded wait, and instead click after the application is ready to receive the &quot;click&quot; event?</p><h2><span id="event-listeners">Event listeners</span></h2><p>If you open the DevTools and look at the button DOM element, the tab &quot;Event Listeners&quot; shows the currently attached ... event listeners.</p><p><img src="../images/when-click/event-listener.png" alt="The button element has the click event listener attached"></p><p>This &quot;click&quot; event listener is attached to the element by the application code after it is done initializing.</p><h2><span id="cypress-cdp">cypress-cdp</span></h2><p>Hmm, if only our test could wait for this event listener to exist before clicking... Well, let&#39;s check! If the DevTools panel can query an element to show its event listeners, we can do the same thing from Cypress using Chrome Debugger Protocol. After all, Cypress has this connection already and even exposes it to the test code, as I show in my blog post <a href="/blog/cypress-vs-other-test-runners/" title="Cypress vs Other Test Runners">Cypress vs Other Test Runners</a>. In general, this looks like</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cypress</span>.<span class="title function_">automation</span>(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">command</span>: rdpCommand,</span><br><span class="line">  params,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Because <code>Cypress.automation</code> is a very low-level primitive, it eagerly returns a Promise, which your code needs to <code>cy.wrap(Promise)</code> to wait to resolve. But since I am a nice person, I wrote a little NPM plugin that exposes the Chrome Debugger Protocol via a Cypress custom command <code>cy.CDP</code>. You can find the source code in the repo <a href="https://github.com/bahmutov/cypress-cdp">bahmutov&#x2F;cypress-cdp</a>.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress-cdp</span><br></pre></td></tr></table></figure><p>In your support or spec file, import the <code>cypress-cdp</code> and you will get the <code>cy.CDP</code> command. Let&#39;s use it to wait for the event listeners to be attached. First, we need to find the internal browser object ID for the button we want to click. We can ask the <code>Runtime</code> object to <code>evaluate</code> the expression in the application&#39;s iframe:</p><figure class="highlight js"><figcaption><span>cypress/integration/click.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-cdp&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;clicks on the button when there is an event handler&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> selector = <span class="string">&#x27;button#one&#x27;</span></span><br><span class="line">  cy.<span class="title function_">CDP</span>(<span class="string">&#x27;Runtime.evaluate&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">expression</span>: <span class="string">&#x27;frames[0].document.querySelector(&quot;&#x27;</span> + selector + <span class="string">&#x27;&quot;)&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">expect</span>(v.<span class="property">result</span>).<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">property</span>(<span class="string">&#x27;objectId&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;result.objectId&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The command <code>cy.CDP</code> has DOM snapshots and checks the attached assertions, so it is meant to be retry-able. You can see the button&#39;s internal object ID printed in the Command Log.</p><p><img src="../images/when-click/button-id.png" alt="We got the internal button ID from the browser using the Chrome Debugger Protocol"></p><p>Now that we have the ID, let&#39;s query the event listeners - and because the <code>cy.CDP</code> command retries the assertions that follow it, we can check the returned event listeners array. If there are no event listeners (we could also check their types), then we can throw an error to re-query the element.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;clicks on the button when there is an event handler&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> selector = <span class="string">&#x27;button#one&#x27;</span></span><br><span class="line">  cy.<span class="title function_">CDP</span>(<span class="string">&#x27;Runtime.evaluate&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">expression</span>: <span class="string">&#x27;frames[0].document.querySelector(&quot;&#x27;</span> + selector + <span class="string">&#x27;&quot;)&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">expect</span>(v.<span class="property">result</span>).<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">property</span>(<span class="string">&#x27;objectId&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;result.objectId&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">objectId</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">CDP</span>(<span class="string">&#x27;DOMDebugger.getEventListeners&#x27;</span>, &#123;</span><br><span class="line">        objectId,</span><br><span class="line">        <span class="attr">depth</span>: -<span class="number">1</span>,</span><br><span class="line">        <span class="attr">pierce</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;).<span class="title function_">should</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">expect</span>(v.<span class="property">listeners</span>).<span class="property">to</span>.<span class="property">have</span>.<span class="property">length</span>.<span class="title function_">greaterThan</span>(<span class="number">0</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// now we can click that button</span></span><br><span class="line">  cy.<span class="title function_">get</span>(selector).<span class="title function_">click</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Does it work? Let&#39;s see:</p><p><img src="../images/when-click/clicked.gif" alt="The test waits for the event listener to be attached before clicking"></p><p>Beautiful!</p><p><strong>Tip:</strong> you can find the full list of Chrome Debugger Protocol commands <a href="https://chromedevtools.github.io/devtools-protocol/">here</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Many many moons ago I wrote a blog post &lt;a href=&quot;https://www.cypress.io/blog/2019/01/22/when-can-the-test-click/&quot;&gt;When Can The Test Click
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Elements Visible In The Current Viewport</title>
    <link href="https://glebbahmutov.com/blog/visible-in-the-viewport/"/>
    <id>https://glebbahmutov.com/blog/visible-in-the-viewport/</id>
    <published>2022-04-13T04:00:00.000Z</published>
    <updated>2022-04-14T14:50:11.855Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine your application loads in stages and shows several loading elements. There are two loading elements visible to the user right away (above the fold), and one more loading element below the fold. Here is a sample page showing this situation:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;page1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loading&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loading&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;page2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loading&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The <code>#page1</code> and <code>#page2</code> sections are marked with different colors. Each is 1000x1000 pixels and if we zoom out look like this:</p><p><img src="../images/visible-in-the-viewport/sections.png" alt="Two sections with three loading elements"></p><p><strong>Tip:</strong> I set the viewport width and height as 1000 pixels in the <code>cypress.json</code> file. To show the two sections at once, I modified the viewport height using per-test configuration:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;loads&#x27;</span>, &#123; <span class="attr">viewportHeight</span>: <span class="number">2000</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>🎁 You can find the source code and the tests shown in this bog post in the repo <a href="https://github.com/bahmutov/loading-elements">bahmutov&#x2F;loading-elements</a>.</p></blockquote><p><strong>Video:</strong> I have recorded a <a href="https://youtu.be/XLgwQsSa9PM">short video</a> showing how to check the loading elements in the current viewport. You can watch the video below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/XLgwQsSa9PM" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>The application &quot;loads&quot; and removes the first two loading elements.</p><figure class="highlight js"><figcaption><span>public/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [loading1, loading2] = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;#page1 .loading&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hiding the first loading element&#x27;</span>)</span><br><span class="line">  loading1.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;removing the second loading element&#x27;</span>)</span><br><span class="line">  loading2.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(loading2)</span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>If we want to check if the loading elements <em>above</em> the fold disappear, we cannot just check the visibility - because it will include the third loading element that is still visible, even if the user cannot see it without scrolling.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;the loading element below the fold never goes away&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// at first, all loading elements are visible</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.loading&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>).<span class="title function_">and</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  <span class="comment">// the loaders on the first page disappear</span></span><br><span class="line">  <span class="comment">// but the loader on the second page is still visible</span></span><br><span class="line">  <span class="comment">// so the next assertion fails</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.loading&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/visible-in-the-viewport/failing-test.gif" alt="The test fails, as the third loading element remains visible below the fold"></p><p>How do we check if the loading elements inside the <em>current viewport</em> are no longer visible? By using the bounding rectangle of the elements before checking them! See the documentation for the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect">Element.getBoundingClientRect</a> which returns the rectangle in the current viewport. I took this chart from the documentation page:</p><p><img src="../images/visible-in-the-viewport/element-box-diagram.png" alt="The element bounding box, source: Mozilla Developer docs"></p><p>If the bottom of the element is less than zero, then the element is above the current viewport. If the top of the element is larger than the viewport height, then the element is still below the current viewport. Similarly, we can check the Let me write a custom command to repeatedly check the DOM until the elements in the current viewport become hidden.</p><figure class="highlight js"><figcaption><span>cypress/integration/support.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Cypress</span>.<span class="property">Commands</span>.<span class="title function_">add</span>(<span class="string">&#x27;invisibleInViewport&#x27;</span>, <span class="function">(<span class="params">selector</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">window</span>(&#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// get the current viewport of the application</span></span><br><span class="line">    <span class="keyword">const</span> &#123; innerHeight, innerWidth &#125; = win</span><br><span class="line">    cy.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; innerHeight, innerWidth &#125;))</span><br><span class="line"></span><br><span class="line">    cy.<span class="title function_">get</span>(selector).<span class="title function_">should</span>(<span class="function">(<span class="params">$el</span>) =&gt;</span> &#123;</span><br><span class="line">      $el.<span class="title function_">each</span>(<span class="function">(<span class="params">k, el</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// skip stray and hidden elements</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title class_">Cypress</span>.<span class="property">dom</span>.<span class="title function_">isAttached</span>(el)) &#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title class_">Cypress</span>.<span class="property">dom</span>.<span class="title function_">isVisible</span>(el)) &#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect</span></span><br><span class="line">        <span class="keyword">const</span> rect = el.<span class="title function_">getBoundingClientRect</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rect.<span class="property">bottom</span> &lt; <span class="number">0</span> || rect.<span class="property">top</span> &gt; innerHeight) &#123;</span><br><span class="line">          <span class="comment">// the element is outside the viewport vertically</span></span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rect.<span class="property">right</span> &lt; <span class="number">0</span> || rect.<span class="property">left</span> &gt; innerWidth) &#123;</span><br><span class="line">          <span class="comment">// the element is outside the viewport horizontally</span></span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`loader <span class="subst">$&#123;k + <span class="number">1</span>&#125;</span> is visible`</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;selector&#125;</span> is invisible in viewport`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let&#39;s make our application even more complicated. We will hide &#x2F; remove all loading elements one by one after 2, 3 and 4.5 seconds.</p><figure class="highlight js"><figcaption><span>public/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [loading1, loading2] = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;#page1 .loading&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> loading3 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#page2 .loading&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hiding the first loading element&#x27;</span>)</span><br><span class="line">  loading1.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;removing the second loading element&#x27;</span>)</span><br><span class="line">  loading2.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(loading2)</span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;removing the third loading element&#x27;</span>)</span><br><span class="line">  loading3.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(loading3)</span><br><span class="line">&#125;, <span class="number">4500</span>)</span><br></pre></td></tr></table></figure><p>Our test will wait for the above the folder loading elements to disappear before scrolling to the bottom of the page and verifying the last loading element is also gone from the view.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec2.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;checks if the loading element is visible within the current viewport&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// at first, both loading elements are visible</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.loading&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>).<span class="title function_">and</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">invisibleInViewport</span>(<span class="string">&#x27;.loading&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">scrollTo</span>(<span class="string">&#x27;bottom&#x27;</span>, &#123; <span class="attr">duration</span>: <span class="number">500</span> &#125;)</span><br><span class="line">  <span class="comment">// there is one more loading element visible here</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.loading:visible&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="comment">// then the last loading element goes away</span></span><br><span class="line">  cy.<span class="title function_">invisibleInViewport</span>(<span class="string">&#x27;.loading&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test works beautifully.</p><p><img src="../images/visible-in-the-viewport/spec2.gif" alt="The test correctly looks at the loading elements in the current viewport"></p><p>Happy Testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine your application loads in stages and shows several loading elements. There are two loading elements visible to the user right awa
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>When Has The App Loaded</title>
    <link href="https://glebbahmutov.com/blog/app-loaded/"/>
    <id>https://glebbahmutov.com/blog/app-loaded/</id>
    <published>2022-03-31T04:00:00.000Z</published>
    <updated>2022-03-31T13:44:22.773Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s take an application that fetches data from the server and write end-to-end tests for it. What happens if the application takes a little bit longer than usual to bootstrap, get the data, and render it? Will the test fail because it does not wait for the data to finish loading?</p><p>The example I am about to show comes from <a href="https://github.com/bahmutov/cypress-workshop-basics">bahmutov&#x2F;cypress-workshop-basics</a>. The test visits the application URL and confirms there are no items on the page.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with zero items&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hmm, the test passes, yet I can clearly see 2 todo items on the page? Is the assertion <code>cy.get(&#39;li.todo&#39;).should(&#39;have.length&#39;, 0)</code> not doing its job?</p><p><img src="../images/app-loaded/todos.png" alt="The test passes when it should have failed"></p><p>The test finishes <em>too quickly</em>. While the application is still loading the data, the assertion <code>cy.get(&#39;li.todo&#39;).should(&#39;have.length&#39;, 0)</code> checks the empty initial page. There are no todo items, and the test completes. Only then the Ajax call returns and the 2 items are rendered on the page. By then the test has finished.</p><p>Note that the <code>.should(&#39;have.length&#39;, 0)</code> assertion is similar to the <code>.should(&#39;not.exist&#39;)</code> assertion. Such negative assertions are dangerous in my opinion, they can pass for the wrong reason (like in our case). Read the blog posts <a href="/blog/negative-assertions/" title="Be Careful With Negative Assertions">Be Careful With Negative Assertions</a> and <a href="/blog/negative-assertions-and-missing-states/" title="Negative Assertions And Missing States">Negative Assertions And Missing States</a> for more examples.</p><h2><span id="waiting-for-the-data-load">Waiting for the data load</span></h2><p>The simplest solution to this problem, is to make the test wait for the data to load. Perhaps a one second delay would be enough?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with zero items (waits)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="number">1000</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Yes, now the test fails as expected, because the page shows the loaded data when the test checks it.</p><p><img src="../images/app-loaded/wait.png" alt="The test waits one second before checking the page"></p><p>Is one second wait enough? It might be enough when running the application locally. When running the tests against a remote server, we might need to wait longer. The worst is when the data load takes approximately one second. It leads to a race condition between the application and the test. Sometimes the application takes slightly longer than one second, and the test fails to detect the data, leading to the <a href="https://on.cypress.io/flaky-test-management">flaky tests</a>.</p><h2><span id="waiting-for-network-call-to-finish">Waiting for network call to finish</span></h2><p>A much better solution is to spy on the Ajax call made by the application and wait for the data to return before checking the page. You can use <a href="https://on.cypress.io/intercept">cy.intercept</a> command to spy on calls made by the application. You can spy on Ajax calls or any resource requested by the browser.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with zero items&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// start Cypress network server</span></span><br><span class="line">  <span class="comment">// spy on route `GET /todos`</span></span><br><span class="line">  <span class="comment">// THEN visit the page</span></span><br><span class="line">  cy.<span class="title function_">intercept</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@todos&#x27;</span>) <span class="comment">// wait for `GET /todos` response</span></span><br><span class="line">    <span class="comment">// inspect the server&#x27;s response</span></span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;response.body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">  <span class="comment">// then check the DOM</span></span><br><span class="line">  <span class="comment">// note that we don&#x27;t have to use &quot;cy.wait(...).then(...)&quot;</span></span><br><span class="line">  <span class="comment">// because all Cypress commands are flattened into a single chain</span></span><br><span class="line">  <span class="comment">// automatically. Thus just write &quot;cy.wait(); cy.get();&quot; naturally</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/app-loaded/network.png" alt="The test waits for the network call to complete"></p><p>The command <code>cy.wait(&#39;@todos&#39;)</code> waits for the network call, even if the call is made later.</p><p>In my application example, I can force the application to wait N seconds before making the initial load.</p><p>The application might delay the Ajax call.</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// state.delay comes from URL query parameter</span></span><br><span class="line"><span class="comment">// ?delay=2000</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">commit</span>(<span class="string">&#x27;SET_LOADING&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  axios</span><br><span class="line">    .<span class="title function_">get</span>(<span class="string">&#x27;/todos&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> r.<span class="property">data</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">todos</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;SET_TODOS&#x27;</span>, todos)</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;SET_LOADING&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;could not load todos&#x27;</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(e.<span class="property">message</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(e.<span class="property">response</span>.<span class="property">data</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// an easy way for the application to signal</span></span><br><span class="line">      <span class="comment">// that it is done loading</span></span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;loaded&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, state.<span class="property">delay</span>)</span><br></pre></td></tr></table></figure><p>The delay makes no difference, the test still correctly waits for the application to load its initial data.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with zero items (delay)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">intercept</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/?delay=2000&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@todos&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Look at the recording below. The Ajax call is detected two seconds after the visit, yet <code>cy.wait(&#39;@todos&#39;)</code> happily waits for it before Cypress proceeds to the next command.</p><p><img src="../images/app-loaded/delay.gif" alt="The test waits for the delayed Ajax call"></p><h2><span id="render-delay">Render delay</span></h2><p>What if our application has a delay between receiving the data and rendering it on the page?</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">axios</span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&#x27;/todos&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> r.<span class="property">data</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">todos</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;SET_TODOS&#x27;</span>, todos)</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;SET_LOADING&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">    &#125;, state.<span class="property">renderDelay</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Hmm, our test again passes when it should have failed.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with zero items (delay plus render delay)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">intercept</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/?delay=2000&amp;renderDelay=1500&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@todos&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/app-loaded/render-delay.gif" alt="The delay between the network call and showing items on the page confuses the test"></p><p>The &quot;missing&quot; step between finishing the network call and rendering the data on the page is exactly the problem I have described in the blog post <a href="/blog/negative-assertions-and-missing-states/" title="Negative Assertions And Missing States">Negative Assertions And Missing States</a>. The test does not &quot;know&quot; that the application is still not done loading. We need an explicit way of signalling from the application to the test runner &quot;I am done loading the data&quot;.</p><h2><span id="observe-the-page">Observe the page</span></h2><p>The best approach to tell that the application has finished loading ... is for application to set something observable to tell the test runner (and the human users) that the data load is done. For example, the application can set a CSS class or a utility data attribute</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">SET_LOADING</span>(<span class="params">state, flag</span>) &#123;</span><br><span class="line">  state.<span class="property">loading</span> = flag</span><br><span class="line">  <span class="keyword">if</span> (flag === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="comment">// an easy way for the application to signal</span></span><br><span class="line">    <span class="comment">// that it is done loading</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;loaded&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then the test can tell when the application has finished loading by observing the <code>&lt;body&gt;</code> element.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with zero items (check body.loaded)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// use delays to simulate the delayed load and render</span></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/?delay=2000&amp;renderDelay=1500&#x27;</span>)</span><br><span class="line">  <span class="comment">// the application sets &quot;loaded&quot; class on the body</span></span><br><span class="line">  <span class="comment">// in the test we can check for this class</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;loaded&#x27;</span>)</span><br><span class="line">  <span class="comment">// then check the number of items</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test behaves correctly and fails as expected.</p><p><img src="../images/app-loaded/body-loaded.gif" alt="The test waits for the body element to have class loaded"></p><p>Note: the assertion <code>.should(&#39;have.class&#39;, &#39;loaded&#39;)</code> passes after 3.5 seconds; the application requests the data after 2 seconds, and renders it after 1.5 seconds. The assertion might time out if the data load takes slightly longer, since the default command timeout is 4 seconds. I would suggest using a longer command time out in this case:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;body&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">7_000</span> &#125;).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;loaded&#x27;</span>)</span><br></pre></td></tr></table></figure><h2><span id="check-the-window-object">Check the window object</span></h2><p>We can use another mechanism to signal the test runner that the application has finished loading the data. We can even pass the data we got from the server!</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">SET_TODOS</span>(<span class="params">state, todos</span>) &#123;</span><br><span class="line">  state.<span class="property">todos</span> = todos</span><br><span class="line">  <span class="comment">// expose the todos via the global &quot;window&quot; object</span></span><br><span class="line">  <span class="comment">// but only if we are running Cypress tests</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">Cypress</span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">todos</span> = todos</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The test then can detect when the <code>window.todos</code> property is set using <a href="https://on.cypress.io/window">cy.window</a> and <a href="https://on.cypress.io/its">cy.its</a> commands.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with zero items (check the window)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// use delays to simulate the delayed load and render</span></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/?delay=2000&amp;renderDelay=1500&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">window</span>().<span class="title function_">its</span>(<span class="string">&#x27;todos&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">7_000</span> &#125;)</span><br><span class="line">  <span class="comment">// then check the number of items</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/app-loaded/window.png" alt="Continue the test when the application sets the window.todos object"></p><p>If we can detect when the <code>window.todos</code> property is set, we can read the actual todos and use them to check the rendered page.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with N items&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// use delays to simulate the delayed load and render</span></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/?delay=2000&amp;renderDelay=1500&#x27;</span>)</span><br><span class="line">  <span class="comment">// access the loaded Todo items</span></span><br><span class="line">  cy.<span class="title function_">window</span>()</span><br><span class="line">    <span class="comment">// you can drill down nested properties using &quot;.&quot;</span></span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;todos.length&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// then check the number of items</span></span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, n)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/app-loaded/todos-n.gif" alt="Using the data from the app to check the rendered page"></p><p>You can even use the <code>window.todos</code> to check what the page renders.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with N items and checks the page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// use delays to simulate the delayed load and render</span></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/?delay=2000&amp;renderDelay=1500&#x27;</span>)</span><br><span class="line">  <span class="comment">// access the loaded Todo items</span></span><br><span class="line">  cy.<span class="title function_">window</span>()</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">todos</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// then check the number of items</span></span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, todos.<span class="property">length</span>)</span><br><span class="line">      todos.<span class="title function_">forEach</span>(<span class="function">(<span class="params">todo</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (todo.<span class="property">completed</span>) &#123;</span><br><span class="line">          cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo&#x27;</span>, todo.<span class="property">title</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo&#x27;</span>, todo.<span class="property">title</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/app-loaded/check-todos.png" alt="Check if the page renders each todo correctly"></p><p>For more on accessing the application data from the Cypress test via the <code>window</code> object, see the blog post <a href="/blog/stub-via-window/" title="Stub Objects By Passing Them Via Window Property">Stub Objects By Passing Them Via Window Property</a>.</p><h2><span id="conclusion">Conclusion</span></h2><p>The test runner should not &quot;run away&quot; from the application. If the application is still loading the data, the test runner should wait for the data to load and the page to be ready to continue testing. In this blog post, I have shown how to wait for the data to load using:</p><ul><li>a hard-coded <code>cy.wait(N)</code> command</li><li>network spy using the <code>cy.intercept</code> command</li><li>a <code>body</code> element property added after the load</li><li>a property on the <code>window</code> object set by the application after the load</li></ul><p>Happy testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s take an application that fetches data from the server and write end-to-end tests for it. What happens if the application takes 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Stub Objects By Passing Them Via Window Property</title>
    <link href="https://glebbahmutov.com/blog/stub-via-window/"/>
    <id>https://glebbahmutov.com/blog/stub-via-window/</id>
    <published>2022-03-30T04:00:00.000Z</published>
    <updated>2022-03-30T12:55:27.063Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine you have an application that imports a config object from another file, and then uses the config to control what it shows on the page.</p><figure class="highlight ts"><figcaption><span>Config.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;Todo App&#x27;</span>,</span><br><span class="line">  <span class="attr">showCount</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>App.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Config</span> <span class="keyword">from</span> <span class="string">&#x27;./Config&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;Config.title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Can you change the <code>Config</code> object from a Cypress end-to-end test?</p><blockquote class="pullquote"><p>🎁 You can find the source code in the repo <a href="https://github.com/bahmutov/stub-window-object-example">bahmutov&#x2F;stub-window-object-example</a></p></blockquote><h2><span id="set-config-on-the-window">Set Config on the window</span></h2><p>To let the test &quot;know&quot; the config values, the simplest is to assign it to a property of the <code>window</code> object.</p><figure class="highlight ts"><figcaption><span>App.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Config</span> <span class="keyword">from</span> <span class="string">&#x27;./Config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">Cypress</span>) &#123;</span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">Config</span> = <span class="title class_">Config</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;Config.title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The test can confirm the keys in the config object, and use the title from the config to check the page.</p><figure class="highlight js"><figcaption><span>cypress/integration/config-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;sets the window config&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">// cy.visit yields the window object</span></span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;Config&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.keys&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;showCount&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">title</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, title)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/stub-via-window/title.png" alt="Checking the title"></p><p><strong>Tip:</strong> I am using <code>// @ts-ignore</code> above some source lines to avoid fighting the TypeScript compiler.</p><p><img src="../images/stub-via-window/ts-ignore.png" alt="Not today, TypeScript"></p><h2><span id="override-the-config-object">Override the config object</span></h2><p>If we can read the config object from the window object, we can also override it. We just need to define a custom property that lets us return a new value from the test. In the application, we make an intermediate variable to pass the config object.</p><figure class="highlight ts"><figcaption><span>App.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _config <span class="keyword">from</span> <span class="string">&#x27;./Config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Config</span> = _config</span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">Cypress</span>) &#123;</span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">Config</span> = <span class="title class_">Config</span></span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  <span class="title class_">Config</span> = <span class="variable language_">window</span>.<span class="property">Config</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// use the Config object</span></span><br></pre></td></tr></table></figure><p>Our Cypress test can intercept the assignment &quot;window.Config &#x3D; Config&quot; and replace its value and return its own object. We just need to make sure we are ready before the application loads its application code. We can do this in the <code>onBeforeLoad</code> callback of the <a href="https://on.cypress.io/visit">cy.visit</a> command.</p><figure class="highlight js"><figcaption><span>cypress/integration/override-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;overrides the config&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">onBeforeLoad</span>(<span class="params">win</span>) &#123;</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(win, <span class="string">&#x27;Config&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">// ignore the config the application sets</span></span><br><span class="line">        <span class="comment">// and instead use our own test config object</span></span><br><span class="line">        <span class="attr">set</span>: cy.<span class="title function_">stub</span>().<span class="title function_">as</span>(<span class="string">&#x27;setConfig&#x27;</span>),</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;Cypress Test&#x27;</span>,</span><br><span class="line">            <span class="attr">showCount</span>: <span class="literal">false</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Cypress Test&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-cy=&quot;pending-count&quot;]&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/stub-via-window/override.png" alt="The test returns its own config object"></p><h2><span id="combine-the-config-object">Combine the config object</span></h2><p>We do not have to completely replace the application&#39;s config object. We can combine its value with some of our test properties.</p><figure class="highlight js"><figcaption><span>cypress/integration/combine-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;combines the config&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">onBeforeLoad</span>(<span class="params">win</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> appValue</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(win, <span class="string">&#x27;Config&#x27;</span>, &#123;</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">v</span>) &#123;</span><br><span class="line">          appValue = v</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="comment">// returns a combined config</span></span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            ...appValue,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;Cypress Test&#x27;</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// we only check the property we have set</span></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Cypress Test&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/stub-via-window/combine.png" alt="The test returns its own config object"></p><h2><span id="mock-config-module">Mock Config module</span></h2><p>We can go one step beyond the previous solutions. Instead of modifying the application code to expose the Config object, we can directly mock the <code>src/Config.tsx</code> module in our JavaScript bundle (assuming the &quot;standard&quot; Webpack module format). We can do this using the plugin <a href="https://github.com/bahmutov/mock-in-bundle">mock-in-bundle</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D mock-in-bundle</span><br><span class="line">+ mock-in-bundle@1.3.0</span><br></pre></td></tr></table></figure><p>From the spec file, specify the module and the new default export.</p><figure class="highlight js"><figcaption><span>cypress/integration/mock-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mockInBundle &#125; <span class="keyword">from</span> <span class="string">&#x27;mock-in-bundle&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;mocks the Config module&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">mockInBundle</span>(<span class="string">&#x27;src/Config.tsx&#x27;</span>, &#123; <span class="attr">default</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;Mock Test&#x27;</span> &#125; &#125;)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Mock Test&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Boom 💣 the mock title is shown.</p><p><img src="../images/stub-via-window/mock.png" alt="The Cypress test mocks the module by name in the JavaScript bundle loaded by the application"></p><p>Happy testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine you have an application that imports a config object from another file, and then uses the config to control what it shows on the 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>How Cypress Freezes CSS Animations And You Can Too</title>
    <link href="https://glebbahmutov.com/blog/css-animations/"/>
    <id>https://glebbahmutov.com/blog/css-animations/</id>
    <published>2022-03-29T04:00:00.000Z</published>
    <updated>2022-03-29T16:08:18.751Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s take a web application with beautiful CSS animations showing time of day. Each click of the button sets a different CSS class which triggers CSS transitions.</p><p><img src="../images/css-animations/day-sunset.gif" alt="Time of day via CSS animations"></p><blockquote class="pullquote"><p>🖼 You can find the example application in the repo <a href="https://github.com/bahmutov/css-animation-cypress-example">bahmutov&#x2F;css-animation-cypress-example</a>. It is based on <a href="https://codepen.io/oliviale/pen/ELPvLM">this Codepen</a> created by Olivia Ng.</p></blockquote><h2><span id="css-animations">CSS Animations</span></h2><p>To create the transitions, the application sets a different CSS class name</p><figure class="highlight js"><figcaption><span>public/script.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.option&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="string">&#x27;.option&#x27;</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> type = $(<span class="variable language_">this</span>).<span class="title function_">data</span>(<span class="string">&#x27;option&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="string">&#x27;day&#x27;</span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;.time&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;time day&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&#x27;night&#x27;</span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;.time&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;time night&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&#x27;dusk&#x27;</span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;.time&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;time dusk&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&#x27;sunset&#x27;</span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;.time&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;time sunset&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The application CSS specifies the transition duration applied to different elements. For example, to move the sun and the clouds, the application uses SVG shapes. Each shape will change its &quot;fill&quot; property in five seconds.</p><figure class="highlight css"><figcaption><span>public/style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">path,</span><br><span class="line">polygon,</span><br><span class="line">circle,</span><br><span class="line">rect &#123;</span><br><span class="line">  <span class="attribute">transition</span>: fill <span class="number">5s</span> ease;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Similarly, the &quot;.sun&quot; and other CSS classes will change its styles when applied in five seconds</p><figure class="highlight css"><figcaption><span>public/style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sun</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">5s</span> ease;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clouds</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">5s</span> ease <span class="number">0.1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.night</span> <span class="selector-class">.stars</span>,</span><br><span class="line"><span class="selector-class">.night</span> <span class="selector-class">.moon</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">5s</span> ease <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="cypress-tests">Cypress tests</span></h2><p>Ok, pretty slick. But how do the slow transitions affect the Cypress tests? Well, Cypress test does not &quot;know&quot; about five seconds it takes to finish the transition after clicking each button. Thus a typical test will show a weird start of the transition before abruptly starting a new one.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> times = [<span class="string">&#x27;Day&#x27;</span>, <span class="string">&#x27;Sunset&#x27;</span>, <span class="string">&#x27;Night&#x27;</span>, <span class="string">&#x27;Dusk&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;goes through the day&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  times.<span class="title function_">forEach</span>(<span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">contains</span>(time)</span><br><span class="line">      .<span class="title function_">click</span>()</span><br><span class="line">      <span class="comment">// add one second delay to show the animation in progress</span></span><br><span class="line">      .<span class="title function_">wait</span>(<span class="number">1000</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/css-animations/too-short.gif" alt="The test only waits one second before the next step"></p><p>We could slow down the test by waiting five seconds, but what if we could speed up the animations instead? Or disable them completely?</p><h2><span id="cypress-screenshots">Cypress screenshots</span></h2><p>If you every used <a href="https://on.cypress.io/screenshot">cy.screenshot</a> command, you might have noticed the option <code>disableTimersAndAnimations</code> in its documentation page:</p><p><img src="../images/css-animations/screenshot-option.png" alt="The cy.screenshot command mentions CSS animations"></p><p>Hmm, does <code>cy.screenshot</code> know how to disable CSS animations?! Let&#39;s try it out.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;takes a screenshot&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  times.<span class="title function_">forEach</span>(<span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">contains</span>(time).<span class="title function_">click</span>()</span><br><span class="line">    <span class="comment">// notice we are taking a screenshot immediately</span></span><br><span class="line">    <span class="comment">// without waiting for anything to finish updating</span></span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;.window&#x27;</span>).<span class="title function_">screenshot</span>(time, &#123;</span><br><span class="line">      <span class="attr">overwrite</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Look at the screenshots - they all show the page as if the CSS animations ran to the finish!</p><p><img src="../images/css-animations/combined.png" alt="Somehow cy.screenshot shows the final transition in each image"></p><p>How does it do it? How does it bypass waiting 5 seconds?</p><p>Let&#39;s search the <a href="https://github.com/cypress-io/cypress">Cypress source code</a> for &quot;disableTimersAndAnimations&quot;. This search result seems very relevant.</p><p><img src="../images/css-animations/search1.png" alt="Looks like cy.screenshot is injecting something into the application&#39;s frame to disable CSS animations"></p><p>Let&#39;s click on the search result to find the utility method <code>addCssAnimationDisabler</code>. It seems to just add a style to overwrite all CSS transitions in the page and set their duration to zero!</p><p><img src="../images/css-animations/search2.png" alt="How Cypress skips CSS animations during screenshots"></p><h2><span id="disabling-animations-from-out-test">Disabling animations from out test</span></h2><p>Nice, we can do the same thing ourselves from the Cypress test. We can use jQuery bundled with Cypress under <code>Cypress.$</code> to make the code simpler.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;disables animations&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">invoke</span>(</span><br><span class="line">    <span class="string">&#x27;append&#x27;</span>,</span><br><span class="line">    <span class="title class_">Cypress</span>.$(<span class="string">`</span></span><br><span class="line"><span class="string">      &lt;style id=&quot;__cypress-animation-disabler&quot;&gt;</span></span><br><span class="line"><span class="string">        *, *:before, *:after &#123;</span></span><br><span class="line"><span class="string">          transition-property: none !important;</span></span><br><span class="line"><span class="string">          animation: none !important;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &lt;/style&gt;</span></span><br><span class="line"><span class="string">    `</span>),</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  times.<span class="title function_">forEach</span>(<span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">contains</span>(time).<span class="title function_">click</span>().<span class="title function_">wait</span>(<span class="number">1000</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test shows the nice final state of each animation.</p><p><img src="../images/css-animations/disabled.gif" alt="The Cypress test with disabled CSS animations"></p><p>Note: I should record a video showing what I have explained in this blog post. Subscribe to <a href="https://www.youtube.com/glebbahmutov">my YouTube channel</a> to find the video when it comes out.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s take a web application with beautiful CSS animations showing time of day. Each click of the button sets a different CSS class w
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Negative Assertions And Missing States</title>
    <link href="https://glebbahmutov.com/blog/negative-assertions-and-missing-states/"/>
    <id>https://glebbahmutov.com/blog/negative-assertions-and-missing-states/</id>
    <published>2022-03-28T04:00:00.000Z</published>
    <updated>2022-03-28T14:19:26.139Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine you got lost in a foreign town. You see someone and ask them a question in whatever little foreign language you have: &quot;what street is this?&quot; When they tell you the name of the street, you are no longer lost, assuming you know every street or have a map with you. But what if you ask, and the stranger instead of naming the street simply states a negative &quot;you are NOT on Main street&quot;, then what? If the town only has two streets: Main and Second, then you are fine too. If you are not on Main street, then you are on Second street. Of course, if there are more than two streets, the answer &quot;you are NOT on Main street&quot; does not help you at all. You could be on any of the town&#39;s other N - 1 streets.</p><p>In the same town, now imagine you were walking with some directions. From the ocean shore, you were going down the Ocean ave, then you were taking the Main street to your destination. But the town has a fork in the road, the Ocean ave can lead to Main street and to Second street. At the end of Second street there is a fire-breathing dragon, and he is hungry. You do not want to go there.</p><p><img src="../images/missing-state/streets.png" alt="The town you are walking through"></p><p>Let&#39;s say at some point in your journey you ask someone &quot;This is NOT Second street, is this?&quot; You only hope to eliminate the dangerous section. But that is a wrong question to ask (props to <a href="https://en.wikipedia.org/wiki/All_the_Wrong_Questions">Lemony Snicket</a>). It only eliminates one street, and our town has three. Thus we could be on two streets, including Ocean avenue. We could still be approaching the dangerous fork and not even know it!</p><h2><span id="application-states">Application states</span></h2><p>Often when walking through a new city, it helps to separate the journey into logical sections. In our case, the two legs of the journey are &quot;before the fork&quot; and &quot;after the fork&quot;.</p><p><img src="../images/missing-state/fork.png" alt="The journey has two sections"></p><p>If we get disoriented, but know the section we are on, we can safely use a &quot;This is NOT Second street, is this?&quot; Each section cuts the number of possible choices to two.</p><ul><li>when walking before the fork, the only answer possible is &quot;No, this is not Second street&quot; (we can only be on Ocean ave)</li><li>when walking after the fork, the only two choices are Second and Main. If we hear &quot;Yes, you are on Second street&quot;, we turn around and run back to the fork in the road.</li></ul><p>Here is how this translates to web applications. Let&#39;s model our application&#39;s state using <a href="https://xstate.js.org/">xstate.js</a> library. In my case, we will start with the simple Promise machine example from the Xstate documentation.</p><figure class="highlight js"><figcaption><span>machine.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createMachine &#125; <span class="keyword">from</span> <span class="string">&#x27;xstate&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> promiseMachine = <span class="title function_">createMachine</span>(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;promise&#x27;</span>,</span><br><span class="line">  <span class="attr">initial</span>: <span class="string">&#x27;pending&#x27;</span>,</span><br><span class="line">  <span class="attr">states</span>: &#123;</span><br><span class="line">    <span class="attr">pending</span>: &#123;</span><br><span class="line">      <span class="attr">on</span>: &#123;</span><br><span class="line">        <span class="attr">RESOLVE</span>: &#123; <span class="attr">target</span>: <span class="string">&#x27;resolved&#x27;</span> &#125;,</span><br><span class="line">        <span class="attr">REJECT</span>: &#123; <span class="attr">target</span>: <span class="string">&#x27;rejected&#x27;</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resolved</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;final&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rejected</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;final&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The machine only has two 3 states, almost like the 3 streets in our town. We can copy &#x2F; paste the above code into the <a href="https://stately.ai/viz">Xstate visualizer</a> to see the states.</p><p><img src="../images/missing-state/machine.png" alt="The Promise state machine"></p><p>If we emit the &quot;REJECT&quot; event, the machine transitions to the &quot;rejected&quot; state. If we emit the &quot;RESOLVE&quot; event, the machine goes to the &quot;resolved&quot; state.</p><p>Let&#39;s implement a web interface.</p><figure class="highlight js"><figcaption><span>App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useMachine &#125; <span class="keyword">from</span> <span class="string">&#x27;@xstate/react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; promiseMachine &#125; <span class="keyword">from</span> <span class="string">&#x27;./machine&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Component</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, send] = <span class="title function_">useMachine</span>(promiseMachine)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex flex-col&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;mb-5 self-center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/** You can listen to what state the service is in */&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;state.matches(&#x27;pending&#x27;) &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>Loading it...<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;state.matches(&#x27;rejected&#x27;) &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;settled&quot;</span>&gt;</span>Promise Rejected<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;state.matches(&#x27;resolved&#x27;) &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;settled&quot;</span>&gt;</span>Promise Resolved<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/** You can send events to the running service */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> send(&#x27;RESOLVE&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">          type=&quot;button&quot;</span></span><br><span class="line"><span class="language-xml">          disabled=&#123;!state.matches(&#x27;pending&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;</span></span><br><span class="line"><span class="language-xml">          Resolve</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> send(&#x27;REJECT&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">          type=&quot;button&quot;</span></span><br><span class="line"><span class="language-xml">          disabled=&#123;!state.matches(&#x27;pending&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;</span></span><br><span class="line"><span class="language-xml">          Reject</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex flex-col justify-center items-center h-screen&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Component</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The application reacts to your button clicks. Each button emits its own event, which the machine uses as input. The machine the transitions to the new state, and the web app re-renders.</p><p><img src="../images/missing-state/resolved.gif" alt="The app in action"></p><blockquote class="pullquote"><p>🎁 You can find the source code for this blog post in the repo <a href="https://github.com/bahmutov/xstate-load-state">bahmutov&#x2F;xstate-load-state</a>.</p></blockquote><p>How can we verify that application is working correctly? We can write a Cypress test to click the button and check the page.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;resolves the promise (wrong question)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Loading...&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Resolve&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Loading...&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test uses a negative assertion <code>cy.contains(&#39;Loading...&#39;).should(&#39;not.exist&#39;)</code> and while it passes, it does not tell us if the state machine is working correctly.</p><p><img src="../images/missing-state/no-loading.png" alt="The test passes"></p><p>For example, the application might wire the state machine incorrectly. On clicking the &quot;Resolve&quot; button it might go to the &quot;Rejected&quot; state, yet our test will still pass.</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  pending: &#123;</span><br><span class="line">    on: &#123;</span><br><span class="line"><span class="deletion">-     RESOLVE: &#123; target: &#x27;resolved&#x27; &#125;,</span></span><br><span class="line"><span class="addition">+     RESOLVE: &#123; target: &#x27;rejected&#x27; &#125;,</span></span><br><span class="line">      REJECT: &#123; target: &#x27;rejected&#x27; &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><img src="../images/missing-state/wrong1.png" alt="The test passes but the application is incorrect"></p><p>Ughh, our test gives us false confidence. The application is broken, yet the test is green. It asked a wrong question. Remember that there 3 three streets, and your negative assertion only eliminates one of them.</p><p>What if we ask a negative assertion about the &quot;Rejected&quot; message? That still does not eliminate all the possible problem states.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;resolves the promise (more wrong questions)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Loading it...&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Resolve&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Promise Rejected&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The negative assertion <code>cy.contains(&#39;Promise Rejected&#39;).should(&#39;not.exist&#39;)</code> only helps us IF we are in the binary situation &quot;Promise Rejected | Promise Resolved&quot;. If the application wires the states incorrectly, we could still be at the loading state! Let&#39;s break the app by removing the &quot;onClick&quot; handler from the &quot;Resolve&quot; button.</p><figure class="highlight diff"><figcaption><span>App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  &lt;button</span><br><span class="line"><span class="deletion">-   onClick=&#123;() =&gt; send(&#x27;RESOLVE&#x27;)&#125;</span></span><br><span class="line">    type=&quot;button&quot;</span><br><span class="line">    disabled=&#123;!state.matches(&#x27;pending&#x27;)&#125;</span><br><span class="line">  &gt;</span><br><span class="line">    Resolve</span><br><span class="line">  &lt;/button&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/missing-state/still-loading.png" alt="The app is still loading, yet we asked about the rejected state"></p><p>Negative assertions only work if we are for sure in a binary situation. The best way in our situation to ensure this is to eliminate states, even with negative assertions.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;resolves the promise after no longer loading&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Loading it...&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Resolve&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Loading it...&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Promise Rejected&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Now the test correctly detects the broken application.</p><p><img src="../images/missing-state/fails1.png" alt="The test uses negative assertion correctly"></p><h3><span id="test-the-state">Test the state</span></h3><p>While checking the UI is nice, we can go beyond it. We can expose the current state from the application during end-to-end tests by checking the presense of <code>window.Cypress</code> property. Then our test assertions can be a lot more powerful.</p><figure class="highlight diff"><figcaption><span>App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  const Component = () =&gt; &#123;</span><br><span class="line">    const [state, send] = useMachine(promiseMachine)</span><br><span class="line"></span><br><span class="line"><span class="addition">+   if (window.Cypress) &#123;</span></span><br><span class="line"><span class="addition">+     window.state = state</span></span><br><span class="line"><span class="addition">+   &#125;</span></span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>From the test we can get to the <code>window.state</code> object and directly ask it.</p><figure class="highlight js"><figcaption><span>spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;moves away from the pending state&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Resolve&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  <span class="comment">// observe the state machine</span></span><br><span class="line">  <span class="comment">// Tip: have to use a should(callback)</span></span><br><span class="line">  <span class="comment">// because window.state is replaced when the state changes</span></span><br><span class="line">  <span class="comment">// see https://on.cypress.io/retry-ability</span></span><br><span class="line">  cy.<span class="title function_">window</span>().<span class="title function_">should</span>(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(win.<span class="property">state</span>.<span class="title function_">matches</span>(<span class="string">&#x27;pending&#x27;</span>)).<span class="property">to</span>.<span class="property">be</span>.<span class="property">false</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// now check if the promise is resolved or rejected</span></span><br><span class="line">  <span class="comment">// even better, check for the correct state</span></span><br><span class="line">  cy.<span class="title function_">window</span>().<span class="title function_">should</span>(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(win.<span class="property">state</span>.<span class="title function_">matches</span>(<span class="string">&#x27;resolved&#x27;</span>)).<span class="property">to</span>.<span class="property">be</span>.<span class="property">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/missing-state/state-fails1.png" alt="The test checks the state machine"></p><p>So remember, instead of checking if you no longer can see the ocean, check if you are on the right street. And maybe then check if you for real cannot see the ocean any more.</p><p>So by using positive assertions, or by using negative assertions in binary situations, we can correctly test everything? Almost - as long as the state machine is correct.</p><h2><span id="the-missing-state">The missing state</span></h2><p>When someone gives you directions, they might misremember, or assume you know the details. A fork in the road might be more like a T intersection. Ocean ave might become Main street <em>before</em> Second street branches out.</p><p><img src="../images/missing-state/changes-name.png" alt="Ocean ave becomes Main ave slightly before Second street fork"></p><p>The above situation is dangerous to the traveler. They might think they are safe as they see &quot;Main street&quot; signs, and then accidentally continue down Second street. Asking &quot;This is NOT Second street, is it?&quot; gives them a false sense of security, as they do not know that the answer might change as they keep walking - the fork is still coming up!</p><p>The states &quot;Ocean ave &#x3D; before the road fork&quot;, &quot;Main ave &#x3D; after the road fork&quot; do not cover the real world. The part between the street changing the name from Ocean ave to Main st, but before Second st branches out is ... weird. It is not covered by our description at the start of the walk. Asking questions (even good ones, like &quot;Are we on Main street?&quot;) does not gives us enough information. Even when the answer is &quot;Yes&quot;, we are still in danger, and we can turn to Second street accidentally.</p><p>This part of the road is missing its own state. Our journey is really three states as shown in the next diagram: before the street changes its name, after the name change, but before the fork, and after the fork.</p><p><img src="../images/missing-state/three-states.png" alt="We need to use three states to show the journey"></p><h3><span id="testing-an-app-with-a-missing-state">Testing an app with a missing state</span></h3><p>Here is how a missing state can happen in your web application. We will take our &quot;Promise&quot; state machine which works very well, and then we will try to implement &quot;application loading&quot; state machine. We will start by what we think is a reasonable first step - emit the event &quot;Reject&quot; after a short delay.</p><figure class="highlight diff"><figcaption><span>App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  &lt;button</span><br><span class="line"><span class="deletion">-   onClick=&#123;() =&gt; send(&#x27;RESOLVE&#x27;)&#125;</span></span><br><span class="line"><span class="addition">+   onClick=&#123;() =&gt; setTimeout(() =&gt; send(&#x27;REJECT&#x27;), 70)&#125;</span></span><br><span class="line">    type=&quot;button&quot;</span><br><span class="line">    disabled=&#123;!state.matches(&#x27;pending&#x27;)&#125;</span><br><span class="line">  &gt;</span><br><span class="line">    Resolve</span><br><span class="line">  &lt;/button&gt;</span><br></pre></td></tr></table></figure><p>Adding a 70ms delay should not change the app too much, right? I hope our tests catch the error though - we are sending the &quot;REJECT&quot; event to the app instead of &quot;RESOLVE&quot;. Let&#39;s see our test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;A negative assertion and app delay&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Loading it...&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Reject&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Promise Resolved&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We assume that clicking the button &quot;Reject&quot; moves the app out of &quot;pending&quot; state to the &quot;Rejected | Resolved&quot; state. Now that we have binary option to check, we can use the negative assertion <code>cy.contains(&#39;Promise Resolved&#39;).should(&#39;not.exist&#39;)</code> to correctly test the app.</p><p><img src="../images/missing-state/delay.png" alt="The test passes even though it should have failed"></p><p>The test does not catch the problem. The assumption that we are no longer in the &quot;pending&quot; state immediately after clicking the button &quot;Reject&quot; is false - the application stays in that state during <code>onClick=&#123;() =&gt; setTimeout(() =&gt; send(&#39;RESOLVE&#39;), 70)&#125;</code> duration.</p><p>I see this error a lot. A widget is loading, and the test checks if an error message is shown. There is no error message, so the test continues. But that is wrong, since the app is still loading. Then the app finishes the loading and displays an error, but it is too late for the test to detect.</p><p>So what&#39;s a better way?</p><ol><li>Explicitly model the &quot;loading&quot; state here. Let&#39;s change our state machine a little.</li></ol><figure class="highlight js"><figcaption><span>loadingMachine.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createMachine &#125; <span class="keyword">from</span> <span class="string">&#x27;xstate&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> loadingMachine = <span class="title function_">createMachine</span>(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;loading&#x27;</span>,</span><br><span class="line">  <span class="attr">initial</span>: <span class="string">&#x27;pending&#x27;</span>,</span><br><span class="line">  <span class="attr">states</span>: &#123;</span><br><span class="line">    <span class="attr">pending</span>: &#123;</span><br><span class="line">      <span class="attr">on</span>: &#123;</span><br><span class="line">        <span class="attr">LOAD</span>: &#123;</span><br><span class="line">          <span class="attr">target</span>: <span class="string">&#x27;loading&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">loading</span>: &#123;</span><br><span class="line">      <span class="attr">on</span>: &#123;</span><br><span class="line">        <span class="attr">RESOLVE</span>: &#123; <span class="attr">target</span>: <span class="string">&#x27;resolved&#x27;</span> &#125;,</span><br><span class="line">        <span class="attr">REJECT</span>: &#123; <span class="attr">target</span>: <span class="string">&#x27;rejected&#x27;</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resolved</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;final&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rejected</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;final&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let&#39;s visualize this tate machine</p><p><img src="../images/missing-state/loading-machine-viz.png" alt="The above state machine visualized"></p><ol start="2"><li>Have an explicit way to check the current state from the test. This way the test can check if the application is still loading the data.</li></ol><p>For example, you could set class or data attribute</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;mb-5 self-center&quot;</span>&gt;</span><br><span class="line">  &#123;<span class="comment">/** You can listen to what state the service is in */</span>&#125;</span><br><span class="line">  &#123;state.<span class="title function_">matches</span>(<span class="string">&#x27;pending&#x27;</span>) &amp;&amp; <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">data-state</span>=<span class="string">&quot;initial&quot;</span>&gt;</span>Initial<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#125;</span><br><span class="line">  &#123;state.<span class="title function_">matches</span>(<span class="string">&#x27;loading&#x27;</span>) &amp;&amp; <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">data-state</span>=<span class="string">&quot;loading&quot;</span>&gt;</span>Loading it...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#125;</span><br><span class="line">  &#123;state.<span class="title function_">matches</span>(<span class="string">&#x27;rejected&#x27;</span>) &amp;&amp; (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">data-state</span>=<span class="string">&quot;loaded&quot;</span>&gt;</span>Promise Rejected<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  )&#125;</span><br><span class="line">  &#123;state.<span class="title function_">matches</span>(<span class="string">&#x27;resolved&#x27;</span>) &amp;&amp; (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">data-state</span>=<span class="string">&quot;loaded&quot;</span>&gt;</span>Promise Resolved<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  )&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>Then the test can explicitly check how the state moved along the expected transitions.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;Checks the state&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-state=&quot;initial&quot;]&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Reject&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-state=&quot;loaded&quot;]&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Promise Resolved&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Another alternative to checking the page, is to check the underlying state of the state machine. We can access the state machine from the test, just like before; the application code needs to put the state object on the <code>window</code> object. I suggest adding a custom command for checking the expected state.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cypress</span>.<span class="property">Commands</span>.<span class="title function_">add</span>(<span class="string">&#x27;reachedState&#x27;</span>, <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">`expecting **<span class="subst">$&#123;state&#125;</span>** state`</span>)</span><br><span class="line">  cy.<span class="title function_">window</span>(&#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;).<span class="title function_">should</span>(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (win.<span class="property">state</span>.<span class="title function_">matches</span>(state) !== <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Expected state &quot;<span class="subst">$&#123;state&#125;</span>&quot;, got &quot;<span class="subst">$&#123;win.state.value&#125;</span>&quot;`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;Checks the state machine&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">reachedState</span>(<span class="string">&#x27;pending&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Reject&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  <span class="comment">// optional: check the intermediate state</span></span><br><span class="line">  cy.<span class="title function_">reachedState</span>(<span class="string">&#x27;loading&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">reachedState</span>(<span class="string">&#x27;rejected&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Promise Resolved&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>For example, in our case it catches the transition to the wrong state.</p><p><img src="../images/missing-state/wrong-state.png" alt="The application gets into an unexpected state"></p><p>Finally, after fixing the application code, we have a passing test</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;Checks the state machine&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">reachedState</span>(<span class="string">&#x27;pending&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Reject&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  <span class="comment">// optional: check the intermediate state</span></span><br><span class="line">  cy.<span class="title function_">reachedState</span>(<span class="string">&#x27;loading&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">reachedState</span>(<span class="string">&#x27;rejected&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Promise Rejected&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/missing-state/states.gif" alt="The passing test for the fixed application"></p><p>The test is tight - it will be hard for the application to be broken with this kind of test that confirms the app&#39;s state transitions step by step using positive assertions.</p><h2><span id="use-better-questions">Use better questions</span></h2><ul><li>when getting lost in a city, ask which street intersection you are on. That gives you a unique precise position, eliminating all other possibilities.</li><li>when testing a web application and the user flow, use properties that eliminate as many other states as possible. For example, I love using <a href="https://on.cypress.io/location">cy.location</a> to know when the application has transitioned to the new state. A positive assertion eliminates a lot more possible states than a negative assertion.</li></ul><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/negative-assertions/" title="Be Careful With Negative Assertions">Be Careful With Negative Assertions</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine you got lost in a foreign town. You see someone and ask them a question in whatever little foreign language you have: &amp;quot;what 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Compare The Response To A Fixture</title>
    <link href="https://glebbahmutov.com/blog/fixture-and-request/"/>
    <id>https://glebbahmutov.com/blog/fixture-and-request/</id>
    <published>2022-03-24T04:00:00.000Z</published>
    <updated>2022-03-24T13:38:39.072Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine a situation: you need to make an HTTP request from your Cypress test and compare the result to a JSON object stored in a fixture file. There are several ways of writing such test.</p><h2><span id="using-cyfixture">Using cy.fixture</span></h2><p>We can load the fixture file when needed using <a href="https://on.cypress.io/fixture">cy.fixture</a> command. We can make the request first, then load the fixture file. Since the response <code>body</code> variable is in the lexical scope, we can use it to form the assertion.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;gives a response matching a fixture object&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;/sale&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">body</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">fixture</span>(<span class="string">&#x27;sale.json&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, body)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> always compare the JavaScript objects and arrays by value using the &quot;deep.equal&quot; assertion.</p><p>Of course, we can reverse the order and load the fixture before making the request using the <a href="https://on.cypress.io/request">cy.request</a> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;gives a response matching a fixture object, loads the fixture first&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">fixture</span>(<span class="string">&#x27;sale.json&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">sale</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">request</span>(<span class="string">&#x27;/sale&#x27;</span>)</span><br><span class="line">      .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">      .<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, sale)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="import-the-json-object">Import the JSON object</span></h2><p>Instead of loading the expected response object using <code>cy.fixture</code>, we can simply import or require it, letting the bundler load it for us.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sale <span class="keyword">from</span> <span class="string">&#x27;../fixtures/sale.json&#x27;</span></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;gives a response matching a fixture object loaded using import keyword&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;/sale&#x27;</span>).<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, sale)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>To be honest, this is my favorite way of loading JSON fixtures in my tests.</p><h2><span id="alias-and-test-context-property">Alias and test context property</span></h2><p>If we load the fixture from a hook, we can alias its value using <a href="https://on.cypress.io/as">cy.as</a> command. The aliases are then available as the test context properties of the &quot;this&quot; object in the <code>function () &#123; ... &#125;</code> callbacks.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">fixture</span>(<span class="string">&#x27;sale.json&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;sale&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;gives a response matching an alias set as a property&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;/sale&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, <span class="variable language_">this</span>.<span class="property">sale</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="load-a-fixture-once">Load a fixture once</span></h2><p>All aliases are reset before each test, thus in the example above I use <code>beforeEach</code> hook. This repeats loading the fixture again and again. We can optimize the load a little by using a <code>before</code> plus a local variable.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> loadedSale</span><br><span class="line"><span class="title function_">before</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">fixture</span>(<span class="string">&#x27;sale.json&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">sale</span>) =&gt;</span> &#123;</span><br><span class="line">    loadedSale = sale</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;gives a response matching a fixture loaded once&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;/sale&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, loadedSale)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If you really want to use <code>this.alias</code> syntax, you can even set the fixture as an alias from the local variable</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tempSale</span><br><span class="line"><span class="title function_">before</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">fixture</span>(<span class="string">&#x27;sale.json&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">sale</span>) =&gt;</span> &#123;</span><br><span class="line">    tempSale = sale</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">wrap</span>(tempSale).<span class="title function_">as</span>(<span class="string">&#x27;sale&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;gives a response matching a fixture reset from a local variable&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;/sale&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, <span class="variable language_">this</span>.<span class="property">sale</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="use-cypressenv-to-keep-data">Use Cypress.env to keep data</span></h2><p>We can also load the fixture once using the <code>before</code> hook and throw it into the <code>Cypress.env</code> object.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">before</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">fixture</span>(<span class="string">&#x27;sale.json&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">sale</span>) =&gt;</span></span><br><span class="line">    <span class="title class_">Cypress</span>.<span class="title function_">env</span>(<span class="string">&#x27;sale&#x27;</span>, sale),</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;uses sale from Cypress.env object&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;/sale&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, <span class="title class_">Cypress</span>.<span class="title function_">env</span>(<span class="string">&#x27;sale&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="use-cypress-data-session">Use cypress-data-session</span></h2><p>For all more advanced scenarios of loading and caching data, see <a href="https://github.com/bahmutov/cypress-data-session">cypress-data-session</a> plugin. In our case</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">dataSession</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;sale&#x27;</span>,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> cy.<span class="title function_">fixture</span>(<span class="string">&#x27;sale.json&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;matches the sale&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;/sale&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, <span class="variable language_">this</span>.<span class="property">sale</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Which only initializes the data once and keeps it in memory (or even shares it with other specs), and verifies that it is still valid and should not be recreated.</p><p><img src="../images/fixture-and-request/sale.png" alt="All the fixture and requests tests with the final cypress-data-session command"></p><p>I think this about covers it for now.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/import-cypress-fixtures/" title="Import Cypress fixtures">Import Cypress fixtures</a></li><li><a href="/blog/dynamic-tests-from-fixture/" title="Dynamic Tests From Cypress Fixture">Dynamic Tests From Cypress Fixture</a></li><li><a href="https://on.cypress.io/variables-and-aliases">Cypress Variables and Aliases Guide</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine a situation: you need to make an HTTP request from your Cypress test and compare the result to a JSON object stored in a fixture 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress Test-Driven Development Example</title>
    <link href="https://glebbahmutov.com/blog/cypress-tdd/"/>
    <id>https://glebbahmutov.com/blog/cypress-tdd/</id>
    <published>2022-03-21T04:00:00.000Z</published>
    <updated>2022-03-21T15:42:15.721Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="pullquote"><p>🎁 You can find the pull request with the tests from this blog post in the branch <a href="https://github.com/bahmutov/cypress-workshop-basics/tree/implement-toggle-video">implement-toggle-video</a> of the repo <a href="https://github.com/bahmutov/cypress-workshop-basics">bahmutov&#x2F;cypress-workshop-basics</a>. The code can be seen in the pull request <a href="https://github.com/bahmutov/cypress-workshop-basics/pull/75">#75</a>.</p></blockquote><p>The step by step tests and the application changes described in this blog post are shown in my new video below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/xlc6yQLAqNg" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="the-application">The application</span></h2><p>In the workshop repository, I have a simple TodoMVC with the items stored by the backend server. Unfortunately, the application does not implement storing the &quot;completed&quot; item property. The user interface shows the item as completed, but when reloading the page, the completed status disappears.</p><p><img src="../images/cypress-tdd/complete.gif" alt="Todo item loses the completed status after the page reload"></p><h2><span id="the-testing-plan">The testing plan</span></h2><p>Let&#39;s implement this feature. While working on the feature I will follow the test-drive development practice. I will first write a failing Cypress test, then implement the application code to make the test green. To start testing, I first will plan my &quot;attack&quot; by looking at the application architecture. The application has the web page interface, which shows the data in the Veux data store. The data store is synced with the backend via REST API calls. My first test will verify the REST API is working correctly. Then I will test how the web application passes the &quot;completed&quot; property to the Veux data store. Finally, I will test the web page UI and confirm it calls the backend API by using the <a href="https://on.cypress.io/intercept">cy.intercept</a> command.</p><p><img src="../images/cypress-tdd/vue-vuex-rest.png" alt="The application layers and the order of testing and implementation steps"></p><h2><span id="the-api-test">The API test</span></h2><p>We first confirm that our backend supports changing the todo&#39;s &quot;completed&quot; property and correctly updates the database. We can write a <a href="https://www.cypress.io/blog/2017/11/07/add-gui-to-your-e2e-api-tests/">Cypress API test</a>. Cypress can be quite happily calling the HTTP endpoints and verifying the results, as the video below shows:</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/OWTrczUUVpA" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Let&#39;s write our test:</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;completes an item using API&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/reset&#x27;</span>, &#123; <span class="attr">todos</span>: [] &#125;)</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>).<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, [])</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>, &#123; <span class="attr">title</span>: <span class="string">&#x27;first&#x27;</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.include&#x27;</span>, &#123; <span class="attr">title</span>: <span class="string">&#x27;first&#x27;</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">request</span>(<span class="string">&#x27;PATCH&#x27;</span>, <span class="string">`/todos/<span class="subst">$&#123;id&#125;</span>`</span>, &#123; <span class="attr">completed</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">        .<span class="title function_">its</span>(<span class="string">&#x27;status&#x27;</span>)</span><br><span class="line">        .<span class="title function_">should</span>(<span class="string">&#x27;eq&#x27;</span>, <span class="number">200</span>)</span><br><span class="line">      cy.<span class="title function_">request</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">`/todos/<span class="subst">$&#123;id&#125;</span>`</span>)</span><br><span class="line">        .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">        .<span class="title function_">should</span>(<span class="string">&#x27;deep.equals&#x27;</span>, &#123; id, <span class="attr">title</span>: <span class="string">&#x27;first&#x27;</span>, <span class="attr">completed</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-tdd/api-test.png" alt="The API test"></p><p>The above test uses the <a href="https://on.cypress.io/request">cy.request</a> command to make HTTP calls. We first create an item using the <code>POST /todos &lt;item&gt;</code> call. Then we verify the todos by asking the server using <code>GET /todos</code>. We then use the REST convention to <code>PATCH /todos/:id &lt;changed properties&gt;</code>. Finally, we verify the server has saved the changed &quot;completed&quot; property by request the Todo item and confirmed its properties.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">request</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">`/todos/<span class="subst">$&#123;id&#125;</span>`</span>)</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;deep.equals&#x27;</span>, &#123; id, <span class="attr">title</span>: <span class="string">&#x27;first&#x27;</span>, <span class="attr">completed</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> while running an API test, the application is not visited, leaving the entire iframe empty. You can use it to display the requests and responses by using the <a href="https://github.com/bahmutov/cy-api">cy-api plugin</a>.</p><h2><span id="the-ui-to-vuex-data-store-test">The UI to Vuex data store test</span></h2><p>The REST part was easy - our server already supports updating an object using the <code>PATCH</code> method. Can our application call these methods? Let&#39;s write a test to first confirm that the UI updates the internal data store. To access the internal Vuex data store, we can expose it to the test by setting it as a <code>window</code> property.</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// our application instance</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">app</span> = app</span><br></pre></td></tr></table></figure><p>Then from the test we can check the data store using the <a href="https://on.cypress.io/window">cy.window</a> and <a href="https://on.cypress.io/its">cy.its</a> commands.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">window</span>()</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;app.$store.state.todos&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The entire test</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;updates the Vuex store&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/reset&#x27;</span>, &#123; <span class="attr">todos</span>: [] &#125;)</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>, &#123; <span class="attr">title</span>: <span class="string">&#x27;first&#x27;</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list li&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    .<span class="title function_">first</span>()</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;not.have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">    .<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;not.be.checked&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo-list li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">window</span>()</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;app.$store.state.todos&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="number">0</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-tdd/store.png" alt="Testing the updated Vuex data store"></p><p><strong>Tip:</strong> notice that the above test has a combination of API calls (to reset all existing todos and to create the first todo) and page commands (to verify the list of todos). I like using REST API calls to set the data really quickly.</p><p>Super, our application UI does update the data store. But does the store update the backend? Let&#39;s make the test fail.</p><h2><span id="observe-the-network-test">Observe the network test</span></h2><p>Let&#39;s spy on the network traffic to confirm if the Vuex data store calls the backend with <code>PATCH</code> method.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;toggles an item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/reset&#x27;</span>, &#123; <span class="attr">todos</span>: [] &#125;)</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>, &#123; <span class="attr">title</span>: <span class="string">&#x27;first&#x27;</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">intercept</span>(<span class="string">&#x27;PATCH&#x27;</span>, <span class="string">&#x27;/todos/*&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;patch&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list li&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    .<span class="title function_">first</span>()</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;not.have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">    .<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;not.be.checked&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@patch&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;request.body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, &#123; <span class="attr">completed</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-tdd/fails.png" alt="The application never makes the expected PATCH call"></p><p>Ok, our Vuex data store that syncs the data with the backend never calls the backend to update the Todo item when we click the &quot;toggle&quot; checkbox. Let&#39;s implement it in the <code>app.js</code></p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add toggleTodo to Vuex actions</span></span><br><span class="line"><span class="title function_">toggleTodo</span>(<span class="params">&#123; commit &#125;, todo</span>) &#123;</span><br><span class="line">  <span class="title function_">track</span>(<span class="string">&#x27;todo.toggle&#x27;</span>, todo.<span class="property">title</span>)</span><br><span class="line"></span><br><span class="line">  axios</span><br><span class="line">    .<span class="title function_">patch</span>(<span class="string">`/todos/<span class="subst">$&#123;todo.id&#125;</span>`</span>, &#123; <span class="attr">completed</span>: !todo.<span class="property">completed</span> &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;toggled todo&#x27;</span>, todo.<span class="property">id</span>)</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;TOGGLE_TODO&#x27;</span>, todo)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>The test turns green.</p><p><img src="../images/cypress-tdd/green.png" alt="Now the application updates the server via a PATCH call"></p><p>We can even confirm that clicking the item again sends the 2nd call to clear the property</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;toggles an item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/reset&#x27;</span>, &#123; <span class="attr">todos</span>: [] &#125;)</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>, &#123; <span class="attr">title</span>: <span class="string">&#x27;first&#x27;</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">intercept</span>(<span class="string">&#x27;PATCH&#x27;</span>, <span class="string">&#x27;/todos/*&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;patch&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list li&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    .<span class="title function_">first</span>()</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;not.have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">    .<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;not.be.checked&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@patch&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;request.body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, &#123; <span class="attr">completed</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// toggle back</span></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo-list li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@patch&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;request.body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, &#123; <span class="attr">completed</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo-list li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="the-final-test">The final test</span></h2><p>Let&#39;s put the final test together that reloads the page and checks the completed property is still there.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;stays completed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// reset + create the first todo</span></span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/reset&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">todos</span>: [&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">&#x27;first&#x27;</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;]</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list li&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    .<span class="title function_">first</span>()</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;not.have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">    .<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;not.be.checked&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo-list li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">    .<span class="title function_">wait</span>(<span class="number">1000</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;) <span class="comment">// for clarity</span></span><br><span class="line">  <span class="comment">// the item stays completed</span></span><br><span class="line">  cy.<span class="title function_">reload</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo-list li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-tdd/reload.gif" alt="The final test ensures the completed items stay completed after a page reload"></p><p>Happy Testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;pullquote&quot;&gt;&lt;p&gt;🎁 You can find the pull request with the tests from this blog post in the branch &lt;a href=&quot;https://github.c
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>A Better cy.each Iteration</title>
    <link href="https://glebbahmutov.com/blog/better-cy-each/"/>
    <id>https://glebbahmutov.com/blog/better-cy-each/</id>
    <published>2022-03-16T04:00:00.000Z</published>
    <updated>2022-03-16T00:34:57.263Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="pullquote"><p>🎁 You can find these tests in the repo <a href="https://github.com/bahmutov/better-cypress-each-example">bahmutov&#x2F;better-cypress-each-example</a>.</p></blockquote><p>Imagine you have an application where you have bunch of table rows. After you click a button in a row, it reveals a random number from 0 to 9. Your goal is to click the buttons until you get the number 7.</p><p><img src="../images/better-cy-each/demo.gif" alt="Clicking on the button"></p><p>Can we write a Cypress test that would iterate over potentially all buttons, but stop when it finds 7?</p><h2><span id="cypress-cyeach-command">Cypress cy.each command</span></h2><p>Cypress has <a href="https://on.cypress.io/each">cy.each</a> command. This command is nice for doing the same set of actions for each element. For example, you can quickly click every button on the page</p><figure class="highlight js"><figcaption><span>cypress/integration/spec01.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;clicks every button&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// https://on.cypress.io/each</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;tbody button&#x27;</span>).<span class="title function_">each</span>(<span class="function">(<span class="params">$button</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">wrap</span>($button).<span class="title function_">click</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/better-cy-each/spec01.gif" alt="Clicking each button"></p><p>You can see me writing the above spec in the video <a href="https://www.youtube.com/watch?v=M0RxEeJaq_E">Iterate Over Table Rows And Click A Button In Each Row Using cy.each Command</a> and below:</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/M0RxEeJaq_E" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>The test does not stop, even if the number 7 is clearly visible. The test does not even <em>wait</em> for the number to be revealed before moving to the next table row and clicking the next button. Not good. We can make the test wait, of course. We need to grab the next cell and confirm it shows a single digit number.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec02.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;clicks every button waits for the number&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;tbody button&#x27;</span>).<span class="title function_">each</span>(<span class="function">(<span class="params">$button</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">wrap</span>($button)</span><br><span class="line">      .<span class="title function_">click</span>()</span><br><span class="line">      .<span class="title function_">parent</span>()</span><br><span class="line">      .<span class="title function_">parent</span>()</span><br><span class="line">      .<span class="title function_">contains</span>(<span class="string">&#x27;td&#x27;</span>, <span class="regexp">/\d/</span>)</span><br><span class="line">      .<span class="title function_">invoke</span>(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">s</span>) =&gt;</span> cy.<span class="title function_">log</span>(<span class="string">`got <span class="subst">$&#123;s&#125;</span>`</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>But what about stopping if we see the number 7? We still to implement this.</p><h2><span id="stop-the-iteration-early">Stop the iteration early</span></h2><p>If you use a simple synchronous callbacks, you can return <code>false</code> to stop the iteration early. For example, the next step that iterates over strings will stop when it sees the 3rd string.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec03.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;cy.each stops iteration when returning false&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> fruits = [<span class="string">&#x27;apples&#x27;</span>, <span class="string">&#x27;bananas&#x27;</span>, <span class="string">&#x27;oranges&#x27;</span>, <span class="string">&#x27;pears&#x27;</span>]</span><br><span class="line">  cy.<span class="title function_">wrap</span>(fruits)</span><br><span class="line">    .<span class="title function_">each</span>(<span class="function">(<span class="params">fruit, k</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(k, fruit)</span><br><span class="line">      <span class="keyword">if</span> (k === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      cy.<span class="title function_">log</span>(<span class="string">&#x27;fruit&#x27;</span>, fruit)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// cy.each yields the original subject</span></span><br><span class="line">    <span class="comment">// even if you stop the iteration early</span></span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, fruits)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><center><iframe width="560" height="315" src="https://www.youtube.com/embed/lhb5Lt9RwE4" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Can we return or yield <code>false</code> to stop the iteration if we use Cypress commands in the <code>each(callback)</code> function? Something like this does NOT work:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 🚨 JUST FOR DEMO, INCORRECT TEST</span></span><br><span class="line"><span class="comment">// this does not stop the iteration</span></span><br><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;tbody button&#x27;</span>).<span class="title function_">each</span>(<span class="function">(<span class="params">$button, k</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;button&#x27;</span>, k)</span><br><span class="line">  cy.<span class="title function_">wrap</span>($button)</span><br><span class="line">    .<span class="title function_">click</span>()</span><br><span class="line">    .<span class="title function_">parent</span>()</span><br><span class="line">    .<span class="title function_">parent</span>()</span><br><span class="line">    .<span class="title function_">contains</span>(<span class="string">&#x27;td&#x27;</span>, <span class="regexp">/\d/</span>)</span><br><span class="line">    .<span class="title function_">invoke</span>(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="title class_">Number</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> n === <span class="number">7</span> ? <span class="literal">false</span> : <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Unfortunately, the above test does not work. It quickly iterates over <em>all</em> buttons, queuing up all Cypress commands inside the <code>each(callback)</code>. The queue after finding the buttons looks like this:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- visit</span><br><span class="line">- get</span><br><span class="line">- wrap button 1</span><br><span class="line">- click</span><br><span class="line">- ....</span><br><span class="line">- wrap button 2</span><br><span class="line">- click</span><br><span class="line">- ....</span><br><span class="line">- wrap button 3</span><br><span class="line">- click</span><br><span class="line">- ....</span><br><span class="line">- wrap button 16</span><br><span class="line">- click</span><br><span class="line">- ....</span><br></pre></td></tr></table></figure><p>Even if you yield <code>false</code> from the first button, there are all the commands already queued up and they cannot be removed. We need a way to <em>avoid</em> queuing unnecessary commands. To do this, we can queue <code>cy.then(callback)</code> inside the <code>each(callback)</code>. Inside the <code>then(callback)</code> we can decide if we need to queue up more Cypress commands, or simply do nothing. Instead of returning or yielding <code>false</code>, we will use a local variable to signal an early exit.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec04.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;stops when it sees 7&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> shouldStop = <span class="literal">false</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;tbody button&#x27;</span>)</span><br><span class="line">    .<span class="title function_">each</span>(<span class="function">(<span class="params">$button, k</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (shouldStop) &#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;button&#x27;</span>, k)</span><br><span class="line">        cy.<span class="title function_">wrap</span>($button)</span><br><span class="line">          .<span class="title function_">click</span>()</span><br><span class="line">          .<span class="title function_">parent</span>()</span><br><span class="line">          .<span class="title function_">parent</span>()</span><br><span class="line">          .<span class="title function_">contains</span>(<span class="string">&#x27;td&#x27;</span>, <span class="regexp">/\d/</span>)</span><br><span class="line">          .<span class="title function_">invoke</span>(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">          .<span class="title function_">then</span>(<span class="title class_">Number</span>)</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (n === <span class="number">7</span>) &#123;</span><br><span class="line">              shouldStop = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// cy.each yields the original subject</span></span><br><span class="line">    <span class="comment">// even if you stop the iteration early</span></span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">16</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You can see the derivation of the above test in the video <a href="https://www.youtube.com/watch?v=G4xs9_cAm2c">Stop cy.each Iteration When Using Cypress Commands Inside The Callback Function</a> and below:</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/G4xs9_cAm2c" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p><strong>Tip:</strong> in the video, I use the <a href="https://github.com/bahmutov/cypress-command-chain">cypress-command-chain</a> to visualize the already queued commands. Read the blog post <a href="/blog/visualize-cypress-command-queue/" title="Visualize Cypress Command Queue">Visualize Cypress Command Queue</a> for more details.</p><h2><span id="reusable-each-function">Reusable each function</span></h2><p>The boilerplate logic for iteration and early exit can be abstracted into a library. In fact, it looks so much like my recursive iteration in the plugin <a href="https://github.com/bahmutov/cypress-recurse">bahmutov&#x2F;cypress-recurse</a> that I just added the <code>each</code> as one of its features. Import the <code>each</code> into your spec and provide the callback function and the optional predicate function that tells <code>each</code> when to stop. Without the predicate function, it simply iterates over the each subject item. To stop early, for example when we see the number 7, we write the test like this one:</p><figure class="highlight js"><figcaption><span>cypress/integration/spec05.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/bahmutov/cypress-recurse</span></span><br><span class="line"><span class="keyword">import</span> &#123; each &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-recurse&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;stops when it sees 7 using each from cypress-recurse&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;tbody button&#x27;</span>).<span class="title function_">then</span>(</span><br><span class="line">    <span class="title function_">each</span>(</span><br><span class="line">      <span class="function">(<span class="params">$button</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cy</span><br><span class="line">          .<span class="title function_">wrap</span>($button)</span><br><span class="line">          .<span class="title function_">click</span>()</span><br><span class="line">          .<span class="title function_">parent</span>()</span><br><span class="line">          .<span class="title function_">parent</span>()</span><br><span class="line">          .<span class="title function_">contains</span>(<span class="string">&#x27;td&#x27;</span>, <span class="regexp">/\d/</span>)</span><br><span class="line">          .<span class="title function_">invoke</span>(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">          .<span class="title function_">then</span>(<span class="title class_">Number</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">n</span>) =&gt;</span> n === <span class="number">7</span>, <span class="comment">// predicate function</span></span><br><span class="line">    ),</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We use the <code>each</code> function to create the callback to the <code>cy.then</code> callback which will yield the list of items to iterate over. This is how the test looks in action:</p><p><img src="../images/better-cy-each/stop-each.gif" alt="Stop the iteration when we see the number 7"></p><p>You can see me writing the above test in the video <a href="https://www.youtube.com/watch?v=a-LErnTG1lU">Use each Function From cypress-recurse Plugin To Iterate And Stop</a> or below:</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/a-LErnTG1lU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="replace-the-cyeach-command">Replace the cy.each command</span></h2><p>Finally, we can replace the existing <code>cy.each</code> command with the <code>each</code> from <code>cypress-recurse</code>. Here is how the spec could do this.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec06.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/bahmutov/cypress-recurse</span></span><br><span class="line"><span class="keyword">import</span> &#123; each &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-recurse&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Cypress</span>.<span class="property">Commands</span>.<span class="title function_">overwrite</span>(</span><br><span class="line">  <span class="string">&#x27;each&#x27;</span>,</span><br><span class="line">  <span class="function">(<span class="params">originalFn, items, itemCallback, stopPredicate</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">each</span>(itemCallback, stopPredicate)(items)</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;overwrites cy.each to find 7 and stop&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;tbody button&#x27;</span>).<span class="title function_">each</span>(</span><br><span class="line">    <span class="function">(<span class="params">$button</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> cy</span><br><span class="line">        .<span class="title function_">wrap</span>($button)</span><br><span class="line">        .<span class="title function_">click</span>()</span><br><span class="line">        .<span class="title function_">parent</span>()</span><br><span class="line">        .<span class="title function_">parent</span>()</span><br><span class="line">        .<span class="title function_">contains</span>(<span class="string">&#x27;td&#x27;</span>, <span class="regexp">/\d/</span>)</span><br><span class="line">        .<span class="title function_">invoke</span>(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="title class_">Number</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">n</span>) =&gt;</span> n === <span class="number">7</span>,</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Watch the video <a href="https://www.youtube.com/watch?v=8LcTNeILQtQ">Overwrite The cy.each Command</a> to see me writing the above test.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;pullquote&quot;&gt;&lt;p&gt;🎁 You can find these tests in the repo &lt;a href=&quot;https://github.com/bahmutov/better-cypress-each-example&quot;&gt;b
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress Lighthouse Example</title>
    <link href="https://glebbahmutov.com/blog/cypress-lighthouse/"/>
    <id>https://glebbahmutov.com/blog/cypress-lighthouse/</id>
    <published>2022-03-10T05:00:00.000Z</published>
    <updated>2022-03-10T21:19:02.359Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="pullquote"><p>You can find the Cypress tests shown in this blog post in the repo <a href="https://github.com/bahmutov/cypress-lighthouse-example">bahmutov&#x2F;cypress-lighthouse-example</a>.</p></blockquote><p>Let&#39;s see how fast my blog <a href="https://glebbahmutov.com/blog/">https://glebbahmutov.com/blog/</a> loads in the browser. I will use Cypress to visit the site and use a plugin <a href="https://github.com/mfrachet/cypress-audit/tree/master/packages/lighthouse">@cypress-audit&#x2F;lighthouse</a> to report the performance metrics.</p><p>In the tests repository, install Cypress and the plugin</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress @cypress-audit/lighthouse</span><br><span class="line">+ cypress@9.5.1</span><br><span class="line">+ @cypress-audit/lighthouse@1.2.0</span><br></pre></td></tr></table></figure><p>Following the plugin&#39;s README, I have added its initialization</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cypress/support/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@cypress-audit/lighthouse/commands&#x27;</span></span><br><span class="line"><span class="comment">// cypress/plugins/index.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; lighthouse, prepareAudit &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@cypress-audit/lighthouse&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">on</span>(<span class="string">&#x27;before:browser:launch&#x27;</span>, <span class="function">(<span class="params">browser = &#123;&#125;, launchOptions</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">prepareAudit</span>(launchOptions)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">on</span>(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">lighthouse</span>: <span class="title function_">lighthouse</span>(), <span class="comment">// calling the function is important</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="the-test">The test</span></h2><p>The moment of truth. My test should visit the site and run the Lighthouse.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;@cypress-audit/lighthouse&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;loads fast enough&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">lighthouse</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Tip: I am using the special &quot;reference types&quot; comment to load the TypeScript definitions that come with the Lighthouse plugin to load the definition for its custom command <code>cy.lighthouse</code></p><p><img src="../images/lighthouse/sense.png" alt="Custom command cy.lighthouse IntelliSense"></p><p>Open Cypress Test Runner with <code>npx cypress open</code> and pick the Chrome browser to run the tests.</p><p><img src="../images/lighthouse/chrome.png" alt="Lighthouse audit requires Chrome browser to run"></p><p>Launch the spec file. Ughh, we definitely did not hit 100 across each category.</p><p><img src="../images/lighthouse/error.png" alt="Lighthouse audit with default parameters"></p><p>By default, Lighthouse audits in the mobile mode and requires each score to equal 100. Let&#39;s change the thresholds to match our situation.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;@cypress-audit/lighthouse&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;loads fast enough&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">lighthouse</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">performance</span>: <span class="number">60</span>,</span><br><span class="line">      <span class="attr">accessibility</span>: <span class="number">90</span>,</span><br><span class="line">      <span class="string">&#x27;best-practices&#x27;</span>: <span class="number">80</span>,</span><br><span class="line">      <span class="attr">seo</span>: <span class="number">80</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">formFactor</span>: <span class="string">&#x27;desktop&#x27;</span>,</span><br><span class="line">      <span class="attr">screenEmulation</span>: &#123;</span><br><span class="line">        <span class="attr">mobile</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">disable</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="title class_">Cypress</span>.<span class="title function_">config</span>(<span class="string">&#x27;viewportWidth&#x27;</span>),</span><br><span class="line">        <span class="attr">height</span>: <span class="title class_">Cypress</span>.<span class="title function_">config</span>(<span class="string">&#x27;viewportHeight&#x27;</span>),</span><br><span class="line">        <span class="attr">deviceScaleRatio</span>: <span class="number">1</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Now it is passing!</p><p><img src="../images/lighthouse/pass.png" alt="Running audit in Desktop mode"></p><p>A word of caution: Cypress by intercepting and forwarding all network requests and observing the page affects the performance measurements.</p><h2><span id="customize-the-report">Customize the report</span></h2><p>You can insert your own summary to the Lighthouse report before returning from the plugins file to the spec. Here is the custom code</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; lighthouse, prepareAudit &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@cypress-audit/lighthouse&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">on</span>(<span class="string">&#x27;before:browser:launch&#x27;</span>, <span class="function">(<span class="params">browser = &#123;&#125;, launchOptions</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">prepareAudit</span>(launchOptions)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">on</span>(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">lighthouse</span>(<span class="params">allOptions</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> txt</span><br><span class="line">      <span class="comment">// calling the function is important</span></span><br><span class="line">      <span class="keyword">const</span> lighthouseTask = <span class="title function_">lighthouse</span>(<span class="function">(<span class="params">lighthouseReport</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> lighthouseScoreText = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">let</span> lighthouseResult = lighthouseReport?.<span class="property">lhr</span>?.<span class="property">categories</span></span><br><span class="line">        <span class="keyword">let</span> lighthousePerformance =</span><br><span class="line">          <span class="string">&#x27;Performance: &#x27;</span> + lighthouseResult?.<span class="property">performance</span>?.<span class="property">score</span> + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        <span class="keyword">let</span> lighthouseAccessibility =</span><br><span class="line">          <span class="string">&#x27;Accessibility: &#x27;</span> + lighthouseResult?.<span class="property">accessibility</span>?.<span class="property">score</span> + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        <span class="keyword">let</span> lighthouseBestPractices =</span><br><span class="line">          <span class="string">&#x27;Best Practices: &#x27;</span> +</span><br><span class="line">          lighthouseResult?.[<span class="string">&#x27;best-practices&#x27;</span>]?.<span class="property">score</span> +</span><br><span class="line">          <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        <span class="keyword">let</span> lighthouseSEO = <span class="string">&#x27;SEO: &#x27;</span> + lighthouseResult?.<span class="property">seo</span>?.<span class="property">score</span> + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        lighthouseScoreText =</span><br><span class="line">          lighthousePerformance +</span><br><span class="line">          lighthouseAccessibility +</span><br><span class="line">          lighthouseBestPractices +</span><br><span class="line">          lighthouseSEO</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(lighthouseScoreText)</span><br><span class="line">        txt = lighthouseScoreText</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> report = <span class="keyword">await</span> <span class="title function_">lighthouseTask</span>(allOptions)</span><br><span class="line">      <span class="comment">// insert the text into the report returned the test</span></span><br><span class="line">      report.<span class="property">txt</span> = txt</span><br><span class="line">      <span class="keyword">return</span> report</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the spec file we want to log the <code>txt</code> property to the Command Log. Unfortunately, the default <code>cy.lighthouse()</code> command provided by the plugin ignores all properties returned by the <code>cy.task(&#39;lighthouse&#39;)</code> command, except for the <code>errors</code>. Thus we can call that task ourselves, rather than going through the plugin.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">it.<span class="title function_">only</span>(<span class="string">&#x27;shows the text report returned by from the plugins task&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> thresholds = &#123;</span><br><span class="line">    <span class="attr">performance</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="attr">accessibility</span>: <span class="number">90</span>,</span><br><span class="line">    <span class="string">&#x27;best-practices&#x27;</span>: <span class="number">80</span>,</span><br><span class="line">    <span class="attr">seo</span>: <span class="number">80</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> opts = &#123;</span><br><span class="line">    <span class="attr">formFactor</span>: <span class="string">&#x27;desktop&#x27;</span>,</span><br><span class="line">    <span class="attr">screenEmulation</span>: &#123;</span><br><span class="line">      <span class="attr">mobile</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">disable</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">width</span>: <span class="title class_">Cypress</span>.<span class="title function_">config</span>(<span class="string">&#x27;viewportWidth&#x27;</span>),</span><br><span class="line">      <span class="attr">height</span>: <span class="title class_">Cypress</span>.<span class="title function_">config</span>(<span class="string">&#x27;viewportHeight&#x27;</span>),</span><br><span class="line">      <span class="attr">deviceScaleRatio</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  cy.<span class="title function_">url</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">task</span>(<span class="string">&#x27;lighthouse&#x27;</span>, &#123;</span><br><span class="line">        url,</span><br><span class="line">        thresholds,</span><br><span class="line">        opts,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">report</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; errors, results, txt &#125; = report</span><br><span class="line">      <span class="comment">// our custom code in the plugins file has summarized the report</span></span><br><span class="line">      cy.<span class="title function_">log</span>(report.<span class="property">txt</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We now see the performance summary in the terminal</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Performance: 0.62</span><br><span class="line">Accessibility: 0.92</span><br><span class="line">Best Practices: 0.87</span><br><span class="line">SEO: 0.8</span><br></pre></td></tr></table></figure><p>We can see the same message text in the Cypress Command Log</p><p><img src="../images/lighthouse/summary.png" alt="Logged text from the Lighthouse report"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;pullquote&quot;&gt;&lt;p&gt;You can find the Cypress tests shown in this blog post in the repo &lt;a href=&quot;https://github.com/bahmutov/cyp
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="performance" scheme="https://glebbahmutov.com/blog/tags/performance/"/>
    
  </entry>
  
  <entry>
    <title>Code Coverage For Nextjs Application</title>
    <link href="https://glebbahmutov.com/blog/code-coverage-for-nextjs-app/"/>
    <id>https://glebbahmutov.com/blog/code-coverage-for-nextjs-app/</id>
    <published>2022-03-09T05:00:00.000Z</published>
    <updated>2022-03-14T22:14:37.686Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="pullquote"><p>📦 you can find the source code for this blog post in the repository <a href="https://github.com/bahmutov/next-ts-app">bahmutov&#x2F;next-ts-app</a> and the deployed application at <a href="https://next-ts-app-swart.vercel.app/">https://next-ts-app-swart.vercel.app/</a>. You can find the tests in the separate repo <a href="https://github.com/bahmutov/next-ts-app-tests">bahmutov&#x2F;next-ts-app-tests</a>.</p></blockquote><!-- toc --><ul><li><a href="#the-application">The application</a></li><li><a href="#instrument-when-necessary">Instrument when necessary</a></li><li><a href="#cypress-tests-with-code-coverage-report">Cypress tests with code coverage report</a></li><li><a href="#deployment-and-testing">Deployment and testing</a></li><li><a href="#tests-in-a-separate-repo">Tests in a separate repo</a><ul><li><a href="#cloning-the-app-repo-into-the-tests-repo">Cloning the app repo into the tests repo</a></li><li><a href="#fetching-the-right-application-source-code">Fetching the right application source code</a></li><li><a href="#code-coverage-on-circleci">Code coverage on CircleCI</a></li></ul></li><li><a href="#see-more">See more</a></li></ul><!-- tocstop --><h2><span id="the-application">The application</span></h2><p>I have scaffolded the Next.js application using the recommended command</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-next-app@latest --typescript</span><br><span class="line">+ next@12.1.0</span><br></pre></td></tr></table></figure><p>There are two modes for running the application: the dev and the prod. I would like to instrument the application in both modes. Thus I have added the following <code>.babelrc</code> file</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;next/babel&quot;],</span><br><span class="line">  &quot;plugins&quot;: [&quot;istanbul&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I have installed the <code>babel-plugin-istanbul@6</code> NPM module and if everything works, then starting <code>npm run dev</code> and opening <code>localhost:3000</code> shows the code coverage counters under <code>window.__coverage__</code> object</p><p><img src="../images/cc-for-nextjs/local.png" alt="Code was instrumented successfully"></p><h2><span id="instrument-when-necessary">Instrument when necessary</span></h2><p>We want to instrument the app when necessary, thus the simplest way is to look at an environment variable. I have renamed the <code>.babelrc</code> file into <code>.babelrc.js</code> file to include the Istanbul plugin only when the environment variable <code>INSTRUMENT_CODE</code> is present.</p><figure class="highlight js"><figcaption><span>.babelrc.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shouldInstrumentCode = <span class="string">&#x27;INSTRUMENT_CODE&#x27;</span> <span class="keyword">in</span> process.<span class="property">env</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;shouldInstrumentCode&#x27;</span>, shouldInstrumentCode)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>: [<span class="string">&quot;next/babel&quot;</span>],</span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>: shouldInstrumentCode ? [<span class="string">&quot;istanbul&quot;</span>] : []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="variable language_">module</span>.<span class="property">exports</span>, &#123;<span class="attr">depth</span>: <span class="literal">null</span>&#125;)</span><br></pre></td></tr></table></figure><p>I am using Vercel to run the application, and I set this variable to have the code coverage counters present in the deployed code.</p><p><img src="../images/cc-for-nextjs/var.png" alt="Set the INSTRUMENT_CODE variable to instrument the build on Vercel"></p><p><strong>Note:</strong> code coverage can add some overhead to the production application, so decide if it is worth it. You can still instrument the dev builds and run the end-to-end tests to collect the code coverage, while keeping the production build lean.</p><p><strong>Tip:</strong> to make sure the instrumentation really regenerates the bundles, delete the <code>.next</code> folder before running. In my <a href="https://github.com/bahmutov/next-ts-app/blob/main/package.json">package.json</a> I have the following scripts for running locally</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;next dev&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;next build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;next start&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;predev:instrumented&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rm -rf .nyc_output coverage .next&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev:instrumented&quot;</span><span class="punctuation">:</span> <span class="string">&quot;INSTRUMENT_CODE=1 next dev&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Locally I use <code>npm run dev:instrumented</code> to launch the instrumented application.</p><h2><span id="cypress-tests-with-code-coverage-report">Cypress tests with code coverage report</span></h2><p>Let&#39;s install Cypress test runner and its <a href="https://github.com/cypress-io/code-coverage">code coverage plugin</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress @cypress/code-coverage</span><br><span class="line">+ cypress@9.5.1</span><br><span class="line">+ @cypress/code-coverage@3.9.12</span><br></pre></td></tr></table></figure><p>I have registered the code coverage report in the plugins file</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// `on` is used to hook into various events Cypress emits</span></span><br><span class="line">  <span class="comment">// `config` is the resolved Cypress config</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;@cypress/code-coverage/task&#x27;</span>)(on, config)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and loaded the plugin from the support file</p><figure class="highlight js"><figcaption><span>cypress/support/index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@cypress/code-coverage/support&#x27;</span></span><br></pre></td></tr></table></figure><p>My test is simple: just visiting the site defined in the <code>cypress.json</code> as <code>baseUrl: http://localhost:3000</code></p><figure class="highlight ts"><figcaption><span>cypress/integration/spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;loads the home page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>In the Cypress Command Log I see the code coverage report messages.</p><p><img src="../images/cc-for-nextjs/messages.png" alt="The code coverage plugin logs its messages"></p><p>If you are not sure where the generated report is saved, open the DevTools console and click on the last message. It shows the report was written in the &quot;coverage&quot; folder.</p><p><img src="../images/cc-for-nextjs/report-path.png" alt="We should look for the coverage report in the coverage folder"></p><p>There are coverage reports in various formats</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ls -la coverage</span><br><span class="line">total 32</span><br><span class="line">drwxr-xr-x   7 glebbahmutov  staff   224 Mar  8 15:05 .</span><br><span class="line">drwxr-xr-x  21 glebbahmutov  staff   672 Mar  8 15:29 ..</span><br><span class="line">-rw-r--r--   1 glebbahmutov  staff  1022 Mar  8 16:55 clover.xml</span><br><span class="line">-rw-r--r--   1 glebbahmutov  staff  1394 Mar  8 16:55 coverage-final.json</span><br><span class="line">-rw-r--r--   1 glebbahmutov  staff   883 Mar  8 16:55 coverage-summary.json</span><br><span class="line">drwxr-xr-x  12 glebbahmutov  staff   384 Mar  8 15:05 lcov-report</span><br><span class="line">-rw-r--r--   1 glebbahmutov  staff   256 Mar  8 16:55 lcov.info</span><br></pre></td></tr></table></figure><p>I am interested in the HTML report showing code coverage on top of the source files.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ open coverage/lcov-report/index.html</span><br></pre></td></tr></table></figure><p>The top level report shows 75% of all instrumented statements executed by the <code>cy.visit(&#39;/&#39;)</code> command.</p><p><img src="../images/cc-for-nextjs/report1.png" alt="The top level report shows coverage by file"></p><p>We can click on the filename to see the individual coverage report</p><p><img src="../images/cc-for-nextjs/report2.png" alt="The function &quot;add&quot; was never called by the application"></p><h2><span id="deployment-and-testing">Deployment and testing</span></h2><p>I have set up my Next.js application to deploy on Vercel. You can find the production version of the application at <a href="https://next-ts-app-swart.vercel.app/">https://next-ts-app-swart.vercel.app/</a>. The <code>INSTRUMENT_CODE</code> environment variable is set during the Vercel build, thus you can see the code coverage object if you open the DevTools.</p><p><img src="../images/cc-for-nextjs/deployed-cc.png" alt="The deployed production code has the code coverage object"></p><p>Take a look that the source paths in the code coverage object in the deployed production application (marked with an orange arrow). The source paths are different from the source paths to the files when running locally. Let&#39;s run the tests to see if we can correctly generate the test coverage report from this coverage object. I will open Cypress test runner pointing at the deployed URL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ CYPRESS_baseUrl=https://next-ts-app-swart.vercel.app/ npx cypress open</span><br></pre></td></tr></table></figure><p>The tests finish and generate the code coverage report.</p><p><img src="../images/cc-for-nextjs/prod.png" alt="The E2E test visited the production site"></p><p>The code coverage plugin has successfully mapped the production code paths to the local source files and generated the report</p><p><img src="../images/cc-for-nextjs/prod-report.png" alt="The code coverage report for the production app"></p><p>We can see the source code &quot;search&quot; and mapping from the production paths to the local application source paths by enabling the debug logs when starting Cypress</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ DEBUG=code-coverage CYPRESS_baseUrl=https://next-ts-app-swart.vercel.app/ npx cypress open</span><br></pre></td></tr></table></figure><p>The logs show how the plugin is looking for a parent folder so that all paths in the code coverage object map to the existing file paths.</p><p><img src="../images/cc-for-nextjs/paths.png" alt="The production source paths were mapped to the local source files"></p><p>To generate the report we need to code coverage information and the application source files.</p><h2><span id="tests-in-a-separate-repo">Tests in a separate repo</span></h2><p>In some situations, the tests live in a repository separate from the application. I have described such situation in the blog posts <a href="/blog/how-to-keep-cypress-tests-in-another-repo/" title="How to Keep Cypress Tests in Another Repo While Using GitHub Actions">How to Keep Cypress Tests in Another Repo While Using GitHub Actions</a> and <a href="/blog/how-to-keep-cypress-tests-in-another-repo-with-circleci/" title="How to Keep Cypress Tests in Another Repo While Using CircleCI">How to Keep Cypress Tests in Another Repo While Using CircleCI</a>. For this blog post, I have created repository <a href="https://github.com/bahmutov/next-ts-app-tests">bahmutov&#x2F;next-ts-app-tests</a> with a copy of Cypress tests. We can run these tests against the deployed application</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ DEBUG=code-coverage CYPRESS_baseUrl=https://next-ts-app-swart.vercel.app/ npx cypress open</span><br></pre></td></tr></table></figure><p>This time, the code coverage cannot be mapped to the source files, since there are no local files to find</p><p><img src="../images/cc-for-nextjs/cannot-find-files.png" alt="The code coverage plugin could not find source files referenced in the coverage object"></p><p>The plugin has still generated the overall report, but you cannot drill down into the individual source file reports</p><p><img src="../images/cc-for-nextjs/no-files-report.gif" alt="Without the source files, you cannot see the code coverage report per file"></p><p>If we copy just the <code>pages</code> folder from the <a href="https://github.com/bahmutov/next-ts-app/tree/main/pages">next-ts-app</a> into the &quot;next-ts-app-tests&quot; folder before running the Cypress tests, then it finds it and can generate the report.</p><p><strong>Tip:</strong> instead of copying the <code>pages</code> folder from the application&#39;s folder to the test folder, I create a symbolic link</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># assuming the following structure</span><br><span class="line">#   next-ts-app/</span><br><span class="line">#     the application with &quot;pages&quot; folder</span><br><span class="line">#   next-ts-app-tests/</span><br><span class="line">#     the folder with the tests</span><br><span class="line"># from the &quot;next-ts-app-tests&quot; folder call</span><br><span class="line">$ ln -s ../next-ts-app/pages</span><br></pre></td></tr></table></figure><p>Now the &quot;pages&quot; folder is linked to the tests folder</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ls -la</span><br><span class="line">...</span><br><span class="line">pages -&gt; ../next-ts-app/pages</span><br></pre></td></tr></table></figure><h3><span id="cloning-the-app-repo-into-the-tests-repo">Cloning the app repo into the tests repo</span></h3><p>Let&#39;s give our tests the application&#39;s source code so it can generate the file code coverage reports. I will use <a href="/blog/trying-github-actions/" title="GitHub Actions">GitHub Actions</a> to checkout out both repos and copy the &quot;pages&quot; folder from the application folder into the tests folder.</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># https://github.com/actions/checkout</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">this</span> <span class="string">repo</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">the</span> <span class="string">application</span> <span class="string">repo</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">bahmutov/next-ts-app</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">next-ts-app</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># help the code coverage tool find the source files</span></span><br><span class="line">      <span class="comment"># can also move or link the source files</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Copy</span> <span class="string">application</span> <span class="string">source</span> <span class="string">files</span> <span class="string">💾</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">cp</span> <span class="string">-r</span> <span class="string">next-ts-app/pages</span> <span class="string">.</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">against</span> <span class="string">the</span> <span class="string">production</span> <span class="string">site</span> <span class="string">🧪</span></span><br><span class="line">        <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">config:</span> <span class="string">&#x27;baseUrl=https://next-ts-app-swart.vercel.app/&#x27;</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">DEBUG:</span> <span class="string">code-coverage</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># https://github.com/marketplace/actions/github-pages-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">code</span> <span class="string">coverage</span> <span class="string">report</span> <span class="string">🚀</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./coverage/lcov-report</span></span><br></pre></td></tr></table></figure><p>Tip: I have used <a href="https://github.com/marketplace/actions/github-pages-action">actions&#x2F;github-pages-action</a> step at the end to publish the generated HTML code coverage report to GitHub Pages. You can find it at <a href="https://glebbahmutov.com/next-ts-app-tests/">https://glebbahmutov.com/next-ts-app-tests/</a>.</p><p><img src="../images/cc-for-nextjs/hosted-report.gif" alt="The code coverage report produced on CI and hosted on GitHub Pages"></p><h3><span id="fetching-the-right-application-source-code">Fetching the right application source code</span></h3><p>Imagine you are deploying an instrumented application to some environment, like <code>https://instrumented.acme.co</code> once per day. Then you run the tests against it to generate the full code coverage report. You only do this once per day because instrumenting and running the tests is slow, but there might be multiple commits to the application source code itself. How do you use the right source code when generating the coverage reports? By checking out the right source code commit for the deployed application.</p><p>Next.js applications embed the <code>buildId</code> in the pages, and you can control the ID. For example, you can concatenate the branch and the source code commit SHA, like <a href="https://github.com/bahmutov/next-ts-app/blob/main/next.config.js">this</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// next.config.js</span></span><br><span class="line"><span class="comment">// https://github.com/cypress-io/commit-info</span></span><br><span class="line"><span class="keyword">const</span> &#123; getBranch, getSha &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@cypress/commit-info&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">import(&#x27;next&#x27;).NextConfig</span>&#125; */</span></span><br><span class="line"><span class="keyword">const</span> nextConfig = &#123;</span><br><span class="line">  <span class="attr">reactStrictMode</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">generateBuildId</span>: <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// make sure to use Vercel variables if available</span></span><br><span class="line">    <span class="comment">// https://vercel.com/docs/concepts/projects/environment-variables</span></span><br><span class="line">    <span class="keyword">const</span> branch =</span><br><span class="line">      process.<span class="property">env</span>.<span class="property">VERCEL_GIT_COMMIT_REF</span> ||</span><br><span class="line">      (<span class="keyword">await</span> <span class="title function_">getBranch</span>()) ||</span><br><span class="line">      <span class="string">&#x27;unknown branch&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> sha =</span><br><span class="line">      process.<span class="property">env</span>.<span class="property">VERCEL_GIT_COMMIT_SHA</span> || (<span class="keyword">await</span> <span class="title function_">getSha</span>()) || <span class="string">&#x27;unknown sha&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> buildId = <span class="string">`<span class="subst">$&#123;branch&#125;</span>:::<span class="subst">$&#123;sha&#125;</span>`</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;generated build id &quot;%s&quot;&#x27;</span>, buildId)</span><br><span class="line">    <span class="keyword">return</span> buildId</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = nextConfig</span><br></pre></td></tr></table></figure><p>I wrote a little GitHub action to query the HTML page and extract the build ID value and split it into branch and commit SHA. Then you can check out the right source code commit when checking out the application on CI.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/actions/checkout</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">this</span> <span class="string">repo</span> <span class="string">🛎</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">the</span> <span class="string">build</span> <span class="string">info</span> <span class="string">🖨</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">bahmutov/get-build-id@v1</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">get-build-id</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&#x27;https://next-ts-app-swart.vercel.app/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Print</span> <span class="string">the</span> <span class="string">build</span> <span class="string">outputs</span> <span class="string">🖨</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    echo &quot;Next.js build ID: $&#123;&#123; steps.get-build-id.outputs.buildId &#125;&#125;&quot;</span></span><br><span class="line"><span class="string">    echo &quot;Next.js build branch: $&#123;&#123; steps.get-build-id.outputs.branch &#125;&#125;&quot;</span></span><br><span class="line"><span class="string">    echo &quot;Next.js build commit: $&#123;&#123; steps.get-build-id.outputs.commit &#125;&#125;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">the</span> <span class="string">application</span> <span class="string">repo</span> <span class="string">🛎</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">bahmutov/next-ts-app</span></span><br><span class="line">    <span class="comment"># from the build ID, we get the commit matching the deployed site</span></span><br><span class="line">    <span class="comment"># so let&#x27;s fetch just that commit to make sure our report</span></span><br><span class="line">    <span class="comment"># uses the correct source files</span></span><br><span class="line">    <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.get-build-id.outputs.commit</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">next-ts-app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># help the code coverage tool find the source files</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Copy</span> <span class="string">application</span> <span class="string">source</span> <span class="string">files</span> <span class="string">💾</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">cp</span> <span class="string">-r</span> <span class="string">next-ts-app/pages</span> <span class="string">.</span></span><br></pre></td></tr></table></figure><h3><span id="code-coverage-on-circleci">Code coverage on CircleCI</span></h3><p>I have set up an equivalent code coverage collection on CircleCI. The tests project logs in using a <a href="https://circleci.com/docs/2.0/gh-bb-integration/#enable-your-project-to-check-out-additional-private-repositories">machine user account</a> and checks out the application source code before running the tests and generating the report. See <a href="https://github.com/bahmutov/next-ts-app-tests/blob/main/.circleci/config.yml">.circleci&#x2F;config.yml</a> file for the current code</p><figure class="highlight yml"><figcaption><span>.circleci/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="comment"># https://github.com/cypress-io/circleci-orb</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="attr">branches:</span></span><br><span class="line">              <span class="attr">ignore:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">gh-pages</span></span><br><span class="line">          <span class="attr">post-checkout:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;Checking out the application&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">git@github.com:bahmutov/next-ts-app.git</span> <span class="string">--depth</span> <span class="number">1</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">Link</span> <span class="string">source</span> <span class="string">pages</span> <span class="string">to</span> <span class="string">this</span> <span class="string">repo</span></span><br><span class="line">                <span class="comment"># syntax is: &quot;ln &lt;existing folder&gt; &lt;link path&gt;&quot;</span></span><br><span class="line">                <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line"><span class="string">                  ln -s next-ts-app/pages pages</span></span><br><span class="line"><span class="string">                  ls -la</span></span><br><span class="line"><span class="string"></span>          <span class="attr">config:</span> <span class="string">&#x27;baseUrl=https://next-ts-app-swart.vercel.app/&#x27;</span></span><br><span class="line">          <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">post-steps:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">store_artifacts:</span></span><br><span class="line">                <span class="attr">path:</span> <span class="string">coverage/lcov-report</span></span><br></pre></td></tr></table></figure><p>The source code report is stored as a test artifact on CircleCI</p><p><img src="../images/cc-for-nextjs/circleci-coverage.gif" alt="The code coverage report on CircleCI"></p><p><strong>Tip:</strong> if you do not want to set up SSH key to check out the second repository, you could use a GitHub token</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://$&#123;GITHUB_TOKEN&#125;:x-oauth-basic@github.com/owner/repo &lt;local folder name&gt; --depth 1</span><br></pre></td></tr></table></figure><h2><span id="see-more">See more</span></h2><ul><li>read my other <a href="../tags/code-coverage/">blog posts about code coverage</a></li><li>see the JavaScript application <a href="https://github.com/bahmutov/next-and-cypress-example">bahmutov&#x2F;next-and-cypress-example</a></li><li><a href="https://medium.com/geekculture/component-testing-next-js-application-with-cypress-28fa311adda6">Component Testing Next.js Application with Cypress</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;pullquote&quot;&gt;&lt;p&gt;📦 you can find the source code for this blog post in the repository &lt;a href=&quot;https://github.com/bahmutov/n
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="code coverage" scheme="https://glebbahmutov.com/blog/tags/code-coverage/"/>
    
      <category term="vercel" scheme="https://glebbahmutov.com/blog/tags/vercel/"/>
    
  </entry>
  
  <entry>
    <title>Control LaunchDarkly From Cypress Tests</title>
    <link href="https://glebbahmutov.com/blog/cypress-and-launchdarkly/"/>
    <id>https://glebbahmutov.com/blog/cypress-and-launchdarkly/</id>
    <published>2022-03-04T05:00:00.000Z</published>
    <updated>2022-03-04T16:12:34.626Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s say you are using <a href="https://launchdarkly.com/">LaunchDarkly</a> to develop and test new web application features behind a flag. You have end-to-end tests too. How do you test the features behind the flag? In this blog post, I will show how to target features using individual user IDs. We will use the plugin <a href="https://github.com/bahmutov/cypress-ld-control">cypress-ld-control</a> to set the user ID as an explicit target for the experiment and then confirm the web application behaves correctly using Cypress test.</p><!-- toc --><ul><li><a href="#launchdarkly-project">LaunchDarkly project</a></li><li><a href="#demo-react-application">Demo React application</a></li><li><a href="#cypress-setup">Cypress setup</a><ul><li><a href="#sensitive-variables">Sensitive variables</a></li><li><a href="#starting-the-app-and-the-tests">Starting the app and the tests</a></li><li><a href="#make-launchdarkly-optional">Make LaunchDarkly optional</a></li><li><a href="#the-plugin-api">The plugin API</a></li></ul></li><li><a href="#the-tests">The tests</a></li><li><a href="#cleaning-up">Cleaning up</a></li><li><a href="#inspecting-a-feature-flag">Inspecting a feature flag</a></li><li><a href="#running-tests-on-ci">Running tests on CI</a></li><li><a href="#single-test">Single test</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><h2><span id="launchdarkly-project">LaunchDarkly project</span></h2><p>I have created a new LaunchDarkly project with project &quot;Demo Project&quot; and two environments. We will concentrate on the &quot;Test&quot; environment.</p><p><img src="../images/ld-control/project.png" alt="LaunchDarkly demo project"></p><p>In the project, I have created a new String feature flag <code>testing-launch-darkly-control-from-cypress</code> with three variations.</p><p><img src="../images/ld-control/flag.png" alt="Test feature flag variations"></p><p>Because we want to turn different flag variations for specific users, we will turn on the &quot;Targeting&quot; option. Currently there are no targets yet.</p><p><img src="../images/ld-control/targeting.png" alt="Turn the feature flag targeting on"></p><h2><span id="demo-react-application">Demo React application</span></h2><p>To demonstrate controlling the feature flags from Cypress tests, I grabbed a copy of the LD&#39;s React application. I got a copy using the <a href="https://github.com/Rich-Harris/degit#readme">degit</a> command.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npx degit launchdarkly/react-client-sdk/examples/hoc ld-example</span><br><span class="line">&gt; cloned launchdarkly/react-client-sdk#HEAD to ld-example</span><br><span class="line">$ cd ld-example</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>🎁 You can find my version of the application used in this blog post in the repo <a href="https://github.com/bahmutov/cypress-ld-control-example">bahmutov&#x2F;cypress-ld-control-example</a>.</p></blockquote><p>I have changed the code to use my project&#39;s Client SDK ID and show the current greeting using the feature flag value. For the demo, I have passed a made-up user ID (in the real application, the user ID would be set after authentication step)</p><figure class="highlight js"><figcaption><span>universal/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; withLDProvider &#125; <span class="keyword">from</span> <span class="string">&#x27;launchdarkly-react-client-sdk&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  ...</span><br><span class="line">);</span><br><span class="line"><span class="comment">// Set clientSideID to your own Client-side ID. You can find this in</span></span><br><span class="line"><span class="comment">// your LaunchDarkly portal under Account settings / Projects</span></span><br><span class="line"><span class="comment">// https://docs.launchdarkly.com/sdk/client-side/javascript#initializing-the-client</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;USER_1234&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">withLDProvider</span>(&#123; <span class="attr">clientSideID</span>: <span class="string">&#x27;YOUR_CLIENT_SIDE_ID&#x27;</span>, <span class="attr">user</span>: <span class="string">&#x27;USER_1234&#x27;</span> &#125;)(<span class="title class_">App</span>);</span><br></pre></td></tr></table></figure><p>My Home page uses the flag&#39;s value to show the greeting.</p><figure class="highlight js"><figcaption><span>universal/home.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; withLDConsumer &#125; <span class="keyword">from</span> <span class="string">&#x27;launchdarkly-react-client-sdk&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params">&#123; flags &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Root</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Heading</span>&gt;</span>&#123;flags.testingLaunchDarklyControlFromCypress&#125;, World<span class="tag">&lt;/<span class="name">Heading</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      This is a LaunchDarkly React example project. The message above changes the greeting,</span></span><br><span class="line"><span class="language-xml">      based on the current feature flag variation.</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">withLDConsumer</span>()(<span class="title class_">Home</span>);</span><br></pre></td></tr></table></figure><p>When I start the application, it shows the default causal greeting</p><p><img src="../images/ld-control/hello.png" alt="The application uses the casual greeting variation of the flag"></p><p>Great. Let&#39;s target the user <code>USER_1234</code> with a more formal greeting. At LaunchDarkly app, I will create a new targeting list. Don&#39;t forget to save the changes for them to be applied!</p><p><img src="../images/ld-control/target-user.png" alt="Target the user by ID"></p><p>LaunchDarkly SDK includes real-time updates using server-side events, thus the Home page immediately changes to the formal greeting.</p><p><img src="../images/ld-control/formal.png" alt="The current user receives its own feature flag value"></p><p>Nice, let&#39;s do the same from a Cypress test.</p><h2><span id="cypress-setup">Cypress setup</span></h2><p>Let&#39;s install Cypress test runner</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn add -D cypress</span></span><br><span class="line">success Saved 1 new dependency.</span><br><span class="line">info Direct dependencies</span><br><span class="line">└─ cypress@9.5.1</span><br></pre></td></tr></table></figure><p>We will need to control LaunchDarkly flags via HTTP calls. While you can make HTTP calls from Node and from Cypress easily, there is higher-level logic LaunchDarkly uses that makes implementing feature flag changes a chore. I have abstracted everything necessary to add individual user targets into a plugin <a href="https://github.com/bahmutov/cypress-ld-control">cypress-ld-control</a> that Cypress tests can use to avoid the complexity. Let&#39;s install this plugin and start using it.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn add -D cypress-ld-control</span></span><br><span class="line">info Direct dependencies</span><br><span class="line">└─ cypress-ld-control@1.1.2</span><br></pre></td></tr></table></figure><p>To change the flag values and add individual user targets, the plugin needs to access the LaunchDarkly REST API. We need to make an access token.</p><p><img src="../images/ld-control/token.png" alt="LaunchDarkly token"></p><p>Let&#39;s load the plugin and create tasks for the Cypress tests to call using the <a href="https://on.cypress.io/task">cy.task</a> - after all, <a href="/blog/powerful-cy-task/" title="cy.task is very powerful">cy.task is very powerful</a> command.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; initLaunchDarklyApiTasks &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress-ld-control&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> tasks = &#123;</span><br><span class="line">    <span class="comment">// add your other Cypress tasks if any</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// https://github.com/bahmutov/cypress-ld-control</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    process.<span class="property">env</span>.<span class="property">LAUNCH_DARKLY_PROJECT_KEY</span> &amp;&amp;</span><br><span class="line">    process.<span class="property">env</span>.<span class="property">LAUNCH_DARKLY_AUTH_TOKEN</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">const</span> ldApiTasks = <span class="title function_">initLaunchDarklyApiTasks</span>(&#123;</span><br><span class="line">      <span class="attr">projectKey</span>: process.<span class="property">env</span>.<span class="property">LAUNCH_DARKLY_PROJECT_KEY</span>,</span><br><span class="line">      <span class="attr">authToken</span>: process.<span class="property">env</span>.<span class="property">LAUNCH_DARKLY_AUTH_TOKEN</span>,</span><br><span class="line">      <span class="attr">environment</span>: <span class="string">&#x27;test&#x27;</span>, <span class="comment">// the key of the environment to use</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// copy all LaunchDarkly methods as individual tasks</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(tasks, ldApiTasks)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Skipping cypress-ld-control plugin&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// register all tasks with Cypress</span></span><br><span class="line">  <span class="title function_">on</span>(<span class="string">&#x27;task&#x27;</span>, tasks)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// IMPORTANT: return the updated config object</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Whenever we open Cypress locally or run on a continuous integration system, we need to provide two environment variables <code>LAUNCH_DARKLY_PROJECT_KEY</code> and <code>LAUNCH_DARKLY_AUTH_TOKEN</code>. The token is your private secret key we have just created. The project key is the unique string identifying each project shown in the URL and on the <code>https://app.launchdarkly.com/settings/projects</code> page.</p><p><img src="../images/ld-control/project-key.png" alt="LaunchDarkly project key"></p><h3><span id="sensitive-variables">Sensitive variables</span></h3><p>You can store sensitive values and inject them as needed using my <a href="https://github.com/bahmutov/as-a">as-a</a> CLI tool. In my case, I have <code>.as-a.ini</code> file that is never checked into source control</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; https://github.com/bahmutov/as-a</span></span><br><span class="line"><span class="section">[cypress-ld-control-demo]</span></span><br><span class="line"><span class="attr">LAUNCH_DARKLY_PROJECT_KEY</span>=...</span><br><span class="line"><span class="attr">LAUNCH_DARKLY_AUTH_TOKEN</span>=...</span><br></pre></td></tr></table></figure><p>I open Cypress using the command <code>as-a cypress-ld-control-demo yarn cypress open</code>.</p><h3><span id="starting-the-app-and-the-tests">Starting the app and the tests</span></h3><p>I typically use <a href="https://github.com/bahmutov/start-server-and-test">start-server-and-test</a> to start the application and open &#x2F; run Cypress tests. In my <code>package.json</code> file I have set up the command <code>dev</code>:</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node src/server/index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;start-test 3000 &#x27;cypress open&#x27;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>I run the application and inject the sensitive variables into Cypress tests using the terminal command</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ as-a cypress-ld-control-demo yarn run dev</span><br></pre></td></tr></table></figure><p>For more, see video <a href="https://www.youtube.com/watch?v=6iDjbAXvLa0">Start server and test</a>.</p><h3><span id="make-launchdarkly-optional">Make LaunchDarkly optional</span></h3><p>It is up to you to require these environment variables or gracefully handle it and only require them in some tests. For example, you could set an environment variable if the LaunchDarkly has been initialized:</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; initLaunchDarklyApiTasks &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress-ld-control&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://github.com/bahmutov/cypress-ld-control</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    process.<span class="property">env</span>.<span class="property">LAUNCH_DARKLY_PROJECT_KEY</span> &amp;&amp;</span><br><span class="line">    process.<span class="property">env</span>.<span class="property">LAUNCH_DARKLY_AUTH_TOKEN</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">const</span> ldApiTasks = <span class="title function_">initLaunchDarklyApiTasks</span>(&#123;</span><br><span class="line">      <span class="attr">projectKey</span>: process.<span class="property">env</span>.<span class="property">LAUNCH_DARKLY_PROJECT_KEY</span>,</span><br><span class="line">      <span class="attr">authToken</span>: process.<span class="property">env</span>.<span class="property">LAUNCH_DARKLY_AUTH_TOKEN</span>,</span><br><span class="line">      <span class="attr">environment</span>: <span class="string">&#x27;test&#x27;</span>, <span class="comment">// the key of the environment to use</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// copy all LaunchDarkly methods as individual tasks</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(tasks, ldApiTasks)</span><br><span class="line">    <span class="comment">// set an environment variable for specs to use</span></span><br><span class="line">    <span class="comment">// to check if the LaunchDarkly can be controlled</span></span><br><span class="line">    config.<span class="property">env</span>.<span class="property">launchDarklyApiAvailable</span> = <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Skipping cypress-ld-control plugin&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// register all tasks with Cypress</span></span><br><span class="line">  <span class="title function_">on</span>(<span class="string">&#x27;task&#x27;</span>, tasks)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// IMPORTANT: return the updated config object</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the test files that really need to call LaunchDarkly API we can check the variable once:</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">before</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title class_">Cypress</span>.<span class="title function_">env</span>(<span class="string">&#x27;launchDarklyApiAvailable&#x27;</span>), <span class="string">&#x27;LaunchDarkly&#x27;</span>).<span class="property">to</span>.<span class="property">be</span>.<span class="property">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3><span id="the-plugin-api">The plugin API</span></h3><p>The &quot;cypress-ld-control&quot; plugin can be used by itself without Cypress to target users. When you initialize the <code>ldApi</code> object, it has the following methods: <code>getFeatureFlag</code>, <code>setFeatureFlagForUser</code>, and others, see <a href="https://github.com/bahmutov/cypress-ld-control#api">README#API</a> section. When using the plugin from Cypress specs, you need to call these methods via the <a href="https://on.cypress.io/task">cy.task</a> command. To avoid clashing with other tasks, and conform to the <code>cy.task</code> semantics, the plugin follows the following rules:</p><ul><li>every task it returns is prefixed with <code>cypress-ld-control:</code> string. Thus you to get the feature flag you would call <code>cy.task(&#39;cypress-ld-control:getFeatureFlag&#39;)</code> command.</li><li>every command takes zero or a single options object as an argument, for example: <code>cy.task(&#39;cypress-ld-control:setFeatureFlagForUser&#39;, (&#123;featureFlagKey, userId, variationIndex&#125;))</code></li><li>every command returns either an object or a null, never <code>undefined</code></li></ul><h2><span id="the-tests">The tests</span></h2><p>For each experiment variation, I wrote a test placeholder to verify the application&#39;s behavior. In every test we can set the feature flag target that specific user, load the application, and check its behavior.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">before</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title class_">Cypress</span>.<span class="title function_">env</span>(<span class="string">&#x27;launchDarklyApiAvailable&#x27;</span>), <span class="string">&#x27;LaunchDarkly&#x27;</span>).<span class="property">to</span>.<span class="property">be</span>.<span class="property">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows the casual greeting&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows formal greeting&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows vacation greeting&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Let&#39;s start with the first test. Set the flag, load the app, confirm the user sees a casual greeting heading.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">before</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title class_">Cypress</span>.<span class="title function_">env</span>(<span class="string">&#x27;launchDarklyApiAvailable&#x27;</span>), <span class="string">&#x27;LaunchDarkly&#x27;</span>).<span class="property">to</span>.<span class="property">be</span>.<span class="property">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> featureFlagKey = <span class="string">&#x27;testing-launch-darkly-control-from-cypress&#x27;</span></span><br><span class="line"><span class="keyword">const</span> userId = <span class="string">&#x27;USER_1234&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows the casual greeting&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// target the given user to receive the first variation of the feature flag</span></span><br><span class="line">  cy.<span class="title function_">task</span>(<span class="string">&#x27;cypress-ld-control:setFeatureFlagForUser&#x27;</span>, &#123;</span><br><span class="line">    featureFlagKey,</span><br><span class="line">    userId,</span><br><span class="line">    <span class="attr">variationIndex</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Hello, World&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/ld-control/ld.gif" alt="The test sets the feature flag and confirm the user sees the first variation"></p><p>Similarly, the second test can target the user and confirm the second variant (index 1) is working as expected.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows formal greeting&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">task</span>(<span class="string">&#x27;cypress-ld-control:setFeatureFlagForUser&#x27;</span>, &#123;</span><br><span class="line">    featureFlagKey,</span><br><span class="line">    userId,</span><br><span class="line">    <span class="attr">variationIndex</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;How do you do, World&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/ld-control/test-formal.png" alt="Testing the second variation that shows the formal greeting"></p><p>Finally, when on vacation, the greeting is relaxed</p><p><img src="../images/ld-control/test-aloha.png" alt="Testing the Aloha greeting"></p><p>Note: you can see a flash of empty content while the application is fetching the features from LaunchDarkly. See <a href="https://docs.launchdarkly.com/sdk/client-side/javascript/default-variations">LaunchDarkly docs</a> on how to avoid it. For my simple application it was fine to have the flash.</p><h2><span id="cleaning-up">Cleaning up</span></h2><p>When the tests are finished, the last target for the user remains. We should clean up these targets to avoid adding more and more individual test users to LaunchDarkly. I am not sure, but it probably makes it slower to fetch the status for a particular user, and makes the web UI noisier. Let&#39;s remove any targeting after all tests are done.</p><p><img src="../images/ld-control/remains.png" alt="The user target remains after the last test"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">after</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">task</span>(<span class="string">&#x27;cypress-ld-control:removeUserTarget&#x27;</span>, &#123; featureFlagKey, userId &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Nice, the user target is automatically removed.</p><p><img src="../images/ld-control/cleaned.png" alt="The test removed the individual user target after finishing"></p><p>Note: the <code>after</code> hook runs even if any of the tests fail. The only reason it can be completely skipped is if the test runner crashes.</p><h2><span id="inspecting-a-feature-flag">Inspecting a feature flag</span></h2><p>If you are just interested in the feature flag and its variations, you can fetch the flag&#39; state using the &quot;cypress-ld-control:getFeatureFlag&quot; task</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows vacation greeting&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">task</span>(<span class="string">&#x27;cypress-ld-control:setFeatureFlagForUser&#x27;</span>, &#123;</span><br><span class="line">    featureFlagKey,</span><br><span class="line">    userId,</span><br><span class="line">    <span class="attr">variationIndex</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Aloha, World&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// print the current state of the feature flag and its variations</span></span><br><span class="line">  cy.<span class="title function_">task</span>(<span class="string">&#x27;cypress-ld-control:getFeatureFlag&#x27;</span>, featureFlagKey)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br><span class="line">    <span class="comment">// let&#x27;s print the variations to the Command Log side panel</span></span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;variations&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">variations</span>) =&gt;</span> &#123;</span><br><span class="line">      variations.<span class="title function_">forEach</span>(<span class="function">(<span class="params">v, k</span>) =&gt;</span> &#123;</span><br><span class="line">        cy.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;k&#125;</span>: <span class="subst">$&#123;v.name&#125;</span> is <span class="subst">$&#123;v.value&#125;</span>`</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The entire feature flag object is quite large, as we see in the DevTools console. The highlighted variations are visible in the Command Log.</p><p><img src="../images/ld-control/print-flag.png" alt="The feature flag object"></p><h2><span id="running-tests-on-ci">Running tests on CI</span></h2><p>Let&#39;s use <a href="/blog/trying-github-actions/" title="GitHub Actions">GitHub Actions</a> to run the same tests on CI. I will use <a href="https://github.com/cypress-io/github-action">cypress-io&#x2F;github-action</a> to install the dependencies, cache Cypress, start the application, and run the tests. I will need to set the same environment secrets in the repo.</p><p><img src="../images/ld-control/secrets.png" alt="Setting secrets on GitHub"></p><p>The CI workflow <a href="https://github.com/bahmutov/cypress-ld-control-example/blob/main/.github/workflows/ci.yml">ci.yml</a> uses the GH action and injects the secrets as environment variables.</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">        <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">&#x27;yarn start&#x27;</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">LAUNCH_DARKLY_PROJECT_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.LAUNCH_DARKLY_PROJECT_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">LAUNCH_DARKLY_AUTH_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.LAUNCH_DARKLY_AUTH_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>The terminal output on CI shows the messages from <code>cypress-ld-control</code> plugin as it calls LaunchDarkly API</p><p><img src="../images/ld-control/terminal.png" alt="The plugin logs its LaunchDarkly operations"></p><h2><span id="single-test">Single test</span></h2><p>Because LaunchDarkly client-side SDK includes real-time updates, we can write a single test that goes through every variation of the flag without visiting the page again or even reloading it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">it.<span class="title function_">only</span>(<span class="string">&#x27;shows all greetings&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">task</span>(<span class="string">&#x27;cypress-ld-control:setFeatureFlagForUser&#x27;</span>, &#123;</span><br><span class="line">    featureFlagKey,</span><br><span class="line">    userId,</span><br><span class="line">    <span class="attr">variationIndex</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Hello, World&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    <span class="comment">// I have added one second waits for clarity</span></span><br><span class="line">    .<span class="title function_">wait</span>(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">task</span>(<span class="string">&#x27;cypress-ld-control:setFeatureFlagForUser&#x27;</span>, &#123;</span><br><span class="line">    featureFlagKey,</span><br><span class="line">    userId,</span><br><span class="line">    <span class="attr">variationIndex</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;How do you do, World&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>).<span class="title function_">wait</span>(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">task</span>(<span class="string">&#x27;cypress-ld-control:setFeatureFlagForUser&#x27;</span>, &#123;</span><br><span class="line">    featureFlagKey,</span><br><span class="line">    userId,</span><br><span class="line">    <span class="attr">variationIndex</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Aloha, World&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/ld-control/single-test.gif" alt="A single test will all feature flag states"></p><p>Note: the plugin &quot;cypress-ld-control&quot; handles LaunchDarkly rate-limiting, retrying API calls if the test runner receives 429 HTTP response code.</p><p>Note 2: in the test above you see a flash of &quot;Hello, World&quot; default flag state between the formal and the vacation greetings. The plugin automatically removes the current user target from a variation before adding it to another one (the same user cannot be target of two variations at the same time). Thus you see that brief moment between the remove and add commands.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="https://github.com/bahmutov/cypress-ld-control">bahmutov&#x2F;cypress-ld-control</a> plugin repo</li><li><a href="https://github.com/bahmutov/cypress-ld-control-example">bahmutov&#x2F;cypress-ld-control-example</a> example app repo</li><li><a href="/blog/test-feature-flags/" title="Test Feature Flags Using Cypress and Flagsmith">Test Feature Flags Using Cypress and Flagsmith</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s say you are using &lt;a href=&quot;https://launchdarkly.com/&quot;&gt;LaunchDarkly&lt;/a&gt; to develop and test new web application features behind 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Visualize Cypress Command Queue</title>
    <link href="https://glebbahmutov.com/blog/visualize-cypress-command-queue/"/>
    <id>https://glebbahmutov.com/blog/visualize-cypress-command-queue/</id>
    <published>2022-02-28T05:00:00.000Z</published>
    <updated>2022-02-28T12:29:30.796Z</updated>
    
    <content type="html"><![CDATA[<p>You can watch my video &quot;<a href="https://youtu.be/K5x2oXWsWqI">Cypress Command Chain Plugin Introduction</a>&quot; that covers the contents of this blog post.</p><h2><span id="the-problem">The problem</span></h2><p>A lot of times, people new to Cypress get an unexpected result while trying to print a value. For example, the following (incorrect) test is supposed to print the number from the page.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// INCORRECT, does not print &quot;n&quot;</span></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;prints a number of projects&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> n</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#projects-count&#x27;</span>)</span><br><span class="line">    .<span class="title function_">invoke</span>(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;match&#x27;</span>, <span class="regexp">/^\d+/</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">      n = <span class="title class_">Number</span>(text.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">    &#125;)</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;number&#x27;</span>, n)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/queue/undefined-n.png" alt="Cy.log does not print &quot;n&quot;"></p><p>Hmm, why is the <code>n</code> variable empty?</p><h2><span id="cypress-command-queue">Cypress command queue</span></h2><p>When Cypress runs through the test, it first queues all commands, and then starts executing them. Each command with its arguments is added to the list. It is almost like instructions you might write down and give to a human tester to run later. The above code would be something like this if I ask you to test the page:</p><ul><li>visit the index page</li><li>get the element with id &quot;project-count&quot;</li><li>confirm the text matches the regular expression <code>/^\d+/</code></li><li>convert the text to a number</li><li>print the string &quot;number&quot; and <code>undefined</code></li><li>START the test</li></ul><p>Wait, why is the last instruction says to print &quot;number&quot; and <code>undefined</code>? Because these are the parameters the test uses when calling <code>cy.log(&#39;number&#39;, n)</code>. At the moment of the call, the value of <code>n</code> is still undefined. It will be set much later.</p><h2><span id="visualize-the-command-queue">Visualize the command queue</span></h2><p>To better show the queued up commands and make it clear, I have written the <a href="https://github.com/bahmutov/cypress-command-chain">cypress-command-chain</a> plugin. Cypress emits events every time a command is queued, started, and ended. You can see these events yourself:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cypress</span>.<span class="title function_">on</span>(<span class="string">&#x27;command:enqueued&#x27;</span>, <span class="function">(<span class="params">command</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;command enqueued %s with args %o&#x27;</span>, command.<span class="property">name</span>, command.<span class="property">args</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>By inspect the <code>command.args</code> you can see the arguments at the moment <code>cy.log(&#39;number&#39;, n)</code> but before the test starts running.</p><p><img src="../images/queue/args.png" alt="Arguments passed with each command when they were queued"></p><p>Cypress Command Log shows the current test command and all finished commands. I have written the plugin <code>cypress-command-chain</code> to show <em>all enqueued</em> commands. This makes it clear which commands are scheduled to run and their arguments. The plugin even warns you if any of the arguments have <code>undefined</code> value, since it is a sign of a problem.</p><p><img src="../images/queue/queue.png" alt="cypress-command-chain plugin shows the commands and their arguments"></p><h2><span id="the-fix">The fix</span></h2><p>From the command queue, we see that we call <code>cy.log(&#39;number&#39;, n)</code> too soon. We need to call the <code>log</code> command after the value of <code>n</code> is set, which happens inside the <code>.then(...)</code> callback.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;prints a number of projects&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#projects-count&#x27;</span>)</span><br><span class="line">    .<span class="title function_">invoke</span>(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;match&#x27;</span>, <span class="regexp">/^\d+/</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> n = <span class="title class_">Number</span>(text.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">      cy.<span class="title function_">log</span>(<span class="string">&#x27;number&#x27;</span>, n)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test goes by too quickly, let&#39;s add <code>cy.wait</code> just to slow it down so we can see the Cypress command queue in action.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;prints a number of projects&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#projects-count&#x27;</span>)</span><br><span class="line">    .<span class="title function_">invoke</span>(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    .<span class="title function_">wait</span>(<span class="number">3000</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;match&#x27;</span>, <span class="regexp">/^\d+/</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> n = <span class="title class_">Number</span>(text.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">      cy.<span class="title function_">log</span>(<span class="string">&#x27;number&#x27;</span>, n)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/queue/chain.gif" alt="Notice how the cy.log command is added later when the value of &quot;n&quot; becomes known"></p><p>Now you can see that the test starts with a queue of commands ending at <code>.then cb()</code> command. The test runner does not know about the <code>cy.log</code> command yet. Only when it reaches the <code>.then cb()</code> callback function, it runs the <code>cy.log</code> and inserts it into the queue, and then continues executing the commands. When <code>cy.log</code> is called inside the <code>.then</code> callback, the value of <code>n</code> is known, so the command enqueued shows <code>&quot;number&quot;, 355</code> as expected.</p><p><strong>Tip:</strong> <code>cy.then</code> command might confuse some people, since it reminds them of JavaScript promises. This is why I suggest <a href="/blog/replace-and-remove-cy-then-command/" title="renaming it to cy.later">renaming it to cy.later</a> for clarity.</p><h2><span id="chains">Chains</span></h2><p>Cypress command queue and fluent syntax make it simpler to &quot;pass the value forward&quot; instead of getting into a variable. Thus the above test could be written as:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;prints a number of projects&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#projects-count&#x27;</span>)</span><br><span class="line">    .<span class="title function_">invoke</span>(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    .<span class="title function_">wait</span>(<span class="number">5000</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;match&#x27;</span>, <span class="regexp">/^\d+/</span>)</span><br><span class="line">    .<span class="title function_">invoke</span>(<span class="string">&#x27;split&#x27;</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="number">0</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="title class_">Number</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">log</span>(<span class="string">&#x27;number&#x27;</span>, n)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above fluent chain shows nicely</p><p><img src="../images/queue/fluent-chain.png" alt="The command chain for the above test"></p><p>The best approach to writing concise tests like this in my opinion is to see more examples. Read <a href="../tags/cypress/">my Cypress blogs</a> and watch the <a href>Cypress Tips &amp; Tricks</a> YouTube videos to learn and check out my collection of commands and recipes at <a href="https://glebbahmutov.com/cypress-examples/">glebbahmutov.com&#x2F;cypress-examples&#x2F;</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;You can watch my video &amp;quot;&lt;a href=&quot;https://youtu.be/K5x2oXWsWqI&quot;&gt;Cypress Command Chain Plugin Introduction&lt;/a&gt;&amp;quot; that covers the c
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Replace The cy.then Command</title>
    <link href="https://glebbahmutov.com/blog/replace-and-remove-cy-then-command/"/>
    <id>https://glebbahmutov.com/blog/replace-and-remove-cy-then-command/</id>
    <published>2022-02-22T05:00:00.000Z</published>
    <updated>2022-02-22T03:48:57.959Z</updated>
    
    <content type="html"><![CDATA[<p>Many people complain that the Cypress <a href="https://on.cypress.io/then">cy.then</a> command is confusing. It looks like a Promise, yet it is not.</p><ul><li>you cannot replace it with <code>async / await</code> syntax sugar</li><li>it behaves differently from the <code>Promise.then</code>, for example if the callback returns undefined value, then the original subject value is passed to the next command or assertion</li></ul><p>To avoid the confusion, you can disallow using the <code>cy.then</code> command completely.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if anyone tries to use cy.then in the spec code or in a plugin</span></span><br><span class="line"><span class="comment">// we will get an error</span></span><br><span class="line"><span class="title class_">Cypress</span>.<span class="property">Commands</span>.<span class="title function_">overwrite</span>(<span class="string">&#x27;then&#x27;</span>, <span class="keyword">function</span> (<span class="params">then, subject, cb</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Using cy.then command is disallowed&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">cy.<span class="title function_">wrap</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x + x)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;HelloHello&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/cy-later/ban-cy-then.png" alt="Banning the cy.then command"></p><p>We still want the functionality of the <code>cy.then</code> command, but under the less confusing name. We do need the original <code>cy.then</code> command functionality. Thus we will grab the reference to the function so we can call it from our command. We can find the reference by inspecting the <code>Cypress.Commands</code> object.</p><p><img src="../images/cy-later/commands.png" alt="All command functions are stored in Cypress.Commands._commands object"></p><p>Let&#39;s add a custom command <code>cy.later</code> that calls the banned <code>cy.then</code> command function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// find and save the reference to the original cy.then command</span></span><br><span class="line"><span class="comment">// by inspecting the internals of the Cypress.Commands object</span></span><br><span class="line"><span class="keyword">const</span> thenCommand = <span class="title class_">Cypress</span>.<span class="property">Commands</span>.<span class="property">_commands</span>.<span class="property">then</span>.<span class="property">fn</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// if anyone tries to use cy.then in the spec code or in a plugin</span></span><br><span class="line"><span class="comment">// we will get an error</span></span><br><span class="line"><span class="title class_">Cypress</span>.<span class="property">Commands</span>.<span class="title function_">overwrite</span>(<span class="string">&#x27;then&#x27;</span>, <span class="keyword">function</span> (<span class="params">then, subject, cb</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Using cy.then command is disallowed&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Cypress</span>.<span class="property">Commands</span>.<span class="title function_">add</span>(</span><br><span class="line">  <span class="string">&#x27;later&#x27;</span>,</span><br><span class="line">  &#123; <span class="attr">prevSubject</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  <span class="function">(<span class="params">subject, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// cy.later behaves just like cy.then</span></span><br><span class="line">    <span class="comment">// which we implement by calling the original cy.then command</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">thenCommand</span>(subject, cb)</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">cy.<span class="title function_">wrap</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">  .<span class="title function_">later</span>(cy.<span class="property">log</span>)</span><br><span class="line">  .<span class="title function_">later</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x + x)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;HelloHello&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The new command is working as expected, but hopefully does not lead the users down the wrong path.</p><p><img src="../images/cy-later/later.png" alt="The new custom command cy.later is working as expected"></p><p>I hope this helps.</p><blockquote class="pullquote"><p>🎁 You can find the above code in a recipe at <a href="https://glebbahmutov.com/cypress-examples">glebbahmutov.com&#x2F;cypress-examples</a>.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Many people complain that the Cypress &lt;a href=&quot;https://on.cypress.io/then&quot;&gt;cy.then&lt;/a&gt; command is confusing. It looks like a Promise, yet
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Incremental Blog Scraping</title>
    <link href="https://glebbahmutov.com/blog/incremental-post-scraping/"/>
    <id>https://glebbahmutov.com/blog/incremental-post-scraping/</id>
    <published>2022-02-18T05:00:00.000Z</published>
    <updated>2022-02-18T14:39:42.756Z</updated>
    
    <content type="html"><![CDATA[<p>In the previous blog post <a href="/blog/scrape-static-site-with-algolia/" title="Scrape Static Site with Algolia">Scrape Static Site with Algolia</a> I have shown how to scrape a static site to make it instantly searchable. After each deploy, you run the scraper which replaces the entire Algolia index with new content. That might work for smaller sites, but quickly runs into Algolia usage limits as the site scales up. I have an Algolia index for all my <a href="../tags/cypress/">Cypress blog posts</a> and scraping all blog posts again and again generated way too many record operations, hitting the 10k limit on my free Algolia plan.</p><p>The worst thing was - when I publish a new Cypress blog post, the rest of the posts stay unchanged, so all that scraping is replacing the search records with identical records. We need to devise a way to only scrape the new and the changed blog posts. This is what I call &quot;incremental&quot; scraping.</p><h2><span id="text-records">Text records</span></h2><p>Another problem one can run into is the number of records created by blog post. At first, I used a CSS selector that returns all paragraphs, list items, and even the code comments to create individual Algolia records</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.article .article-inner .article-entry p,</span><br><span class="line">.article .article-inner .article-entry li,</span><br><span class="line">.article .article-inner .article-entry figure.highlight .comment</span><br></pre></td></tr></table></figure><p>For a typical blog post like <a href="/blog/email-cypress-report/" title="Email Cypress Test Report">Email Cypress Test Report</a> the above selector returns 20 text records.</p><p><img src="../images/incremental-scraping/selectors.png" alt="A small blog post might generate more than twenty records"></p><p>In addition, the text records, we scrape the H1, H2, and the blog description, creating hierarchical Algolia records. All this means that a typical post on my blog generates 25 - 80 Algolia records. Multiply by the number of Cypress posts I have written over the years (180+ as of this writing) and each scraping session might use up 9k Algolia operations. For comparison: the free Algolia monthly plan has a limit of 10k operations - and we are hitting it in a single scrape!</p><h2><span id="changing-the-text-records">Changing the text records</span></h2><p>After consulting with the Algolia engineers, I have decided to change how the scraping records are formed. Instead of taking the individual <code>P</code>, <code>LI</code>, and <code>.comment</code> elements, and creating a record for each one, I have decided to combine them all into a single text record. After all - you cannot individually target a <code>P</code> record. My blog post only has anchor links for the header elements, thus all the <code>P</code>, <code>LI</code>, and other elements between them could be a single Algolia text record with the header anchor.</p><p><img src="../images/incremental-scraping/merge.png" alt="Our goal is to have a single text record between the headers"></p><p>Unfortunately, the default <a href="https://docsearch.algolia.com/docs/legacy/run-your-own/">Algolia scraper code</a> does not allow merging the text records into one large record before uploading. Thus I needed to implement something myself. Luckily, Cypress can load the page and process it in every possible way. Time to write our own scraper.</p><h2><span id="scraper-inside-cypress">Scraper inside Cypress</span></h2><blockquote class="pullquote"><p>🎁 You can find my source code used to incrementally scrape the blog posts in the repository <a href="https://github.com/bahmutov/scrape-blog-post-page">bahmutov&#x2F;scrape-blog-post-page</a>.</p></blockquote><p>Using the <a href="https://on.cypress.io/get">cy.get</a> command we get the individual records, including the headers. Then we combine them into largr text records, up until we see a header element. Then we start a new text record. This is done by Cypress in <a href="https://github.com/bahmutov/scrape-blog-post-page/blob/main/cypress/integration/utils.js">cypress&#x2F;integration&#x2F;utils.js</a> file</p><figure class="highlight js"><figcaption><span>cypress/integration/utils.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">hasAnchor</span>(<span class="params">$el</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> $anchor = $el.<span class="title function_">find</span>(<span class="string">&#x27;[id]&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> $anchor.<span class="property">length</span> &gt; <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getAnchor</span>(<span class="params">$el</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> $anchor = $el.<span class="title function_">find</span>(<span class="string">&#x27;[id]&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> $anchor.<span class="title function_">attr</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// now process all article elements, grouping them by the anchor</span></span><br><span class="line"><span class="keyword">return</span> cy</span><br><span class="line">  .<span class="title function_">get</span>(</span><br><span class="line">    <span class="string">`</span></span><br><span class="line"><span class="string">      header.article-header h2,</span></span><br><span class="line"><span class="string">      article .article-inner h2,</span></span><br><span class="line"><span class="string">      .article .article-inner .article-entry p,</span></span><br><span class="line"><span class="string">      .article .article-inner .article-entry figure.highlight .comment</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">each</span>(<span class="function">(<span class="params">$snippet</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">hasAnchor</span>($snippet)) &#123;</span><br><span class="line">      <span class="keyword">const</span> anchor = <span class="title function_">getAnchor</span>($snippet)</span><br><span class="line">      currentRecord = &#123;</span><br><span class="line">        anchor,</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">      records.<span class="title function_">push</span>(currentRecord)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      currentRecord.<span class="property">text</span> += <span class="string">&#x27;\n&#x27;</span> + $snippet.<span class="title function_">text</span>().<span class="title function_">replace</span>(<span class="regexp">/\s+/g</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Whenever we see a header element with an anchor, we start a new text record. All the individual <code>P</code> and <code>.comment</code> records after that are appended as text, forming one large chunk of text (the code later checks the total text record size, Algolia recommends the records to be below 10k or 100k bytes). Thus instead of 20 individual text records, the &quot;Email Cypress Test Report&quot; blog post will have just 3 text records plus a few header records.</p><p><img src="../images/incremental-scraping/record.png" alt="Typical text record after scraping"></p><p>A typical Algolia record has one or several paragraphs of text, an anchor, and the full URL that uses the anchor to immediately direct the user to the right place. Here is the user searching using a part of the text above. You can try searching yourself by going to <a href="https://cypress.tips/search">cypress.tips&#x2F;search</a></p><p><img src="../images/incremental-scraping/the-search.png" alt="The search widget finds the scraped text"></p><p>When the user clicks on the search result, they are directed to the section&#39;s URL.</p><p><img src="../images/incremental-scraping/the-result.png" alt="The click on the search result takes you to the section"></p><p>I use Cypress to scrape, even if something like <a href="https://cheerio.js.org/">cheerio.js</a> is faster. I can see and debug the scraper much better by using the Cypress GUI. I can see each found DOM element (including using at the DevTools Elements panel), step through the code, save the intermediate records - all to understand what the scraping algorithm is doing. If I wanted, I could then transfer the scraper logic into a Node script using <code>cheerio.js</code>. But as you will see in the next section, there is no need to optimize the speed of the scraper at the expense of the debugging experience - because we will scrape very few posts at a time.</p><p><img src="../images/incremental-scraping/cy-scrape.png" alt="Observing the records being merged in Cypress browser"></p><p>The merged text and header records are then uploading to Algolia using the code inside the Cypress <a href="https://github.com/bahmutov/scrape-blog-post-page/blob/main/cypress/plugins/index.js">plugins file</a>.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> algoliasearch = <span class="built_in">require</span>(<span class="string">&#x27;algoliasearch&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">on</span>(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// upload scraped records to Algolia</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">uploadRecords</span>(<span class="params">&#123; records, slug &#125;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; <span class="variable constant_">APPLICATION_ID</span>, <span class="variable constant_">ADMIN_API_KEY</span>, <span class="variable constant_">INDEX_NAME</span> &#125; = process.<span class="property">env</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable constant_">APPLICATION_ID</span> || !<span class="variable constant_">ADMIN_API_KEY</span> || !<span class="variable constant_">INDEX_NAME</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Algolia app/key not set&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">          <span class="string">&#x27;Skipping uploading %d records for slug %s&#x27;</span>,</span><br><span class="line">          records.<span class="property">length</span>,</span><br><span class="line">          slug,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> client = <span class="title function_">algoliasearch</span>(<span class="variable constant_">APPLICATION_ID</span>, <span class="variable constant_">ADMIN_API_KEY</span>)</span><br><span class="line">      <span class="keyword">const</span> index = client.<span class="title function_">initIndex</span>(<span class="variable constant_">INDEX_NAME</span>)</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;%s: removing existing records for %s&#x27;</span>, <span class="variable constant_">INDEX_NAME</span>, slug)</span><br><span class="line">      <span class="keyword">await</span> index.<span class="title function_">deleteBy</span>(&#123;</span><br><span class="line">        <span class="attr">filters</span>: slug,</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;%s: adding %d records&#x27;</span>, <span class="variable constant_">INDEX_NAME</span>, records.<span class="property">length</span>)</span><br><span class="line">      <span class="comment">// each record should have a unique id set</span></span><br><span class="line">      <span class="keyword">await</span> index.<span class="title function_">saveObjects</span>(records, &#123;</span><br><span class="line">        <span class="attr">autoGenerateObjectIDIfNotExist</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// cy.task must return something</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note that if a blog post has been edited, we need to remove any existing records, which I do by using the post slug</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// take the last part of the url which is the post name</span></span><br><span class="line"><span class="keyword">const</span> slug = _.<span class="title function_">last</span>(_.<span class="title function_">filter</span>(_.<span class="title function_">split</span>(baseUrl, <span class="string">&#x27;/&#x27;</span>), <span class="title class_">Boolean</span>)</span><br></pre></td></tr></table></figure><p>Now we just need to make sure we only scrape the changed and the new blog posts.</p><h2><span id="incremental-scraping">Incremental scraping</span></h2><p>On my Hexo blog every published blog post has its &quot;lastmod&quot; date, which you can find in the <a href="https://glebbahmutov.com/blog/sitemap.xml">sitemap.xml</a></p><p><img src="../images/incremental-scraping/sitemap.png" alt="Blog post URLs and last modified dates"></p><p>We can get the list of Cypress blog posts from the <a href="https://glebbahmutov.com/blog/tags/cypress/">&#x2F;tags&#x2F;cypress&#x2F;</a> page.</p><p><img src="../images/incremental-scraping/tag.png" alt="A page with all Cypress blog posts"></p><p><strong>Tip:</strong> if you use the pagination in Hexo blog, then the &quot;tag&quot; page only shows the first N blog posts for a tag. I have removed this limit by cloning the pagination plugin which you can find at <a href="https://github.com/bahmutov/hexo-generator-gleb">bahmutov&#x2F;hexo-generator-gleb</a>.</p><p>Getting the list of URLs from the tag page is simple to do using <code>cheerio.js</code> in <a href="https://github.com/bahmutov/scrape-blog-post-page/blob/main/get-post-urls.js">get-post-urls.js</a></p><figure class="highlight js"><figcaption><span>get-post-urls.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="variable constant_">URL</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getBlogPostUrls</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> tagPageUrl = <span class="string">&#x27;https://glebbahmutov.com/blog/tags/cypress/&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">got</span>(tagPageUrl)</span><br><span class="line">  <span class="keyword">const</span> $ = cheerio.<span class="title function_">load</span>(res.<span class="property">body</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// find all tags pointing at the blog posts</span></span><br><span class="line">  <span class="comment">// and put the full URL in the array</span></span><br><span class="line">  <span class="keyword">const</span> links = []</span><br><span class="line">  $(<span class="string">&#x27;a.archive-article-title&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params">k, el</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> relativeUrl = $(el).<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> fullUrl = <span class="keyword">new</span> <span class="title function_">URL</span>(relativeUrl, tagPageUrl)</span><br><span class="line">    links.<span class="title function_">push</span>(fullUrl.<span class="property">href</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;found %d links&#x27;</span>, links.<span class="property">length</span>)</span><br><span class="line">  <span class="keyword">return</span> links</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Any time we want to get the list of blog posts to scrape, we can get the sitemap, parse it into URLs and the last modified dates. At the same time we get the Cypress post URLs and intersect the two lists.</p><figure class="highlight js"><figcaption><span>get-modified-post-urls.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; getBlogPostUrls &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./get-post-urls&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; getSiteMap &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./get-sitemap&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">getSiteMap</span>(), <span class="title function_">getBlogPostUrls</span>()]).<span class="title function_">then</span>(<span class="function">(<span class="params">[modified, posts]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> cypressPostsWithModified = &#123;&#125;</span><br><span class="line">  posts.<span class="title function_">forEach</span>(<span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!modified[url]) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;missing modified date for %s&#x27;</span>, url)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cypressPostsWithModified[url] = modified[url]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> filename = <span class="string">&#x27;blog-post-urls.json&#x27;</span></span><br><span class="line">  fs.<span class="title function_">writeFileSync</span>(</span><br><span class="line">    filename,</span><br><span class="line">    <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(cypressPostsWithModified, <span class="literal">null</span>, <span class="number">2</span>) + <span class="string">&#x27;\n&#x27;</span>,</span><br><span class="line">  )</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">    <span class="string">&#x27;saved %d links to %s&#x27;</span>,</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(cypressPostsWithModified).<span class="property">length</span>,</span><br><span class="line">    filename,</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I like saving the intermediate results as JSON files, because that allows me to inspect the data, and continue from a known state. Now we need to decide for each URL if it needs scraping. At first, I tried to use Algolia to tell me the scraped timestamps, but later decided to simplify the logic and just have a database of records and the scrape timestamps. I have created <a href="https://github.com/bahmutov/was-it-scraped">was-it-scraped</a> NPM module to abstract saving which records were scraped already. Under the hood it uses an external Supabase database, but you could use a local JSON file as well. Now we can write a script to filter all the found Cypress blog posts and only leave the ones that need scraping:</p><figure class="highlight js"><figcaption><span>filter-scraped-posts.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">// an object with [url] =&gt; [modified]</span></span><br><span class="line"><span class="comment">// with modified string in the format &quot;YYYY-MM-DD&quot;</span></span><br><span class="line"><span class="keyword">const</span> allPosts = <span class="built_in">require</span>(<span class="string">&#x27;./blog-post-urls.json&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  <span class="string">&#x27;checking %d posts if they are scraped&#x27;</span>,</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(allPosts).<span class="property">length</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; wasScrapedAfter &#125; = <span class="built_in">require</span>(<span class="string">&#x27;was-it-scraped&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">checkScrapeStatus</span>(<span class="params">urlsModified</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> urls = <span class="title class_">Object</span>.<span class="title function_">keys</span>(urlsModified)</span><br><span class="line">  <span class="keyword">const</span> results = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> url <span class="keyword">of</span> urls) &#123;</span><br><span class="line">    <span class="keyword">const</span> modified = <span class="keyword">new</span> <span class="title class_">Date</span>(urlsModified[url])</span><br><span class="line">    <span class="keyword">const</span> scraped = <span class="keyword">await</span> <span class="title function_">wasScrapedAfter</span>(url, modified)</span><br><span class="line">    <span class="keyword">if</span> (!scraped) &#123;</span><br><span class="line">      results.<span class="title function_">push</span>(url)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">checkScrapeStatus</span>(allPosts).<span class="title function_">then</span>(<span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> filename = <span class="string">&#x27;need-scraping.json&#x27;</span></span><br><span class="line">  fs.<span class="title function_">writeFileSync</span>(filename, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(list, <span class="literal">null</span>, <span class="number">2</span>) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;saved %d links to be scraped into %s&#x27;</span>, list.<span class="property">length</span>, filename)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>A typical run quickly goes through the hundreds of URLs to only find the new and the modified blog posts.</p><p><img src="../images/incremental-scraping/filter.png" alt="Filtering all URLs by the last scraped vs modified dates"></p><p>In the above run, only a single blog post URL will require scraping.</p><p><img src="../images/incremental-scraping/cat.png" alt="The saved JSON file lists a single blog post URL that needs scraping"></p><p>The last Node script goes through the list of URLs to scrape and fires up Cypress via its <a href="https://on.cypress.io/module-api">NPM module API</a>. After scraping it marks the last scraped timestamp in the database for those blog posts using the <code>was-it-scraped</code> module and its <code>markScraped</code> function.</p><figure class="highlight js"><figcaption><span>scrape-filtered-posts.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; markScraped &#125; = <span class="built_in">require</span>(<span class="string">&#x27;was-it-scraped&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cypress = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> urlsToScrape = <span class="built_in">require</span>(<span class="string">&#x27;./need-scraping.json&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;to scrape %d posts&#x27;</span>, urlsToScrape.<span class="property">length</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">scrapeOnePost</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> outputFolder = <span class="string">&#x27;scraped&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> slug = url.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">filter</span>(<span class="title class_">Boolean</span>).<span class="title function_">pop</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;scraping url %s, slug %s&#x27;</span>, url, slug)</span><br><span class="line">  <span class="keyword">const</span> outputRecordsFilename = path.<span class="title function_">join</span>(</span><br><span class="line">    outputFolder,</span><br><span class="line">    <span class="string">`<span class="subst">$&#123;slug&#125;</span>-algolia-objects.json`</span>,</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> cypress.<span class="title function_">run</span>(&#123;</span><br><span class="line">    <span class="attr">config</span>: &#123;</span><br><span class="line">      <span class="attr">baseUrl</span>: url,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">env</span>: &#123;</span><br><span class="line">      slug,</span><br><span class="line">      outputRecordsFilename,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">spec</span>: <span class="string">&#x27;cypress/integration/spec2.js&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> records = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(fs.<span class="title function_">readFileSync</span>(outputRecordsFilename))</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">uploadRecordsToAlgolia</span>(records, slug)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">markScraped</span>(url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">scrapeUrls</span>(<span class="params">urls</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> url <span class="keyword">of</span> urls) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">scrapeOnePost</span>(url)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">scrapeUrls</span>(urlsToScrape)</span><br></pre></td></tr></table></figure><h2><span id="continuous-incremental-scraping">Continuous incremental scraping</span></h2><p>We can do the scraping locally, but a more consistent way is to let the CI run the scraper every night. I am using GitHub actions to call the above scripts, see the code in the <a href="https://github.com/bahmutov/scrape-blog-post-page/blob/main/.github/workflows/scrape.yml">.github&#x2F;workflows&#x2F;scrape.yml</a> file.</p><figure class="highlight yml"><figcaption><span>.github/workflows/scrape.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Scrape</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="comment"># scrape any new blog posts every night</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;0 1 * * *&#x27;</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">scrape:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Install NPM dependencies, cache them correctly</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span> <span class="string">📦</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">runTests:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">modified</span> <span class="string">posts</span> <span class="string">📰</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">node</span> <span class="string">./get-modified-post-urls</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Filter</span> <span class="string">scraped</span> <span class="string">posts</span> <span class="string">📤</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">node</span> <span class="string">./filter-scraped-posts</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">SUPABASE_URL:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SUPABASE_URL</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">SUPABASE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SUPABASE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Show</span> <span class="string">list</span> <span class="string">of</span> <span class="string">posts</span> <span class="string">to</span> <span class="string">scrape</span> <span class="string">🖨</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">cat</span> <span class="string">need-scraping.json</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Scrape</span> <span class="string">the</span> <span class="string">changed</span> <span class="string">posts</span> <span class="string">🚀</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">node</span> <span class="string">./scrape-filtered-posts</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="comment"># for updating the scraped timestamps</span></span><br><span class="line">          <span class="attr">SUPABASE_URL:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SUPABASE_URL</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">SUPABASE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SUPABASE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># for updating the Algolia index</span></span><br><span class="line">          <span class="attr">APPLICATION_ID:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.APPLICATION_ID</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">INDEX_NAME:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.INDEX_NAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ADMIN_API_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ADMIN_API_KEY</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>The above workflow is fast. For example, a recent run with one blog post to scrape took 35 seconds.</p><p><img src="../images/incremental-scraping/run.png" alt="Running the scrape workflow on GitHub Actions"></p><p>When scraping the blog post, Cypress outputs the main messages about the scraping progress.</p><p><img src="../images/incremental-scraping/scrape.png" alt="Scraping the blog post and uploading the records to Algolia"></p><p>Even this blog post will be scraped automatically, as it tagged &quot;cypress&quot; too. And here it is - scraped by the CI 🎉</p><p><img src="../images/incremental-scraping/scrape-itself.png" alt="This blog has been scraped"></p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/scrape-static-site-with-algolia/" title="Scrape Static Site with Algolia">Scrape Static Site with Algolia</a> is a good introduction to scraping</li><li><a href="/blog/scrape-slides/" title="Scrape Slides">Scrape Slides</a> how similarly to this approach I scrape my [slides.com/bahmutov](https://slides.com/bahmutov) presentations</li><li>I scrape my YouTube <a href="https://www.youtube.com/playlist?list=PLP9o9QNnQuAYYRpJzDNWpeuOVTwxmIxcI">Cypress Tips &amp; Tricks playlist</a> using the code in <a href="https://github.com/bahmutov/scrape-youtube-videos">bahmutov&#x2F;scrape-youtube-videos</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the previous blog post &lt;a href=&quot;/blog/scrape-static-site-with-algolia/&quot; title=&quot;Scrape Static Site with Algolia&quot;&gt;Scrape Static Site wit
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
      <category term="algolia" scheme="https://glebbahmutov.com/blog/tags/algolia/"/>
    
  </entry>
  
  <entry>
    <title>Email Cypress Test Report</title>
    <link href="https://glebbahmutov.com/blog/email-cypress-report/"/>
    <id>https://glebbahmutov.com/blog/email-cypress-report/</id>
    <published>2022-02-16T05:00:00.000Z</published>
    <updated>2022-02-16T14:44:43.737Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes you run the Cypress end-to-end tests on CI and want to be notified quickly if something has failed. Most CIs can be configured to send you an email on test job failure, but they do not send detailed information about <em>what</em> has failed. In this blog post, I will show my simple <a href="https://github.com/bahmutov/cypress-email-results">cypress-email-results</a> plugin that can send an email after each Cypress run.</p><p><strong>Important:</strong> this plugin only sends the test results from the current Cypress instance. If you are using <a href="https://on.cypress.io/parallelization">Cypress parallelization</a> then each test runner will send its portion of the results.</p><h2><span id="install-and-use">Install and use</span></h2><p>I will install the plugin in the <a href="https://github.com/bahmutov/chat.io">bahmutov&#x2F;chat.io</a> repo where I am testing a Chat application. The plugin is an NPM module that I install as a dev dependency.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress-email-results</span><br><span class="line">+ cypress-email-results@1.8.0</span><br></pre></td></tr></table></figure><p>In the Cypress plugins file, let&#39;s send an email after a failed test run (by default, the plugin sends an email after each run)</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://github.com/bahmutov/cypress-email-results</span></span><br><span class="line">  <span class="comment">// only configure the email plugin if the environment variable is set</span></span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">EMAIL_TO</span>) &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;cypress-email-results&#x27;</span>)(on, config, &#123;</span><br><span class="line">      <span class="attr">email</span>: process.<span class="property">env</span>.<span class="property">EMAIL_TO</span>,</span><br><span class="line">      <span class="attr">emailOnSuccess</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="ci-configuration">CI configuration</span></h2><p>For my needs I have configured a SendGrid account, but you can pass any email transport module as an option</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;cypress-email-results&#x27;</span>)(on, config, &#123;</span><br><span class="line">  <span class="attr">email</span>: process.<span class="property">env</span>.<span class="property">EMAIL_TO</span>,</span><br><span class="line">  <span class="comment">// use your own email sender</span></span><br><span class="line">  <span class="attr">transport</span>: &#123; sendEmail ... &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Because I am using SendGrid, on GitHub Actions I set config values as secrets</p><p><img src="../images/email-results/ci-secrets.png" alt="Setting CI secrets"></p><p>On GitHub Actions I need to explicitly pass the secrets as environment variables when running the <a href="https://github.com/cypress-io/github-action">Cypress GitHub Action</a></p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="comment"># email test results after the tests are finished</span></span><br><span class="line">    <span class="attr">EMAIL_TO:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.EMAIL_TO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="comment"># pass SendGrid settings to the plugin via environment variables</span></span><br><span class="line">    <span class="attr">SENDGRID_HOST:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SENDGRID_HOST</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">SENDGRID_PORT:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SENDGRID_PORT</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">SENDGRID_USER:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SENDGRID_USER</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">SENDGRID_PASSWORD:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SENDGRID_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">SENDGRID_FROM:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SENDGRID_FROM</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>Let&#39;s push the code and let the CI run. We see the &quot;results emailed&quot; message at the end of the run.</p><p><img src="../images/email-results/emailed.png" alt="Cypress has emailed its test results"></p><p>The received email has all the information, including the Cypress Dashboard URL (via SendGrid redirect)</p><p><img src="../images/email-results/my-email.png" alt="Cypress test run results email"></p><p>Nice.</p><p><strong>Tip:</strong> to learn about Cypress test statuses like &quot;pending&quot; and &quot;skipped&quot;, read the blog post <a href="/blog/cypress-test-statuses/" title="Cypress Test Statuses">Cypress Test Statuses</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sometimes you run the Cypress end-to-end tests on CI and want to be notified quickly if something has failed. Most CIs can be configured 
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Re-run The Tests By Clicking A Checkbox</title>
    <link href="https://glebbahmutov.com/blog/re-run-the-tests-with-checkbox/"/>
    <id>https://glebbahmutov.com/blog/re-run-the-tests-with-checkbox/</id>
    <published>2022-02-09T05:00:00.000Z</published>
    <updated>2022-02-08T16:22:09.684Z</updated>
    
    <content type="html"><![CDATA[<p>I am heavy user of <a href="/blog/renovate-app/" title="Renovate App">Renovate App</a> that keeps <a href="/blog/keep-examples-up-to-date/" title="all my repos up-to-date">all my repos up-to-date</a>. One thing that is really nice and useful is a checkbox in the Renovate master GitHub issue that I can click to re-run the dependency check.</p><p><img src="../images/re-run/renovate.png" alt="A checkbox click in the GitHub issue triggers Renovate run"></p><p>If I click on that checkbox, the Renovate app runs and checks the dependencies. How does it do it? Can I use the same approach to re-run the tests when changing the <a href="/blog/pick-tests-using-pull-request/" title="tests I want to run via Pull Request">tests I want to run via Pull Request</a>? Turns out, it is pretty simple to set up using GitHub Actions.</p><blockquote class="pullquote"><p>🎁 You can find the example project in the repo <a href="https://github.com/bahmutov/todomvc-tests-circleci">bahmutov&#x2F;todomvc-tests-circleci</a>. Specifically, see the GitHub Workflow file <a href="https://github.com/bahmutov/todomvc-tests-circleci/blob/main/.github/workflows/pr.yml">.github&#x2F;workflows&#x2F;pr.yml</a> and the file <a href="https://github.com/bahmutov/todomvc-tests-circleci/blob/main/.github/PULL_REQUEST_TEMPLATE.md">.github&#x2F;PULL_REQUEST_TEMPLATE.md</a>.</p></blockquote><h2><span id="the-pull-request-template">The pull request template</span></h2><p>We can add a checkbox to the pull request file like this</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">To re-run the tests, pick the tags above then click the checkbox below</span><br><span class="line"></span><br><span class="line">- [ ] re-run the tests</span><br></pre></td></tr></table></figure><p>By default the checkbox is unfilled. The user can fill it by editing the pull request text or by clicking on the checkbox in the GitHub UI (assuming the user has the edit permission). Let&#39;s open a pull request and click on the checkbox.</p><p><img src="../images/re-run/check.gif" alt="Clicking on the checkbox"></p><p>We need to detect the click and run the tests.</p><h2><span id="github-actions">GitHub Actions</span></h2><p>The easiest way to detect the change in the checkbox is to run a GitHub workflow on pull request edit. You can run a workflow on different pull request events: opened, synchronized, closed, edited. We only are interested in the &quot;edited&quot; events.</p><figure class="highlight yml"><figcaption><span>.github/workflows/pr.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">pr</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">edited</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">trigger-tests:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># inspect the event, see if the user</span></span><br><span class="line">  <span class="comment"># has filled the checkbox &quot;re-run the tests&quot;</span></span><br></pre></td></tr></table></figure><p>To detect if the user clicked the previously empty checkbox, we need to inspect the <code>github.event</code> object provided to the GitHub action.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Dump</span> <span class="string">GitHub</span> <span class="string">event</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">GITHUB_CONTEXT:</span> <span class="string">$&#123;&#123;</span> <span class="string">toJson(github.event)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;$GITHUB_CONTEXT&quot;</span></span><br></pre></td></tr></table></figure><p>The dumped JSON object shows the change and the current body text of the pull request.</p><p><img src="../images/re-run/pr1.png" alt="The body of the pull request before the edit"></p><p><img src="../images/re-run/pr2.png" alt="The current body of the pull request"></p><p>Thus we can compare the <code>event.changes.body.from</code> and the <code>event.pull_request.body</code> text to see if the checkbox flipped from empty to filled. I have written this check in the <a href="https://github.com/bahmutov/should-run-github-action">bahmutov&#x2F;should-run-github-action</a> and created a reusable GitHub action everyone can use to determine if the user has filled the checkbox. In our project we use by providing an <code>id</code> and passing the GH event as an environment variable <code>GITHUB_EVENT</code>.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">the</span> <span class="string">PR</span></span><br><span class="line">  <span class="comment"># https://github.com/bahmutov/should-run-github-action</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">bahmutov/should-run-github-action@v1</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">check-pr</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">GITHUB_EVENT:</span> <span class="string">$&#123;&#123;</span> <span class="string">toJson(github.event)</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>After that we can look at the <code>check-pr</code> step and the output variable it sets called <code>shouldRun</code> to decide if we need to run the tests.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">the</span> <span class="string">PR</span></span><br><span class="line">  <span class="comment"># https://github.com/bahmutov/should-run-github-action</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">bahmutov/should-run-github-action@v1</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">check-pr</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">GITHUB_EVENT:</span> <span class="string">$&#123;&#123;</span> <span class="string">toJson(github.event)</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># we could trigger the tests to run on CircleCI</span></span><br><span class="line"><span class="comment"># or we can just run them here using the action</span></span><br><span class="line"><span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">if</span> <span class="string">the</span> <span class="string">user</span> <span class="string">filled</span> <span class="string">the</span> <span class="string">checkbox</span></span><br><span class="line">  <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.check-pr.outputs.shouldRun</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>This is how we can run the tests only when the user filled the checkbox. Of course, if the box is filled already and we click it the first time, it is emptied. The workflow runs, but immediately skips the test step. Then we click the checkbox and the tests run.</p><p><img src="../images/re-run/workflows.png" alt="All edits trigger the workflow, but it quickly finishes"></p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/pick-tests-using-pull-request/" title="Pick Tests To Run Using The Pull Request Text">Pick Tests To Run Using The Pull Request Text</a></li><li><a href="/blog/how-to-keep-cypress-tests-in-another-repo/" title="How to Keep Cypress Tests in Another Repo While Using GitHub Actions">How to Keep Cypress Tests in Another Repo While Using GitHub Actions</a></li><li><a href="/blog/how-to-keep-cypress-tests-in-another-repo-with-circleci/" title="How to Keep Cypress Tests in Another Repo While Using CircleCI">How to Keep Cypress Tests in Another Repo While Using CircleCI</a></li><li><a href="/blog/tag-tests/" title="How To Tag And Run End-to-End Tests">How To Tag And Run End-to-End Tests</a></li><li><a href="/blog/trying-github-actions/" title="Trying GitHub Actions">Trying GitHub Actions</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I am heavy user of &lt;a href=&quot;/blog/renovate-app/&quot; title=&quot;Renovate App&quot;&gt;Renovate App&lt;/a&gt; that keeps &lt;a href=&quot;/blog/keep-examples-up-to-date
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="advice" scheme="https://glebbahmutov.com/blog/tags/advice/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>Control React Applications From Cypress Tests</title>
    <link href="https://glebbahmutov.com/blog/react-app-actions/"/>
    <id>https://glebbahmutov.com/blog/react-app-actions/</id>
    <published>2022-02-05T05:00:00.000Z</published>
    <updated>2022-02-07T13:39:11.108Z</updated>
    
    <content type="html"><![CDATA[<p>In the previous blog post <a href="/blog/react-state-from-e2e-tests/" title="Access React Components From Cypress E2E Tests">Access React Components From Cypress E2E Tests</a> I have shown how the test code could get to the React component&#39;s internals, similar to what the React DevTools browser extension does. In this blog post, I will show how to use this approach to drastically speed up end-to-end tests. The idea is to control the application by setting its internal state rather than using the page UI in every test. We will split a single long test into individual tests, each starting the app where it needs it to be in an instant, rather than going through already tested UI commands. It is similar to what I have shown a long time ago in the blog post <a href="https://www.cypress.io/blog/2019/10/29/split-a-very-long-cypress-test-into-shorter-ones-using-app-actions/">Split a very long Cypress test into shorter ones using App Actions</a>. But the approach described in this blog post <em>does not need any modifications to the application code</em>, which is a big deal.</p><h2><span id="a-single-long-test">A single long test</span></h2><p>Imagine our application contains several forms to fill. The test has to fill the first page before the second page appears. Once the second page is filled, the third page is shown. After filling the third page, the form is submitted and the test is done.</p><figure class="highlight js"><figcaption><span>cypress/integration/single-test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="keyword">const</span> typeOptions = &#123; <span class="attr">delay</span>: <span class="number">35</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;books hotel (all pages)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;**First page**&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Book Hotel 1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#first&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Joe&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#last&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Smith&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#email&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;my-email@foo.bar&#x27;</span>, typeOptions)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field1a&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 1a text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field1b&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 1b text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field1c&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 1c text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field1d&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 1d text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field1e&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 1e text value&#x27;</span>, typeOptions)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Next&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;**Second page**&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Book Hotel 2&#x27;</span>)</span><br><span class="line">  <span class="comment">// we are on the second page</span></span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#username&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;JoeSmith&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field2a&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 2a text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field2b&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 2b text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field2c&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 2c text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field2d&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 2d text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field2e&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 2e text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field2f&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 2f text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field2g&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 2g text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Next&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;**Third page**&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Book Hotel 3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field3a&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 3a text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field3b&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 3b text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field3c&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 3c text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field3d&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 3d text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field3e&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 3e text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field3f&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 3f text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field3g&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 3g text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sign up&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Thank you&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test takes almost 19 seconds to finish. Of course, it is the slowest end-to-end test in the world, but you have to sit and wait for it, even if you are only interested in changing how it tests the form submission for example.</p><p><img src="../images/react-app-actions/single.png" alt="A single test going through all the page steps"></p><h2><span id="the-app-state-after-the-first-page">The app state after the first page</span></h2><p>All the fields we fill on the first page go into the internal state of the application. The application creates a form for each page and passes the change handler function as a prop.</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Step1</span> <span class="keyword">from</span> <span class="string">&#x27;./Step1.jsx&#x27;</span></span><br><span class="line"></span><br><span class="line">handleChange = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, value &#125; = event.<span class="property">target</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">    [name]: value,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handleSubmit = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  event.<span class="title function_">preventDefault</span>()</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;submitting state&#x27;</span>, <span class="variable language_">this</span>.<span class="property">state</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; email, username &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">    <span class="attr">submitted</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">`Your registration detail: \n</span></span><br><span class="line"><span class="string">          Email: <span class="subst">$&#123;email&#125;</span> \n</span></span><br><span class="line"><span class="string">          Username: <span class="subst">$&#123;username&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="title class_">Step1</span></span><br><span class="line">  currentStep=&#123;<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">currentStep</span>&#125;</span><br><span class="line">  handleChange=&#123;<span class="variable language_">this</span>.<span class="property">handleChange</span>&#125;</span><br><span class="line">  email=&#123;<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">email</span>&#125;</span><br><span class="line">/&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Step2</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">currentStep</span>=<span class="string">&#123;this.state.currentStep&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">handleChange</span>=<span class="string">&#123;this.handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">username</span>=<span class="string">&#123;this.state.username&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Step3</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">currentStep</span>=<span class="string">&#123;this.state.currentStep&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">handleChange</span>=<span class="string">&#123;this.handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">password</span>=<span class="string">&#123;this.state.password&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">submitted</span>=<span class="string">&#123;this.state.submitted&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br></pre></td></tr></table></figure><p>Thus we can validate that the <code>Step1</code> component is working correctly by checking the state after we fill the form through the page.</p><figure class="highlight js"><figcaption><span>cypress/integration/actions.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;first page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;**First page**&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Book Hotel 1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#first&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Joe&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#last&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Smith&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#email&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;my-email@foo.bar&#x27;</span>, typeOptions)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field1a&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 1a text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field1b&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 1b text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field1c&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 1c text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field1d&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 1d text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field1e&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 1e text value&#x27;</span>, typeOptions)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Next&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;Second page&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Book Hotel 2&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/react-app-actions/step1.gif" alt="The first page filled by the test"></p><p>We are testing the page just like a human user would - by going to each input field and typing text. Once the fields are filled, we click the button &quot;Next&quot; and check if we end up on the second page. But how do we check if the values we typed really were stored correctly by the application?</p><p>By getting access to the application state through React internals. I wrote <a href="https://github.com/bahmutov/cypress-react-app-actions">cypress-react-app-actions</a> plugin that gets to the React component from a DOM element, similar to how React DevTools browser extension works.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress-react-app-actions</span><br><span class="line">+ cypress-react-app-actions@1.0.2</span><br></pre></td></tr></table></figure><p>We should import the plugin from our spec or from the support file</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/bahmutov/cypress-react-app-actions</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-react-app-actions&#x27;</span></span><br><span class="line"><span class="comment">// now we can use the child command .getComponent()</span></span><br></pre></td></tr></table></figure><p>Let&#39;s see what fields the component has at the end of the test above.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">log</span>(<span class="string">&#x27;Second page&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Book Hotel 2&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">  .<span class="title function_">getComponent</span>()</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;state&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/react-app-actions/state.png" alt="The application state object after finishing step one"></p><p><strong>Tip:</strong> you can see all component fields and methods by printing it to the console with <code>cy.get(&#39;form&#39;).getComponent().then(console.log)</code> command.</p><p><img src="../images/react-app-actions/component.png" alt="The React component"></p><p>The component&#39;s state should always include the field values we have typed, so let&#39;s verify this. We could use &quot;deep.equal&quot; or &quot;deep.include&quot; assertion, or even <a href="https://github.com/bahmutov/cy-spok">cy-spok</a> here.</p><figure class="highlight js"><figcaption><span>cypress/integration/actions.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> startOfSecondPageState = &#123;</span><br><span class="line">  <span class="attr">currentStep</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&#x27;my-email@foo.bar&#x27;</span>,</span><br><span class="line">  <span class="attr">field1a</span>: <span class="string">&#x27;Field 1a text value&#x27;</span>,</span><br><span class="line">  <span class="attr">field1b</span>: <span class="string">&#x27;Field 1b text value&#x27;</span>,</span><br><span class="line">  <span class="attr">field1c</span>: <span class="string">&#x27;Field 1c text value&#x27;</span>,</span><br><span class="line">  <span class="attr">field1d</span>: <span class="string">&#x27;Field 1d text value&#x27;</span>,</span><br><span class="line">  <span class="attr">field1e</span>: <span class="string">&#x27;Field 1e text value&#x27;</span>,</span><br><span class="line">  <span class="attr">first</span>: <span class="string">&#x27;Joe&#x27;</span>,</span><br><span class="line">  <span class="attr">last</span>: <span class="string">&#x27;Smith&#x27;</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;first page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Next&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;Second page&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Book Hotel 2&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">    .<span class="title function_">getComponent</span>()</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;state&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, startOfSecondPageState)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/react-app-actions/state-check.png" alt="The internal state is always the same after the first page is finished"></p><h2><span id="the-second-page">The second page</span></h2><p>Now let&#39;s verify that we can fill the second page of the form. In order to get to the second page, we need to fill the form on the first page. Hmm, we know it works, so repeating the same page commands does not give us any more confidence in our application. It just slows down the second test. What we can do instead is to set the application to the <em>state</em> after the first page is filled. We know this state - we have verified it at the end of the first test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the end of the first test</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">  .<span class="title function_">getComponent</span>()</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;state&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, startOfSecondPageState)</span><br></pre></td></tr></table></figure><p>Thus we can set the app&#39;s state to the object <code>startOfSecondPageState</code> and the application will behave as if we went through the form, filling it by typing. It is the same application behavior.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;second page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">getComponent</span>().<span class="title function_">invoke</span>(<span class="string">&#x27;setState&#x27;</span>, startOfSecondPageState)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;**Second page**&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Book Hotel 2&#x27;</span>)</span><br><span class="line">  <span class="comment">// start filling input fields on page 2</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#username&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;JoeSmith&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field2a&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 2a text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field2b&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 2b text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field2c&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 2c text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field2d&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 2d text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field2e&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 2e text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field2f&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 2f text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#field2g&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Field 2g text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Next&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;Third page&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Book Hotel 3&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/react-app-actions/second.gif" alt="Testing the second page by starting the application in the known state"></p><p>Beautiful. How does the application finish? Again - it has a certain internal state we can verify.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> startOfThirdPageState = &#123;</span><br><span class="line">  ...startOfSecondPageState,</span><br><span class="line">  <span class="attr">currentStep</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;JoeSmith&#x27;</span>,</span><br><span class="line">  <span class="attr">field2a</span>: <span class="string">&#x27;Field 2a text value&#x27;</span>,</span><br><span class="line">  <span class="attr">field2b</span>: <span class="string">&#x27;Field 2b text value&#x27;</span>,</span><br><span class="line">  <span class="attr">field2c</span>: <span class="string">&#x27;Field 2c text value&#x27;</span>,</span><br><span class="line">  <span class="attr">field2d</span>: <span class="string">&#x27;Field 2d text value&#x27;</span>,</span><br><span class="line">  <span class="attr">field2e</span>: <span class="string">&#x27;Field 2e text value&#x27;</span>,</span><br><span class="line">  <span class="attr">field2f</span>: <span class="string">&#x27;Field 2f text value&#x27;</span>,</span><br><span class="line">  <span class="attr">field2g</span>: <span class="string">&#x27;Field 2g text value&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">cy.<span class="title function_">log</span>(<span class="string">&#x27;Third page&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Book Hotel 3&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">  .<span class="title function_">getComponent</span>()</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;state&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, startOfThirdPageState)</span><br></pre></td></tr></table></figure><h2><span id="the-third-page">The third page</span></h2><p>We similarly start the third test to verify we can fill the form on the third page. We set the state to the same state object the second test has finished with. Even better - we know the user will submit the form, so we can spy on the component&#39;s method <code>handleSubmit</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;third page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">    .<span class="title function_">getComponent</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">comp</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">spy</span>(comp, <span class="string">&#x27;handleSubmit&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;handleSubmit&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">invoke</span>(<span class="string">&#x27;setState&#x27;</span>, startOfThirdPageState)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;**Third page**&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Book Hotel 3&#x27;</span>)</span><br><span class="line">  ...</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sign up&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Thank you&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">parent</span>().<span class="title function_">getComponent</span>().<span class="title function_">its</span>(<span class="string">&#x27;state&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">submitted</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;JoeSmith&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the spy is called once</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@handleSubmit&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.calledOnce&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/react-app-actions/third.png" alt="The third test verifies the form was submitted"></p><p>It is up to the developer to decide which application internal properties to verify.</p><h2><span id="invoking-app-actions">Invoking app actions</span></h2><p>We can verify the internal application state and we can call the component&#39;s methods. For example, we can call the form&#39;s submit method ourselves.</p><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">handleSubmit = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  event.<span class="title function_">preventDefault</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; email, username &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">    <span class="attr">submitted</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">`Your registration detail: \n</span></span><br><span class="line"><span class="string">          Email: <span class="subst">$&#123;email&#125;</span> \n</span></span><br><span class="line"><span class="string">          Username: <span class="subst">$&#123;username&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/integration/actions.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;submits the form&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">getComponent</span>().<span class="title function_">invoke</span>(<span class="string">&#x27;setState&#x27;</span>, beforeSubmitState)</span><br><span class="line">  cy.<span class="title function_">window</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">win</span>) =&gt;</span> cy.<span class="title function_">spy</span>(win, <span class="string">&#x27;alert&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;alert&#x27;</span>))</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">    .<span class="title function_">getComponent</span>()</span><br><span class="line">    .<span class="title function_">invoke</span>(<span class="string">&#x27;handleSubmit&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">preventDefault</span>: cy.<span class="title function_">spy</span>().<span class="title function_">as</span>(<span class="string">&#x27;preventDefault&#x27;</span>),</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// check the UI</span></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Thank you&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  <span class="comment">// check the application&#x27;s behavior</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@preventDefault&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">  <span class="comment">// the alert message includes the username and the email</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@alert&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;firstCall.args.0&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;include&#x27;</span>, beforeSubmitState.<span class="property">email</span>)</span><br><span class="line">    .<span class="title function_">and</span>(<span class="string">&#x27;include&#x27;</span>, beforeSubmitState.<span class="property">username</span>)</span><br><span class="line">  <span class="comment">// verify the form&#x27;s state changes</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">    .<span class="title function_">getComponent</span>()</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;state&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;submitted&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We are verifying the application&#39;s behavior during the submit action.</p><p><img src="../images/react-app-actions/submit.png" alt="Invoking the submit application action and testing the behavior and the state changes"></p><p>Not only the last test is powerful and gives us insight into the application&#39;s behavior - it is also fast. The original single test took 19 seconds to finish filling the form and submitting it. The focused test &quot;submits the form&quot; above finished in 190ms which is 100 times faster.</p><h2><span id="video">Video</span></h2><p>I have recorded a video showing the main points of this blog post. Watch at below.</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/d6zggQySjQM" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the previous blog post &lt;a href=&quot;/blog/react-state-from-e2e-tests/&quot; title=&quot;Access React Components From Cypress E2E Tests&quot;&gt;Access React
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="react" scheme="https://glebbahmutov.com/blog/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Access React Components From Cypress E2E Tests</title>
    <link href="https://glebbahmutov.com/blog/react-state-from-e2e-tests/"/>
    <id>https://glebbahmutov.com/blog/react-state-from-e2e-tests/</id>
    <published>2022-02-01T05:00:00.000Z</published>
    <updated>2022-02-05T17:38:07.192Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s take a look at a simple React component with some internal state. You can find this component in <a href="https://github.com/bahmutov/react-counter/blob/main/src/Example.js">src&#x2F;Example.js</a> file of my repo <a href="https://github.com/bahmutov/react-counter">bahmutov&#x2F;react-counter</a>.</p><figure class="highlight jsx"><figcaption><span>src/Example.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./Example.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Example</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">count</span>: props.<span class="property">initialCount</span> || <span class="number">0</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">double</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;doubling the current value&#x27;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> * <span class="number">2</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Example&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;full&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          You clicked <span class="tag">&lt;<span class="name">span</span> <span class="attr">data-cy</span>=<span class="string">&quot;count&quot;</span>&gt;</span>&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> times</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">className</span>=<span class="string">&quot;full&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">data-cy</span>=<span class="string">&quot;add&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.setState(&#123; count: this.state.count + 1 &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;</span></span><br><span class="line"><span class="language-xml">          Click me</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;full&quot;</span> <span class="attr">data-cy</span>=<span class="string">&quot;double&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.double()&#125;&gt;</span></span><br><span class="line"><span class="language-xml">          Double me</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using end-to-end tests we can verify the code works by observing the DOM elements the component renders on the page.</p><figure class="highlight js"><figcaption><span>cypress/integration/e2e.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;counts&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-cy=add]&#x27;</span>).<span class="title function_">click</span>().<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Double&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test only works with the application through the HTML elements.</p><p><img src="../images/react-counter/double.png" alt="E2E test"></p><h2><span id="access-the-react-component">Access the React component</span></h2><p>Can we find the React <em>component</em> instance? Yes, using the plugin <a href="https://github.com/abhinaba-ghosh/cypress-react-selector#readme">cypress-react-selector</a> we can find the <code>Example</code> component, rather than the DOM elements it renders. That is very convenient for checking the internal state of the component. For example, we could verify that clicking the button &quot;Click me&quot; three times changes the state of the component.</p><figure class="highlight js"><figcaption><span>cypress/integration/three.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-react-selector&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;checks the state&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-cy=add]&#x27;</span>).<span class="title function_">click</span>().<span class="title function_">click</span>().<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// find the React component</span></span><br><span class="line">  cy.<span class="title function_">waitForReact</span>(<span class="number">1000</span>, <span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// three equivalent ways of checking component &quot;Example&quot; with &quot;count: 3&quot; state</span></span><br><span class="line">  cy.<span class="title function_">getReact</span>(<span class="string">&#x27;Example&#x27;</span>).<span class="title function_">getCurrentState</span>().<span class="title function_">should</span>(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;count&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  cy.<span class="title function_">getReact</span>(<span class="string">&#x27;Example&#x27;</span>).<span class="title function_">getCurrentState</span>().<span class="title function_">should</span>(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">3</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">getReact</span>(<span class="string">&#x27;Example&#x27;</span>, &#123; <span class="attr">state</span>: &#123; <span class="attr">count</span>: <span class="number">3</span> &#125; &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The tests find the component named <code>Example</code> and confirm its internal state.</p><p><img src="../images/react-counter/three.png" alt="E2E test that checks the React component state"></p><p><strong>Tip:</strong> for checking a complex object, <a href="https://github.com/bahmutov/cy-spok">cy-spok</a> is the best.</p><p>When the application creates the <code>Example</code> component, it sets its prop <code>initialCount</code>, which we can use with <code>cy.getReact(&#39;Example&#39;)</code> to find the right component.</p><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Example</span> initialCount=&#123;<span class="number">0</span>&#125; /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/integration/prop.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-react-selector&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;uses prop to find the component&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// find the React component</span></span><br><span class="line">  cy.<span class="title function_">waitForReact</span>(<span class="number">1000</span>, <span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">react</span>(<span class="string">&#x27;Example&#x27;</span>, &#123; <span class="attr">props</span>: &#123; <span class="attr">initialCount</span>: <span class="number">0</span> &#125; &#125;)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    .<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Click me&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>()</span><br><span class="line">    .<span class="title function_">click</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/react-counter/prop.png" alt="Finding a component by its prop"></p><blockquote class="pullquote"><p>🎓 The plugin <code>cypress-react-selector</code> provides two high-level commands for finding components. If you need to find the DOM element by React component prop or state, use the <code>cy.react</code> command. If you want to find and access the React component instance, use the <code>cy.getReact</code> command.</p></blockquote><p>In a sense, what we are able to do is what the React DevTools browser extension shows for the component.</p><p><img src="../images/react-counter/dev.png" alt="The Example component in the React DevTools"></p><h2><span id="trigger-component-methods">Trigger component methods</span></h2><p>Our <code>Example</code> component has an instance method <code>double</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">double</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;doubling the current value&#x27;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> * <span class="number">2</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Can we somehow call that method from Cypress test? From the React component we need to get to the React Fiber, here is my solution following <a href="https://stackoverflow.com/questions/29321742/react-getting-a-component-from-a-dom-element-for-debugging/39165137#39165137">this StackOverflow answer</a>.</p><figure class="highlight js"><figcaption><span>cypress/integration/utils.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// note that I am not even using cypress-react-selector here</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getReactFiber</span> = (<span class="params">el</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> key = <span class="title class_">Object</span>.<span class="title function_">keys</span>(el).<span class="title function_">find</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      key.<span class="title function_">startsWith</span>(<span class="string">&#x27;__reactFiber$&#x27;</span>) || <span class="comment">// react 17+</span></span><br><span class="line">      key.<span class="title function_">startsWith</span>(<span class="string">&#x27;__reactInternalInstance$&#x27;</span>) <span class="comment">// react &lt;17</span></span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (!key) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> el[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// react 16+</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getComponent</span> = (<span class="params">fiber</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> parentFiber = fiber.<span class="property">return</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">typeof</span> parentFiber.<span class="property">type</span> == <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    parentFiber = parentFiber.<span class="property">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> parentFiber</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Given a DOM element, we can grab the fiber and the component reference.</p><figure class="highlight js"><figcaption><span>cypress/integration/call-method.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getReactFiber, getComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;calls Example double()&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-cy=add]&#x27;</span>).<span class="title function_">click</span>().<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.Example&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">el$</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fiber = <span class="title function_">getReactFiber</span>(el$[<span class="number">0</span>])</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(fiber)</span><br><span class="line">    <span class="keyword">const</span> component = <span class="title function_">getComponent</span>(fiber)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(component.<span class="property">stateNode</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> In the component&#39;s prototype, we can discover common methods like <code>setState</code> and <code>double</code>.</p><p><img src="../images/react-counter/fiber.png" alt="Getting to the component reference from the DOM element"></p><p>Let&#39;s call the method <code>double()</code> from the test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;.Example&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">el$</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> fiber = <span class="title function_">getReactFiber</span>(el$[<span class="number">0</span>])</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(fiber)</span><br><span class="line">  <span class="keyword">const</span> component = <span class="title function_">getComponent</span>(fiber)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(component.<span class="property">stateNode</span>)</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;calling **double()**&#x27;</span>)</span><br><span class="line">  component.<span class="property">stateNode</span>.<span class="title function_">double</span>()</span><br><span class="line">&#125;)</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/react-counter/call-double.png" alt="Calling the component&#39;s method and then checking the updated page"></p><h2><span id="custom-command">Custom command</span></h2><p>Let&#39;s take our code to access the React component and make it into a <a href="https://on.cypress.io/custom-commands">child custom command</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getReactFiber, getComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Cypress</span>.<span class="property">Commands</span>.<span class="title function_">add</span>(<span class="string">&#x27;getComponent&#x27;</span>, &#123; <span class="attr">prevSubject</span>: <span class="string">&#x27;element&#x27;</span> &#125;, <span class="function">(<span class="params">$el</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> fiber = <span class="title function_">getReactFiber</span>($el[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">if</span> (!fiber) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Could not find React Fiber&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> component = <span class="title function_">getComponent</span>(fiber)</span><br><span class="line">  <span class="keyword">if</span> (!component) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Could not find React Component&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!component.<span class="property">stateNode</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Could not find React Component stateNode&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> component.<span class="property">stateNode</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Using this command we can directly access the component&#39;s state, overwrite it, and call the component&#39;s methods.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;checks and modifies state&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-cy=add]&#x27;</span>).<span class="title function_">click</span>().<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.Example&#x27;</span>)</span><br><span class="line">    .<span class="title function_">as</span>(<span class="string">&#x27;example&#x27;</span>)</span><br><span class="line">    .<span class="title function_">getComponent</span>()</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;state&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.include&#x27;</span>, &#123; <span class="attr">count</span>: <span class="number">2</span> &#125;)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@example&#x27;</span>).<span class="title function_">getComponent</span>().<span class="title function_">invoke</span>(<span class="string">&#x27;double&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@example&#x27;</span>).<span class="title function_">getComponent</span>().<span class="title function_">invoke</span>(<span class="string">&#x27;double&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;**call setState**&#x27;</span>)</span><br><span class="line">  <span class="comment">// set the application into the state that is normally impossible</span></span><br><span class="line">  <span class="comment">// to reach by just using the page interactions</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@example&#x27;</span>).<span class="title function_">getComponent</span>().<span class="title function_">invoke</span>(<span class="string">&#x27;setState&#x27;</span>, &#123; <span class="attr">count</span>: -<span class="number">99</span> &#125;)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;-99&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/react-counter/get-component.png" alt="Accessing the component using the custom command"></p><h2><span id="a-word-of-caution">A word of caution</span></h2><p>Should you call the internal component methods from your end-to-end tests? Only in the extraordinary circumstances, I think. If there is no other way to verify the behavior of the application or trigger an application action, you could. At the same time, remember that you are tying your tests to the implementation, which will make the tests harder to update. But sometimes we need to call these &quot;app actions&quot; to get to the data state we need to test.</p><h2><span id="links">Links</span></h2><ul><li><a href="https://github.com/bahmutov/react-counter">bahmutov&#x2F;react-counter</a> has the source code for this repo</li><li>Blog post <a href="/blog/react-app-actions/" title="Control React Applications From Cypress Tests">Control React Applications From Cypress Tests</a> shows the continuation of this work.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s take a look at a simple React component with some internal state. You can find this component in &lt;a href=&quot;https://github.com/ba
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="react" scheme="https://glebbahmutov.com/blog/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Repeating Tests</title>
    <link href="https://glebbahmutov.com/blog/repeat-tests/"/>
    <id>https://glebbahmutov.com/blog/repeat-tests/</id>
    <published>2022-01-31T05:00:00.000Z</published>
    <updated>2022-02-01T14:29:37.818Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine you are doubting if a test works consistently. You could <a href="/blog/burning-tests/" title="run it using cypress-grep locally">run it using cypress-grep locally</a>. But what if someone working on the backend API comes in and asks if they could launch the tests too? You could give them the command line utility <a href="https://github.com/bahmutov/run-cy-on-ci">run-cy-on-ci</a> to launch the tests from the terminal. Or you could let them launch the tests from the GitHub Actions page and it is much much simpler procedure.</p><blockquote class="pullquote"><p>🎁 You can find these examples in the repo <a href="https://github.com/bahmutov/test-todomvc-using-app-actions">bahmutov&#x2F;test-todomvc-using-app-actions</a>.</p></blockquote><h2><span id="run-a-test-n-times">Run a test N times</span></h2><p>Using the plugin <a href="https://github.com/cypress-io/cypress-grep">cypress-grep</a> you can select the test to run using a part of its title and skip all other tests and specs. In our GitHub Actions workflow <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/blob/master/.github/workflows/repeat-test.yml">repeat-test.yml</a> we can pass the <code>grep</code> and <code>burn</code> parameters connecting the user interface to the test run.</p><figure class="highlight yml"><figcaption><span>.github/workflows/repeat-test.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">repeat-test</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Lets</span> <span class="string">the</span> <span class="string">user</span> <span class="string">run</span> <span class="string">a</span> <span class="string">test</span> <span class="string">by</span> <span class="string">title</span> <span class="string">N</span> <span class="string">times</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">title:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Full</span> <span class="string">or</span> <span class="string">part</span> <span class="string">of</span> <span class="string">the</span> <span class="string">test</span> <span class="string">title</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">n:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Number</span> <span class="string">of</span> <span class="string">times</span> <span class="string">to</span> <span class="string">repeat</span> <span class="string">the</span> <span class="string">test</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">default:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">integer</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">repeat-test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">test</span> <span class="string">N</span> <span class="string">times</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">start-quiet</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">&#x27;grep=$<span class="template-variable">&#123;&#123; github.event.inputs.title &#125;&#125;</span>,burn=$<span class="template-variable">&#123;&#123; github.event.inputs.n &#125;&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure><p>All the user needs to do is to enter a part of the test&#39;s title and pick the number of times to run the test.</p><p><img src="../images/repeat-tests/repeat-test.png" alt="Start the workflow to run a test five times in a row"></p><p>The same test selected by its title is repeated five times in a row</p><p><img src="../images/repeat-tests/five.png" alt="The same test has been repeated fives times"></p><h2><span id="run-all-tests-tagged-x-n-times">Run all tests tagged X N times</span></h2><p>In my repo, I organize the tests using tags, see <a href="/blog/tag-tests/" title="How To Tag And Run End-to-End Tests">How To Tag And Run End-to-End Tests</a>. If I want to run all tests tagged <code>@editing</code>, I need a different workflow <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/blob/master/.github/workflows/repeat-tag.yml">repeat-tag.yml</a> to pass the tag value using <code>grepTag</code> variable to the <code>cypress-grep</code> plugin.</p><figure class="highlight yml"><figcaption><span>.github/workflows/repeat-tag.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">repeat-tag</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Lets</span> <span class="string">the</span> <span class="string">user</span> <span class="string">run</span> <span class="string">all</span> <span class="string">the</span> <span class="string">tests</span> <span class="string">with</span> <span class="string">specific</span> <span class="string">tag</span> <span class="string">N</span> <span class="string">times</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">tag:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Tag</span> <span class="string">to</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">choice</span></span><br><span class="line">        <span class="attr">options:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;@adding&#x27;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;@complete&#x27;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;@editing&#x27;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;@item&#x27;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;@persistence&#x27;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;@regression&#x27;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;@routing&#x27;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;@sanity&#x27;</span></span><br><span class="line">      <span class="attr">n:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Number</span> <span class="string">of</span> <span class="string">times</span> <span class="string">to</span> <span class="string">repeat</span> <span class="string">the</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">default:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">integer</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">repeat-tag:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">tagged</span> <span class="string">tests</span> <span class="string">N</span> <span class="string">times</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">start-quiet</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">&#x27;grepTags=$<span class="template-variable">&#123;&#123; github.event.inputs.tag &#125;&#125;</span>,burn=$<span class="template-variable">&#123;&#123; github.event.inputs.n &#125;&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> use <a href="https://github.com/bahmutov/find-cypress-specs">find-cypress-specs</a> utility to print all available test tags.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --tags</span><br><span class="line"></span><br><span class="line">Tag           Tests</span><br><span class="line">------------  -----</span><br><span class="line">@adding       6</span><br><span class="line">@complete     6</span><br><span class="line">@editing      5</span><br><span class="line">@item         3</span><br><span class="line">@persistence  1</span><br><span class="line">@regression   17</span><br><span class="line">@routing      5</span><br><span class="line">@sanity       8</span><br></pre></td></tr></table></figure><p>Let&#39;s launch the <code>@editing</code> tests and run them 3 times each.</p><p><img src="../images/repeat-tests/launch-tag.png" alt="Launching workflow to run all tests tagged @editing three times in a row"></p><p><img src="../images/repeat-tests/three.png" alt="Each tagged test ran three times"></p><h2><span id="run-a-test-file-n-times">Run a test file N times</span></h2><p>Finally, let&#39;s imagine we want to run a particular test file (spec) several times. We can install the plugin <a href="https://github.com/bahmutov/cypress-repeat">cypress-repeat</a> that uses Cypress NPM module API to run the test runner N times. For example, we can run the spec <code>cypress/integration/item-spec.js</code> twice using the terminal command</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx cypress-repeat run --spec cypress/integration/item-spec.js -n 2 ...</span><br></pre></td></tr></table></figure><p>In the workflow <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/blob/master/.github/workflows/repeat-spec.yml">repeat-spec.yml</a> we will use <code>cypress-repeat</code> as a custom command option:</p><figure class="highlight yml"><figcaption><span>.github/workflows/repeat-spec.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">repeat-spec</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Lets</span> <span class="string">the</span> <span class="string">user</span> <span class="string">run</span> <span class="string">a</span> <span class="string">spec</span> <span class="string">file</span> <span class="string">N</span> <span class="string">times</span> <span class="string">in</span> <span class="string">a</span> <span class="string">row</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">spec:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Part</span> <span class="string">or</span> <span class="string">full</span> <span class="string">path</span> <span class="string">to</span> <span class="string">the</span> <span class="string">spec</span> <span class="string">file</span> <span class="string">like</span> <span class="string">&quot;editing-spec.js&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">n:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Number</span> <span class="string">of</span> <span class="string">times</span> <span class="string">to</span> <span class="string">repeat</span> <span class="string">the</span> <span class="string">test</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">default:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">integer</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">repeat-spec:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">spec</span> <span class="string">N</span> <span class="string">times</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">start-quiet</span></span><br><span class="line">          <span class="comment"># use https://github.com/bahmutov/cypress-repeat to repeat the spec</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">npx</span> <span class="string">cypress-repeat</span> <span class="string">-n</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.inputs.n</span> <span class="string">&#125;&#125;</span> <span class="string">--spec</span> <span class="string">&#x27;**/$<span class="template-variable">&#123;&#123; github.event.inputs.spec &#125;&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure><p>Note that we add the wildcard to the spec filename to let the user simple specify the file name without the <code>cypress/integration/</code> prefix.</p><p><img src="../images/repeat-tests/launch-spec.png" alt="Launching workflow to run the item-spec.js test file"></p><p>In the action output, you should see the <code>cypress-repeat</code> messages like</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">cypress-repeat: will repeat Cypress command 2 time(s)</span><br><span class="line">***** cypress-repeat: 1 of 2 *****</span><br><span class="line">====================================================================================================</span><br><span class="line"></span><br><span class="line">  (Run Starting)</span><br><span class="line"></span><br><span class="line">  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">  │ Cypress:        9.3.1                                                                          │</span><br><span class="line">  │ Browser:        Electron 94 (headless)                                                         │</span><br><span class="line">  │ Node Version:   v16.13.2 (/usr/local/bin/node)                                                 │</span><br><span class="line">  │ Specs:          1 found (item-spec.js)                                                         │</span><br><span class="line">  │ Searched:       **/item-spec.js                                                                │</span><br><span class="line">  └────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">***** cypress-repeat: 2 of 2 *****</span><br><span class="line">====================================================================================================</span><br><span class="line"></span><br><span class="line">  (Run Starting)</span><br><span class="line"></span><br><span class="line">  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">  │ Cypress:        9.3.1                                                                          │</span><br><span class="line">  │ Browser:        Electron 94 (headless)                                                         │</span><br><span class="line">  │ Node Version:   v16.13.2 (/usr/local/bin/node)                                                 │</span><br><span class="line">  │ Specs:          1 found (item-spec.js)                                                         │</span><br><span class="line">  │ Searched:       **/item-spec.js                                                                │</span><br><span class="line">  └────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line">...</span><br><span class="line">***** finished 2 run(s) successfully *****</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> you can run multiple spec files by giving a common parent folder name. For example, to run <em>all</em> integration specs in the folder <code>cypress/integration</code> enter the &quot;integration&quot; as the spec name. It will invoke Cypress with parameter <code>--spec **/integration</code> which will match all specs.</p><h2><span id="see-more">See more</span></h2><ul><li><a href="https://www.cypress.io/blog/2020/12/03/retry-rerun-repeat/">Retry, Rerun, Repeat</a></li><li><a href="/blog/burning-tests/" title="Burning Tests with cypress-grep">Burning Tests with cypress-grep</a></li><li><a href="/blog/pick-tests-using-pull-request/" title="Pick Tests To Run Using The Pull Request Text">Pick Tests To Run Using The Pull Request Text</a></li><li><a href="/blog/tag-tests/" title="How To Tag And Run End-to-End Tests">How To Tag And Run End-to-End Tests</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine you are doubting if a test works consistently. You could &lt;a href=&quot;/blog/burning-tests/&quot; title=&quot;run it using cypress-grep locally&quot;
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress History API Example</title>
    <link href="https://glebbahmutov.com/blog/cypress-history-api-example/"/>
    <id>https://glebbahmutov.com/blog/cypress-history-api-example/</id>
    <published>2022-01-28T05:00:00.000Z</published>
    <updated>2022-01-28T12:29:30.131Z</updated>
    
    <content type="html"><![CDATA[<p>One of the key features of Cypress is its ability to access the native browser API objects used by the application itself. For example, you could stub the <a href="/blog/browser-filesystem-api/" title="browser FileSystem methods">browser FileSystem methods</a> or the <a href="/blog/stub-navigator-api/" title="navigator API">navigator API</a> to ensure the application is using those APIs correctly. In this blog post I will show how you can test an application that uses the browser <a href="http://html5doctor.com/history-api/">History API</a>.</p><blockquote class="pullquote"><p>🎁 You can find the example application and its Cypress tests in the repo <a href="https://github.com/bahmutov/cypress-history-api-example">bahmutov&#x2F;cypress-history-api-example</a>.</p></blockquote><h2><span id="the-application">The application</span></h2><p>The application shows pictures of cats. When the user clicks on the link, the application changes the image by modifying the image source attribute, and then pushes the state to the browser history. To the user it looks like normal (but very fast) navigation, yet you do see the URL change, the location history, and you can correctly navigate using the browser &quot;Back&quot; button.</p><p><img src="../images/history-api/cats.png" alt="The Cats example application"></p><p>The code in the application pushes the new state to the application after switching the image source and the content.</p><figure class="highlight js"><figcaption><span>public/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">vat cats = &#123;</span><br><span class="line">  <span class="attr">fluffy</span>: &#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;Fluffy!&#x27;</span>,</span><br><span class="line">    <span class="attr">photo</span>: <span class="string">&#x27;https://placekitten.com/200/200&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">socks</span>: &#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;Socks!&#x27;</span>,</span><br><span class="line">    <span class="attr">photo</span>: <span class="string">&#x27;https://placekitten.com/280/280&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">whiskers</span>: &#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;Whiskers!&#x27;</span>,</span><br><span class="line">    <span class="attr">photo</span>: <span class="string">&#x27;https://placekitten.com/350/350&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">bob</span>: &#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;Just Bob.&#x27;</span>,</span><br><span class="line">    <span class="attr">photo</span>: <span class="string">&#x27;https://placekitten.com/320/210&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateContent</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (data == <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  contentEl.<span class="property">textContent</span> = data.<span class="property">content</span></span><br><span class="line">  photoEl.<span class="property">src</span> = data.<span class="property">photo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">goTo</span>(<span class="params">cat, title, href</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = cats[cat] || <span class="literal">null</span> <span class="comment">// In reality this could be an AJAX request</span></span><br><span class="line">  <span class="title function_">updateContent</span>(data)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add an item to the history log</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;going to&#x27;</span>, cat, title, href)</span><br><span class="line">  history.<span class="title function_">pushState</span>(data, title, href)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// each links has this handler</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clickHandler</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> cat = event.<span class="property">target</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;href&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">pop</span>()</span><br><span class="line">  <span class="title function_">goTo</span>(cat, event.<span class="property">target</span>.<span class="property">textContent</span>, event.<span class="property">target</span>.<span class="property">href</span>)</span><br><span class="line">  <span class="keyword">return</span> event.<span class="title function_">preventDefault</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Can we verify this behavior?</p><h2><span id="cypress-and-history-api">Cypress and History API</span></h2><p>First, let&#39;s verify the test can access the History object.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;redirects to a cat at the start&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">location</span>(<span class="string">&#x27;pathname&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/history/fluffy&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;**has History API**&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">window</span>()</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;history&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;respondTo&#x27;</span>, <span class="string">&#x27;pushState&#x27;</span>)</span><br><span class="line">    .<span class="title function_">and</span>(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;state&#x27;</span>)</span><br><span class="line">    <span class="comment">// inspect the state object</span></span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">content</span>: <span class="string">&#x27;Fluffy!&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test gets the <code>history</code> property from the application&#39;s <code>window</code> object. We could validate the entire state object, or just parts of it. We can click on the <code>ITS history</code> command to see the entire object. We could call those methods like <code>back</code> and <code>go</code> from our tests too!</p><p><img src="../images/history-api/devtools.png" alt="The history object"></p><h2><span id="spy-on-the-history-method-calls">Spy on the history method calls</span></h2><p>Before we try to call the history methods, why don&#39;t we check how the application uses them. Using the Sinon spies (bundled with Cypress using <a href="https://on.cypress.io/spy">cy.spy</a> command) let&#39;s confirm the application uses the <code>history.pushState</code> correctly.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;spies on history.pushState&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">onBeforeLoad</span>(<span class="params">win</span>) &#123;</span><br><span class="line">      <span class="comment">// spy on the &quot;pushState&quot; method</span></span><br><span class="line">      cy.<span class="title function_">spy</span>(win.<span class="property">history</span>, <span class="string">&#x27;pushState&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;pushState&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">location</span>(<span class="string">&#x27;pathname&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/history/fluffy&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@pushState&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;args.0&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, [</span><br><span class="line">      &#123; <span class="attr">content</span>: <span class="string">&#x27;Fluffy!&#x27;</span>, <span class="attr">photo</span>: <span class="string">&#x27;https://placekitten.com/200/200&#x27;</span> &#125;,</span><br><span class="line">      <span class="string">&#x27;Fluffy&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;/history/fluffy&#x27;</span>,</span><br><span class="line">    ])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/history-api/spy.png" alt="Spying on the history.pushState method calls made by the application"></p><p><strong>Tip:</strong> using the <a href="https://github.com/bahmutov/cy-spok">cy-spok</a> plugin, we can write powerful assertions to check the entire list of arguments.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spok <span class="keyword">from</span> <span class="string">&#x27;cy-spok&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;spies on history.pushState using cy-spok&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">onBeforeLoad</span>(<span class="params">win</span>) &#123;</span><br><span class="line">      <span class="comment">// spy on the &quot;pushState&quot; method</span></span><br><span class="line">      cy.<span class="title function_">spy</span>(win.<span class="property">history</span>, <span class="string">&#x27;pushState&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;pushState&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">location</span>(<span class="string">&#x27;pathname&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/history/fluffy&#x27;</span>)</span><br><span class="line">  <span class="comment">// navigate to a different cat</span></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;Whiskers&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;#content&#x27;</span>, <span class="string">&#x27;Whiskers!&#x27;</span>)</span><br><span class="line">  <span class="comment">// check the pushState calls</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@pushState&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledTwice&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;args&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(</span><br><span class="line">      <span class="title function_">spok</span>([</span><br><span class="line">        <span class="comment">// first call</span></span><br><span class="line">        [</span><br><span class="line">          &#123; <span class="attr">content</span>: <span class="string">&#x27;Fluffy!&#x27;</span>, <span class="attr">photo</span>: <span class="string">&#x27;https://placekitten.com/200/200&#x27;</span> &#125;,</span><br><span class="line">          <span class="string">&#x27;Fluffy&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;/history/fluffy&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// second call</span></span><br><span class="line">        [</span><br><span class="line">          &#123; <span class="attr">content</span>: <span class="string">&#x27;Whiskers!&#x27;</span>, <span class="attr">photo</span>: <span class="string">&#x27;https://placekitten.com/350/350&#x27;</span> &#125;,</span><br><span class="line">          <span class="string">&#x27;Whiskers&#x27;</span>,</span><br><span class="line">          <span class="comment">// we get the full URL here</span></span><br><span class="line">          <span class="title class_">Cypress</span>.<span class="title function_">config</span>(<span class="string">&#x27;baseUrl&#x27;</span>) + <span class="string">&#x27;/history/whiskers&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">      ]),</span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/history-api/spok.png" alt="Checking multiple calls using cy-spok"></p><h2><span id="calling-history-methods">Calling history methods</span></h2><p>Now let&#39;s navigate by calling the History object methods from the test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;navigates using history methods&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;#content&#x27;</span>, <span class="string">&#x27;Fluffy!&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">location</span>(<span class="string">&#x27;pathname&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/history/fluffy&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;Socks&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;#content&#x27;</span>, <span class="string">&#x27;Socks!&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">location</span>(<span class="string">&#x27;pathname&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/history/socks&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;Whiskers&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;#content&#x27;</span>, <span class="string">&#x27;Whiskers!&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">location</span>(<span class="string">&#x27;pathname&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/history/whiskers&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;#content&#x27;</span>, <span class="string">&#x27;Just Bob.&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">location</span>(<span class="string">&#x27;pathname&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/history/bob&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;**go back in history**&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">window</span>().<span class="title function_">its</span>(<span class="string">&#x27;history&#x27;</span>).<span class="title function_">invoke</span>(<span class="string">&#x27;back&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;#content&#x27;</span>, <span class="string">&#x27;Whiskers!&#x27;</span>)</span><br><span class="line">  <span class="comment">// unfortunately Cypress does not change the URL _shown_</span></span><br><span class="line">  <span class="comment">// but it does change the URL _in_ the browser</span></span><br><span class="line">  cy.<span class="title function_">location</span>(<span class="string">&#x27;pathname&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/history/whiskers&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;**go -2 in history**&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">window</span>().<span class="title function_">its</span>(<span class="string">&#x27;history&#x27;</span>).<span class="title function_">invoke</span>(<span class="string">&#x27;go&#x27;</span>, -<span class="number">2</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;#content&#x27;</span>, <span class="string">&#x27;Fluffy!&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">location</span>(<span class="string">&#x27;pathname&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/history/fluffy&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/history-api/navigation.png" alt="The application navigates when we call history methods from the test"></p><h2><span id="adding-synthetic-history-state">Adding synthetic history state</span></h2><p>Finally, our application restores the saved history state if it finds it at the start</p><figure class="highlight js"><figcaption><span>public/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initialCat = <span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">href</span>.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">pop</span>()</span><br><span class="line"><span class="keyword">if</span> (!cats[initialCat]) &#123;</span><br><span class="line">  <span class="comment">// maybe there is something in the history?</span></span><br><span class="line">  <span class="keyword">if</span> (history.<span class="property">state</span>) &#123;</span><br><span class="line">    <span class="title function_">updateContent</span>(history.<span class="property">state</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// go to the first cat</span></span><br><span class="line">    <span class="title function_">goTo</span>(<span class="string">&#x27;fluffy&#x27;</span>, <span class="string">&#x27;Fluffy&#x27;</span>, <span class="string">&#x27;/history/fluffy&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s test it by putting a robot cat 🤖😺 into the History object first and the visiting the application.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts at our state&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">onBeforeLoad</span>(<span class="params">win</span>) &#123;</span><br><span class="line">      <span class="comment">// populate the state history</span></span><br><span class="line">      win.<span class="property">history</span>.<span class="title function_">pushState</span>(</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">cat</span>: <span class="string">&#x27;robot-whiskers&#x27;</span>,</span><br><span class="line">          <span class="attr">content</span>: <span class="string">&#x27;Robot Whiskers!&#x27;</span>,</span><br><span class="line">          <span class="comment">// we can even use some other photos during testing</span></span><br><span class="line">          <span class="attr">photo</span>: <span class="string">&#x27;https://robohash.org/CE6.png?set=set4&amp;size=150x150&#x27;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;Robot Whiskers&#x27;</span>,</span><br><span class="line">          <span class="attr">href</span>: <span class="string">&#x27;/history/robot-whiskers&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;Robot Whiskers&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;/history/robot-whiskers&#x27;</span>,</span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;#content&#x27;</span>, <span class="string">&#x27;Robot Whiskers!&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">location</span>(<span class="string">&#x27;pathname&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/history/robot-whiskers&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/history-api/robot.png" alt="Setting up the application to load a robot cat"></p><p>Nice!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;One of the key features of Cypress is its ability to access the native browser API objects used by the application itself. For example, y
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Wordle Page Objects</title>
    <link href="https://glebbahmutov.com/blog/wordle-page-objects/"/>
    <id>https://glebbahmutov.com/blog/wordle-page-objects/</id>
    <published>2022-01-27T05:00:00.000Z</published>
    <updated>2022-01-27T03:39:31.667Z</updated>
    
    <content type="html"><![CDATA[<p>The game <a href="https://www.powerlanguage.co.uk/wordle/">Wordle</a> is pretty popular, and I have been solving &#x2F; playing it using Cypress for a while. You can find my code in the repo <a href="https://github.com/bahmutov/cypress-wordle">bahmutov&#x2F;cypress-wordle</a> and multiple short videos showing my test implementations in this <a href="https://www.youtube.com/playlist?list=PLP9o9QNnQuAaihgCPlXyzlj_P-1TTbj-O">YouTube playlist</a>.</p><p><img src="../images/wordle-page-objects/really-solved.png" alt="Cypress solved Wordle game"></p><p>Recently, other Wordle game implementations have appeared. For example <a href="https://agreenerworldle.org/">A Greener Wordle</a> let&#39;s you play using only the words related to the climate crisis. Another <a href="https://github.com/yyx990803/vue-wordle">version</a> lets you encode the target word via URL query parameter so your friends can guess the word you send them. For example, we can send the URL with the word &quot;quick&quot; encoded using base64 algorithm and appended to the url as <code>cXVpY2s=</code>. The test correctly calculates the answer starting with the word &quot;start&quot; in four steps.</p><p><img src="../images/wordle-page-objects/vue.png" alt="Cypress solved the custom Wordle implementation"></p><p>How can the same code solve the two different implementations of the game? If we inspect the page structure, the two games are implemented <em>very</em> differently. The original game is implemented using WebComponents with shadow DOM elements everywhere.</p><p><img src="../images/wordle-page-objects/shadow.png" alt="The first Wordle implementation uses WebComponents"></p><p>The Vue version uses a single DOM with its own classes and attributes used to show each letter&#39;s status.</p><p><img src="../images/wordle-page-objects/vue-elements.png" alt="The second Wordle implementation uses Vue framework"></p><p>The algorithm to solve the game is independent of the page. To solve the game we need to pick a word from the word list, enter the letters into the game, collect the game&#39;s feedback (which letter is at the correct position, which letter is present, and which letter is absent). We use the feedback to prune the word list, and pick a word again.</p><h2><span id="the-page-objects">The page objects</span></h2><p>We can abstract entering the word and collect the letter feedback by using a <em>page object</em>. It will be a simple JavaScript object with methods to call the Cypress commands. A page object is specific to the implementation - thus we will have one object for the first Wordle game implementation, and another page object for the second implementation.</p><p>Here is the first page object.</p><figure class="highlight js"><figcaption><span>cypress/integration/utils/pages.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Playing</span> = &#123;</span><br><span class="line">  <span class="title function_">enterWord</span>(<span class="params">word</span>) &#123;</span><br><span class="line">    word.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">letter</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">window</span>(silent).<span class="title function_">trigger</span>(<span class="string">&#x27;keydown&#x27;</span>, &#123; <span class="attr">key</span>: letter, <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.<span class="title function_">window</span>(silent)</span><br><span class="line">      .<span class="title function_">trigger</span>(<span class="string">&#x27;keydown&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;Enter&#x27;</span>, <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">      <span class="comment">// let the letter animation finish</span></span><br><span class="line">      .<span class="title function_">wait</span>(<span class="number">2000</span>, silent)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Looks at the entered word row and collects the status of each letter</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">getLetters</span>(<span class="params">word</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> cy</span><br><span class="line">      .<span class="title function_">get</span>(<span class="string">`game-row[letters=<span class="subst">$&#123;word&#125;</span>]`</span>)</span><br><span class="line">      .<span class="title function_">find</span>(<span class="string">&#x27;game-tile&#x27;</span>, silent)</span><br><span class="line">      .<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, word.<span class="property">length</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">$tiles</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> $tiles.<span class="title function_">toArray</span>().<span class="title function_">map</span>(<span class="function">(<span class="params">tile, k</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> letter = tile.<span class="title function_">getAttribute</span>(<span class="string">&#x27;letter&#x27;</span>)</span><br><span class="line">          <span class="keyword">const</span> evaluation = tile.<span class="title function_">getAttribute</span>(<span class="string">&#x27;evaluation&#x27;</span>)</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;%d: letter %s is %s&#x27;</span>, k, letter, evaluation)</span><br><span class="line">          <span class="keyword">return</span> &#123; k, letter, evaluation &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is the second page object - notice how it uses &quot;keyup&quot; instead of &quot;keydown&quot; events to input the characters.</p><figure class="highlight js"><figcaption><span>cypress/integration/vue-wordle/pages.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> silent = &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// interact with the VueWordle via custom page object</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Playing</span> = &#123;</span><br><span class="line">  <span class="title function_">enterWord</span>(<span class="params">word</span>) &#123;</span><br><span class="line">    word.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">letter</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">window</span>(silent).<span class="title function_">trigger</span>(<span class="string">&#x27;keyup&#x27;</span>, &#123; <span class="attr">key</span>: letter, <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.<span class="title function_">window</span>(silent)</span><br><span class="line">      .<span class="title function_">trigger</span>(<span class="string">&#x27;keyup&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;Enter&#x27;</span>, <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">      <span class="comment">// let the letter animation finish</span></span><br><span class="line">      .<span class="title function_">wait</span>(<span class="number">2000</span>, silent)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Looks at the entered word row and collects the status of each letter</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">getLetters</span>(<span class="params">word</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> cy</span><br><span class="line">      .<span class="title function_">get</span>(<span class="string">&#x27;#board .row .tile.filled.revealed .back&#x27;</span>)</span><br><span class="line">      .<span class="title function_">should</span>(<span class="string">&#x27;have.length.gte&#x27;</span>, word.<span class="property">length</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">$tiles</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// only take the last 5 letters</span></span><br><span class="line">        <span class="keyword">return</span> $tiles</span><br><span class="line">          .<span class="title function_">toArray</span>()</span><br><span class="line">          .<span class="title function_">slice</span>(-<span class="number">5</span>)</span><br><span class="line">          .<span class="title function_">map</span>(<span class="function">(<span class="params">tile, k</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> letter = tile.<span class="property">innerText</span>.<span class="title function_">toLowerCase</span>()</span><br><span class="line">            <span class="keyword">const</span> evaluation = tile.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;correct&#x27;</span>)</span><br><span class="line">              ? <span class="string">&#x27;correct&#x27;</span></span><br><span class="line">              : tile.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;present&#x27;</span>)</span><br><span class="line">              ? <span class="string">&#x27;present&#x27;</span></span><br><span class="line">              : <span class="string">&#x27;absent&#x27;</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;%d: letter %s is %s&#x27;</span>, k, letter, evaluation)</span><br><span class="line">            <span class="keyword">return</span> &#123; k, letter, evaluation &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Checks if the Wordle was solved */</span></span><br><span class="line">  <span class="title function_">solved</span>(<span class="params">greeting</span>) &#123;</span><br><span class="line">    <span class="comment">// contains the given greeting (like &quot;Genius&quot;) ig any</span></span><br><span class="line">    ;(greeting ? cy.<span class="title function_">contains</span>(<span class="string">&#x27;.message&#x27;</span>, greeting) : cy.<span class="title function_">get</span>(<span class="string">&#x27;.message&#x27;</span>))</span><br><span class="line">      .<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">      <span class="comment">// contain the solved tiles minimap</span></span><br><span class="line">      .<span class="title function_">find</span>(<span class="string">&#x27;pre&#x27;</span>)</span><br><span class="line">      .<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The page object can have other methods to do additional actions on the page, like <code>Playing.solved()</code> to close the popup at the end.</p><p>You can watch a short video where I make a page object below.</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/R4Ji8lrFrec" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="solver">Solver</span></h2><p>Now that we have a page object to perform actual operations on the page, let&#39;s use it from a function that solves the Wordle. The solver function is almost pure - meaning it does not touch the page and does not have to deal with the particular implementation. If it needs to enter the word or interact with the page, it uses the page object passed as a parameter. Here is a short version of the solver without details</p><figure class="highlight js"><figcaption><span>cypress/integration/utils/solver.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">solve</span>(<span class="params">startWord, pageObject</span>) &#123;</span><br><span class="line">  <span class="title function_">expect</span>(pageObject, <span class="string">&#x27;page object&#x27;</span>)</span><br><span class="line">    .<span class="property">to</span>.<span class="property">be</span>.<span class="title function_">an</span>(<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">    .<span class="property">and</span>.<span class="property">to</span>.<span class="title function_">respondTo</span>(<span class="string">&#x27;enterWord&#x27;</span>)</span><br><span class="line">    .<span class="property">and</span>.<span class="property">to</span>.<span class="title function_">respondTo</span>(<span class="string">&#x27;getLetters&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> cy</span><br><span class="line">    .<span class="title function_">get</span>(<span class="string">&#x27;@wordList&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">wordList</span>) =&gt;</span> <span class="title function_">tryNextWord</span>(wordList, startWord, pageObject))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Takes the feedback from the game about each letter,</span></span><br><span class="line"><span class="comment"> * and trims the word list to remove words that don&#x27;t match.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateWordList</span>(<span class="params">wordList, word, letters</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Takes the word list and the word and uses the page object</span></span><br><span class="line"><span class="comment"> * to enter the word, get the feedback, and proceed to the next word.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tryNextWord</span>(<span class="params">wordList, word, pageObject</span>) &#123;</span><br><span class="line">  <span class="comment">// we should be seeing the list shrink with each iteration</span></span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">`Word list has <span class="subst">$&#123;wordList.length&#125;</span> words`</span>)</span><br><span class="line">  <span class="keyword">if</span> (!word) &#123;</span><br><span class="line">    word = <span class="title function_">pickWordWithUniqueLetters</span>(wordList)</span><br><span class="line">  &#125;</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">`**<span class="subst">$&#123;word&#125;</span>**`</span>)</span><br><span class="line">  pageObject.<span class="title function_">enterWord</span>(word)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pageObject.<span class="title function_">getLetters</span>(word).<span class="title function_">then</span>(<span class="function">(<span class="params">letters</span>) =&gt;</span> &#123;</span><br><span class="line">    wordList = <span class="title function_">updateWordList</span>(wordList, word, letters)</span><br><span class="line">    <span class="keyword">if</span> (wordList === word) &#123;</span><br><span class="line">      <span class="comment">// we solved it!</span></span><br><span class="line">      <span class="keyword">return</span> word</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">tryNextWord</span>(wordList, <span class="literal">null</span>, pageObject)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Notice how the <code>tryNextWord</code> uses <code>pageObject.enterWord</code> and <code>pageObject.getLetters</code> method calls to access the page?</p><h2><span id="specs">Specs</span></h2><p>The individual specs are where the solver and the page objects are put together. To solve the first Wordle implementation, we pick the first page object to pass to the solver function.</p><figure class="highlight js"><figcaption><span>cypress/integration/solve.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// use page objects to close the modals, solve the puzzle, etc</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Start</span>, <span class="title class_">Playing</span>, <span class="title class_">Solved</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils/pages&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; solve &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils/solver&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;solves the game&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  cy.<span class="title function_">fixture</span>(<span class="string">&#x27;wordlist.json&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;wordList&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="title class_">Start</span>.<span class="title function_">close</span>()</span><br><span class="line">  <span class="title function_">solve</span>(<span class="string">&#x27;grasp&#x27;</span>, <span class="title class_">Playing</span>).<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;sugar&#x27;</span>)</span><br><span class="line">  <span class="title class_">Solved</span>.<span class="title function_">close</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> I like having different page objects for different stages of the page. In this case, there is a page object called <code>Start</code> to close with the initial popup.</p><p>The spec to solve the Vue version of the game imports its own page objects but calls the same <code>solve</code> function.</p><figure class="highlight js"><figcaption><span>cypress/integration/vue-wordle/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Playing</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./pages&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; solve &#125; <span class="keyword">from</span> <span class="string">&#x27;../utils/solver&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Vue Wordle&#x27;</span>, &#123; <span class="attr">baseUrl</span>: <span class="string">&#x27;https://vue-wordle.netlify.app/&#x27;</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;solves the game&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    cy.<span class="title function_">fixture</span>(<span class="string">&#x27;wordlist.json&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;wordList&#x27;</span>)</span><br><span class="line">    <span class="comment">// the word to guess</span></span><br><span class="line">    <span class="keyword">const</span> word = <span class="string">&#x27;quick&#x27;</span></span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">`/?<span class="subst">$&#123;btoa(word)&#125;</span>`</span>)</span><br><span class="line">    <span class="title function_">solve</span>(<span class="string">&#x27;start&#x27;</span>, <span class="title class_">Playing</span>).<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, word)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Works beautifully. If you prefer to learn how to use page objects, solvers, and specs, watch the video below.</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/4MOfRd6I3UY" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The game &lt;a href=&quot;https://www.powerlanguage.co.uk/wordle/&quot;&gt;Wordle&lt;/a&gt; is pretty popular, and I have been solving &amp;#x2F; playing it using 
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>How To Check Network Requests Using Cypress</title>
    <link href="https://glebbahmutov.com/blog/network-requests-with-cypress/"/>
    <id>https://glebbahmutov.com/blog/network-requests-with-cypress/</id>
    <published>2022-01-22T05:00:00.000Z</published>
    <updated>2022-01-24T01:28:00.983Z</updated>
    
    <content type="html"><![CDATA[<p>Recently a user posted in the <a href="https://gitter.im/cypress-io/cypress">Cypress Gitter channel</a> the following image and asked why this code is not working.</p><p><img src="../images/net-cy/net-question.png" alt="This code is broken"></p><p>The above code has several problems. In this blog post, I will fix them all. I have recorded a short video showing the fixes step by step, you can watch the video below, or keep reading.</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/LiYJtUbe7gc" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><!-- toc --><ul><li><a href="#the-returned-value">The returned value</a></li><li><a href="#printing-the-value">Printing the value</a><ul><li><a href="#why-cylog-prints-null-or-undefined">Why cy.log prints null or undefined</a></li><li><a href="#when-to-use-cypress-then-callback-to-use-the-value">When To Use Cypress .Then Callback To Use The Value</a></li></ul></li><li><a href="#fluent-programming">Fluent programming</a><ul><li><a href="#bonus-cy-spok">Bonus: cy-spok</a></li></ul></li></ul><!-- tocstop --><h2><span id="the-returned-value">The returned value</span></h2><p>First, let&#39;s deal with the returned value of the <code>cy.wait(...).then(...)</code> chain.</p><p><img src="../images/net-cy/return-value.png" alt="The returned value is not the organization id"></p><p>Think about JavaScript promises. A promise <code>.then</code> method does NOT return the value, it returns another promise, so you can attach another <code>.then</code> callback, or a callback to catch an error using <code>.catch</code>, right?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// INCORRECT, the &quot;x&quot; is a promise instance, not the value 42</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(...).<span class="title function_">then</span>(...).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="number">42</span>)</span><br></pre></td></tr></table></figure><p>If you want to get the resolved value <code>x</code>, you need to put the code that uses <code>x</code> into the last callback.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FIXED, the &quot;x&quot; is used inside `.then(...)` callback</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(...).<span class="title function_">then</span>(...).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="number">42</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// use x here, x should be 42</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Cypress command chains might look like promise chains, but they are more like reactive streams, see <a href="https://slides.com/bahmutov/reactive-conf">this presentation from ReactiveConf 2018</a>. Thus every command like <code>cy.wait</code> and <code>cy.then</code> returns another instance of Cypress chainable interface so you can attach more commands. If you want to use the value returned (or &quot;yielded&quot; as Cypress calls it), use it inside <code>.then(...)</code> callback.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">wait</span>(<span class="string">&#x27;@createUnion&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; statusCode, body &#125; = response.<span class="property">response</span></span><br><span class="line">  <span class="keyword">const</span> org = body.<span class="property">data</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// validate the response</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> org.<span class="property">id</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">orgId</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// you can use the orgId now</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="printing-the-value">Printing the value</span></h2><p>Let&#39;s look at why the <code>console.log(orgId)</code> prints a weird object.</p><p><img src="../images/net-cy/log-value.png" alt="The console.log prints something unexpected"></p><p>As I explained above, the returned value of the Cypress callback is an internal chainable object used to add more commands to be executed. The Cypress commands themselves are queued up, the have not started running. The Cypress chains of commands are lazy - they only start running once the browser is ready (which is another difference from the Promises which are <a href="/blog/difference-between-promise-and-task/" title="very very eager to run">very very eager to run</a>). If we look at the order of execution, the <code>console.log</code> runs <em>way</em> before the Cypress command gets the intercepted response and gets the ID property.</p><p>I marked the order of statements executed in the code snippet.</p><p><img src="../images/net-cy/order.png" alt="The order in which the code statements run"></p><ol><li>First, the code runs <code>cy.wait</code> to schedule the &quot;WAIT&quot; command. It returns Cypress chainable object</li><li>The Cypress chainable object has <code>then</code> method, it gets called with a function callback reference. The Cypress method schedules the &quot;THEN&quot; command to be run after &quot;WAIT&quot; is finished (nothing is running at this point).</li><li>There are no more Cypress commands to call, thus the assignment <code>const orgId =</code> runs, assigning the (unexpected) Cypress chainable object reference to the local variable <code>orgId</code></li><li>The problem happens here: the next JavaScript statement that runs is the <code>console.log(orgId)</code> which tries to print the Chainable object, while the user expects to see the organization id. So it prints something weird.</li><li>Cypress test starts running, finds the &quot;WAIT&quot; command, waits for that alias &quot;@createUnion&quot;, yields the intercept to the next scheduled command &quot;THEN&quot;, calls the function callback which returns the real organization ID.</li></ol><p>To fix the code snippet, move the <code>console.log</code> into the <code>.then</code> callback that gets the ID, or attach it as another <code>.then</code> callback.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">wait</span>(<span class="string">&#x27;@createUnion&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; statusCode, body &#125; = response.<span class="property">response</span></span><br><span class="line">  <span class="keyword">const</span> org = body.<span class="property">data</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// validate the response</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> org.<span class="property">id</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> you can print the value to the DevTools using <code>.then(console.log)</code> but a better idea is to print it to the Cypress Command Log with <code>.then(cy.log)</code>. See the video <a href="https://www.youtube.com/watch?v=SgTsCJCujNw">How to use Cypress cy.log command to output messages to the Command Log</a>.</p><p>In general, anything you get from the application page, or from another Cypress command must be used inside the <code>.then</code> callback to have its value set. I have two short videos explaining the above problem and how to write your tests correctly.</p><h3><span id="why-cylog-prints-null-or-undefined">Why cy.log prints null or undefined</span></h3><center><iframe width="560" height="315" src="https://www.youtube.com/embed/uGWWoq0ECY8" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h3><span id="when-to-use-cypress-then-callback-to-use-the-value">When To Use Cypress .Then Callback To Use The Value</span></h3><center><iframe width="560" height="315" src="https://www.youtube.com/embed/-aptS3yvqcc" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="fluent-programming">Fluent programming</span></h2><p>Now let&#39;s refactor the body of the <code>.then(...)</code> callback function. Currently it takes the <code>response</code> object from the intercept, runs multiple assertions against it, then yields the organization ID. Let&#39;s refactor it for clarity.</p><blockquote class="pullquote"><p>🎓 You can find the code from this section in my workshop &quot;Cypress Basics&quot; in the repo <a href="https://github.com/bahmutov/cypress-workshop-basics">bahmutov&#x2F;cypress-workshop-basics</a>.</p></blockquote><p>Our first attempt mimics the user&#39;s question.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;validates and processes the intercept object&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">intercept</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;postTodo&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">&#x27;new todo&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> completed = <span class="literal">false</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.new-todo&#x27;</span>).<span class="title function_">type</span>(title + <span class="string">&#x27;&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">intercept</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// get the field from the intercept object</span></span><br><span class="line">      <span class="keyword">const</span> &#123; statusCode, body &#125; = intercept.<span class="property">response</span></span><br><span class="line">      <span class="comment">// confirm the status code is 201</span></span><br><span class="line">      <span class="title function_">expect</span>(statusCode).<span class="property">to</span>.<span class="title function_">eq</span>(<span class="number">201</span>)</span><br><span class="line">      <span class="comment">// confirm some properties of the response data</span></span><br><span class="line">      <span class="title function_">expect</span>(body.<span class="property">title</span>).<span class="property">to</span>.<span class="title function_">equal</span>(title)</span><br><span class="line">      <span class="title function_">expect</span>(body.<span class="property">completed</span>).<span class="property">to</span>.<span class="title function_">equal</span>(completed)</span><br><span class="line">      <span class="comment">// return the field from the body object</span></span><br><span class="line">      <span class="keyword">return</span> body.<span class="property">id</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test is green.</p><p><img src="../images/net-cy/response.png" alt="The test validates the response"></p><p>Let&#39;s look at the code. First, we are only interested in the property <code>response</code> from the intercept (there are a lot more!). Thus let&#39;s extract it using <a href="https://on.cypress.io/its">cy.its</a> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;extracts the response property first&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">intercept</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;postTodo&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">&#x27;new todo&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> completed = <span class="literal">false</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.new-todo&#x27;</span>).<span class="title function_">type</span>(title + <span class="string">&#x27;&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; statusCode, body &#125; = response</span><br><span class="line">      <span class="comment">// confirm the status code is 201</span></span><br><span class="line">      <span class="title function_">expect</span>(statusCode).<span class="property">to</span>.<span class="title function_">eq</span>(<span class="number">201</span>)</span><br><span class="line">      <span class="comment">// confirm some properties of the response data</span></span><br><span class="line">      <span class="title function_">expect</span>(body.<span class="property">title</span>).<span class="property">to</span>.<span class="title function_">equal</span>(title)</span><br><span class="line">      <span class="title function_">expect</span>(body.<span class="property">completed</span>).<span class="property">to</span>.<span class="title function_">equal</span>(completed)</span><br><span class="line">      <span class="comment">// return the field from the body object</span></span><br><span class="line">      <span class="keyword">return</span> body.<span class="property">id</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>It runs the same way. If you need to debug the intercept object, click on the &quot;ITS&quot; command and see it in the DevTools console.</p><p><img src="../images/net-cy/its.png" alt="Print the entire intercept object to the DevTools console"></p><p>Let&#39;s look at our assertions. Right now they offer very little to the developer aside from printing their value. Let&#39;s add a message to each assertion to make it clearer.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; statusCode, body &#125; = response</span><br><span class="line">  <span class="comment">// confirm the status code is 201</span></span><br><span class="line">  <span class="title function_">expect</span>(statusCode, <span class="string">&#x27;status code&#x27;</span>).<span class="property">to</span>.<span class="title function_">eq</span>(<span class="number">201</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/net-cy/message.png" alt="Added message argument to the assertion"></p><p>Isn&#39;t the top assertion more informative than the next two? We can make it even better by using the specific Chai assertion for checking the property.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; body &#125; = response</span><br><span class="line">  <span class="comment">// confirm the status code is 201</span></span><br><span class="line">  <span class="title function_">expect</span>(response).<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">property</span>(<span class="string">&#x27;statusCode&#x27;</span>, <span class="number">201</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/net-cy/property.png" alt="The property assertion has even more information"></p><p>If Cypress <a href="https://on.cypress.io/then">.then</a> command returns undefined and has no other Cypress commands, then its original <em>subject</em> value gets passed to the next command automatically. Thus we can move the <code>statusCode</code> check into its own <code>.then</code> callback to separate it from the response object checks.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">wait</span>(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// confirm the status code is 201</span></span><br><span class="line">    <span class="title function_">expect</span>(response).<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">property</span>(<span class="string">&#x27;statusCode&#x27;</span>, <span class="number">201</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; body &#125; = response</span><br><span class="line">    <span class="comment">// confirm some properties of the response data</span></span><br><span class="line">    <span class="title function_">expect</span>(body.<span class="property">title</span>).<span class="property">to</span>.<span class="title function_">equal</span>(title)</span><br><span class="line">    <span class="title function_">expect</span>(body.<span class="property">completed</span>).<span class="property">to</span>.<span class="title function_">equal</span>(completed)</span><br><span class="line">    <span class="comment">// return the field from the body object</span></span><br><span class="line">    <span class="keyword">return</span> body.<span class="property">id</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>The output looks the same as before, but now we can notice that we only deal with the <code>body</code> property from the <code>response</code> object. Let&#39;s apply <code>cy.its</code> command, just like we extracted the <code>response</code> from the <code>intercept</code> object.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">wait</span>(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// confirm the status code is 201</span></span><br><span class="line">    <span class="title function_">expect</span>(response).<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">property</span>(<span class="string">&#x27;statusCode&#x27;</span>, <span class="number">201</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">body</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// confirm some properties of the response data</span></span><br><span class="line">    <span class="title function_">expect</span>(body.<span class="property">title</span>).<span class="property">to</span>.<span class="title function_">equal</span>(title)</span><br><span class="line">    <span class="title function_">expect</span>(body.<span class="property">completed</span>).<span class="property">to</span>.<span class="title function_">equal</span>(completed)</span><br><span class="line">    <span class="comment">// return the field from the body object</span></span><br><span class="line">    <span class="keyword">return</span> body.<span class="property">id</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/net-cy/body.png" alt="Using the body from the response"></p><p>Remember - the <code>cy.its</code> command automatically fails if the property does not exist on the object. It also accepts nested properties, so you could grab the <code>body</code> from the <code>intercept</code> object using <code>cy.wait(...).its(&#39;response.body&#39;)</code> syntax.</p><p>Now the last callback only deals with the properties of a single <code>body</code> object. We can confirm some of the properties using <code>deep.include</code> assertion.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">wait</span>(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// confirm the status code is 201</span></span><br><span class="line">    <span class="title function_">expect</span>(response).<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">property</span>(<span class="string">&#x27;statusCode&#x27;</span>, <span class="number">201</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">body</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// confirm some properties of the response data</span></span><br><span class="line">    <span class="title function_">expect</span>(body).<span class="property">to</span>.<span class="property">deep</span>.<span class="title function_">include</span>(&#123;</span><br><span class="line">      title,</span><br><span class="line">      completed</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// return the field from the body object</span></span><br><span class="line">    <span class="keyword">return</span> body.<span class="property">id</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>We cannot use <code>deep.equals</code> since we do not know the &quot;id&quot; property. For more assertion examples, see my <a href="https://glebbahmutov.com/cypress-examples/commands/assertions.html">Assertions</a> page.</p><p>Ok, so returning <code>body.id</code> at the end could use <code>cy.its</code> command, so let&#39;s move it out. Since we are not returning anything from the <code>.then(body =&gt; ...)</code> callback, the <code>body</code> wil be yielded to the next command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">wait</span>(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// confirm the status code is 201</span></span><br><span class="line">    <span class="title function_">expect</span>(response).<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">property</span>(<span class="string">&#x27;statusCode&#x27;</span>, <span class="number">201</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">body</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// confirm some properties of the response data</span></span><br><span class="line">    <span class="title function_">expect</span>(body).<span class="property">to</span>.<span class="property">deep</span>.<span class="title function_">include</span>(&#123;</span><br><span class="line">      title,</span><br><span class="line">      completed</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br></pre></td></tr></table></figure><p>We now have just the assertions inside <code>.then</code> callback. Thus we can use the BDD <code>should</code> assertion instead.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">wait</span>(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// confirm the status code is 201</span></span><br><span class="line">    <span class="title function_">expect</span>(response).<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">property</span>(<span class="string">&#x27;statusCode&#x27;</span>, <span class="number">201</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;deep.include&#x27;</span>, &#123; title, completed &#125;)</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/net-cy/should.png" alt="BDD should assertion"></p><p>I hope the above test code transformation has shown some of the beauty and power of the Cypress fluent syntax where we can chain the commands and the assertions.</p><p><strong>Aside:</strong> we cannot use the BDD should assertion to verify the status code property like <code>should(&#39;have.property&#39;, &#39;statusCode&#39;, 201)</code> fluent syntax because <code>have.property</code> is one of just a few assertions that <em>change</em> the subject to the property value, while we need to keep the <code>response</code> object.</p><h3><span id="bonus-cy-spok">Bonus: cy-spok</span></h3><p>The test looks good, but there is one improvement we can make. I like the Command Log to be as useful as possible. The standard Chai assertions are good, but <a href="https://github.com/bahmutov/cy-spok">cy-spok</a> makes them perfect.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spok <span class="keyword">from</span> <span class="string">&#x27;cy-spok&#x27;</span></span><br><span class="line">cy.<span class="title function_">wait</span>(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(</span><br><span class="line">    <span class="title function_">spok</span>(&#123;</span><br><span class="line">      <span class="attr">statusCode</span>: <span class="number">201</span></span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(</span><br><span class="line">    <span class="title function_">spok</span>(&#123;</span><br><span class="line">      title,</span><br><span class="line">      completed</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br></pre></td></tr></table></figure><p>Look at the Command Log output - isn&#39;t this super helpful?</p><p><img src="../images/net-cy/spok.png" alt="Using cy-spok to write assertions"></p><p>The plugin <code>cy-spok</code> is built on top of <a href="https://github.com/thlorenz/spok">spok</a> which is <em>really</em> good at asserting nested objects and even checking built-in predicates. For example, we do not know the <code>id</code> of the item, but we know it is a string. Let&#39;s write a single assertion to verify the properties we can inside the entire intercept object.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spok <span class="keyword">from</span> <span class="string">&#x27;cy-spok&#x27;</span></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;checks the response using cy-spok&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">intercept</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;postTodo&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">&#x27;new todo&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> completed = <span class="literal">false</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.new-todo&#x27;</span>).<span class="title function_">type</span>(title + <span class="string">&#x27;&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(</span><br><span class="line">      <span class="title function_">spok</span>(&#123;</span><br><span class="line">        <span class="attr">statusCode</span>: <span class="number">201</span>,</span><br><span class="line">        <span class="attr">body</span>: &#123;</span><br><span class="line">          title,</span><br><span class="line">          completed,</span><br><span class="line">          <span class="attr">id</span>: spok.<span class="property">string</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;body.id&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/net-cy/spok2.png" alt="Using cy-spok to verify the entire nested object"></p><p>Love it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently a user posted in the &lt;a href=&quot;https://gitter.im/cypress-io/cypress&quot;&gt;Cypress Gitter channel&lt;/a&gt; the following image and asked why
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Pick Tests To Run Using The Pull Request Text</title>
    <link href="https://glebbahmutov.com/blog/pick-tests-using-pull-request/"/>
    <id>https://glebbahmutov.com/blog/pick-tests-using-pull-request/</id>
    <published>2022-01-21T05:00:00.000Z</published>
    <updated>2022-01-24T15:02:25.384Z</updated>
    
    <content type="html"><![CDATA[<p>I have been looking closely at keeping the tests <a href="/blog/how-to-keep-cypress-tests-in-another-repo-with-circleci/" title="in a separate repo">in a separate repo</a> from the application. At Mercari US our frontend lives in its own repository, and triggers the Cypress tests in another repository using <a href="https://github.com/bahmutov/trigger-circleci-pipeline">trigger-circleci-pipeline</a> utility. We even report the test statuses back in the original repo using GitHub statuses via <a href="https://github.com/bahmutov/cypress-set-github-status">cypress-set-github-status</a> plugin. But there is a disconnect between opening a feature pull request and picking the tests to run. For speed, we run any changed specs in the test repo branch with the matching name, and then run all tests tagged <code>@sanity</code> (read how we tag the tests in the blog post <a href="/blog/tag-tests/" title="How To Tag And Run End-to-End Tests">How To Tag And Run End-to-End Tests</a>).</p><p>If the developer wants to run more tests, they can trigger the tests from the command line using the <a href="https://github.com/bahmutov/run-cy-on-ci">run-cy-on-ci</a> utility. For convenience, we also allow you to start a new test run via GitHub Actions manual workflow where you can pick the test tags to run via a web form.</p><p><img src="../images/tag-tests/flow-inputs.png" alt="Picking the test tags to run"></p><p>While the above approaches are ok, they are inconvenient. You have to trigger a <em>separate</em> test run, not tied to the original feature pull request. What if you could specify the tests to run <em>when opening</em> your pull request? This is what this blog post will show you.</p><h2><span id="the-application">The application</span></h2><p>For this blog post, I will use the <a href="https://github.com/bahmutov/todomvc-no-tests-vercel">bahmutov&#x2F;todomvc-no-tests-vercel</a> repo. On every pull request, a preview environment is deployed. The tests live in their own repo <a href="https://github.com/bahmutov/todomvc-tests-circleci">bahmutov&#x2F;todomvc-tests-circleci</a>. The tests are tagged, and let&#39;s use the utility <a href="https://github.com/bahmutov/find-cypress-specs">find-cypress-specs</a> to <a href="/blog/know-your-tests/" title="learn about them">learn about them</a>.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D find-cypress-specs</span><br><span class="line">+ find-cypress-specs@1.7.0</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;find-cypress-specs --tags&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="string">&quot;find-cypress-specs --names&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ npm run names</span><br><span class="line"></span><br><span class="line">&gt; todomvc-tests-circleci@1.0.0 names</span><br><span class="line">&gt; find-cypress-specs --names</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cypress/integration/last-spec.js (1 test)</span><br><span class="line">└─ last test [@sanity]</span><br><span class="line"></span><br><span class="line">cypress/integration/log-spec.js (2 tests)</span><br><span class="line">└─ Log [@log]</span><br><span class="line">  ├─ logs message on startup [@sanity]</span><br><span class="line">  └─ logs message when adding a todo</span><br><span class="line"></span><br><span class="line">cypress/integration/second-spec.js (1 test)</span><br><span class="line">└─ completes second item [@sanity, @user]</span><br><span class="line"></span><br><span class="line">cypress/integration/spec.js (2 tests)</span><br><span class="line">├─ works</span><br><span class="line">└─ has no visit logic</span><br><span class="line"></span><br><span class="line">cypress/integration/third-spec.js (1 test)</span><br><span class="line">└─ third test</span><br><span class="line"></span><br><span class="line">found 5 specs (7 tests)</span><br></pre></td></tr></table></figure><p>Let&#39;s look at the tags applied to the tests</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ npm run tags</span><br><span class="line"></span><br><span class="line">&gt; todomvc-tests-circleci@1.0.0 tags</span><br><span class="line">&gt; find-cypress-specs --tags</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Tag      Tests</span><br><span class="line">-------  -----</span><br><span class="line">@log     2</span><br><span class="line">@sanity  3</span><br><span class="line">@user    1</span><br></pre></td></tr></table></figure><p>These are the tags we want to the user to pick when they make a new pull request to change the TodoMVC application behavior. Plus of course, the user might want to run all the tests without any filtering.</p><h2><span id="application-pull-request">Application pull request</span></h2><p>Let&#39;s create a pull request template in the application repo. It should be named <a href="https://github.com/bahmutov/todomvc-no-tests-vercel/blob/main/.github/PULL_REQUEST_TEMPLATE.md">.github&#x2F;PULL_REQUEST_TEMPLATE.md</a> for GitHub to automatically use it when opening a new PR.</p><figure class="highlight md"><figcaption><span>.github/PULL_REQUEST_TEMPLATE.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Summary</span></span><br><span class="line"></span><br><span class="line"><span class="section">## Tests to run</span></span><br><span class="line"></span><br><span class="line">Please pick all tests you would like to run against this pull request</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> [ ] all tests</span><br><span class="line"><span class="bullet">-</span> [ ] tests tagged <span class="code">`@log`</span></span><br><span class="line"><span class="bullet">-</span> [ ] tests tagged <span class="code">`@sanity`</span></span><br><span class="line"><span class="bullet">-</span> [ ] tests tagged <span class="code">`@user`</span></span><br></pre></td></tr></table></figure><p>When a pull request is opened, the application gets deployed, triggering the <code>deployment_status</code> event. If the deployment has been successful, we trigger the tests pipeline in the tests repo. See the <a href="https://github.com/bahmutov/todomvc-no-tests-vercel/blob/main/.github/workflows/deploy.yml">deploy.yml</a> workflow for details, but we pass the URL to test, and the current commit SHA as test pipeline parameters to test the right thing</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export TEST_URL=$&#123;&#123; github.event.deployment_status.target_url &#125;&#125;</span><br><span class="line"></span><br><span class="line">npx trigger-circleci-pipeline \</span><br><span class="line">  --org bahmutov --project todomvc-tests-circleci --branch $&#123;BRANCH_NAME&#125; \</span><br><span class="line">  --parameters TEST_URL=$&#123;TEST_URL&#125;,TEST_BRANCH=$&#123;BRANCH_NAME&#125;,TEST_COMMIT=$&#123;GITHUB_SHA&#125;</span><br></pre></td></tr></table></figure><p>Sometimes we know the pull request number right away. In my situation, that number of unavailable. At least the head commit SHA was known, thus I could pass it to the test pipeline via <code>TEST_COMMIT=$&#123;GITHUB_SHA&#125;</code> parameter.</p><h2><span id="the-tests">The tests</span></h2><p>In the <a href="https://github.com/bahmutov/todomvc-tests-circleci/blob/main/.circleci/config.yml">bahmutov&#x2F;todomvc-tests-circleci CircleCI workflow</a> we receive the <code>TEST_</code> parameters and run Cypress tests against them. But we also install the <a href="https://github.com/bahmutov/grep-tests-from-pull-requests">grep-tests-from-pull-requests</a> plugin and configure it.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D grep-tests-from-pull-requests</span><br><span class="line">+ grep-tests-from-pull-requests@1.1.0</span><br></pre></td></tr></table></figure><p>In the plugin file we put the <code>grep-tests-from-pull-requests</code> first, before the <code>cypress-grep</code> plugin.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">async</span> (on, config) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">require</span>(<span class="string">&#x27;grep-tests-from-pull-requests&#x27;</span>)(on, config, &#123;</span><br><span class="line">    <span class="comment">// try to find checkbox lines in the pull request body with these tags</span></span><br><span class="line">    <span class="attr">tags</span>: [<span class="string">&#x27;@log&#x27;</span>, <span class="string">&#x27;@sanity&#x27;</span>, <span class="string">&#x27;@user&#x27;</span>],</span><br><span class="line">    <span class="comment">// repo with the pull request text to read</span></span><br><span class="line">    <span class="attr">owner</span>: <span class="string">&#x27;bahmutov&#x27;</span>,</span><br><span class="line">    <span class="attr">repo</span>: <span class="string">&#x27;todomvc-no-tests-vercel&#x27;</span>,</span><br><span class="line">    <span class="comment">// pass the pull request number in the above repo</span></span><br><span class="line">    <span class="comment">// we will grab the tests to run from the body of the pull request (if the number is known)</span></span><br><span class="line">    <span class="attr">pull</span>: config.<span class="property">env</span>.<span class="property">pullRequest</span>,</span><br><span class="line">    <span class="comment">// if the pull request number is unknown, pass the commit SHA</span></span><br><span class="line">    <span class="comment">// as a fallback. The plugin will try to find the PR with this head commit</span></span><br><span class="line">    <span class="attr">commit</span>: config.<span class="property">env</span>.<span class="property">testCommit</span>,</span><br><span class="line">    <span class="comment">// to get a private repo above, you might need a personal token</span></span><br><span class="line">    <span class="attr">token</span>: process.<span class="property">env</span>.<span class="property">PERSONAL_GH_TOKEN</span> || process.<span class="property">env</span>.<span class="property">GITHUB_TOKEN</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// https://github.com/bahmutov/cypress-grep</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;cypress-grep/src/plugin&#x27;</span>)(config)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In my situation the pull request number is unknown, thus the plugin will try to list all pulls requests in the repo <code>bahmutov/todomvc-no-tests-vercel</code> and find the pull request with the head commit equal to the given SHA. See the <a href="https://github.com/bahmutov/todomvc-tests-circleci/blob/main/.circleci/config.yml">full CircleCI workflow file</a> and the <a href="https://github.com/bahmutov/todomvc-tests-circleci/blob/main/cypress/plugins/index.js">cypress&#x2F;plugins&#x2F;index.js</a>.</p><h2><span id="a-pull-request">A pull request</span></h2><p>Let&#39;s open a new pull request in the application repo.</p><p><img src="../images/pick-tests-using-pull-request/pr.png" alt="The pull request gets deployed"></p><p>When opening the pull request, I checked the <code>@user</code> line. The triggered CircleCI pipeline in the <code>todomvc-tests-circleci</code> shows the correct tests to run by tag. It has found the pull request number 11, read the Markdown text, and found the line with checked box for tag <code>@user</code></p><p><img src="../images/pick-tests-using-pull-request/grep-tag.png" alt="The plugin correctly found the tests we marked to run"></p><p>Only a single spec file with a single test has executed. Now let&#39;s say we want to execute all tests. We check the box <code>all tests</code> and push an empty commit.</p><p><img src="../images/pick-tests-using-pull-request/run-all-check.png" alt="Checked all tests box before pushing a new commit"></p><p>The option &quot;all: true&quot; overwrites all other options and all tests will execute</p><p><img src="../images/pick-tests-using-pull-request/all.png" alt="All tests have executed"></p><h3><span id="trigger-workflow-by-clicking-on-the-checkbox">Trigger workflow by clicking on the checkbox</span></h3><p><strong>Tip:</strong> for &quot;normal&quot; GitHub workflows, you can re-trigger the workflow when clicking or clearing the checkboxes using the pull request event with custom activation types:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">pr</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># run tests when the user opened / reopened a PR</span></span><br><span class="line">  <span class="comment"># or pushed a new commit (synchronize type)</span></span><br><span class="line">  <span class="comment"># and also run the selected tests when the user possible</span></span><br><span class="line">  <span class="comment"># checked a box with the type of the tests to run</span></span><br><span class="line">  <span class="comment"># https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">opened</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">synchronize</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">reopened</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">edited</span></span><br></pre></td></tr></table></figure><p>Nice!</p><p>Since each checkbox change produces &quot;edited&quot; event and triggers the workflow, I suggest if you want to check and uncheck multiple boxes to edit the pull request text then click &quot;Save&quot; instead of clicking the individual checkboxes.</p><h2><span id="bonus-1-status-checks">Bonus 1: status checks</span></h2><p>We want to see the feedback on each application pull request right there in the application pull request. Using <a href="https://github.com/bahmutov/cypress-set-github-status">cypress-set-github-status</a> plugin, you can report the Cypress test statuses back on the original commit. The plugin is set up very similarly to the <code>grep-tests-from-pull-requests</code> plugin. In the Cypress plugins file, point at the original repository and pass the commit and the token to set the status.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// when we are done, post the status to GitHub</span></span><br><span class="line"><span class="comment">// application repo, using the passed commit SHA</span></span><br><span class="line"><span class="comment">// https://github.com/bahmutov/cypress-set-github-status</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;cypress-set-github-status&#x27;</span>)(on, config, &#123;</span><br><span class="line">  <span class="attr">owner</span>: <span class="string">&#x27;bahmutov&#x27;</span>,</span><br><span class="line">  <span class="attr">repo</span>: <span class="string">&#x27;todomvc-no-tests-vercel&#x27;</span>,</span><br><span class="line">  <span class="attr">commit</span>: config.<span class="property">env</span>.<span class="property">testCommit</span> || process.<span class="property">env</span>.<span class="property">TEST_COMMIT</span>,</span><br><span class="line">  <span class="attr">token</span>: process.<span class="property">env</span>.<span class="property">GITHUB_TOKEN</span> || process.<span class="property">env</span>.<span class="property">PERSONAL_GH_TOKEN</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>In the pull request I have used, the statuses are displayed using my GitHub profile, since I am using my personal GH token.</p><p><img src="../images/pick-tests-using-pull-request/statuses.png" alt="The Cypress test statuses displayed on the original application PR"></p><p>You can see the status checks for yourself in the PR <a href="https://github.com/bahmutov/todomvc-no-tests-vercel/pull/11">#11</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have been looking closely at keeping the tests &lt;a href=&quot;/blog/how-to-keep-cypress-tests-in-another-repo-with-circleci/&quot; title=&quot;in a sep
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="advice" scheme="https://glebbahmutov.com/blog/tags/advice/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>Visit Non-HTML Page</title>
    <link href="https://glebbahmutov.com/blog/visit-non-html-page/"/>
    <id>https://glebbahmutov.com/blog/visit-non-html-page/</id>
    <published>2022-01-20T05:00:00.000Z</published>
    <updated>2022-01-20T15:06:53.327Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine you have a REST API endpoint that returns a JSON object. Can you see that JSON response in a Cypress test? In the blog post <a href="/blog/test-plain-or-markdown-file/" title="Test Plain Or Markdown File Using Cypress">Test Plain Or Markdown File Using Cypress</a> I have shown how to request a plain text resource using <a href="https://on.cypress.io/request">cy.request</a> and write the received response into the empty application document using <code>document.write</code>. In this blog post I will show an alternative approach using <a href="https://on.cypress.io/visit">cy.visit</a> + <a href="https://on.cypress.io/intercept">cy.intercept</a> commands.</p><blockquote class="pullquote"><p>🎁 You can find the code shown in this blog post in my <a href="https://github.com/bahmutov/cypress-workshop-basics">Cypress Basics Workshop</a>.</p></blockquote><p>Let&#39;s say we set our backend with the data items from the fixture file. The initial code looks like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">fixture</span>(<span class="string">&#x27;two-items&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">beforeEach</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// by using &quot;function () &#123;&#125;&quot; callback we can access</span></span><br><span class="line">  <span class="comment">// the alias created in the previous hook using &quot;this.&lt;name&gt;&quot;</span></span><br><span class="line">  cy.<span class="title function_">task</span>(<span class="string">&#x27;resetData&#x27;</span>, &#123; <span class="attr">todos</span>: <span class="variable language_">this</span>.<span class="property">todos</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Now we want to visit the <code>/todos/1</code> resource to confirm the JSON is returned.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;tries to visit JSON resource&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/todos/1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We get an error.</p><p><img src="../images/visit-non-html-page/visit-json.png" alt="Trying to visit a JSON resource"></p><p>Hmm, how do we &quot;convince&quot; Cypress that the received response should be treated as HTML text? By intercepting and overwriting the response content type header!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;visits the todo JSON response&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  cy.<span class="title function_">intercept</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/todos/*&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">    req.<span class="title function_">continue</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">headers</span>[<span class="string">&#x27;content-type&#x27;</span>].<span class="title function_">includes</span>(<span class="string">&#x27;application/json&#x27;</span>)) &#123;</span><br><span class="line">        res.<span class="property">headers</span>[<span class="string">&#x27;content-type&#x27;</span>] = <span class="string">&#x27;text/html&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      req.<span class="property">body</span> = <span class="string">`&lt;body&gt;&lt;pre&gt;<span class="subst">$&#123;res.body&#125;</span>&lt;/pre&gt;&lt;/body&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).<span class="title function_">as</span>(<span class="string">&#x27;todo&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/todos/1&#x27;</span>)</span><br><span class="line">  <span class="comment">// make sure you intercept has worked</span></span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@todo&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above works.</p><p><img src="../images/visit-non-html-page/visit-html.png" alt="Treat JSON response as HTML"></p><p>I like showing the response using this approach because it becomes visible in the test video, and can be captured using <a href="https://on.cypress.io/screenshot">cy.screenshot</a> command.</p><p>Let&#39;s confirm the title of the first todo is shown on the page. Because we have used <code>function () &#123; ... &#125;</code> syntax as the test callback, we can access the alias <code>todos</code> using <code>this.todos</code> inside the test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;/todos/1&#x27;</span>)</span><br><span class="line"><span class="comment">// make sure you intercept has worked</span></span><br><span class="line">cy.<span class="title function_">wait</span>(<span class="string">&#x27;@todo&#x27;</span>)</span><br><span class="line"><span class="comment">// check the text shown in the browser</span></span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="variable language_">this</span>.<span class="property">todos</span>[<span class="number">0</span>].<span class="property">title</span>)</span><br></pre></td></tr></table></figure><p>If you hover over the <code>CONTAINS</code> command, notice the found DOM element on the page is not highlighted.</p><p><img src="../images/visit-non-html-page/contains.png" alt="The found element is not highlighted"></p><p>This is because the response does not include the <code>&lt;body&gt;</code> element. Let&#39;s wrap our JSON response in some markup and make it prettier.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">intercept</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/todos/*&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">  req.<span class="title function_">continue</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">headers</span>[<span class="string">&#x27;content-type&#x27;</span>].<span class="title function_">includes</span>(<span class="string">&#x27;application/json&#x27;</span>)) &#123;</span><br><span class="line">      res.<span class="property">headers</span>[<span class="string">&#x27;content-type&#x27;</span>] = <span class="string">&#x27;text/html&#x27;</span></span><br><span class="line">      <span class="keyword">const</span> text = <span class="string">`&lt;body&gt;&lt;pre&gt;<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(</span></span></span><br><span class="line"><span class="subst"><span class="string">        res.body,</span></span></span><br><span class="line"><span class="subst"><span class="string">        <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="subst"><span class="string">        <span class="number">2</span></span></span></span><br><span class="line"><span class="subst"><span class="string">      )&#125;</span>&lt;/pre&gt;&lt;/body&gt;`</span></span><br><span class="line">      res.<span class="title function_">send</span>(text)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).<span class="title function_">as</span>(<span class="string">&#x27;todo&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Now the element is highlighted correctly.</p><p><img src="../images/visit-non-html-page/json-text.png" alt="The found element is highlighted if we put a proper BODY markup"></p><p>The last part I want to show is how to validate the URL using regular expression named captured groups. The URL should have the todo ID &quot;1&quot;. We could split the pathname and get the id by index, but that is hard to maintain.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">location</span>(<span class="string">&#x27;pathname&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;/todos/&#x27;</span>)</span><br><span class="line">  <span class="comment">// we have a string, which we can split by &#x27;/&#x27;</span></span><br><span class="line">  .<span class="title function_">invoke</span>(<span class="string">&#x27;split&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// and get the 3rd item in the array [&quot;&quot;, &quot;todos&quot;, &quot;1&quot;]</span></span><br><span class="line">  .<span class="title function_">its</span>(<span class="number">2</span>)</span><br><span class="line">  <span class="comment">// and verify this is the same as the item ID</span></span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;eq&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure><p>If the resources move from <code>/todos/1</code> to <code>/api/todos/1</code> finding all the test places where we get the ID part is going to be tricky. Instead let&#39;s use a regular expression to grab the ID via <a href="https://javascript.info/regexp-groups">named capture group</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">location</span>(<span class="string">&#x27;pathname&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">  <span class="comment">// use named capture group to get the ID from the string</span></span><br><span class="line">  .<span class="title function_">invoke</span>(<span class="string">&#x27;match&#x27;</span>, <span class="regexp">/\/todos\/(?&lt;id&gt;\d+)/</span>)</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;groups.id&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/visit-non-html-page/id.png" alt="Use a named capture group to extract the ID from the URL"></p><p>Beautiful.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine you have a REST API endpoint that returns a JSON object. Can you see that JSON response in a Cypress test? In the blog post &lt;a hr
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Know Your Tests</title>
    <link href="https://glebbahmutov.com/blog/know-your-tests/"/>
    <id>https://glebbahmutov.com/blog/know-your-tests/</id>
    <published>2022-01-14T05:00:00.000Z</published>
    <updated>2022-01-14T00:10:08.253Z</updated>
    
    <content type="html"><![CDATA[<p>If you have a repository with large number of Cypress specs, pretty soon they get out of control. What if you have 200 tests, how do you find which tests cover what feature? How do you run all the tests testing X or Y? I the blog post <a href="/blog/tag-tests/" title="How To Tag And Run End-to-End Tests">How To Tag And Run End-to-End Tests</a> I have described how we organize, tag, and run end-to-end tests at Mercari US. In this blog post I will demo a little CLI utility <a href="https://github.com/bahmutov/find-cypress-specs">find-cypress-specs</a> I use to keep track of the tests in the project.</p><blockquote class="pullquote"><p>📦 You can find the example repository with the specs I am using in this blog post at <a href="https://github.com/bahmutov/test-todomvc-using-app-actions">bahmutov&#x2F;test-todomvc-using-app-actions</a>.</p></blockquote><h2><span id="print-just-the-specs">Print just the specs</span></h2><p>Cypress finds its integration specs inside <code>cypress/integration</code> folder - but you might have renamed it into <code>tests/e2e</code>. So just to find the spec files requires looking at the <code>cypress.json</code> file and using the config settings to glob for files. For example, in my project I ignore the <code>utils.js</code> and some other files.</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;ignoreTestFiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;*.page.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;utils.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;*.d.ts&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>By default <code>find-cypress-specs</code> simply finds spec files following the settings from my configuration file</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs</span><br><span class="line">cypress/integration/adding-spec.js,cypress/integration/clear-completed-spec.js,</span><br><span class="line">cypress/integration/complete-all-spec.js,cypress/integration/editing-spec.js,</span><br><span class="line">cypress/integration/item-spec.js,cypress/integration/persistence-spec.js,</span><br><span class="line">cypress/integration/routing-spec.js,cypress/integration/spec.js</span><br></pre></td></tr></table></figure><p>What if we want to see the tests and the suites inside each spec file?</p><h2><span id="print-all-tests">Print all tests</span></h2><p>Let&#39;s get an idea of what is inside each spec file. Using <code>find-cypress-specs --names</code> get the tests and their tags:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --names</span><br><span class="line"></span><br><span class="line">cypress/integration/adding-spec.js (7 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ New Todo [@adding]</span><br><span class="line">  │ ├─ should allow me to add todo items [@regression]</span><br><span class="line">  │ ├─ adds items [@sanity, @regression]</span><br><span class="line">  │ ├─ should clear text input field when an item is added [@regression]</span><br><span class="line">  │ ├─ should append new items to the bottom of the list</span><br><span class="line">  │ ├─ should trim text input [@regression]</span><br><span class="line">  │ └─ should show #main and #footer when items added</span><br><span class="line">  └─ Adds items (spy example)</span><br><span class="line">    └─ calls inform</span><br><span class="line"></span><br><span class="line">cypress/integration/clear-completed-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Clear completed button [@complete]</span><br><span class="line">    ├─ should display the correct text</span><br><span class="line">    ├─ should remove completed items when clicked [@sanity, @regression]</span><br><span class="line">    └─ should be hidden when there are no items that are completed [@regression]</span><br><span class="line"></span><br><span class="line">cypress/integration/complete-all-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Mark all as completed [@complete]</span><br><span class="line">    ├─ should allow me to mark all items as completed [@regression]</span><br><span class="line">    ├─ should allow me to clear the complete state of all items [@sanity, @regression]</span><br><span class="line">    └─ complete all checkbox should update state when items are completed / cleared</span><br><span class="line"></span><br><span class="line">cypress/integration/editing-spec.js (5 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Editing [@editing]</span><br><span class="line">    ├─ should hide other controls when editing</span><br><span class="line">    ├─ should save edits on blur [@sanity]</span><br><span class="line">    ├─ should trim entered text</span><br><span class="line">    ├─ should remove the item if an empty text string was entered</span><br><span class="line">    └─ should cancel edits on escape</span><br><span class="line"></span><br><span class="line">cypress/integration/item-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Item [@item]</span><br><span class="line">    ├─ should allow me to mark items as complete [@sanity, @regression]</span><br><span class="line">    ├─ should allow me to un-mark items as complete [@regression]</span><br><span class="line">    └─ should allow me to edit an item</span><br><span class="line"></span><br><span class="line">cypress/integration/persistence-spec.js (1 test)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Persistence [@persistence]</span><br><span class="line">    └─ should persist its data [@sanity, @regression]</span><br><span class="line"></span><br><span class="line">cypress/integration/routing-spec.js (5 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Routing [@routing]</span><br><span class="line">    ├─ should allow me to display active items [@regression]</span><br><span class="line">    ├─ should respect the back button</span><br><span class="line">    ├─ should allow me to display completed items [@sanity, @regression]</span><br><span class="line">    ├─ should allow me to display all items [@regression]</span><br><span class="line">    └─ should highlight the currently applied filter</span><br><span class="line"></span><br><span class="line">cypress/integration/spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ When page is initially opened [@regression]</span><br><span class="line">  │ └─ should focus on the todo input field</span><br><span class="line">  ├─ No Todos</span><br><span class="line">  │ └─ should hide #main and #footer [@regression]</span><br><span class="line">  └─ Counter</span><br><span class="line">    └─ should display the current number of todo items [@sanity, @regression]</span><br><span class="line"></span><br><span class="line">found 8 specs (30 tests)</span><br></pre></td></tr></table></figure><p>Ughh, the line height on my blog separates the individual lines, in the terminal it looks much better, maybe I should add <a href="https://github.com/bahmutov/find-cypress-specs/issues/5">some color</a></p><p><img src="../images/know-your-tests/terminal.png" alt="find-cypress-specs --names output in the terminal"></p><p>Great, what if we had some tests <a href="/blog/cypress-test-statuses/" title="pending">pending</a>? The <code>find-cypress-specs</code> would tell us.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cypress/integration/spec.js (3 tests, 1 pending)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ When page is initially opened [@regression]</span><br><span class="line">  │ └─ should focus on the todo input field</span><br><span class="line">  ├─ No Todos</span><br><span class="line">  │ └─ should hide #main and #footer [@regression]</span><br><span class="line">  └─ Counter</span><br><span class="line">    └⊙ should display the current number of todo items [@sanity, @regression]</span><br><span class="line"></span><br><span class="line">found 8 specs (30 tests, 1 pending)</span><br></pre></td></tr></table></figure><p>Each skipped block &#x2F; test is marked and the count is shown. Pending tests are warning signs: they are either flaky or test a feature that is not working. Like commented out code, they eventually become a historical anomaly and must be removed.</p><h2><span id="print-and-count-the-tags">Print and count the tags</span></h2><p>Some tests have their own tags, and the suites might have their own tags. The suite tags apply to the tests inside them. We can count the tags across all specs and report the numbers.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --tags</span><br><span class="line"></span><br><span class="line">Tag           Tests</span><br><span class="line">------------  -----</span><br><span class="line">@adding       6</span><br><span class="line">@complete     6</span><br><span class="line">@editing      5</span><br><span class="line">@item         3</span><br><span class="line">@persistence  1</span><br><span class="line">@regression   17</span><br><span class="line">@routing      5</span><br><span class="line">@sanity       8</span><br></pre></td></tr></table></figure><p>Nice, we have tags covering individual features like <code>@editing</code> and <code>@routing</code>, and a few coverage sets of tests like <code>@sanity</code> and <code>@coverage</code>. These numbers are <em>effective</em> tags - if a tag is present on the parent suite, it applies and counts towards each test inside.</p><h2><span id="tips-for-finding-tests">Tips for finding tests</span></h2><p>I love looking at tests using <a href="https://github.com/bahmutov/find-cypress-specs">find-cypress-specs</a>.</p><h3><span id="find-all-tests-with-a-tag">Find all tests with a tag</span></h3><p>To only show the tests tagged <code>@sanity</code>, use the <code>grep</code> CLI utility.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --names | grep @sanity</span><br><span class="line">  │ ├─ adds items [@sanity]</span><br><span class="line">    ├─ should remove completed items when clicked [@sanity]</span><br><span class="line">    ├─ should allow me to clear the complete state of all items [@sanity]</span><br><span class="line">    ├─ should save edits on blur [@sanity]</span><br><span class="line">    ├─ should allow me to mark items as complete [@sanity]</span><br><span class="line">    └─ should persist its data [@sanity]</span><br><span class="line">    ├─ should allow me to display completed items [@sanity]</span><br><span class="line">    └─ should display the current number of todo items [@sanity]</span><br></pre></td></tr></table></figure><p>To count the number of <code>@sanity</code> tests, pipe the output from the <code>grep</code> CLI utility to <code>wc</code> utility</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --names | grep @sanity | wc -l</span><br><span class="line">       8</span><br></pre></td></tr></table></figure><p>I must say this is very crude way, since it only supports tags on the test level. Follow my work in the repository to see if I release a better implementation.</p><h3><span id="find-test-with-its-suite">Find test with its suite</span></h3><p>To find a test by name and print its suite and file, use <code>grep -B &lt;N&gt;</code> to print N text lines before the match.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --names | grep &#x27;adds items&#x27; -B 4</span><br><span class="line">cypress/integration/adding-spec.js (7 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ New Todo [@adding]</span><br><span class="line">  │ ├─ should allow me to add todo items</span><br><span class="line">  │ ├─ adds items [@sanity]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you have a repository with large number of Cypress specs, pretty soon they get out of control. What if you have 200 tests, how do you 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>How To Tag And Run End-to-End Tests</title>
    <link href="https://glebbahmutov.com/blog/tag-tests/"/>
    <id>https://glebbahmutov.com/blog/tag-tests/</id>
    <published>2022-01-10T05:00:00.000Z</published>
    <updated>2022-01-13T20:32:03.677Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s say you have hundreds of end-to-end tests (this is our current situation at Mercari US). Running the tests in parallel makes the test run <a href="/blog/parallel-cypress-tests-gh-action/" title="faster">faster</a>, but there is a problem. If someone inside the organization wants to change how some internal service operates, or changes a particular database field, you do not want to run all the tests. Or at least, you want to run the tests for that product area first to provide fast and useful feedback. This is how I organize and tag my end-to-end tests and run them.</p><blockquote class="pullquote"><p>🧰 I will be using the repo <a href="https://github.com/bahmutov/test-todomvc-using-app-actions">bahmutov&#x2F;test-todomvc-using-app-actions</a> as my example. It only has about 30 tests, but the lessons scale even better when the number of tests is large.</p></blockquote><!-- toc --><ul><li><a href="#organize-the-tests-by-feature">Organize the tests by feature</a></li><li><a href="#run-any-changed-tests-first">Run any changed tests first</a></li><li><a href="#the-sanity-tag">The sanity tag</a></li><li><a href="#all-tests">All tests</a></li><li><a href="#run-all-tests-with-a-tag-on-ci">Run all tests with a tag on CI</a><ul><li><a href="#circleci">CircleCI</a></li><li><a href="#github-actions">GitHub Actions</a></li><li><a href="#separate-jobs">Separate jobs</a></li></ul></li><li><a href="#the-regression-tag">The regression tag</a></li><li><a href="#the-final-tag-organization">The final tag organization</a></li><li><a href="#bonus-1-github-triggers-circleci">Bonus 1: GitHub triggers CircleCI</a></li><li><a href="#bonus-2-when-you-have-a-lot-of-test-tags">Bonus 2: When you have a lot of test tags</a></li></ul><!-- tocstop --><h2><span id="organize-the-tests-by-feature">Organize the tests by feature</span></h2><p>The first thing I do is to split a single long spec file into separate spec files. Each spec file is focused on a particular application feature. I try to keep the spec duration under two minutes, and I <a href="/blog/split-spec/" title="split long tests">split long tests</a> to make them easier to run. Currently I have 8 specs in the project:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs</span><br><span class="line">cypress/integration/adding-spec.js,cypress/integration/clear-completed-spec.js,</span><br><span class="line">cypress/integration/complete-all-spec.js,cypress/integration/editing-spec.js,</span><br><span class="line">cypress/integration/item-spec.js,cypress/integration/persistence-spec.js,</span><br><span class="line">cypress/integration/routing-spec.js,cypress/integration/spec.js</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> I will use <a href="https://github.com/bahmutov/find-cypress-specs">find-cypress-specs</a> utility to print specs and test names.</p><p>In each spec file, I add a tag to the suite of tests using the <a href="https://github.com/cypress-io/cypress-grep">cypress-grep</a> convention. For example, the tests related to routing are tagged <code>@routing</code>. The <code>@</code> character has no special meaning, it just makes it simpler to find it in the source code.</p><figure class="highlight js"><figcaption><span>cypress/integration/routing-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;TodoMVC&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">context</span>(<span class="string">&#x27;Routing&#x27;</span>, &#123; <span class="attr">tags</span>: <span class="string">&#x27;@routing&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;should allow me to display active items&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;should respect the back button&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I can see all tests and their tags using <a href="https://github.com/bahmutov/find-cypress-specs">find-cypress-specs</a> with <code>--names</code> argument.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --names</span><br><span class="line"></span><br><span class="line">cypress/integration/adding-spec.js (7 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ New Todo [@adding]</span><br><span class="line">  │ ├─ should allow me to add todo items</span><br><span class="line">  │ ├─ adds items</span><br><span class="line">  │ ├─ should clear text input field when an item is added</span><br><span class="line">  │ ├─ should append new items to the bottom of the list</span><br><span class="line">  │ ├─ should trim text input</span><br><span class="line">  │ └─ should show #main and #footer when items added</span><br><span class="line">  └─ Adds items (spy example)</span><br><span class="line">    └─ calls inform</span><br><span class="line"></span><br><span class="line">cypress/integration/clear-completed-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Clear completed button [@complete]</span><br><span class="line">    ├─ should display the correct text</span><br><span class="line">    ├─ should remove completed items when clicked</span><br><span class="line">    └─ should be hidden when there are no items that are completed</span><br><span class="line"></span><br><span class="line">cypress/integration/complete-all-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Mark all as completed [@complete]</span><br><span class="line">    ├─ should allow me to mark all items as completed</span><br><span class="line">    ├─ should allow me to clear the complete state of all items</span><br><span class="line">    └─ complete all checkbox should update state when items are completed / cleared</span><br><span class="line"></span><br><span class="line">cypress/integration/editing-spec.js (5 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Editing [@editing]</span><br><span class="line">    ├─ should hide other controls when editing</span><br><span class="line">    ├─ should save edits on blur</span><br><span class="line">    ├─ should trim entered text</span><br><span class="line">    ├─ should remove the item if an empty text string was entered</span><br><span class="line">    └─ should cancel edits on escape</span><br><span class="line"></span><br><span class="line">cypress/integration/item-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Item [@item]</span><br><span class="line">    ├─ should allow me to mark items as complete</span><br><span class="line">    ├─ should allow me to un-mark items as complete</span><br><span class="line">    └─ should allow me to edit an item</span><br><span class="line"></span><br><span class="line">cypress/integration/persistence-spec.js (1 test)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Persistence [@persistence]</span><br><span class="line">    └─ should persist its data</span><br><span class="line"></span><br><span class="line">cypress/integration/routing-spec.js (5 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Routing [@routing]</span><br><span class="line">    ├─ should allow me to display active items</span><br><span class="line">    ├─ should respect the back button</span><br><span class="line">    ├─ should allow me to display completed items</span><br><span class="line">    ├─ should allow me to display all items</span><br><span class="line">    └─ should highlight the currently applied filter</span><br><span class="line"></span><br><span class="line">cypress/integration/spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ When page is initially opened</span><br><span class="line">  │ └─ should focus on the todo input field</span><br><span class="line">  ├─ No Todos</span><br><span class="line">  │ └─ should hide #main and #footer</span><br><span class="line">  └─ Counter</span><br><span class="line">    └─ should display the current number of todo items</span><br><span class="line"></span><br><span class="line">found 8 specs and 30 tests</span><br></pre></td></tr></table></figure><p>Not all tests need tags. For example, the last <code>spec.js</code> collects miscellaneous tests without any tags.</p><h2><span id="run-any-changed-tests-first">Run any changed tests first</span></h2><p>I have shown how to run the changed specs first, see <a href="/blog/faster-ci-feedback/" title="GitHub Actions post">GitHub Actions post</a> or <a href="/blog/faster-ci-feedback-on-circleci/" title="CircleCI post">CircleCI post</a>. In my example application, I am using CircleCI, here is how I run the changed specs before running all tests. You can find the full CircleCI config file at <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/blob/master/circle.yml">circle.yml</a>.</p><figure class="highlight yml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="comment"># https://github.com/cypress-io/circleci-orb</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@1.29.0</span></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Run</span> <span class="string">changed</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            # stop if on master branch - all tests should run there</span></span><br><span class="line"><span class="string">            if [ &quot;$CIRCLE_BRANCH&quot; = &quot;master&quot; ]; then</span></span><br><span class="line"><span class="string">              echo &quot;Default branch, will run all tests&quot;</span></span><br><span class="line"><span class="string">              exit 0</span></span><br><span class="line"><span class="string">            fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">            <span class="comment"># be careful about counting the lines</span></span><br><span class="line">            <span class="string">specsLines=$(git</span> <span class="string">diff</span> <span class="string">--name-only</span> <span class="string">--diff-filter=AMR</span> <span class="string">origin/master</span> <span class="string">|</span> &#123; <span class="string">grep</span> <span class="string">cypress/integration</span> <span class="string">||</span> <span class="literal">true</span><span class="string">;</span> &#125;<span class="string">)</span></span><br><span class="line">            <span class="string">n=$(echo</span> <span class="string">$specsLines</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">&#x27;/^\s*$/d&#x27;</span> <span class="string">|</span> <span class="string">wc</span> <span class="string">-l</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-d</span> <span class="string">&#x27; &#x27;</span><span class="string">)</span></span><br><span class="line">            <span class="string">specs=$(echo</span> <span class="string">$specsLines</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">&#x27;/^\s*$/d&#x27;</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">&#x27;\n&#x27;</span> <span class="string">&#x27;,&#x27;</span><span class="string">)</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;Changed and added $&#123;n&#125; Cypress specs&quot;</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">$&#123;specs&#125;</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="string">if</span> [ <span class="string">$</span>&#123;<span class="string">n</span>&#125; <span class="string">-lt</span> <span class="number">1</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">              <span class="string">echo</span> <span class="string">&quot;No Cypress specs changed, exiting...&quot;</span></span><br><span class="line">              <span class="string">exit</span> <span class="number">0</span></span><br><span class="line">            <span class="string">fi</span></span><br><span class="line">            <span class="comment"># we have to form the Cypress run command ourselves</span></span><br><span class="line">            <span class="string">npx</span> <span class="string">cypress</span> <span class="string">run</span> <span class="string">--spec</span> <span class="string">$&#123;specs&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Run</span> <span class="string">all</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">requires:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Run</span> <span class="string">changed</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">build:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">print-tests</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>If we push a branch <code>change1</code> where we just change something in <code>cypress/integration/routing.js</code> file, we see that test executed first.</p><p><img src="../images/tag-tests/workflow.png" alt="Workflow with two jobs"></p><p>Inside the &quot;Run changed tests&quot; job, Cypress shows the specs it is about to execute.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Changed and added 1 Cypress specs</span><br><span class="line">cypress/integration/complete-all-spec.js,</span><br><span class="line">...</span><br><span class="line">====================================================================================================</span><br><span class="line"></span><br><span class="line">  (Run Starting)</span><br><span class="line"></span><br><span class="line">  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">  │ Cypress:        9.2.0                                                                          │</span><br><span class="line">  │ Browser:        Electron 94 (headless)                                                         │</span><br><span class="line">  │ Node Version:   v12.19.0 (/usr/local/bin/node)                                                 │</span><br><span class="line">  │ Specs:          1 found (complete-all-spec.js)                                                 │</span><br><span class="line">  │ Searched:       cypress/integration/complete-all-spec.js,                                      │</span><br><span class="line">  └────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>Running the changed tests first gives us fast feedback. If the changed tests pass, all tests execute to confirm the application works. Notice that running the changed tests is much faster compared to running all tests.</p><p><img src="../images/tag-tests/timing.png" alt="The changed specs job is shorter than running all specs job"></p><h2><span id="the-sanity-tag">The sanity tag</span></h2><p>As the number of specs grows, running all tests on every pull request becomes a burden on the infrastructure and CI resources. Thus I recommend creating a small set of sanity tests, with one test per feature. We can tag these tests <code>@sanity</code> and run on every pull request by default. Here are the tagged tests</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --names</span><br><span class="line"></span><br><span class="line">cypress/integration/adding-spec.js (7 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ New Todo [@adding]</span><br><span class="line">  │ ├─ should allow me to add todo items</span><br><span class="line">  │ ├─ adds items [@sanity]</span><br><span class="line">  │ ├─ should clear text input field when an item is added</span><br><span class="line">  │ ├─ should append new items to the bottom of the list</span><br><span class="line">  │ ├─ should trim text input</span><br><span class="line">  │ └─ should show #main and #footer when items added</span><br><span class="line">  └─ Adds items (spy example)</span><br><span class="line">    └─ calls inform</span><br><span class="line"></span><br><span class="line">cypress/integration/clear-completed-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Clear completed button [@complete]</span><br><span class="line">    ├─ should display the correct text</span><br><span class="line">    ├─ should remove completed items when clicked [@sanity]</span><br><span class="line">    └─ should be hidden when there are no items that are completed</span><br><span class="line"></span><br><span class="line">cypress/integration/complete-all-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Mark all as completed [@complete]</span><br><span class="line">    ├─ should allow me to mark all items as completed</span><br><span class="line">    ├─ should allow me to clear the complete state of all items [@sanity]</span><br><span class="line">    └─ complete all checkbox should update state when items are completed / cleared</span><br><span class="line"></span><br><span class="line">cypress/integration/editing-spec.js (5 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Editing [@editing]</span><br><span class="line">    ├─ should hide other controls when editing</span><br><span class="line">    ├─ should save edits on blur [@sanity]</span><br><span class="line">    ├─ should trim entered text</span><br><span class="line">    ├─ should remove the item if an empty text string was entered</span><br><span class="line">    └─ should cancel edits on escape</span><br><span class="line"></span><br><span class="line">cypress/integration/item-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Item [@item]</span><br><span class="line">    ├─ should allow me to mark items as complete [@sanity]</span><br><span class="line">    ├─ should allow me to un-mark items as complete</span><br><span class="line">    └─ should allow me to edit an item</span><br><span class="line"></span><br><span class="line">cypress/integration/persistence-spec.js (1 test)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Persistence [@persistence]</span><br><span class="line">    └─ should persist its data [@sanity]</span><br><span class="line"></span><br><span class="line">cypress/integration/routing-spec.js (5 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Routing [@routing]</span><br><span class="line">    ├─ should allow me to display active items</span><br><span class="line">    ├─ should respect the back button</span><br><span class="line">    ├─ should allow me to display completed items [@sanity]</span><br><span class="line">    ├─ should allow me to display all items</span><br><span class="line">    └─ should highlight the currently applied filter</span><br><span class="line"></span><br><span class="line">cypress/integration/spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ When page is initially opened</span><br><span class="line">  │ └─ should focus on the todo input field</span><br><span class="line">  ├─ No Todos</span><br><span class="line">  │ └─ should hide #main and #footer</span><br><span class="line">  └─ Counter</span><br><span class="line">    └─ should display the current number of todo items [@sanity]</span><br><span class="line"></span><br><span class="line">found 8 specs and 30 tests</span><br></pre></td></tr></table></figure><p>We can run the sanity tests instead of all the tests. Let&#39;s modify the &quot;Run all specs&quot; job by passing <code>grepTags</code> parameter through the Cypress environment variables. This is how you control the <code>cypress-grep</code> plugin.</p><figure class="highlight yml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Run</span> <span class="string">sanity</span> <span class="string">tests</span></span><br><span class="line">    <span class="attr">requires:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Run</span> <span class="string">changed</span> <span class="string">tests</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">print-tests</span></span><br><span class="line">    <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">env:</span> <span class="string">grepTags=@sanity</span></span><br></pre></td></tr></table></figure><p>If you look at the CircleCI output, you can see that cypress-grep plugin is working</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cypress-grep: filtering using tag &quot;@sanity&quot;</span><br><span class="line">cypress-grep: will omit filtered tests</span><br><span class="line">cypress-grep: filtering specs using tag &quot;@sanity&quot;</span><br></pre></td></tr></table></figure><p>The final test run only executed 8 tests.</p><p><img src="../images/tag-tests/eight.png" alt="CircleCI job only ran 8 sanity tests"></p><p><strong>Bonus:</strong> running just the sanity tests and skipping the rest saves on your <a href="https://www.cypress.io/pricing/">Cypress Dashboard</a> bill 💸</p><h2><span id="all-tests">All tests</span></h2><p>Hmm, we should still run all tests sometimes. The best solution is to run all tests periodically, for example every night, plus on demand by triggering the workflow using something like <a href="https://github.com/bahmutov/run-cy-on-ci">bahmutov&#x2F;run-cy-on-ci</a>. I have <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/commit/89d80d20388d4b913c4131b19cefb95227e2a205">added a workflow</a> to run all tests nightly</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">nightly:</span></span><br><span class="line">    <span class="attr">triggers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">schedule:</span></span><br><span class="line">          <span class="attr">cron:</span> <span class="string">&#x27;0 0 * * *&#x27;</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="attr">branches:</span></span><br><span class="line">              <span class="attr">only:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Run</span> <span class="string">all</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">build:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">print-tests</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="string">...</span></span><br></pre></td></tr></table></figure><h2><span id="run-all-tests-with-a-tag-on-ci">Run all tests with a tag on CI</span></h2><h3><span id="circleci">CircleCI</span></h3><p>Imagine someone is changing a component related to editing the Todo text on the page. They have deployed the site and want to run all end-to-end tests related to editing items. Without <a href="../tags/code-coverage/">code coverage</a> it is hard to say which E2E tests should run. Well, in general we run the sanity tests and we should run all tests tagged <code>@editing</code>. Let&#39;s allow anyone to trigger the CI workflow and to pass the tag to the test job. I will add a new workflow and pipeline parameters to the <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/blob/master/circle.yml">circle.yml</a> file.</p><figure class="highlight yml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="attr">GREP_TAGS:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">enum</span></span><br><span class="line">    <span class="attr">enum:</span></span><br><span class="line">      [</span><br><span class="line">        <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@sanity&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@adding&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@complete&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@editing&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@item&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@persistence&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@routing&#x27;</span>,</span><br><span class="line">      ]</span><br><span class="line">    <span class="attr">default:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">nightly:</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tagged:</span></span><br><span class="line">    <span class="attr">when:</span> <span class="string">&lt;&lt;</span> <span class="string">pipeline.parameters.GREP_TAGS</span> <span class="string">&gt;&gt;</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tagged</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">build:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">print-tests</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">grepTags=&lt;&lt;</span> <span class="string">pipeline.parameters.GREP_TAGS</span> <span class="string">&gt;&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">unless:</span> <span class="string">&lt;&lt;</span> <span class="string">pipeline.parameters.GREP_TAGS</span> <span class="string">&gt;&gt;</span></span><br><span class="line">    <span class="string">...</span></span><br></pre></td></tr></table></figure><p>Our new workflow <code>tagged</code> only runs when there is <code>GREP_TAGS</code> string and an empty default string &quot;&quot; does not count. Let&#39;s trigger the workflow from the CircleCI web interface.</p><p><img src="../images/tag-tests/trigger.png" alt="Click the &quot;Trigger pipeline&quot; button"></p><p>Add a string parameter named <code>GREP_TAGS</code> and enter one of the above <code>enum</code> values, like <code>@editing</code>.</p><p><img src="../images/tag-tests/enter-tag.png" alt="Enter the tag to use to filter the tests"></p><p>The workflow <code>tagged</code> runs, while the normal workflow is skipped. On other commits, the entire <code>build</code> workflow runs, while the <code>tagged</code> workflow is skipped.</p><p><img src="../images/tag-tests/pipelines.png" alt="Workflows skipped depending on the GREP_TAGS parameter"></p><p>The workflows are enabled and disabled using the pipeline parameter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tagged:</span><br><span class="line">  when: &lt;&lt; pipeline.parameters.GREP_TAGS &gt;&gt;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">build:</span><br><span class="line">  unless: &lt;&lt; pipeline.parameters.GREP_TAGS &gt;&gt;</span><br></pre></td></tr></table></figure><h3><span id="github-actions">GitHub Actions</span></h3><p>The user who tries to run the tests by a tag on CircleCI has to remember how to trigger the workflow and add the right parameter. I would like the experience to be simpler. Thus I looked at using GitHub Actions with its new &quot;workflow_dispatch&quot; workflows. In the <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/blob/master/.github/workflows/tagged.yml">.github&#x2F;workflows&#x2F;tagged.yml</a> I have defined a workflow where each input parameter is a boolean for the tag to run. It looks scary, but this is simple repetition: each tag matches one input parameter and one job to run.</p><figure class="highlight yml"><figcaption><span>.github/workflows/tagged.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">tagged</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="comment"># these inputs will be shown to the user on GitHub Actions page</span></span><br><span class="line">      <span class="comment"># and the user can simply check off the tags to run</span></span><br><span class="line">      <span class="attr">sanity:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">tests</span> <span class="string">tagged</span> <span class="string">&quot;@sanity&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">      <span class="attr">adding:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">tests</span> <span class="string">tagged</span> <span class="string">&quot;@adding&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">      <span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">tagged:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># install dependencies and start the server</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span> <span class="string">📦</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">runTests:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Start</span> <span class="string">the</span> <span class="string">server</span> <span class="string">🚀</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">start</span> <span class="string">&amp;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">sanity</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.inputs.sanity</span> <span class="string">==</span> <span class="string">&#x27;true&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">install:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">grepTags=@sanity</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">adding</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.inputs.adding</span> <span class="string">==</span> <span class="string">&#x27;true&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">install:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">grepTags=@adding</span></span><br><span class="line"></span><br><span class="line">      <span class="string">...</span></span><br></pre></td></tr></table></figure><p>This is pretty sweet - any user with GitHub access to the repo can click on the button &quot;Run workflow&quot; and check off the tags to test.</p><p><img src="../images/tag-tests/pick-tags.png" alt="Pick the test tags to run"></p><p>Only the picked test tags execute, the other steps are skipped.</p><p><img src="../images/tag-tests/action.png" alt="Running just the selected sets of tests on GitHub"></p><p>Beautiful.</p><h3><span id="separate-jobs">Separate jobs</span></h3><p>Instead of having a single job executing tagged tests, we could have created a separate job for each tag that can be picked. These jobs could all work in parallel. Here is the main part of the <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/blob/master/.github/workflows/tagged-jobs.yml">tagged-jobs.yml</a></p><figure class="highlight yml"><figcaption><span>.github/workflows/tagged-jobs.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># separate running each grep tag into own job</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">tagged-jobs</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="comment"># these inputs will be shown to the user on GitHub Actions page</span></span><br><span class="line">      <span class="comment"># and the user can simply check off the tags to run</span></span><br><span class="line">      <span class="attr">sanity:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">tests</span> <span class="string">tagged</span> <span class="string">&quot;@sanity&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">      <span class="attr">adding:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">tests</span> <span class="string">tagged</span> <span class="string">&quot;@adding&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">      <span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># each job is independent from other jobs</span></span><br><span class="line">  <span class="comment"># and only runs the tests for the picked test tag</span></span><br><span class="line">  <span class="attr">sanity:</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.inputs.sanity</span> <span class="string">==</span> <span class="string">&#x27;true&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">sanity</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">grepTags=@sanity</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">adding:</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.inputs.adding</span> <span class="string">==</span> <span class="string">&#x27;true&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">adding</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">grepTags=@adding</span></span><br><span class="line"></span><br><span class="line">  <span class="string">...</span></span><br></pre></td></tr></table></figure><p>Now we can pick the features to test without worrying about a long queue of tests running sequentially.</p><p><img src="../images/tag-tests/pick-separate-tags.png" alt="Pick as many features to test as you wish"></p><p>The screenshot below shows how the jobs proceed in parallel with each other</p><p><img src="../images/tag-tests/parallel.png" alt="The parallel test jobs each running tagged tests"></p><p>Fast.</p><h2><span id="the-regression-tag">The regression tag</span></h2><p>Imagine you are deploying a schema change in the database, or fiddling with some API service. You might not know which area of the site you might have broken. Running all tests might take too long, and running just the tests tagged <code>@sanity</code> is not enough - they are only covering the essential user paths. We need something in between the <code>@sanity</code> list and all the tests.</p><p>This is where the <code>@regression</code> tag comes in. We can mark a big chunk of the tests with this tag, and whenever we want to confirm the site still works, we run those tests by tag. Of course, running all the tests could be better, but there is a trade off: speed vs completeness.</p><p>Here is how the &quot;clear-completed-spec.js&quot; looks. The tests tagged <code>@sanity</code> get the second tag, and another test now gets its <code>@regression</code> tag.</p><figure class="highlight js"><figcaption><span>cypress/integration/clear-completed-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;TodoMVC&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">context</span>(<span class="string">&#x27;Clear completed button&#x27;</span>, &#123; <span class="attr">tags</span>: <span class="string">&#x27;@complete&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;should display the correct text&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;should remove completed items when clicked&#x27;</span>,</span><br><span class="line">      &#123; <span class="attr">tags</span>: [<span class="string">&#x27;@sanity&#x27;</span>, <span class="string">&#x27;@regression&#x27;</span>] &#125;,</span><br><span class="line">      <span class="keyword">function</span> (<span class="params"></span>) &#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;should be hidden when there are no items that are completed&#x27;</span>,</span><br><span class="line">      &#123; <span class="attr">tags</span>: <span class="string">&#x27;@regression&#x27;</span> &#125;,</span><br><span class="line">      <span class="keyword">function</span> (<span class="params"></span>) &#123; ... &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>In general, the <code>@regression</code> set is a superset of the <code>@sanity</code> tests.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --names | grep &#x27;@sanity&#x27; | wc -l</span><br><span class="line">       8</span><br><span class="line">$ npx find-cypress-specs --names | grep &#x27;@regression&#x27; | wc -l</span><br><span class="line">      17</span><br></pre></td></tr></table></figure><p>The full test outline</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --names</span><br><span class="line"></span><br><span class="line">$ npx find-cypress-specs --names</span><br><span class="line"></span><br><span class="line">cypress/integration/adding-spec.js (7 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ New Todo [@adding]</span><br><span class="line">  │ ├─ should allow me to add todo items [@regression]</span><br><span class="line">  │ ├─ adds items [@sanity, @regression]</span><br><span class="line">  │ ├─ should clear text input field when an item is added [@regression]</span><br><span class="line">  │ ├─ should append new items to the bottom of the list</span><br><span class="line">  │ ├─ should trim text input [@regression]</span><br><span class="line">  │ └─ should show #main and #footer when items added</span><br><span class="line">  └─ Adds items (spy example)</span><br><span class="line">    └─ calls inform</span><br><span class="line"></span><br><span class="line">cypress/integration/clear-completed-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Clear completed button [@complete]</span><br><span class="line">    ├─ should display the correct text</span><br><span class="line">    ├─ should remove completed items when clicked [@sanity, @regression]</span><br><span class="line">    └─ should be hidden when there are no items that are completed [@regression]</span><br><span class="line"></span><br><span class="line">cypress/integration/complete-all-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Mark all as completed [@complete]</span><br><span class="line">    ├─ should allow me to mark all items as completed [@regression]</span><br><span class="line">    ├─ should allow me to clear the complete state of all items [@sanity, @regression]</span><br><span class="line">    └─ complete all checkbox should update state when items are completed / cleared</span><br><span class="line"></span><br><span class="line">cypress/integration/editing-spec.js (5 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Editing [@editing]</span><br><span class="line">    ├─ should hide other controls when editing</span><br><span class="line">    ├─ should save edits on blur [@sanity]</span><br><span class="line">    ├─ should trim entered text</span><br><span class="line">    ├─ should remove the item if an empty text string was entered</span><br><span class="line">    └─ should cancel edits on escape</span><br><span class="line"></span><br><span class="line">cypress/integration/item-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Item [@item]</span><br><span class="line">    ├─ should allow me to mark items as complete [@sanity, @regression]</span><br><span class="line">    ├─ should allow me to un-mark items as complete [@regression]</span><br><span class="line">    └─ should allow me to edit an item</span><br><span class="line"></span><br><span class="line">cypress/integration/persistence-spec.js (1 test)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Persistence [@persistence]</span><br><span class="line">    └─ should persist its data [@sanity, @regression]</span><br><span class="line"></span><br><span class="line">cypress/integration/routing-spec.js (5 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Routing [@routing]</span><br><span class="line">    ├─ should allow me to display active items [@regression]</span><br><span class="line">    ├─ should respect the back button</span><br><span class="line">    ├─ should allow me to display completed items [@sanity, @regression]</span><br><span class="line">    ├─ should allow me to display all items [@regression]</span><br><span class="line">    └─ should highlight the currently applied filter</span><br><span class="line"></span><br><span class="line">cypress/integration/spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ When page is initially opened [@regression]</span><br><span class="line">  │ └─ should focus on the todo input field</span><br><span class="line">  ├─ No Todos</span><br><span class="line">  │ └─ should hide #main and #footer [@regression]</span><br><span class="line">  └─ Counter</span><br><span class="line">    └─ should display the current number of todo items [@sanity, @regression]</span><br><span class="line"></span><br><span class="line">found 8 specs and 30 tests</span><br></pre></td></tr></table></figure><p>I have updated the CircleCI and the GitHub Actions workflows to allow selecting <code>@regression</code> tag.</p><p><img src="../images/tag-tests/regression.png" alt="Manually running all regression tests on GitHub"></p><p><img src="../images/tag-tests/regression-job.png" alt="A single job ran executing just the regression tests"></p><h2><span id="the-final-tag-organization">The final tag organization</span></h2><p>To summarize: we have organized our tests using tags. There are feature-level tags like <code>@editing</code> and two &quot;coverage&quot; tags: <code>@sanity</code> and <code>@regression</code>. The sets of tests overlap, and there might be tests without any tags.</p><p><img src="../images/tag-tests/tag-organization.png" alt="Test tag coverage"></p><p>On every pull request we execute the changed specs and then run <code>@sanity</code> tests. Whenever someone is working on the feature, they can quickly run the tests for that feature using the individual feature tag. When in doubt, you can execute a wider set of tests using <code>@regression</code> tag. To completely test the software (which we can do periodically), one can run all the tests without any filtering by tag.</p><h2><span id="bonus-1-github-triggers-circleci">Bonus 1: GitHub triggers CircleCI</span></h2><p>If you have implemented running tests on CircleCI, but want to use the GitHub Actions user interface, you can collect the tags and trigger the CircleCI pipeline, see <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/blob/master/.github/workflows/trigger-circleci.yml">trigger-circleci.yml</a> workflow file.</p><figure class="highlight yml"><figcaption><span>trigger-circleci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">trigger-circleci</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="comment"># these inputs will be shown to the user on GitHub Actions page</span></span><br><span class="line">      <span class="comment"># and the user can simply check off the tags to run</span></span><br><span class="line">      <span class="attr">sanity:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">tests</span> <span class="string">tagged</span> <span class="string">&quot;@sanity&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">      <span class="attr">regression:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">tests</span> <span class="string">tagged</span> <span class="string">&quot;@regression&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">      <span class="string">...</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">trigger-circleci:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Print</span> <span class="string">GitHub</span> <span class="string">event</span> <span class="string">inputs</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">EVENT:</span> <span class="string">$&#123;&#123;</span> <span class="string">toJson(github.event.inputs)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;$EVENT&quot;</span></span><br><span class="line"><span class="string">          # all environment variables that start with GITHUB_</span></span><br><span class="line"><span class="string">          # https://github.com/bahmutov/print-env</span></span><br><span class="line"><span class="string">          npx @bahmutov/print-env GITHUB_</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Trigger</span> <span class="string">CircleCI</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">CIRCLE_CI_API_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CIRCLE_CI_API_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          # collect all input parameters into one string</span></span><br><span class="line"><span class="string">          TAGS=</span></span><br><span class="line"><span class="string">          if [[ &quot;$&#123;&#123; github.event.inputs.sanity &#125;&#125;&quot; == &quot;true&quot; ]]; then</span></span><br><span class="line"><span class="string">            TAGS=&quot;@sanity&quot;</span></span><br><span class="line"><span class="string">          fi</span></span><br><span class="line"><span class="string">          if [[ &quot;$&#123;&#123; github.event.inputs.regression &#125;&#125;&quot; == &quot;true&quot; ]]; then</span></span><br><span class="line"><span class="string">            TAGS=&quot;$TAGS @regression&quot;</span></span><br><span class="line"><span class="string">          fi</span></span><br><span class="line"><span class="string">          if [[ &quot;$&#123;&#123; github.event.inputs.adding &#125;&#125;&quot; == &quot;true&quot; ]]; then</span></span><br><span class="line"><span class="string">            TAGS=&quot;$TAGS @adding&quot;</span></span><br><span class="line"><span class="string">          fi</span></span><br><span class="line"><span class="string">          ...</span></span><br><span class="line"><span class="string">          echo &quot;Collected tags: $TAGS&quot;</span></span><br><span class="line"><span class="string">          # https://github.com/bahmutov/trigger-circleci-pipeline</span></span><br><span class="line"><span class="string">          npx trigger-circleci-pipeline \</span></span><br><span class="line"><span class="string">            --org bahmutov --project test-todomvc-using-app-actions \</span></span><br><span class="line"><span class="string">            --branch $GITHUB_REF_NAME --parameters GREP_TAGS=&quot;$TAGS&quot;</span></span><br></pre></td></tr></table></figure><p>I am using <a href="https://github.com/bahmutov/print-env">print-env</a> to print the GitHub environment variables and <a href="https://github.com/bahmutov/trigger-circleci-pipeline">trigger-circleci-pipeline</a> to trigger the CircleCI pipeline via API (you will need your personal CircleCI API token to work).</p><h2><span id="bonus-2-when-you-have-a-lot-of-test-tags">Bonus 2: When you have a lot of test tags</span></h2><p>If you have a lot of test tags, and want to let the user pick the ones to run from GitHub user interface, using individual input workflow parameters quickly runs into the ten parameters max limit (January 2022). Thus I have reworked the above workflow to let the user pick some common sets (like the regression the and sanity sets) using checkboxes, and let the user pick other tags to run by entering them as a single string. Find the full workflow at <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/blob/master/.github/workflows/trigger-circle-type.yml">trigger-circle-type.yml</a></p><figure class="highlight yml"><figcaption><span>.github/workflows/trigger-circle-type.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">trigger-circleci-type</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="comment"># these inputs will be shown to the user on GitHub Actions page</span></span><br><span class="line">      <span class="comment"># and the user can simply check off the tags to run</span></span><br><span class="line">      <span class="comment"># the two sets of tests covering most of the features</span></span><br><span class="line">      <span class="comment"># <span class="doctag">NOTE:</span> GitHub workflows are limited to ten input parameters</span></span><br><span class="line">      <span class="attr">sanity:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">tests</span> <span class="string">tagged</span> <span class="string">&quot;@sanity&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">      <span class="attr">regression:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">tests</span> <span class="string">tagged</span> <span class="string">&quot;@regression&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">      <span class="comment"># tests for individual features - the user will need to type the tags</span></span><br><span class="line">      <span class="comment"># comma-separated in order to avoid hitting then ten workflow input limit</span></span><br><span class="line">      <span class="attr">testTags:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          Other test tags to run, comma-separated. Includes @adding, @complete,</span></span><br><span class="line"><span class="string">          @editing, @item, @persistence, @routing</span></span><br><span class="line"><span class="string"></span>  <span class="string">...</span></span><br><span class="line">  <span class="comment"># collect all input parameters into one string</span></span><br><span class="line">  <span class="string">TAGS=</span></span><br><span class="line">  <span class="string">if</span> [[ <span class="string">&quot;$<span class="template-variable">&#123;&#123; github.event.inputs.sanity &#125;&#125;</span>&quot;</span> <span class="string">==</span> <span class="string">&quot;true&quot;</span> ]]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">    <span class="string">TAGS=&quot;@sanity&quot;</span></span><br><span class="line">  <span class="string">fi</span></span><br><span class="line">  <span class="string">if</span> [[ <span class="string">&quot;$<span class="template-variable">&#123;&#123; github.event.inputs.regression &#125;&#125;</span>&quot;</span> <span class="string">==</span> <span class="string">&quot;true&quot;</span> ]]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">    <span class="string">TAGS=&quot;$TAGS,@regression&quot;</span></span><br><span class="line">  <span class="string">fi</span></span><br><span class="line">  <span class="string">if</span> [[ <span class="string">&quot;$<span class="template-variable">&#123;&#123; github.event.inputs.testTags &#125;&#125;</span>&quot;</span> <span class="type">!=</span> <span class="string">&quot;&quot;</span> ]]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">    <span class="string">TAGS=&quot;$TAGS,$&#123;&#123;</span> <span class="string">github.event.inputs.testTags</span> <span class="string">&#125;&#125;&quot;</span></span><br><span class="line">  <span class="string">fi</span></span><br></pre></td></tr></table></figure><p>I include the available tags in the description, so it is easy to remember the choices.</p><p><img src="../images/tag-tests/flow-inputs.png" alt="Picking the test tags to run"></p><p><strong>Tip:</strong> I pass the additional custom tag as a string &quot;Blog post demo&quot; - that is purely to tag the recorded Dashboard run to make it simple to find it.</p><p><img src="../images/tag-tests/flow-run.png" alt="The recorded run has all selected test tags and the custom tag string"></p><p><strong>Tip 2:</strong> use the Cypress Dashboard tag dropdown to filter the recorded runs by a tag.</p><p><img src="../images/tag-tests/tag-dropdown.png" alt="Available tags to filter the runs by"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s say you have hundreds of end-to-end tests (this is our current situation at Mercari US). Running the tests in parallel makes th
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="advice" scheme="https://glebbahmutov.com/blog/tags/advice/"/>
    
  </entry>
  
  <entry>
    <title>How To Solve A Simple Numeric Problem Using Computers and JavaScript</title>
    <link href="https://glebbahmutov.com/blog/find-the-number/"/>
    <id>https://glebbahmutov.com/blog/find-the-number/</id>
    <published>2022-01-09T05:00:00.000Z</published>
    <updated>2022-01-09T16:42:52.247Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="the-problem">The problem</span></h2><p>Let&#39;s say I ask you to fix a number to make this equation true</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_ = 3</span><br></pre></td></tr></table></figure><p>Of course you might say - ohh it is easy, just put &quot;3&quot; where the <code>_</code> is. What if I ask you to find numbers between 1 and 10 to make this equation true</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_ + 3 = _ * 2</span><br></pre></td></tr></table></figure><p>You probably now have to try a few numbers to find at least one solution.</p><p>As the size of the equation and the number of unknown numbers grows, manually trying combinations of numbers becomes slower and slower. Why not let the computers do this for us? Let me teach you how to program your <em>browser</em> to solve problems like this almost instantly.</p><h2><span id="the-environment">The environment</span></h2><p>To find numbers we will use JavaScript programming language that runs in every browser (and even on the browsers on the phones). You can take any browser window, press <code>Options + Cmd + I</code> keys at the same time (I am writing this is on Mac) or select &quot;View &#x2F; Development &#x2F; Developer Tools&quot;. You should see the Developer Tools tab opened. We will be using the &quot;Console&quot; tab</p><p><img src="../images/find-the-number/dev-tools.png" alt="Console tab in the Developer Tools in the Chrome browser"></p><p>You can open and close the Developer Tools (DevTools for short) at any moment in any browser window. Let&#39;s use the console to compute something for us</p><p><img src="../images/find-the-number/compute.png" alt="Use DevTools console as a calculator"></p><h2><span id="comparing-numbers">Comparing numbers</span></h2><p>To find the solution to <code>_ = 3</code> let&#39;s try <code>1 = 3</code> in the DevTools console.</p><p><img src="../images/find-the-number/error.png" alt="We get an error trying to run 1 = 3 expression"></p><p>Oops, the computer is complaining. JavaScript language uses the character <code>=</code> to <em>assign a value</em> to a variable, like <code>a = 10</code> and <code>x = 2</code>. We are only asking if <code>1</code> is equal to <code>3</code>. In JavaScript asking to compare to values has a special operator <code>===</code> that we will use.</p><p><img src="../images/find-the-number/is-equal.png" alt="Comparing two numbers using === operator"></p><p>When comparing numbers, we get back <code>true</code> or <code>false</code>.</p><h2><span id="printing">Printing</span></h2><p>If the browser is computing something, it needs to print the results, and maybe print messages during the steps. To print something in the DevTools console, we can use the <code>console.log</code> function.</p><p><img src="../images/find-the-number/log1.png" alt="Printing the result of comparing two numbers"></p><p>You can pass one or multiple arguments to print. For example, we can compare numbers and print if one is larger or smaller than another.</p><p><img src="../images/find-the-number/log2.png" alt="Comparing the numbers and printing the results"></p><h2><span id="variables">Variables</span></h2><p>When solving <code>_ = 3</code> we need to try different values in place of <code>_</code>. Instead of <code>_</code> let&#39;s call the unknown value &quot;x&quot;. We are trying to solve <code>x = 3</code> after all. In JavaScript, we can create <code>x</code> which called a variable. We can assign this variable (which is like an empty box) different values, then compare the current value to 3. Here is how it looks in DevTools: we are using <code>let x</code> to create a variable, <code>=</code> operator to put a value into <code>x</code>, and <code>===</code> to compare the current value of the variable to another value.</p><p><img src="../images/find-the-number/variable.png" alt="Using variable x and comparing it to 3"></p><p>We can explicitly print the comparison result using <code>console.log</code> making it very clear what is going on</p><p><img src="../images/find-the-number/logx.png" alt="Printing x and the result of comparing it to 3"></p><p>To save space we can assign the value and compare it on one line, we just need to separate the assignment and the print statements using the special <code>;</code> to avoid JavaScript confusing them.</p><p><img src="../images/find-the-number/semi.png" alt="Separate statements using ; character"></p><h2><span id="functions">Functions</span></h2><p>We will be comparing <code>x</code> to <code>3</code> multiple times while checking if we have found the solution. We can create a little reusable piece of code that takes <code>x</code> and tells us if the equation is true or false. The reusable pieces of code are called <em>functions</em> and have a special syntax.</p><p><img src="../images/find-the-number/function.png" alt="Example function"></p><p>Inside the function, <code>x</code> variable is equal to whatever we passed in the first argument place when we called <code>check</code>. When we called it <code>check(1)</code> inside the function <code>x</code> was 1. When we called it <code>check(5)</code> the value <code>x</code> was 5. Even if there is a variable <code>x</code> outside the function, the function does not care - it uses its internal value of the argument.</p><p><img src="../images/find-the-number/shadow.png" alt="Local variable x is used"></p><p>Note how in the DevTools you can type multiple lines before executing them. Use <code>Shift + Enter</code> to add one more line. Use <code>Enter</code> key to run the JavaScript.</p><h2><span id="loops">Loops</span></h2><p>Ok, so let&#39;s run all values from 1 to 10 through our function <code>check</code> and print the result.</p><p><img src="../images/find-the-number/ten.png" alt="Calling check ten times with different argument"></p><p>Ughh, so verbose, and the only difference is the value we used to call <code>check(...)</code>. Let&#39;s remove the duplicate code. We can use a loop to execute the same statement again and again. The way to write this in JavaScript is to use <em>another</em> counter variable and specify its initial and final value and how to increment the variable after each iteration.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">1</span>; k &lt; <span class="number">11</span>; k += <span class="number">1</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We have declared a new variable using <code>let k</code> just too keep track of the iteration. We gave it a starting value <code>let k = 1</code> and we will continue executing all code inside the curly braces <code>&#123; ... &#125;</code> as long as the value of <code>k</code> is less than 11. Each iteration we will increment <code>k</code> by 1 using the special operator <code>+=</code>. Let&#39;s put our <code>check(...)</code> statement inside the loop.</p><p><img src="../images/find-the-number/loop.png" alt="Using a loop to call check with 10 different values"></p><p>Each iteration we call <code>check(...)</code> with the current value of the variable <code>k</code>. The function <code>check(x)</code> takes the passed value like 1, then 2, then 3, ... and puts it into its argument variable <code>x</code> and computes the result and returns it to be printed using <code>console.log</code>.</p><h2><span id="multiple-loops">Multiple loops</span></h2><p>Let&#39;s say we are trying to solve an equation with multiple unknown values like <code>_ + 3 = _ * 2</code>. Our check function will need to expect 2 variables.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">check</span>(<span class="params">x, y</span>) &#123; <span class="keyword">return</span> x + <span class="number">3</span> === y * <span class="number">2</span> &#125;</span><br></pre></td></tr></table></figure><p>And we will need to try values from 1 to 10 for variable <code>x</code>. And for each <code>x</code> we need to try values from 1 to 10 for variable <code>y</code>. We can nest loops and just try different values; that&#39;s why it is called brute force approach. The computers can do billions of such calculations each second, so we don&#39;t have to worry about how long it takes to solve such problems. We expect 100 total checks (10 values of x * 10 values of y for each x):</p><p><img src="../images/find-the-number/loops.png" alt="Using loop inside a loop to try 100 pairs of numbers"></p><p>It is very common to use variable names like <code>k</code>, <code>j</code>, <code>i</code> for loop counters, and <code>x</code>, <code>y</code> for unknown values that we are trying to find.</p><h2><span id="branches">Branches</span></h2><p>In the image above, most of the 100 pairs return <code>false</code>, so let&#39;s print only the solutions. We can use the built-in JavaScript <code>if</code> operator</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (some condition value) &#123;</span><br><span class="line">  <span class="comment">// do this statements if value is true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// do this statements if false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If there is nothing to do for the <code>else</code> branch, we can omit it</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (some condition value) &#123;</span><br><span class="line">  <span class="comment">// do this statements if value is true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here are our solutions found by iteration and only printing the ones where <code>check(...)</code> returns true.</p><p><img src="../images/find-the-number/if.png" alt="Printing the solutions only"></p><h2><span id="variable-names">Variable names</span></h2><p>JavaScript variables can be full words, and it is a good practice to use descriptive variable names that make it clear what the variable is holding inside.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greeting</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello,&#x27;</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">greeting</span>(<span class="string">&#x27;Gleb&#x27;</span>)</span><br><span class="line"><span class="comment">// Hello, Gleb</span></span><br></pre></td></tr></table></figure><p>On the other hand, if you have a lot of unknowns in your equation, you can use variable names with indices like <code>x1</code>, <code>x2</code>, <code>x3</code>, <code>x4</code> instead of one letter <code>x</code>, <code>y</code>, <code>v</code>, <code>w</code>. In the screenshot below I used <code>x1</code> and <code>x2</code> for unknowns and <code>k1</code> and <code>k2</code> for iteration counter variables.</p><p><img src="../images/find-the-number/names.png" alt="Using consistent variables names"></p><h2><span id="challenges">Challenges</span></h2><p>Try to solve in your browser DevTools the following problems</p><ol><li>what is the value of <code>(1 - 100) * 5 + 1234 + 588/2</code>.<ol><li>Is it larger or smaller than the value of the expression <code>56 * 7</code>?</li><li>put the value of the first expression into the variable <code>left</code> and the value of the second expression into the variable <code>right</code> and print to the console both variables</li></ol></li><li>print the word &quot;Bot&quot; 25 times in a row</li><li>find two numbers so that <code>x * 15 = 5 + y</code>. Each unknown number can be between 1 and 100</li><li>print &quot;yes!!!&quot; if the expression <code>45 * 19 * 22</code> is larger than 10000 and print &quot;No :(&quot; otherwise</li><li>find the number that solves the triple equality <code>x + 6 = 94 - 10 * x = 2 * x - 2</code></li><li>iterate over numbers from 1 to 300 in increments of 6 and print the numbers. Your first few numbers should be 1, 7, 13, ...</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;the-problem&quot;&gt;The problem&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Let&amp;#39;s say I ask you to fix a number to make this equation true&lt;/p&gt;
&lt;figure class=&quot;h
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="javascript" scheme="https://glebbahmutov.com/blog/tags/javascript/"/>
    
      <category term="tutorial" scheme="https://glebbahmutov.com/blog/tags/tutorial/"/>
    
  </entry>
  
  <entry>
    <title>Crawl Local Pages Using Cypress</title>
    <link href="https://glebbahmutov.com/blog/crawl-using-cypress/"/>
    <id>https://glebbahmutov.com/blog/crawl-using-cypress/</id>
    <published>2022-01-07T05:00:00.000Z</published>
    <updated>2022-01-07T14:27:26.162Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes you want to simply visit every local page on your site to make sure the links are correct and every page loads. Cypress is not a crawler, but it can definitely handle the crawl for smaller sites. In the videos below I show how to collect every anchor link, filter external links, and visit every collected URL once.</p><blockquote class="pullquote"><p>🎁 You can find the full source code in my repository <a href="https://github.com/bahmutov/cypress-crawl-example">bahmutov&#x2F;cypress-crawl-example</a>.</p></blockquote><h2><span id="collect-the-urls">Collect the URLs</span></h2><p>The best way to write a crawler is to think about the actions on every page. The crawler needs to:</p><ol><li>grab the first URL to visit from a queue</li></ol><ul><li>if there are no URLs to visit, we are done</li></ul><ol start="2"><li>call <code>cy.visit(url)</code></li><li>collect all anchor elements</li></ol><ul><li>filter external links</li><li>filter links we have already visited</li><li>filter links we have already queued up to visit</li><li>add the filtered URLs to the queue</li></ul><ol start="4"><li>go to step 1</li></ol><p>You can see my implementation of the above steps in the test file <a href="https://github.com/bahmutov/cypress-crawl-example/blob/main/cypress/integration/spec.js">spec.js</a> and watch the implementation in the video below:</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/FDNeiwKWdb4" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Perfect, at the end of the test each URL has been visited, but some pages were visited twice - because the crawler does not know that links to <code>/tos.html</code> and <code>/tos</code> lead to the same page.</p><p><img src="../images/crawl-using-cypress/tos.png" alt="Visiting the same page via two different links"></p><h2><span id="resolving-urls">Resolving URLs</span></h2><p>To prevent visiting the same page via different links, we need to check if a given URL leads to a page we have visited already. We can do this by using the <a href="https://on.cypress.io/request">cy.request</a> command and inspecting the <code>redirects</code> array.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// check URLs by requesting them and getting through the redirects</span></span><br><span class="line"><span class="keyword">const</span> redirected = []</span><br><span class="line">localUrls.<span class="title function_">forEach</span>(<span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">request</span>(&#123; url, <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;redirects&#x27;</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    <span class="comment">// resources without redirects will</span></span><br><span class="line">    <span class="comment">// not have the property &quot;redirects&quot;</span></span><br><span class="line">    <span class="comment">// so prevent Cypres from throwing an error</span></span><br><span class="line">    .<span class="title function_">should</span>(<span class="title class_">Cypress</span>.<span class="property">_</span>.<span class="property">noop</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">redirects</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(redirects) &amp;&amp; redirects.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// each redirect record is like &quot;301: URL&quot;</span></span><br><span class="line">        <span class="comment">// so grab the last redirect and parse it</span></span><br><span class="line">        <span class="comment">// that will be the final address</span></span><br><span class="line">        <span class="keyword">const</span> redirectedUrl =</span><br><span class="line">          redirects[redirects.<span class="property">length</span> - <span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="comment">// keep just the local part of the full URL</span></span><br><span class="line">        <span class="keyword">const</span> parsed = <span class="keyword">new</span> <span class="title function_">URL</span>(redirectedUrl)</span><br><span class="line">        redirected.<span class="title function_">push</span>(parsed.<span class="property">pathname</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        redirected.<span class="title function_">push</span>(url)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You can find the full source code in the file <a href="https://github.com/bahmutov/cypress-crawl-example/blob/main/cypress/integration/spec2.js">spec2.js</a> and the explanation in the video below.</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/h7taQNvj0Cs" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="bonus-check-the-404-resource">Bonus: check the 404 resource</span></h2><p>The crawl example has one additional test file <a href="https://github.com/bahmutov/cypress-crawl-example/blob/main/cypress/integration/404-spec.js">404-spec.js</a> that shows how to verify the error page the site serves when you try to visit a non-existent URL. Again, we can use a combination of <code>cy.request</code> and <code>cy.visit</code> commands to verify the status code and the error page served. We do need to let the commands work on the status code 4xx by using <code>failOnStatusCode: false</code> option</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows 404 error&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">&#x27;/does-not-exist&#x27;</span></span><br><span class="line">  cy.<span class="title function_">request</span>(&#123; url, <span class="attr">failOnStatusCode</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;status&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">0</span> &#125;)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;eq&#x27;</span>, <span class="number">404</span>)</span><br><span class="line">  cy.<span class="title function_">visit</span>(url, &#123; <span class="attr">failOnStatusCode</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;404&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You can find the explanation in the video below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/0OfILKbqbsg" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Happy Crawling 🕷</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sometimes you want to simply visit every local page on your site to make sure the links are correct and every page loads. Cypress is not 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress JSON Test Results</title>
    <link href="https://glebbahmutov.com/blog/json-test-results/"/>
    <id>https://glebbahmutov.com/blog/json-test-results/</id>
    <published>2022-01-03T05:00:00.000Z</published>
    <updated>2022-01-03T21:41:40.792Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes you want to run the Cypress tests and do something based on the number of tests passed or failed. You need the test results in a JSON format, maybe saved as a text file. There are three ways to do this:</p><h2><span id="wrap-cypress-in-your-cli">Wrap Cypress in your CLI</span></h2><p>You can wrap the Cypress <a href="https://on.cypress.io/module-api">NPM module API</a> in your CLI script. Your script will get all test results as a JSON object and then can run other programs to process the test results further.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cypress = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line">cypress.<span class="title function_">run</span>(&#123; ... &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">results</span> =&gt;</span> ...)</span><br></pre></td></tr></table></figure><p>I used this approach several times, see my blog post <a href="/blog/wrap-cypress-using-npm/" title="Wrap Cypress Using NPM Module API">Wrap Cypress Using NPM Module API</a>.</p><h2><span id="use-json-reporter">Use JSON reporter</span></h2><p>Cypress comes with built-in <a href="https://on.cypress.io/reporters">reporters</a> plus you can bring your own. If you want to output JSON results into a separate file, you could try</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx cypress run --reporter json --reporter-options output=result.json</span><br></pre></td></tr></table></figure><p>There is a problem though: the JSON reporter removes the standard terminal output. If you want to write the JSON results and the typical terminal output, you would need to install something like <a href="https://github.com/you54f/cypress-multi-reporters">cypress-multi-reporters</a> and configure it ... just to save the test results as a JSON file. Which brings us to the third way of saving the test results - via a plugin.</p><h2><span id="use-cypress-json-results">Use cypress-json-results</span></h2><p>I wrote the plugin <a href="https://github.com/bahmutov/cypress-json-results">cypress-json-results</a> specifically to make saving the JSON results file super simple. Install the plugin and add it to your plugin file:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress-json-results</span><br><span class="line">+ cypress-json-results@1.0.0</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// `on` is used to hook into various events Cypress emits</span></span><br><span class="line">  <span class="comment">// `config` is the resolved Cypress config</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// https://github.com/bahmutov/cypress-json-results</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;cypress-json-results&#x27;</span>)(&#123;</span><br><span class="line">    on,</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;results.json&#x27;</span>, <span class="comment">// default filename</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Once you run the tests, you should see a message like this after all the tests have finished</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cypress-json-results: wrote results to results.json</span><br></pre></td></tr></table></figure><p>The saved file has each spec that executed locally with the <a href="/blog/cypress-test-statuses/" title="test status">test status</a>.</p><figure class="highlight json"><figcaption><span>results.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;cypress/integration/spec.js&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;receives the right text file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;passed&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;visits the text file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;passed&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;visits the Markdown file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;passed&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;converts the Markdown file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;passed&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>The standard terminal output stays unchanged.</p><blockquote class="pullquote"><p>🎁 You can find the example application with cypress-json-results plugin in the repo <a href="https://github.com/bahmutov/check-text-file-example">bahmutov&#x2F;check-text-file-example</a>.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sometimes you want to run the Cypress tests and do something based on the number of tests passed or failed. You need the test results in 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
</feed>
