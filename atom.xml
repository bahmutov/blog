<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Better world by better software</title>
  
  <subtitle>Gleb Bahmutov PhD</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://glebbahmutov.com/blog/"/>
  <updated>2022-01-22T17:26:44.505Z</updated>
  <id>https://glebbahmutov.com/blog/</id>
  
  <author>
    <name>Gleb Bahmutov</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How To Check Network Requests Using Cypress</title>
    <link href="https://glebbahmutov.com/blog/network-requests-with-cypress/"/>
    <id>https://glebbahmutov.com/blog/network-requests-with-cypress/</id>
    <published>2022-01-22T05:00:00.000Z</published>
    <updated>2022-01-22T17:26:44.505Z</updated>
    
    <content type="html"><![CDATA[<p>Recently a user posted in the <a href="https://gitter.im/cypress-io/cypress">Cypress Gitter channel</a> the following image and asked why this code is not working.</p><p><img src="../images/net-cy/net-question.png" alt="This code is broken"></p><p>The above code has several problems. In this blog post, I will fix them all.</p><!-- toc --><ul><li><a href="#the-returned-value">The returned value</a></li><li><a href="#printing-the-value">Printing the value</a><ul><li><a href="#why-cylog-prints-null-or-undefined">Why cy.log prints null or undefined</a></li><li><a href="#when-to-use-cypress-then-callback-to-use-the-value">When To Use Cypress .Then Callback To Use The Value</a></li></ul></li><li><a href="#fluent-programming">Fluent programming</a><ul><li><a href="#bonus-cy-spok">Bonus: cy-spok</a></li></ul></li></ul><!-- tocstop --><h2><span id="the-returned-value">The returned value</span></h2><p>First, let&#39;s deal with the returned value of the <code>cy.wait(...).then(...)</code> chain.</p><p><img src="../images/net-cy/return-value.png" alt="The returned value is not the organization id"></p><p>Think about JavaScript promises. A promise <code>.then</code> method does NOT return the value, it returns another promise, so you can attach another <code>.then</code> callback, or a callback to catch an error using <code>.catch</code>, right?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// INCORRECT, the &quot;x&quot; is a promise instance, not the value 42</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="built_in">Promise</span>.resolve(...).then(...).then(<span class="function">() =&gt;</span> <span class="number">42</span>)</span><br></pre></td></tr></table></figure><p>If you want to get the resolved value <code>x</code>, you need to put the code that uses <code>x</code> into the last callback.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FIXED, the &quot;x&quot; is used inside `.then(...)` callback</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve(...).then(...).then(<span class="function">() =&gt;</span> <span class="number">42</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// use x here, x should be 42</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Cypress command chains might look like promise chains, but they are more like reactive streams, see <a href="https://slides.com/bahmutov/reactive-conf">this presentation from ReactiveConf 2018</a>. Thus every command like <code>cy.wait</code> and <code>cy.then</code> returns another instance of Cypress chainable interface so you can attach more commands. If you want to use the value returned (or &quot;yielded&quot; as Cypress calls it), use it inside <code>.then(...)</code> callback.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cy.wait(<span class="string">&#x27;@createUnion&#x27;</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; statusCode, body &#125; = response.response</span><br><span class="line">  <span class="keyword">const</span> org = body.data</span><br><span class="line"></span><br><span class="line">  <span class="comment">// validate the response</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> org.id</span><br><span class="line">&#125;).then(<span class="function"><span class="params">orgId</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// you can use the orgId now</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="printing-the-value">Printing the value</span></h2><p>Let&#39;s look at why the <code>console.log(orgId)</code> prints a weird object.</p><p><img src="../images/net-cy/log-value.png" alt="The console.log prints something unexpected"></p><p>As I explained above, the returned value of the Cypress callback is an internal chainable object used to add more commands to be executed. The Cypress commands themselves are queued up, the have not started running. The Cypress chains of commands are lazy - they only start running once the browser is ready (which is another difference from the Promises which are <a href="/blog/difference-between-promise-and-task/" title="very very eager to run">very very eager to run</a>). If we look at the order of execution, the <code>console.log</code> runs <em>way</em> before the Cypress command gets the intercepted response and gets the ID property.</p><p>I marked the order of statements executed in the code snippet.</p><p><img src="../images/net-cy/order.png" alt="The order in which the code statements run"></p><ol><li>First, the code runs <code>cy.wait</code> to schedule the &quot;WAIT&quot; command. It returns Cypress chainable object</li><li>The Cypress chainable object has <code>then</code> method, it gets called with a function callback reference. The Cypress method schedules the &quot;THEN&quot; command to be run after &quot;WAIT&quot; is finished (nothing is running at this point).</li><li>There are no more Cypress commands to call, thus the assignment <code>const orgId =</code> runs, assigning the (unexpected) Cypress chainable object reference to the local variable <code>orgId</code></li><li>The problem happens here: the next JavaScript statement that runs is the <code>console.log(orgId)</code> which tries to print the Chainable object, while the user expects to see the organization id. So it prints something weird.</li><li>Cypress test starts running, finds the &quot;WAIT&quot; command, waits for that alias &quot;@createUnion&quot;, yields the intercept to the next scheduled command &quot;THEN&quot;, calls the function callback which returns the real organization ID.</li></ol><p>To fix the code snippet, move the <code>console.log</code> into the <code>.then</code> callback that gets the ID, or attach it as another <code>.then</code> callback.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cy.wait(<span class="string">&#x27;@createUnion&#x27;</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; statusCode, body &#125; = response.response</span><br><span class="line">  <span class="keyword">const</span> org = body.data</span><br><span class="line"></span><br><span class="line">  <span class="comment">// validate the response</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> org.id</span><br><span class="line">&#125;).then(<span class="built_in">console</span>.log)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> you can print the value to the DevTools using <code>.then(console.log)</code> but a better idea is to print it to the Cypress Command Log with <code>.then(cy.log)</code>. See the video <a href="https://www.youtube.com/watch?v=SgTsCJCujNw">How to use Cypress cy.log command to output messages to the Command Log</a>.</p><p>In general, anything you get from the application page, or from another Cypress command must be used inside the <code>.then</code> callback to have its value set. I have two short videos explaining the above problem and how to write your tests correctly.</p><h3><span id="why-cylog-prints-null-or-undefined">Why cy.log prints null or undefined</span></h3><center><iframe width="560" height="315" src="https://www.youtube.com/embed/uGWWoq0ECY8" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h3><span id="when-to-use-cypress-then-callback-to-use-the-value">When To Use Cypress .Then Callback To Use The Value</span></h3><center><iframe width="560" height="315" src="https://www.youtube.com/embed/-aptS3yvqcc" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="fluent-programming">Fluent programming</span></h2><p>Now let&#39;s refactor the body of the <code>.then(...)</code> callback function. Currently it takes the <code>response</code> object from the intercept, runs multiple assertions against it, then yields the organization ID. Let&#39;s refactor it for clarity.</p><blockquote class="pullquote"><p>🎓 You can find the code from this section in my workshop &quot;Cypress Basics&quot; in the repo <a href="https://github.com/bahmutov/cypress-workshop-basics">bahmutov/cypress-workshop-basics</a>.</p></blockquote><p>Our first attempt mimics the user&#39;s question.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;validates and processes the intercept object&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>).as(<span class="string">&#x27;postTodo&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">&#x27;new todo&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> completed = <span class="literal">false</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.new-todo&#x27;</span>).type(title + <span class="string">&#x27;&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.wait(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">intercept</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// get the field from the intercept object</span></span><br><span class="line">      <span class="keyword">const</span> &#123; statusCode, body &#125; = intercept.response</span><br><span class="line">      <span class="comment">// confirm the status code is 201</span></span><br><span class="line">      expect(statusCode).to.eq(<span class="number">201</span>)</span><br><span class="line">      <span class="comment">// confirm some properties of the response data</span></span><br><span class="line">      expect(body.title).to.equal(title)</span><br><span class="line">      expect(body.completed).to.equal(completed)</span><br><span class="line">      <span class="comment">// return the field from the body object</span></span><br><span class="line">      <span class="keyword">return</span> body.id</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(cy.log)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test is green.</p><p><img src="../images/net-cy/response.png" alt="The test validates the response"></p><p>Let&#39;s look at the code. First, we are only interested in the property <code>response</code> from the intercept (there are a lot more!). Thus let&#39;s extract it using <a href="https://on.cypress.io/its">cy.its</a> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;extracts the response property first&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>).as(<span class="string">&#x27;postTodo&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">&#x27;new todo&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> completed = <span class="literal">false</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.new-todo&#x27;</span>).type(title + <span class="string">&#x27;&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.wait(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; statusCode, body &#125; = response</span><br><span class="line">      <span class="comment">// confirm the status code is 201</span></span><br><span class="line">      expect(statusCode).to.eq(<span class="number">201</span>)</span><br><span class="line">      <span class="comment">// confirm some properties of the response data</span></span><br><span class="line">      expect(body.title).to.equal(title)</span><br><span class="line">      expect(body.completed).to.equal(completed)</span><br><span class="line">      <span class="comment">// return the field from the body object</span></span><br><span class="line">      <span class="keyword">return</span> body.id</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(cy.log)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>It runs the same way. If you need to debug the intercept object, click on the &quot;ITS&quot; command and see it in the DevTools console.</p><p><img src="../images/net-cy/its.png" alt="Print the entire intercept object to the DevTools console"></p><p>Let&#39;s look at our assertions. Right now they offer very little to the developer aside from printing their value. Let&#39;s add a message to each assertion to make it clearer.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; statusCode, body &#125; = response</span><br><span class="line">  <span class="comment">// confirm the status code is 201</span></span><br><span class="line">  expect(statusCode, <span class="string">&#x27;status code&#x27;</span>).to.eq(<span class="number">201</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/net-cy/message.png" alt="Added message argument to the assertion"></p><p>Isn&#39;t the top assertion more informative than the next two? We can make it even better by using the specific Chai assertion for checking the property.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; body &#125; = response</span><br><span class="line">  <span class="comment">// confirm the status code is 201</span></span><br><span class="line">  expect(response).to.have.property(<span class="string">&#x27;statusCode&#x27;</span>, <span class="number">201</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/net-cy/property.png" alt="The property assertion has even more information"></p><p>If Cypress <a href="https://on.cypress.io/then">.then</a> command returns undefined and has no other Cypress commands, then its original <em>subject</em> value gets passed to the next command automatically. Thus we can move the <code>statusCode</code> check into its own <code>.then</code> callback to separate it from the response object checks.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cy.wait(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">  .its(<span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// confirm the status code is 201</span></span><br><span class="line">    expect(response).to.have.property(<span class="string">&#x27;statusCode&#x27;</span>, <span class="number">201</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; body &#125; = response</span><br><span class="line">    <span class="comment">// confirm some properties of the response data</span></span><br><span class="line">    expect(body.title).to.equal(title)</span><br><span class="line">    expect(body.completed).to.equal(completed)</span><br><span class="line">    <span class="comment">// return the field from the body object</span></span><br><span class="line">    <span class="keyword">return</span> body.id</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>The output looks the same as before, but now we can notice that we only deal with the <code>body</code> property from the <code>response</code> object. Let&#39;s apply <code>cy.its</code> command, just like we extracted the <code>response</code> from the <code>intercept</code> object.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cy.wait(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">  .its(<span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// confirm the status code is 201</span></span><br><span class="line">    expect(response).to.have.property(<span class="string">&#x27;statusCode&#x27;</span>, <span class="number">201</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">body</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// confirm some properties of the response data</span></span><br><span class="line">    expect(body.title).to.equal(title)</span><br><span class="line">    expect(body.completed).to.equal(completed)</span><br><span class="line">    <span class="comment">// return the field from the body object</span></span><br><span class="line">    <span class="keyword">return</span> body.id</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(cy.log)</span><br></pre></td></tr></table></figure><p><img src="../images/net-cy/body.png" alt="Using the body from the response"></p><p>Remember - the <code>cy.its</code> command automatically fails if the property does not exist on the object. It also accepts nested properties, so you could grab the <code>body</code> from the <code>intercept</code> object using <code>cy.wait(...).its(&#39;response.body&#39;)</code> syntax.</p><p>Now the last callback only deals with the properties of a single <code>body</code> object. We can confirm some of the properties using <code>deep.include</code> assertion.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cy.wait(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">  .its(<span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// confirm the status code is 201</span></span><br><span class="line">    expect(response).to.have.property(<span class="string">&#x27;statusCode&#x27;</span>, <span class="number">201</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">body</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// confirm some properties of the response data</span></span><br><span class="line">    expect(body).to.deep.include(&#123;</span><br><span class="line">      title,</span><br><span class="line">      completed</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// return the field from the body object</span></span><br><span class="line">    <span class="keyword">return</span> body.id</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>We cannot use <code>deep.equals</code> since we do not know the &quot;id&quot; property. For more assertion examples, see my <a href="https://glebbahmutov.com/cypress-examples/commands/assertions.html">Assertions</a> page.</p><p>Ok, so returning <code>body.id</code> at the end could use <code>cy.its</code> command, so let&#39;s move it out. Since we are not returning anything from the <code>.then(body =&gt; ...)</code> callback, the <code>body</code> wil be yielded to the next command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cy.wait(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">  .its(<span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// confirm the status code is 201</span></span><br><span class="line">    expect(response).to.have.property(<span class="string">&#x27;statusCode&#x27;</span>, <span class="number">201</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">body</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// confirm some properties of the response data</span></span><br><span class="line">    expect(body).to.deep.include(&#123;</span><br><span class="line">      title,</span><br><span class="line">      completed</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .its(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">  .then(cy.log)</span><br></pre></td></tr></table></figure><p>We now have just the assertions inside <code>.then</code> callback. Thus we can use the BDD <code>should</code> assertion instead.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cy.wait(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">  .its(<span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// confirm the status code is 201</span></span><br><span class="line">    expect(response).to.have.property(<span class="string">&#x27;statusCode&#x27;</span>, <span class="number">201</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;deep.include&#x27;</span>, &#123; title, completed &#125;)</span><br><span class="line">  .its(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">  .then(cy.log)</span><br></pre></td></tr></table></figure><p><img src="../images/net-cy/should.png" alt="BDD should assertion"></p><p>I hope the above test code transformation has shown some of the beauty and power of the Cypress fluent syntax where we can chain the commands and the assertions.</p><p><strong>Aside:</strong> we cannot use the BDD should assertion to verify the status code property like <code>should(&#39;have.property&#39;, &#39;statusCode&#39;, 201)</code> fluent syntax because <code>have.property</code> is one of just a few assertions that <em>change</em> the subject to the property value, while we need to keep the <code>response</code> object.</p><h3><span id="bonus-cy-spok">Bonus: cy-spok</span></h3><p>The test looks good, but there is one improvement we can make. I like the Command Log to be as useful as possible. The standard Chai assertions are good, but <a href="https://github.com/bahmutov/cy-spok">cy-spok</a> makes them perfect.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spok <span class="keyword">from</span> <span class="string">&#x27;cy-spok&#x27;</span></span><br><span class="line">cy.wait(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">  .its(<span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">  .should(</span><br><span class="line">    spok(&#123;</span><br><span class="line">      statusCode: <span class="number">201</span></span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">  .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">  .should(</span><br><span class="line">    spok(&#123;</span><br><span class="line">      title,</span><br><span class="line">      completed</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">  .its(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">  .then(cy.log)</span><br></pre></td></tr></table></figure><p>Look at the Command Log output - isn&#39;t this super helpful?</p><p><img src="../images/net-cy/spok.png" alt="Using cy-spok to write assertions"></p><p>The plugin <code>cy-spok</code> is built on top of <a href="https://github.com/thlorenz/spok">spok</a> which is <em>really</em> good at asserting nested objects and even checking built-in predicates. For example, we do not know the <code>id</code> of the item, but we know it is a string. Let&#39;s write a single assertion to verify the properties we can inside the entire intercept object.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spok <span class="keyword">from</span> <span class="string">&#x27;cy-spok&#x27;</span></span><br><span class="line">it(<span class="string">&#x27;checks the response using cy-spok&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>).as(<span class="string">&#x27;postTodo&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">&#x27;new todo&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> completed = <span class="literal">false</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.new-todo&#x27;</span>).type(title + <span class="string">&#x27;&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.wait(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">    .should(</span><br><span class="line">      spok(&#123;</span><br><span class="line">        statusCode: <span class="number">201</span>,</span><br><span class="line">        body: &#123;</span><br><span class="line">          title,</span><br><span class="line">          completed,</span><br><span class="line">          id: spok.string</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .its(<span class="string">&#x27;body.id&#x27;</span>)</span><br><span class="line">    .then(cy.log)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/net-cy/spok2.png" alt="Using cy-spok to verify the entire nested object"></p><p>Love it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently a user posted in the &lt;a href=&quot;https://gitter.im/cypress-io/cypress&quot;&gt;Cypress Gitter channel&lt;/a&gt; the following image and asked why
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Pick Tests To Run Using The Pull Request Text</title>
    <link href="https://glebbahmutov.com/blog/pick-tests-using-pull-request/"/>
    <id>https://glebbahmutov.com/blog/pick-tests-using-pull-request/</id>
    <published>2022-01-21T05:00:00.000Z</published>
    <updated>2022-01-20T21:39:57.565Z</updated>
    
    <content type="html"><![CDATA[<p>I have been looking closely at keeping the tests <a href="/blog/how-to-keep-cypress-tests-in-another-repo-with-circleci/" title="in a separate repo">in a separate repo</a> from the application. At Mercari US our frontend lives in its own repository, and triggers the Cypress tests in another repository using <a href="https://github.com/bahmutov/trigger-circleci-pipeline">trigger-circleci-pipeline</a> utility. We even report the test statuses back in the original repo using GitHub statuses via <a href="https://github.com/bahmutov/cypress-set-github-status">cypress-set-github-status</a> plugin. But there is a disconnect between opening a feature pull request and picking the tests to run. For speed, we run any changed specs in the test repo branch with the matching name, and then run all tests tagged <code>@sanity</code> (read how we tag the tests in the blog post <a href="/blog/tag-tests/" title="How To Tag And Run End-to-End Tests">How To Tag And Run End-to-End Tests</a>).</p><p>If the developer wants to run more tests, they can trigger the tests from the command line using the <a href="https://github.com/bahmutov/run-cy-on-ci">run-cy-on-ci</a> utility. For convenience, we also allow you to start a new test run via GitHub Actions manual workflow where you can pick the test tags to run via a web form.</p><p><img src="../images/tag-tests/flow-inputs.png" alt="Picking the test tags to run"></p><p>While the above approaches are ok, they are inconvenient. You have to trigger a <em>separate</em> test run, not tied to the original feature pull request. What if you could specify the tests to run <em>when opening</em> your pull request? This is what this blog post will show you.</p><h2><span id="the-application">The application</span></h2><p>For this blog post, I will use the <a href="https://github.com/bahmutov/todomvc-no-tests-vercel">bahmutov/todomvc-no-tests-vercel</a> repo. On every pull request, a preview environment is deployed. The tests live in their own repo <a href="https://github.com/bahmutov/todomvc-tests-circleci">bahmutov/todomvc-tests-circleci</a>. The tests are tagged, and let&#39;s use the utility <a href="https://github.com/bahmutov/find-cypress-specs">find-cypress-specs</a> to <a href="/blog/know-your-tests/" title="learn about them">learn about them</a>.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D find-cypress-specs</span><br><span class="line">+ find-cypress-specs@1.7.0</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;tags&quot;</span>: <span class="string">&quot;find-cypress-specs --tags&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;names&quot;</span>: <span class="string">&quot;find-cypress-specs --names&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ npm run names</span><br><span class="line"></span><br><span class="line">&gt; todomvc-tests-circleci@1.0.0 names</span><br><span class="line">&gt; find-cypress-specs --names</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cypress/integration/last-spec.js (1 test)</span><br><span class="line">└─ last test [@sanity]</span><br><span class="line"></span><br><span class="line">cypress/integration/log-spec.js (2 tests)</span><br><span class="line">└─ Log [@log]</span><br><span class="line">  ├─ logs message on startup [@sanity]</span><br><span class="line">  └─ logs message when adding a todo</span><br><span class="line"></span><br><span class="line">cypress/integration/second-spec.js (1 test)</span><br><span class="line">└─ completes second item [@sanity, @user]</span><br><span class="line"></span><br><span class="line">cypress/integration/spec.js (2 tests)</span><br><span class="line">├─ works</span><br><span class="line">└─ has no visit logic</span><br><span class="line"></span><br><span class="line">cypress/integration/third-spec.js (1 test)</span><br><span class="line">└─ third test</span><br><span class="line"></span><br><span class="line">found 5 specs (7 tests)</span><br></pre></td></tr></table></figure><p>Let&#39;s look at the tags applied to the tests</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ npm run tags</span><br><span class="line"></span><br><span class="line">&gt; todomvc-tests-circleci@1.0.0 tags</span><br><span class="line">&gt; find-cypress-specs --tags</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Tag      Tests</span><br><span class="line">-------  -----</span><br><span class="line">@log     2</span><br><span class="line">@sanity  3</span><br><span class="line">@user    1</span><br></pre></td></tr></table></figure><p>These are the tags we want to the user to pick when they make a new pull request to change the TodoMVC application behavior. Plus of course, the user might want to run all the tests without any filtering.</p><h2><span id="application-pull-request">Application pull request</span></h2><p>Let&#39;s create a pull request template in the application repo. It should be named <a href="https://github.com/bahmutov/todomvc-no-tests-vercel/blob/main/.github/PULL_REQUEST_TEMPLATE.md">.github/PULL_REQUEST_TEMPLATE.md</a> for GitHub to automatically use it when opening a new PR.</p><figure class="highlight md"><figcaption><span>.github/PULL_REQUEST_TEMPLATE.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Summary</span></span><br><span class="line"></span><br><span class="line"><span class="section">## Tests to run</span></span><br><span class="line"></span><br><span class="line">Please pick all tests you would like to run against this pull request</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> [ ] all tests</span><br><span class="line"><span class="bullet">-</span> [ ] tests tagged <span class="code">`@log`</span></span><br><span class="line"><span class="bullet">-</span> [ ] tests tagged <span class="code">`@sanity`</span></span><br><span class="line"><span class="bullet">-</span> [ ] tests tagged <span class="code">`@user`</span></span><br></pre></td></tr></table></figure><p>When a pull request is opened, the application gets deployed, triggering the <code>deployment_status</code> event. If the deployment has been successful, we trigger the tests pipeline in the tests repo. See the <a href="https://github.com/bahmutov/todomvc-no-tests-vercel/blob/main/.github/workflows/deploy.yml">deploy.yml</a> workflow for details, but we pass the URL to test, and the current commit SHA as test pipeline parameters to test the right thing</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export TEST_URL=$&#123;&#123; github.event.deployment_status.target_url &#125;&#125;</span><br><span class="line"></span><br><span class="line">npx trigger-circleci-pipeline \</span><br><span class="line">  --org bahmutov --project todomvc-tests-circleci --branch $&#123;BRANCH_NAME&#125; \</span><br><span class="line">  --parameters TEST_URL=$&#123;TEST_URL&#125;,TEST_BRANCH=$&#123;BRANCH_NAME&#125;,TEST_COMMIT=$&#123;GITHUB_SHA&#125;</span><br></pre></td></tr></table></figure><p>Sometimes we know the pull request number right away. In my situation, that number of unavailable. At least the head commit SHA was known, thus I could pass it to the test pipeline via <code>TEST_COMMIT=$&#123;GITHUB_SHA&#125;</code> parameter.</p><h2><span id="the-tests">The tests</span></h2><p>In the <a href="https://github.com/bahmutov/todomvc-tests-circleci/blob/main/.circleci/config.yml">bahmutov/todomvc-tests-circleci CircleCI workflow</a> we receive the <code>TEST_</code> parameters and run Cypress tests against them. But we also install the <a href="https://github.com/bahmutov/grep-tests-from-pull-requests">grep-tests-from-pull-requests</a> plugin and configure it.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D grep-tests-from-pull-requests</span><br><span class="line">+ grep-tests-from-pull-requests@1.1.0</span><br></pre></td></tr></table></figure><p>In the plugin file we put the <code>grep-tests-from-pull-requests</code> first, before the <code>cypress-grep</code> plugin.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (on, config) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">require</span>(<span class="string">&#x27;grep-tests-from-pull-requests&#x27;</span>)(on, config, &#123;</span><br><span class="line">    <span class="comment">// try to find checkbox lines in the pull request body with these tags</span></span><br><span class="line">    tags: [<span class="string">&#x27;@log&#x27;</span>, <span class="string">&#x27;@sanity&#x27;</span>, <span class="string">&#x27;@user&#x27;</span>],</span><br><span class="line">    <span class="comment">// repo with the pull request text to read</span></span><br><span class="line">    owner: <span class="string">&#x27;bahmutov&#x27;</span>,</span><br><span class="line">    repo: <span class="string">&#x27;todomvc-no-tests-vercel&#x27;</span>,</span><br><span class="line">    <span class="comment">// pass the pull request number in the above repo</span></span><br><span class="line">    <span class="comment">// we will grab the tests to run from the body of the pull request (if the number is known)</span></span><br><span class="line">    pull: config.env.pullRequest,</span><br><span class="line">    <span class="comment">// if the pull request number is unknown, pass the commit SHA</span></span><br><span class="line">    <span class="comment">// as a fallback. The plugin will try to find the PR with this head commit</span></span><br><span class="line">    commit: config.env.testCommit,</span><br><span class="line">    <span class="comment">// to get a private repo above, you might need a personal token</span></span><br><span class="line">    token: process.env.PERSONAL_GH_TOKEN || process.env.GITHUB_TOKEN,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// https://github.com/bahmutov/cypress-grep</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;cypress-grep/src/plugin&#x27;</span>)(config)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In my situation the pull request number is unknown, thus the plugin will try to list all pulls requests in the repo <code>bahmutov/todomvc-no-tests-vercel</code> and find the pull request with the head commit equal to the given SHA. See the <a href="https://github.com/bahmutov/todomvc-tests-circleci/blob/main/.circleci/config.yml">full CircleCI workflow file</a> and the <a href="https://github.com/bahmutov/todomvc-tests-circleci/blob/main/cypress/plugins/index.js">cypress/plugins/index.js</a>.</p><h2><span id="a-pull-request">A pull request</span></h2><p>Let&#39;s open a new pull request in the application repo.</p><p><img src="../images/pick-tests-using-pull-request/pr.png" alt="The pull request gets deployed"></p><p>When opening the pull request, I checked the <code>@user</code> line. The triggered CircleCI pipeline in the <code>todomvc-tests-circleci</code> shows the correct tests to run by tag. It has found the pull request number 11, read the Markdown text, and found the line with checked box for tag <code>@user</code></p><p><img src="../images/pick-tests-using-pull-request/grep-tag.png" alt="The plugin correctly found the tests we marked to run"></p><p>Only a single spec file with a single test has executed. Now let&#39;s say we want to execute all tests. We check the box <code>all tests</code> and push an empty commit.</p><p><img src="../images/pick-tests-using-pull-request/run-all-check.png" alt="Checked all tests box before pushing a new commit"></p><p>The option &quot;all: true&quot; overwrites all other options and all tests will execute</p><p><img src="../images/pick-tests-using-pull-request/all.png" alt="All tests have executed"></p><p><strong>Tip:</strong> for &quot;normal&quot; GitHub workflows, you can re-trigger the workflow when clicking or clearing the checkboxes using the pull request event with custom activation types:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">pr</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># run tests when the user opened / reopened a PR</span></span><br><span class="line">  <span class="comment"># or pushed a new commit (synchronize type)</span></span><br><span class="line">  <span class="comment"># and also run the selected tests when the user possible</span></span><br><span class="line">  <span class="comment"># checked a box with the type of the tests to run</span></span><br><span class="line">  <span class="comment"># https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">opened</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">synchronize</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">reopened</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">edited</span></span><br></pre></td></tr></table></figure><p>Nice!</p><h2><span id="bonus-1-status-checks">Bonus 1: status checks</span></h2><p>We want to see the feedback on each application pull request right there in the application pull request. Using <a href="https://github.com/bahmutov/cypress-set-github-status">cypress-set-github-status</a> plugin, you can report the Cypress test statuses back on the original commit. The plugin is set up very similarly to the <code>grep-tests-from-pull-requests</code> plugin. In the Cypress plugins file, point at the original repository and pass the commit and the token to set the status.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// when we are done, post the status to GitHub</span></span><br><span class="line"><span class="comment">// application repo, using the passed commit SHA</span></span><br><span class="line"><span class="comment">// https://github.com/bahmutov/cypress-set-github-status</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;cypress-set-github-status&#x27;</span>)(on, config, &#123;</span><br><span class="line">  owner: <span class="string">&#x27;bahmutov&#x27;</span>,</span><br><span class="line">  repo: <span class="string">&#x27;todomvc-no-tests-vercel&#x27;</span>,</span><br><span class="line">  commit: config.env.testCommit || process.env.TEST_COMMIT,</span><br><span class="line">  token: process.env.GITHUB_TOKEN || process.env.PERSONAL_GH_TOKEN,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>In the pull request I have used, the statuses are displayed using my GitHub profile, since I am using my personal GH token.</p><p><img src="../images/pick-tests-using-pull-request/statuses.png" alt="The Cypress test statuses displayed on the original application PR"></p><p>You can see the status checks for yourself in the PR <a href="https://github.com/bahmutov/todomvc-no-tests-vercel/pull/11">#11</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have been looking closely at keeping the tests &lt;a href=&quot;/blog/how-to-keep-cypress-tests-in-another-repo-with-circleci/&quot; title=&quot;in a sep
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="advice" scheme="https://glebbahmutov.com/blog/tags/advice/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>Visit Non-HTML Page</title>
    <link href="https://glebbahmutov.com/blog/visit-non-html-page/"/>
    <id>https://glebbahmutov.com/blog/visit-non-html-page/</id>
    <published>2022-01-20T05:00:00.000Z</published>
    <updated>2022-01-20T15:06:53.327Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine you have a REST API endpoint that returns a JSON object. Can you see that JSON response in a Cypress test? In the blog post <a href="/blog/test-plain-or-markdown-file/" title="Test Plain Or Markdown File Using Cypress">Test Plain Or Markdown File Using Cypress</a> I have shown how to request a plain text resource using <a href="https://on.cypress.io/request">cy.request</a> and write the received response into the empty application document using <code>document.write</code>. In this blog post I will show an alternative approach using <a href="https://on.cypress.io/visit">cy.visit</a> + <a href="https://on.cypress.io/intercept">cy.intercept</a> commands.</p><blockquote class="pullquote"><p>🎁 You can find the code shown in this blog post in my <a href="https://github.com/bahmutov/cypress-workshop-basics">Cypress Basics Workshop</a>.</p></blockquote><p>Let&#39;s say we set our backend with the data items from the fixture file. The initial code looks like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.fixture(<span class="string">&#x27;two-items&#x27;</span>).as(<span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">beforeEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// by using &quot;function () &#123;&#125;&quot; callback we can access</span></span><br><span class="line">  <span class="comment">// the alias created in the previous hook using &quot;this.&lt;name&gt;&quot;</span></span><br><span class="line">  cy.task(<span class="string">&#x27;resetData&#x27;</span>, &#123; <span class="attr">todos</span>: <span class="built_in">this</span>.todos &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Now we want to visit the <code>/todos/1</code> resource to confirm the JSON is returned.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;tries to visit JSON resource&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/todos/1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We get an error.</p><p><img src="../images/visit-non-html-page/visit-json.png" alt="Trying to visit a JSON resource"></p><p>Hmm, how do we &quot;convince&quot; Cypress that the received response should be treated as HTML text? By intercepting and overwriting the response content type header!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;visits the todo JSON response&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/todos/*&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">    req.continue(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.headers[<span class="string">&#x27;content-type&#x27;</span>].includes(<span class="string">&#x27;application/json&#x27;</span>)) &#123;</span><br><span class="line">        res.headers[<span class="string">&#x27;content-type&#x27;</span>] = <span class="string">&#x27;text/html&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      req.body = <span class="string">`&lt;body&gt;&lt;pre&gt;<span class="subst">$&#123;res.body&#125;</span>&lt;/pre&gt;&lt;/body&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).as(<span class="string">&#x27;todo&#x27;</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/todos/1&#x27;</span>)</span><br><span class="line">  <span class="comment">// make sure you intercept has worked</span></span><br><span class="line">  cy.wait(<span class="string">&#x27;@todo&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above works.</p><p><img src="../images/visit-non-html-page/visit-html.png" alt="Treat JSON response as HTML"></p><p>I like showing the response using this approach because it becomes visible in the test video, and can be captured using <a href="https://on.cypress.io/screenshot">cy.screenshot</a> command.</p><p>Let&#39;s confirm the title of the first todo is shown on the page. Because we have used <code>function () &#123; ... &#125;</code> syntax as the test callback, we can access the alias <code>todos</code> using <code>this.todos</code> inside the test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;/todos/1&#x27;</span>)</span><br><span class="line"><span class="comment">// make sure you intercept has worked</span></span><br><span class="line">cy.wait(<span class="string">&#x27;@todo&#x27;</span>)</span><br><span class="line"><span class="comment">// check the text shown in the browser</span></span><br><span class="line">cy.contains(<span class="built_in">this</span>.todos[<span class="number">0</span>].title)</span><br></pre></td></tr></table></figure><p>If you hover over the <code>CONTAINS</code> command, notice the found DOM element on the page is not highlighted.</p><p><img src="../images/visit-non-html-page/contains.png" alt="The found element is not highlighted"></p><p>This is because the response does not include the <code>&lt;body&gt;</code> element. Let&#39;s wrap our JSON response in some markup and make it prettier.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cy.intercept(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/todos/*&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">  req.continue(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.headers[<span class="string">&#x27;content-type&#x27;</span>].includes(<span class="string">&#x27;application/json&#x27;</span>)) &#123;</span><br><span class="line">      res.headers[<span class="string">&#x27;content-type&#x27;</span>] = <span class="string">&#x27;text/html&#x27;</span></span><br><span class="line">      <span class="keyword">const</span> text = <span class="string">`&lt;body&gt;&lt;pre&gt;<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(</span></span></span><br><span class="line"><span class="string"><span class="subst">        res.body,</span></span></span><br><span class="line"><span class="string"><span class="subst">        <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="string"><span class="subst">        <span class="number">2</span></span></span></span><br><span class="line"><span class="string"><span class="subst">      )&#125;</span>&lt;/pre&gt;&lt;/body&gt;`</span></span><br><span class="line">      res.send(text)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).as(<span class="string">&#x27;todo&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Now the element is highlighted correctly.</p><p><img src="../images/visit-non-html-page/json-text.png" alt="The found element is highlighted if we put a proper BODY markup"></p><p>The last part I want to show is how to validate the URL using regular expression named captured groups. The URL should have the todo ID &quot;1&quot;. We could split the pathname and get the id by index, but that is hard to maintain.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cy.location(<span class="string">&#x27;pathname&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;/todos/&#x27;</span>)</span><br><span class="line">  <span class="comment">// we have a string, which we can split by &#x27;/&#x27;</span></span><br><span class="line">  .invoke(<span class="string">&#x27;split&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// and get the 3rd item in the array [&quot;&quot;, &quot;todos&quot;, &quot;1&quot;]</span></span><br><span class="line">  .its(<span class="number">2</span>)</span><br><span class="line">  <span class="comment">// and verify this is the same as the item ID</span></span><br><span class="line">  .should(<span class="string">&#x27;eq&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure><p>If the resources move from <code>/todos/1</code> to <code>/api/todos/1</code> finding all the test places where we get the ID part is going to be tricky. Instead let&#39;s use a regular expression to grab the ID via <a href="https://javascript.info/regexp-groups">named capture group</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.location(<span class="string">&#x27;pathname&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">  <span class="comment">// use named capture group to get the ID from the string</span></span><br><span class="line">  .invoke(<span class="string">&#x27;match&#x27;</span>, <span class="regexp">/\/todos\/(?&lt;id&gt;\d+)/</span>)</span><br><span class="line">  .its(<span class="string">&#x27;groups.id&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/visit-non-html-page/id.png" alt="Use a named capture group to extract the ID from the URL"></p><p>Beautiful.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine you have a REST API endpoint that returns a JSON object. Can you see that JSON response in a Cypress test? In the blog post &lt;a hr
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Know Your Tests</title>
    <link href="https://glebbahmutov.com/blog/know-your-tests/"/>
    <id>https://glebbahmutov.com/blog/know-your-tests/</id>
    <published>2022-01-14T05:00:00.000Z</published>
    <updated>2022-01-14T00:10:08.253Z</updated>
    
    <content type="html"><![CDATA[<p>If you have a repository with large number of Cypress specs, pretty soon they get out of control. What if you have 200 tests, how do you find which tests cover what feature? How do you run all the tests testing X or Y? I the blog post <a href="/blog/tag-tests/" title="How To Tag And Run End-to-End Tests">How To Tag And Run End-to-End Tests</a> I have described how we organize, tag, and run end-to-end tests at Mercari US. In this blog post I will demo a little CLI utility <a href="https://github.com/bahmutov/find-cypress-specs">find-cypress-specs</a> I use to keep track of the tests in the project.</p><blockquote class="pullquote"><p>📦 You can find the example repository with the specs I am using in this blog post at <a href="https://github.com/bahmutov/test-todomvc-using-app-actions">bahmutov/test-todomvc-using-app-actions</a>.</p></blockquote><h2><span id="print-just-the-specs">Print just the specs</span></h2><p>Cypress finds its integration specs inside <code>cypress/integration</code> folder - but you might have renamed it into <code>tests/e2e</code>. So just to find the spec files requires looking at the <code>cypress.json</code> file and using the config settings to glob for files. For example, in my project I ignore the <code>utils.js</code> and some other files.</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;ignoreTestFiles&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;*.page.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;utils.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;*.d.ts&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By default <code>find-cypress-specs</code> simply finds spec files following the settings from my configuration file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs</span><br><span class="line">cypress&#x2F;integration&#x2F;adding-spec.js,cypress&#x2F;integration&#x2F;clear-completed-spec.js,</span><br><span class="line">cypress&#x2F;integration&#x2F;complete-all-spec.js,cypress&#x2F;integration&#x2F;editing-spec.js,</span><br><span class="line">cypress&#x2F;integration&#x2F;item-spec.js,cypress&#x2F;integration&#x2F;persistence-spec.js,</span><br><span class="line">cypress&#x2F;integration&#x2F;routing-spec.js,cypress&#x2F;integration&#x2F;spec.js</span><br></pre></td></tr></table></figure><p>What if we want to see the tests and the suites inside each spec file?</p><h2><span id="print-all-tests">Print all tests</span></h2><p>Let&#39;s get an idea of what is inside each spec file. Using <code>find-cypress-specs --names</code> get the tests and their tags:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --names</span><br><span class="line"></span><br><span class="line">cypress&#x2F;integration&#x2F;adding-spec.js (7 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ New Todo [@adding]</span><br><span class="line">  │ ├─ should allow me to add todo items [@regression]</span><br><span class="line">  │ ├─ adds items [@sanity, @regression]</span><br><span class="line">  │ ├─ should clear text input field when an item is added [@regression]</span><br><span class="line">  │ ├─ should append new items to the bottom of the list</span><br><span class="line">  │ ├─ should trim text input [@regression]</span><br><span class="line">  │ └─ should show #main and #footer when items added</span><br><span class="line">  └─ Adds items (spy example)</span><br><span class="line">    └─ calls inform</span><br><span class="line"></span><br><span class="line">cypress&#x2F;integration&#x2F;clear-completed-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Clear completed button [@complete]</span><br><span class="line">    ├─ should display the correct text</span><br><span class="line">    ├─ should remove completed items when clicked [@sanity, @regression]</span><br><span class="line">    └─ should be hidden when there are no items that are completed [@regression]</span><br><span class="line"></span><br><span class="line">cypress&#x2F;integration&#x2F;complete-all-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Mark all as completed [@complete]</span><br><span class="line">    ├─ should allow me to mark all items as completed [@regression]</span><br><span class="line">    ├─ should allow me to clear the complete state of all items [@sanity, @regression]</span><br><span class="line">    └─ complete all checkbox should update state when items are completed &#x2F; cleared</span><br><span class="line"></span><br><span class="line">cypress&#x2F;integration&#x2F;editing-spec.js (5 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Editing [@editing]</span><br><span class="line">    ├─ should hide other controls when editing</span><br><span class="line">    ├─ should save edits on blur [@sanity]</span><br><span class="line">    ├─ should trim entered text</span><br><span class="line">    ├─ should remove the item if an empty text string was entered</span><br><span class="line">    └─ should cancel edits on escape</span><br><span class="line"></span><br><span class="line">cypress&#x2F;integration&#x2F;item-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Item [@item]</span><br><span class="line">    ├─ should allow me to mark items as complete [@sanity, @regression]</span><br><span class="line">    ├─ should allow me to un-mark items as complete [@regression]</span><br><span class="line">    └─ should allow me to edit an item</span><br><span class="line"></span><br><span class="line">cypress&#x2F;integration&#x2F;persistence-spec.js (1 test)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Persistence [@persistence]</span><br><span class="line">    └─ should persist its data [@sanity, @regression]</span><br><span class="line"></span><br><span class="line">cypress&#x2F;integration&#x2F;routing-spec.js (5 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Routing [@routing]</span><br><span class="line">    ├─ should allow me to display active items [@regression]</span><br><span class="line">    ├─ should respect the back button</span><br><span class="line">    ├─ should allow me to display completed items [@sanity, @regression]</span><br><span class="line">    ├─ should allow me to display all items [@regression]</span><br><span class="line">    └─ should highlight the currently applied filter</span><br><span class="line"></span><br><span class="line">cypress&#x2F;integration&#x2F;spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ When page is initially opened [@regression]</span><br><span class="line">  │ └─ should focus on the todo input field</span><br><span class="line">  ├─ No Todos</span><br><span class="line">  │ └─ should hide #main and #footer [@regression]</span><br><span class="line">  └─ Counter</span><br><span class="line">    └─ should display the current number of todo items [@sanity, @regression]</span><br><span class="line"></span><br><span class="line">found 8 specs (30 tests)</span><br></pre></td></tr></table></figure><p>Ughh, the line height on my blog separates the individual lines, in the terminal it looks much better, maybe I should add <a href="https://github.com/bahmutov/find-cypress-specs/issues/5">some color</a></p><p><img src="../images/know-your-tests/terminal.png" alt="find-cypress-specs --names output in the terminal"></p><p>Great, what if we had some tests <a href="/blog/cypress-test-statuses/" title="pending">pending</a>? The <code>find-cypress-specs</code> would tell us.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cypress&#x2F;integration&#x2F;spec.js (3 tests, 1 pending)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ When page is initially opened [@regression]</span><br><span class="line">  │ └─ should focus on the todo input field</span><br><span class="line">  ├─ No Todos</span><br><span class="line">  │ └─ should hide #main and #footer [@regression]</span><br><span class="line">  └─ Counter</span><br><span class="line">    └⊙ should display the current number of todo items [@sanity, @regression]</span><br><span class="line"></span><br><span class="line">found 8 specs (30 tests, 1 pending)</span><br></pre></td></tr></table></figure><p>Each skipped block / test is marked and the count is shown. Pending tests are warning signs: they are either flaky or test a feature that is not working. Like commented out code, they eventually become a historical anomaly and must be removed.</p><h2><span id="print-and-count-the-tags">Print and count the tags</span></h2><p>Some tests have their own tags, and the suites might have their own tags. The suite tags apply to the tests inside them. We can count the tags across all specs and report the numbers.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --tags</span><br><span class="line"></span><br><span class="line">Tag           Tests</span><br><span class="line">------------  -----</span><br><span class="line">@adding       6</span><br><span class="line">@complete     6</span><br><span class="line">@editing      5</span><br><span class="line">@item         3</span><br><span class="line">@persistence  1</span><br><span class="line">@regression   17</span><br><span class="line">@routing      5</span><br><span class="line">@sanity       8</span><br></pre></td></tr></table></figure><p>Nice, we have tags covering individual features like <code>@editing</code> and <code>@routing</code>, and a few coverage sets of tests like <code>@sanity</code> and <code>@coverage</code>. These numbers are <em>effective</em> tags - if a tag is present on the parent suite, it applies and counts towards each test inside.</p><h2><span id="tips-for-finding-tests">Tips for finding tests</span></h2><p>I love looking at tests using <a href="https://github.com/bahmutov/find-cypress-specs">find-cypress-specs</a>.</p><h3><span id="find-all-tests-with-a-tag">Find all tests with a tag</span></h3><p>To only show the tests tagged <code>@sanity</code>, use the <code>grep</code> CLI utility.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --names | grep @sanity</span><br><span class="line">  │ ├─ adds items [@sanity]</span><br><span class="line">    ├─ should remove completed items when clicked [@sanity]</span><br><span class="line">    ├─ should allow me to clear the complete state of all items [@sanity]</span><br><span class="line">    ├─ should save edits on blur [@sanity]</span><br><span class="line">    ├─ should allow me to mark items as complete [@sanity]</span><br><span class="line">    └─ should persist its data [@sanity]</span><br><span class="line">    ├─ should allow me to display completed items [@sanity]</span><br><span class="line">    └─ should display the current number of todo items [@sanity]</span><br></pre></td></tr></table></figure><p>To count the number of <code>@sanity</code> tests, pipe the output from the <code>grep</code> CLI utility to <code>wc</code> utility</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --names | grep @sanity | wc -l</span><br><span class="line">       8</span><br></pre></td></tr></table></figure><p>I must say this is very crude way, since it only supports tags on the test level. Follow my work in the repository to see if I release a better implementation.</p><h3><span id="find-test-with-its-suite">Find test with its suite</span></h3><p>To find a test by name and print its suite and file, use <code>grep -B &lt;N&gt;</code> to print N text lines before the match.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --names | grep &#x27;adds items&#x27; -B 4</span><br><span class="line">cypress/integration/adding-spec.js (7 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ New Todo [@adding]</span><br><span class="line">  │ ├─ should allow me to add todo items</span><br><span class="line">  │ ├─ adds items [@sanity]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you have a repository with large number of Cypress specs, pretty soon they get out of control. What if you have 200 tests, how do you 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>How To Tag And Run End-to-End Tests</title>
    <link href="https://glebbahmutov.com/blog/tag-tests/"/>
    <id>https://glebbahmutov.com/blog/tag-tests/</id>
    <published>2022-01-10T05:00:00.000Z</published>
    <updated>2022-01-13T20:32:03.677Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s say you have hundreds of end-to-end tests (this is our current situation at Mercari US). Running the tests in parallel makes the test run <a href="/blog/parallel-cypress-tests-gh-action/" title="faster">faster</a>, but there is a problem. If someone inside the organization wants to change how some internal service operates, or changes a particular database field, you do not want to run all the tests. Or at least, you want to run the tests for that product area first to provide fast and useful feedback. This is how I organize and tag my end-to-end tests and run them.</p><blockquote class="pullquote"><p>🧰 I will be using the repo <a href="https://github.com/bahmutov/test-todomvc-using-app-actions">bahmutov/test-todomvc-using-app-actions</a> as my example. It only has about 30 tests, but the lessons scale even better when the number of tests is large.</p></blockquote><!-- toc --><ul><li><a href="#organize-the-tests-by-feature">Organize the tests by feature</a></li><li><a href="#run-any-changed-tests-first">Run any changed tests first</a></li><li><a href="#the-sanity-tag">The sanity tag</a></li><li><a href="#all-tests">All tests</a></li><li><a href="#run-all-tests-with-a-tag-on-ci">Run all tests with a tag on CI</a><ul><li><a href="#circleci">CircleCI</a></li><li><a href="#github-actions">GitHub Actions</a></li><li><a href="#separate-jobs">Separate jobs</a></li></ul></li><li><a href="#the-regression-tag">The regression tag</a></li><li><a href="#the-final-tag-organization">The final tag organization</a></li><li><a href="#bonus-1-github-triggers-circleci">Bonus 1: GitHub triggers CircleCI</a></li><li><a href="#bonus-2-when-you-have-a-lot-of-test-tags">Bonus 2: When you have a lot of test tags</a></li></ul><!-- tocstop --><h2><span id="organize-the-tests-by-feature">Organize the tests by feature</span></h2><p>The first thing I do is to split a single long spec file into separate spec files. Each spec file is focused on a particular application feature. I try to keep the spec duration under two minutes, and I <a href="/blog/split-spec/" title="split long tests">split long tests</a> to make them easier to run. Currently I have 8 specs in the project:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs</span><br><span class="line">cypress&#x2F;integration&#x2F;adding-spec.js,cypress&#x2F;integration&#x2F;clear-completed-spec.js,</span><br><span class="line">cypress&#x2F;integration&#x2F;complete-all-spec.js,cypress&#x2F;integration&#x2F;editing-spec.js,</span><br><span class="line">cypress&#x2F;integration&#x2F;item-spec.js,cypress&#x2F;integration&#x2F;persistence-spec.js,</span><br><span class="line">cypress&#x2F;integration&#x2F;routing-spec.js,cypress&#x2F;integration&#x2F;spec.js</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> I will use <a href="https://github.com/bahmutov/find-cypress-specs">find-cypress-specs</a> utility to print specs and test names.</p><p>In each spec file, I add a tag to the suite of tests using the <a href="https://github.com/cypress-io/cypress-grep">cypress-grep</a> convention. For example, the tests related to routing are tagged <code>@routing</code>. The <code>@</code> character has no special meaning, it just makes it simpler to find it in the source code.</p><figure class="highlight js"><figcaption><span>cypress/integration/routing-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;TodoMVC&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  context(<span class="string">&#x27;Routing&#x27;</span>, &#123; <span class="attr">tags</span>: <span class="string">&#x27;@routing&#x27;</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    it(<span class="string">&#x27;should allow me to display active items&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    it(<span class="string">&#x27;should respect the back button&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I can see all tests and their tags using <a href="https://github.com/bahmutov/find-cypress-specs">find-cypress-specs</a> with <code>--names</code> argument.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --names</span><br><span class="line"></span><br><span class="line">cypress/integration/adding-spec.js (7 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ New Todo [@adding]</span><br><span class="line">  │ ├─ should allow me to add todo items</span><br><span class="line">  │ ├─ adds items</span><br><span class="line">  │ ├─ should clear text input field when an item is added</span><br><span class="line">  │ ├─ should append new items to the bottom of the list</span><br><span class="line">  │ ├─ should trim text input</span><br><span class="line">  │ └─ should show #main and #footer when items added</span><br><span class="line">  └─ Adds items (spy example)</span><br><span class="line">    └─ calls inform</span><br><span class="line"></span><br><span class="line">cypress/integration/clear-completed-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Clear completed button [@complete]</span><br><span class="line">    ├─ should display the correct text</span><br><span class="line">    ├─ should remove completed items when clicked</span><br><span class="line">    └─ should be hidden when there are no items that are completed</span><br><span class="line"></span><br><span class="line">cypress/integration/complete-all-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Mark all as completed [@complete]</span><br><span class="line">    ├─ should allow me to mark all items as completed</span><br><span class="line">    ├─ should allow me to clear the complete state of all items</span><br><span class="line">    └─ complete all checkbox should update state when items are completed / cleared</span><br><span class="line"></span><br><span class="line">cypress/integration/editing-spec.js (5 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Editing [@editing]</span><br><span class="line">    ├─ should hide other controls when editing</span><br><span class="line">    ├─ should save edits on blur</span><br><span class="line">    ├─ should trim entered text</span><br><span class="line">    ├─ should remove the item if an empty text string was entered</span><br><span class="line">    └─ should cancel edits on escape</span><br><span class="line"></span><br><span class="line">cypress/integration/item-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Item [@item]</span><br><span class="line">    ├─ should allow me to mark items as complete</span><br><span class="line">    ├─ should allow me to un-mark items as complete</span><br><span class="line">    └─ should allow me to edit an item</span><br><span class="line"></span><br><span class="line">cypress/integration/persistence-spec.js (1 test)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Persistence [@persistence]</span><br><span class="line">    └─ should persist its data</span><br><span class="line"></span><br><span class="line">cypress/integration/routing-spec.js (5 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Routing [@routing]</span><br><span class="line">    ├─ should allow me to display active items</span><br><span class="line">    ├─ should respect the back button</span><br><span class="line">    ├─ should allow me to display completed items</span><br><span class="line">    ├─ should allow me to display all items</span><br><span class="line">    └─ should highlight the currently applied filter</span><br><span class="line"></span><br><span class="line">cypress/integration/spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ When page is initially opened</span><br><span class="line">  │ └─ should focus on the todo input field</span><br><span class="line">  ├─ No Todos</span><br><span class="line">  │ └─ should hide #main and #footer</span><br><span class="line">  └─ Counter</span><br><span class="line">    └─ should display the current number of todo items</span><br><span class="line"></span><br><span class="line">found 8 specs and 30 tests</span><br></pre></td></tr></table></figure><p>Not all tests need tags. For example, the last <code>spec.js</code> collects miscellaneous tests without any tags.</p><h2><span id="run-any-changed-tests-first">Run any changed tests first</span></h2><p>I have shown how to run the changed specs first, see <a href="/blog/faster-ci-feedback/" title="GitHub Actions post">GitHub Actions post</a> or <a href="/blog/faster-ci-feedback-on-circleci/" title="CircleCI post">CircleCI post</a>. In my example application, I am using CircleCI, here is how I run the changed specs before running all tests. You can find the full CircleCI config file at <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/blob/master/circle.yml">circle.yml</a>.</p><figure class="highlight yml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="comment"># https://github.com/cypress-io/circleci-orb</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@1.29.0</span></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Run</span> <span class="string">changed</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line">            <span class="comment"># stop if on master branch - all tests should run there</span></span><br><span class="line">            <span class="string">if</span> [ <span class="string">&quot;$CIRCLE_BRANCH&quot;</span> <span class="string">=</span> <span class="string">&quot;master&quot;</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">              <span class="string">echo</span> <span class="string">&quot;Default branch, will run all tests&quot;</span></span><br><span class="line">              <span class="string">exit</span> <span class="number">0</span></span><br><span class="line">            <span class="string">fi</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># be careful about counting the lines</span></span><br><span class="line">            <span class="string">specsLines=$(git</span> <span class="string">diff</span> <span class="string">--name-only</span> <span class="string">--diff-filter=AMR</span> <span class="string">origin/master</span> <span class="string">|</span> &#123; <span class="string">grep</span> <span class="string">cypress/integration</span> <span class="string">||</span> <span class="literal">true</span><span class="string">;</span> &#125;<span class="string">)</span></span><br><span class="line">            <span class="string">n=$(echo</span> <span class="string">$specsLines</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">&#x27;/^\s*$/d&#x27;</span> <span class="string">|</span> <span class="string">wc</span> <span class="string">-l</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-d</span> <span class="string">&#x27; &#x27;</span><span class="string">)</span></span><br><span class="line">            <span class="string">specs=$(echo</span> <span class="string">$specsLines</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">&#x27;/^\s*$/d&#x27;</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">&#x27;\n&#x27;</span> <span class="string">&#x27;,&#x27;</span><span class="string">)</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;Changed and added $&#123;n&#125; Cypress specs&quot;</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">$&#123;specs&#125;</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="string">if</span> [ <span class="string">$</span>&#123;<span class="string">n</span>&#125; <span class="string">-lt</span> <span class="number">1</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">              <span class="string">echo</span> <span class="string">&quot;No Cypress specs changed, exiting...&quot;</span></span><br><span class="line">              <span class="string">exit</span> <span class="number">0</span></span><br><span class="line">            <span class="string">fi</span></span><br><span class="line">            <span class="comment"># we have to form the Cypress run command ourselves</span></span><br><span class="line">            <span class="string">npx</span> <span class="string">cypress</span> <span class="string">run</span> <span class="string">--spec</span> <span class="string">$&#123;specs&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Run</span> <span class="string">all</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">requires:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Run</span> <span class="string">changed</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">build:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">print-tests</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>If we push a branch <code>change1</code> where we just change something in <code>cypress/integration/routing.js</code> file, we see that test executed first.</p><p><img src="../images/tag-tests/workflow.png" alt="Workflow with two jobs"></p><p>Inside the &quot;Run changed tests&quot; job, Cypress shows the specs it is about to execute.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Changed and added 1 Cypress specs</span><br><span class="line">cypress/integration/complete-all-spec.js,</span><br><span class="line">...</span><br><span class="line">====================================================================================================</span><br><span class="line"></span><br><span class="line">  (Run Starting)</span><br><span class="line"></span><br><span class="line">  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">  │ Cypress:        9.2.0                                                                          │</span><br><span class="line">  │ Browser:        Electron 94 (headless)                                                         │</span><br><span class="line">  │ Node Version:   v12.19.0 (/usr/local/bin/node)                                                 │</span><br><span class="line">  │ Specs:          1 found (complete-all-spec.js)                                                 │</span><br><span class="line">  │ Searched:       cypress/integration/complete-all-spec.js,                                      │</span><br><span class="line">  └────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>Running the changed tests first gives us fast feedback. If the changed tests pass, all tests execute to confirm the application works. Notice that running the changed tests is much faster compared to running all tests.</p><p><img src="../images/tag-tests/timing.png" alt="The changed specs job is shorter than running all specs job"></p><h2><span id="the-sanity-tag">The sanity tag</span></h2><p>As the number of specs grows, running all tests on every pull request becomes a burden on the infrastructure and CI resources. Thus I recommend creating a small set of sanity tests, with one test per feature. We can tag these tests <code>@sanity</code> and run on every pull request by default. Here are the tagged tests</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --names</span><br><span class="line"></span><br><span class="line">cypress/integration/adding-spec.js (7 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ New Todo [@adding]</span><br><span class="line">  │ ├─ should allow me to add todo items</span><br><span class="line">  │ ├─ adds items [@sanity]</span><br><span class="line">  │ ├─ should clear text input field when an item is added</span><br><span class="line">  │ ├─ should append new items to the bottom of the list</span><br><span class="line">  │ ├─ should trim text input</span><br><span class="line">  │ └─ should show #main and #footer when items added</span><br><span class="line">  └─ Adds items (spy example)</span><br><span class="line">    └─ calls inform</span><br><span class="line"></span><br><span class="line">cypress/integration/clear-completed-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Clear completed button [@complete]</span><br><span class="line">    ├─ should display the correct text</span><br><span class="line">    ├─ should remove completed items when clicked [@sanity]</span><br><span class="line">    └─ should be hidden when there are no items that are completed</span><br><span class="line"></span><br><span class="line">cypress/integration/complete-all-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Mark all as completed [@complete]</span><br><span class="line">    ├─ should allow me to mark all items as completed</span><br><span class="line">    ├─ should allow me to clear the complete state of all items [@sanity]</span><br><span class="line">    └─ complete all checkbox should update state when items are completed / cleared</span><br><span class="line"></span><br><span class="line">cypress/integration/editing-spec.js (5 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Editing [@editing]</span><br><span class="line">    ├─ should hide other controls when editing</span><br><span class="line">    ├─ should save edits on blur [@sanity]</span><br><span class="line">    ├─ should trim entered text</span><br><span class="line">    ├─ should remove the item if an empty text string was entered</span><br><span class="line">    └─ should cancel edits on escape</span><br><span class="line"></span><br><span class="line">cypress/integration/item-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Item [@item]</span><br><span class="line">    ├─ should allow me to mark items as complete [@sanity]</span><br><span class="line">    ├─ should allow me to un-mark items as complete</span><br><span class="line">    └─ should allow me to edit an item</span><br><span class="line"></span><br><span class="line">cypress/integration/persistence-spec.js (1 test)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Persistence [@persistence]</span><br><span class="line">    └─ should persist its data [@sanity]</span><br><span class="line"></span><br><span class="line">cypress/integration/routing-spec.js (5 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Routing [@routing]</span><br><span class="line">    ├─ should allow me to display active items</span><br><span class="line">    ├─ should respect the back button</span><br><span class="line">    ├─ should allow me to display completed items [@sanity]</span><br><span class="line">    ├─ should allow me to display all items</span><br><span class="line">    └─ should highlight the currently applied filter</span><br><span class="line"></span><br><span class="line">cypress/integration/spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ When page is initially opened</span><br><span class="line">  │ └─ should focus on the todo input field</span><br><span class="line">  ├─ No Todos</span><br><span class="line">  │ └─ should hide #main and #footer</span><br><span class="line">  └─ Counter</span><br><span class="line">    └─ should display the current number of todo items [@sanity]</span><br><span class="line"></span><br><span class="line">found 8 specs and 30 tests</span><br></pre></td></tr></table></figure><p>We can run the sanity tests instead of all the tests. Let&#39;s modify the &quot;Run all specs&quot; job by passing <code>grepTags</code> parameter through the Cypress environment variables. This is how you control the <code>cypress-grep</code> plugin.</p><figure class="highlight yml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Run</span> <span class="string">sanity</span> <span class="string">tests</span></span><br><span class="line">    <span class="attr">requires:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Run</span> <span class="string">changed</span> <span class="string">tests</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">print-tests</span></span><br><span class="line">    <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">env:</span> <span class="string">grepTags=@sanity</span></span><br></pre></td></tr></table></figure><p>If you look at the CircleCI output, you can see that cypress-grep plugin is working</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cypress-grep: filtering using tag &quot;@sanity&quot;</span><br><span class="line">cypress-grep: will omit filtered tests</span><br><span class="line">cypress-grep: filtering specs using tag &quot;@sanity&quot;</span><br></pre></td></tr></table></figure><p>The final test run only executed 8 tests.</p><p><img src="../images/tag-tests/eight.png" alt="CircleCI job only ran 8 sanity tests"></p><p><strong>Bonus:</strong> running just the sanity tests and skipping the rest saves on your <a href="https://www.cypress.io/pricing/">Cypress Dashboard</a> bill 💸</p><h2><span id="all-tests">All tests</span></h2><p>Hmm, we should still run all tests sometimes. The best solution is to run all tests periodically, for example every night, plus on demand by triggering the workflow using something like <a href="https://github.com/bahmutov/run-cy-on-ci">bahmutov/run-cy-on-ci</a>. I have <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/commit/89d80d20388d4b913c4131b19cefb95227e2a205">added a workflow</a> to run all tests nightly</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">nightly:</span></span><br><span class="line">    <span class="attr">triggers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">schedule:</span></span><br><span class="line">          <span class="attr">cron:</span> <span class="string">&#x27;0 0 * * *&#x27;</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="attr">branches:</span></span><br><span class="line">              <span class="attr">only:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Run</span> <span class="string">all</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">build:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">print-tests</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="string">...</span></span><br></pre></td></tr></table></figure><h2><span id="run-all-tests-with-a-tag-on-ci">Run all tests with a tag on CI</span></h2><h3><span id="circleci">CircleCI</span></h3><p>Imagine someone is changing a component related to editing the Todo text on the page. They have deployed the site and want to run all end-to-end tests related to editing items. Without <a href="../tags/code-coverage/">code coverage</a> it is hard to say which E2E tests should run. Well, in general we run the sanity tests and we should run all tests tagged <code>@editing</code>. Let&#39;s allow anyone to trigger the CI workflow and to pass the tag to the test job. I will add a new workflow and pipeline parameters to the <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/blob/master/circle.yml">circle.yml</a> file.</p><figure class="highlight yml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="attr">GREP_TAGS:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">enum</span></span><br><span class="line">    <span class="attr">enum:</span></span><br><span class="line">      [</span><br><span class="line">        <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@sanity&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@adding&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@complete&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@editing&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@item&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@persistence&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@routing&#x27;</span>,</span><br><span class="line">      ]</span><br><span class="line">    <span class="attr">default:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">nightly:</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tagged:</span></span><br><span class="line">    <span class="attr">when:</span> <span class="string">&lt;&lt;</span> <span class="string">pipeline.parameters.GREP_TAGS</span> <span class="string">&gt;&gt;</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tagged</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">build:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">print-tests</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">grepTags=&lt;&lt;</span> <span class="string">pipeline.parameters.GREP_TAGS</span> <span class="string">&gt;&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">unless:</span> <span class="string">&lt;&lt;</span> <span class="string">pipeline.parameters.GREP_TAGS</span> <span class="string">&gt;&gt;</span></span><br><span class="line">    <span class="string">...</span></span><br></pre></td></tr></table></figure><p>Our new workflow <code>tagged</code> only runs when there is <code>GREP_TAGS</code> string and an empty default string &quot;&quot; does not count. Let&#39;s trigger the workflow from the CircleCI web interface.</p><p><img src="../images/tag-tests/trigger.png" alt="Click the &quot;Trigger pipeline&quot; button"></p><p>Add a string parameter named <code>GREP_TAGS</code> and enter one of the above <code>enum</code> values, like <code>@editing</code>.</p><p><img src="../images/tag-tests/enter-tag.png" alt="Enter the tag to use to filter the tests"></p><p>The workflow <code>tagged</code> runs, while the normal workflow is skipped. On other commits, the entire <code>build</code> workflow runs, while the <code>tagged</code> workflow is skipped.</p><p><img src="../images/tag-tests/pipelines.png" alt="Workflows skipped depending on the GREP_TAGS parameter"></p><p>The workflows are enabled and disabled using the pipeline parameter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tagged:</span><br><span class="line">  when: &lt;&lt; pipeline.parameters.GREP_TAGS &gt;&gt;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">build:</span><br><span class="line">  unless: &lt;&lt; pipeline.parameters.GREP_TAGS &gt;&gt;</span><br></pre></td></tr></table></figure><h3><span id="github-actions">GitHub Actions</span></h3><p>The user who tries to run the tests by a tag on CircleCI has to remember how to trigger the workflow and add the right parameter. I would like the experience to be simpler. Thus I looked at using GitHub Actions with its new &quot;workflow_dispatch&quot; workflows. In the <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/blob/master/.github/workflows/tagged.yml">.github/workflows/tagged.yml</a> I have defined a workflow where each input parameter is a boolean for the tag to run. It looks scary, but this is simple repetition: each tag matches one input parameter and one job to run.</p><figure class="highlight yml"><figcaption><span>.github/workflows/tagged.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">tagged</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="comment"># these inputs will be shown to the user on GitHub Actions page</span></span><br><span class="line">      <span class="comment"># and the user can simply check off the tags to run</span></span><br><span class="line">      <span class="attr">sanity:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">tests</span> <span class="string">tagged</span> <span class="string">&quot;@sanity&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">      <span class="attr">adding:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">tests</span> <span class="string">tagged</span> <span class="string">&quot;@adding&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">      <span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">tagged:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># install dependencies and start the server</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span> <span class="string">📦</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">runTests:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Start</span> <span class="string">the</span> <span class="string">server</span> <span class="string">🚀</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">start</span> <span class="string">&amp;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">sanity</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.inputs.sanity</span> <span class="string">==</span> <span class="string">&#x27;true&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">install:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">grepTags=@sanity</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">adding</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.inputs.adding</span> <span class="string">==</span> <span class="string">&#x27;true&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">install:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">grepTags=@adding</span></span><br><span class="line"></span><br><span class="line">      <span class="string">...</span></span><br></pre></td></tr></table></figure><p>This is pretty sweet - any user with GitHub access to the repo can click on the button &quot;Run workflow&quot; and check off the tags to test.</p><p><img src="../images/tag-tests/pick-tags.png" alt="Pick the test tags to run"></p><p>Only the picked test tags execute, the other steps are skipped.</p><p><img src="../images/tag-tests/action.png" alt="Running just the selected sets of tests on GitHub"></p><p>Beautiful.</p><h3><span id="separate-jobs">Separate jobs</span></h3><p>Instead of having a single job executing tagged tests, we could have created a separate job for each tag that can be picked. These jobs could all work in parallel. Here is the main part of the <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/blob/master/.github/workflows/tagged-jobs.yml">tagged-jobs.yml</a></p><figure class="highlight yml"><figcaption><span>.github/workflows/tagged-jobs.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># separate running each grep tag into own job</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">tagged-jobs</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="comment"># these inputs will be shown to the user on GitHub Actions page</span></span><br><span class="line">      <span class="comment"># and the user can simply check off the tags to run</span></span><br><span class="line">      <span class="attr">sanity:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">tests</span> <span class="string">tagged</span> <span class="string">&quot;@sanity&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">      <span class="attr">adding:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">tests</span> <span class="string">tagged</span> <span class="string">&quot;@adding&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">      <span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># each job is independent from other jobs</span></span><br><span class="line">  <span class="comment"># and only runs the tests for the picked test tag</span></span><br><span class="line">  <span class="attr">sanity:</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.inputs.sanity</span> <span class="string">==</span> <span class="string">&#x27;true&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">sanity</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">grepTags=@sanity</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">adding:</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.inputs.adding</span> <span class="string">==</span> <span class="string">&#x27;true&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">adding</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">grepTags=@adding</span></span><br><span class="line"></span><br><span class="line">  <span class="string">...</span></span><br></pre></td></tr></table></figure><p>Now we can pick the features to test without worrying about a long queue of tests running sequentially.</p><p><img src="../images/tag-tests/pick-separate-tags.png" alt="Pick as many features to test as you wish"></p><p>The screenshot below shows how the jobs proceed in parallel with each other</p><p><img src="../images/tag-tests/parallel.png" alt="The parallel test jobs each running tagged tests"></p><p>Fast.</p><h2><span id="the-regression-tag">The regression tag</span></h2><p>Imagine you are deploying a schema change in the database, or fiddling with some API service. You might not know which area of the site you might have broken. Running all tests might take too long, and running just the tests tagged <code>@sanity</code> is not enough - they are only covering the essential user paths. We need something in between the <code>@sanity</code> list and all the tests.</p><p>This is where the <code>@regression</code> tag comes in. We can mark a big chunk of the tests with this tag, and whenever we want to confirm the site still works, we run those tests by tag. Of course, running all the tests could be better, but there is a trade off: speed vs completeness.</p><p>Here is how the &quot;clear-completed-spec.js&quot; looks. The tests tagged <code>@sanity</code> get the second tag, and another test now gets its <code>@regression</code> tag.</p><figure class="highlight js"><figcaption><span>cypress/integration/clear-completed-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;TodoMVC&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  context(<span class="string">&#x27;Clear completed button&#x27;</span>, &#123; <span class="attr">tags</span>: <span class="string">&#x27;@complete&#x27;</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    it(<span class="string">&#x27;should display the correct text&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">    it(<span class="string">&#x27;should remove completed items when clicked&#x27;</span>,</span><br><span class="line">      &#123; <span class="attr">tags</span>: [<span class="string">&#x27;@sanity&#x27;</span>, <span class="string">&#x27;@regression&#x27;</span>] &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">    it(<span class="string">&#x27;should be hidden when there are no items that are completed&#x27;</span>,</span><br><span class="line">      &#123; <span class="attr">tags</span>: <span class="string">&#x27;@regression&#x27;</span> &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>In general, the <code>@regression</code> set is a superset of the <code>@sanity</code> tests.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --names | grep &#x27;@sanity&#x27; | wc -l</span><br><span class="line">       8</span><br><span class="line">$ npx find-cypress-specs --names | grep &#x27;@regression&#x27; | wc -l</span><br><span class="line">      17</span><br></pre></td></tr></table></figure><p>The full test outline</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --names</span><br><span class="line"></span><br><span class="line">$ npx find-cypress-specs --names</span><br><span class="line"></span><br><span class="line">cypress/integration/adding-spec.js (7 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ New Todo [@adding]</span><br><span class="line">  │ ├─ should allow me to add todo items [@regression]</span><br><span class="line">  │ ├─ adds items [@sanity, @regression]</span><br><span class="line">  │ ├─ should clear text input field when an item is added [@regression]</span><br><span class="line">  │ ├─ should append new items to the bottom of the list</span><br><span class="line">  │ ├─ should trim text input [@regression]</span><br><span class="line">  │ └─ should show #main and #footer when items added</span><br><span class="line">  └─ Adds items (spy example)</span><br><span class="line">    └─ calls inform</span><br><span class="line"></span><br><span class="line">cypress/integration/clear-completed-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Clear completed button [@complete]</span><br><span class="line">    ├─ should display the correct text</span><br><span class="line">    ├─ should remove completed items when clicked [@sanity, @regression]</span><br><span class="line">    └─ should be hidden when there are no items that are completed [@regression]</span><br><span class="line"></span><br><span class="line">cypress/integration/complete-all-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Mark all as completed [@complete]</span><br><span class="line">    ├─ should allow me to mark all items as completed [@regression]</span><br><span class="line">    ├─ should allow me to clear the complete state of all items [@sanity, @regression]</span><br><span class="line">    └─ complete all checkbox should update state when items are completed / cleared</span><br><span class="line"></span><br><span class="line">cypress/integration/editing-spec.js (5 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Editing [@editing]</span><br><span class="line">    ├─ should hide other controls when editing</span><br><span class="line">    ├─ should save edits on blur [@sanity]</span><br><span class="line">    ├─ should trim entered text</span><br><span class="line">    ├─ should remove the item if an empty text string was entered</span><br><span class="line">    └─ should cancel edits on escape</span><br><span class="line"></span><br><span class="line">cypress/integration/item-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Item [@item]</span><br><span class="line">    ├─ should allow me to mark items as complete [@sanity, @regression]</span><br><span class="line">    ├─ should allow me to un-mark items as complete [@regression]</span><br><span class="line">    └─ should allow me to edit an item</span><br><span class="line"></span><br><span class="line">cypress/integration/persistence-spec.js (1 test)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Persistence [@persistence]</span><br><span class="line">    └─ should persist its data [@sanity, @regression]</span><br><span class="line"></span><br><span class="line">cypress/integration/routing-spec.js (5 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Routing [@routing]</span><br><span class="line">    ├─ should allow me to display active items [@regression]</span><br><span class="line">    ├─ should respect the back button</span><br><span class="line">    ├─ should allow me to display completed items [@sanity, @regression]</span><br><span class="line">    ├─ should allow me to display all items [@regression]</span><br><span class="line">    └─ should highlight the currently applied filter</span><br><span class="line"></span><br><span class="line">cypress/integration/spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ When page is initially opened [@regression]</span><br><span class="line">  │ └─ should focus on the todo input field</span><br><span class="line">  ├─ No Todos</span><br><span class="line">  │ └─ should hide #main and #footer [@regression]</span><br><span class="line">  └─ Counter</span><br><span class="line">    └─ should display the current number of todo items [@sanity, @regression]</span><br><span class="line"></span><br><span class="line">found 8 specs and 30 tests</span><br></pre></td></tr></table></figure><p>I have updated the CircleCI and the GitHub Actions workflows to allow selecting <code>@regression</code> tag.</p><p><img src="../images/tag-tests/regression.png" alt="Manually running all regression tests on GitHub"></p><p><img src="../images/tag-tests/regression-job.png" alt="A single job ran executing just the regression tests"></p><h2><span id="the-final-tag-organization">The final tag organization</span></h2><p>To summarize: we have organized our tests using tags. There are feature-level tags like <code>@editing</code> and two &quot;coverage&quot; tags: <code>@sanity</code> and <code>@regression</code>. The sets of tests overlap, and there might be tests without any tags.</p><p><img src="../images/tag-tests/tag-organization.png" alt="Test tag coverage"></p><p>On every pull request we execute the changed specs and then run <code>@sanity</code> tests. Whenever someone is working on the feature, they can quickly run the tests for that feature using the individual feature tag. When in doubt, you can execute a wider set of tests using <code>@regression</code> tag. To completely test the software (which we can do periodically), one can run all the tests without any filtering by tag.</p><h2><span id="bonus-1-github-triggers-circleci">Bonus 1: GitHub triggers CircleCI</span></h2><p>If you have implemented running tests on CircleCI, but want to use the GitHub Actions user interface, you can collect the tags and trigger the CircleCI pipeline, see <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/blob/master/.github/workflows/trigger-circleci.yml">trigger-circleci.yml</a> workflow file.</p><figure class="highlight yml"><figcaption><span>trigger-circleci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">trigger-circleci</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="comment"># these inputs will be shown to the user on GitHub Actions page</span></span><br><span class="line">      <span class="comment"># and the user can simply check off the tags to run</span></span><br><span class="line">      <span class="attr">sanity:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">tests</span> <span class="string">tagged</span> <span class="string">&quot;@sanity&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">      <span class="attr">regression:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">tests</span> <span class="string">tagged</span> <span class="string">&quot;@regression&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">      <span class="string">...</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">trigger-circleci:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Print</span> <span class="string">GitHub</span> <span class="string">event</span> <span class="string">inputs</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">EVENT:</span> <span class="string">$&#123;&#123;</span> <span class="string">toJson(github.event.inputs)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;$EVENT&quot;</span></span><br><span class="line">          <span class="comment"># all environment variables that start with GITHUB_</span></span><br><span class="line">          <span class="comment"># https://github.com/bahmutov/print-env</span></span><br><span class="line">          <span class="string">npx</span> <span class="string">@bahmutov/print-env</span> <span class="string">GITHUB_</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Trigger</span> <span class="string">CircleCI</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">CIRCLE_CI_API_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CIRCLE_CI_API_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="comment"># collect all input parameters into one string</span></span><br><span class="line">          <span class="string">TAGS=</span></span><br><span class="line">          <span class="string">if</span> [[ <span class="string">&quot;$<span class="template-variable">&#123;&#123; github.event.inputs.sanity &#125;&#125;</span>&quot;</span> <span class="string">==</span> <span class="string">&quot;true&quot;</span> ]]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">            <span class="string">TAGS=&quot;@sanity&quot;</span></span><br><span class="line">          <span class="string">fi</span></span><br><span class="line">          <span class="string">if</span> [[ <span class="string">&quot;$<span class="template-variable">&#123;&#123; github.event.inputs.regression &#125;&#125;</span>&quot;</span> <span class="string">==</span> <span class="string">&quot;true&quot;</span> ]]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">            <span class="string">TAGS=&quot;$TAGS</span> <span class="string">@regression&quot;</span></span><br><span class="line">          <span class="string">fi</span></span><br><span class="line">          <span class="string">if</span> [[ <span class="string">&quot;$<span class="template-variable">&#123;&#123; github.event.inputs.adding &#125;&#125;</span>&quot;</span> <span class="string">==</span> <span class="string">&quot;true&quot;</span> ]]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">            <span class="string">TAGS=&quot;$TAGS</span> <span class="string">@adding&quot;</span></span><br><span class="line">          <span class="string">fi</span></span><br><span class="line">          <span class="string">...</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;Collected tags: $TAGS&quot;</span></span><br><span class="line">          <span class="comment"># https://github.com/bahmutov/trigger-circleci-pipeline</span></span><br><span class="line">          <span class="string">npx</span> <span class="string">trigger-circleci-pipeline</span> <span class="string">\</span></span><br><span class="line">            <span class="string">--org</span> <span class="string">bahmutov</span> <span class="string">--project</span> <span class="string">test-todomvc-using-app-actions</span> <span class="string">\</span></span><br><span class="line">            <span class="string">--branch</span> <span class="string">$GITHUB_REF_NAME</span> <span class="string">--parameters</span> <span class="string">GREP_TAGS=&quot;$TAGS&quot;</span></span><br></pre></td></tr></table></figure><p>I am using <a href="https://github.com/bahmutov/print-env">print-env</a> to print the GitHub environment variables and <a href="https://github.com/bahmutov/trigger-circleci-pipeline">trigger-circleci-pipeline</a> to trigger the CircleCI pipeline via API (you will need your personal CircleCI API token to work).</p><h2><span id="bonus-2-when-you-have-a-lot-of-test-tags">Bonus 2: When you have a lot of test tags</span></h2><p>If you have a lot of test tags, and want to let the user pick the ones to run from GitHub user interface, using individual input workflow parameters quickly runs into the ten parameters max limit (January 2022). Thus I have reworked the above workflow to let the user pick some common sets (like the regression the and sanity sets) using checkboxes, and let the user pick other tags to run by entering them as a single string. Find the full workflow at <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/blob/master/.github/workflows/trigger-circle-type.yml">trigger-circle-type.yml</a></p><figure class="highlight yml"><figcaption><span>.github/workflows/trigger-circle-type.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">trigger-circleci-type</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="comment"># these inputs will be shown to the user on GitHub Actions page</span></span><br><span class="line">      <span class="comment"># and the user can simply check off the tags to run</span></span><br><span class="line">      <span class="comment"># the two sets of tests covering most of the features</span></span><br><span class="line">      <span class="comment"># <span class="doctag">NOTE:</span> GitHub workflows are limited to ten input parameters</span></span><br><span class="line">      <span class="attr">sanity:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">tests</span> <span class="string">tagged</span> <span class="string">&quot;@sanity&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">      <span class="attr">regression:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">tests</span> <span class="string">tagged</span> <span class="string">&quot;@regression&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">      <span class="comment"># tests for individual features - the user will need to type the tags</span></span><br><span class="line">      <span class="comment"># comma-separated in order to avoid hitting then ten workflow input limit</span></span><br><span class="line">      <span class="attr">testTags:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">Other</span> <span class="string">test</span> <span class="string">tags</span> <span class="string">to</span> <span class="string">run,</span> <span class="string">comma-separated.</span> <span class="string">Includes</span> <span class="string">@adding,</span> <span class="string">@complete,</span></span><br><span class="line">          <span class="string">@editing,</span> <span class="string">@item,</span> <span class="string">@persistence,</span> <span class="string">@routing</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="comment"># collect all input parameters into one string</span></span><br><span class="line">  <span class="string">TAGS=</span></span><br><span class="line">  <span class="string">if</span> [[ <span class="string">&quot;$<span class="template-variable">&#123;&#123; github.event.inputs.sanity &#125;&#125;</span>&quot;</span> <span class="string">==</span> <span class="string">&quot;true&quot;</span> ]]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">    <span class="string">TAGS=&quot;@sanity&quot;</span></span><br><span class="line">  <span class="string">fi</span></span><br><span class="line">  <span class="string">if</span> [[ <span class="string">&quot;$<span class="template-variable">&#123;&#123; github.event.inputs.regression &#125;&#125;</span>&quot;</span> <span class="string">==</span> <span class="string">&quot;true&quot;</span> ]]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">    <span class="string">TAGS=&quot;$TAGS,@regression&quot;</span></span><br><span class="line">  <span class="string">fi</span></span><br><span class="line">  <span class="string">if</span> [[ <span class="string">&quot;$<span class="template-variable">&#123;&#123; github.event.inputs.testTags &#125;&#125;</span>&quot;</span> <span class="type">!=</span> <span class="string">&quot;&quot;</span> ]]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">    <span class="string">TAGS=&quot;$TAGS,$&#123;&#123;</span> <span class="string">github.event.inputs.testTags</span> <span class="string">&#125;&#125;&quot;</span></span><br><span class="line">  <span class="string">fi</span></span><br></pre></td></tr></table></figure><p>I include the available tags in the description, so it is easy to remember the choices.</p><p><img src="../images/tag-tests/flow-inputs.png" alt="Picking the test tags to run"></p><p><strong>Tip:</strong> I pass the additional custom tag as a string &quot;Blog post demo&quot; - that is purely to tag the recorded Dashboard run to make it simple to find it.</p><p><img src="../images/tag-tests/flow-run.png" alt="The recorded run has all selected test tags and the custom tag string"></p><p><strong>Tip 2:</strong> use the Cypress Dashboard tag dropdown to filter the recorded runs by a tag.</p><p><img src="../images/tag-tests/tag-dropdown.png" alt="Available tags to filter the runs by"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s say you have hundreds of end-to-end tests (this is our current situation at Mercari US). Running the tests in parallel makes th
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="advice" scheme="https://glebbahmutov.com/blog/tags/advice/"/>
    
  </entry>
  
  <entry>
    <title>How To Solve A Simple Numeric Problem Using Computers and JavaScript</title>
    <link href="https://glebbahmutov.com/blog/find-the-number/"/>
    <id>https://glebbahmutov.com/blog/find-the-number/</id>
    <published>2022-01-09T05:00:00.000Z</published>
    <updated>2022-01-09T16:42:52.247Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="the-problem">The problem</span></h2><p>Let&#39;s say I ask you to fix a number to make this equation true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_ &#x3D; 3</span><br></pre></td></tr></table></figure><p>Of course you might say - ohh it is easy, just put &quot;3&quot; where the <code>_</code> is. What if I ask you to find numbers between 1 and 10 to make this equation true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_ + 3 &#x3D; _ * 2</span><br></pre></td></tr></table></figure><p>You probably now have to try a few numbers to find at least one solution.</p><p>As the size of the equation and the number of unknown numbers grows, manually trying combinations of numbers becomes slower and slower. Why not let the computers do this for us? Let me teach you how to program your <em>browser</em> to solve problems like this almost instantly.</p><h2><span id="the-environment">The environment</span></h2><p>To find numbers we will use JavaScript programming language that runs in every browser (and even on the browsers on the phones). You can take any browser window, press <code>Options + Cmd + I</code> keys at the same time (I am writing this is on Mac) or select &quot;View / Development / Developer Tools&quot;. You should see the Developer Tools tab opened. We will be using the &quot;Console&quot; tab</p><p><img src="../images/find-the-number/dev-tools.png" alt="Console tab in the Developer Tools in the Chrome browser"></p><p>You can open and close the Developer Tools (DevTools for short) at any moment in any browser window. Let&#39;s use the console to compute something for us</p><p><img src="../images/find-the-number/compute.png" alt="Use DevTools console as a calculator"></p><h2><span id="comparing-numbers">Comparing numbers</span></h2><p>To find the solution to <code>_ = 3</code> let&#39;s try <code>1 = 3</code> in the DevTools console.</p><p><img src="../images/find-the-number/error.png" alt="We get an error trying to run 1 = 3 expression"></p><p>Oops, the computer is complaining. JavaScript language uses the character <code>=</code> to <em>assign a value</em> to a variable, like <code>a = 10</code> and <code>x = 2</code>. We are only asking if <code>1</code> is equal to <code>3</code>. In JavaScript asking to compare to values has a special operator <code>===</code> that we will use.</p><p><img src="../images/find-the-number/is-equal.png" alt="Comparing two numbers using === operator"></p><p>When comparing numbers, we get back <code>true</code> or <code>false</code>.</p><h2><span id="printing">Printing</span></h2><p>If the browser is computing something, it needs to print the results, and maybe print messages during the steps. To print something in the DevTools console, we can use the <code>console.log</code> function.</p><p><img src="../images/find-the-number/log1.png" alt="Printing the result of comparing two numbers"></p><p>You can pass one or multiple arguments to print. For example, we can compare numbers and print if one is larger or smaller than another.</p><p><img src="../images/find-the-number/log2.png" alt="Comparing the numbers and printing the results"></p><h2><span id="variables">Variables</span></h2><p>When solving <code>_ = 3</code> we need to try different values in place of <code>_</code>. Instead of <code>_</code> let&#39;s call the unknown value &quot;x&quot;. We are trying to solve <code>x = 3</code> after all. In JavaScript, we can create <code>x</code> which called a variable. We can assign this variable (which is like an empty box) different values, then compare the current value to 3. Here is how it looks in DevTools: we are using <code>let x</code> to create a variable, <code>=</code> operator to put a value into <code>x</code>, and <code>===</code> to compare the current value of the variable to another value.</p><p><img src="../images/find-the-number/variable.png" alt="Using variable x and comparing it to 3"></p><p>We can explicitly print the comparison result using <code>console.log</code> making it very clear what is going on</p><p><img src="../images/find-the-number/logx.png" alt="Printing x and the result of comparing it to 3"></p><p>To save space we can assign the value and compare it on one line, we just need to separate the assignment and the print statements using the special <code>;</code> to avoid JavaScript confusing them.</p><p><img src="../images/find-the-number/semi.png" alt="Separate statements using ; character"></p><h2><span id="functions">Functions</span></h2><p>We will be comparing <code>x</code> to <code>3</code> multiple times while checking if we have found the solution. We can create a little reusable piece of code that takes <code>x</code> and tells us if the equation is true or false. The reusable pieces of code are called <em>functions</em> and have a special syntax.</p><p><img src="../images/find-the-number/function.png" alt="Example function"></p><p>Inside the function, <code>x</code> variable is equal to whatever we passed in the first argument place when we called <code>check</code>. When we called it <code>check(1)</code> inside the function <code>x</code> was 1. When we called it <code>check(5)</code> the value <code>x</code> was 5. Even if there is a variable <code>x</code> outside the function, the function does not care - it uses its internal value of the argument.</p><p><img src="../images/find-the-number/shadow.png" alt="Local variable x is used"></p><p>Note how in the DevTools you can type multiple lines before executing them. Use <code>Shift + Enter</code> to add one more line. Use <code>Enter</code> key to run the JavaScript.</p><h2><span id="loops">Loops</span></h2><p>Ok, so let&#39;s run all values from 1 to 10 through our function <code>check</code> and print the result.</p><p><img src="../images/find-the-number/ten.png" alt="Calling check ten times with different argument"></p><p>Ughh, so verbose, and the only difference is the value we used to call <code>check(...)</code>. Let&#39;s remove the duplicate code. We can use a loop to execute the same statement again and again. The way to write this in JavaScript is to use <em>another</em> counter variable and specify its initial and final value and how to increment the variable after each iteration.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">1</span>; k &lt; <span class="number">11</span>; k += <span class="number">1</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We have declared a new variable using <code>let k</code> just too keep track of the iteration. We gave it a starting value <code>let k = 1</code> and we will continue executing all code inside the curly braces <code>&#123; ... &#125;</code> as long as the value of <code>k</code> is less than 11. Each iteration we will increment <code>k</code> by 1 using the special operator <code>+=</code>. Let&#39;s put our <code>check(...)</code> statement inside the loop.</p><p><img src="../images/find-the-number/loop.png" alt="Using a loop to call check with 10 different values"></p><p>Each iteration we call <code>check(...)</code> with the current value of the variable <code>k</code>. The function <code>check(x)</code> takes the passed value like 1, then 2, then 3, ... and puts it into its argument variable <code>x</code> and computes the result and returns it to be printed using <code>console.log</code>.</p><h2><span id="multiple-loops">Multiple loops</span></h2><p>Let&#39;s say we are trying to solve an equation with multiple unknown values like <code>_ + 3 = _ * 2</code>. Our check function will need to expect 2 variables.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + <span class="number">3</span> === y * <span class="number">2</span> &#125;</span><br></pre></td></tr></table></figure><p>And we will need to try values from 1 to 10 for variable <code>x</code>. And for each <code>x</code> we need to try values from 1 to 10 for variable <code>y</code>. We can nest loops and just try different values; that&#39;s why it is called brute force approach. The computers can do billions of such calculations each second, so we don&#39;t have to worry about how long it takes to solve such problems. We expect 100 total checks (10 values of x * 10 values of y for each x):</p><p><img src="../images/find-the-number/loops.png" alt="Using loop inside a loop to try 100 pairs of numbers"></p><p>It is very common to use variable names like <code>k</code>, <code>j</code>, <code>i</code> for loop counters, and <code>x</code>, <code>y</code> for unknown values that we are trying to find.</p><h2><span id="branches">Branches</span></h2><p>In the image above, most of the 100 pairs return <code>false</code>, so let&#39;s print only the solutions. We can use the built-in JavaScript <code>if</code> operator</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (some condition value) &#123;</span><br><span class="line">  <span class="comment">// do this statements if value is true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// do this statements if false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If there is nothing to do for the <code>else</code> branch, we can omit it</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (some condition value) &#123;</span><br><span class="line">  <span class="comment">// do this statements if value is true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here are our solutions found by iteration and only printing the ones where <code>check(...)</code> returns true.</p><p><img src="../images/find-the-number/if.png" alt="Printing the solutions only"></p><h2><span id="variable-names">Variable names</span></h2><p>JavaScript variables can be full words, and it is a good practice to use descriptive variable names that make it clear what the variable is holding inside.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeting</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello,&#x27;</span>, name)</span><br><span class="line">&#125;</span><br><span class="line">greeting(<span class="string">&#x27;Gleb&#x27;</span>)</span><br><span class="line"><span class="comment">// Hello, Gleb</span></span><br></pre></td></tr></table></figure><p>On the other hand, if you have a lot of unknowns in your equation, you can use variable names with indices like <code>x1</code>, <code>x2</code>, <code>x3</code>, <code>x4</code> instead of one letter <code>x</code>, <code>y</code>, <code>v</code>, <code>w</code>. In the screenshot below I used <code>x1</code> and <code>x2</code> for unknowns and <code>k1</code> and <code>k2</code> for iteration counter variables.</p><p><img src="../images/find-the-number/names.png" alt="Using consistent variables names"></p><h2><span id="challenges">Challenges</span></h2><p>Try to solve in your browser DevTools the following problems</p><ol><li>what is the value of <code>(1 - 100) * 5 + 1234 + 588/2</code>.<ol><li>Is it larger or smaller than the value of the expression <code>56 * 7</code>?</li><li>put the value of the first expression into the variable <code>left</code> and the value of the second expression into the variable <code>right</code> and print to the console both variables</li></ol></li><li>print the word &quot;Bot&quot; 25 times in a row</li><li>find two numbers so that <code>x * 15 = 5 + y</code>. Each unknown number can be between 1 and 100</li><li>print &quot;yes!!!&quot; if the expression <code>45 * 19 * 22</code> is larger than 10000 and print &quot;No :(&quot; otherwise</li><li>find the number that solves the triple equality <code>x + 6 = 94 - 10 * x = 2 * x - 2</code></li><li>iterate over numbers from 1 to 300 in increments of 6 and print the numbers. Your first few numbers should be 1, 7, 13, ...</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;the-problem&quot;&gt;The problem&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Let&amp;#39;s say I ask you to fix a number to make this equation true&lt;/p&gt;
&lt;figure class=&quot;h
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="javascript" scheme="https://glebbahmutov.com/blog/tags/javascript/"/>
    
      <category term="tutorial" scheme="https://glebbahmutov.com/blog/tags/tutorial/"/>
    
  </entry>
  
  <entry>
    <title>Crawl Local Pages Using Cypress</title>
    <link href="https://glebbahmutov.com/blog/crawl-using-cypress/"/>
    <id>https://glebbahmutov.com/blog/crawl-using-cypress/</id>
    <published>2022-01-07T05:00:00.000Z</published>
    <updated>2022-01-07T14:27:26.162Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes you want to simply visit every local page on your site to make sure the links are correct and every page loads. Cypress is not a crawler, but it can definitely handle the crawl for smaller sites. In the videos below I show how to collect every anchor link, filter external links, and visit every collected URL once.</p><blockquote class="pullquote"><p>🎁 You can find the full source code in my repository <a href="https://github.com/bahmutov/cypress-crawl-example">bahmutov/cypress-crawl-example</a>.</p></blockquote><h2><span id="collect-the-urls">Collect the URLs</span></h2><p>The best way to write a crawler is to think about the actions on every page. The crawler needs to:</p><ol><li>grab the first URL to visit from a queue<ul><li>if there are no URLs to visit, we are done</li></ul></li><li>call <code>cy.visit(url)</code></li><li>collect all anchor elements<ul><li>filter external links</li><li>filter links we have already visited</li><li>filter links we have already queued up to visit</li><li>add the filtered URLs to the queue</li></ul></li><li>go to step 1</li></ol><p>You can see my implementation of the above steps in the test file <a href="https://github.com/bahmutov/cypress-crawl-example/blob/main/cypress/integration/spec.js">spec.js</a> and watch the implementation in the video below:</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/FDNeiwKWdb4" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Perfect, at the end of the test each URL has been visited, but some pages were visited twice - because the crawler does not know that links to <code>/tos.html</code> and <code>/tos</code> lead to the same page.</p><p><img src="../images/crawl-using-cypress/tos.png" alt="Visiting the same page via two different links"></p><h2><span id="resolving-urls">Resolving URLs</span></h2><p>To prevent visiting the same page via different links, we need to check if a given URL leads to a page we have visited already. We can do this by using the <a href="https://on.cypress.io/request">cy.request</a> command and inspecting the <code>redirects</code> array.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// check URLs by requesting them and getting through the redirects</span></span><br><span class="line"><span class="keyword">const</span> redirected = []</span><br><span class="line">localUrls.forEach(<span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.request(&#123; url, <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    .its(<span class="string">&#x27;redirects&#x27;</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    <span class="comment">// resources without redirects will</span></span><br><span class="line">    <span class="comment">// not have the property &quot;redirects&quot;</span></span><br><span class="line">    <span class="comment">// so prevent Cypres from throwing an error</span></span><br><span class="line">    .should(Cypress._.noop)</span><br><span class="line">    .then(<span class="function">(<span class="params">redirects</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(redirects) &amp;&amp; redirects.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// each redirect record is like &quot;301: URL&quot;</span></span><br><span class="line">        <span class="comment">// so grab the last redirect and parse it</span></span><br><span class="line">        <span class="comment">// that will be the final address</span></span><br><span class="line">        <span class="keyword">const</span> redirectedUrl =</span><br><span class="line">          redirects[redirects.length - <span class="number">1</span>].split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="comment">// keep just the local part of the full URL</span></span><br><span class="line">        <span class="keyword">const</span> parsed = <span class="keyword">new</span> URL(redirectedUrl)</span><br><span class="line">        redirected.push(parsed.pathname)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        redirected.push(url)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You can find the full source code in the file <a href="https://github.com/bahmutov/cypress-crawl-example/blob/main/cypress/integration/spec2.js">spec2.js</a> and the explanation in the video below.</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/h7taQNvj0Cs" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="bonus-check-the-404-resource">Bonus: check the 404 resource</span></h2><p>The crawl example has one additional test file <a href="https://github.com/bahmutov/cypress-crawl-example/blob/main/cypress/integration/404-spec.js">404-spec.js</a> that shows how to verify the error page the site serves when you try to visit a non-existent URL. Again, we can use a combination of <code>cy.request</code> and <code>cy.visit</code> commands to verify the status code and the error page served. We do need to let the commands work on the status code 4xx by using <code>failOnStatusCode: false</code> option</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows 404 error&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">&#x27;/does-not-exist&#x27;</span></span><br><span class="line">  cy.request(&#123; url, <span class="attr">failOnStatusCode</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    .its(<span class="string">&#x27;status&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">0</span> &#125;)</span><br><span class="line">    .should(<span class="string">&#x27;eq&#x27;</span>, <span class="number">404</span>)</span><br><span class="line">  cy.visit(url, &#123; <span class="attr">failOnStatusCode</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  cy.contains(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;404&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You can find the explanation in the video below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/0OfILKbqbsg" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Happy Crawling 🕷</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sometimes you want to simply visit every local page on your site to make sure the links are correct and every page loads. Cypress is not 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress JSON Test Results</title>
    <link href="https://glebbahmutov.com/blog/json-test-results/"/>
    <id>https://glebbahmutov.com/blog/json-test-results/</id>
    <published>2022-01-03T05:00:00.000Z</published>
    <updated>2022-01-03T21:41:40.792Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes you want to run the Cypress tests and do something based on the number of tests passed or failed. You need the test results in a JSON format, maybe saved as a text file. There are three ways to do this:</p><h2><span id="wrap-cypress-in-your-cli">Wrap Cypress in your CLI</span></h2><p>You can wrap the Cypress <a href="https://on.cypress.io/module-api">NPM module API</a> in your CLI script. Your script will get all test results as a JSON object and then can run other programs to process the test results further.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cypress = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line">cypress.run(&#123; ... &#125;).then(<span class="function"><span class="params">results</span> =&gt;</span> ...)</span><br></pre></td></tr></table></figure><p>I used this approach several times, see my blog post <a href="/blog/wrap-cypress-using-npm/" title="Wrap Cypress Using NPM Module API">Wrap Cypress Using NPM Module API</a>.</p><h2><span id="use-json-reporter">Use JSON reporter</span></h2><p>Cypress comes with built-in <a href="https://on.cypress.io/reporters">reporters</a> plus you can bring your own. If you want to output JSON results into a separate file, you could try</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx cypress run --reporter json --reporter-options output&#x3D;result.json</span><br></pre></td></tr></table></figure><p>There is a problem though: the JSON reporter removes the standard terminal output. If you want to write the JSON results and the typical terminal output, you would need to install something like <a href="https://github.com/you54f/cypress-multi-reporters">cypress-multi-reporters</a> and configure it ... just to save the test results as a JSON file. Which brings us to the third way of saving the test results - via a plugin.</p><h2><span id="use-cypress-json-results">Use cypress-json-results</span></h2><p>I wrote the plugin <a href="https://github.com/bahmutov/cypress-json-results">cypress-json-results</a> specifically to make saving the JSON results file super simple. Install the plugin and add it to your plugin file:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress-json-results</span><br><span class="line">+ cypress-json-results@1.0.0</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// `on` is used to hook into various events Cypress emits</span></span><br><span class="line">  <span class="comment">// `config` is the resolved Cypress config</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// https://github.com/bahmutov/cypress-json-results</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;cypress-json-results&#x27;</span>)(&#123;</span><br><span class="line">    on,</span><br><span class="line">    filename: <span class="string">&#x27;results.json&#x27;</span>, <span class="comment">// default filename</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Once you run the tests, you should see a message like this after all the tests have finished</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cypress-json-results: wrote results to results.json</span><br></pre></td></tr></table></figure><p>The saved file has each spec that executed locally with the <a href="/blog/cypress-test-statuses/" title="test status">test status</a>.</p><figure class="highlight json"><figcaption><span>results.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;cypress/integration/spec.js&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;receives the right text file&quot;</span>: <span class="string">&quot;passed&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;visits the text file&quot;</span>: <span class="string">&quot;passed&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;visits the Markdown file&quot;</span>: <span class="string">&quot;passed&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;converts the Markdown file&quot;</span>: <span class="string">&quot;passed&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The standard terminal output stays unchanged.</p><blockquote class="pullquote"><p>🎁 You can find the example application with cypress-json-results plugin in the repo <a href="https://github.com/bahmutov/check-text-file-example">bahmutov/check-text-file-example</a>.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sometimes you want to run the Cypress tests and do something based on the number of tests passed or failed. You need the test results in 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>How I Hire</title>
    <link href="https://glebbahmutov.com/blog/how-i-hire/"/>
    <id>https://glebbahmutov.com/blog/how-i-hire/</id>
    <published>2021-12-29T05:00:00.000Z</published>
    <updated>2021-12-29T13:59:00.340Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s say I want to hire someone to write automated Cypress end-to-end tests. Here is what I do:</p><ol><li>Write a job description with minimal corporate boilerplate filler like &quot;team player, excellent communicator, fast-paced environment&quot;. I do not care about reading this, and it tells the candidates nothing. Instead, I describe what the person is going to do, what kind of projects they will be working on, and the team. The HR department fights me on this, so it does not always go my way. If I win, the job posting will include the <a href="/blog/cypress-skills-ladder/" title="Cypress Skills Ladder">Cypress Skills Ladder</a>. If I lose, we will go over the skills ladder in the first interview. This skills checklist describes what I would love someone in this position to know or planning to learn. It gives the candidate a good idea of what the team needs and what day-to-day is going to be like.</li><li>When the job is posted, I have to go back to HR and ask them to delete &quot;Bachelors of Science or equivalent degree is required&quot; from the minimal job qualifications. Recruiters <em>love</em> inserting college degree requirements everywhere, even in the places where it is completely unnecessary. Something to watch out for. I also check for any other &quot;minimum X years of experience with technology Y&quot;. I had cases where the job posting had &quot;minimum five years of Cypress experience&quot;, which only a few people in Cypress.io had at that moment 😆</li><li>During my first interview with you, I just want to chat about what you have done and know following the ... published skills list. I share my screen and start asking about topics and checking the box if yes. Each topic becomes a jump-off for discussion. For Cypress skills I use my interactive <a href="https://cypress.tips/skills">https://cypress.tips/skills</a> form.</li></ol><center><iframe width="560" height="315" src="https://www.youtube.com/embed/0SgRYcJACjM" title="Cypress skills form" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>For example, if I asked the candidate &quot;did you organize multiple Cypress tests by topic and feature?&quot; and they said &quot;No, we kept all spec files in one folder&quot;, we would then converse about how many tests there were, how did they write them, and if it was easy to find and run a particular test. If the candidate said &quot;yes, we organized our tests using the following approach&quot;, we would talk about it. Each topic is not a school test-like &quot;pass/fail&quot;, but rather a jump off topic for a friendly chat.</p><p>After the interview I would copy / paste the test results into our internal candidate HR profile. I hope from the first interview, the candidate gets a very strong understanding of what day to day skills we are looking for. Which helps in the next step: the homework assignment.</p><ol start="4"><li><p>The homework assignment is your chance to shine as a candidate. Now that you know how I think about testing, and what we would like you to do day-to-day on the job, let&#39;s see what you can do. The assignment usually is described as follows:</p><ul><li>take any web application and write end-to-end tests for it</li><li>do not spend more than three hours writing the tests</li><li>take as much time to think about the application and the testing approach (within limits of course, if we do not hear from the candidate in a couple of weeks, we probably decide that you are not interested)</li><li>write a new set of tests, do not merely add one more test to an existing set of tests. We want to see your entire strategy</li></ul></li><li><p>The homework assignment review meeting. Once the candidate is done with the assignment, they send us the link to the GitHub repo and we schedule the second interview, usually with several people from my company attending. The purpose of the meeting is to review the tests, ask how they work, why the candidate wrote those specific tests, how they implemented them, etc. This matches closely our day-to-day work discussions and pull request reviews. On our side, we see if the candidate wrote good tests, if their thinking about testing, coding, and designing the solution is what we are looking for. The candidate gets a good idea of kind of questions we ask during code reviews, the people they will be working with, the tools and techniques we use.</p></li></ol><p>After the meeting, all people on the company side meet to give their feedback. We discuss the homework itself, and how the candidate explained their thinking, their code and the testing approach. Would the same approach and code pass our normal pull request review? Does the candidate match or exceed what we are looking for?</p><h2><span id="bonus-avoid-poisoning-the-well">Bonus: avoid poisoning the well</span></h2><p>The most crucial, important, paramount, <em>whatever-big-word-superlative</em> you want to use, thing to do while hiring is to <strong>avoid leaving the candidate with a bad impression of the company</strong>. For every person hired, you probably interview and reject 1-10 people. These are people who wanted to work with you at your company X. You are rejecting the people who want to join and work with you, yet now they know they cannot. They might feel sad and angry, especially if they feel the hiring process was unfair. Imagine for every employee you have 1-10 bitter people out there - does this change your hiring approach?</p><p>The way I solved this approach at Cypress was two-fold. First, be transparent with the candidate. State the salary range upfront. Talk honestly about the company, how it grew, and what the future looks like in your opinion. If the candidate does not have enough required skills already, no big deal, tell them. Second, respect their effort. For a while, if we rejected a candidate after the homework assignment, we would give the candidate a gift card to thank them for their time. A small nice gesture like this goes a long way towards sweetening the loss, I think. I would rather have 100 people out there remembering my company X for the some gift they got from us, rather than thinking how we unfairly rejected them.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/help-me-say-yes/" title="Help Me Say Yes">Help Me Say Yes</a></li><li><a href="/blog/dont-help-me-say-no/" title="Don&#39;t help me say No">Don&#39;t help me say No</a></li><li><a href="/blog/cypress-skills-ladder/" title="Cypress Skills Ladder">Cypress Skills Ladder</a></li><li><a href="/blog/rating-recruiter-pitches/" title="Rating recruiter pitches">Rating recruiter pitches</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s say I want to hire someone to write automated Cypress end-to-end tests. Here is what I do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write a job description
      
    
    </summary>
    
      <category term="people" scheme="https://glebbahmutov.com/blog/categories/people/"/>
    
    
      <category term="advice" scheme="https://glebbahmutov.com/blog/tags/advice/"/>
    
      <category term="hiring" scheme="https://glebbahmutov.com/blog/tags/hiring/"/>
    
  </entry>
  
  <entry>
    <title>Test Web Apps That Use The Browser FileSystem API</title>
    <link href="https://glebbahmutov.com/blog/browser-filesystem-api/"/>
    <id>https://glebbahmutov.com/blog/browser-filesystem-api/</id>
    <published>2021-12-28T05:00:00.000Z</published>
    <updated>2021-12-28T20:28:15.956Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s say you have a web application that calls <a href="https://web.dev/file-system-access/">browser FileSystem API</a> to read a file. How do you write an end-to-end test for this app?</p><p><img src="../images/browser-filesystem-api/open.png" alt="App opens FileSystem dialog to read a local file"></p><p>The application above shows the system file selection which lets the user pick a local file. Its contents is then pasted into the output text area.</p><figure class="highlight js"><figcaption><span>public/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;read-file&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> fileHandle</span><br><span class="line">  <span class="comment">// Destructure the one-element array.</span></span><br><span class="line">  ;[fileHandle] = <span class="keyword">await</span> <span class="built_in">window</span>.showOpenFilePicker()</span><br><span class="line">  <span class="keyword">const</span> file = <span class="keyword">await</span> fileHandle.getFile()</span><br><span class="line">  <span class="keyword">const</span> contents = <span class="keyword">await</span> file.text()</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;output&#x27;</span>).textContent = contents</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>🎁 You can find the application and the tests in the repo <a href="https://github.com/bahmutov/cypress-browser-file-system-example">bahmutov/cypress-browser-file-system-example</a>.</p></blockquote><p>Whenever you need to deal with the standard browser APIs in Cypress, take advantage of its unique architecture - you can access each browser object from the test, and then spy or stub its methods. I have shown examples in other blog posts <a href="/blog/spy-on-dom-methods/" title="Spy On DOM Methods And Properties">Spy On DOM Methods And Properties</a>, <a href="/blog/stubbing-the-non-configurable/" title="Stubbing The Non-configurable">Stubbing The Non-configurable</a>, <a href="/blog/stub-navigator-api/" title="Stub navigator API in end-to-end tests">Stub navigator API in end-to-end tests</a>, <a href="/blog/stub-window-open/" title="Stub window.open">Stub window.open</a>, and a few others. In our case, we want to stub the <code>window.showOpenFilePicker</code> method. Let&#39;s do it.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows file contents&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;showOpenFilePicker&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.get(<span class="string">&#x27;button&#x27;</span>).click()</span><br></pre></td></tr></table></figure><p>In general, you need to stub a method before the application calls it. I like stubbing things early to ensure the application sees the stubbed method from the moment it loads. Using <a href="https://on.cypress.io/visit">cy.visit</a> <code>onBeforeLoad</code> callback is a good place to set up the stubs.</p><p>What should the stub return? It should resolve (which means async result) with a &quot;file handle&quot; object. That object should have a method that resolves with some text. So I will use three different stubs.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> file = &#123;</span><br><span class="line">      text: cy.stub().resolves(<span class="string">&#x27;Hello, world!&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> fileHandle = &#123;</span><br><span class="line">      getFile: cy.stub().resolves(file),</span><br><span class="line">    &#125;</span><br><span class="line">    cy.stub(win, <span class="string">&#x27;showOpenFilePicker&#x27;</span>)</span><br><span class="line">      .resolves([fileHandle])</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Nice, but if we want to see the calls in the Command Log and assert they have happened, let&#39;s give each stub an alias.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows file contents&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> file = &#123;</span><br><span class="line">        text: cy.stub().resolves(<span class="string">&#x27;Hello, world!&#x27;</span>).as(<span class="string">&#x27;text&#x27;</span>),</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> fileHandle = &#123;</span><br><span class="line">        getFile: cy.stub().resolves(file).as(<span class="string">&#x27;file&#x27;</span>),</span><br><span class="line">      &#125;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;showOpenFilePicker&#x27;</span>)</span><br><span class="line">        .resolves([fileHandle])</span><br><span class="line">        .as(<span class="string">&#x27;showOpenFilePicker&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.get(<span class="string">&#x27;button&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;#output&#x27;</span>).should(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;Hello, world!&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;@text&#x27;</span>).should(<span class="string">&#x27;be.called&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Beautiful - the test runs.</p><p><img src="../images/browser-filesystem-api/stub-file.png" alt="The test stubs the browser file system open feature"></p><p>What happens if the user cancels selecting the file? Hmm, our application does not handle it at all!</p><p><img src="../images/browser-filesystem-api/exception.png" alt="The FileSystem throws an exception if the user cancels selecting the local file"></p><p>We need to handle the errors in our application, at least let&#39;s put <code>try / catch</code> around the code</p><figure class="highlight js"><figcaption><span>public/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  ;[fileHandle] = <span class="keyword">await</span> <span class="built_in">window</span>.showOpenFilePicker()</span><br><span class="line">  <span class="keyword">const</span> file = <span class="keyword">await</span> fileHandle.getFile()</span><br><span class="line">  <span class="keyword">const</span> contents = <span class="keyword">await</span> file.text()</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;output&#x27;</span>).textContent = contents</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  alert(<span class="string">&#x27;Error: &#x27;</span> + err.message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s test it. Our stub will reject with an error, and we will check if the <code>alert</code> method is called with excepted message.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows alert when the user cancels&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;alert&#x27;</span>).as(<span class="string">&#x27;alert&#x27;</span>)</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;showOpenFilePicker&#x27;</span>).rejects(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;User cancelled&#x27;</span>))</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.get(<span class="string">&#x27;button&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;@alert&#x27;</span>).should(<span class="string">&#x27;be.calledWith&#x27;</span>, <span class="string">&#x27;Error: User cancelled&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test runs and confirms our application now behaves correctly.</p><p><img src="../images/browser-filesystem-api/test-error.png" alt="Testing the error handling"></p><p>Nice.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s say you have a web application that calls &lt;a href=&quot;https://web.dev/file-system-access/&quot;&gt;browser FileSystem API&lt;/a&gt; to read a fi
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Save The Page On Test Failure</title>
    <link href="https://glebbahmutov.com/blog/cyclope-intro/"/>
    <id>https://glebbahmutov.com/blog/cyclope-intro/</id>
    <published>2021-12-22T05:00:00.000Z</published>
    <updated>2021-12-22T18:02:28.473Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes a Cypress test fails on CI, and you cannot determine why the test has failed from the screenshot and video alone. For example, if a <code>cy.get(&#39;[data-cy=...]&#39;)</code> command fails to find an element, but you see the element in the screenshot and are wondering &quot;what has happened...&quot;. Maybe the data attribute was missing due to some feature flag? Maybe it is a bug in Cypress? How can you look at the DOM of the page itself?</p><p>Here is where my <a href="https://github.com/bahmutov/cyclope">cyclope</a> comes in handy. It has a feature for saving the full page whenever you want, including automatically saving the page on test failure.</p><h2><span id="the-app">The app</span></h2><p>Let&#39;s take an example application in the repo <a href="https://github.com/bahmutov/todo-app-for-cyclope">bahmutov/todo-app-for-cyclope</a> and write a test. Since we don&#39;t want to spend a lot of time, we will write a single test to add and complete items.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;adds and removes todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=&quot;add-todo&quot;]&#x27;</span>).clear()</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=&quot;add-todo&quot;]&#x27;</span>).type(</span><br><span class="line">    <span class="string">&#x27;record the test&#123;enter&#125;&#x27;</span>,</span><br><span class="line">  )</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=&quot;add-todo&quot;]&#x27;</span>).clear()</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=&quot;add-todo&quot;]&#x27;</span>).type(</span><br><span class="line">    <span class="string">&#x27;find the secret&#123;enter&#125;&#x27;</span>,</span><br><span class="line">  )</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=&quot;add-todo&quot;]&#x27;</span>).clear()</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=&quot;add-todo&quot;]&#x27;</span>).type(<span class="string">&#x27;use Studio&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=todo]&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">    .eq(<span class="number">1</span>)</span><br><span class="line">    .find(<span class="string">&#x27;.cb-input&#x27;</span>)</span><br><span class="line">    .check()</span><br><span class="line">    .should(<span class="string">&#x27;be.checked&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;#items-left&#x27;</span>).should(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;#completed&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;#completed&#x27;</span>).should(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes successfully</p><p><img src="../images/cyclope-intro/test.png" alt="The passing test"></p><p>Super, now let&#39;s run this test on CI. I picked CircleCI using the <a href="https://github.com/cypress-io/circleci-orb">Cypress CircleCI Orb</a>.</p><figure class="highlight yml"><figcaption><span>.circleci/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/cypress-io/circleci-orb</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:3777&#x27;</span></span><br><span class="line">          <span class="attr">config:</span> <span class="string">&#x27;baseUrl=http://localhost:3777&#x27;</span></span><br><span class="line">          <span class="comment"># no need to store the workspace, as there are no jobs after this one</span></span><br><span class="line">          <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>The test passes successfully on CI.</p><h2><span id="the-failed-test">The failed test</span></h2><p>Now I am getting too excited and I add one more assertion to verify the &quot;Completed&quot; view shows a single Todo.</p><figure class="highlight diff"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  cy.get(&#x27;#completed&#x27;).click()</span><br><span class="line">  cy.get(&#x27;#completed&#x27;).should(&#x27;have.class&#x27;, &#x27;on&#x27;)</span><br><span class="line"><span class="addition">+ cy.get(&#x27;[data-cy=todo]:visible&#x27;)</span></span><br><span class="line"><span class="addition">+   .should(&#x27;have.length&#x27;, 1)</span></span><br><span class="line"><span class="addition">+   .contains(&#x27;find the secret&#x27;)</span></span><br></pre></td></tr></table></figure><p>I push the code without checking it first, and ... the test fails.</p><p><img src="../images/cyclope-intro/failed.png" alt="The test failed on CI"></p><p>To debug the failure I could do three things:</p><ol><li>Run the test locally, hoping it shows the same problem</li><li>Record the test to <a href="https://on.cypress.io/dashboard-introduction">Cypress Dashboard</a></li><li>Store images and video automatically generated by Cypress on CircleCI as a test artifact</li></ol><p>Let&#39;s store the test images and video on CI by adding the following to the Cypress Run job</p><figure class="highlight diff"><figcaption><span>.circleci/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  - cypress/run:</span><br><span class="line">      ...</span><br><span class="line">      no-workspace: true</span><br><span class="line"><span class="addition">+     store_artifacts: true</span></span><br></pre></td></tr></table></figure><p><img src="../images/cyclope-intro/ci.png" alt="The failed test screenshot and videos stored on CircleCI"></p><p>We can click on the MP4 file to watch the video, and click on the image filename to see the screenshot - CircleCI acts as a static HTML server by default. Let&#39;s look at the screenshot.</p><p><img src="../images/cyclope-intro/screenshot.png" alt="The Cypress at the moment of the failure"></p><p>Notice something suspicious - <code>cy.get(&#39;[data-cy=todo]&#39;)</code> command has found 3 elements, but some of them were invisible, as indicated by the eye badge.</p><blockquote class="pullquote"><p>📺 Watch my video &quot;<a href="https://www.youtube.com/watch?v=84NQf-HVWWE">Visibility Of Multiple Elements Explained</a>&quot;</p></blockquote><p>So some elements were invisible, some visible, and that is why the test has failed. What are those three elements? This is where an image screenshot is not enough to say. We need to look at the page DOM elements to figure it out.</p><h2><span id="the-cyclope-plugin">The cyclope plugin</span></h2><p>We can install the <a href="https://github.com/bahmutov/cyclope">cyclope</a> using NPM or Yarn</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D cyclope</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> or using Yarn</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add -D cyclope</span></span><br><span class="line"></span><br><span class="line">+ cyclope@2.0.2</span><br></pre></td></tr></table></figure><p>From the plugins file initialize the plugin and return the config object.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://github.com/bahmutov/cyclope</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;cyclope/plugin&#x27;</span>)(on, config)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// IMPORTANT to return the config object</span></span><br><span class="line">  <span class="comment">// with the any changed environment variables</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the support file register the <code>afterEach</code> hook to save the full page if a test fails</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/bahmutov/cyclope</span></span><br><span class="line"><span class="keyword">import</span> &#123; savePageIfTestFailed &#125; <span class="keyword">from</span> <span class="string">&#x27;cyclope&#x27;</span></span><br><span class="line">afterEach(savePageIfTestFailed)</span><br></pre></td></tr></table></figure><p>You can see the plugin in action locally - it will save the full page in a subfolder of <code>cypress/failed</code>. Let&#39;s store this folder on CircleCI as an artifact.</p><figure class="highlight diff"><figcaption><span>.circleci/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  - cypress/run:</span><br><span class="line">      ...</span><br><span class="line">      no-workspace: true</span><br><span class="line">      store_artifacts: true</span><br><span class="line"><span class="addition">+     post-steps:</span></span><br><span class="line"><span class="addition">+       - store_artifacts:</span></span><br><span class="line"><span class="addition">+           path: cypress/failed</span></span><br></pre></td></tr></table></figure><p>Push the code changes and see the messages in the terminal telling the full page was saved.</p><p><img src="../images/cyclope-intro/save.png" alt="The terminal output shows the save messages"></p><p>Let&#39;s look at the &quot;Artifacts&quot; tab on CircleCI where the screenshots, videos, and the full pages are listed.</p><p><img src="../images/cyclope-intro/artifacts.png" alt="The page HTML and CSS and images were saved as test artifacts on CI"></p><p>Click on the &quot;index.html&quot; and see the static page open right from CircleCI, which acts as a static web server. There is no JavaScript running - it is just a DOM snapshot at the moment of failure. Open the DevTools and inspect the todo area - and see that there are invisible Todo elements!</p><p><img src="../images/cyclope-intro/elements.png" alt="Inspect the page elements in the browser"></p><p>Ok, so the application just hides the Todo items when viewing Completed items. Thus our assertion has to limit itself to the visible items using the jQuery <code>:visible</code> pseudo selector.</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- cy.get(&#x27;[data-cy=todo]&#x27;)</span></span><br><span class="line"><span class="addition">+ cy.get(&#x27;[data-cy=todo]:visible&#x27;)</span></span><br><span class="line">    .should(&#x27;have.length&#x27;, 1)</span><br><span class="line">    .contains(&#x27;find the secret&#x27;)</span><br></pre></td></tr></table></figure><p>The test passes. We can see the video of the successful test stored on CircleCI. There are no screenshots and no full page screenshots since no tests have failed. Tip: you can store a full page HTML using <code>cy.close(...)</code> command provided by the <a href="https://github.com/bahmutov/cyclope">cyclope</a> plugin at any point during the test, similar to calling the <code>cy.screenshot(...)</code> command.</p><p><img src="../images/cyclope-intro/fixed.png" alt="The passing test artifacts on CircleCI include only the MP4 video"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sometimes a Cypress test fails on CI, and you cannot determine why the test has failed from the screenshot and video alone. For example, 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="circle" scheme="https://glebbahmutov.com/blog/tags/circle/"/>
    
  </entry>
  
  <entry>
    <title>Cypress Hosts Option</title>
    <link href="https://glebbahmutov.com/blog/cypress-hosts-option/"/>
    <id>https://glebbahmutov.com/blog/cypress-hosts-option/</id>
    <published>2021-12-20T05:00:00.000Z</published>
    <updated>2021-12-20T17:02:37.808Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Problem:</strong> you have a local HTTPS site (for example using Create-React-App) and want to access it locally using <code>https://&lt;domain name&gt;:3000</code>. How do you do it? Here is my solution that probably the simplest way of accessing domains using self-signed certificates. You can find the source code in the repo <a href="https://github.com/bahmutov/cypress-local-https">bahmutov/cypress-local-https</a>.</p><h2><span id="local-self-signed-certificate">Local self-signed certificate</span></h2><p>Let&#39;s say I want to test my own (non-existent) domain &quot;my-secure-site&quot;. I will create a self-signed certificate on Mac (other operating systems have their own quirks)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ brew install mkcert</span><br><span class="line">$ mkcert -install</span><br><span class="line">$ mkdir .cert</span><br><span class="line">$ mkcert -key-file .&#x2F;.cert&#x2F;key.pem -cert-file .&#x2F;.cert&#x2F;cert.pem &quot;my-secure-site&quot;</span><br></pre></td></tr></table></figure><p>Now I have two text files in the folder <code>.cert</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat .cert&#x2F;key.pem</span><br><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">MIIEvQIBADANBgkqhkiG9w0BAQEFA...</span><br><span class="line"></span><br><span class="line">$ cat .cert&#x2F;perm.pem</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIEVzCCAr+gAwIBAgIQL</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2><span id="the-application">The application</span></h2><p>I have scaffolded a new React application using <a href="https://create-react-app.dev/">Create-React-App</a> v5. I have set the following options in the <a href="https://github.com/bahmutov/cypress-local-https/blob/main/.env.development">.env.development</a> file.</p><figure class="highlight ini"><figcaption><span>.env.development</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">HTTPS</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">BROWSER</span>=none</span><br><span class="line"><span class="comment"># load the local certificate</span></span><br><span class="line"><span class="attr">SSL_CRT_FILE</span>=./.cert/cert.pem</span><br><span class="line"><span class="attr">SSL_KEY_FILE</span>=./.cert/key.pem</span><br></pre></td></tr></table></figure><p>Let&#39;s start the local app</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br><span class="line"></span><br><span class="line">Compiled successfully!</span><br><span class="line"></span><br><span class="line">You can now view cypress-local-https in the browser.</span><br><span class="line"></span><br><span class="line">  Local:            https://localhost:3000</span><br><span class="line">  On Your Network:  https://10.0.0.187:3000</span><br></pre></td></tr></table></figure><p>If we try to access the local site at <code>https://localhost:3000</code> we get a problem: our self-signed certificate is for domain &quot;my-secure-site&quot;, not for &quot;localhost&quot;.</p><p><img src="../images/cypress-hosts-option/error.png" alt="HTTPS localhost error"></p><p>If we try to access <code>https://my-secure-site:3000</code> the browser does not know what to do. The browser asks the network stack to look up the IP address for domain name &quot;my-secure-site&quot;, which hits the DNS server, which returns &quot;UNKNOWN&quot; error. We are stuck.</p><h2><span id="hosts-option">Hosts option</span></h2><p>Typically at this point, you would modify your local <a href="https://en.wikipedia.org/wiki/Hosts_%28file%29">hosts file</a> and add the following line to it to map the name &quot;my-secure-site&quot; to the local IP address 127.0.0.1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># my local testing for cypress-hosts-option</span><br><span class="line">127.0.0.1 my-secure-site</span><br></pre></td></tr></table></figure><p>You might need to clear the local network DNS cache, restart the browser. Who knows.</p><p>There is an easier way if all you plan to do is to run end-to-end tests against the local application. You can specify the local domain mapping using the (absolutely undocumented) <code>hosts</code> Cypress <a href="https://on.cypress.io/configuration">configuration option</a>:</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;https://my-secure-site:3000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;hosts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;my-secure-site&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note: the &quot;hosts&quot; resolution only maps the domain name to an IP address, it does nothing to the port number.</p><p>Start Cypress and enjoy the <code>cy.visit(&#39;/&#39;)</code> correctly loading your local HTTPS site.</p><p><img src="../images/cypress-hosts-option/visit.png" alt="Visit the local HTTPS site from the test"></p><p>Other uses for locally mapped <code>hosts</code> in Cypress: tricking single sing-on flows (see the <a href="https://github.com/cypress-io/cypress-example-recipes">cypress-example-recipes</a> repo) and blocking resources from some domains.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt; you have a local HTTPS site (for example using Create-React-App) and want to access it locally using &lt;code&gt;http
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Check Items For Duplicates</title>
    <link href="https://glebbahmutov.com/blog/check-for-duplicates/"/>
    <id>https://glebbahmutov.com/blog/check-for-duplicates/</id>
    <published>2021-12-18T05:00:00.000Z</published>
    <updated>2021-12-18T19:30:50.244Z</updated>
    
    <content type="html"><![CDATA[<p>In my previous blog post <a href="/blog/fp-cy-helpers/" title="Functional Helpers For Cypress Tests">Functional Helpers For Cypress Tests</a> I have shown how to test if a table is sorted. In this blog post I will show how to check a list of items on the page to detect any duplicates. You can find the shown source code in the repos <a href="https://github.com/bahmutov/cypress-examples">bahmutov/cypress-examples</a> and <a href="https://github.com/bahmutov/cypress-should-really">bahmutov/cypress-should-really</a>.</p><h2><span id="check-duplicate-text">Check duplicate text</span></h2><p>Let&#39;s say we have a list of items and want to confirm there are no duplicates. We need to grab the desired elements, get the text from each one, then check the array of strings for duplicates. You can find this example in the <a href="https://glebbahmutov.com/cypress-examples/">cypress-examples recipes</a>.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- items without duplicates --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Apples<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Oranges<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Bananas<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>For better <a href="https://on.cypress.io/retry-ability">retry-ability</a> we should write all steps inside a <code>should(callback)</code> function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">  <span class="comment">// wait for the list to be stable</span></span><br><span class="line">  .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  .and(<span class="function">(<span class="params">$list</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> values = Cypress._.map($list, <span class="string">&#x27;innerText&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> distinct = Cypress._.uniq(values)</span><br><span class="line">    expect(distinct, <span class="string">&#x27;all strings are different&#x27;</span>).to.have.length(</span><br><span class="line">      values.length,</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/check-for-duplicates/list.png" alt="List has no duplicates"></p><p><strong>Tip:</strong> destructure the <code>Cypress._</code> object to get the <code>map</code> and <code>uniq</code> functions for more concise test code</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// destructure Cypress._ for convenience</span></span><br><span class="line"><span class="keyword">const</span> &#123; map, uniq &#125; = Cypress._</span><br><span class="line">cy.get(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">  <span class="comment">// wait for the list to be stable</span></span><br><span class="line">  .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  .and(<span class="function">(<span class="params">$list</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> values = map($list, <span class="string">&#x27;innerText&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> distinct = uniq(values)</span><br><span class="line">    expect(distinct, <span class="string">&#x27;all strings are different&#x27;</span>).to.have.length(</span><br><span class="line">      values.length,</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Since <code>map</code> and <code>uniq</code> are so short, we can skip the intermediate variable and compose the calls</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; map, uniq &#125; = Cypress._</span><br><span class="line">cy.get(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">  <span class="comment">// wait for the list to be stable</span></span><br><span class="line">  .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  .and(<span class="function">(<span class="params">$list</span>) =&gt;</span> &#123;</span><br><span class="line">    expect(</span><br><span class="line">      uniq(map($list, <span class="string">&#x27;innerText&#x27;</span>)), <span class="string">&#x27;all strings are different&#x27;</span></span><br><span class="line">    ).to.have.length(values.length)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2><span id="report-duplicates">Report duplicates</span></h2><p>The code above works, but it shows a very confusing and unhelpful error if there are duplicates.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Apples<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Oranges<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Bananas<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Oranges<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/check-for-duplicates/error.png" alt="The error is unhelpful"></p><p>The error should specifically report which items are duplicates. So we can process the items slightly differently and count the number of times each item is seen using <code>_.countBy</code> function. Then we can pick just the items with the count larger than one using <code>_.pickBy</code> function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// destructure Cypress._ for convenience</span></span><br><span class="line"><span class="keyword">const</span> &#123; map, countBy, pickBy &#125; = Cypress._</span><br><span class="line">cy.get(<span class="string">&#x27;li&#x27;</span>).should(<span class="function">(<span class="params">$list</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> counts = countBy(map($list, <span class="string">&#x27;innerText&#x27;</span>))</span><br><span class="line">  <span class="keyword">const</span> duplicates = pickBy(counts, <span class="function">(<span class="params">n</span>) =&gt;</span> n &gt; <span class="number">1</span>)</span><br><span class="line">  expect(duplicates, <span class="string">&#x27;duplicates&#x27;</span>).to.be.empty</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test reports the duplicates nicely</p><p><img src="../images/check-for-duplicates/duplicates.png" alt="The error shows the duplicate values"></p><p>This is a good error.</p><h2><span id="detecting-duplicate-attributes">Detecting duplicate attributes</span></h2><p>What if instead of the element text, we want to detect duplicate attributes? We first need to call <code>Element.getAttribute</code> but then the rest stays the same.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-product-id</span>=<span class="string">&quot;a11&quot;</span>&gt;</span>Apples<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-product-id</span>=<span class="string">&quot;b20&quot;</span>&gt;</span>Oranges<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-product-id</span>=<span class="string">&quot;a11&quot;</span>&gt;</span>Bananas<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Notice the duplicate product id &quot;a11&quot;. Let&#39;s make sure we find it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// destructure Cypress._ for convenience</span></span><br><span class="line"><span class="keyword">const</span> &#123; map, countBy, pickBy &#125; = Cypress._</span><br><span class="line">cy.get(<span class="string">&#x27;li&#x27;</span>).should(<span class="function">(<span class="params">$list</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> ids = map($list, <span class="function">(<span class="params">$el</span>) =&gt;</span> $el.getAttribute(<span class="string">&#x27;data-product-id&#x27;</span>))</span><br><span class="line">  <span class="keyword">const</span> counts = countBy(ids)</span><br><span class="line">  <span class="keyword">const</span> duplicates = pickBy(counts, <span class="function">(<span class="params">n</span>) =&gt;</span> n &gt; <span class="number">1</span>)</span><br><span class="line">  expect(duplicates, <span class="string">&#x27;duplicates&#x27;</span>).to.be.empty</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/check-for-duplicates/a11.png" alt="Detecting the duplicate attribute a11"></p><h2><span id="using-functional-helpers">Using functional helpers</span></h2><p>The code above works pretty well, but you might write it a little bit more concise using functional helpers from <a href="https://github.com/bahmutov/cypress-should-really">cypress-should-really</a> if that is your thing. Our assertion callback function makes the following steps passing the result from each step to the next one.</p><ul><li>maps each element to the attribute by calling <code>getAttribute</code> method with &quot;data-product-id&quot; argument<ul><li>this can be done using <code>map(invoke(&#39;getAttribute&#39;, &#39;data-product-id&#39;))</code> code</li></ul></li><li>counts the number of times each value is present in the array using <code>_.countBy</code> function<ul><li>we can keep this step as is</li></ul></li><li>from the count object, picks properties with value greater than one<ul><li>we can use the function <code>(counts) =&gt; pickBy(counts, greaterThan(1))</code> to achieve this</li></ul></li></ul><p>The entire pipeline using <code>cypress-should-really</code> helpers and <code>Cypress._</code> functions is below.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  really,</span><br><span class="line">  invoke,</span><br><span class="line">  map,</span><br><span class="line">  greaterThan</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-should-really&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123; countBy, pickBy &#125; = Cypress._</span><br><span class="line">it(<span class="string">&#x27;by attribute (greaterThan)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;cypress/integration/duplicates/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// using a few more shortcuts</span></span><br><span class="line">  cy.get(<span class="string">&#x27;li&#x27;</span>).should(</span><br><span class="line">    really(</span><br><span class="line">      map(invoke(<span class="string">&#x27;getAttribute&#x27;</span>, <span class="string">&#x27;data-product-id&#x27;</span>)),</span><br><span class="line">      countBy,</span><br><span class="line">      (counts) =&gt; pickBy(counts, greaterThan(<span class="number">1</span>)),</span><br><span class="line">      <span class="string">&#x27;be.empty&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Notice the <code>(counts) =&gt; pickBy(counts, greaterThan(1))</code> step. The Lodash function <code>pickBy</code> expects the object as the first argument. The object is not yet known, it will be computed in the previous step. The second argument is a function <code>greaterThan(1)</code>, which is known. If the expected order of arguments could be reversed and curried, we could partially apply the callback right away like <code>pickBy(greaterThan(1))</code>. But the order is reversed, which makes us write a function just to pass the first argument.</p><p>We could write our own function helper <code>pickBy</code>, but here is another possible solution. We can flip the order of arguments using functional helper <code>flipTwoArguments</code> available in <code>cypress-should-really</code>. For example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;flipTwoArguments&#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress-should-really&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> pickByFn = flipTwoArguments(Cypress._.pickBy)</span><br><span class="line"><span class="comment">// call pickByFn with the callback and the object</span></span><br><span class="line"><span class="keyword">const</span> result = pickByFn(largerThan(<span class="number">1</span>), counts)</span><br></pre></td></tr></table></figure><p>The function <code>pickByFn</code> works great, we just need to apply the first known argument so it only waits for the <code>counts</code> object to be provided. We can apply the first argument using the <code>partial</code> helper</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;flipTwoArguments, partial, greaterThan&#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress-should-really&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> pickByFn = flipTwoArguments(Cypress._.pickBy)</span><br><span class="line"><span class="keyword">const</span> pickLargerThanOne = partial(pickByFn, greaterThan(<span class="number">1</span>))</span><br><span class="line"><span class="comment">// call pickLargerThanOne with the object</span></span><br><span class="line"><span class="keyword">const</span> result = pickLargerThanOne(counts)</span><br></pre></td></tr></table></figure><p>Now that we got our &quot;pick&quot; function sorted out, we can write the callback function in a single shot.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;by attribute (flip arguments and partial apply)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;cypress/integration/duplicates/index.html&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> pickLargerThanOne = partial(</span><br><span class="line">    flipTwoArguments(pickBy),</span><br><span class="line">    greaterThan(<span class="number">1</span>),</span><br><span class="line">  )</span><br><span class="line">  cy.get(<span class="string">&#x27;li&#x27;</span>).should(</span><br><span class="line">    really(</span><br><span class="line">      map(invoke(<span class="string">&#x27;getAttribute&#x27;</span>, <span class="string">&#x27;data-product-id&#x27;</span>)),</span><br><span class="line">      countBy,</span><br><span class="line">      pickLargerThanOne,</span><br><span class="line">      <span class="string">&#x27;be.empty&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/check-for-duplicates/last.png" alt="The functional programming test detects the duplicate attribute &quot;a11&quot;"></p><blockquote class="pullquote"><p>🤪 If Stephen Curry wrote the above function, he would get free points for it. Of course, being a Curry, he would not even need to use the partial helper...</p></blockquote><p>Note: this blog post was mentioned in the <a href="https://cypresstips.substack.com/p/check-items-for-duplicates">Cypress Advent Calendar 2021 Day 18</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In my previous blog post &lt;a href=&quot;/blog/fp-cy-helpers/&quot; title=&quot;Functional Helpers For Cypress Tests&quot;&gt;Functional Helpers For Cypress Tests
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="functional" scheme="https://glebbahmutov.com/blog/tags/functional/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress internal commands cy.now and cy.state</title>
    <link href="https://glebbahmutov.com/blog/cy-now-and-state/"/>
    <id>https://glebbahmutov.com/blog/cy-now-and-state/</id>
    <published>2021-12-17T05:00:00.000Z</published>
    <updated>2021-12-17T20:13:38.263Z</updated>
    
    <content type="html"><![CDATA[<p>Cypress does not have a REPL which is unfortunate: sometimes you just want to run a few Cypress commands after the test has finished to see how to extend the test. Yet the only way you can run a command is by adding it to the spec file, saving it, causing Cypress to re-run the entire test. Unless you use tricks like <a href="/blog/faster-user-creation/" title="using cypress-data-session plugin">using cypress-data-session plugin</a> or <a href="https://www.cypress.io/blog/2019/10/29/split-a-very-long-cypress-test-into-shorter-ones-using-app-actions/">splitting a long test</a>, waiting for the entire test to finish just to check one command is frustrating.</p><p>This is where an internal Cypress command <code>cy.now</code> comes in very handy. This is the only place where <code>cy.now</code> is explained in the Cypress docs:</p><p><img src="../images/cy-now-and-state/cy-now-docs.png" alt="cy.now command documentation"></p><p>Pretty sweet, isn&#39;t it? But if that warning is not strong enough, let me add my own:</p><blockquote class="pullquote"><p>🚨 The <code>cy.now</code> and <code>cy.state</code> commands described in this blog post are internal to Cypress Test Runner. They can change without any warning in the future versions, they may not work in all cases, and they can cause your blood pressure to rise to dangerous levels. Please consult a Cypress doctor before using them.</p></blockquote><p>If you are ok with that, let&#39;s continue.</p><h2><span id="cynow">cy.now</span></h2><p>So let&#39;s say we have opened the DevTools console, the test has finished and we want to visit the site again. In the console run <code>cy.now(&#39;visit&#39;, &#39;/&#39;)</code>. The site loads.</p><p><img src="../images/cy-now-and-state/now-visit.gif" alt="Visit the baseUrl using the cy.now command"></p><p>Let&#39;s say we want to check if a selector works. Try using <code>cy.now(&#39;get&#39;, &#39;.todo&#39;)</code> to see what happens.</p><p><img src="../images/cy-now-and-state/get1.gif" alt="Calling cy.get to find all elements with class todo"></p><p>Hmm, which elements did it find? The <code>cy.now</code> returns a promise, so we should print the results to the console using <code>cy.now(&#39;get&#39;, &#39;.todo&#39;).then(console.log)</code>.</p><p><img src="../images/cy-now-and-state/log.gif" alt="Logging the resolved elements to the console"></p><p>There is another way to see the results of the <code>cy.now</code> commands. They are logged to the Cypress Command Log at the end of the last test (excluding pending or skipped tests). The video below shows me expanding the last test and observing the commands I executed using <code>cy.now</code> command.</p><p><img src="../images/cy-now-and-state/log2.gif" alt="Cypress Command Log shows the cy.now commands inside the last test"></p><p>Note that there are no DOM snapshots for <code>cy.now</code> commands, but you can log the command results by clicking on the command itself.</p><p>The <code>cy.now</code> command returns a Promise object, not a Cypress chainable object, thus you cannot chain multiple commands together, which makes it hard to build a REPL.</p><h2><span id="cynow-use-case">cy.now use case</span></h2><p>Building an entire testing suite by relying on <code>cy.now</code> is a bad idea. But using it sparingly might be necessary. For example, in <a href="https://github.com/bahmutov/cypress-data-session">cypress-data-session</a> I have a few static <code>Cypress.*</code> methods to help with debugging the cached data. Like calling a task by name to print all currently existing data sessions in the plugin process - I don&#39;t want the user to type <code>cy.now(&#39;tast&#39;, ...)</code> to list the sessions, instead I <a href="https://github.com/bahmutov/cypress-data-session/blob/9eb8f30b00ca19335817cdac2cf6009419d2632c/src/index.js#L265-L390">exposed static methods</a>:</p><figure class="highlight js"><figcaption><span>cypress/plugin/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in the plugin file we have a task that prints the sessions and returns them</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cypressDataSessionPlugin</span>(<span class="params">on, config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> savedValues = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">printDataSessions</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> n = <span class="built_in">Object</span>.keys(savedValues).length</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;%d data session(s)&#x27;</span>, n)</span><br><span class="line">    <span class="built_in">Object</span>.keys(savedValues).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;  %s: %o&#x27;</span>, key, savedValues[key])</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> savedValues</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="string">&#x27;dataSession:print&#x27;</span>: printDataSessions,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = cypressDataSessionPlugin</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Prints data sessions stored in the plugin space</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Cypress.printSharedDataSessions = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> cy.now(<span class="string">&#x27;task&#x27;</span>, <span class="string">&#x27;dataSession:print&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Super, the user can run this command at any time from the console to see the sessions. The browser even shows autocomplete for the <code>Cypress</code> methods, which is convenient.</p><p><img src="../images/cy-now-and-state/print.gif" alt="Calling a static Cypress method that calls cy.now"></p><p>But what if we want to use the same static method <em>during the test</em>?</p><h2><span id="cystate">cy.state</span></h2><p>Take the static method <code>Cypress.printSharedDataSessions</code>. Imagine we want to confirm the plugin process has a specific key present. We want to call the task and get the value and chain assertions on it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;stores the value&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> key = ...</span><br><span class="line">  <span class="comment">// somewhere inside the test file</span></span><br><span class="line">  <span class="comment">// we get the data session from the plugin file</span></span><br><span class="line">  Cypress.printSharedDataSessions()</span><br><span class="line">    .should(<span class="string">&#x27;not.be.empty&#x27;</span>)</span><br><span class="line">    .and(<span class="string">&#x27;have.property&#x27;</span>, key)</span><br><span class="line">    .should(<span class="string">&#x27;be.an&#x27;</span>, <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;data&#x27;</span>, <span class="string">&#x27;test value&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hmm, we need to run <code>cy.task</code> if the tests are running or use <code>cy.now</code> if the user called <code>Cypress.printSharedDataSessions</code> from the browser console. How do we know if the tests are running or not? This is where the internal <code>cy.state</code> command comes in handy. Again, this is a command NOT meant to be used. The Cypress Documentation site has a few places where it mentions it, like this one:</p><p><img src="../images/cy-now-and-state/cy-state-docs.png" alt="Cypress documentation mentions cy.state as a way to get the test retries counter"></p><p>The best way to understand what <code>cy.state</code> has is to look at it in the console. It is a grab bag of everything Cypress Test Runner uses internally.</p><p><img src="../images/cy-now-and-state/cy-state.png" alt="cy.state returns an object referencing all Test Runner internals"></p><p>There are a lot of things. Often Cypress public commands like <code>cy.get</code> use <code>cy.state(&#39;document&#39;)</code> and <code>cy.state(&#39;window&#39;)</code> to get references to the application&#39;s document and window objects without using <code>cy.document()</code> and <code>cy.window()</code> commands. In our case <code>cy.state(&#39;ctx&#39;)._runnable</code> looks like it might do the trick. If there is a test running, it returns an object. After the tests have finished, it returns undefined. Thus we can we use it to determine if we can call <code>cy.task</code> or must use <code>cy.now</code> to call get the info from the plugin process.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns true if we are currently running a test</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isTestRunning</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Boolean</span>(cy.state(<span class="string">&#x27;ctx&#x27;</span>)._runnable)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Prints data sessions stored in the plugin space</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Cypress.printSharedDataSessions = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (isTestRunning()) &#123;</span><br><span class="line">    <span class="keyword">return</span> cy.task(<span class="string">&#x27;dataSession:print&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cy.now(<span class="string">&#x27;task&#x27;</span>, <span class="string">&#x27;dataSession:print&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>One last detail. Normally <code>cy.*</code> methods can only be called inside a test or a hook. The commands <code>cy.now</code> and <code>cy.state</code> are exceptions.</p><p><strong>Note:</strong> this blog post was linked from <a href="https://cypresstips.substack.com/p/cypress-secrets-cynow-and-cystate">Cypress Advent 2021</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Cypress does not have a REPL which is unfortunate: sometimes you just want to run a few Cypress commands after the test has finished to s
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Faster User Object Creation</title>
    <link href="https://glebbahmutov.com/blog/faster-user-creation/"/>
    <id>https://glebbahmutov.com/blog/faster-user-creation/</id>
    <published>2021-12-15T05:00:00.000Z</published>
    <updated>2021-12-15T17:02:35.142Z</updated>
    
    <content type="html"><![CDATA[<p>In the blog post <a href="#">Post not found: cypress-data-session</a> I have introduced the <a href="https://github.com/bahmutov/cypress-data-session">cypress-data-session</a> plugin. In this blog post I will show how to use this plugin to speed up creating a user during the test, and how to instantly log in the user by caching the session cookie.</p><!-- toc --><ul><li><a href="#utilities">Utilities</a></li><li><a href="#the-first-test">The first test</a></li><li><a href="#deleting-all-users">Deleting all users</a></li><li><a href="#conditional-creation">Conditional creation</a></li><li><a href="#restarting-the-spec">Restarting the spec</a></li><li><a href="#session-data-session">Session data session</a></li><li><a href="#dependent-data-sessions">Dependent data sessions</a></li><li><a href="#validation">Validation</a></li></ul><!-- tocstop --><blockquote class="pullquote"><p>🎁 You can find the source code for this post in the repo <a href="https://github.com/bahmutov/chat.io">bahmutov/chat.io</a>.</p></blockquote><h2><span id="utilities">Utilities</span></h2><p>First, let&#39;s introduce two utility functions for creating a new user and for logging in.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A function that visits the page and creates the new user by submitting a form.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">username</span></span> - the username to use</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">password</span></span> - the password to use</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerUser</span>(<span class="params">username, password</span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;#create-account&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;.register-form&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    .within(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      cy.get(<span class="string">&#x27;[placeholder=username]&#x27;</span>)</span><br><span class="line">        .type(username, &#123; <span class="attr">delay</span>: <span class="number">100</span> &#125;)</span><br><span class="line">        .should(<span class="string">&#x27;have.value&#x27;</span>, username)</span><br><span class="line">      cy.get(<span class="string">&#x27;[placeholder=password]&#x27;</span>).type(password, &#123; <span class="attr">delay</span>: <span class="number">100</span> &#125;)</span><br><span class="line"></span><br><span class="line">      cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;create&#x27;</span>).click().should(<span class="string">&#x27;be.disabled&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// if everything goes well</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;.success&#x27;</span>, <span class="string">&#x27;Your account has been created&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Opens the page, enters the username and password and clicks the login button.</span></span><br><span class="line"><span class="comment"> * If the login is successful, the browser should redirect to the rooms page.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>username Existing user name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>password The password to use</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loginUser</span>(<span class="params">username, password</span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;.login-form&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    .within(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      cy.get(<span class="string">&#x27;[placeholder=username]&#x27;</span>)</span><br><span class="line">        .type(username, &#123; <span class="attr">delay</span>: <span class="number">100</span> &#125;)</span><br><span class="line">        .should(<span class="string">&#x27;have.value&#x27;</span>, username)</span><br><span class="line">      cy.get(<span class="string">&#x27;[placeholder=password]&#x27;</span>).type(password, &#123; <span class="attr">delay</span>: <span class="number">100</span> &#125;)</span><br><span class="line"></span><br><span class="line">      cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;login&#x27;</span>).click()</span><br><span class="line">      cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note that <code>registerUser</code> assumes the user with the given username does not exist yet. Now let&#39;s right our first test.</p><h2><span id="the-first-test">The first test</span></h2><p>The first test assumes a clean slate.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;registers and logs in via UI&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">&#x27;Test&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> password = <span class="string">&#x27;MySecreT&#x27;</span></span><br><span class="line">  registerUser(username, password)</span><br><span class="line">  loginUser(username, password)</span><br><span class="line">  <span class="comment">// check if the user is logged in successfully</span></span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;.user-info&#x27;</span>, <span class="string">&#x27;Test&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>It works</p><p><img src="../images/faster-user-creation/test1.gif" alt="The test passes on the first run"></p><p>The test unfortunately fails when we try to re-run it with the error &quot;Username already exists&quot;</p><p><img src="../images/faster-user-creation/test2.gif" alt="The test fails to create a user with the same username"></p><p>Ok, so we need to delete the user, or clear all users, or use a random username for every test.</p><h2><span id="deleting-all-users">Deleting all users</span></h2><p>We can update the test to delete the users before registration</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;deletes all users before registering&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.task(<span class="string">&#x27;clearUsers&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">&#x27;Test&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> password = <span class="string">&#x27;MySecreT&#x27;</span></span><br><span class="line">  registerUser(username, password)</span><br><span class="line">  loginUser(username, password)</span><br><span class="line">  <span class="comment">// check if the user is logged in successfully</span></span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;.user-info&#x27;</span>, <span class="string">&#x27;Test&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The task <code>clearUsers</code> is registered in the <a href="https://github.com/bahmutov/chat.io/blob/main/cypress/plugins/index.js">cypress/plugins/index.js file</a> and uses the application&#39;s database code to perform its task.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> database = <span class="built_in">require</span>(<span class="string">&#x27;../../app/database&#x27;</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">clearUsers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;clear users&#x27;</span>)</span><br><span class="line">  <span class="keyword">await</span> database.models.user.deleteMany(&#123;&#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    clearUsers,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>🎓 You can clear the users yourself from the browser&#39;s DevTools console by calling the task:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.now(<span class="string">&#x27;task&#x27;</span>, <span class="string">&#x27;clearUsers&#x27;</span>)</span><br></pre></td></tr></table></figure></p></blockquote><p>Great, but now every test takes six seconds - and this is our little application. What if we needed to set something else? Or if there are external systems involved that slow the user object creation? Do we want to wait 30 seconds just to start each test?</p><h2><span id="conditional-creation">Conditional creation</span></h2><p>We probably want to create the user <em>if it does not exist yet</em>. Good, how do we do that? By using <a href="https://github.com/bahmutov/cypress-data-session">cypress-data-session</a> - just move the <code>registerUser</code> command into the <code>cy.dataSession</code> callback <code>setup</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;cache the created user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">&#x27;Test&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> password = <span class="string">&#x27;MySecreT&#x27;</span></span><br><span class="line">  cy.dataSession(&#123;</span><br><span class="line">    name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      registerUser(username, password)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// as long as there is something in memory</span></span><br><span class="line">    <span class="comment">// we know we have created the user already</span></span><br><span class="line">    validate: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  loginUser(username, password)</span><br><span class="line">  <span class="comment">// check if the user is logged in successfully</span></span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;.user-info&#x27;</span>, <span class="string">&#x27;Test&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The first time the test runs, there is no data session with the name &quot;user&quot;, thus it executes the <code>setup</code> callback with our command to register the user.</p><p><img src="../images/faster-user-creation/cache-user.gif" alt="The first time the test run"></p><p>The test looks exactly like our very first attempt, but with an extra message at the top of <code>cy.dataSession</code></p><p><img src="../images/faster-user-creation/first.png" alt="The data session user needs to be created"></p><p>Let&#39;s run the test again.</p><p><img src="../images/faster-user-creation/still-valid.gif" alt="The second run"></p><p>Notice the test became faster - it skipped creating the user steps completely. At the start of the data session, it found something in its memory, it was valid (thanks to the <code>validate: true</code> parameter!), and it skipped running <code>registerUser</code> function.</p><p><img src="../images/faster-user-creation/second.png" alt="The data session user was found in memory"></p><p>Super. We can even see what was cached in memory under the session name &quot;user&quot; by running from the DevTools console <code>Cypress.getDataSession(&#39;user&#39;)</code> - this static method is added to the global <code>Cypress</code> object by the <a href="https://github.com/bahmutov/cypress-data-session">cypress-data-session</a> plugin.</p><p><img src="../images/faster-user-creation/get-data-session.png" alt="The data session contents"></p><p>The data session stores whatever is yielded by the last Cypress command inside the <code>setup</code> callback. In our case, it was the DOM element <code>cy.contains(&#39;.success&#39;, &#39;Your account has been created&#39;)</code>. It works in our case, in the future example we will store something more meaningful like the user session cookie.</p><h2><span id="restarting-the-spec">Restarting the spec</span></h2><p>What happens if we hard-reload the spec file? Or close and open the Cypress? We will have no data sessions, but the user is already in the database. This will break our test, as we will try to create the user to store in the data session, hitting the &quot;Username already exists&quot; error. This is where the <code>init</code> callback is used.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="comment">// if there is nothing in memory for the session</span></span><br><span class="line">  <span class="comment">// try pulling the user from the database</span></span><br><span class="line">  <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    cy.task(<span class="string">&#x27;findUser&#x27;</span>, username)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    registerUser(username, password)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// as long as there is something in memory</span></span><br><span class="line">  <span class="comment">// we know we have created the user already</span></span><br><span class="line">  validate: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The first time <code>cy.dataSession</code> runs and does not find the &quot;user&quot; session, it first runs the <code>init</code> callback. If it yields something, and that value passes the validation (thanks again to <code>validate: true</code> property), our code skips the <code>setup</code> and stores the value in memory. Now we have the data session ready to go, initialized with the already existing user.</p><p><img src="../images/faster-user-creation/init.png" alt="Find the user in the database and cache it"></p><p>The task <code>findUser</code> is implemented in the plugin file using the database access code, just like <code>clearUsers</code> is.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> database = <span class="built_in">require</span>(<span class="string">&#x27;../../app/database&#x27;</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">findUser</span>(<span class="params">username</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;find user&#x27;</span>, username)</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> username !== <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;username must be a string&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> database.models.user.findOne(&#123; username &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    clearUsers,</span><br><span class="line">    findUser,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="session-data-session">Session data session</span></h2><p>What about logging in the user? Do we always have to go through the page and submit the form? How does the browser &quot;know&quot; that the user is logged in? Look at the DevTools - in our case, the <code>/login</code> form submission, if the user supplies valid username and password, the server sets the session cookie called <code>connect.sid</code>.</p><p><img src="../images/faster-user-creation/cookie.png" alt="The session cookie"></p><p>Ok, let&#39;s use <code>cy.dataSession</code>. If we have nothing in memory, our setup should do what we have done already - call the <code>loginUser</code> function. The browser will finish with the logged in user - and that&#39;s when we grab the cookie and <code>cy.dataSession</code> will store it in memory for us.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;logged in&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    loginUser(username, password)</span><br><span class="line">    cy.getCookie(<span class="string">&#x27;connect.sid&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  validate: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Great, but what about the second run? We have the cookie value stored in memory inside the data session &quot;logged in&quot;, but the browser is on the blank page. How do we use the cookie? By setting it ourselves using the <a href="https://on.cypress.io/setcookie">cy.setCookie</a> before visiting the page. And we set the cookie and visit the page in the <code>recreate</code> callback - this function every time the <code>cy.dataSession</code> has valid item in memory.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;logged in&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    loginUser(username, password)</span><br><span class="line">    cy.getCookie(<span class="string">&#x27;connect.sid&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  validate: <span class="literal">true</span>,</span><br><span class="line">  <span class="function"><span class="title">recreate</span>(<span class="params">cookie</span>)</span> &#123;</span><br><span class="line">    cy.setCookie(<span class="string">&#x27;connect.sid&#x27;</span>, cookie.value)</span><br><span class="line">    cy.visit(<span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Beautiful - and fast too. Look at the execution timing when we have the cookie already in memory, we completely skip the slow parts of the test.</p><p><img src="../images/faster-user-creation/two-sessions.png" alt="Two data sessions make the test fast"></p><p>We can inspect the cookie stored in the data session memory.</p><p><img src="../images/faster-user-creation/log-cookie.png" alt="Dump the logged in data session value"></p><h2><span id="dependent-data-sessions">Dependent data sessions</span></h2><p>We have two data sessions: &quot;user&quot; and &quot;logged in&quot;. We storing the user &quot;object&quot; which is not really an object, and the cookie. What if the user object is deleted from the database? Then the test can no longer log in using the cached cookie - because that cookie does not belong to a valid user any more, and the backend check will reject it. Thus the data session &quot;logged in&quot; depends on the data session &quot;user&quot;. If the data session &quot;user&quot; is recomputed for whatever reason, the user needs to be logged in again. This can be done automatically by explicitly listing the dependency between the two data sessions.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;logged in&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    loginUser(username, password)</span><br><span class="line">    cy.getCookie(<span class="string">&#x27;connect.sid&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  validate: <span class="literal">true</span>,</span><br><span class="line">  <span class="function"><span class="title">recreate</span>(<span class="params">cookie</span>)</span> &#123;</span><br><span class="line">    cy.setCookie(<span class="string">&#x27;connect.sid&#x27;</span>, cookie.value)</span><br><span class="line">    cy.visit(<span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  dependsOn: [<span class="string">&#x27;user&#x27;</span>],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Under the hood, the <code>cy.dataSession</code> command keeps the timestamp when the data session called <code>setup</code> function. Thus it can tell if the parent session was recomputed, which invalidates the current data session.</p><h2><span id="validation">Validation</span></h2><p>We skipped over the validation logic, instead using the <code>validate: true</code> in our test. Whenever there is something in the data session memory, we assumed it was valid. This is incorrect, we should validate the user object, and we should check if the session is still valid.</p><p>Here is how we validate the user object - we yield it from the <code>init</code> and <code>setup</code> and it will be stored</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    cy.task(<span class="string">&#x27;findUser&#x27;</span>, username)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    registerUser(username, password)</span><br><span class="line">    cy.task(<span class="string">&#x27;findUser&#x27;</span>, username)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">validate</span>(<span class="params">user</span>)</span> &#123;</span><br><span class="line">    cy.task(<span class="string">&#x27;findUser&#x27;</span>, user.username).then(</span><br><span class="line">      (found) =&gt; found &amp;&amp; found._id === user._id,</span><br><span class="line">    )</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We can see the object yielded by <code>cy.task(&#39;findUser&#39;)</code> stored in memory</p><p><img src="../images/faster-user-creation/user-object.png" alt="The user object to be validated"></p><p>Our <code>validate</code> callback will receive the object from memory, and it needs to make sure there is still a user with this username, and the IDs match. Then we know the user is still good to use.</p><p>Let&#39;s validate the session cookie to prevent the tests failing if the session is very short or there was some backend session purge. Let&#39;s use <a href="https://on.cypress.io/request">cy.request</a> to verify the cookie - by trying to request a protected resource.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;logged in&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    loginUser(username, password)</span><br><span class="line">    cy.getCookie(<span class="string">&#x27;connect.sid&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">validate</span>(<span class="params">cookie</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// try making a request with the cookie value</span></span><br><span class="line">    <span class="comment">// to a protected route. If it is successful</span></span><br><span class="line">    <span class="comment">// we are good to go. If we get a redirect</span></span><br><span class="line">    <span class="comment">// to login instead, we know the cookie is invalid</span></span><br><span class="line">    cy.request(&#123;</span><br><span class="line">      url: <span class="string">&#x27;/rooms&#x27;</span>,</span><br><span class="line">      failOnStatusCode: <span class="literal">false</span>,</span><br><span class="line">      followRedirect: <span class="literal">false</span>,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        cookie: <span class="string">`connect.sid=<span class="subst">$&#123;cookie.value&#125;</span>`</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">      .its(<span class="string">&#x27;status&#x27;</span>)</span><br><span class="line">      .then(<span class="function">(<span class="params">status</span>) =&gt;</span> status === <span class="number">200</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">recreate</span>(<span class="params">cookie</span>)</span> &#123;</span><br><span class="line">    cy.setCookie(<span class="string">&#x27;connect.sid&#x27;</span>, cookie.value)</span><br><span class="line">    cy.visit(<span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  dependsOn: [<span class="string">&#x27;user&#x27;</span>],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/faster-user-creation/request.png" alt="Validating the cached cookie by making a request"></p><p>Beautiful and fast.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the blog post &lt;a href=&quot;#&quot;&gt;Post not found: cypress-data-session&lt;/a&gt; I have introduced the &lt;a href=&quot;https://github.com/bahmutov/cypress-
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Server Running Inside Cypress Plugin Process</title>
    <link href="https://glebbahmutov.com/blog/restart-server/"/>
    <id>https://glebbahmutov.com/blog/restart-server/</id>
    <published>2021-12-12T05:00:00.000Z</published>
    <updated>2021-12-12T00:48:51.099Z</updated>
    
    <content type="html"><![CDATA[<p>In the blog post <a href="/blog/how-to-correctly-unit-test-express-server/" title="How to correctly unit test Express server">How to correctly unit test Express server</a> I have shown how to unit test an Express server using Mocha. In this blog post I will show how to run the Express server inside Cypress plugin process, and how to restart it before each spec.</p><blockquote class="pullquote"><p>🎁 You can find the source code in the repo <a href="https://github.com/bahmutov/server-restart-example">bahmutov/server-restart-example</a>.</p></blockquote><h2><span id="the-server">The server</span></h2><p>My server is a plain <a href="http://expressjs.com/">Express</a> server that I can construct and close when needed. Here is the source code - the server really has a single endpoint, that is enough for us to show the tests.</p><figure class="highlight js"><figcaption><span>src/server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeServer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> app = express()</span><br><span class="line">  app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      message: <span class="string">&#x27;Hello World!&#x27;</span>,</span><br><span class="line">      responseId: <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * <span class="number">1e6</span>),</span><br><span class="line">      port,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> port = <span class="number">6000</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> server = app.listen(port, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> port = server.address().port</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;Example app listening at port %d&#x27;</span>, port)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// close the server</span></span><br><span class="line">      <span class="keyword">const</span> close = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;closing server&#x27;</span>)</span><br><span class="line">          server.close(resolve)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      resolve(&#123; server, port, close &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = makeServer</span><br></pre></td></tr></table></figure><p>To construct and shut down the server one needs to use the returned object.</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> makeServer = <span class="built_in">require</span>(<span class="string">&#x27;./server&#x27;</span>)</span><br><span class="line">makeServer().then(<span class="function">(<span class="params">&#123;server, port, close&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// wait for some signal, then shutdown</span></span><br><span class="line">  <span class="keyword">return</span> close()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="the-first-tests">The first tests</span></h2><p>Let&#39;s write a Cypress API test that confirms something, maybe some fields in the response body.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec1.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;Express server 1&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;responds&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.request(<span class="string">&#x27;http://localhost:6000&#x27;</span>).its(<span class="string">&#x27;body&#x27;</span>).should(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">      message: <span class="string">&#x27;Hello World!&#x27;</span>,</span><br><span class="line">      port: <span class="number">6000</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;responds with random id&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.request(<span class="string">&#x27;http://localhost:6000&#x27;</span>)</span><br><span class="line">      .its(<span class="string">&#x27;body.responseId&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;be.a&#x27;</span>, <span class="string">&#x27;number&#x27;</span>)</span><br><span class="line">      .and(<span class="string">&#x27;be.within&#x27;</span>, <span class="number">1e5</span>, <span class="number">1e6</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Ok, but before we run the tests we need to start the server. We could use <a href="https://github.com/bahmutov/start-server-and-test">start-server-and-test</a>, but let&#39;s just run the server inside the Cypress plugin process, which runs in Node. We can use the <code>before:spec</code> event fired by Cypress before every spec starts to make sure the server is up and running. After the spec file finishes running all tests, we can close the server.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// `on` is used to hook into various events Cypress emits</span></span><br><span class="line">  <span class="comment">// `config` is the resolved Cypress config</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> server, port, close</span><br><span class="line"></span><br><span class="line">  on(<span class="string">&#x27;before:spec&#x27;</span>, <span class="keyword">async</span> (spec) =&gt; &#123;</span><br><span class="line">    <span class="comment">// we can customize the server based on the spec about to run</span></span><br><span class="line">    <span class="keyword">const</span> info = <span class="keyword">await</span> makeServer()</span><br><span class="line">    <span class="comment">// save the server instance information</span></span><br><span class="line">    server = info.server</span><br><span class="line">    port = info.port</span><br><span class="line">    close = info.close</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;started the server on port %d&#x27;</span>, port)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  on(<span class="string">&#x27;after:spec&#x27;</span>, <span class="keyword">async</span> (spec) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!server) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;no server to close&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> close()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;closed the server running on port %d&#x27;</span>, port)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Important:</strong> the <code>before:spec</code> and <code>after:spec</code> are only fired in the non-interactive mode when you use <code>cypress run</code>. We need to enable them to run in the interactive mode too. In Cypress v9 we should enable this using the experimental feature <a href="https://on.cypress.io/experiments">experimentalInteractiveRunEvents</a>.</p><figure class="highlight js"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;experimentalInteractiveRunEvents&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>While we are at it, let&#39;s add another spec file</p><figure class="highlight js"><figcaption><span>cypress/integration/spec2.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;Express server 2&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;has timing info&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.request(<span class="string">&#x27;http://localhost:6000&#x27;</span>)</span><br><span class="line">      <span class="comment">// Cypress adds duration ms to the response</span></span><br><span class="line">      .its(<span class="string">&#x27;duration&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;be.above&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let&#39;s see our tests and the server in action.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ npx cypress run</span><br><span class="line">...</span><br><span class="line">Browser:        Electron 94 (headless)</span><br><span class="line">Node Version:   v14.17.1</span><br><span class="line">...</span><br><span class="line">  Running:  spec1.js</span><br><span class="line">Example app listening at port 6000</span><br><span class="line">started the server on port 6000</span><br><span class="line">...</span><br><span class="line">  Express server 1</span><br><span class="line">    ✓ responds (60ms)</span><br><span class="line">    ✓ responds with random id (21ms)</span><br><span class="line">...</span><br><span class="line">closing server</span><br><span class="line">closed the server running on port 6000</span><br><span class="line">...</span><br><span class="line">  Running:  spec2.js</span><br><span class="line">Example app listening at port 6000</span><br><span class="line">started the server on port 6000</span><br><span class="line">...</span><br><span class="line">closing server</span><br><span class="line">closed the server running on port 6000</span><br></pre></td></tr></table></figure><p>Cypress v9 uses the default system Node, making it simple to install the dependencies and run the server. Every spec starts the server and shuts it down.</p><h2><span id="random-port">Random port</span></h2><p>Let&#39;s pretend that each spec starts the server a little bit differently. For example, what if we need to start the server at a random port? How would we send the port number to the spec file so it makes the right request? In our example, we can use <a href="https://github.com/sindresorhus/get-port">get-port</a> module to find an open port to use.</p><figure class="highlight js"><figcaption><span>src/server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getPort = <span class="built_in">require</span>(<span class="string">&#x27;get-port&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; makeRange &#125; = getPort</span><br><span class="line">...</span><br><span class="line"><span class="comment">// the port value will be set later</span></span><br><span class="line"><span class="keyword">let</span> port</span><br><span class="line"><span class="comment">// random number between 6100 and 6300</span></span><br><span class="line"><span class="keyword">const</span> n = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * <span class="number">200</span>) + <span class="number">6100</span></span><br><span class="line"><span class="keyword">const</span> ports = makeRange(n, <span class="number">6300</span>)</span><br><span class="line">getPort(&#123; <span class="attr">port</span>: ports &#125;).then(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">  port = p</span><br><span class="line">  <span class="comment">// start the server at the port number</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Great, now let&#39;s update the tests</p><h2><span id="sending-the-info-to-the-spec">Sending the info to the spec</span></h2><p>We can start the server and save the port, but we need to somehow tell the spec which port to use. The port number is stored in the plugin memory process as a local variable. To let the spec know, we can run <a href="https://on.cypress.io/task">cy.task</a> and fetch the port number.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// `on` is used to hook into various events Cypress emits</span></span><br><span class="line">  <span class="comment">// `config` is the resolved Cypress config</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> server, port, close</span><br><span class="line"></span><br><span class="line">  on(<span class="string">&#x27;before:spec&#x27;</span>, <span class="keyword">async</span> (spec) =&gt; &#123;</span><br><span class="line">    <span class="comment">// we can customize the server based on the spec about to run</span></span><br><span class="line">    <span class="keyword">const</span> info = <span class="keyword">await</span> makeServer()</span><br><span class="line">    <span class="comment">// save the server instance information</span></span><br><span class="line">    server = info.server</span><br><span class="line">    port = info.port</span><br><span class="line">    close = info.close</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;started the server on port %d&#x27;</span>, port)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  on(<span class="string">&#x27;after:spec&#x27;</span>, <span class="keyword">async</span> (spec) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!server) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;no server to close&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> close()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;closed the server running on port %d&#x27;</span>, port)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">getPort</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="comment">// cy.task cannot return undefined</span></span><br><span class="line">      <span class="comment">// thus we return null if there is no port value</span></span><br><span class="line">      <span class="keyword">return</span> port || <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We want every spec to &quot;know&quot; the port number. Thus we can call the <code>cy.task(&#39;getPort&#39;)</code> from the support file which runs before every spec file. We can store the returned port number in the <a href="https://on.cypress.io/env">Cypress.env</a> object.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.task(<span class="string">&#x27;getPort&#x27;</span>).then(<span class="function">(<span class="params">port</span>) =&gt;</span> &#123;</span><br><span class="line">    expect(port).to.be.a(<span class="string">&#x27;number&#x27;</span>)</span><br><span class="line">    <span class="comment">// store the port and url in the Cypress env object</span></span><br><span class="line">    Cypress.env(<span class="string">&#x27;port&#x27;</span>, port)</span><br><span class="line">    Cypress.env(<span class="string">&#x27;url&#x27;</span>, <span class="string">`http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let&#39;s modify the spec to use the port. <strong>Important</strong> the values of <code>port</code> and <code>url</code> are set in the <code>before</code> hook, thus they are going to be set inside the test or any hooks. Thus we need to get the value from the <code>Cypress.env</code> object in the test for example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;Express server 2&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;has timing info&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> port = Cypress.env(<span class="string">&#x27;port&#x27;</span>)</span><br><span class="line">    expect(port).to.be.a(<span class="string">&#x27;number&#x27;</span>).and.to.be.within(<span class="number">6100</span>, <span class="number">6300</span>)</span><br><span class="line">    cy.request(<span class="string">`http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">      <span class="comment">// Cypress adds duration ms to the response</span></span><br><span class="line">      .its(<span class="string">&#x27;duration&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;be.above&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Super, everything works.</p><p><img src="../images/restart-server/port.png" alt="The test uses the random port number from the plugin file"></p><p>Similar update in the <code>spec1.js</code></p><figure class="highlight js"><figcaption><span>cypress/integration/spec1.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;Express server 1&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;responds&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = Cypress.env(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> port = Cypress.env(<span class="string">&#x27;port&#x27;</span>)</span><br><span class="line">    cy.request(url).its(<span class="string">&#x27;body&#x27;</span>).should(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">      message: <span class="string">&#x27;Hello World!&#x27;</span>,</span><br><span class="line">      port,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;responds with random id&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = Cypress.env(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">    cy.request(url)</span><br><span class="line">      .its(<span class="string">&#x27;body.responseId&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;be.a&#x27;</span>, <span class="string">&#x27;number&#x27;</span>)</span><br><span class="line">      .and(<span class="string">&#x27;be.within&#x27;</span>, <span class="number">1e5</span>, <span class="number">1e6</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Want more API testing goodness? Try using <a href="https://github.com/bahmutov/cy-api">cy-api</a> plugin.</p><h2><span id="use-cy-spok">Use cy-spok</span></h2><p>Finally, any time we need to do <a href="https://www.cypress.io/blog/2019/12/23/asserting-network-calls-from-cypress-tests/">network assertions</a>, and using the <a href="https://github.com/bahmutov/cy-spok">cy-spok</a> as a very convenient way of writing complex object assertions. Let&#39;s install <code>cy-spok</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cy-spok</span><br><span class="line">+ cy-spok@1.4.1</span><br></pre></td></tr></table></figure><p>In the spec file, let&#39;s use the <code>spok</code> instead of <code>deep.include</code>, and we can thus verify the random response ID property.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec1.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spok <span class="keyword">from</span> <span class="string">&#x27;cy-spok&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Express server 1&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;responds&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = Cypress.env(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> port = Cypress.env(<span class="string">&#x27;port&#x27;</span>)</span><br><span class="line">    cy.request(url)</span><br><span class="line">      .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">      .should(</span><br><span class="line">        spok(&#123;</span><br><span class="line">          message: <span class="string">&#x27;Hello World!&#x27;</span>,</span><br><span class="line">          port,</span><br><span class="line">          responseId: spok.range(<span class="number">1e5</span>, <span class="number">1e6</span>),</span><br><span class="line">        &#125;),</span><br><span class="line">      )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We just replaced two tests with a single test, and the Command Log is cleaner too.</p><p><img src="../images/restart-server/spok.png" alt="Assert object properties using cy-spok"></p><p>Beautiful.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the blog post &lt;a href=&quot;/blog/how-to-correctly-unit-test-express-server/&quot; title=&quot;How to correctly unit test Express server&quot;&gt;How to corr
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Add Timestamps To Cypress</title>
    <link href="https://glebbahmutov.com/blog/cypress-timestamps/"/>
    <id>https://glebbahmutov.com/blog/cypress-timestamps/</id>
    <published>2021-12-10T05:00:00.000Z</published>
    <updated>2021-12-09T22:03:48.138Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes a test fails due to some API service failing to work. You need to debug the service logs, the first piece of information you need is to know when the failure has happened. This blog post explains how to add the timestamps to different parts of Cypress output.</p><!-- toc --><ul><li><a href="#terminal-output">Terminal output</a></li><li><a href="#screenshot-timestamp">Screenshot timestamp</a></li><li><a href="#add-timestamp-to-the-error-message">Add timestamp to the error message</a></li><li><a href="#command-timestamps">Command timestamps</a></li><li><a href="#cypress-timestamps-plugin">cypress-timestamps plugin</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><blockquote class="pullquote"><p>🎁 You can find the source code for this blog post in the repo <a href="https://github.com/bahmutov/todo-graphql-example">bahmutov/todo-graphql-example</a>.</p></blockquote><h2><span id="terminal-output">Terminal output</span></h2><p>Let&#39;s output to the terminal when each test begins and finishes using the plugin file. In the plugin file register new tasks to just print the timestamp of the test</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getUTC</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="keyword">return</span> now.toISOString()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">beforeTest</span>(<span class="params">testName</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`=== <span class="subst">$&#123;getUTC()&#125;</span> start: <span class="subst">$&#123;testName&#125;</span>`</span>)</span><br><span class="line">      <span class="comment">// cy.task must return something, cannot return undefined</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">afterTest</span>(<span class="params">testName</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`=== <span class="subst">$&#123;getUTC()&#125;</span> end: <span class="subst">$&#123;testName&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can execute these tasks around every test by using the global <code>beforeEach</code> and <code>afterEach</code> hooks defined in support file.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.task(<span class="string">&#x27;beforeTest&#x27;</span>, Cypress.currentTest.title)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">afterEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.task(<span class="string">&#x27;afterTest&#x27;</span>, Cypress.currentTest.title)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> we had to create our own tasks because Cypress API only has <code>before:run</code> and <code>before:spec</code> events, thus there is no built-in way to run something before or after every <em>test</em>.</p><p>The local terminal shows the UTC dates</p><p><img src="../images/cypress-timestamps/terminal.png" alt="The timestamps are printed around the test terminal output"></p><p>If you are recording to <a href="https://on.cypress.io/dashboard-introduction">Cypress Dashboard</a>, the timestamps and all the output from the plugin file is captured too.</p><p><img src="../images/cypress-timestamps/terminal-dashboard.gif" alt="The Dashboard shows the test timestamps"></p><h2><span id="screenshot-timestamp">Screenshot timestamp</span></h2><p>When a command or an assertion fails, Cypress takes a screenshot, unless <code>screenshotOnRunFailure: false</code> is set. The <a href="https://on.cypress.io/after-screenshot-api">screenshot event</a> in the plugin file has the information we need - and it is pretty accurate timestamp of the failure. Let&#39;s print it to the terminal:</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// https://on.cypress.io/after-screenshot-api</span></span><br><span class="line">  on(<span class="string">&#x27;after:screenshot&#x27;</span>, <span class="function">(<span class="params">&#123; testFailure, takenAt &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (testFailure) &#123;</span><br><span class="line">      <span class="comment">// this is a screenshot taken on test failure</span></span><br><span class="line">      <span class="comment">// not a screenshot from the cy.screenshot command</span></span><br><span class="line">      <span class="comment">// takenAt is a UTC string</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`xxx <span class="subst">$&#123;takenAt&#125;</span> error`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note: the screenshot on failure is only taken in the <code>cypress run</code> mode.</p><p>Here is a typical output from a failed test, note that using the screenshot we can pin-point the failure a few hundred milliseconds closer compared to the <code>afterEach</code> hook task.</p><p><img src="../images/cypress-timestamps/screenshot-timestamp.png" alt="Printing screenshot takenAt timestamp"></p><h2><span id="add-timestamp-to-the-error-message">Add timestamp to the error message</span></h2><p>In the <a href="https://on.cypress.io/catalog-of-events">Cypress catalog of events</a> you can find the <code>fail</code> event. We can modify the error message and rethrow it. Since we want every test to have the timestamp in the error message, we place our callback in the support file.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Cypress.on(<span class="string">&#x27;fail&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err)</span><br><span class="line">  <span class="keyword">const</span> at = <span class="keyword">new</span> <span class="built_in">Date</span>().toISOString()</span><br><span class="line">  err.message = at + <span class="string">&#x27;\n&#x27;</span> + err.message</span><br><span class="line">  <span class="keyword">throw</span> err</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The timestamp is going to be present in the Dashboard and in the screenshot.</p><p><img src="../images/cypress-timestamps/timestamp-error.png" alt="The timestamp is one the first line of the error message"></p><h2><span id="command-timestamps">Command timestamps</span></h2><p>Inside a long test, you might want to know when a particular command has run. Cypress <a href="https://on.cypress.io/catalog-of-events">events</a> has an event <code>command:start</code> delivered when a command is starting. We can take an advantage of this command to add timestamps for each <a href="https://on.cypress.io/custom-commands">parent command</a> to avoid spamming the Command Log with excessive logging.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Cypress.on(<span class="string">&#x27;command:start&#x27;</span>, <span class="function">(<span class="params">&#123; attributes &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (attributes.type === <span class="string">&#x27;parent&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> at = <span class="keyword">new</span> <span class="built_in">Date</span>().toISOString()</span><br><span class="line">    Cypress.log(&#123;</span><br><span class="line">      name: <span class="string">`<span class="subst">$&#123;at&#125;</span> - <span class="subst">$&#123;attributes.name&#125;</span>`</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-timestamps/parent-timestamps.png" alt="Printing timestamp at the start of each Cypress command chain"></p><p>Now we know what is going on and when it is happening!</p><p><strong>Note:</strong> we cannot simply use <code>cy.log</code> inside the <code>command:start</code> callback since <code>cy.log</code> is itself a command, which will trigger another <code>command:start</code> event, which will just keep looping until the browser runs out of memory.</p><h2><span id="cypress-timestamps-plugin">cypress-timestamps plugin</span></h2><p>I factored out the timestamp code into its own plugin <a href="https://github.com/bahmutov/cypress-timestamps">cypress-timestamps</a>. Add this plugin as a dev dependency using <code>npm i -D cypress-timestamps</code> and call the registration functions from the support and the plugin files</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/bahmutov/cypress-timestamps</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;cypress-timestamps/support&#x27;</span>)(&#123;</span><br><span class="line">  terminal: <span class="literal">true</span>, <span class="comment">// by default the terminal output is disabled</span></span><br><span class="line">  error: <span class="literal">true</span>,</span><br><span class="line">  commandLog: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/plugin/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://github.com/bahmutov/cypress-timestamps</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;cypress-timestamps/plugin&#x27;</span>)(on)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="see-also">See also</span></h2><ul><li><a href="https://www.cypress.io/blog/2020/05/22/where-does-the-test-spend-its-time/">Where Does the Test Spend Its Time?</a></li><li><a href="https://github.com/bahmutov/cypress-failed-log">cypress-failed-log</a> plugin</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sometimes a test fails due to some API service failing to work. You need to debug the service logs, the first piece of information you ne
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Dealing With 3rd Party Scripts In Cypress Tests</title>
    <link href="https://glebbahmutov.com/blog/3rd-party/"/>
    <id>https://glebbahmutov.com/blog/3rd-party/</id>
    <published>2021-12-09T05:00:00.000Z</published>
    <updated>2021-12-09T15:16:12.946Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s take a look at an application that uses 3rd party script, like a chat widget. Here is my site with the Tidio widget opened:</p><p><img src="../images/3rd-party/chat.png" alt="Site with a 3rd party chat widget"></p><p>Our first question might be how to ensure the 3rd party JavaScript has loaded before starting to test the site. In this particular application, the button &quot;Open chat 🗣&quot; calls the code <code>tidioChatApi.open()</code> after a click</p><figure class="highlight js"><figcaption><span>public/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;open-chat&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;opening chat&#x27;</span>)</span><br><span class="line">  <span class="comment">// https://docs.tidio.com/docs/other_methods</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// safeguard against slow-loading JavaScript code</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.tidioChatApi) &#123;</span><br><span class="line">    tidioChatApi.open()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If the <code>tidioChatApi</code> library is slow to load or initialize, the click does nothing, leading to the user frustration. Let&#39;s see how to slow down the 3rd party JavaScript to test this.</p><blockquote class="pullquote"><p>🎁 You can find the full source code shown in this blog post as well as links to multiple videos explaining the solutions step-by-step in the repo <a href="https://github.com/bahmutov/cypress-3rd-party-script-example">bahmutov/cypress-3rd-party-script-example</a>.</p></blockquote><h2><span id="slow-down-the-javascript-resource">Slow down the JavaScript resource</span></h2><p>The application is loading the 3rd party JS library asynchronously</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// load 3rd party libraries</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// add the script tag to the HEAD</span></span><br><span class="line">  <span class="keyword">const</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">  script.type = <span class="string">&#x27;text/javascript&#x27;</span></span><br><span class="line">  script.src = <span class="string">&#x27;https://code.tidio.co/zwjhqkduaeqdmkflwoyfcmqd64fj2a3s.js&#x27;</span></span><br><span class="line">  head.appendChild(script)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We can intercept the <code>code.tidio.co</code> resource and slow it down using the <a href="https://on.cypress.io/intercept">cy.intercept</a> command</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;by returning a promise&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;https://code.tidio.co/*.js&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span></span><br><span class="line">    Cypress.Promise.delay(<span class="number">3000</span>).then(<span class="function">() =&gt;</span> req.continue()),</span><br><span class="line">  ).as(<span class="string">&#x27;tidio&#x27;</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.wait(<span class="string">&#x27;@tidio&#x27;</span>)</span><br><span class="line">  <span class="comment">// by now the JS should have loaded</span></span><br><span class="line">  cy.get(<span class="string">&#x27;#open-chat&#x27;</span>).click()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test waits for the network resource to finish before clicking the button.</p><p><img src="../images/3rd-party/slow-down.gif" alt="Waiting for the slowed down network request to return"></p><p>We can shorten the intercept command by returning a delayed promise without anything. This will make Cypress think you are making a spy, thus the request will continue to the server.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// slows down the network request by 3 seconds</span></span><br><span class="line">cy.intercept(<span class="string">&#x27;https://code.tidio.co/*.js&#x27;</span>, <span class="function">() =&gt;</span></span><br><span class="line">  Cypress.Promise.delay(<span class="number">3000</span>),</span><br><span class="line">).as(<span class="string">&#x27;tidio&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Works the same was as <code>req.continue()</code> above.</p><h2><span id="wait-for-3rd-party-initialization">Wait for 3rd party initialization</span></h2><p>Even if the JavaScript is returned, does not mean it is ready to work - it might require additional code to be loaded, DOM elements to be created, etc. The application is using <code>window.tidioChatApi</code> object - let&#39;s make our test wait for that object to be ready before clicking the button.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;waits for the chat object to be created&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;https://code.tidio.co/*.js&#x27;</span>, <span class="function">() =&gt;</span></span><br><span class="line">    Cypress.Promise.delay(<span class="number">3000</span>),</span><br><span class="line">  ).as(<span class="string">&#x27;tidio&#x27;</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// wait for the chat object to be created</span></span><br><span class="line">  <span class="comment">// before clicking on the button</span></span><br><span class="line">  <span class="comment">// https://on.cypress.io/its</span></span><br><span class="line">  <span class="comment">// we increase the timeout, because the network request</span></span><br><span class="line">  <span class="comment">// is slowed down by 3 seconds, leaving very little time</span></span><br><span class="line">  <span class="comment">// for the the library to load and start working</span></span><br><span class="line">  cy.window().its(<span class="string">&#x27;tidioChatApi&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">6000</span> &#125;)</span><br><span class="line">  cy.get(<span class="string">&#x27;#open-chat&#x27;</span>).click()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test waits more precisely than the test that simply waited for the network request using <code>cy.wait(&#39;@tidio&#39;)</code> and you can see it from the recording - it actually opens the browser widget!</p><p><img src="../images/3rd-party/wait-for-property.gif" alt="Waiting for the window property to exist"></p><h2><span id="confirm-the-method-was-called">Confirm the method was called</span></h2><p>Now let&#39;s confirm the application calls the method <code>tidioChatApi.open()</code>. We need to create a spy before clicking the button. We get to the method to spy on using the same <code>cy.window().its(...)</code> commands as above.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;calls chat open method&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// get the window.tidioChatApi object</span></span><br><span class="line">  cy.window()</span><br><span class="line">    .its(<span class="string">&#x27;tidioChatApi&#x27;</span>)</span><br><span class="line">    <span class="comment">// spy on tidioChatApi.open method call</span></span><br><span class="line">    .then(<span class="function">(<span class="params">tidioChatApi</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.spy(tidioChatApi, <span class="string">&#x27;open&#x27;</span>).as(<span class="string">&#x27;open&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// click on the button</span></span><br><span class="line">  cy.get(<span class="string">&#x27;#open-chat&#x27;</span>).click()</span><br><span class="line">  <span class="comment">// confirm the spy was called once without arguments</span></span><br><span class="line">  cy.get(<span class="string">&#x27;@open&#x27;</span>).should(<span class="string">&#x27;be.calledOnceWithExactly&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The video shows the application does in fact call the method without any arguments.</p><p><img src="../images/3rd-party/spy.png" alt="Spy on the open call the application makes"></p><h2><span id="call-open-from-the-test">Call open from the test</span></h2><p>We can even call the <code>open()</code> method ourselves from the test if necessary - what I call <a href="https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/">app action</a> and which is a unique property of the Cypress tests.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;opens the chat from the test code&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// wait for the chat object to be created</span></span><br><span class="line">  <span class="comment">// and then invoke a method on it</span></span><br><span class="line">  <span class="comment">// https://on.cypress.io/invoke</span></span><br><span class="line">  cy.window().its(<span class="string">&#x27;tidioChatApi&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">10000</span> &#125;).invoke(<span class="string">&#x27;open&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/3rd-party/invoke-open.gif" alt="Call 3rd party method from the test"></p><h2><span id="subscribe-to-events">Subscribe to events</span></h2><p>What if we let the application call the 3rd party chat methods, but subscribe from the test runner to the <a href="https://docs.tidio.com/docs/listeners_events">events it delivers</a>? Sure thing:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;delivers the ready event&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.window().its(<span class="string">&#x27;tidioChatApi&#x27;</span>).invoke(<span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;ready&#x27;</span>, cy.stub().as(<span class="string">&#x27;ready&#x27;</span>))</span><br><span class="line">  cy.get(<span class="string">&#x27;@ready&#x27;</span>).should(<span class="string">&#x27;be.called&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/3rd-party/ready-event.gif" alt="The test confirms the chat widget sends the &quot;ready&quot; event"></p><p><strong>Tip:</strong> for more <code>cy.spy</code> and <code>cy.stub</code> examples, see my <a href="https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html">Spies, Stubs, and Clock</a> page.</p><h2><span id="see-also">See also</span></h2><p>I have recorded several videos showing how to deal with 3rd party JavaScript code based on this chat application. Take a look at</p><ul><li><a href="https://youtu.be/MzCACth7qLE">Slow Down And Wait For 3rd Party JavaScript To Load</a></li><li><a href="https://youtu.be/5SBjkrKwhIA">Spy On The Application Calling 3rd Party Library Code</a></li><li><a href="https://youtu.be/PRpuE2DXRlQ">Cypress Dashboard, Reusing GitHub Workflows, Flake Detection, And Test Retries</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s take a look at an application that uses 3rd party script, like a chat widget. Here is my site with the Tidio widget opened:&lt;/p&gt;
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>The Simplest CI Setup For Running Cypress Tests</title>
    <link href="https://glebbahmutov.com/blog/gh-reusable-workflows/"/>
    <id>https://glebbahmutov.com/blog/gh-reusable-workflows/</id>
    <published>2021-12-06T05:00:00.000Z</published>
    <updated>2021-12-08T17:59:40.061Z</updated>
    
    <content type="html"><![CDATA[<p>Recently <a href="/blog/trying-github-actions/" title="GitHub Actions">GitHub Actions</a> CI service has introduced <a href="https://docs.github.com/en/actions/learn-github-actions/reusing-workflows">Reusable workflows</a> which are ... amazing. You can create a workflow with multiple jobs and abstract all the testing details, and then call that workflow from another user workflow, passing inputs as parameters. Here is the entire workflow for installing NPM dependencies, caching them, then running Cypress tests in parallel across 3 machines using <a href="https://on.cypress.io/parallelization">Cypress Dashboard parallelization</a>:</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="comment"># https://github.com/bahmutov/cypress-workflows</span></span><br><span class="line">    <span class="attr">uses:</span> <span class="string">bahmutov/cypress-workflows/.github/workflows/parallel.yml@v1</span></span><br><span class="line">    <span class="attr">with:</span></span><br><span class="line">      <span class="attr">n:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">parallel</span> <span class="string">tests</span></span><br><span class="line">      <span class="attr">tag:</span> <span class="string">parallel</span></span><br><span class="line">    <span class="attr">secrets:</span></span><br><span class="line">      <span class="attr">recordKey:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CYPRESS_RECORD_KEY</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>That is it - the reusable public workflow <a href="https://github.com/bahmutov/cypress-workflows/blob/main/.github/workflows/parallel.yml">parallel.yml</a> is versioned too, so you know what parameter is expects.</p><p><img src="../images/gh-reusable-workflows/parallel.png" alt="The reusable workflow automatically creates several subjobs to run the tests in parallel"></p><blockquote class="pullquote"><p>You can find my public Cypress workflows in the repo <a href="https://github.com/bahmutov/cypress-workflows">bahmutov/cypress-workflows</a> and the example application in <a href="https://github.com/bahmutov/cypress-workflows-example">bahmutov/cypress-workflows-example</a></p></blockquote><p>No more worrying about the specifics of installing and calling a testing tool, no more frustration. Just a single logical call to the workflow that takes care of the details. Truly the simplest way to write CI scripts today, I ❤️ it.</p><p><strong>Bonus:</strong> check out my open source workshop <a href="https://github.com/bahmutov/cypress-workshop-ci">Cypress on CI</a> that explains how to run Cypress on a regular CI, using GitHub Actions, CircleCI, and Netlify Build.</p><p>Here is another example from <a href="https://github.com/bahmutov/cypress-3rd-party-script-example">bahmutov/cypress-3rd-party-script-example</a>: let&#39;s say we deploy a site to GitHub Pages, and now want to run the local tests first before the deploy. We just add one more job with 3 lines of YML code:</p><figure class="highlight yml"><figcaption><span>.github/workflows/deploy.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># make sure the local tests pass</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">uses:</span> <span class="string">bahmutov/cypress-workflows/.github/workflows/standard.yml@v1</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">needs:</span> [<span class="string">test</span>]</span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="comment"># only deploy from the main branch</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">github.ref</span> <span class="string">==</span> <span class="string">&#x27;refs/heads/main&#x27;</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎️</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># https://github.com/marketplace/actions/github-pages-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">🚀</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure><p>So so simple, it hurts.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently &lt;a href=&quot;/blog/trying-github-actions/&quot; title=&quot;GitHub Actions&quot;&gt;GitHub Actions&lt;/a&gt; CI service has introduced &lt;a href=&quot;https://docs
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Spy On DOM Methods And Properties</title>
    <link href="https://glebbahmutov.com/blog/spy-on-dom-methods/"/>
    <id>https://glebbahmutov.com/blog/spy-on-dom-methods/</id>
    <published>2021-11-23T05:00:00.000Z</published>
    <updated>2021-11-23T02:56:11.809Z</updated>
    
    <content type="html"><![CDATA[<p>In the <a href="https://github.com/bahmutov/sorted-table-example">bahmutov/sorted-table-example</a> example, the application sets and removes DOM element attributes:</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enableButtons</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;sort-by-date&#x27;</span>).removeAttribute(<span class="string">&#x27;disabled&#x27;</span>)</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;sort-reverse&#x27;</span>).removeAttribute(<span class="string">&#x27;disabled&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The application updates the table body by assigning the <code>.innerHTML</code> property</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortTable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;people-data&#x27;</span>).innerHTML = listToHtml(sorted)</span><br><span class="line">  enableButtons()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Can we a) detect when the application is calling the <code>.removeAttribute(&#39;disabled&#39;)</code> method on a specific DOM element and b) spy on the <code>.innerHTML</code> property assignment?</p><h2><span id="spy-on-removeattribute">Spy on removeAttribute</span></h2><p>From our spec, first we need to access the DOM element, which we can do using <code>$button[0]</code> index. Then we use the standard <a href="https://on.cypress.io/spy">cy.spy</a> to create a spy around the button&#39;s <code>removeAttribute</code> method.</p><figure class="highlight js"><figcaption><span>cypress/integration/spy-on-removeAttribute.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;app/table.html&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;spies on removeAttribute method&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">&#x27;#sort-by-date&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">$button</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// from jQuery object we need the actual DOM element</span></span><br><span class="line">      <span class="keyword">const</span> button = $button[<span class="number">0</span>]</span><br><span class="line">      cy.spy(button, <span class="string">&#x27;removeAttribute&#x27;</span>)</span><br><span class="line">        .withArgs(<span class="string">&#x27;disabled&#x27;</span>)</span><br><span class="line">        .as(<span class="string">&#x27;removeAttribute&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .click()</span><br><span class="line">  cy.get(<span class="string">&#x27;@removeAttribute&#x27;</span>).should(<span class="string">&#x27;be.called&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>It is almost too easy.</p><p><img src="../images/spy-on-dom-methods/spy-remove.gif" alt="Spying on removeAttribute call on the given button"></p><h2><span id="spy-on-innerhtml-property-assignment">Spy on innerHTML property assignment</span></h2><p>Spying / stubbing methods is easy, what about spying on the element&#39;s <code>innerHTML = ...</code> assignment? It is a little trickier, as we need to find the actual native DOM implementation via <code>Object.getOwnPropertyDescriptor</code> to call it from the spy. Browser DOM elements have a hierarchy of classes, and we need to travel up the prototype chain to find the implementation we can call ourselves. Here is my finding the property <code>innerHTML</code> using the <code>$0</code> table body element as a start.</p><p><img src="../images/spy-on-dom-methods/get-property.png" alt="Getting the innerHTML property by going up the prototype chain"></p><p>Luckily we can abstract finding any property descriptor into a utility function <code>findPropertyDescriptor</code> and then we put <em>our test innerHTML</em> descriptor with setter and getter onto the DOM element. Our implementation calls a sinon stub we construct with <a href="https://on.cypress.io/stub">cy.stub</a> command.</p><figure class="highlight js"><figcaption><span>cypress/integration/spy-on-innerHTML.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;app/table.html&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findPropertyDescriptor</span>(<span class="params">obj, propName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!obj) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, propName) ||</span><br><span class="line">    findPropertyDescriptor(<span class="built_in">Object</span>.getPrototypeOf(obj), propName)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;spies on innerHTML property&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// wait for the initial table to be there</span></span><br><span class="line">  cy.get(<span class="string">&#x27;tbody tr&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;tbody&#x27;</span>).then(<span class="function">(<span class="params">$tbody</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// prepare a stub that will be called when the application</span></span><br><span class="line">    <span class="comment">// calls table.innerHTML = ... with sorted html</span></span><br><span class="line">    <span class="keyword">const</span> setTable = cy.stub().as(<span class="string">&#x27;setTable&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// use our own &quot;el.innerHTML&quot; to call the spy</span></span><br><span class="line">    <span class="comment">// AND call the original &quot;innerHTML&quot;</span></span><br><span class="line">    <span class="keyword">const</span> el = $tbody[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">const</span> ownProperty = findPropertyDescriptor(el, <span class="string">&#x27;innerHTML&#x27;</span>)</span><br><span class="line">    expect(ownProperty, <span class="string">&#x27;innerHTML descriptor&#x27;</span>).to.not.be.undefined</span><br><span class="line"></span><br><span class="line">    <span class="comment">// direct all &quot;set&quot; and &quot;get&quot; calls to the native implementation</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(el, <span class="string">&#x27;innerHTML&#x27;</span>, &#123;</span><br><span class="line">      <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ownProperty.get.call(el)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">set</span>(<span class="params">newHtml</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// plus call our test stub</span></span><br><span class="line">        setTable()</span><br><span class="line">        ownProperty.set.call(el, newHtml)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sort by date&#x27;</span>).click()</span><br><span class="line">  <span class="comment">// once our spy is called, that means the application</span></span><br><span class="line">  <span class="comment">// has called &quot;tbody.innerHTML = ...&quot; and the table is sorted</span></span><br><span class="line">  cy.get(<span class="string">&#x27;@setTable&#x27;</span>).should(<span class="string">&#x27;be.called&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/spy-on-dom-methods/spy-innerhtml.gif" alt="Spying on the application setting the table innerHTML property"></p><p>Almost too easy.</p><blockquote class="pullquote"><p>📚 For more stub and spies examples, see my <a href="https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html">Spies, Stubs &amp; Clocks</a> page and this <a href="https://on.cypress.io/stubs-spies-and-clocks">Cypress Guide</a>.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the &lt;a href=&quot;https://github.com/bahmutov/sorted-table-example&quot;&gt;bahmutov/sorted-table-example&lt;/a&gt; example, the application sets and rem
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="browser" scheme="https://glebbahmutov.com/blog/tags/browser/"/>
    
  </entry>
  
  <entry>
    <title>Functional Helpers For Cypress Tests</title>
    <link href="https://glebbahmutov.com/blog/fp-cy-helpers/"/>
    <id>https://glebbahmutov.com/blog/fp-cy-helpers/</id>
    <published>2021-11-20T05:00:00.000Z</published>
    <updated>2022-01-09T16:44:27.391Z</updated>
    
    <content type="html"><![CDATA[<p>This blog post will teach you how to write short and expressive Cypress tests using a library of tiny functional utilities <a href="https://github.com/bahmutov/cypress-should-really">cypress-should-really</a>. Using this library you will be able to also write single functional callbacks to take advantage of Cypress built-in <a href="https://on.cypress.io/retry-ability">command retry-ability</a>.</p><!-- toc --><ul><li><a href="#the-sorted-table">The sorted table</a></li><li><a href="#the-first-test">The first test</a></li><li><a href="#chai-sorted">chai-sorted</a></li><li><a href="#the-problem">The problem</a></li><li><a href="#callback-function-as-assertion">Callback function as assertion</a></li><li><a href="#mapping-and-invoking">Mapping and invoking</a></li><li><a href="#assertion-function">Assertion function</a></li><li><a href="#reusing-pipes">Reusing pipes</a></li><li><a href="#aside-a-better-solution">Aside: a better solution</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><h2><span id="the-sorted-table">The sorted table</span></h2><p>Imagine you have a table that can be sorted by a column. You can find such application (which is really just a static HTML file) at <a href="https://github.com/bahmutov/sorted-table-example">bahmutov/sorted-table-example</a>. The table gets sorted when you click a button, but there is a slight delay between the click and the page update as the application is &quot;crunching some numbers&quot;.</p><p><img src="../images/fp-cy-helpers/table.gif" alt="Sorting the table by clicking the buttons"></p><h2><span id="the-first-test">The first test</span></h2><p>How would you confirm the table is really sorted using a Cypress test? First, let&#39;s confirm it is NOT sorted. Let&#39;s get all date cells using CSS <code>nth-child</code> selector.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;app/table.html&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;is not sorted at first&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We can confirm the test picks the right cells by hovering over the command in the Cypress Command Log.</p><p><img src="../images/fp-cy-helpers/date-cells.png" alt="We got the right page elements"></p><p>We need to extract the text from each cell, convert the <code>YYYY-MM-DD</code> strings into Date objects, then to timestamps, then check if the timestamp numbers are not sorted. Each step can be done using a separate <a href="https://on.cypress.io/then">cy.then</a> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">$cells</span>) =&gt;</span> Cypress._.map($cells, <span class="string">&#x27;innerText&#x27;</span>))</span><br><span class="line">  .then(<span class="function">(<span class="params">strings</span>) =&gt;</span> Cypress._.map(strings, <span class="function">(<span class="params">s</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>(s)))</span><br><span class="line">  .then(<span class="function">(<span class="params">dates</span>) =&gt;</span> Cypress._.map(dates, <span class="function">(<span class="params">d</span>) =&gt;</span> d.getTime()))</span><br><span class="line">  .then(<span class="function">(<span class="params">timestamps</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// check if the numbers are sorted by comparing to the sorted array</span></span><br><span class="line">    <span class="keyword">const</span> sorted = Cypress._.sortBy(timestamps)</span><br><span class="line">    expect(timestamps).to.not.deep.equal(sorted)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Ughh, ok. Does it work? Yes - it confirms the timestamps are not sorted on the initial page. Just in case, let&#39;s look at the last assertion in the DevTools console.</p><p><img src="../images/fp-cy-helpers/last-assertion.png" alt="Last assertion prints the arrays when we click it"></p><h2><span id="chai-sorted">chai-sorted</span></h2><p>I believe readable tests are better than unreadable tests. Thus I love using additional Chai plugins to make the assertions clearly express what the test is trying to confirm. Thus I will use <a href="https://www.chaijs.com/plugins/chai-sorted/">chai-sorted</a> plugin in this test.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D chai-sorted</span><br><span class="line">+ chai-sorted@0.2.0</span><br></pre></td></tr></table></figure><p>I will change the last assertion to <code>should(&#39;not.be.sorted&#39;)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">$cells</span>) =&gt;</span> Cypress._.map($cells, <span class="string">&#x27;innerText&#x27;</span>))</span><br><span class="line">  .then(<span class="function">(<span class="params">strings</span>) =&gt;</span> Cypress._.map(strings, <span class="function">(<span class="params">s</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>(s)))</span><br><span class="line">  .then(<span class="function">(<span class="params">dates</span>) =&gt;</span> Cypress._.map(dates, <span class="function">(<span class="params">d</span>) =&gt;</span> d.getTime()))</span><br><span class="line">  .should(<span class="string">&#x27;not.be.sorted&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/fp-cy-helpers/not-sorted.png" alt="Using chai-sorted assertion"></p><h2><span id="the-problem">The problem</span></h2><p>Let&#39;s click on the &quot;Sort by date&quot; button and check if the table gets sorted. We can copy the above commands into the new test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;gets sorted by date&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sort by date&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">$cells</span>) =&gt;</span> Cypress._.map($cells, <span class="string">&#x27;innerText&#x27;</span>))</span><br><span class="line">    .then(<span class="function">(<span class="params">strings</span>) =&gt;</span> Cypress._.map(strings, <span class="function">(<span class="params">s</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>(s)))</span><br><span class="line">    .then(<span class="function">(<span class="params">dates</span>) =&gt;</span> Cypress._.map(dates, <span class="function">(<span class="params">d</span>) =&gt;</span> d.getTime()))</span><br><span class="line">    .should(<span class="string">&#x27;be.ascending&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Ughh, the test fails</p><p><img src="../images/fp-cy-helpers/problem.png" alt="The sorted by date test fails"></p><p>Our test fails miserably - it does not even wait for the table to be sorted after the click. If we add a three second delay between the click and the check, the test passes.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sort by date&#x27;</span>).click().wait(<span class="number">3000</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="../images/fp-cy-helpers/sorted-after-wait.gif" alt="Adding 3 second wait fixes the test"></p><p>Of course, we do not want to use a hard-coded wait, we want the test to retry getting the DOM elements, convert them into timestamps, and check if the suddenly are sorted. Why isn&#39;t this happening?</p><p>Cypress only retries certain commands, like querying ones <code>cy.get</code>, <code>cy.contains</code>, <code>cy.its</code>. It does not retry the commands that generally have side-effects, like <code>cy.click</code>, <code>cy.task</code>, or <code>cy.then</code>. Cypress also retries only <em>the current command</em> with its assertions. It does not go &quot;back&quot; along the chain of commands, even if those commands are safe to retry normally. This is why the <a href="https://on.cypress.io/retry-ability">retry-ability</a> guide suggests merging multiple <code>cy.get</code> commands into one, or mixing commands and assertions.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// might be flaky, only the last command</span></span><br><span class="line"><span class="comment">// &quot;.find(&#x27;td:nth-child(2)&#x27;)&quot; is going to be retried</span></span><br><span class="line">cy.get(<span class="string">&#x27;table&#x27;</span>)</span><br><span class="line">  .find(<span class="string">&#x27;tbody&#x27;</span>)</span><br><span class="line">  .find(<span class="string">&#x27;td:nth-child(2)&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment">// BEST PRACTICE 👍</span></span><br><span class="line"><span class="comment">// use a single query with an assertion</span></span><br><span class="line">cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>In our case, the assertion is at the end of the long of chain of <code>cy.then</code> commands, and the execution never tries to get the table cells again. If we want to retry querying the page using the <code>cy.get(&#39;tbody td:nth-child(2)&#39;)</code> command, we need to somehow add the <code>should(&#39;be.ascending&#39;)</code> assertion to the <code>cy.get</code> command. Hmm, how can we do this?</p><h2><span id="callback-function-as-assertion">Callback function as assertion</span></h2><p>By passing a callback function to the <code>should(callback)</code> assertion. Inside the callback function we can use code to transform the elements returned by the <code>cy.get</code> command before checking if they are sorted. Here is the test where I moved all individual steps into the <code>should(callback)</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;gets sorted by date&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sort by date&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="comment">// use a callback function as an assertion</span></span><br><span class="line">    .and(<span class="function">(<span class="params">$cells</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> strings = Cypress._.map($cells, <span class="string">&#x27;innerText&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> dates = Cypress._.map(strings, <span class="function">(<span class="params">s</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>(s))</span><br><span class="line">      <span class="keyword">const</span> timestamps = Cypress._.map(dates, <span class="function">(<span class="params">d</span>) =&gt;</span> d.getTime())</span><br><span class="line">      expect(timestamps).to.be.ascending</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above code retries calling the <code>cy.get</code> command while the callback callback throws an error in the <code>expect(timestamps).to.be.ascending</code> line.</p><p><img src="../images/fp-cy-helpers/single-callback.gif" alt="The test retries getting the table cells"></p><p>Nice - yet the test is less readable than before :( Luckily, we can rewrite the code in the callback function to be much clearer using a few helpers from <a href="https://github.com/bahmutov/cypress-should-really">cypress-should-really</a> NPM module.</p><h2><span id="mapping-and-invoking">Mapping and invoking</span></h2><p>If you look at the <code>.and($cells)</code> function, it does the same common things again and again: mapping a list of values into another list, constructing Date objects, and invoking methods on each object. Right now we are using <a href="https://lodash.com/docs">Lodash</a> library that is bundled with Cypress to map jQuery object, etc. While Lodash is good, other libraries do a much better job of allowing you to compose common data transformations. We could use <a href="https://ramdajs.com/">Ramda</a> but even that excellent library can have rough edges while working with a mixture of plain and jQuery objects. This is why I wrote <a href="https://github.com/bahmutov/cypress-should-really">cypress-should-really</a> and plan to expand it in the future if I find I need some other little utility to make the tests simpler to write. Let&#39;s see it in action.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress-should-really</span><br><span class="line">+ cypress-should-really@1.0.0</span><br></pre></td></tr></table></figure><p>First, let&#39;s rewrite our initial test using <code>map</code> helper.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BEFORE</span></span><br><span class="line">it(<span class="string">&#x27;is not sorted at first&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">$cells</span>) =&gt;</span> Cypress._.map($cells, <span class="string">&#x27;innerText&#x27;</span>))</span><br><span class="line">    .then(<span class="function">(<span class="params">strings</span>) =&gt;</span> Cypress._.map(strings, <span class="function">(<span class="params">s</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>(s)))</span><br><span class="line">    .then(<span class="function">(<span class="params">dates</span>) =&gt;</span> Cypress._.map(dates, <span class="function">(<span class="params">d</span>) =&gt;</span> d.getTime()))</span><br><span class="line">    .should(<span class="string">&#x27;not.be.sorted&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// AFTER</span></span><br><span class="line"><span class="keyword">import</span> &#123; invoke, map, toDate &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-should-really&#x27;</span></span><br><span class="line">it(<span class="string">&#x27;is not sorted at first&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">    .then(map(<span class="string">&#x27;innerText&#x27;</span>))</span><br><span class="line">    .then(map(toDate))</span><br><span class="line">    .then(invoke(<span class="string">&#x27;getTime&#x27;</span>))</span><br><span class="line">    .should(<span class="string">&#x27;not.be.sorted&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Utilities like <code>map</code> and <code>invoke</code> are optimized for <a href="/blog/point-free-programming-is-not-pointless/" title="point-free programming">point-free programming</a>, they return a function that is waiting for the data to be yielded by the Cypress command; the data is typically a jQuery object yielded by <code>cy.get</code> command, or an Array yielded by the previous <code>cy.then</code> command. I hope the test is readable:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.then(map(<span class="string">&#x27;innerText&#x27;</span>))   <span class="comment">// extract property &quot;innerText&quot; from each object</span></span><br><span class="line">.then(map(toDate))        <span class="comment">// call function &quot;toDate&quot; with each item</span></span><br><span class="line">.then(invoke(<span class="string">&#x27;getTime&#x27;</span>))  <span class="comment">// invoke method &quot;getTime&quot; on each object</span></span><br></pre></td></tr></table></figure><p>But using individual steps inside <code>cy.then</code> is going to cause the problem, because they are not retried. We need to use the helpers inside the assertion callback function. Luckily <a href="https://github.com/bahmutov/cypress-should-really">cypress-should-really</a> has a few trick to help with constructing the single assertion callback too!</p><h2><span id="assertion-function">Assertion function</span></h2><p>Let&#39;s rewrite our retry-able assertion function using the helpers.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;gets sorted by date&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sort by date&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="comment">// use a callback function as an assertion</span></span><br><span class="line">    .and(<span class="function">(<span class="params">$cells</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> strings = map(<span class="string">&#x27;innerText&#x27;</span>)($cells)</span><br><span class="line">      <span class="keyword">const</span> dates = map(toDate)(strings)</span><br><span class="line">      <span class="keyword">const</span> timestamps = invoke(<span class="string">&#x27;getTime&#x27;</span>)(dates)</span><br><span class="line">      expect(timestamps).to.be.ascending</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes like before. Let&#39;s eliminate all temporary variables like <code>strings</code>, <code>dates</code>, and <code>timestamps</code> - after all, they are used <em>once</em> just to pass the result to the next line.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sort by date&#x27;</span>).click()</span><br><span class="line">cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>).should(<span class="function">(<span class="params">$cells</span>) =&gt;</span> &#123;</span><br><span class="line">  expect(</span><br><span class="line">    invoke(<span class="string">&#x27;getTime&#x27;</span>)(</span><br><span class="line">      map(toDate)(</span><br><span class="line">        map(<span class="string">&#x27;innerText&#x27;</span>)(</span><br><span class="line">          $cells</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  ).to.be.ascending</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Notice the interesting thing: inside the <code>expect</code> we have a function calling another function, that calls another function, with the argument <code>$cells</code>. Each function is pure, just takes the input and produces output value. Thus these 3 functions can be combined into an equivalent single function to be called with <code>$cells</code> argument. We have a little helper to do just that in <a href="https://github.com/bahmutov/cypress-should-really">cypress-should-really</a> called <code>pipe</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; invoke, map, toDate, pipe &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-should-really&#x27;</span></span><br><span class="line">cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sort by date&#x27;</span>).click()</span><br><span class="line">cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>).should(<span class="function">(<span class="params">$cells</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// pipe: the data will first go through the &quot;map(&#x27;innerText&#x27;)&quot; step,</span></span><br><span class="line">  <span class="comment">// then through &quot;map(toDate)&quot; step, finally through the &quot;invoke(&#x27;getTime&#x27;)&quot;</span></span><br><span class="line">  <span class="keyword">const</span> fn = pipe(map(<span class="string">&#x27;innerText&#x27;</span>), map(toDate), invoke(<span class="string">&#x27;getTime&#x27;</span>))</span><br><span class="line">  expect(fn($cells)).to.be.ascending</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>🎓 I have made a few presentations about the above functional way of writing JavaScript, find the slide decks at <a href="https://slides.com/bahmutov/decks/functional">slides.com/bahmutov/decks/functional</a>.</p></blockquote><p>The function <code>fn</code> constructed above is sitting, waiting for data. Once the data is passed in, the <code>fn($cells)</code> is computed and passed to the assertion <code>expect(...).to ...</code> for evaluation.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = pipe(map(<span class="string">&#x27;innerText&#x27;</span>), map(toDate), invoke(<span class="string">&#x27;getTime&#x27;</span>))</span><br><span class="line">expect(fn($cells)).to.be.ascending</span><br></pre></td></tr></table></figure><p>Piping the data through a series of functions to be fed to the assertion <code>expect(...).to Chai chainer</code> is so common, that <a href="https://github.com/bahmutov/cypress-should-really">cypress-should-really</a> has a ... helper for this. If you want to transform the data and run it through a Chai assertion use <code>really</code> function. It construct a <code>should(callback)</code> for you:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; invoke, map, toDate, pipe, really &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-should-really&#x27;</span></span><br><span class="line">it(<span class="string">&#x27;gets sorted by date: really&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sort by date&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>).should(</span><br><span class="line">    really(map(<span class="string">&#x27;innerText&#x27;</span>), map(toDate), invoke(<span class="string">&#x27;getTime&#x27;</span>), <span class="string">&#x27;be.ascending&#x27;</span>),</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If you have any arguments for the assertion, place it after the chainer string. The same test can be written as</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sort by date&#x27;</span>).click()</span><br><span class="line">cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>).should(</span><br><span class="line">  really(</span><br><span class="line">    map(<span class="string">&#x27;innerText&#x27;</span>), map(toDate), invoke(<span class="string">&#x27;getTime&#x27;</span>), <span class="string">&#x27;be.sorted&#x27;</span>, &#123; <span class="attr">descending</span>: <span class="literal">false</span>, &#125;</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="../images/fp-cy-helpers/arguments.gif" alt="The tests asserts the column is really sorted"></p><h2><span id="reusing-pipes">Reusing pipes</span></h2><p>The application can sort the table in ascending and descending order. To avoid code duplication, just store the <code>pipe(step1, step2, ...)</code> function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// use functional utilities from this NPM library</span></span><br><span class="line"><span class="comment">// https://github.com/bahmutov/cypress-should-really</span></span><br><span class="line"><span class="keyword">import</span> &#123; invoke, map, toDate, pipe, really &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-should-really&#x27;</span></span><br><span class="line">it(<span class="string">&#x27;sorts twice&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// reusable data transformation function</span></span><br><span class="line">  <span class="keyword">const</span> fn = pipe(map(<span class="string">&#x27;innerText&#x27;</span>), map(toDate), invoke(<span class="string">&#x27;getTime&#x27;</span>))</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sort by date&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>).should(really(fn, <span class="string">&#x27;be.ascending&#x27;</span>))</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Reverse sort&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>).should(really(fn, <span class="string">&#x27;be.descending&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/fp-cy-helpers/sort-twice.gif" alt="Checking the sorted order twice using the same data transformation pipe"></p><h2><span id="aside-a-better-solution">Aside: a better solution</span></h2><p>In my opinion, the application should indicate somehow that it has received the user click and it is doing something with the table. For example, the application can disable the buttons and only enable them after the table has finished sorting.</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disableButtons</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;sort-by-date&#x27;</span>).setAttribute(<span class="string">&#x27;disabled&#x27;</span>, <span class="string">&#x27;disabled&#x27;</span>)</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;sort-reverse&#x27;</span>).setAttribute(<span class="string">&#x27;disabled&#x27;</span>, <span class="string">&#x27;disabled&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enableButtons</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;sort-by-date&#x27;</span>).removeAttribute(<span class="string">&#x27;disabled&#x27;</span>)</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;sort-reverse&#x27;</span>).removeAttribute(<span class="string">&#x27;disabled&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;sort-by-date&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  disableButtons()</span><br><span class="line">  <span class="comment">// sort the table after some random interval</span></span><br><span class="line">  ...</span><br><span class="line">  enableButtons()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>This would make the tests <em>much</em> simpler to write without accidental flake.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// use functional utilities from this NPM library</span></span><br><span class="line"><span class="comment">// https://github.com/bahmutov/cypress-should-really</span></span><br><span class="line"><span class="keyword">import</span> &#123; invoke, map, toDate, pipe, really &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-should-really&#x27;</span></span><br><span class="line">it(<span class="string">&#x27;uses disabled attribute&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// reusable data transformation function</span></span><br><span class="line">  <span class="keyword">const</span> fn = pipe(map(<span class="string">&#x27;innerText&#x27;</span>), map(toDate), invoke(<span class="string">&#x27;getTime&#x27;</span>))</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sort by date&#x27;</span>).click().should(<span class="string">&#x27;not.be.disabled&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>).then(really(fn, <span class="string">&#x27;be.ascending&#x27;</span>))</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Reverse sort&#x27;</span>).click().should(<span class="string">&#x27;not.be.disabled&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>).then(really(fn, <span class="string">&#x27;be.descending&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Notice the above test is using built-in retry via <code>.should(&#39;not.be.disabled&#39;)</code> which applies to the button yielded by the previous command. Once the button is enabled, we can simply check once if the table has been sorted already. We do not even need the <code>.should(callback)</code> and instead we apply our pipe transformation using <code>.then(callback)</code> that only is executed once.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sort by date&#x27;</span>).click().should(<span class="string">&#x27;not.be.disabled&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;tbody td:nth-child(2)&#x27;</span>).then(really(fn, <span class="string">&#x27;be.ascending&#x27;</span>))</span><br></pre></td></tr></table></figure><p>It all works beautifully</p><p><img src="../images/fp-cy-helpers/using-disabled.gif" alt="Relying on the disabled attribute to signal when the table is ready to be checked"></p><p>Nice!</p><blockquote class="pullquote"><p>🎁 Find the example application and the shown tests at <a href="https://github.com/bahmutov/sorted-table-example" target="_blank">bahmutov/sorted-table-example</a>. Find the plugin at <a href="https://github.com/bahmutov/cypress-should-really" target="_blank">bahmutov/cypress-should-really</a>.</p></blockquote><h2><span id="see-also">See also</span></h2><ul><li>video <a href="https://www.youtube.com/watch?v=y5ujNKkmgI8">Cypress.io Testing a Paginated Table Example</a></li><li>video <a href="https://youtu.be/Ke5Pf6IISn8">Use cypress-recurse Plugin To Confirm The Table Gets Sorted Eventually</a></li><li>video <a href="https://www.youtube.com/watch?v=-Jr9vLpa1Ak">Disable The Input Element Until The Application Is Ready To Avoid Flake</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This blog post will teach you how to write short and expressive Cypress tests using a library of tiny functional utilities &lt;a href=&quot;https
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="functional" scheme="https://glebbahmutov.com/blog/tags/functional/"/>
    
      <category term="ramda" scheme="https://glebbahmutov.com/blog/tags/ramda/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Create Custom Assertions For Test Readability</title>
    <link href="https://glebbahmutov.com/blog/custom-assertions/"/>
    <id>https://glebbahmutov.com/blog/custom-assertions/</id>
    <published>2021-11-17T05:00:00.000Z</published>
    <updated>2021-11-17T14:13:25.375Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#application">Application</a></li><li><a href="#haveattr-gotcha">have.attr gotcha</a></li><li><a href="#workarounds">Workarounds</a></li><li><a href="#custom-assertion">Custom assertion</a></li><li><a href="#types">Types</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><h2><span id="application">Application</span></h2><p>Let&#39;s take an example page in the repo <a href="https://github.com/bahmutov/cypress-assertion-example">bahmutov/cypress-assertion-example</a>. It has a list with a few items.</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">list-style</span>: square;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-tag">li</span><span class="selector-attr">[data-test-id]</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>List<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;data-attributes&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-test-id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>first<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>second<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can confirm that the list element has the ID attribute equal to &quot;data-attributes&quot;.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;list&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  it(<span class="string">&#x27;has ID&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.get(<span class="string">&#x27;ul&#x27;</span>).should(<span class="string">&#x27;have.id&#x27;</span>, <span class="string">&#x27;data-attributes&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/custom-assertions/have-id.png" alt="The list element has the expected ID"></p><p>We can also confirm other properties, like the list style CSS.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;has ID&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.id&#x27;</span>, <span class="string">&#x27;data-attributes&#x27;</span>)</span><br><span class="line">    <span class="comment">// note: you need to use the computed CSS style value</span></span><br><span class="line">    .and(<span class="string">&#x27;have.css&#x27;</span>, <span class="string">&#x27;list-style&#x27;</span>, <span class="string">&#x27;outside none square&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Both assertions <code>.should(&#39;have.id&#39;, &#39;data-attributes&#39;)</code> and <code>.and(&#39;have.css&#39;, &#39;list-style&#39;, &#39;outside none square&#39;)</code> refer to the same <code>&lt;UL&gt;</code> element yielded by the previous <code>cy.get(&#39;ul&#39;)</code> command. We can hover over the assertions to confirm this - Cypress shows the DOM snapshot at that moment and highlights the current element.</p><p><img src="../images/custom-assertions/element.png" alt="Both assertions check the UL element"></p><h2><span id="haveattr-gotcha">have.attr gotcha</span></h2><p>Now let&#39;s write a test to confirm the properties of the first <code>&lt;LI&gt;</code> element.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">context(<span class="string">&#x27;item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;has test id data attribute&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.contains(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;data-test-id&#x27;</span>, <span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">      <span class="comment">// note: you need to use the computed CSS style value</span></span><br><span class="line">      .and(<span class="string">&#x27;have.css&#x27;</span>, <span class="string">&#x27;font-weight&#x27;</span>, <span class="string">&#x27;700&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes - we do have an <code>&lt;LI&gt;</code> element with text &quot;first&quot; with the data attribute &quot;data-test-id=first&quot; and a bold font.</p><p><img src="../images/custom-assertions/li.png" alt="Confirm the first LI element has the expected data attribute and font weight"></p><p>Great, but what if we do not know the expected <code>data-test-id</code> value? We can change the <code>.should(&#39;have.attr&#39;, &#39;data-test-id&#39;, &#39;first&#39;)</code> and remove the last argument to only confirm tha the element has a <code>data-test-id</code> attribute, with any value.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">context(<span class="string">&#x27;item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;has test id data attribute&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.contains(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;data-test-id&#x27;</span>)</span><br><span class="line">      <span class="comment">// note: you need to use the computed CSS style value</span></span><br><span class="line">      .and(<span class="string">&#x27;have.css&#x27;</span>, <span class="string">&#x27;font-weight&#x27;</span>, <span class="string">&#x27;700&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Suddenly, the test fails.</p><p><img src="../images/custom-assertions/fails.png" alt="The test fails after we relax the first assertion"></p><p>The error message explains that the &quot;have.css&quot; assertion expected an element, but instead received &quot;first&quot; subject. What is this about?</p><p>Typically, all Cypress assertions (which are Chai + Chai-jQuery + Chai-Sinon) keep the original subject. This makes it easy to chain multiple assertions to the same subject to confirm all its properties.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line">  <span class="comment">// first assertion against &lt;UL&gt;</span></span><br><span class="line">  .should(<span class="string">&#x27;have.id&#x27;</span>, <span class="string">&#x27;data-attributes&#x27;</span>)</span><br><span class="line">  <span class="comment">// second assertion against &lt;UL&gt;</span></span><br><span class="line">  .and(<span class="string">&#x27;have.css&#x27;</span>, <span class="string">&#x27;list-style&#x27;</span>, <span class="string">&#x27;outside none square&#x27;</span>)</span><br><span class="line">  <span class="comment">// maybe more assertions against &lt;UL&gt;</span></span><br></pre></td></tr></table></figure><p>The assertion <code>.should(&#39;have.attr&#39;, &#39;data-test-id&#39;, &#39;first&#39;)</code> that confirms the value is the same way. BUT if you remove the expected value and use the single argument version &quot;have.attr data-test-id&quot; form, then the assertion <em>changes</em> the subject and yields the attribute&#39;s value. Only very few assertions change the subject like this, assertions like &quot;have.prop&quot;, &quot;have.attr&quot;. The reasoning being that IF you do not know the expected value, you probably want to validate the value down the line. For example, you can check if the attribute is a lowercase string.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cy.contains(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;data-test-id&#x27;</span>)</span><br><span class="line">  <span class="comment">// validate the property is a lowercase string</span></span><br><span class="line">  .should(<span class="string">&#x27;be.a&#x27;</span>, <span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">  .and(<span class="string">&#x27;match&#x27;</span>, <span class="regexp">/^[a-z]+$/</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/custom-assertions/lowercase.png" alt="Validate the attribute value"></p><h2><span id="workarounds">Workarounds</span></h2><p>In our original case we have multiple assertions that need the original element. You can get the element again:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;has some test id data attribute&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.contains(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>).should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;data-test-id&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">    <span class="comment">// note: you need to use the computed CSS style value</span></span><br><span class="line">    .should(<span class="string">&#x27;have.css&#x27;</span>, <span class="string">&#x27;font-weight&#x27;</span>, <span class="string">&#x27;700&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/custom-assertions/two.png" alt="Get the element again to add another assertion"></p><p>The above test splits the commands, which might go against the <a href="https://on.cypress.io/retry-ability">retry-ability</a> best practices. Thus I would use <a href="https://glebbahmutov.com/cypress-examples/commands/assertions.html">.should(callback)</a> to write this test</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;has some test id and CSS&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.contains(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>).should(<span class="function">(<span class="params">$li</span>) =&gt;</span> &#123;</span><br><span class="line">    expect($li).to.have.attr(<span class="string">&#x27;data-test-id&#x27;</span>)</span><br><span class="line">    expect($li).to.have.css(<span class="string">&#x27;font-weight&#x27;</span>, <span class="string">&#x27;700&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="custom-assertion">Custom assertion</span></h2><p>Finally, another solution is to write your own assertion for clarity, and it is much simpler than it seems. In the support file, call the global function <code>chai</code> to extend the assertions</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chai.use(<span class="function">(<span class="params">_chai</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">testId</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// to be filled</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _chai.Assertion.addMethod(<span class="string">&#x27;testId&#x27;</span>, testId)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let&#39;s call our assertion &quot;testId&quot; and it will check if the given subject has &quot;data-test-id&quot; attribute. If the assertion call gives a value, then our assertion should check if the &quot;data-test-id&quot; attribute has that exact value. Here is the complete code:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">chai.use(<span class="function">(<span class="params">_chai</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// use &quot;function&quot; syntax to make sure when Chai</span></span><br><span class="line">  <span class="comment">// calls it, the &quot;this&quot; object points at Chai</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">testId</span>(<span class="params">expectedValue</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> attr = <span class="string">&#x27;data-test-id&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (expectedValue) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = <span class="built_in">this</span>._obj.attr(attr)</span><br><span class="line">      <span class="built_in">this</span>.assert(</span><br><span class="line">        value === expectedValue,</span><br><span class="line">        <span class="string">`expected to find data-test-id=&quot;<span class="subst">$&#123;expectedValue&#125;</span>&quot;, found value &quot;<span class="subst">$&#123;value&#125;</span>&quot;`</span>,</span><br><span class="line">      )</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// only confirm the &quot;data-test-id&quot; attribute is present</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.assert(</span><br><span class="line">        <span class="built_in">this</span>._obj.attr(attr) !== <span class="literal">undefined</span>,</span><br><span class="line">        <span class="string">`expected to find data-test-id attribute`</span>,</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  _chai.Assertion.addMethod(<span class="string">&#x27;testId&#x27;</span>, testId)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The support file is loaded before each spec file, thus the assertion &quot;testId&quot; is available in every spec file automatically.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;has some test id and CSS using custom assertion&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.contains(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.testId&#x27;</span>)</span><br><span class="line">    <span class="comment">// our custom &quot;testId&quot; assertion keeps the original subject</span></span><br><span class="line">    .and(<span class="string">&#x27;have.css&#x27;</span>, <span class="string">&#x27;list-style&#x27;</span>, <span class="string">&#x27;outside none square&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We called our assertion using <code>.should(&#39;have.testId&#39;)</code> command. Since we did not pass a value, the test passed because the attribute &quot;data-test-id&quot; was present on the element.</p><p><img src="../images/custom-assertions/assertion1.png" alt="Custom assertion passes"></p><p>Let&#39;s confirm the value of the &quot;data-test-id&quot; attribute. First, let&#39;s try using a wrong expected value to see how the error message looks.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cy.contains(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.testId&#x27;</span>, <span class="string">&#x27;invalid&#x27;</span>)</span><br><span class="line">  <span class="comment">// our custom &quot;testId&quot; assertion keeps the original subject</span></span><br><span class="line">  .and(<span class="string">&#x27;have.css&#x27;</span>, <span class="string">&#x27;list-style&#x27;</span>, <span class="string">&#x27;outside none square&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The test fails with a useful error message, notice the second attached assertion did not even run - because the first assertion &quot;have.testId&quot; never passed.</p><p><img src="../images/custom-assertions/wrong.png" alt="Trying incorrect test id value"></p><p>Fix the expected value in the test and watch the test succeed.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;has the expected test id and CSS using custom assertion&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.contains(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.testId&#x27;</span>, <span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">    <span class="comment">// our custom &quot;testId&quot; assertion keeps the original subject</span></span><br><span class="line">    .and(<span class="string">&#x27;have.css&#x27;</span>, <span class="string">&#x27;list-style&#x27;</span>, <span class="string">&#x27;outside none square&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/custom-assertions/pass.png" alt="The test passed with the right values"></p><h2><span id="types">Types</span></h2><p>Cypress comes with TypeScript types, and even the JavaScript specs show intelligent code completion for the built-in assertions, like &quot;have.attr&quot;</p><p><img src="../images/custom-assertions/hover-assertion.png" alt="VSCode shows the documentation for the current assertion"></p><p>But the new custom assertion has no documentation, and VSCode complains that it is unknown.</p><p><img src="../images/custom-assertions/type-error.png" alt="VSCode has no knowledge of the custom assertion"></p><p>To solve this problem, add <code>index.d.ts</code> file to the <code>cypress</code> folder and describe the new assertion.</p><figure class="highlight ts"><figcaption><span>cypress/index.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> Cypress &#123;</span><br><span class="line">  <span class="keyword">interface</span> Chainer&lt;Subject&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Chai assertion that checks if a given element has &quot;data-test-id&quot; attribute.</span></span><br><span class="line"><span class="comment">     * Yields subject.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>testId (optional) expected data-test-id value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment">     *  cy.get(&#x27;#id&#x27;).should(&#x27;have.testId&#x27;)</span></span><br><span class="line"><span class="comment">     *  cy.get(&#x27;#id&#x27;).should(&#x27;have.testId&#x27;, &#x27;first&#x27;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    (chainer: <span class="string">&#x27;have.testId&#x27;</span>, testId?: <span class="built_in">string</span>): Chainable&lt;Subject&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> Chai &#123;</span><br><span class="line">  <span class="keyword">interface</span> Assertion &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Chai assertion that checks if a given element has data-test-id attribute,</span></span><br><span class="line"><span class="comment">     * with optional value check</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>testId (optional) expected data-test-id value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment">     *  expect($el).to.have.testId()</span></span><br><span class="line"><span class="comment">     *  expect($el).to.have.testId(&#x27;first&#x27;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    testId(testId: <span class="built_in">string</span>): <span class="built_in">void</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tell the spec files (using <code>tsconfig.json</code> or <code>jsconfig.json</code> or via <code>reference path</code>) to load the <code>cypress/index.d.ts</code> file and enjoy the intelligent code completion in your custom assertions.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path=&quot;../index.d.ts&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-check</span></span><br></pre></td></tr></table></figure><p><img src="../images/custom-assertions/type-works.png" alt="Custom assertion with IntelliSense help"></p><h2><span id="see-also">See also</span></h2><ul><li><a href="https://glebbahmutov.com/cypress-examples/commands/assertions.html">Cypress assertions examples</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#application&quot;&gt;Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#haveattr-gotcha&quot;&gt;have.attr gotcha&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#wor
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Solve Flake In Cypress Typing Into An Input Element</title>
    <link href="https://glebbahmutov.com/blog/flaky-cy-type/"/>
    <id>https://glebbahmutov.com/blog/flaky-cy-type/</id>
    <published>2021-11-16T05:00:00.000Z</published>
    <updated>2021-11-16T13:42:36.946Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine an application that resets the input field on start up. The resets are random but usually happen within the first 200-300 milliseconds. The application code looks something like this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;flaky-input&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">resetText</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;flaky-input&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    input.value = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="comment">// reset the input several times during the first couple of seconds</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">setTimeout</span>(resetText, <span class="number">100</span>)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">setTimeout</span>(resetText, <span class="number">150</span>)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">setTimeout</span>(resetText, <span class="number">200</span>)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">setTimeout</span>(resetText, <span class="number">250</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The Cypress test simply tries to type into the input field.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;is flaky without retries&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> text = <span class="string">&#x27;hello there, friend!&#x27;</span></span><br><span class="line">  cy.get(<span class="string">&#x27;#flaky-input&#x27;</span>).type(text).should(<span class="string">&#x27;have.value&#x27;</span>, text)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test video shows the flaky behavior - the first characters simply disappear.</p><p><img src="../images/flaky-cy-type/flaky-type.gif" alt="The first characters entered by cy.type disappear and the test fails"></p><blockquote class="pullquote"><p>🎁 You can find the above example amongst the test examples in the [bahmutov/cypress-recurse][cypress-recurse] repo.</p></blockquote><h2><span id="workaround-using-cypress-recurse">Workaround using cypress-recurse</span></h2><p>If you are a real user, and you see some of the characters disappear as you type, you would curse, clear the input field, and type the text again. We can do the same using a plugin I wrote <a href="https://github.com/bahmutov/cypress-recurse">cypress-recurse</a>. This plugin performs any provided Cypress commands until the predicate function returns true or the entire command times out. Let&#39;s update our spec to make it flake-free:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; recurse &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-recurse&#x27;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;enters the text correctly&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> text = <span class="string">&#x27;hello there, friend!&#x27;</span></span><br><span class="line"></span><br><span class="line">  recurse(</span><br><span class="line">    <span class="comment">// the commands to repeat, and they yield the input element</span></span><br><span class="line">    () =&gt; cy.get(<span class="string">&#x27;#flaky-input&#x27;</span>).clear().type(text),</span><br><span class="line">    <span class="comment">// the predicate takes the output of the above commands</span></span><br><span class="line">    <span class="comment">// and returns a boolean. If it returns true, the recursion stops</span></span><br><span class="line">    ($input) =&gt; $input.val() === text,</span><br><span class="line">  )</span><br><span class="line">    <span class="comment">// the recursion yields whatever the command function yields</span></span><br><span class="line">    <span class="comment">// and we can confirm that the text was entered correctly</span></span><br><span class="line">    .should(<span class="string">&#x27;have.value&#x27;</span>, text)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The Cypress Command Log shows how the test types in the characters the first time - but then the part of the input disappears. The predicate function <code>($input) =&gt; $input.val() === text</code> returns false. The <code>recurse</code> function then repeats the first act function again, clearing the input and typing the entire string, just like a real user does. On the second attempt, the entire text is preserved, and the predicate function returns true, completing the step.</p><p><img src="../images/flaky-cy-type/cypress-recurse.gif" alt="Cypress-recurse types the entire string again"></p><p>We can control the <code>recurse</code> function through an options object argument. For example, we can delay each iteration and log less information.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">recurse(</span><br><span class="line">  <span class="comment">// the commands to repeat, and they yield the input element</span></span><br><span class="line">  () =&gt; cy.get(<span class="string">&#x27;#flaky-input&#x27;</span>).clear().type(text),</span><br><span class="line">  <span class="comment">// the predicate takes the output of the above commands</span></span><br><span class="line">  <span class="comment">// and returns a boolean. If it returns true, the recursion stops</span></span><br><span class="line">  ($input) =&gt; $input.val() === text,</span><br><span class="line">  &#123;</span><br><span class="line">    log: <span class="literal">false</span>,</span><br><span class="line">    delay: <span class="number">1000</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="../images/flaky-cy-type/recurse-log-less.gif" alt="The test without extra logging"></p><h2><span id="preventing-the-flake">Preventing the flake</span></h2><p>Using the <a href="https://github.com/bahmutov/cypress-recurse">cypress-recurse</a> plugin in this case only works around the application&#39;s behavior. The real user would see the same broken application. It is better to prevent the input until the application is ready. Thus I advise to add a <code>disabled</code> attribute to the input element, and only remove it after the application is ready to process the input without clearing it.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;flaky-input&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">disabled</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">resetText</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;flaky-input&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    input.value = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">enableText</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;flaky-input&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    input.removeAttribute(<span class="string">&#x27;disabled&#x27;</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="comment">// reset the input several times during the first couple of seconds</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">setTimeout</span>(resetText, <span class="number">100</span>)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">setTimeout</span>(resetText, <span class="number">150</span>)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">setTimeout</span>(resetText, <span class="number">200</span>)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">setTimeout</span>(resetText, <span class="number">250</span>)</span></span><br><span class="line"><span class="javascript">  <span class="comment">// enable the input element after the application</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// is truly ready to process the user actions</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">setTimeout</span>(enableText, <span class="number">2000</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The test that uses <code>cypress-recurse</code> still works in this case, but much more important - the original test now works without any flake!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;is waiting for the input element to become enabled&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> text = <span class="string">&#x27;hello there, friend!&#x27;</span></span><br><span class="line">  cy.get(<span class="string">&#x27;#flaky-input&#x27;</span>).type(text).should(<span class="string">&#x27;have.value&#x27;</span>, text)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The <a href="https://on.cypress.io/type">cy.type</a> command simply waits for the input element to be enabled (it is a built-in actionability check) before typing. You can see the input grayed out and the TYPE command waiting for two seconds until it starts typing in the video below.</p><p><img src="../images/flaky-cy-type/disabled.gif" alt="The test without flake"></p><p>If the application does not let the test runner interact with it until it is ready, the flake problem never appears, so that is the best solution in my opinion.</p><h2><span id="videos">Videos</span></h2><p>You can watch me solve the flake using the <a href="https://github.com/bahmutov/cypress-recurse">cypress-recurse</a> plugin in the video below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/aYX7OVqp6AE" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Then watch the video of solving the flake problem for real by disabling the input element until the application is ready to receive the user&#39;s actions.</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/-Jr9vLpa1Ak" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>For more videos like this with Cypress tips and solutions, subscribe to my video channel at <a href="https://www.youtube.com/glebbahmutov">https://www.youtube.com/glebbahmutov</a>.</p><h2><span id="more-information">More information</span></h2><ul><li><a href="https://github.com/bahmutov/cypress-recurse">bahmutov/cypress-recurse</a> repo</li><li>you can find many blog posts I have written showing the solutions to different flaky test situations on <a href="https://www.cypress.io/blog/">Cypress blog</a>, the posts titles start with &quot;When Can The Test ...&quot; and are tagged <a href="https://cypress.io/blog/tag/flake/">Flake</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine an application that resets the input field on start up. The resets are random but usually happen within the first 200-300 millise
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>CircleCI Parallelism As A Parameter</title>
    <link href="https://glebbahmutov.com/blog/parallelism-parameter/"/>
    <id>https://glebbahmutov.com/blog/parallelism-parameter/</id>
    <published>2021-11-11T05:00:00.000Z</published>
    <updated>2021-11-11T17:13:29.425Z</updated>
    
    <content type="html"><![CDATA[<p>Running end-to-end tests takes time. The best way to cut the overall test duration is by running all tests in parallel by launching multiple test machines and splitting all spec files among them. Cypress has <a href="https://on.cypress.io/parallelization">parallelization</a> feature which works especially well when using <a href="https://github.com/cypress-io/circleci-orb">Cypress CircleCI Orb</a>. For example, in the repo <a href="https://github.com/bahmutov/todo-graphql-example">bahmutov/todo-graphql-example</a> I have about 20 spec files and the following CircleCI config file <a href="https://github.com/bahmutov/todo-graphql-example/blob/master/.circleci/config.yml">.circleci/config.yml</a>:</p><figure class="highlight yml"><figcaption><span>.circleci/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="comment"># https://github.com/cypress-io/circleci-orb</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"><span class="attr">executors:</span></span><br><span class="line">  <span class="attr">with-chrome:</span></span><br><span class="line">    <span class="attr">docker:</span></span><br><span class="line">      <span class="comment"># this Docker image is built by the Cypress team</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/cypress-docker-images</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">&#x27;cypress/browsers:node16.5.0-chrome94-ff93&#x27;</span></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="comment"># first get the source code and install npm dependencies</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/install:</span></span><br><span class="line">          <span class="attr">executor:</span> <span class="string">with-chrome</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">requires:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">cypress/install</span></span><br><span class="line">          <span class="attr">executor:</span> <span class="string">with-chrome</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">&#x27;npm run server&#x27;</span> <span class="comment"># start server before running tests</span></span><br><span class="line">          <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:1234&#x27;</span></span><br><span class="line">          <span class="comment"># run all tests using the Chrome browser</span></span><br><span class="line">          <span class="comment"># installed in the executor. I have noticed that Chrome</span></span><br><span class="line">          <span class="comment"># does not crash when running tests for this application</span></span><br><span class="line">          <span class="attr">browser:</span> <span class="string">chrome</span></span><br><span class="line">          <span class="attr">record:</span> <span class="literal">true</span> <span class="comment"># record results on Cypress Dashboard</span></span><br><span class="line">          <span class="attr">parallel:</span> <span class="literal">true</span> <span class="comment"># split all specs across machines</span></span><br><span class="line">          <span class="attr">parallelism:</span> <span class="number">1</span> <span class="comment"># how many CircleCI machines to use</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">&#x27;all tests&#x27;</span> <span class="comment"># name this group &quot;all tests&quot; on the dashboard</span></span><br><span class="line">          <span class="attr">tags:</span> <span class="string">&#x27;circleci&#x27;</span></span><br></pre></td></tr></table></figure><p>All tests run using a single CircleCI machine. First, the install job runs, then the test job uses the workspace with the source code and the installed dependencies to start the application in the background and run the tests.</p><p><img src="../images/parallelism-parameter/workflow.png" alt="CircleCI workflow"></p><p>The Cypress test runner discovers all spec files to run</p><p><img src="../images/parallelism-parameter/start.png" alt="Cypress starts the test run"></p><p>I am using Cypress Dashboard to record the test results. The recorded run shows a single machine executing all 19 specs, from the longest-running to the shortest specs.</p><p><img src="../images/parallelism-parameter/run.png" alt="Cypress Dashboard recorded the run"></p><p>We want to run the tests faster, but how many machines do we need? Let&#39;s click on the &quot;Parallelization Calculator&quot; button to find out.</p><p><img src="../images/parallelism-parameter/calculator.png" alt="Cypress Dashboard has a built-in parallelization calculator"></p><p>Hmm, we could save a lot of time by running the tests on more machines. Should we tweak the <code>parallelism: 1</code> parameter in the <code>cypress/run</code> job? I love flexibility: run the tests on the reasonable number of machines without overpaying, yet be able to use more machines when needed. To provide such flexibility we can configure <em>workflow parameters</em> and make the number of machines to use a parameter.</p><figure class="highlight yml"><figcaption><span>.circleci/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="comment"># https://github.com/cypress-io/circleci-orb</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="comment"># how many test machines to run in parallel?</span></span><br><span class="line">  <span class="attr">PARALLEL_TESTS:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">integer</span></span><br><span class="line">    <span class="attr">default:</span> <span class="number">2</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">    <span class="attr">parallel:</span> <span class="literal">true</span> <span class="comment"># split all specs across machines</span></span><br><span class="line">    <span class="attr">parallelism:</span> <span class="string">&lt;&lt;</span> <span class="string">pipeline.parameters.PARALLEL_TESTS</span> <span class="string">&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>By default, we run two CircleCI machines in parallel, you can see the individual containers inside the &quot;cypress/run&quot; job on CircleCI</p><p><img src="../images/parallelism-parameter/two-machines.png" alt="Two machines running Cypress tests"></p><p>But we can start the workflow manually from the CircleCI web application and provide the workflow parameter <code>PARALLEL_TESTS</code>. Thus whenever you want to work through a lot of tests, I suggest doing the following:</p><ol><li>Make a commit that skips the default CI execution by appending <code>[skip ci]</code> to the commit&#39;s subject message</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --allow-empty -m &quot;will run manually [skip ci]&quot;</span><br><span class="line">[master 4b2b679] will run manually [skip ci]</span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure><ol start="2"><li>Open the CircleCI project page and click &quot;Run Pipeline&quot; button</li></ol><p><img src="../images/parallelism-parameter/run-pipeline.png" alt="Click the Run Pipeline button"></p><ol start="3"><li>A dialog appears. Add an integer parameter &quot;PARALLEL_TESTS&quot; and enter the number of CI machines to spin to run Cypress tests</li></ol><p><img src="../images/parallelism-parameter/enter-parameter.png" alt="Enter the PARALLEL_TESTS number"></p><ol start="4"><li>Click the &quot;Run Pipeline&quot; button and observe the workflow. A single &quot;cypress/install&quot; job will following by the &quot;cypress/run&quot; job that spawns N containers. In my case I see eight containers running the tests.</li></ol><p><img src="../images/parallelism-parameter/eight.png" alt="Eight CI machines are running the end-to-end tests"></p><p>The Cypress Dashboard run shows the eight machines splitting the testing load and finishing in 30 seconds. Nice.</p><p><img src="../images/parallelism-parameter/eight-machines.png" alt="Eight CI machines are split all the tests and finished in 30 seconds"></p><p>The testing time cannot be shortened any more by adding more machines, since it is now limited by the longest-running spec. We could try <a href="/blog/split-spec/" title="splitting the spec file">splitting the spec file</a>. You can also notice that some testing machines joined the test run much later. You could optimize this by using CircleCI RAM disk, as described in my blog post <a href="/blog/circle-ram-disk/" title="Start CircleCI Machines Faster by Using RAM Disk">Start CircleCI Machines Faster by Using RAM Disk</a>.</p><p>The last observation: remember the parallelization calculator from the start of this blog post? It predicted that using 8 machines would finish all tests in 31 seconds. Well, the actual run finished in 32 seconds - so pretty spot on!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Running end-to-end tests takes time. The best way to cut the overall test duration is by running all tests in parallel by launching multi
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="circle" scheme="https://glebbahmutov.com/blog/tags/circle/"/>
    
  </entry>
  
  <entry>
    <title>Test your sitemap using Cypress</title>
    <link href="https://glebbahmutov.com/blog/test-sitemap/"/>
    <id>https://glebbahmutov.com/blog/test-sitemap/</id>
    <published>2021-11-10T05:00:00.000Z</published>
    <updated>2022-01-04T23:40:25.081Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes people ask me how to verify their <code>sitemap.xml</code> files using Cypress tests. While Cypress test runner is not meant for crawling website, it is pretty capable of quickly checking your pages against silly &quot;404: page not found&quot; errors after the deployment.</p><blockquote class="pullquote"><p>🎁 You can find the source code for this blog post in the repo <a href="https://github.com/bahmutov/vuepress-cypress-test-example">bahmutov/vuepress-cypress-test-example</a> which is verifying the site map file <a href="https://vuepress-cypress-test-example.netlify.app/sitemap.xml">https://vuepress-cypress-test-example.netlify.app/sitemap.xml</a></p></blockquote><h2><span id="the-sitemap-resource">The sitemap resource</span></h2><p>When I build the static site, I generate a <code>sitemap.xml</code> file that tells search crawlers about all available pages. A typical sitemap for a small site only has a few page URLs:</p><p><img src="../images/sitemap/sitemap.png" alt="Example sitemap.xml resource"></p><p>We want to check if all URLs listed in the sitemap are working. We need to load the XML resource, parse it, then iterate over the list of URLs. We can simply request each page and check if successfully resolves with HTTP code 200. If the site has JavaScript we probably want to visit each page to make sure it does not throw a JavaScript error. Let&#39;s test it.</p><h2><span id="single-test">Single test</span></h2><p>The first way we can write a Cypress test is inside a single <code>it</code> callback. I will use the <a href="https://on.cypress.io/request">cy.request</a> command to get the <code>sitemap.xml</code> resource, then use the NPM module <a href="https://github.com/abdolence/x2js">x2js</a> to parse XML text into a JavaScript object.</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;fixturesFolder&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;supportFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;https://vuepress-cypress-test-example.netlify.app/&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/integration/sitemap-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> X2JS = <span class="built_in">require</span>(<span class="string">&#x27;x2js&#x27;</span>)</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;sitemap&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;fetches the sitemap.xml&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// https://on.cypress.io/request</span></span><br><span class="line">    cy.request(<span class="string">&#x27;/sitemap.xml&#x27;</span>)</span><br><span class="line">      .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">      .then(<span class="function">(<span class="params">body</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> x2js = <span class="keyword">new</span> X2JS()</span><br><span class="line">        <span class="keyword">const</span> json = x2js.xml2js(body)</span><br><span class="line">        <span class="comment">// get all URLs from the sitemap</span></span><br><span class="line">        expect(json.urlset.url).to.be.an(<span class="string">&#x27;array&#x27;</span>).and.have.length.gt(<span class="number">0</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I like adding assertions in the middle of the test. In the test above, I am verifying the <code>json.urlset.url</code> variable in the middle of the test to confirm we have URLs to visit. We can even click on the assertion to see the list of URLs in the DevTools:</p><p><img src="../images/sitemap/check.png" alt="We parsed the sitemap.xml and have URLs to check"></p><p>Let&#39;s verify each URL. We can check an URL in three ways:</p><ul><li>check if the resource exists by fetching it using the <code>HEAD</code> HTTP method. This saves time by only requesting the resource header, rather than the entire page. The time savings could be substantial, for example requesting the index of my blog takes three times longer compared to just getting the header:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ time http HEAD https:&#x2F;&#x2F;glebbahmutov.com&#x2F;blog&#x2F;</span><br><span class="line">real0m0.398s</span><br><span class="line"></span><br><span class="line">$ time http GET https:&#x2F;&#x2F;glebbahmutov.com&#x2F;blog&#x2F;</span><br><span class="line">real0m1.209s</span><br></pre></td></tr></table></figure><ul><li>request the entire page using <code>GET</code> method</li><li>visit the page using <a href="https://on.cypress.io/visit">cy.visit</a> command</li></ul><p>My test below will use all three ways.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get all URLs from the sitemap</span></span><br><span class="line">expect(json.urlset.url).to.be.an(<span class="string">&#x27;array&#x27;</span>).and.have.length.gt(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">json.urlset.url.forEach(<span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> parsed = <span class="keyword">new</span> URL(url.loc)</span><br><span class="line">  cy.log(parsed.pathname)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// check if the resource exists</span></span><br><span class="line">  cy.request(<span class="string">&#x27;HEAD&#x27;</span>, url.loc).its(<span class="string">&#x27;status&#x27;</span>).should(<span class="string">&#x27;eq&#x27;</span>, <span class="number">200</span>)</span><br><span class="line">  <span class="comment">// check if the resource exists AND download it</span></span><br><span class="line">  cy.request(url.loc).its(<span class="string">&#x27;status&#x27;</span>).should(<span class="string">&#x27;eq&#x27;</span>, <span class="number">200</span>)</span><br><span class="line">  <span class="comment">// visit the page to check if it loads in the browser</span></span><br><span class="line">  cy.visit(url.loc).wait(<span class="number">1000</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I am using <code>.wait(1000, &#123;log: false&#125;)</code> after each <code>cy.visit</code> command to make the loaded page clearly visited in the captured test run video.</p><p><img src="../images/sitemap/sitemap.gif" alt="Checking each URL in three different ways"></p><p>You can watch me writing this test in the video below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/QIuAcJO1klg" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="data-driven-tests">Data-driven tests</span></h2><p>All URLs are checked in the same test. If a single URL fails, then the entire test stops, and we do not know if there are any other broken URLs. We also have to look at the failure message or screenshot to figure which URL failed to load. It would be nice if we had a separate test for <em>each URL</em> instead. This is where the plugin <a href="https://github.com/bahmutov/cypress-each">cypress-each</a> can help us.</p><p>Before we can generate separate tests, we must have the URLs ready. We <em>cannot</em> use <code>cy.request</code> to fetch the sitemap first, then generate new tests to run. We must fetch the sitemap before the spec loads. The best way to do this is to fetch the sitemap from the plugin file and pass the list to the spec file using the <a href="https://on.cypress.io/env">Cypress.env</a> object.</p><p>You can use any NPM module or plain Node code to fetch the sitemap, I will use <a href="https://github.com/sindresorhus/got#readme">got</a> and then will put the fetched list into the <code>config.env</code> object.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> got = <span class="built_in">require</span>(<span class="string">&#x27;got&#x27;</span>)</span><br><span class="line"><span class="comment">// use https://github.com/abdolence/x2js to parse XML to JSON</span></span><br><span class="line"><span class="keyword">const</span> X2JS = <span class="built_in">require</span>(<span class="string">&#x27;x2js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (on, config) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> sitemapUrl = <span class="string">`<span class="subst">$&#123;config.baseUrl&#125;</span>/sitemap.xml`</span></span><br><span class="line">  <span class="keyword">const</span> xml = <span class="keyword">await</span> got(sitemapUrl).text()</span><br><span class="line">  <span class="keyword">const</span> x2js = <span class="keyword">new</span> X2JS()</span><br><span class="line">  <span class="keyword">const</span> json = x2js.xml2js(xml)</span><br><span class="line">  <span class="keyword">const</span> urls = json.urlset.url.map(<span class="function">(<span class="params">url</span>) =&gt;</span> url.loc)</span><br><span class="line">  <span class="built_in">console</span>.log(urls)</span><br><span class="line"></span><br><span class="line">  config.env.sitemapUrls = urls</span><br><span class="line">  <span class="comment">// make sure to return the changed config</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When I open the Cypress project, I should see the list of URLs in the &quot;Settings / Configuration&quot; tab.</p><p><img src="../images/sitemap/settings.png" alt="The URLs fetched in the plugin file are available to every spec"></p><p>When the spec loads in the browser, the <code>sitemapUrl</code> list is already set and is immediately available using <code>Cypress.env(&#39;sitemapUrl&#39;)</code> command. Now we can import the <code>cypress-each</code> plugin, which adds the <code>it.each</code> method to the global <code>it</code> function. We will have a separate test for each URL.</p><figure class="highlight js"><figcaption><span>cypress/integration/sitemap-each.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-each&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Sitemap&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// I like testing the input list of URLs in its own test</span></span><br><span class="line">  <span class="comment">// you could also use &quot;before&quot; hook to confirm we have the URLs</span></span><br><span class="line">  it(<span class="string">&#x27;has urls&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    expect(Cypress.env(<span class="string">&#x27;sitemapUrls&#x27;</span>)).to.be.an(<span class="string">&#x27;array&#x27;</span>).and.not.be.empty</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> urls = Cypress.env(<span class="string">&#x27;sitemapUrls&#x27;</span>).map(<span class="function">(<span class="params">fullUrl</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> parsed = <span class="keyword">new</span> URL(fullUrl)</span><br><span class="line">    <span class="keyword">return</span> parsed.pathname</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it.each(urls)(<span class="string">&#x27;url %s&#x27;</span>, <span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// check if the resource exists</span></span><br><span class="line">    cy.request(<span class="string">&#x27;HEAD&#x27;</span>, url).its(<span class="string">&#x27;status&#x27;</span>).should(<span class="string">&#x27;eq&#x27;</span>, <span class="number">200</span>)</span><br><span class="line">    <span class="comment">// check if the resource exists AND download it</span></span><br><span class="line">    cy.request(url).its(<span class="string">&#x27;status&#x27;</span>).should(<span class="string">&#x27;eq&#x27;</span>, <span class="number">200</span>)</span><br><span class="line">    <span class="comment">// visit the page to check if it loads in the browser</span></span><br><span class="line">    cy.visit(url).wait(<span class="number">1000</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The tests run and finish successfully</p><p><img src="../images/sitemap/sitemap-each.gif" alt="Checking each URL using its own separate test"></p><p>We can always inspect each test using the time-traveling debugger</p><p><img src="../images/sitemap/second-page.png" alt="Inspect the page loaded by a previous test"></p><p>You can watch me write the separate tests in the video below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/qkofPocd7lY" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p><strong>Tip:</strong> for more tricks with data-driven tests using <code>cypress-each</code> plugin including running the tests in parallel, read the blog post <a href="/blog/refactor-using-each/" title="Refactor Tests To Be Independent And Fast Using Cypress-Each Plugin">Refactor Tests To Be Independent And Fast Using Cypress-Each Plugin</a>.</p><h2><span id="bonus">Bonus</span></h2><p>If you do not have sitemap, and need to crawl the local site pages by discovering the anchor links, it can be done by writing a recursive Cypress function, see the video <a href="https://youtu.be/FDNeiwKWdb4">Crawl Local Pages Using Cypress</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sometimes people ask me how to verify their &lt;code&gt;sitemap.xml&lt;/code&gt; files using Cypress tests. While Cypress test runner is not meant fo
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Faster test execution with cypress-grep</title>
    <link href="https://glebbahmutov.com/blog/cypress-grep-filters/"/>
    <id>https://glebbahmutov.com/blog/cypress-grep-filters/</id>
    <published>2021-11-03T04:00:00.000Z</published>
    <updated>2021-11-03T11:48:37.675Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I have written the <a href="https://github.com/cypress-io/cypress-grep">cypress-grep</a> that can be useful to run the tests selectively by part of the title, or by using tags. For example, a spec like this one:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;loads the page&#x27;</span>, <span class="function">() =&gt;</span> ...)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;searches for items&#x27;</span>, &#123;<span class="attr">tags</span>: <span class="string">&#x27;@search&#x27;</span>&#125;, <span class="function">() =&gt;</span> ...)</span><br></pre></td></tr></table></figure><p>We can run just the first test by installing the plugin and using the <code>grep</code> string passed via Cypress environment variables</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx cypress run --env grep=<span class="string">&quot;loads&quot;</span></span></span><br></pre></td></tr></table></figure><p>We can run the second test by using the tag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx cypress run --env grepTags=<span class="string">&quot;@search&quot;</span></span></span><br></pre></td></tr></table></figure><p>All other tests in the file will <a href="/blog/cypress-test-statuses/" title="be pending">be pending</a>, as if they were using <code>it.skip</code> method.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- loads the page</span><br><span class="line">✓ searches for items(811ms)</span><br><span class="line"></span><br><span class="line">1 passing (811ms)</span><br><span class="line">1 pending</span><br></pre></td></tr></table></figure><p>Skipping the tests this way does not save you on the <a href="https://on.cypress.io/dashboard-introduction">Cypress Dashboard</a> bill - the pending tests do not count towards the monthly billing plan&#39;s quota. But having a new browser instance open, bundling the spec, and the immediately exiting because there might be no tests to run in a spec does cost you time and CI money.</p><p>In this blog post, I will show how to efficiently grep tests on CI to save the CI time, and omit the noise from the tests that were filtered out.</p><blockquote class="pullquote"><p>🎁 You can find the example source code in the repo <a href="https://github.com/bahmutov/todo-graphql-example">bahmutov/todo-graphql-example</a> and see the recorded test runs at its public <a href="https://dashboard.cypress.io/projects/ahwxj4">Dashboard page</a>.</p></blockquote><h2><span id="the-github-actions-workflow">The GitHub Actions workflow</span></h2><p>In my project I have a few suites and tests tagged with different features. I also have a GH Action workflow <a href="https://github.com/bahmutov/todo-graphql-example/blob/master/.github/workflows/tags.yml">tags.yml</a> that runs tests tagged with each feature name separately. For example, the first test job runs all the tests with the tag <code>@dynamic</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tag-dynamic:</span></span><br><span class="line">  <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">  <span class="attr">needs:</span> <span class="string">install</span></span><br><span class="line">  <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">start:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">dev</span></span><br><span class="line">        <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:1234&#x27;</span></span><br><span class="line">        <span class="attr">env:</span> <span class="string">grepTags=@dynamic</span></span><br><span class="line">        <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">&#x27;1 - @dynamic&#x27;</span></span><br><span class="line">        <span class="attr">tag:</span> <span class="string">tags</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="comment"># pass the Dashboard record key as an environment variable</span></span><br><span class="line">        <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CYPRESS_RECORD_KEY</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>In parallel, another test job runs all the tests with the test <code>@visible</code>, here is the relevant difference</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">env: grepTags&#x3D;@visible</span><br><span class="line">group: &#39;2 - @visible&#39;</span><br></pre></td></tr></table></figure><p>There are test jobs that run only the tests tagged <code>@client</code> and <code>@intercept</code>. At the end, there is a job that runs all <em>untagged</em> tests.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">untagged:</span></span><br><span class="line">  <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">  <span class="attr">needs:</span> [<span class="string">tag-intercept</span>, <span class="string">tag-client</span>, <span class="string">tag-visible</span>, <span class="string">tag-dynamic</span>]</span><br><span class="line">  <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">start:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">dev</span></span><br><span class="line">        <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:1234&#x27;</span></span><br><span class="line">        <span class="attr">env:</span> <span class="string">grepUntagged=true</span></span><br><span class="line">        <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">&#x27;5 - untagged&#x27;</span></span><br><span class="line">        <span class="attr">tag:</span> <span class="string">tags</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="comment"># pass the Dashboard record key as an environment variable</span></span><br><span class="line">        <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CYPRESS_RECORD_KEY</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>The tag test jobs run in parallel, and the <code>untagged</code> test job runs at the end.</p><p><img src="../images/cypress-grep-filters/workflow.png" alt="Tags workflow"></p><h2><span id="the-empty-specs">The empty specs</span></h2><p>There are 19 specs currently in the project. When running just the tests tagged <code>@dynamic</code>, what happens to the specs that have no tests tagged with that tag? They show up as &quot;error&quot; in the Cypress Dashboard as the next screenshot shows.</p><p><img src="../images/cypress-grep-filters/run.png" alt="The specs without the tag show up as errors"></p><p>You can see that the Dashboard run things there are a lot more specs than we know there are in the project - because it counts the same specs again and again when they are executed by the test job <code>tag-dynamic</code>, then by <code>tag-visible</code>, then by <code>tag-intercept</code>, etc. And most of these specs have no tests with the tag we are interested in - thus they show up as errors, and just take up the CI time.</p><p>We can do better. The plugin <code>cypress-grep</code> has an option to &quot;preview&quot; the spec file and if it has NO tag or grep string we are looking for in the test title, completely filter out the spec file. We can turn this option using the environment variable:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env: grepTags&#x3D;@dynamic,grepFilterSpecs&#x3D;true</span><br></pre></td></tr></table></figure><p>Even better - to avoid accidentally forgetting to use this option, we can set it in the <a href="https://github.com/bahmutov/todo-graphql-example/blob/master/cypress.json">cypress.json</a> configuration file.</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;env&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;grepFilterSpecs&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>tag-dynamic</code> CI job immediately becomes much faster - because it prefilters all 19 spec files, and only runs the spec with that tag found.</p><p><img src="../images/cypress-grep-filters/filter-tag.png" alt="Only a single spec file has the tag &quot;@dynamic&quot;"></p><p>Every test job became faster</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tag-dynamic 2m 51s &#x3D;&gt; 1m 7s</span><br><span class="line">tag-visible 3m 13s &#x3D;&gt; 2m 26s</span><br><span class="line">tag-client 1m 39s &#x3D;&gt; 1m 7s</span><br><span class="line">tag-intercept 2m 8s &#x3D;&gt; 1m 4s</span><br></pre></td></tr></table></figure><p>Pretty nice savings, and all because we do not have to open 18 spec files once by one only to find out that there are no tests to execute.</p><p><img src="../images/cypress-grep-filters/run-difference.png" alt="Dashboard run before and after turning on spec filtering"></p><p>Note: the <code>untagged</code> test job is unaffected by the filtering, since the <code>grepUntagged=true</code> option is not compatible yet with the option <code>grepFilterSpecs=true</code>, see <a href="https://github.com/cypress-io/cypress-grep/issues/85">issue #85</a>.</p><h2><span id="omitting-filtered-tests">Omitting filtered tests</span></h2><p>If we have a spec with multiple <code>it</code> tests, and we grep, the filtered tests are pending using <code>it.skip</code>. This might create noise in the Command Log and in the test analytics for the run. For example, this spec has more filtered tests than running tests when using <code>grep=&quot;works 2&quot;</code></p><p><img src="../images/cypress-grep-filters/includes-pending.png" alt="Includes filtered tests"></p><p>We can use another option to omit the filtered tests completely. It &quot;hides&quot; the tests that should not run.</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;env&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;grepFilterSpecs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;grepOmitFiltered&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The Command Log and the test analytics now contain only the tests we run</p><p><img src="../images/cypress-grep-filters/omit-pending.png" alt="Includes filtered tests"></p><p>In the <code>todo-graphql-example</code>, this removes all skipped tests. For example, before we grepped tests with tag &quot;@visible&quot;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">TodoMVC with GraphQL cy.intercept</span><br><span class="line">  - completes the first todo</span><br><span class="line">  ✓ stubs todos query (518ms)</span><br><span class="line">  ✓ shows loading indicator (490ms)</span><br><span class="line">  - adds and deletes todo</span><br><span class="line">  - stubs by checking operation name</span><br><span class="line">  ✓ spies on adding todos (499ms)</span><br><span class="line">  - intercepts operations using custom header</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3 passing (2s)</span><br><span class="line">4 pending</span><br></pre></td></tr></table></figure><p>After we added the <code>grepOmitFiltered=true</code> option, only the tests with the tag are in the output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TodoMVC with GraphQL cy.intercept</span><br><span class="line">  ✓ stubs todos query (515ms)</span><br><span class="line">  ✓ shows loading indicator (491ms)</span><br><span class="line">  ✓ spies on adding todos (493ms)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3 passing (2s)</span><br></pre></td></tr></table></figure><p>This is a much nicer output.</p><h2><span id="manual-workflow">Manual workflow</span></h2><p>We can add a new workflow to our project that we can trigger manually any time we want to run a specific test, or a group of tests using a tag. You can find this workflow in the file <a href="https://github.com/bahmutov/todo-graphql-example/blob/master/.github/workflows/grep.yml">grep.yml</a>.</p><figure class="highlight yml"><figcaption><span>.github/workflows/grep.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">grep</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">grep:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Part</span> <span class="string">of</span> <span class="string">the</span> <span class="string">test</span> <span class="string">title</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">grepTags:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Test</span> <span class="string">tags</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">burn:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Number</span> <span class="string">of</span> <span class="string">times</span> <span class="string">to</span> <span class="string">repeat</span> <span class="string">the</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">grep:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">filtered</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">dev</span></span><br><span class="line">          <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:1234&#x27;</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">grep=$&#123;&#123;</span> <span class="string">github.event.inputs.grep</span> <span class="string">&#125;&#125;,grepTags=$&#123;&#123;</span> <span class="string">github.event.inputs.grepTags</span> <span class="string">&#125;&#125;,burn=$&#123;&#123;</span> <span class="string">github.event.inputs.burn</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">&#x27;grep=$<span class="template-variable">&#123;&#123; github.event.inputs.grep &#125;&#125;</span>,grepTags=$<span class="template-variable">&#123;&#123; github.event.inputs.grepTags &#125;&#125;</span>,burn=$<span class="template-variable">&#123;&#123; github.event.inputs.burn &#125;&#125;</span>&#x27;</span></span><br><span class="line">          <span class="attr">tag:</span> <span class="string">grep</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="comment"># pass the Dashboard record key as an environment variable</span></span><br><span class="line">          <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CYPRESS_RECORD_KEY</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>Let&#39;s see if the following test in the &quot;cors-spec.js&quot; is reliably. Let&#39;s run just this test 5 times in row. From the GitHub UI start the workflow with the following parameters:</p><p><img src="../images/cypress-grep-filters/start.png" alt="Starting the workflow manually"></p><p>The <code>grep</code>, <code>grepTags</code>, and <code>burn</code> workflow parameters are passed to Cypress via <code>env: ...</code> action param. Only a single spec file has a test with a test title including the <code>grep</code> string we have entered. And the same test was &quot;burn&quot; or executed five times in a row.</p><p><img src="../images/cypress-grep-filters/grep.png" alt="GitHub Action output"></p><p>The Cypress Dashboard shows the single spec file with 5 tests executed, with its own group name that includes our parameters</p><p><img src="../images/cypress-grep-filters/grep-dashboard.png" alt="The Cypress Dashboard grep workflow result"></p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/burning-tests/" title="Burning Tests with cypress-grep">Burning Tests with cypress-grep</a></li><li><a href="#">Post not found: burning-tests-on-circle</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently I have written the &lt;a href=&quot;https://github.com/cypress-io/cypress-grep&quot;&gt;cypress-grep&lt;/a&gt; that can be useful to run the tests sel
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Flexible Cypress Data Setup And Validation</title>
    <link href="https://glebbahmutov.com/blog/cypresss-data-session/"/>
    <id>https://glebbahmutov.com/blog/cypresss-data-session/</id>
    <published>2021-10-20T04:00:00.000Z</published>
    <updated>2021-12-15T15:18:09.928Z</updated>
    
    <content type="html"><![CDATA[<p>This post will introduce you to a very powerful way of creating and re-using data in your Cypress tests. By re-using the expensive to create objects like users, projects, etc. you will make your tests much much faster, and potentially the tests will be easier to read and maintain.</p><!-- toc --><ul><li><a href="#introduction">Introduction</a></li><li><a href="#creating-the-user">Creating the user</a></li><li><a href="#separate-creation-from-logging-in">Separate creation from logging in</a></li><li><a href="#data-session">Data session</a></li><li><a href="#register-the-user-via-api-call">Register the user via API call</a></li><li><a href="#register-the-user-via-task-command">Register the user via task command</a></li><li><a href="#caching-data">Caching data</a></li><li><a href="#logging-using-api-call">Logging using API call</a></li><li><a href="#caching-the-session-cookie">Caching the session cookie</a></li><li><a href="#data-session-methods">Data session methods</a></li><li><a href="#dependent-sessions">Dependent sessions</a></li><li><a href="#more-info">More info</a></li></ul><!-- tocstop --><h2><span id="introduction">Introduction</span></h2><p>Imagine your Cypress test needs to create a user before logging in. Is creating a user an instant step? No, it probably takes time, especially if you go through the app&#39;s user interface without using API calls or <a href="https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/">App Actions</a>. So you want to create a user and keep it around, to avoid re-creating it for each test. Sometimes you do want to check if the user object or some other piece of data is still valid; maybe another test has cleared the database, removing all the users. So you need a mechanism for validating the user before the test proceeds.</p><p>These actions: creating a piece of test data, storing it for other tests to use, validating, and re-creating if the validation has failed, are very common. Thus I have written a plugin called <a href="https://github.com/bahmutov/cypress-data-session">cypress-data-session</a> to avoid re-implementing the same boilerplate in my code. This plugin gives an introduction to the plugin&#39;s use in the real-world scenarios.</p><h2><span id="creating-the-user">Creating the user</span></h2><p>Let&#39;s create an user for our application - which is required to log in, and create a chat room. A typical test would do something like this:</p><figure class="highlight js"><figcaption><span>cypress/integration/register-user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;registers user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">&#x27;Test&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> password = <span class="string">&#x27;MySecreT&#x27;</span></span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;#create-account&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;.register-form&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    .within(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      cy.get(<span class="string">&#x27;[placeholder=username]&#x27;</span>)</span><br><span class="line">        .type(username)</span><br><span class="line">        .should(<span class="string">&#x27;have.value&#x27;</span>, username)</span><br><span class="line">      cy.get(<span class="string">&#x27;[placeholder=password]&#x27;</span>).type(password)</span><br><span class="line"></span><br><span class="line">      cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;create&#x27;</span>).click()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;.login-form&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    .within(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      cy.get(<span class="string">&#x27;[placeholder=username]&#x27;</span>)</span><br><span class="line">        .type(username)</span><br><span class="line">        .should(<span class="string">&#x27;have.value&#x27;</span>, username)</span><br><span class="line">      cy.get(<span class="string">&#x27;[placeholder=password]&#x27;</span>).type(password)</span><br><span class="line"></span><br><span class="line">      cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;login&#x27;</span>).click()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if the user has been created and could log in</span></span><br><span class="line">  <span class="comment">// we should be redirected to the home page with the rooms</span></span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>🎁 You can find the source code examples used in this blog post in the repo <a href="https://github.com/bahmutov/chat.io">bahmutov/chat.io</a>.</p></blockquote><p>The first time this test runs, everything goes well. The user is created and can log in.</p><p><img src="../images/data-session/register-user.gif" alt="The user is created successfully"></p><p>But when we rerun the test, it fails, since the user with the same username already exists.</p><p><img src="../images/data-session/cannot-register-twice.gif" alt="Cannot register the same user twice"></p><p>Sure, the failure is expected. We have four choices:</p><ul><li>delete all users before each test so we can create the user <code>Test</code> with the password <code>MySecreT</code>.</li><li>delete just the user <code>Test</code> if it exists.</li><li>create a user with unique random name just for this test.</li><li>cache the created user and reuse it.</li></ul><p>The last option is the hardest to implement, but can offer substantial speed savings, since create a user (or some complicated piece of test data) can be slow.</p><h2><span id="separate-creation-from-logging-in">Separate creation from logging in</span></h2><p>Before we proceed, I want to point out that the test above mixes creating the user object and using it. We probably want to keep the act of creating the user really clear, thus I will rewrite the test a little bit.</p><figure class="highlight js"><figcaption><span>cypress/integration/register-user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerUser</span>(<span class="params">username, password</span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;#create-account&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;.register-form&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    .within(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      cy.get(<span class="string">&#x27;[placeholder=username]&#x27;</span>)</span><br><span class="line">        .type(username)</span><br><span class="line">        .should(<span class="string">&#x27;have.value&#x27;</span>, username)</span><br><span class="line">      cy.get(<span class="string">&#x27;[placeholder=password]&#x27;</span>).type(password)</span><br><span class="line"></span><br><span class="line">      cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;create&#x27;</span>).click()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loginUser</span>(<span class="params">username, password</span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;.login-form&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    .within(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      cy.get(<span class="string">&#x27;[placeholder=username]&#x27;</span>)</span><br><span class="line">        .type(username)</span><br><span class="line">        .should(<span class="string">&#x27;have.value&#x27;</span>, username)</span><br><span class="line">      cy.get(<span class="string">&#x27;[placeholder=password]&#x27;</span>).type(password)</span><br><span class="line"></span><br><span class="line">      cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;login&#x27;</span>).click()</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// if everything goes well</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;.success&#x27;</span>, <span class="string">&#x27;Your account has been created&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;registers user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">&#x27;Test&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> password = <span class="string">&#x27;MySecreT&#x27;</span></span><br><span class="line"></span><br><span class="line">  registerUser(username, password)</span><br><span class="line">  loginUser(username, password)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if the user has been created and could log in</span></span><br><span class="line">  <span class="comment">// we should be redirected to the home page with the rooms</span></span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test fails if we re-run it, so let&#39;s take care of that. Let&#39;s delete the user before each test. I have registered a task in the plugin file to connect to the database and clear all users. Just for kicks I also added a task to find a user by username.</p><figure class="highlight js"><figcaption><span>cypress/plugin/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> database = <span class="built_in">require</span>(<span class="string">&#x27;../../app/database&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">clearUsers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;clear users&#x27;</span>)</span><br><span class="line">  <span class="keyword">await</span> database.models.user.deleteMany(&#123;&#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">findUser</span>(<span class="params">username</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;find user&#x27;</span>, username)</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> username !== <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;username must be a string&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> database.models.user.findOne(&#123; username &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    clearUsers,</span><br><span class="line">    findUser,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>At the start of the test, we can delete all users in the database (which is fine, we are running one test at a time).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;registers user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">&#x27;Test&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> password = <span class="string">&#x27;MySecreT&#x27;</span></span><br><span class="line"></span><br><span class="line">  cy.task(<span class="string">&#x27;clearUsers&#x27;</span>)</span><br><span class="line">  registerUser(username, password)</span><br><span class="line">  loginUser(username, password)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if the user has been created and could log in</span></span><br><span class="line">  <span class="comment">// we should be redirected to the home page with the rooms</span></span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/data-session/clear-users.gif" alt="Clear all existing users before creating the test user"></p><p>Nice, the test can be re-run multiple times. But we can do better - let us avoid deleting all users. We can quickly check if the already created user is still valid.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;registers user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">&#x27;Test&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> password = <span class="string">&#x27;MySecreT&#x27;</span></span><br><span class="line"></span><br><span class="line">  cy.task(<span class="string">&#x27;findUser&#x27;</span>, username).then(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">      registerUser(username, password)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  loginUser(username, password)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if the user has been created and could log in</span></span><br><span class="line">  <span class="comment">// we should be redirected to the home page with the rooms</span></span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test is much much faster - since it reuses the previously created user, and avoids recreating unnecessarily.</p><p><img src="../images/data-session/find-user.gif" alt="Finds the previously created user"></p><h2><span id="data-session">Data session</span></h2><p>Now let us rewrite the above test using <a href="https://github.com/bahmutov/cypress-data-session">cypress-data-session</a> plugin. We will import the plugin from the support file, which gives us the <code>cy.dataSession</code> command. First, let&#39;s recreate the original &quot;naive&quot; create and log in behavior:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;registers user using data session&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">&#x27;Test&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> password = <span class="string">&#x27;MySecreT&#x27;</span></span><br><span class="line"></span><br><span class="line">  cy.dataSession(&#123;</span><br><span class="line">    name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      registerUser(username, password)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  loginUser(username, password)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if the user has been created and could log in</span></span><br><span class="line">  <span class="comment">// we should be redirected to the home page with the rooms</span></span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes on the first attempt if there are no users in the database.</p><p><img src="../images/data-session/data1.png" alt="The user was created using the setup method"></p><p>Great, we created the data item (the user) using the <code>setup</code> method, and gave the data session an alias &quot;user&quot;. We can pass some data from that alias later; it can be used to access the object created by the <code>setup</code> method.</p><p>Notice, if we re-run the test, it fails when it tries to run the <code>setup</code> method again.</p><p><img src="../images/data-session/recompute.png" alt="The data session tries to recompute the item"></p><p>The data session does not know that the user object is still valid, and should not be recomputed. Let&#39;s tell the data session how to check. We will add the <code>validate</code> method that can run Cypress commands and resolves with a boolean value. If we yield true, the data session will skip recomputing the user again.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    registerUser(username, password)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">validate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cy.task(<span class="string">&#x27;findUser&#x27;</span>, username).then(<span class="built_in">Boolean</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">loginUser(username, password)</span><br></pre></td></tr></table></figure><p>The test now immediately logs in - because the user is still valid.</p><p><img src="../images/data-session/still-valid.png" alt="The user is validated, not recomputing necessary"></p><h2><span id="register-the-user-via-api-call">Register the user via API call</span></h2><p>We can optimize how we create the user. Instead of filling the form fields and submitting the form, we could simply post it using the <a href="https://on.cypress.io/request">cy.request</a> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerApi</span>(<span class="params">username, password</span>) </span>&#123;</span><br><span class="line">  cy.request(&#123;</span><br><span class="line">    method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;/register&#x27;</span>,</span><br><span class="line">    form: <span class="literal">true</span>,</span><br><span class="line">    body: &#123;</span><br><span class="line">      username,</span><br><span class="line">      password,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    registerApi(username, password)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">validate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cy.task(<span class="string">&#x27;findUser&#x27;</span>, username).then(<span class="built_in">Boolean</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">loginUser(username, password)</span><br></pre></td></tr></table></figure><p>The test passes and is faster.</p><p><img src="../images/data-session/register-using-request.png" alt="Register the user with cy.request command"></p><h2><span id="register-the-user-via-task-command">Register the user via task command</span></h2><p>We can bypass the API and directly create the user in the database (of course, we can use the application database model layer to avoid creating an invalid entity) by calling the plugin code via <a href="https://on.cypress.io/task">cy.task</a> command.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> database = <span class="built_in">require</span>(<span class="string">&#x27;../../app/database&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; registerUser &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../../app/models/user&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">findUser</span>(<span class="params">username</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;find user&#x27;</span>, username)</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> username !== <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;username must be a string&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> database.models.user.findOne(&#123; username &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;get user with id %s&#x27;</span>, id)</span><br><span class="line">  <span class="keyword">return</span> database.models.user.findOne(&#123; <span class="attr">_id</span>: id &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">makeUser</span>(<span class="params">credentials</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;makeUser&#x27;</span>, credentials?.username)</span><br><span class="line">  <span class="keyword">const</span> errorMessageOrUser = <span class="keyword">await</span> registerUser(credentials)</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> errorMessageOrUser === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(errorMessageOrUser)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">&#x27;made user %s id %s&#x27;</span>,</span><br><span class="line">    credentials.username,</span><br><span class="line">    errorMessageOrUser._id,</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">return</span> errorMessageOrUser._id</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    findUser,</span><br><span class="line">    getUser,</span><br><span class="line">    makeUser,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>📝 For more examples on how to connect to the MongoDB database from Cypress tests, read the blog post <a href="/blog/testing-mongo-with-cypress/" title="Testing Mongo with Cypress">Testing Mongo with Cypress</a> or <a href="/blog/verify-phone-part-two/" title="How To Verify Phone Number During Tests Part 2">How To Verify Phone Number During Tests Part 2</a>.</p></blockquote><p>We can now register a user really quickly.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    cy.task(<span class="string">&#x27;makeUser&#x27;</span>, &#123; username, password &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">validate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cy.task(<span class="string">&#x27;findUser&#x27;</span>, username).then(<span class="built_in">Boolean</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/data-session/register-using-task.png" alt="Register the user with cy.task command"></p><h2><span id="caching-data">Caching data</span></h2><p>The <code>cy.dataSession</code> command above helped us organize the user creation a little bit, but its power is in caching a piece of created data. For example, why do we need the <code>username</code> to check if the user is still valid? A user object should be checked by its ID! The user ID is returned by the <code>cy.task(&#39;makeUser&#39;)</code>, so let&#39;s store it somewhere. That is precisely what <code>cy.dataSession</code> can do internally, so you do not have to do it! It can even store it across the specs, so it survives hard reloads and opening a different spec.</p><p>In fact, the user ID has already been stored - because that is what the Cypress command chain inside the <code>setup</code> method yields. That ID is stored in the session, and we can see what the session stores using a static method <code>Cypress.getDataSession</code> added to the global Cypress object by the plugin.</p><p><img src="../images/data-session/stored-data.png" alt="The user ID was stored inside the data session &quot;user&quot;"></p><p>We can store any object there, let&#39;s keep the user ID, the username, and the password together.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    cy.task(<span class="string">&#x27;makeUser&#x27;</span>, &#123; username, password &#125;).then(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; id, username, password &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">validate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cy.task(<span class="string">&#x27;findUser&#x27;</span>, username).then(<span class="built_in">Boolean</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/data-session/store-object.png" alt="We can store an entire object inside the data session"></p><p>What about validating the data? Does it need to rely on the external closure variable <code>username</code>? No - the data session code automatically passes the stored data to the <code>validate</code> method! We can rewrite the <code>validate</code> method to use the parameter instead of the external variable:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    cy.task(<span class="string">&#x27;makeUser&#x27;</span>, &#123; username, password &#125;).then(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; id, username, password &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">validate</span>(<span class="params">&#123; username &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cy.task(<span class="string">&#x27;findUser&#x27;</span>, username).then(<span class="built_in">Boolean</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Even better, we can grab the ID property and use the task <code>getUser</code> to validate the user quicker</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    cy.task(<span class="string">&#x27;makeUser&#x27;</span>, &#123; username, password &#125;).then(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; id, username, password &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">validate</span>(<span class="params">&#123; id &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cy.task(<span class="string">&#x27;getUser&#x27;</span>, id).then(<span class="built_in">Boolean</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Notice how the Command Log shows the <code>cy.task</code> checking the user ID now</p><p><img src="../images/data-session/validate-id.png" alt="Validating the user by the stored ID"></p><p>The stored user object is automatically available under a Cypress alias and under the test context property.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> username = <span class="string">&#x27;Test&#x27;</span></span><br><span class="line"><span class="keyword">const</span> password = <span class="string">&#x27;MySecreT&#x27;</span></span><br><span class="line"></span><br><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    cy.task(<span class="string">&#x27;makeUser&#x27;</span>, &#123; username, password &#125;).then(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; id, username, password &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">validate</span>(<span class="params">&#123; id &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cy.task(<span class="string">&#x27;getUser&#x27;</span>, id).then(<span class="built_in">Boolean</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">cy.get(<span class="string">&#x27;@user&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, username)</span><br><span class="line">  <span class="comment">// or access the alias using the test context property</span></span><br><span class="line">  <span class="comment">// after it has been set</span></span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(<span class="built_in">this</span>.user).to.have.keys(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>The name we gave the data session &quot;user&quot; became a Cypress alias, reachable using the <code>cy.get</code> command or via the text context property.</p><p><img src="../images/data-session/alias.png" alt="Accessing the computed cached data via an alias &quot;user&quot;"></p><p><strong>Tip:</strong> the plugin adds static methods to the global <code>Cypress</code> object that allow you inspecting individual sessions, clearing them, or disabling the plugin completely, all from the browser&#39;s DevTools console. See the <a href="https://github.com/bahmutov/cypress-data-session#global-methods">README</a>.</p><h2><span id="logging-using-api-call">Logging using API call</span></h2><p>In our code, we are using the <code>cy.task</code> to create the user if necessary, but we still log in using the page form. To log in faster, we can use <a href="https://on.cypress.io/request">cy.request</a> command. This command can submit the <code>/login</code> form and set any returned cookies, like the <code>connect.sid</code> session cookie the application is using.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> loginViaApi = <span class="function">(<span class="params">username, password</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.log(<span class="string">`log in user **<span class="subst">$&#123;username&#125;</span>**`</span>)</span><br><span class="line">  cy.request(&#123;</span><br><span class="line">    method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    form: <span class="literal">true</span>,</span><br><span class="line">    body: &#123;</span><br><span class="line">      username,</span><br><span class="line">      password,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> cy.wrap(&#123; username, password &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;register and log in using cy.request&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">&#x27;Test&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> password = <span class="string">&#x27;MySecreT&#x27;</span></span><br><span class="line"></span><br><span class="line">  cy.dataSession(&#123;</span><br><span class="line">    name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      cy.task(<span class="string">&#x27;makeUser&#x27;</span>, &#123; username, password &#125;).then(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; id, username, password &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">validate</span>(<span class="params">&#123; id &#125;</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> cy.task(<span class="string">&#x27;getUser&#x27;</span>, id).then(<span class="built_in">Boolean</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;@user&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, username)</span><br><span class="line">    <span class="comment">// or access the alias using the test context property</span></span><br><span class="line">    <span class="comment">// after it has been set</span></span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      expect(<span class="built_in">this</span>.user).to.have.keys(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  loginViaApi(username, password)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if the user is logged in correctly,</span></span><br><span class="line">  <span class="comment">// the session cookie is set, and when we visit the page</span></span><br><span class="line">  <span class="comment">// we are automatically redirected to the list of chat rooms</span></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Look good, and it is faster too, since we avoid visiting the page and typing into the form, and then submitting it.</p><p><img src="../images/data-session/log-in.gif" alt="Logging in using cy.request command"></p><h2><span id="caching-the-session-cookie">Caching the session cookie</span></h2><p>When we log in using the form or via <code>cy.request</code> call, the browser receives the session cookie from the backend. This cookie is associated with the user we have created. If this cookie is removed, the server redirects the page back to the log in.</p><p><img src="../images/data-session/sid.png" alt="The session cookie used to authenticate the user"></p><p>If we log in once, and save this cookie in a variable, we could log in instantly the second time by setting it before <code>cy.visit</code>. This sounds a lot like ... <code>cy.dataSession</code> command. Let&#39;s &quot;build&quot; it by first just using the setup method and storing the cookie inside the data session. Change the <code>loginViaApi</code> function to yield the cookie value, and call this method from the <code>setup</code> method - this will store the cookie in the data session cache.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> loginViaApi = <span class="function">(<span class="params">username, password</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.log(<span class="string">`log in user **<span class="subst">$&#123;username&#125;</span>**`</span>)</span><br><span class="line">  cy.request(&#123;</span><br><span class="line">    method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    form: <span class="literal">true</span>,</span><br><span class="line">    body: &#123;</span><br><span class="line">      username,</span><br><span class="line">      password,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// after cy.request, the cookie should exist in the browser</span></span><br><span class="line">  <span class="keyword">return</span> cy.getCookie(<span class="string">&#x27;connect.sid&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;register and log in using data sessions&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">&#x27;Test&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> password = <span class="string">&#x27;MySecreT&#x27;</span></span><br><span class="line"></span><br><span class="line">  cy.dataSession(&#123;</span><br><span class="line">    name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      cy.task(<span class="string">&#x27;makeUser&#x27;</span>, &#123; username, password &#125;).then(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; id, username, password &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">validate</span>(<span class="params">&#123; id &#125;</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> cy.task(<span class="string">&#x27;getUser&#x27;</span>, id).then(<span class="built_in">Boolean</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.dataSession(&#123;</span><br><span class="line">    name: <span class="string">&#x27;logged in user&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="comment">// yields the connect.sid cookie</span></span><br><span class="line">      <span class="keyword">return</span> loginViaApi(username, password)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if the user is logged in correctly,</span></span><br><span class="line">  <span class="comment">// the session cookie is set, and when we visit the page</span></span><br><span class="line">  <span class="comment">// we are automatically redirected to the list of chat rooms</span></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The second <code>cy.dataSession</code> always recreates the cookie as the captured movie below shows - because we do not have the <code>validate</code> method yet.</p><p><img src="../images/data-session/setup-cookie.gif" alt="The cookie is recomputed for every test"></p><p>Let&#39;s think when the cookie is valid - when it has <em>any</em> value. Of course, we could validate the cookie fully by making an authorized request and checking if it fails. But for now, let&#39;s assume that IF we have a cookie, then it is ok to use it again. We can tell the data session that <em>any</em> previous value is ok to reuse by using <code>validate: true</code> value.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;logged in user&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// yields the connect.sid cookie</span></span><br><span class="line">    <span class="keyword">return</span> loginViaApi(username, password)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// any non-null cookie value is valid</span></span><br><span class="line">  validate: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hmm, the test has failed - the user was not logged in when the test visited the page.</p><p><img src="../images/data-session/not-logged-in.png" alt="The user was redirected back to the login page"></p><p>Cypress clears all cookies before each test. Thus the data storage has a cookie from the previous session BUT it is still in memory. We told the <code>cy.dataStorage</code> that the cookie is valid, but we also need to tell it how to <em>restore</em> the cookie and set it in the browser before proceeding. We have the method <code>recreate</code> for this; it receives the value from the data session storage (just like the method <code>validate</code> does).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;logged in user&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// yields the connect.sid cookie</span></span><br><span class="line">    <span class="keyword">return</span> loginViaApi(username, password)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// any non-null cookie value is valid</span></span><br><span class="line">  validate: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// if we have the previous valid cookie</span></span><br><span class="line">  <span class="comment">// set it in the browser before any cy.visit</span></span><br><span class="line">  <span class="function"><span class="title">recreate</span>(<span class="params">cookie</span>)</span> &#123;</span><br><span class="line">    cy.setCookie(<span class="string">&#x27;connect.sid&#x27;</span>, cookie.value)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// if the user is logged in correctly,</span></span><br><span class="line"><span class="comment">// the session cookie is set, and when we visit the page</span></span><br><span class="line"><span class="comment">// we are automatically redirected to the list of chat rooms</span></span><br><span class="line">cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/rooms&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/data-session/recreate.png" alt="Recreate the browser session by setting the cookie from the data session"></p><p>Reusing the previous session cookie is <em>very very fast</em>, even compared to logging in using the <code>cy.request</code> command.</p><h2><span id="data-session-methods">Data session methods</span></h2><p>The <code>cy.dataSession</code> allows you to create the initial item using <code>setup</code>, stores it, validates if the previous item is still valid using <code>validate</code>, and if it is still valid, set it back into the browser using any Cypress commands using the <code>recreate</code> method. One could summarize the logic using the following list:</p><ul><li>if there is no previous item for the session named X<ul><li>run the <code>setup</code> and store the item under name X</li></ul></li><li>else<ul><li>there is a previous item</li><li>check if it is still valid using <code>validate</code><ul><li>if still valid, call <code>recreate</code> if provided</li><li>otherwise call the <code>setup</code> again</li></ul></li></ul></li></ul><p>There are a few other lifecycle methods in <code>cy.dataSession</code> to make dealing with the item more explicit, see the README for details.</p><h2><span id="dependent-sessions">Dependent sessions</span></h2><p>Multiple sessions store their data separately. We can check what the session stores from the DevTools console.</p><p><img src="../images/data-session/sessions.png" alt="Printing the saved data from each data session"></p><p>The two data sessions have a dependency; if the user object is recreated, then the previously stored cookie becomes invalid. One cannot log in using a session for a user that does not exist! Thus we need to invalidate the data session &quot;logged in user&quot; when running the &quot;user&quot; session setup. We can do it explicitly from the &quot;user&quot; data session. When running the <code>setup</code> function, call <code>Cypress.clearDataSession(&#39;logged in user&#39;)</code> and it is deleted.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    Cypress.clearDataSession(<span class="string">&#x27;logged in user&#x27;</span>)</span><br><span class="line">    cy.task(<span class="string">&#x27;makeUser&#x27;</span>, &#123; username, password &#125;).then(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; id, username, password &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">validate</span>(<span class="params">&#123; id &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cy.task(<span class="string">&#x27;getUser&#x27;</span>, id).then(<span class="built_in">Boolean</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>In the recording below all data sessions are set, but I clear the users from the database table and clear the &quot;user&quot; data session, forcing the <code>cy.dataSession</code> to recreate the user. The <code>setup</code> runs and clears the &quot;logged in user&quot; data session. That&#39;s why you see the message &quot;first time for session logged in user&quot; in the Cypress Command Log.</p><p><img src="../images/data-session/clear1.gif" alt="The second session is recomputed because the user session clears it"></p><p>There is an alternative way to re-compute the data session which I prefer. Instead of the &quot;user&quot; data session clearing every session that might need to be recomputed, why don&#39;t we tell the &quot;logged in user&quot; that it depends on the &quot;user&quot; session? There is a parameter that specifies it:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    cy.task(<span class="string">&#x27;makeUser&#x27;</span>, &#123; username, password &#125;).then(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; id, username, password &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">validate</span>(<span class="params">&#123; id &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cy.task(<span class="string">&#x27;getUser&#x27;</span>, id).then(<span class="built_in">Boolean</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;logged in user&#x27;</span>,</span><br><span class="line">  dependsOn: [<span class="string">&#x27;user&#x27;</span>],</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// yields the connect.sid cookie</span></span><br><span class="line">    <span class="keyword">return</span> loginViaApi(username, password)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// any non-null cookie value is valid</span></span><br><span class="line">  validate: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// if we have the previous valid cookie</span></span><br><span class="line">  <span class="comment">// set it in the browser before any cy.visit</span></span><br><span class="line">  <span class="function"><span class="title">recreate</span>(<span class="params">cookie</span>)</span> &#123;</span><br><span class="line">    cy.setCookie(<span class="string">&#x27;connect.sid&#x27;</span>, cookie.value)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Notice how the second data session declares all sessions it depends on using <code>dependsOn: [&#39;user&#39;]</code> parameter. Under the hood, each data session generates a new random UUID when it is computed using the <code>setup</code> call. Every session with dependencies keeps a list of UUIDs for the sessions it depends on. During the <code>validate</code> step, if any of the upstream data sessions have a different UUID from its list, then it must have been recomputed, and thus the current data session is no longer valid. Clean and simple!</p><p><img src="../images/data-session/depends.png" alt="The second session is recomputed when the dependent session is recomputed"></p><h2><span id="more-info">More info</span></h2><p>I believe the <a href="https://github.com/bahmutov/cypress-data-session">cypress-data-session</a> plugin provides a very flexible and powerful way for creating and re-using any data during Cypress tests. It can do all the things I have shown in this blog post and more. For example, it can share the data across specs! For more information, see the plugin&#39;s README, and the example application <a href="https://github.com/bahmutov/chat.io">bahmutov/chat.io</a>. You can also find lots of example videos, some of them linked here:</p><ul><li><a href="https://youtu.be/As5yqkoZOx8">Introduction to cypress-data-session package</a></li><li><a href="https://youtu.be/VQtjDGCuRzI">Use Data Alias Created Automatically By cypress-data-session</a></li><li><a href="https://youtu.be/P-sb5OHSNsM">Create User Using cypress-data-session Command</a></li><li><a href="https://youtu.be/SyDz6l_EFoc">Invalidate cy.session From cypress-data-session</a></li><li><a href="https://youtu.be/ws4TitQJ7fQ">Share Data Across Specs Using cypress-data-session Plugin</a></li><li><a href="https://youtu.be/PTlcRBgFJaM">Use cy.dataSession To Create A User And Log In</a></li><li><a href="https://www.youtube.com/watch?v=0KTGc83wSoA">Quickly Create A User And Log in Using Dependent Data Sessions</a></li><li><a href="https://youtu.be/7ipCvJQixI0">Introduction To cypress-data-session Plugin</a></li></ul><p>See the <a href="https://github.com/bahmutov/cypress-data-session#videos">cypress-data-session README Videos section</a> for the up-to-date list.</p><p>Read the blog post <a href="/blog/faster-user-creation/" title="Faster User Object Creation">Faster User Object Creation</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This post will introduce you to a very powerful way of creating and re-using data in your Cypress tests. By re-using the expensive to cre
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Refactor Tests To Be Independent And Fast Using Cypress-Each Plugin</title>
    <link href="https://glebbahmutov.com/blog/refactor-using-each/"/>
    <id>https://glebbahmutov.com/blog/refactor-using-each/</id>
    <published>2021-10-15T04:00:00.000Z</published>
    <updated>2021-10-19T00:47:30.019Z</updated>
    
    <content type="html"><![CDATA[<p>I have made <a href="https://github.com/bahmutov/cypress-each">cypress-each</a> to simplify generating tests from data. This plugin has already proved itself useful for <a href="/blog/dynamic-api-tests-using-cypress-each/" title="API testing">API testing</a>, and in this post I want to show a few more tricks it can help you do, like making the tests faster by generating separate spec files to be executed in parallel.</p><h2><span id="the-initial-test">The initial test</span></h2><p>Let&#39;s start with a single test that checks if elements are visible.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows the expected elements&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;header&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;footer&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;.new-todo&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You can watch me refactor this single test to avoid command duplication in the video below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/DnmnzemS_HA" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>The better test iterates through the list of selectors</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows the expected elements&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> selectors = [<span class="string">&#x27;header&#x27;</span>, <span class="string">&#x27;footer&#x27;</span>, <span class="string">&#x27;.new-todo&#x27;</span>]</span><br><span class="line">  selectors.forEach(<span class="function">(<span class="params">selector</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.get(selector).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test has a problem: if the first selector is wrong, the rest of the commands and assertions is skipped when it fails to find an element. Are the &quot;footer&quot; and the &quot;.new-todo&quot; selectors valid? Are those elements visible? We do not know, since the test has failed on the first command. We want to separate this test into 3 independent tests, and do it with minimal code duplication.</p><h2><span id="using-cypress-each-to-generate-independent-tests">Using cypress-each to generate independent tests</span></h2><p>This is where the <a href="https://github.com/bahmutov/cypress-each">cypress-each</a> plugin comes in handy. It can generate separate <code>it</code> tests (or even separate <code>describe</code> suites) from a list of items.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress-each</span><br><span class="line">+ cypress-each@1.4.0</span><br><span class="line"># install using Yarn</span><br><span class="line">$ yarn add -D cypress-each</span><br></pre></td></tr></table></figure><p>You can import the plugin directly from the spec file, or from the Cypress support file. If you import it from the support file, the <code>it.each</code> syntax becomes available in every spec.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-each&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> selectors = [<span class="string">&#x27;header&#x27;</span>, <span class="string">&#x27;footer&#x27;</span>, <span class="string">&#x27;.new-todo&#x27;</span>]</span><br><span class="line">it.each(selectors)(<span class="string">&#x27;element %s is visible&#x27;</span>, <span class="function">(<span class="params">selector</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.get(selector).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You can watch me refactor the single test using <code>cypress-each</code> plugin in the video below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/utPKRV_fL1E" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>There are now three independent tests:</p><ul><li>&quot;element header is visible&quot;</li><li>&quot;element footer is visible&quot;</li><li>&quot;element .new-todo is visible&quot;</li></ul><p>If one test fails, the rest still runs and gives you the complete picture.</p><p><strong>Tip:</strong> You can be quite flexible with the test title pattern. For example, you can use <code>%k</code> and <code>%K</code> placeholders to insert the item&#39;s index (0-based and 1-based respectively). You can even use your own test title format function like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-each&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> selectors = [<span class="string">&#x27;header&#x27;</span>, <span class="string">&#x27;footer&#x27;</span>, <span class="string">&#x27;.new-todo&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> getTitle = <span class="function">(<span class="params">item, index, items</span>) =&gt;</span> <span class="string">`testing element %K &quot;%s&quot;`</span></span><br><span class="line">it.each(selectors)(getTitle, <span class="function">(<span class="params">selector</span>) =&gt;</span> &#123; ... &#125;)</span><br></pre></td></tr></table></figure><p>The above syntax will create 3 tests with titles <code>testing element 1 &quot;header&quot;</code>, <code>testing element 2 &quot;footer&quot;</code>, and <code>testing element 3 &quot;.new-todo&quot;</code>.</p><h2><span id="parallel-testing">Parallel testing</span></h2><p>If we have a lot of data items, and generate a test for each one, the entire spec can become quite long. For example, the following spec simulates a slow loading page using <code>cy.wait(10000)</code> command. With 9 element selectors, this small spec example runs for 90 seconds!</p><figure class="highlight js"><figcaption><span>cypress/integration/visible-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-each&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;visible elements&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// simulate creating lots of tests by using the same selectors</span></span><br><span class="line">  <span class="keyword">const</span> selectors = [</span><br><span class="line">    <span class="string">&#x27;header&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;footer&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;.new-todo&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;header&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;footer&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;.new-todo&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;header&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;footer&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;.new-todo&#x27;</span>,</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  it.each(selectors)(</span><br><span class="line">    (selector, k) =&gt; <span class="string">`testing <span class="subst">$&#123;k + <span class="number">1</span>&#125;</span> selector <span class="subst">$&#123;selector&#125;</span>`</span>,</span><br><span class="line">    (selector) =&gt; &#123;</span><br><span class="line">      cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      <span class="comment">// simulate slow-loading page</span></span><br><span class="line">      cy.wait(<span class="number">10000</span>)</span><br><span class="line">      cy.get(selector).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/each-spec/one-spec.png" alt="Spec takes 90 seconds to run through each test"></p><p>Ughh, brutal. The best way to make the entire testing step faster is by running lots of tests in parallel, as described in the blog post <a href="/blog/split-spec/" title="Make Cypress Run Faster by Splitting Specs">Make Cypress Run Faster by Splitting Specs</a> and <a href="/blog/parallel-end-to-end-testing/" title="Parallel end to end testing with Cypress, Docker and GitLab">Parallel end to end testing with Cypress, Docker and GitLab</a>. But how do we split the tests generated using <code>it.each</code> into separate <em>spec files</em>?</p><p>First, instead of a single <code>visible-spec.js</code> spec file, create a folder and place several empty spec files there. For example, if we want to run the element tests using 3 test runners in parallel at a time, create 3 spec files there.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cypress/</span><br><span class="line">  integration/</span><br><span class="line">    visible-spec/</span><br><span class="line">      spec1.js</span><br><span class="line">      spec2.js</span><br><span class="line">      spec3.js</span><br></pre></td></tr></table></figure><p>Second, put the selector data into a JSON file to be imported from each spec.</p><figure class="highlight json"><figcaption><span>cypress/integration/visible-spec/selectors.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">&quot;header&quot;</span>,</span><br><span class="line">  <span class="string">&quot;footer&quot;</span>,</span><br><span class="line">  <span class="string">&quot;.new-todo&quot;</span>,</span><br><span class="line">  <span class="string">&quot;header&quot;</span>,</span><br><span class="line">  <span class="string">&quot;footer&quot;</span>,</span><br><span class="line">  <span class="string">&quot;.new-todo&quot;</span>,</span><br><span class="line">  <span class="string">&quot;header&quot;</span>,</span><br><span class="line">  <span class="string">&quot;footer&quot;</span>,</span><br><span class="line">  <span class="string">&quot;.new-todo&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Third, move each test <em>callback</em> function into a separate JavaScript file. It is not a spec itself, it just exports the test callback to be imported by other specs.</p><figure class="highlight js"><figcaption><span>cypress/integration/visible-spec/utils.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> testTitle = <span class="function">(<span class="params">selector, k</span>) =&gt;</span></span><br><span class="line">  <span class="string">`testing <span class="subst">$&#123;k + <span class="number">1</span>&#125;</span> selector <span class="subst">$&#123;selector&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> testElementSelector = <span class="function">(<span class="params">selector</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// simulate slow-loading page</span></span><br><span class="line">  cy.wait(<span class="number">10000</span>)</span><br><span class="line">  cy.get(selector).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now let&#39;s finish the individual spec files <code>spec1.js</code>, <code>spec2.js</code>, and <code>spec3.js</code>. Each will handle just a subset of the generates tests by ... filtering the data items! Since we have three different spec files, we will use module 3 to split the items into tests for each spec.</p><figure class="highlight js"><figcaption><span>cypress/integration/visible-spec/spec1.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> selectors <span class="keyword">from</span> <span class="string">&#x27;./selectors.json&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; testTitle, testElementSelector &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;visible elements&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// there are 3 spec files testing the &quot;selectors&quot; list</span></span><br><span class="line">  <span class="comment">// this spec file will pick the selectors 0, 3, 6, etc.</span></span><br><span class="line">  <span class="keyword">const</span> filteredSelectors = selectors.filter(<span class="function">(<span class="params">x, k</span>) =&gt;</span> k % <span class="number">3</span> === <span class="number">0</span>)</span><br><span class="line">  it.each(filteredSelectors)(testTitle, testElementSelector)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>🎁 You can find these specs in the repo <a href="https://github.com/bahmutov/todo-graphql-example">bahmutov/todo-graphql-example</a>.</p></blockquote><p>The <code>spec1.js</code> executes a third of the tests.</p><p><img src="../images/each-spec/third.png" alt="The first spec file only tests each third data case"></p><p>Similarly, the other two spec files pick up a third of the test cases each. The <code>spec2.js</code> uses modulo 3 equals 1 to filter the test cases</p><figure class="highlight js"><figcaption><span>cypress/integration/visible-spec/spec2.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;visible elements&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> filteredSelectors = selectors.filter(<span class="function">(<span class="params">x, k</span>) =&gt;</span> k % <span class="number">3</span> === <span class="number">1</span>)</span><br><span class="line">  it.each(filteredSelectors)(testTitle, testElementSelector)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The <code>spec3.js</code> picks the last third of the test cases using the module 3 equals 2.</p><figure class="highlight js"><figcaption><span>cypress/integration/visible-spec/spec3.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;visible elements&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> filteredSelectors = selectors.filter(<span class="function">(<span class="params">x, k</span>) =&gt;</span> k % <span class="number">3</span> === <span class="number">2</span>)</span><br><span class="line">  it.each(filteredSelectors)(testTitle, testElementSelector)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You can also split the list of items into groups using <code>Cypress._.chunk</code></p><figure class="highlight js"><figcaption><span>cypress/integration/visible-spec/spec1.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;visible elements&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// selectors has 9 items, split into chunks with max size 3</span></span><br><span class="line">  <span class="keyword">const</span> filteredSelectors = Cypress._.chunk(selectors, <span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line">  it.each(filteredSelectors)(testTitle, testElementSelector)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I have added the support for chunking the items into <code>describe.each</code> and <code>it.each</code>, see <a href="https://github.com/bahmutov/cypress-each#chunking">Chunking</a>. For example, if we want to split all items across three spec files, the test files would use:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// spec1.js</span></span><br><span class="line">it.each(selectors, <span class="number">3</span>, <span class="number">0</span>)(testTitle, testElementSelector)</span><br><span class="line"><span class="comment">// spec2.js</span></span><br><span class="line">it.each(selectors, <span class="number">3</span>, <span class="number">1</span>)(testTitle, testElementSelector)</span><br><span class="line"><span class="comment">// spec3.js</span></span><br><span class="line">it.each(selectors, <span class="number">3</span>, <span class="number">2</span>)(testTitle, testElementSelector)</span><br></pre></td></tr></table></figure><h2><span id="run-specs-in-parallel">Run specs in parallel</span></h2><p>To show the time savings from running the generated tests in parallel, I have set up recording the tests results on <a href="https://dashboard.cypress.io/projects/ahwxj4">Cypress Dashboard</a>. The initial run used a single machine:</p><p><img src="../images/each-spec/one-machine.png" alt="All tests including spec1, spec2, and spec3 ran on a single CI machine"></p><p>Then I set up the CI to run the same tests using 3 containers on GH Actions, see the <a href="https://github.com/bahmutov/todo-graphql-example/blob/master/.github/workflows/ci.yml">.github/workflows/ci.yml</a> file:</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="comment"># when one test fails, DO NOT cancel the other</span></span><br><span class="line">      <span class="comment"># containers, because this will kill Cypress processes</span></span><br><span class="line">      <span class="comment"># leaving the Dashboard hanging ...</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action/issues/48</span></span><br><span class="line">      <span class="attr">fail-fast:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="comment"># run 3 copies of the current job in parallel</span></span><br><span class="line">        <span class="attr">containers:</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">dev</span></span><br><span class="line">          <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:1234&#x27;</span></span><br><span class="line">          <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">parallel:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">&#x27;All tests&#x27;</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="comment"># pass the Dashboard record key as an environment variable</span></span><br><span class="line">          <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CYPRESS_RECORD_KEY</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>The new test run took 1/3 of the time because our long specs were executed on 3 machines at once.</p><p><img src="../images/each-spec/three.png" alt="Running specs in parallel on CI using 3 machines"></p><p>Much better.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have made &lt;a href=&quot;https://github.com/bahmutov/cypress-each&quot;&gt;cypress-each&lt;/a&gt; to simplify generating tests from data. This plugin has a
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Dynamic API Tests Using Cypress-Each Plugin</title>
    <link href="https://glebbahmutov.com/blog/dynamic-api-tests-using-cypress-each/"/>
    <id>https://glebbahmutov.com/blog/dynamic-api-tests-using-cypress-each/</id>
    <published>2021-10-12T04:00:00.000Z</published>
    <updated>2021-10-15T14:37:07.047Z</updated>
    
    <content type="html"><![CDATA[<p>Recently a friend of mine Murat Ozcan has asked me about using Cypress for performing API tests. Murat always goes straight to the source for Cypress answers.</p><p><img src="../images/cypress-each/q1.png" alt="Can Cypress be used for API testing? What about describe.each feature?"></p><p>The second screenshot is giving an example of the &quot;.each&quot; feature Murat iz looking for. Given an array of items, it generates a separate <code>describe</code> block with the title formatted using the data.</p><p><img src="../images/cypress-each/q2.png" alt="Describe.each example"></p><p>I am a big believer in using Cypress for API tests, see my blog post <a href="#">Post not found: api-testing-with-server-logs</a>, but I do agree - <code>jest.each</code> does look nice. Every time you import a JSON fixture with lots of test cases, iterating over it to create a separate test sure is nice, see the post <a href="/blog/dynamic-tests-from-fixture/" title="Dynamic Tests From Cypress Fixture">Dynamic Tests From Cypress Fixture</a>. Of course, Cypress uses <a href="https://mochajs.org/">Mocha</a> test engine, where <code>.each</code> is not built-in, instead it comes from a plugin <a href="https://github.com/ryym/mocha-each">mocha-each</a>. Is it hard to implement it ourselves?</p><p><strong>Note:</strong> Murat and I have done a very nice webinar together, check it out <a href="https://www.youtube.com/watch?v=aMPkaLOpyns">How Siemens SW Hub increased their test productivity by 38% with Cypress</a>.</p><h2><span id="own-implementation">Own implementation</span></h2><p>Making a helper like <code>it.each</code> is not difficult. Let&#39;s look at the example</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it.each([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])(<span class="string">&#x27;%d is a number&#x27;</span>, <span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">  expect(x).to.be.a(<span class="string">&#x27;number&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>From the above code, you can guess the signature of the <code>it.each</code> method. It takes an array and must return a function. That function expects two arguments: a title string pattern, and a callback function. The string pattern needs the value &quot;x&quot; to become the final string (we can use the Node&#39;s <code>util.format</code> method for this). The callback function is almost like the standard <code>it</code> callback function, except it needs the argument <code>x</code> applied. Great. Here is our implementation (ignore multiple arguments for now)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// standard Node module &quot;util&quot; has &quot;format&quot; function</span></span><br><span class="line"><span class="keyword">const</span> &#123; format &#125; = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!it.each) &#123;</span><br><span class="line">  it.each = <span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">titlePattern, testCallback</span>) </span>&#123;</span><br><span class="line">      values.forEach(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// define a test for each value</span></span><br><span class="line">        <span class="keyword">const</span> title = format(titlePattern, value)</span><br><span class="line">        it(title, testCallback.bind(<span class="literal">null</span>, value))</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can find my implementation at <a href="https://github.com/bahmutov/cypress-each">bahmutov/cypress-each</a>. Let&#39;s try using it.</p><h2><span id="example-application">Example application</span></h2><p>Let&#39;s take an example application with GraphQL API. We want to confirm the GraphQL endpoint is working correctly. Thus we want to hit it with our requests and confirm the responses.</p><blockquote class="pullquote"><p>🔎 You can find the source code for this blog post in <a href="https://github.com/bahmutov/todo-graphql-example">bahmutov/todo-graphql-example</a> repo.</p></blockquote><p>First, let&#39;s add my API testing plugin <a href="https://github.com/bahmutov/cy-api">cy-api</a> and <a href="https://github.com/bahmutov/cypress-each">cypress-each</a> helper.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D @bahmutov/cy-api cypress-each</span><br><span class="line">+ cypress-each@1.1.1</span><br><span class="line">+ @bahmutov/cy-api@1.5.0</span><br></pre></td></tr></table></figure><p>I have created <a href="https://github.com/bahmutov/todo-graphql-example/blob/master/cypress/integration/each-api-spec.js">each-api-spec.js</a> where we create each item one by one</p><figure class="highlight js"><figcaption><span>cypress/integration/each-api-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// adds &quot;describe.each&quot; and &quot;it.each&quot; helpers</span></span><br><span class="line"><span class="comment">// https://github.com/bahmutov/cypress-each</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-each&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; data &#125; <span class="keyword">from</span> <span class="string">&#x27;../fixtures/three.json&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; deleteAll &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Creates each item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  beforeEach(deleteAll)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  it.each(data.allTodos)(<span class="string">&#x27;creates an item&#x27;</span>, <span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// create the item using a network call</span></span><br><span class="line">    cy.request(&#123;</span><br><span class="line">      method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">      url: <span class="string">&#x27;http://localhost:3000/&#x27;</span>,</span><br><span class="line">      body: &#123;</span><br><span class="line">        operationName: <span class="string">&#x27;AddTodo&#x27;</span>,</span><br><span class="line">        query: <span class="string">`</span></span><br><span class="line"><span class="string">          mutation AddTodo($title: String!, $completed: Boolean!) &#123;</span></span><br><span class="line"><span class="string">            createTodo(title: $title, completed: $completed) &#123;</span></span><br><span class="line"><span class="string">              id</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">        variables: &#123;</span><br><span class="line">          title: item.title,</span><br><span class="line">          completed: item.completed,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// visit the page and check the item is present</span></span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> classAssertion = item.completed ? <span class="string">&#x27;have.class&#x27;</span> : <span class="string">&#x27;not.have.class&#x27;</span></span><br><span class="line">    cy.contains(<span class="string">&#x27;.todo&#x27;</span>, item.title).should(classAssertion, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The tests pass</p><p><img src="../images/cypress-each/pass.png" alt="Passing tests"></p><p>We need a better title for each test. Currently we pass an object into the callback, but we really want to use the title property to name the test. Let&#39;s extract it and keep next to the object. Let&#39;s look the helper methods from Lodash bundled with Cypress to create pairs of values to be passed to <code>it.each</code> callback. The first value will be the title from the object, the second will be the object itself.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> titles = Cypress._.map(data.allTodos, <span class="string">&#x27;title&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> items = Cypress._.zip(titles, data.allTodos)</span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line">it.each(items)(<span class="string">&#x27;creates an item &quot;%s&quot;&#x27;</span>, <span class="function">(<span class="params">title, item</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-each/titles.png" alt="Using the title property to name the test"></p><p>Much better.</p><h2><span id="api-tests">Api tests</span></h2><p>We are using the <a href="https://on.cypress.io/request">cy.request</a> command to execute the HTTP request. Let&#39;s use the wrapper provided by <code>@bahmutov/cy-api</code> plugin to make the same request, but output the request and response to the browser. This will make understanding the tests much simpler, especially as they run on CI. All we need to do is to replace <code>cy.request</code> with <code>cy.api</code> command</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// adds the &quot;cy.api&quot; command</span></span><br><span class="line"><span class="comment">// https://github.com/bahmutov/cy-api</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@bahmutov/cy-api/support&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> titles = Cypress._.map(data.allTodos, <span class="string">&#x27;title&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> items = Cypress._.zip(titles, data.allTodos)</span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line">it.each(items)(<span class="string">&#x27;creates an item &quot;%s&quot;&#x27;</span>, <span class="function">(<span class="params">title, item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// create the item using a network call</span></span><br><span class="line">  cy.api(&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>To better see the request and the response, let&#39;s <a href="/blog/visit-blank-page-between-tests/" title="Visit The Blank Page Between Cypress Tests">Visit The Blank Page Between Cypress Tests</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// visit the blank page</span></span><br><span class="line">  <span class="comment">// to better see the API requests and responses</span></span><br><span class="line">  cy.window().then(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">    win.location.href = <span class="string">&#x27;about:blank&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Now we should see each request going to the server, before visiting the page shows the web application. We can inspect the results by hovering over the &quot;API&quot; command.</p><p><img src="../images/cypress-each/api.gif" alt="Inspecting the HTTP request fired using the cy.api command"></p><p>Nice.</p><h2><span id="update-1-iteach-example">Update 1: it.each example</span></h2><p>Recently, I have recorded a video showing how to create multiple separate tests using <code>it.each</code> where each test checks if a particular selector is valid. Find the video at <a href="https://youtu.be/utPKRV_fL1E">https://youtu.be/utPKRV_fL1E</a> or watch it below.</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/utPKRV_fL1E" title="Using cypress-each To Create Separate Tests" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/refactor-using-each/" title="Refactor Tests To Be Independent And Fast Using Cypress-Each Plugin">Refactor Tests To Be Independent And Fast Using Cypress-Each Plugin</a></li><li><a href="/blog/dynamic-tests-from-fixture/" title="Dynamic Tests From Cypress Fixture">Dynamic Tests From Cypress Fixture</a></li><li><a href="https://www.cypress.io/blog/2017/11/07/add-gui-to-your-e2e-api-tests/">Add GUI to your E2E API tests</a></li><li><a href="https://github.com/bahmutov/cypress-each">cypress-each</a></li><li><a href="https://github.com/bahmutov/cy-api">cy-api</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently a friend of mine Murat Ozcan has asked me about using Cypress for performing API tests. Murat always goes straight to the source
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress And TestRail</title>
    <link href="https://glebbahmutov.com/blog/cypress-and-testrail/"/>
    <id>https://glebbahmutov.com/blog/cypress-and-testrail/</id>
    <published>2021-10-11T04:00:00.000Z</published>
    <updated>2022-01-14T02:12:28.650Z</updated>
    
    <content type="html"><![CDATA[<p>If your organization is using TestRail to manage test cases and collect all test results in one place, you might need to upload the Cypress test results too. The existing plugin <a href="https://github.com/Vivify-Ideas/cypress-testrail-reporter">cypress-testrail-reporter</a> I found that plugin to be broken in a variety of ways, and it does not support uploading test from parallel test runs. Thus I wrote my own plugin called <a href="https://github.com/bahmutov/cypress-testrail-simple">cypress-testrail-simple</a> which supports TestRail when Cypress runs in parallel mode. This blog post teaches you how to use the <code>cypress-testrail-simple</code> plugin with GitHub Actions and CircleCI workflows.</p><!-- toc --><ul><li><a href="#testrail-project">TestRail project</a><ul><li><a href="#test-cases">Test cases</a></li><li><a href="#authentication">Authentication</a></li><li><a href="#create-a-test-run">Create a test run</a></li><li><a href="#reporting-test-results">Reporting test results</a></li><li><a href="#closing-the-test-run">Closing the test run</a></li></ul></li><li><a href="#cypress-testrail-simple">cypress-testrail-simple</a></li><li><a href="#github-actions">GitHub Actions</a><ul><li><a href="#github-actions-workflow-explained">GitHub Actions workflow explained</a></li></ul></li><li><a href="#circleci">CircleCI</a><ul><li><a href="#circleci-workflow-explanation">CircleCI workflow explanation</a></li></ul></li><li><a href="#update-1-pick-the-test-cases-from-spec-files">Update 1: pick the test cases from spec files</a></li></ul><!-- tocstop --><h2><span id="testrail-project">TestRail project</span></h2><p>To demo the TestRail and Cypress work, I have created a new repository <a href="https://github.com/bahmutov/test-rail-example">bahmutov/test-rail-example</a> and a new TestRail project also named &quot;test-rail-example&quot;.</p><p><img src="../images/cypress-and-testrail/project.png" alt="TestRail project"></p><p>Note my server TestRail URL is &quot;<a href="https://bahmutov.testrail.io&quot;">https://bahmutov.testrail.io&quot;</a>, and my project ID is 2. The prefix &quot;P&quot; is just for show.</p><h3><span id="test-cases">Test cases</span></h3><p>Before sending test results, we need to create test cases in our project. I have created 3 test cases shown in the list.</p><p><img src="../images/cypress-and-testrail/test-cases.png" alt="Test cases"></p><p>Note: TestRail project keeps incrementing the ID shared between the test results and the test cases across all projects for the same account. Thus creating three test cases in a row gave them IDs <code>C110</code>, <code>C111</code>, and <code>C112</code> because I already had a vew test runs in the other projects. The <code>C</code> prefix is just for the viewers, when we update a test case via API calls we will use the numeric part, like 110, 111, and 112.</p><h3><span id="authentication">Authentication</span></h3><p>To create new test runs, and post test results via API calls, we need to authenticate. We could authenticate using the username (the email) and the password, but a better strategy is for the user to create an API key. The site administrator has to enable API authentication first, before create the first key.</p><p><img src="../images/cypress-and-testrail/api-key.png" alt="API key"></p><h3><span id="create-a-test-run">Create a test run</span></h3><p>Typically, we would do the following to send the test results to TestRail</p><ul><li>create a new test run</li><li>post test results for the run</li><li>close the test run</li></ul><p>Here is the first step: creating a new test run for a project &quot;2&quot; using an API call.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;Content-Type: application&#x2F;json&quot; \</span><br><span class="line">  -u &#39;&lt;username email&gt;:&lt;API key&gt;&#39; \</span><br><span class="line">  --request POST \</span><br><span class="line">  --data &#39;&#123;&quot;name&quot;:&quot;test run 1&quot;,&quot;description&quot;:&quot;testing...&quot;&#125;&#39; \</span><br><span class="line">  &quot;https:&#x2F;&#x2F;bahmutov.testrail.com&#x2F;index.php?&#x2F;api&#x2F;v2&#x2F;add_run&#x2F;2&quot;</span><br></pre></td></tr></table></figure><p>Tip: see the TestRail API docs <a href="https://www.gurock.com/testrail/docs/api/reference/">here</a></p><p>The call returns a JSON object with the new test run&#39;s ID. All existing test cases will be included in the test run and will have the status &quot;untested&quot;.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -H ...</span><br><span class="line"></span><br><span class="line">&#123;&quot;id&quot;:57,&quot;suite_id&quot;:46,&quot;name&quot;:&quot;test run 1&quot; ...&#125;</span><br></pre></td></tr></table></figure><p>The test run 57 has 3 test results to be reported.</p><p><img src="../images/cypress-and-testrail/test-run.png" alt="New test run"></p><h3><span id="reporting-test-results">Reporting test results</span></h3><p>We can report the test results by making API calls. For example, let&#39;s report all 3 test results at once as passing.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;Content-Type: application&#x2F;json&quot; \</span><br><span class="line">  -u &#39;&lt;username email&gt;:&lt;API key&gt;&#39; \</span><br><span class="line">  --request POST \</span><br><span class="line">  --data &#39;&#123;&quot;results&quot;:[&#123;&quot;case_id&quot;:110,&quot;status_id&quot;:1&#125;,</span><br><span class="line">    &#123;&quot;case_id&quot;:111,&quot;status_id&quot;:1&#125;,</span><br><span class="line">    &#123;&quot;case_id&quot;:112,&quot;status_id&quot;:1&#125;]&#125;&#39; \</span><br><span class="line">  &quot;https:&#x2F;&#x2F;bahmutov.testrail.com&#x2F;index.php?&#x2F;api&#x2F;v2&#x2F;add_results_for_cases&#x2F;57&quot;</span><br></pre></td></tr></table></figure><p>The TestRail Dashboard shows the passed test results, but the run is still open.</p><p><img src="../images/cypress-and-testrail/passed.png" alt="Test results"></p><h3><span id="closing-the-test-run">Closing the test run</span></h3><p>All test results for the known test cases are in. We can fetch the test run stats to see them:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;Content-Type: application&#x2F;json&quot; \</span><br><span class="line">  -u &#39;&lt;username email&gt;:&lt;API key&gt;&#39; \</span><br><span class="line">  --request GET \</span><br><span class="line">  &quot;https:&#x2F;&#x2F;bahmutov.testrail.com&#x2F;index.php?&#x2F;api&#x2F;v2&#x2F;get_run&#x2F;57&quot;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;:57,</span><br><span class="line">  &quot;name&quot;:&quot;test run 1&quot;,</span><br><span class="line">  &quot;description&quot;:&quot;testing...&quot;,</span><br><span class="line">  &quot;is_completed&quot;:false,</span><br><span class="line">  &quot;passed_count&quot;:3,</span><br><span class="line">  &quot;blocked_count&quot;:0,</span><br><span class="line">  &quot;untested_count&quot;:0,</span><br><span class="line">  &quot;retest_count&quot;:0,</span><br><span class="line">  &quot;failed_count&quot;:0</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The properties &quot;is_completed:false&quot; and &quot;untested_count:0&quot; tells us all the test results are in, and we could close the test run.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;Content-Type: application&#x2F;json&quot; \</span><br><span class="line">  -u &#39;&lt;username email&gt;:&lt;API key&gt;&#39; \</span><br><span class="line">  --request POST \</span><br><span class="line">  &quot;https:&#x2F;&#x2F;bahmutov.testrail.com&#x2F;index.php?&#x2F;api&#x2F;v2&#x2F;close_run&#x2F;57&quot;</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-and-testrail/closed.png" alt="Closed test run"></p><h2><span id="cypress-testrail-simple">cypress-testrail-simple</span></h2><p>Now let&#39;s start the new run, report the results, and close the run using GitHub Action workflow. We will report the results from the Cypress tests and perform these operations using the <a href="https://github.com/bahmutov/cypress-testrail-simple">cypress-testrail-simple</a> plugin. First, we need to install it.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress-testrail-simple</span><br></pre></td></tr></table></figure><p>The API calls from the Cypress Test Runner will be made from the plugin file. Thus add to your plugin file the following plugin registration line:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cypress/plugins/index.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://github.com/bahmutov/cypress-testrail-simple</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;cypress-testrail-simple/src/plugin&#x27;</span>)(on, config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>🎁 You can find the complete project at <a href="https://github.com/bahmutov/test-rail-example">bahmutov/test-rail-example</a></p></blockquote><h2><span id="github-actions">GitHub Actions</span></h2><p>Let&#39;s first run and report our test results using GitHub Actions workflow using the official <a href="https://github.com/cypress-io/github-action">Cypress GH Action</a>. Here is the workflow file <a href="https://github.com/bahmutov/test-rail-example/blob/main/.github/workflows/ci.yml">.github/workflows/ci.yml</a></p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">tests:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="comment"># pass TestRail settings from the project secrets</span></span><br><span class="line">      <span class="comment"># via environment variables</span></span><br><span class="line">      <span class="attr">TESTRAIL_HOST:</span> <span class="string">$&#123;&#123;secrets.TESTRAIL_HOST&#125;&#125;</span></span><br><span class="line">      <span class="attr">TESTRAIL_USERNAME:</span> <span class="string">$&#123;&#123;secrets.TESTRAIL_USERNAME&#125;&#125;</span></span><br><span class="line">      <span class="attr">TESTRAIL_PASSWORD:</span> <span class="string">$&#123;&#123;secrets.TESTRAIL_PASSWORD&#125;&#125;</span></span><br><span class="line">      <span class="comment"># the project ID is not that secret</span></span><br><span class="line">      <span class="attr">TESTRAIL_PROJECTID:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Install NPM dependencies, cache them correctly</span></span><br><span class="line">      <span class="comment"># do not run tests though - we need to add the TestRail run first</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">📦</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">runTests:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># you can pass GitHub information in the name and description</span></span><br><span class="line">      <span class="comment"># to include in the TestRail run information</span></span><br><span class="line">      <span class="comment"># https://docs.github.com/en/actions/learn-github-actions/contexts</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Start</span> <span class="string">TestRail</span> <span class="string">Run</span> <span class="string">🏃🏻‍♂️</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">testRail</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">commitSubject=&quot;$&#123;&#123;</span> <span class="string">github.event.commits[0].message</span> <span class="string">&#125;&#125;&quot;</span></span><br><span class="line">          <span class="string">runName=&quot;Testing</span> <span class="attr">on GitHub Actions:</span> <span class="string">$&#123;commitSubject&#125;&quot;</span></span><br><span class="line">          <span class="string">runDescription=&quot;Cypress</span> <span class="string">tests</span> <span class="string">for</span> <span class="string">commit</span> <span class="string">$&#123;GITHUB_SHA&#125;</span> <span class="string">$&#123;GITHUB_REF&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="string">echo</span> <span class="string">$&#123;commitSubject&#125;</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">$&#123;runName&#125;</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">$&#123;runDescription&#125;</span></span><br><span class="line"></span><br><span class="line">          <span class="string">runId=$(npx</span> <span class="string">testrail-start-run</span> <span class="string">&quot;$&#123;runName&#125;&quot;</span> <span class="string">&quot;$&#123;runDescription&#125;&quot;</span><span class="string">)</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;TestRail run id $&#123;runId&#125;&quot;</span></span><br><span class="line">          <span class="comment"># save the run ID as the output from this step</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;::set-output name=runId::$&#123;runId&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Now run the Cypress tests, and the cypress-testrail-simple</span></span><br><span class="line">      <span class="comment"># plugin will automatically add the results to TestRail</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">install-command:</span> <span class="string">echo</span> <span class="string">&quot;Already installed&quot;</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="comment"># pass the run ID from the previous step via an env variable</span></span><br><span class="line">          <span class="attr">TESTRAIL_RUN_ID:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.testRail.outputs.runId</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Close</span> <span class="string">TestRail</span> <span class="string">Run</span> <span class="string">🏁</span></span><br><span class="line">        <span class="comment"># always close the test run, even if the previous steps have failed</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">always()</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npx</span> <span class="string">testrail-close-run</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.testRail.outputs.runId</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><ul><li>we install all dependencies using <code>cypress-io/github-action</code> without running the tests</li><li>we create a new TestRail run using a script included with <code>cypress-testrail-simple</code></li><li>the script command <code>runId=$(npx testrail-start-run ...)</code> returns the id of the created test run</li><li>we pass the test run to the plugin while running the Cypress tests as an environment variable via GitHub expression syntax <code>TESTRAIL_RUN_ID: $&#123;&#123; steps.testRail.outputs.runId &#125;&#125;</code></li><li>after the tests complete, we close the test run using the included script <code>npx testrail-close-run $&#123;&#123; steps.testRail.outputs.runId &#125;&#125;</code>. Note the important detail: we always call the close the run command, since the previous step running the Cypress tests might have failed.</li></ul><p>To pass the TestRail settings to the plugin, we use repo secrets and environment variables.</p><p><img src="../images/cypress-and-testrail/secrets.png" alt="Repo secrets"></p><p><strong>Tip:</strong> you can print verbose log messages from the <code>cypress-testrail-simple</code> plugin by running with an environment variable <code>DEBUG=cypress-testrail-simple</code>, see the <a href="https://github.com/bahmutov/cypress-testrail-simple#debugging">Debugging section</a></p><h3><span id="github-actions-workflow-explained">GitHub Actions workflow explained</span></h3><p>When the test runs, the new run with ID <code>60</code> is started. I used the commit message and SHA in the run&#39;s name and description by grabbing them from the GitHub environment variables</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">commitSubject&#x3D;&quot;$&#123;&#123; github.event.commits[0].message &#125;&#125;&quot;</span><br><span class="line">runName&#x3D;&quot;Testing on GitHub Actions: $&#123;commitSubject&#125;&quot;</span><br><span class="line">runDescription&#x3D;&quot;Cypress tests for commit $&#123;GITHUB_SHA&#125; $&#123;GITHUB_REF&#125;&quot;</span><br><span class="line">runId&#x3D;$(npx testrail-start-run &quot;$&#123;runName&#125;&quot; &quot;$&#123;runDescription&#125;&quot;)</span><br><span class="line">echo &quot;TestRail run id $&#123;runId&#125;&quot;</span><br></pre></td></tr></table></figure><p>We can see the output on GitHub</p><p><img src="../images/cypress-and-testrail/start-run.png" alt="Started run 60"></p><p>The Cypress plugin uses <code>after:spec</code> event hook to send the test results for tests with <code>C\d+</code> pattern in their names. You can see the found tests in the terminal output:</p><p><img src="../images/cypress-and-testrail/found-tests.png" alt="Test cases found in the first spec"></p><p>The <a href="/blog/cypress-test-statuses/" title="Cypress Test Statuses">Cypress Test Statuses</a> are mapped to TestRail test status numbers. For example, the passed tests are send using <code>status_id: 1</code>.</p><p>After all tests are finished (assuming they ran on a single test container), we need to close the test run. We can use another script that comes with the <code>cypress-testrail-simple</code> plugin. We grab the run ID value from the output of the previous step that created the new run.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Close</span> <span class="string">TestRail</span> <span class="string">Run</span> <span class="string">🏁</span></span><br><span class="line">  <span class="comment"># always close the test run, even if the previous steps have failed</span></span><br><span class="line">  <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">always()</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">npx</span> <span class="string">testrail-close-run</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.testRail.outputs.runId</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>Beautiful. The API call to close the run returns the final run stats, which are printed.</p><p><img src="../images/cypress-and-testrail/close-run.png" alt="Closed the TestRail run"></p><h2><span id="circleci">CircleCI</span></h2><p>Let&#39;s run our project on CircleCI using the official <a href="https://github.com/cypress-io/circleci-orb">cypress-io/circelci-orb</a>. We want to run the <a href="https://on.cypress.io/parallelize">tests in parallel</a>, thus we need to set up the test recording on <a href="https://on.cypress.io/dashboard-introduction">Cypress Dashboard</a>. Next, we set up a new project on CircleCI and set the TestRail values using the environment variables. To simplify the setup, I am passing the <code>TESTRAIL_PROJECTID: 2</code> as an environment variable.</p><p><img src="../images/cypress-and-testrail/circleci-env.png" alt="CircleCI environment variable: TestRail + Cypress Dashboard recording key"></p><p>Here is our complete <a href="https://github.com/bahmutov/test-rail-example/blob/main/.circleci/config.yml">.circleci/config.yml</a> file</p><figure class="highlight yml"><figcaption><span>.circleci/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="comment"># https://github.com/cypress-io/circleci-orb</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setting environment variables on CircleCI</span></span><br><span class="line"><span class="comment"># https://circleci.com/docs/2.0/env-vars/</span></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="comment"># every testing job needs to install dependencies and Cypress</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/install:</span></span><br><span class="line">          <span class="comment"># instead of building the application</span></span><br><span class="line">          <span class="comment"># or in addition to it, start a new TestRail run</span></span><br><span class="line">          <span class="comment"># and save the run ID in a text file - it will be passed</span></span><br><span class="line">          <span class="comment"># to other CircleCI jobs via workspace together with the other files</span></span><br><span class="line">          <span class="attr">build:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">runId=$(npx</span> <span class="string">testrail-start-run</span> <span class="string">\</span></span><br><span class="line">              <span class="string">&quot;Testing on Circle workflow $&#123;CIRCLE_WORKFLOW_ID&#125;&quot;</span> <span class="string">\</span></span><br><span class="line">              <span class="string">&quot;Cypress tests on CircleCI $&#123;CIRCLE_BUILD_URL&#125;&quot;</span><span class="string">)</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;TestRail run id $&#123;runId&#125;&quot;</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">$&#123;runId&#125;</span> <span class="string">&gt;</span> <span class="string">runId.txt</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;Saved file runId.txt&quot;</span></span><br><span class="line">            <span class="string">cat</span> <span class="string">runId.txt</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># cypress-testrail-simple automatically tries to read</span></span><br><span class="line">      <span class="comment"># the TestRail run ID from the file runId.txt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">requires:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">cypress/install</span></span><br><span class="line">          <span class="comment"># install-command: echo &#x27;Nothing to install in this job&#x27;</span></span><br><span class="line">          <span class="comment"># print the file with the TestRail run ID</span></span><br><span class="line">          <span class="attr">install-command:</span> <span class="string">ls</span> <span class="string">-la</span> <span class="string">&amp;&amp;</span> <span class="string">cat</span> <span class="string">runId.txt</span></span><br><span class="line">          <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">parallel:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">parallelism:</span> <span class="number">2</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">CircleCI</span></span><br><span class="line">          <span class="comment"># Try to close the TestRail run using job&#x27;s post-steps</span></span><br><span class="line">          <span class="comment"># https://circleci.com/docs/2.0/configuration-reference/</span></span><br><span class="line">          <span class="comment"># Note that the close script first checks if there are any</span></span><br><span class="line">          <span class="comment"># remaining untested cases. Only when the untested count is 0</span></span><br><span class="line">          <span class="comment"># then the TestRail run is closed.</span></span><br><span class="line">          <span class="attr">post-steps:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">Close</span> <span class="string">TestRail</span> <span class="string">Run</span></span><br><span class="line">                <span class="attr">when:</span> <span class="string">always</span></span><br><span class="line">                <span class="attr">command:</span> <span class="string">npx</span> <span class="string">testrail-close-run</span></span><br></pre></td></tr></table></figure><h3><span id="circleci-workflow-explanation">CircleCI workflow explanation</span></h3><p>When running on CircleCI we will install the dependencies using a single <code>cypress/install</code> job, then we will run the tests using several copies of the <code>cypress/run</code> job. The install job will start the new TestRail run, but we have a problem - CircleCI does not have a mechanism similar to the GitHub Actions for passing a value from one step to another one. Thus, we will simply write the created run ID into a file. That file will be included with all other files installed by the Install job in the workspace. That workspace is passed to the <code>cypress/run</code> jobs automatically. The <code>cypress-testrail-simple</code> plugin automatically reads the test run ID from the environment variable and from the file <code>runID.txt</code>.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># every testing job needs to install dependencies and Cypress</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cypress/install:</span></span><br><span class="line">    <span class="comment"># instead of building the application</span></span><br><span class="line">    <span class="comment"># or in addition to it, start a new TestRail run</span></span><br><span class="line">    <span class="comment"># and save the run ID in a text file - it will be passed</span></span><br><span class="line">    <span class="comment"># to other CircleCI jobs via workspace together with the other files</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">runId=$(npx</span> <span class="string">testrail-start-run</span> <span class="string">\</span></span><br><span class="line">        <span class="string">&quot;Testing on Circle workflow $&#123;CIRCLE_WORKFLOW_ID&#125;&quot;</span> <span class="string">\</span></span><br><span class="line">        <span class="string">&quot;Cypress tests on CircleCI $&#123;CIRCLE_BUILD_URL&#125;&quot;</span><span class="string">)</span></span><br><span class="line">      <span class="string">echo</span> <span class="string">&quot;TestRail run id $&#123;runId&#125;&quot;</span></span><br><span class="line">      <span class="string">echo</span> <span class="string">$&#123;runId&#125;</span> <span class="string">&gt;</span> <span class="string">runId.txt</span></span><br><span class="line">      <span class="string">echo</span> <span class="string">&quot;Saved file runId.txt&quot;</span></span><br><span class="line">      <span class="string">cat</span> <span class="string">runId.txt</span></span><br></pre></td></tr></table></figure><p>The run containers all use workspace, and <em>each</em> call &quot;close the TestRail run&quot; at the end. The script <code>npx testrail-close-run</code> is fine to run multiple times. It first checks if the test run has been closed already (maybe another test job has finished first). If the test run is still open, it checks how many test cases are in the status <code>untested</code> by checking the <code>untested_count</code> value. If all test cases have some result (passed or failed), then the test run can be closed.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cypress-testrail-simple automatically tries to read</span></span><br><span class="line"><span class="comment"># the TestRail run ID from the file runId.txt</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">    <span class="attr">requires:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cypress/install</span></span><br><span class="line">    <span class="comment"># install-command: echo &#x27;Nothing to install in this job&#x27;</span></span><br><span class="line">    <span class="comment"># print the file with the TestRail run ID</span></span><br><span class="line">    <span class="attr">install-command:</span> <span class="string">ls</span> <span class="string">-la</span> <span class="string">&amp;&amp;</span> <span class="string">cat</span> <span class="string">runId.txt</span></span><br><span class="line">    <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">parallel:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">parallelism:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">CircleCI</span></span><br><span class="line">    <span class="comment"># Try to close the TestRail run using job&#x27;s post-steps</span></span><br><span class="line">    <span class="comment"># https://circleci.com/docs/2.0/configuration-reference/</span></span><br><span class="line">    <span class="comment"># Note that the close script first checks if there are any</span></span><br><span class="line">    <span class="comment"># remaining untested cases. Only when the untested count is 0</span></span><br><span class="line">    <span class="comment"># then the TestRail run is closed.</span></span><br><span class="line">    <span class="attr">post-steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Close</span> <span class="string">TestRail</span> <span class="string">Run</span></span><br><span class="line">          <span class="attr">when:</span> <span class="string">always</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">npx</span> <span class="string">testrail-close-run</span></span><br></pre></td></tr></table></figure><p>I think the above model of passing the test run ID and closing the run is flexible enough to satisfy most needs. If you do find something not working, or missing, please open an issue at <a href="https://github.com/bahmutov/cypress-testrail-simple">bahmutov/cypress-testrail-simple</a>.</p><h2><span id="update-1-pick-the-test-cases-from-spec-files">Update 1: pick the test cases from spec files</span></h2><p>Sometimes you want to run a subset of the tests, or the TestRail project might have only some of the test cases automated using Cypress (and the rest could be manual, or automated using another tool). By default, a new test run includes all test cases. You can limit the test cases in a run using the <code>--spec</code> option when starting a new test run. For example, let&#39;s run just the user tests from the <code>cypress/integration/user-tests.js</code> spec file:</p><figure class="highlight js"><figcaption><span>cypress/integration/user-tests.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;User tests&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;C111 User can log in&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.wait(<span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;C112 User can log out&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.log(<span class="string">&#x27;in the last test!&#x27;</span>)</span><br><span class="line">    cy.wait(<span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Each test title has its <code>C\d+</code> case number. When starting a new test run, we can tell the script to look through the file source code, find these 2 test case IDs and create a test run using <em>only</em> those test cases.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx testrail-start-run --spec &quot;cypress&#x2F;integration&#x2F;user-tests.js&quot;</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> the <code>--spec</code> allows glob parameters, thus you can pick multiple test files.</p><p>The test run will be closed when the two test case results are reported.</p><p><img src="../images/cypress-and-testrail/user-tests.png" alt="Test run with user tests only"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If your organization is using TestRail to manage test cases and collect all test results in one place, you might need to upload the Cypre
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
</feed>
