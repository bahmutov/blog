<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Better world by better software</title>
  
  <subtitle>Gleb Bahmutov PhD</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://glebbahmutov.com/blog/"/>
  <updated>2022-03-09T22:06:32.707Z</updated>
  <id>https://glebbahmutov.com/blog/</id>
  
  <author>
    <name>Gleb Bahmutov</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Code Coverage For Nextjs Application</title>
    <link href="https://glebbahmutov.com/blog/code-coverage-for-nextjs-app/"/>
    <id>https://glebbahmutov.com/blog/code-coverage-for-nextjs-app/</id>
    <published>2022-03-09T05:00:00.000Z</published>
    <updated>2022-03-09T22:06:32.707Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="pullquote"><p>📦 you can find the source code for this blog post in the repository <a href="https://github.com/bahmutov/next-ts-app">bahmutov/next-ts-app</a> and the deployed application at <a href="https://next-ts-app-swart.vercel.app/">https://next-ts-app-swart.vercel.app/</a>. You can find the tests in the separate repo <a href="https://github.com/bahmutov/next-ts-app-tests">bahmutov/next-ts-app-tests</a>.</p></blockquote><!-- toc --><ul><li><a href="#the-application">The application</a></li><li><a href="#instrument-when-necessary">Instrument when necessary</a></li><li><a href="#cypress-tests-with-code-coverage-report">Cypress tests with code coverage report</a></li><li><a href="#deployment-and-testing">Deployment and testing</a></li><li><a href="#tests-in-a-separate-repo">Tests in a separate repo</a><ul><li><a href="#cloning-the-app-repo-into-the-tests-repo">Cloning the app repo into the tests repo</a></li><li><a href="#fetching-the-right-application-source-code">Fetching the right application source code</a></li></ul></li><li><a href="#see-more">See more</a></li></ul><!-- tocstop --><h2><span id="the-application">The application</span></h2><p>I have scaffolded the Next.js application using the recommended command</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-next-app@latest --typescript</span><br><span class="line">+ next@12.1.0</span><br></pre></td></tr></table></figure><p>There are two modes for running the application: the dev and the prod. I would like to instrument the application in both modes. Thus I have added the following <code>.babelrc</code> file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;next&#x2F;babel&quot;],</span><br><span class="line">  &quot;plugins&quot;: [&quot;istanbul&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I have installed the <code>babel-plugin-istanbul@6</code> NPM module and if everything works, then starting <code>npm run dev</code> and opening <code>localhost:3000</code> shows the code coverage counters under <code>window.__coverage__</code> object</p><p><img src="../images/cc-for-nextjs/local.png" alt="Code was instrumented successfully"></p><h2><span id="instrument-when-necessary">Instrument when necessary</span></h2><p>We want to instrument the app when necessary, thus the simplest way is to look at an environment variable. I have renamed the <code>.babelrc</code> file into <code>.babelrc.js</code> file to include the Istanbul plugin only when the environment variable <code>INSTRUMENT_CODE</code> is present.</p><figure class="highlight js"><figcaption><span>.babelrc.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shouldInstrumentCode = <span class="string">&#x27;INSTRUMENT_CODE&#x27;</span> <span class="keyword">in</span> process.env</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;shouldInstrumentCode&#x27;</span>, shouldInstrumentCode)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>: [<span class="string">&quot;next/babel&quot;</span>],</span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>: shouldInstrumentCode ? [<span class="string">&quot;istanbul&quot;</span>] : []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">module</span>.exports, &#123;<span class="attr">depth</span>: <span class="literal">null</span>&#125;)</span><br></pre></td></tr></table></figure><p>I am using Vercel to run the application, and I set this variable to have the code coverage counters present in the deployed code.</p><p><img src="../images/cc-for-nextjs/var.png" alt="Set the INSTRUMENT_CODE variable to instrument the build on Vercel"></p><p><strong>Note:</strong> code coverage can add some overhead to the production application, so decide if it is worth it. You can still instrument the dev builds and run the end-to-end tests to collect the code coverage, while keeping the production build lean.</p><p><strong>Tip:</strong> to make sure the instrumentation really regenerates the bundles, delete the <code>.next</code> folder before running. In my <a href="https://github.com/bahmutov/next-ts-app/blob/main/package.json">package.json</a> I have the following scripts for running locally</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;next dev&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;next build&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;next start&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;predev:instrumented&quot;</span>: <span class="string">&quot;rm -rf .nyc_output coverage .next&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dev:instrumented&quot;</span>: <span class="string">&quot;INSTRUMENT_CODE=1 next dev&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Locally I use <code>npm run dev:instrumented</code> to launch the instrumented application.</p><h2><span id="cypress-tests-with-code-coverage-report">Cypress tests with code coverage report</span></h2><p>Let&#39;s install Cypress test runner and its <a href="https://github.com/cypress-io/code-coverage">code coverage plugin</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress @cypress&#x2F;code-coverage</span><br><span class="line">+ cypress@9.5.1</span><br><span class="line">+ @cypress&#x2F;code-coverage@3.9.12</span><br></pre></td></tr></table></figure><p>I have registered the code coverage report in the plugins file</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// `on` is used to hook into various events Cypress emits</span></span><br><span class="line">  <span class="comment">// `config` is the resolved Cypress config</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;@cypress/code-coverage/task&#x27;</span>)(on, config)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and loaded the plugin from the support file</p><figure class="highlight js"><figcaption><span>cypress/support/index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@cypress/code-coverage/support&#x27;</span></span><br></pre></td></tr></table></figure><p>My test is simple: just visiting the site defined in the <code>cypress.json</code> as <code>baseUrl: http://localhost:3000</code></p><figure class="highlight ts"><figcaption><span>cypress/integration/spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;loads the home page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>In the Cypress Command Log I see the code coverage report messages.</p><p><img src="../images/cc-for-nextjs/messages.png" alt="The code coverage plugin logs its messages"></p><p>If you are not sure where the generated report is saved, open the DevTools console and click on the last message. It shows the report was written in the &quot;coverage&quot; folder.</p><p><img src="../images/cc-for-nextjs/report-path.png" alt="We should look for the coverage report in the coverage folder"></p><p>There are coverage reports in various formats</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ls -la coverage</span><br><span class="line">total 32</span><br><span class="line">drwxr-xr-x   7 glebbahmutov  staff   224 Mar  8 15:05 .</span><br><span class="line">drwxr-xr-x  21 glebbahmutov  staff   672 Mar  8 15:29 ..</span><br><span class="line">-rw-r--r--   1 glebbahmutov  staff  1022 Mar  8 16:55 clover.xml</span><br><span class="line">-rw-r--r--   1 glebbahmutov  staff  1394 Mar  8 16:55 coverage-final.json</span><br><span class="line">-rw-r--r--   1 glebbahmutov  staff   883 Mar  8 16:55 coverage-summary.json</span><br><span class="line">drwxr-xr-x  12 glebbahmutov  staff   384 Mar  8 15:05 lcov-report</span><br><span class="line">-rw-r--r--   1 glebbahmutov  staff   256 Mar  8 16:55 lcov.info</span><br></pre></td></tr></table></figure><p>I am interested in the HTML report showing code coverage on top of the source files.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ open coverage&#x2F;lcov-report&#x2F;index.html</span><br></pre></td></tr></table></figure><p>The top level report shows 75% of all instrumented statements executed by the <code>cy.visit(&#39;/&#39;)</code> command.</p><p><img src="../images/cc-for-nextjs/report1.png" alt="The top level report shows coverage by file"></p><p>We can click on the filename to see the individual coverage report</p><p><img src="../images/cc-for-nextjs/report2.png" alt="The function &quot;add&quot; was never called by the application"></p><h2><span id="deployment-and-testing">Deployment and testing</span></h2><p>I have set up my Next.js application to deploy on Vercel. You can find the production version of the application at <a href="https://next-ts-app-swart.vercel.app/">https://next-ts-app-swart.vercel.app/</a>. The <code>INSTRUMENT_CODE</code> environment variable is set during the Vercel build, thus you can see the code coverage object if you open the DevTools.</p><p><img src="../images/cc-for-nextjs/deployed-cc.png" alt="The deployed production code has the code coverage object"></p><p>Take a look that the source paths in the code coverage object in the deployed production application (marked with an orange arrow). The source paths are different from the source paths to the files when running locally. Let&#39;s run the tests to see if we can correctly generate the test coverage report from this coverage object. I will open Cypress test runner pointing at the deployed URL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ CYPRESS_baseUrl&#x3D;https:&#x2F;&#x2F;next-ts-app-swart.vercel.app&#x2F; npx cypress open</span><br></pre></td></tr></table></figure><p>The tests finish and generate the code coverage report.</p><p><img src="../images/cc-for-nextjs/prod.png" alt="The E2E test visited the production site"></p><p>The code coverage plugin has successfully mapped the production code paths to the local source files and generated the report</p><p><img src="../images/cc-for-nextjs/prod-report.png" alt="The code coverage report for the production app"></p><p>We can see the source code &quot;search&quot; and mapping from the production paths to the local application source paths by enabling the debug logs when starting Cypress</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ DEBUG&#x3D;code-coverage CYPRESS_baseUrl&#x3D;https:&#x2F;&#x2F;next-ts-app-swart.vercel.app&#x2F; npx cypress open</span><br></pre></td></tr></table></figure><p>The logs show how the plugin is looking for a parent folder so that all paths in the code coverage object map to the existing file paths.</p><p><img src="../images/cc-for-nextjs/paths.png" alt="The production source paths were mapped to the local source files"></p><p>To generate the report we need to code coverage information and the application source files.</p><h2><span id="tests-in-a-separate-repo">Tests in a separate repo</span></h2><p>In some situations, the tests live in a repository separate from the application. I have described such situation in the blog posts <a href="/blog/how-to-keep-cypress-tests-in-another-repo/" title="How to Keep Cypress Tests in Another Repo While Using GitHub Actions">How to Keep Cypress Tests in Another Repo While Using GitHub Actions</a> and <a href="/blog/how-to-keep-cypress-tests-in-another-repo-with-circleci/" title="How to Keep Cypress Tests in Another Repo While Using CircleCI">How to Keep Cypress Tests in Another Repo While Using CircleCI</a>. For this blog post, I have created repository <a href="https://github.com/bahmutov/next-ts-app-tests">bahmutov/next-ts-app-tests</a> with a copy of Cypress tests. We can run these tests against the deployed application</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ DEBUG&#x3D;code-coverage CYPRESS_baseUrl&#x3D;https:&#x2F;&#x2F;next-ts-app-swart.vercel.app&#x2F; npx cypress open</span><br></pre></td></tr></table></figure><p>This time, the code coverage cannot be mapped to the source files, since there are no local files to find</p><p><img src="../images/cc-for-nextjs/cannot-find-files.png" alt="The code coverage plugin could not find source files referenced in the coverage object"></p><p>The plugin has still generated the overall report, but you cannot drill down into the individual source file reports</p><p><img src="../images/cc-for-nextjs/no-files-report.gif" alt="Without the source files, you cannot see the code coverage report per file"></p><p>If we copy just the <code>pages</code> folder from the <a href="https://github.com/bahmutov/next-ts-app/tree/main/pages">next-ts-app</a> into the &quot;next-ts-app-tests&quot; folder before running the Cypress tests, then it finds it and can generate the report.</p><p><strong>Tip:</strong> instead of copying the <code>pages</code> folder from the application&#39;s folder to the test folder, I create a symbolic link</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># assuming the following structure</span><br><span class="line">#   next-ts-app/</span><br><span class="line">#     the application with &quot;pages&quot; folder</span><br><span class="line">#   next-ts-app-tests/</span><br><span class="line">#     the folder with the tests</span><br><span class="line"># from the &quot;next-ts-app-tests&quot; folder call</span><br><span class="line">$ ln -s ../next-ts-app/pages</span><br></pre></td></tr></table></figure><p>Now the &quot;pages&quot; folder is linked to the tests folder</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ls -la</span><br><span class="line">...</span><br><span class="line">pages -&gt; ../next-ts-app/pages</span><br></pre></td></tr></table></figure><h3><span id="cloning-the-app-repo-into-the-tests-repo">Cloning the app repo into the tests repo</span></h3><p>Let&#39;s give our tests the application&#39;s source code so it can generate the file code coverage reports. I will use <a href="/blog/trying-github-actions/" title="GitHub Actions">GitHub Actions</a> to checkout out both repos and copy the &quot;pages&quot; folder from the application folder into the tests folder.</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># https://github.com/actions/checkout</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">this</span> <span class="string">repo</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">the</span> <span class="string">application</span> <span class="string">repo</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">bahmutov/next-ts-app</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">next-ts-app</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># help the code coverage tool find the source files</span></span><br><span class="line">      <span class="comment"># can also move or link the source files</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Copy</span> <span class="string">application</span> <span class="string">source</span> <span class="string">files</span> <span class="string">💾</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">cp</span> <span class="string">-r</span> <span class="string">next-ts-app/pages</span> <span class="string">.</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">against</span> <span class="string">the</span> <span class="string">production</span> <span class="string">site</span> <span class="string">🧪</span></span><br><span class="line">        <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">config:</span> <span class="string">&#x27;baseUrl=https://next-ts-app-swart.vercel.app/&#x27;</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">DEBUG:</span> <span class="string">code-coverage</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># https://github.com/marketplace/actions/github-pages-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">code</span> <span class="string">coverage</span> <span class="string">report</span> <span class="string">🚀</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./coverage/lcov-report</span></span><br></pre></td></tr></table></figure><p>Tip: I have used <a href="https://github.com/marketplace/actions/github-pages-action">actions/github-pages-action</a> step at the end to publish the generated HTML code coverage report to GitHub Pages. You can find it at <a href="https://glebbahmutov.com/next-ts-app-tests/">https://glebbahmutov.com/next-ts-app-tests/</a>.</p><p><img src="../images/cc-for-nextjs/hosted-report.gif" alt="The code coverage report produced on CI and hosted on GitHub Pages"></p><h3><span id="fetching-the-right-application-source-code">Fetching the right application source code</span></h3><p>Imagine you are deploying an instrumented application to some environment, like <code>https://instrumented.acme.co</code> once per day. Then you run the tests against it to generate the full code coverage report. You only do this once per day because instrumenting and running the tests is slow, but there might be multiple commits to the application source code itself. How do you use the right source code when generating the coverage reports? By checking out the right source code commit for the deployed application.</p><p>Next.js applications embed the <code>buildId</code> in the pages, and you can control the ID. For example, you can concatenate the branch and the source code commit SHA, like <a href="https://github.com/bahmutov/next-ts-app/blob/main/next.config.js">this</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// next.config.js</span></span><br><span class="line"><span class="comment">// https://github.com/cypress-io/commit-info</span></span><br><span class="line"><span class="keyword">const</span> &#123; getBranch, getSha &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@cypress/commit-info&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@type <span class="type">&#123;import(&#x27;next&#x27;).NextConfig&#125;</span> </span>*/</span></span><br><span class="line"><span class="keyword">const</span> nextConfig = &#123;</span><br><span class="line">  reactStrictMode: <span class="literal">true</span>,</span><br><span class="line">  generateBuildId: <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// make sure to use Vercel variables if available</span></span><br><span class="line">    <span class="comment">// https://vercel.com/docs/concepts/projects/environment-variables</span></span><br><span class="line">    <span class="keyword">const</span> branch =</span><br><span class="line">      process.env.VERCEL_GIT_COMMIT_REF ||</span><br><span class="line">      (<span class="keyword">await</span> getBranch()) ||</span><br><span class="line">      <span class="string">&#x27;unknown branch&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> sha =</span><br><span class="line">      process.env.VERCEL_GIT_COMMIT_SHA || (<span class="keyword">await</span> getSha()) || <span class="string">&#x27;unknown sha&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> buildId = <span class="string">`<span class="subst">$&#123;branch&#125;</span>:::<span class="subst">$&#123;sha&#125;</span>`</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;generated build id &quot;%s&quot;&#x27;</span>, buildId)</span><br><span class="line">    <span class="keyword">return</span> buildId</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = nextConfig</span><br></pre></td></tr></table></figure><p>I wrote a little GitHub action to query the HTML page and extract the build ID value and split it into branch and commit SHA. Then you can check out the right source code commit when checking out the application on CI.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/actions/checkout</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">this</span> <span class="string">repo</span> <span class="string">🛎</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">the</span> <span class="string">build</span> <span class="string">info</span> <span class="string">🖨</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">bahmutov/get-build-id@v1</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">get-build-id</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&#x27;https://next-ts-app-swart.vercel.app/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Print</span> <span class="string">the</span> <span class="string">build</span> <span class="string">outputs</span> <span class="string">🖨</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;Next.js build ID: $<span class="template-variable">&#123;&#123; steps.get-build-id.outputs.buildId &#125;&#125;</span>&quot;</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;Next.js build branch: $<span class="template-variable">&#123;&#123; steps.get-build-id.outputs.branch &#125;&#125;</span>&quot;</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;Next.js build commit: $<span class="template-variable">&#123;&#123; steps.get-build-id.outputs.commit &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">the</span> <span class="string">application</span> <span class="string">repo</span> <span class="string">🛎</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">bahmutov/next-ts-app</span></span><br><span class="line">    <span class="comment"># from the build ID, we get the commit matching the deployed site</span></span><br><span class="line">    <span class="comment"># so let&#x27;s fetch just that commit to make sure our report</span></span><br><span class="line">    <span class="comment"># uses the correct source files</span></span><br><span class="line">    <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.get-build-id.outputs.commit</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">next-ts-app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># help the code coverage tool find the source files</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Copy</span> <span class="string">application</span> <span class="string">source</span> <span class="string">files</span> <span class="string">💾</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">cp</span> <span class="string">-r</span> <span class="string">next-ts-app/pages</span> <span class="string">.</span></span><br></pre></td></tr></table></figure><h2><span id="see-more">See more</span></h2><ul><li>read my other <a href="../tags/code-coverage/">blog posts about code coverage</a></li><li>see the JavaScript application <a href="https://github.com/bahmutov/next-and-cypress-example">bahmutov/next-and-cypress-example</a></li><li><a href="https://medium.com/geekculture/component-testing-next-js-application-with-cypress-28fa311adda6">Component Testing Next.js Application with Cypress</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;pullquote&quot;&gt;&lt;p&gt;📦 you can find the source code for this blog post in the repository &lt;a href=&quot;https://github.com/bahmutov/n
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="code coverage" scheme="https://glebbahmutov.com/blog/tags/code-coverage/"/>
    
      <category term="vercel" scheme="https://glebbahmutov.com/blog/tags/vercel/"/>
    
  </entry>
  
  <entry>
    <title>Control LaunchDarkly From Cypress Tests</title>
    <link href="https://glebbahmutov.com/blog/cypress-and-launchdarkly/"/>
    <id>https://glebbahmutov.com/blog/cypress-and-launchdarkly/</id>
    <published>2022-03-04T05:00:00.000Z</published>
    <updated>2022-03-04T16:12:34.626Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s say you are using <a href="https://launchdarkly.com/">LaunchDarkly</a> to develop and test new web application features behind a flag. You have end-to-end tests too. How do you test the features behind the flag? In this blog post, I will show how to target features using individual user IDs. We will use the plugin <a href="https://github.com/bahmutov/cypress-ld-control">cypress-ld-control</a> to set the user ID as an explicit target for the experiment and then confirm the web application behaves correctly using Cypress test.</p><!-- toc --><ul><li><a href="#launchdarkly-project">LaunchDarkly project</a></li><li><a href="#demo-react-application">Demo React application</a></li><li><a href="#cypress-setup">Cypress setup</a><ul><li><a href="#sensitive-variables">Sensitive variables</a></li><li><a href="#starting-the-app-and-the-tests">Starting the app and the tests</a></li><li><a href="#make-launchdarkly-optional">Make LaunchDarkly optional</a></li><li><a href="#the-plugin-api">The plugin API</a></li></ul></li><li><a href="#the-tests">The tests</a></li><li><a href="#cleaning-up">Cleaning up</a></li><li><a href="#inspecting-a-feature-flag">Inspecting a feature flag</a></li><li><a href="#running-tests-on-ci">Running tests on CI</a></li><li><a href="#single-test">Single test</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><h2><span id="launchdarkly-project">LaunchDarkly project</span></h2><p>I have created a new LaunchDarkly project with project &quot;Demo Project&quot; and two environments. We will concentrate on the &quot;Test&quot; environment.</p><p><img src="../images/ld-control/project.png" alt="LaunchDarkly demo project"></p><p>In the project, I have created a new String feature flag <code>testing-launch-darkly-control-from-cypress</code> with three variations.</p><p><img src="../images/ld-control/flag.png" alt="Test feature flag variations"></p><p>Because we want to turn different flag variations for specific users, we will turn on the &quot;Targeting&quot; option. Currently there are no targets yet.</p><p><img src="../images/ld-control/targeting.png" alt="Turn the feature flag targeting on"></p><h2><span id="demo-react-application">Demo React application</span></h2><p>To demonstrate controlling the feature flags from Cypress tests, I grabbed a copy of the LD&#39;s React application. I got a copy using the <a href="https://github.com/Rich-Harris/degit#readme">degit</a> command.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npx degit launchdarkly&#x2F;react-client-sdk&#x2F;examples&#x2F;hoc ld-example</span><br><span class="line">&gt; cloned launchdarkly&#x2F;react-client-sdk#HEAD to ld-example</span><br><span class="line">$ cd ld-example</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>🎁 You can find my version of the application used in this blog post in the repo <a href="https://github.com/bahmutov/cypress-ld-control-example">bahmutov/cypress-ld-control-example</a>.</p></blockquote><p>I have changed the code to use my project&#39;s Client SDK ID and show the current greeting using the feature flag value. For the demo, I have passed a made-up user ID (in the real application, the user ID would be set after authentication step)</p><figure class="highlight js"><figcaption><span>universal/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; withLDProvider &#125; <span class="keyword">from</span> <span class="string">&#x27;launchdarkly-react-client-sdk&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> (</span><br><span class="line">  ...</span><br><span class="line">);</span><br><span class="line"><span class="comment">// Set clientSideID to your own Client-side ID. You can find this in</span></span><br><span class="line"><span class="comment">// your LaunchDarkly portal under Account settings / Projects</span></span><br><span class="line"><span class="comment">// https://docs.launchdarkly.com/sdk/client-side/javascript#initializing-the-client</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  key: <span class="string">&#x27;USER_1234&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withLDProvider(&#123; <span class="attr">clientSideID</span>: <span class="string">&#x27;YOUR_CLIENT_SIDE_ID&#x27;</span>, <span class="attr">user</span>: <span class="string">&#x27;USER_1234&#x27;</span> &#125;)(App);</span><br></pre></td></tr></table></figure><p>My Home page uses the flag&#39;s value to show the greeting.</p><figure class="highlight js"><figcaption><span>universal/home.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; withLDConsumer &#125; <span class="keyword">from</span> <span class="string">&#x27;launchdarkly-react-client-sdk&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> Home = <span class="function">(<span class="params">&#123; flags &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;Root&gt;</span><br><span class="line">    &lt;Heading&gt;&#123;flags.testingLaunchDarklyControlFromCypress&#125;, World&lt;/Heading&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      This is a LaunchDarkly React example project. The message above changes the greeting,</span><br><span class="line">      based on the current feature flag variation.</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/Root&gt;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withLDConsumer()(Home);</span><br></pre></td></tr></table></figure><p>When I start the application, it shows the default causal greeting</p><p><img src="../images/ld-control/hello.png" alt="The application uses the casual greeting variation of the flag"></p><p>Great. Let&#39;s target the user <code>USER_1234</code> with a more formal greeting. At LaunchDarkly app, I will create a new targeting list. Don&#39;t forget to save the changes for them to be applied!</p><p><img src="../images/ld-control/target-user.png" alt="Target the user by ID"></p><p>LaunchDarkly SDK includes real-time updates using server-side events, thus the Home page immediately changes to the formal greeting.</p><p><img src="../images/ld-control/formal.png" alt="The current user receives its own feature flag value"></p><p>Nice, let&#39;s do the same from a Cypress test.</p><h2><span id="cypress-setup">Cypress setup</span></h2><p>Let&#39;s install Cypress test runner</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add -D cypress</span></span><br><span class="line">success Saved 1 new dependency.</span><br><span class="line">info Direct dependencies</span><br><span class="line">└─ cypress@9.5.1</span><br></pre></td></tr></table></figure><p>We will need to control LaunchDarkly flags via HTTP calls. While you can make HTTP calls from Node and from Cypress easily, there is higher-level logic LaunchDarkly uses that makes implementing feature flag changes a chore. I have abstracted everything necessary to add individual user targets into a plugin <a href="https://github.com/bahmutov/cypress-ld-control">cypress-ld-control</a> that Cypress tests can use to avoid the complexity. Let&#39;s install this plugin and start using it.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add -D cypress-ld-control</span></span><br><span class="line">info Direct dependencies</span><br><span class="line">└─ cypress-ld-control@1.1.2</span><br></pre></td></tr></table></figure><p>To change the flag values and add individual user targets, the plugin needs to access the LaunchDarkly REST API. We need to make an access token.</p><p><img src="../images/ld-control/token.png" alt="LaunchDarkly token"></p><p>Let&#39;s load the plugin and create tasks for the Cypress tests to call using the <a href="https://on.cypress.io/task">cy.task</a> - after all, <a href="/blog/powerful-cy-task/" title="cy.task is very powerful">cy.task is very powerful</a> command.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; initLaunchDarklyApiTasks &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress-ld-control&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> tasks = &#123;</span><br><span class="line">    <span class="comment">// add your other Cypress tasks if any</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// https://github.com/bahmutov/cypress-ld-control</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    process.env.LAUNCH_DARKLY_PROJECT_KEY &amp;&amp;</span><br><span class="line">    process.env.LAUNCH_DARKLY_AUTH_TOKEN</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">const</span> ldApiTasks = initLaunchDarklyApiTasks(&#123;</span><br><span class="line">      projectKey: process.env.LAUNCH_DARKLY_PROJECT_KEY,</span><br><span class="line">      authToken: process.env.LAUNCH_DARKLY_AUTH_TOKEN,</span><br><span class="line">      environment: <span class="string">&#x27;test&#x27;</span>, <span class="comment">// the key of the environment to use</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// copy all LaunchDarkly methods as individual tasks</span></span><br><span class="line">    <span class="built_in">Object</span>.assign(tasks, ldApiTasks)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Skipping cypress-ld-control plugin&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// register all tasks with Cypress</span></span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, tasks)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// IMPORTANT: return the updated config object</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Whenever we open Cypress locally or run on a continuous integration system, we need to provide two environment variables <code>LAUNCH_DARKLY_PROJECT_KEY</code> and <code>LAUNCH_DARKLY_AUTH_TOKEN</code>. The token is your private secret key we have just created. The project key is the unique string identifying each project shown in the URL and on the <code>https://app.launchdarkly.com/settings/projects</code> page.</p><p><img src="../images/ld-control/project-key.png" alt="LaunchDarkly project key"></p><h3><span id="sensitive-variables">Sensitive variables</span></h3><p>You can store sensitive values and inject them as needed using my <a href="https://github.com/bahmutov/as-a">as-a</a> CLI tool. In my case, I have <code>.as-a.ini</code> file that is never checked into source control</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; https://github.com/bahmutov/as-a</span></span><br><span class="line"><span class="section">[cypress-ld-control-demo]</span></span><br><span class="line"><span class="attr">LAUNCH_DARKLY_PROJECT_KEY</span>=...</span><br><span class="line"><span class="attr">LAUNCH_DARKLY_AUTH_TOKEN</span>=...</span><br></pre></td></tr></table></figure><p>I open Cypress using the command <code>as-a cypress-ld-control-demo yarn cypress open</code>.</p><h3><span id="starting-the-app-and-the-tests">Starting the app and the tests</span></h3><p>I typically use <a href="https://github.com/bahmutov/start-server-and-test">start-server-and-test</a> to start the application and open / run Cypress tests. In my <code>package.json</code> file I have set up the command <code>dev</code>:</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;node src/server/index.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;start-test 3000 &#x27;cypress open&#x27;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I run the application and inject the sensitive variables into Cypress tests using the terminal command</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ as-a cypress-ld-control-demo yarn run dev</span><br></pre></td></tr></table></figure><p>For more, see video <a href="https://www.youtube.com/watch?v=6iDjbAXvLa0">Start server and test</a>.</p><h3><span id="make-launchdarkly-optional">Make LaunchDarkly optional</span></h3><p>It is up to you to require these environment variables or gracefully handle it and only require them in some tests. For example, you could set an environment variable if the LaunchDarkly has been initialized:</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; initLaunchDarklyApiTasks &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress-ld-control&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://github.com/bahmutov/cypress-ld-control</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    process.env.LAUNCH_DARKLY_PROJECT_KEY &amp;&amp;</span><br><span class="line">    process.env.LAUNCH_DARKLY_AUTH_TOKEN</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">const</span> ldApiTasks = initLaunchDarklyApiTasks(&#123;</span><br><span class="line">      projectKey: process.env.LAUNCH_DARKLY_PROJECT_KEY,</span><br><span class="line">      authToken: process.env.LAUNCH_DARKLY_AUTH_TOKEN,</span><br><span class="line">      environment: <span class="string">&#x27;test&#x27;</span>, <span class="comment">// the key of the environment to use</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// copy all LaunchDarkly methods as individual tasks</span></span><br><span class="line">    <span class="built_in">Object</span>.assign(tasks, ldApiTasks)</span><br><span class="line">    <span class="comment">// set an environment variable for specs to use</span></span><br><span class="line">    <span class="comment">// to check if the LaunchDarkly can be controlled</span></span><br><span class="line">    config.env.launchDarklyApiAvailable = <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Skipping cypress-ld-control plugin&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// register all tasks with Cypress</span></span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, tasks)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// IMPORTANT: return the updated config object</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the test files that really need to call LaunchDarkly API we can check the variable once:</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  expect(Cypress.env(<span class="string">&#x27;launchDarklyApiAvailable&#x27;</span>), <span class="string">&#x27;LaunchDarkly&#x27;</span>).to.be.true</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3><span id="the-plugin-api">The plugin API</span></h3><p>The &quot;cypress-ld-control&quot; plugin can be used by itself without Cypress to target users. When you initialize the <code>ldApi</code> object, it has the following methods: <code>getFeatureFlag</code>, <code>setFeatureFlagForUser</code>, and others, see <a href="https://github.com/bahmutov/cypress-ld-control#api">README#API</a> section. When using the plugin from Cypress specs, you need to call these methods via the <a href="https://on.cypress.io/task">cy.task</a> command. To avoid clashing with other tasks, and conform to the <code>cy.task</code> semantics, the plugin follows the following rules:</p><ul><li>every task it returns is prefixed with <code>cypress-ld-control:</code> string. Thus you to get the feature flag you would call <code>cy.task(&#39;cypress-ld-control:getFeatureFlag&#39;)</code> command.</li><li>every command takes zero or a single options object as an argument, for example: <code>cy.task(&#39;cypress-ld-control:setFeatureFlagForUser&#39;, (&#123;featureFlagKey, userId, variationIndex&#125;))</code></li><li>every command returns either an object or a null, never <code>undefined</code></li></ul><h2><span id="the-tests">The tests</span></h2><p>For each experiment variation, I wrote a test placeholder to verify the application&#39;s behavior. In every test we can set the feature flag target that specific user, load the application, and check its behavior.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  expect(Cypress.env(<span class="string">&#x27;launchDarklyApiAvailable&#x27;</span>), <span class="string">&#x27;LaunchDarkly&#x27;</span>).to.be.true</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;shows the casual greeting&#x27;</span>)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;shows formal greeting&#x27;</span>)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;shows vacation greeting&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Let&#39;s start with the first test. Set the flag, load the app, confirm the user sees a casual greeting heading.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  expect(Cypress.env(<span class="string">&#x27;launchDarklyApiAvailable&#x27;</span>), <span class="string">&#x27;LaunchDarkly&#x27;</span>).to.be.true</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> featureFlagKey = <span class="string">&#x27;testing-launch-darkly-control-from-cypress&#x27;</span></span><br><span class="line"><span class="keyword">const</span> userId = <span class="string">&#x27;USER_1234&#x27;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;shows the casual greeting&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// target the given user to receive the first variation of the feature flag</span></span><br><span class="line">  cy.task(<span class="string">&#x27;cypress-ld-control:setFeatureFlagForUser&#x27;</span>, &#123;</span><br><span class="line">    featureFlagKey,</span><br><span class="line">    userId,</span><br><span class="line">    variationIndex: <span class="number">0</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Hello, World&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/ld-control/ld.gif" alt="The test sets the feature flag and confirm the user sees the first variation"></p><p>Similarly, the second test can target the user and confirm the second variant (index 1) is working as expected.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows formal greeting&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.task(<span class="string">&#x27;cypress-ld-control:setFeatureFlagForUser&#x27;</span>, &#123;</span><br><span class="line">    featureFlagKey,</span><br><span class="line">    userId,</span><br><span class="line">    variationIndex: <span class="number">1</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;How do you do, World&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/ld-control/test-formal.png" alt="Testing the second variation that shows the formal greeting"></p><p>Finally, when on vacation, the greeting is relaxed</p><p><img src="../images/ld-control/test-aloha.png" alt="Testing the Aloha greeting"></p><p>Note: you can see a flash of empty content while the application is fetching the features from LaunchDarkly. See <a href="https://docs.launchdarkly.com/sdk/client-side/javascript/default-variations">LaunchDarkly docs</a> on how to avoid it. For my simple application it was fine to have the flash.</p><h2><span id="cleaning-up">Cleaning up</span></h2><p>When the tests are finished, the last target for the user remains. We should clean up these targets to avoid adding more and more individual test users to LaunchDarkly. I am not sure, but it probably makes it slower to fetch the status for a particular user, and makes the web UI noisier. Let&#39;s remove any targeting after all tests are done.</p><p><img src="../images/ld-control/remains.png" alt="The user target remains after the last test"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">after(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.task(<span class="string">&#x27;cypress-ld-control:removeUserTarget&#x27;</span>, &#123; featureFlagKey, userId &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Nice, the user target is automatically removed.</p><p><img src="../images/ld-control/cleaned.png" alt="The test removed the individual user target after finishing"></p><p>Note: the <code>after</code> hook runs even if any of the tests fail. The only reason it can be completely skipped is if the test runner crashes.</p><h2><span id="inspecting-a-feature-flag">Inspecting a feature flag</span></h2><p>If you are just interested in the feature flag and its variations, you can fetch the flag&#39; state using the &quot;cypress-ld-control:getFeatureFlag&quot; task</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows vacation greeting&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.task(<span class="string">&#x27;cypress-ld-control:setFeatureFlagForUser&#x27;</span>, &#123;</span><br><span class="line">    featureFlagKey,</span><br><span class="line">    userId,</span><br><span class="line">    variationIndex: <span class="number">2</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Aloha, World&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// print the current state of the feature flag and its variations</span></span><br><span class="line">  cy.task(<span class="string">&#x27;cypress-ld-control:getFeatureFlag&#x27;</span>, featureFlagKey)</span><br><span class="line">    .then(<span class="built_in">console</span>.log)</span><br><span class="line">    <span class="comment">// let&#x27;s print the variations to the Command Log side panel</span></span><br><span class="line">    .its(<span class="string">&#x27;variations&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">variations</span>) =&gt;</span> &#123;</span><br><span class="line">      variations.forEach(<span class="function">(<span class="params">v, k</span>) =&gt;</span> &#123;</span><br><span class="line">        cy.log(<span class="string">`<span class="subst">$&#123;k&#125;</span>: <span class="subst">$&#123;v.name&#125;</span> is <span class="subst">$&#123;v.value&#125;</span>`</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The entire feature flag object is quite large, as we see in the DevTools console. The highlighted variations are visible in the Command Log.</p><p><img src="../images/ld-control/print-flag.png" alt="The feature flag object"></p><h2><span id="running-tests-on-ci">Running tests on CI</span></h2><p>Let&#39;s use <a href="/blog/trying-github-actions/" title="GitHub Actions">GitHub Actions</a> to run the same tests on CI. I will use <a href="https://github.com/cypress-io/github-action">cypress-io/github-action</a> to install the dependencies, cache Cypress, start the application, and run the tests. I will need to set the same environment secrets in the repo.</p><p><img src="../images/ld-control/secrets.png" alt="Setting secrets on GitHub"></p><p>The CI workflow <a href="https://github.com/bahmutov/cypress-ld-control-example/blob/main/.github/workflows/ci.yml">ci.yml</a> uses the GH action and injects the secrets as environment variables.</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">        <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">&#x27;yarn start&#x27;</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">LAUNCH_DARKLY_PROJECT_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.LAUNCH_DARKLY_PROJECT_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">LAUNCH_DARKLY_AUTH_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.LAUNCH_DARKLY_AUTH_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>The terminal output on CI shows the messages from <code>cypress-ld-control</code> plugin as it calls LaunchDarkly API</p><p><img src="../images/ld-control/terminal.png" alt="The plugin logs its LaunchDarkly operations"></p><h2><span id="single-test">Single test</span></h2><p>Because LaunchDarkly client-side SDK includes real-time updates, we can write a single test that goes through every variation of the flag without visiting the page again or even reloading it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">it.only(<span class="string">&#x27;shows all greetings&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.task(<span class="string">&#x27;cypress-ld-control:setFeatureFlagForUser&#x27;</span>, &#123;</span><br><span class="line">    featureFlagKey,</span><br><span class="line">    userId,</span><br><span class="line">    variationIndex: <span class="number">0</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.contains(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Hello, World&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    <span class="comment">// I have added one second waits for clarity</span></span><br><span class="line">    .wait(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">  cy.task(<span class="string">&#x27;cypress-ld-control:setFeatureFlagForUser&#x27;</span>, &#123;</span><br><span class="line">    featureFlagKey,</span><br><span class="line">    userId,</span><br><span class="line">    variationIndex: <span class="number">1</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.contains(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;How do you do, World&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>).wait(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">  cy.task(<span class="string">&#x27;cypress-ld-control:setFeatureFlagForUser&#x27;</span>, &#123;</span><br><span class="line">    featureFlagKey,</span><br><span class="line">    userId,</span><br><span class="line">    variationIndex: <span class="number">2</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.contains(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Aloha, World&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/ld-control/single-test.gif" alt="A single test will all feature flag states"></p><p>Note: the plugin &quot;cypress-ld-control&quot; handles LaunchDarkly rate-limiting, retrying API calls if the test runner receives 429 HTTP response code.</p><p>Note 2: in the test above you see a flash of &quot;Hello, World&quot; default flag state between the formal and the vacation greetings. The plugin automatically removes the current user target from a variation before adding it to another one (the same user cannot be target of two variations at the same time). Thus you see that brief moment between the remove and add commands.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="https://github.com/bahmutov/cypress-ld-control">bahmutov/cypress-ld-control</a> plugin repo</li><li><a href="https://github.com/bahmutov/cypress-ld-control-example">bahmutov/cypress-ld-control-example</a> example app repo</li><li><a href="/blog/test-feature-flags/" title="Test Feature Flags Using Cypress and Flagsmith">Test Feature Flags Using Cypress and Flagsmith</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s say you are using &lt;a href=&quot;https://launchdarkly.com/&quot;&gt;LaunchDarkly&lt;/a&gt; to develop and test new web application features behind 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Visualize Cypress Command Queue</title>
    <link href="https://glebbahmutov.com/blog/visualize-cypress-command-queue/"/>
    <id>https://glebbahmutov.com/blog/visualize-cypress-command-queue/</id>
    <published>2022-02-28T05:00:00.000Z</published>
    <updated>2022-02-28T12:29:30.796Z</updated>
    
    <content type="html"><![CDATA[<p>You can watch my video &quot;<a href="https://youtu.be/K5x2oXWsWqI">Cypress Command Chain Plugin Introduction</a>&quot; that covers the contents of this blog post.</p><h2><span id="the-problem">The problem</span></h2><p>A lot of times, people new to Cypress get an unexpected result while trying to print a value. For example, the following (incorrect) test is supposed to print the number from the page.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// INCORRECT, does not print &quot;n&quot;</span></span><br><span class="line">it(<span class="string">&#x27;prints a number of projects&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> n</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;#projects-count&#x27;</span>)</span><br><span class="line">    .invoke(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;match&#x27;</span>, <span class="regexp">/^\d+/</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">      n = <span class="built_in">Number</span>(text.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">    &#125;)</span><br><span class="line">  cy.log(<span class="string">&#x27;number&#x27;</span>, n)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/queue/undefined-n.png" alt="Cy.log does not print &quot;n&quot;"></p><p>Hmm, why is the <code>n</code> variable empty?</p><h2><span id="cypress-command-queue">Cypress command queue</span></h2><p>When Cypress runs through the test, it first queues all commands, and then starts executing them. Each command with its arguments is added to the list. It is almost like instructions you might write down and give to a human tester to run later. The above code would be something like this if I ask you to test the page:</p><ul><li>visit the index page</li><li>get the element with id &quot;project-count&quot;</li><li>confirm the text matches the regular expression <code>/^\d+/</code></li><li>convert the text to a number</li><li>print the string &quot;number&quot; and <code>undefined</code></li><li>START the test</li></ul><p>Wait, why is the last instruction says to print &quot;number&quot; and <code>undefined</code>? Because these are the parameters the test uses when calling <code>cy.log(&#39;number&#39;, n)</code>. At the moment of the call, the value of <code>n</code> is still undefined. It will be set much later.</p><h2><span id="visualize-the-command-queue">Visualize the command queue</span></h2><p>To better show the queued up commands and make it clear, I have written the <a href="https://github.com/bahmutov/cypress-command-chain">cypress-command-chain</a> plugin. Cypress emits events every time a command is queued, started, and ended. You can see these events yourself:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cypress.on(<span class="string">&#x27;command:enqueued&#x27;</span>, <span class="function">(<span class="params">command</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;command enqueued %s with args %o&#x27;</span>, command.name, command.args)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>By inspect the <code>command.args</code> you can see the arguments at the moment <code>cy.log(&#39;number&#39;, n)</code> but before the test starts running.</p><p><img src="../images/queue/args.png" alt="Arguments passed with each command when they were queued"></p><p>Cypress Command Log shows the current test command and all finished commands. I have written the plugin <code>cypress-command-chain</code> to show <em>all enqueued</em> commands. This makes it clear which commands are scheduled to run and their arguments. The plugin even warns you if any of the arguments have <code>undefined</code> value, since it is a sign of a problem.</p><p><img src="../images/queue/queue.png" alt="cypress-command-chain plugin shows the commands and their arguments"></p><h2><span id="the-fix">The fix</span></h2><p>From the command queue, we see that we call <code>cy.log(&#39;number&#39;, n)</code> too soon. We need to call the <code>log</code> command after the value of <code>n</code> is set, which happens inside the <code>.then(...)</code> callback.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;prints a number of projects&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;#projects-count&#x27;</span>)</span><br><span class="line">    .invoke(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;match&#x27;</span>, <span class="regexp">/^\d+/</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> n = <span class="built_in">Number</span>(text.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">      cy.log(<span class="string">&#x27;number&#x27;</span>, n)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test goes by too quickly, let&#39;s add <code>cy.wait</code> just to slow it down so we can see the Cypress command queue in action.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;prints a number of projects&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;#projects-count&#x27;</span>)</span><br><span class="line">    .invoke(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">3000</span>)</span><br><span class="line">    .should(<span class="string">&#x27;match&#x27;</span>, <span class="regexp">/^\d+/</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> n = <span class="built_in">Number</span>(text.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">      cy.log(<span class="string">&#x27;number&#x27;</span>, n)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/queue/chain.gif" alt="Notice how the cy.log command is added later when the value of &quot;n&quot; becomes known"></p><p>Now you can see that the test starts with a queue of commands ending at <code>.then cb()</code> command. The test runner does not know about the <code>cy.log</code> command yet. Only when it reaches the <code>.then cb()</code> callback function, it runs the <code>cy.log</code> and inserts it into the queue, and then continues executing the commands. When <code>cy.log</code> is called inside the <code>.then</code> callback, the value of <code>n</code> is known, so the command enqueued shows <code>&quot;number&quot;, 355</code> as expected.</p><p><strong>Tip:</strong> <code>cy.then</code> command might confuse some people, since it reminds them of JavaScript promises. This is why I suggest <a href="/blog/replace-and-remove-cy-then-command/" title="renaming it to cy.later">renaming it to cy.later</a> for clarity.</p><h2><span id="chains">Chains</span></h2><p>Cypress command queue and fluent syntax make it simpler to &quot;pass the value forward&quot; instead of getting into a variable. Thus the above test could be written as:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;prints a number of projects&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;#projects-count&#x27;</span>)</span><br><span class="line">    .invoke(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">5000</span>)</span><br><span class="line">    .should(<span class="string">&#x27;match&#x27;</span>, <span class="regexp">/^\d+/</span>)</span><br><span class="line">    .invoke(<span class="string">&#x27;split&#x27;</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    .its(<span class="number">0</span>)</span><br><span class="line">    .then(<span class="built_in">Number</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.log(<span class="string">&#x27;number&#x27;</span>, n)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above fluent chain shows nicely</p><p><img src="../images/queue/fluent-chain.png" alt="The command chain for the above test"></p><p>The best approach to writing concise tests like this in my opinion is to see more examples. Read <a href="../tags/cypress/">my Cypress blogs</a> and watch the <a href>Cypress Tips &amp; Tricks</a> YouTube videos to learn and check out my collection of commands and recipes at <a href="https://glebbahmutov.com/cypress-examples/">glebbahmutov.com/cypress-examples/</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;You can watch my video &amp;quot;&lt;a href=&quot;https://youtu.be/K5x2oXWsWqI&quot;&gt;Cypress Command Chain Plugin Introduction&lt;/a&gt;&amp;quot; that covers the c
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Replace The cy.then Command</title>
    <link href="https://glebbahmutov.com/blog/replace-and-remove-cy-then-command/"/>
    <id>https://glebbahmutov.com/blog/replace-and-remove-cy-then-command/</id>
    <published>2022-02-22T05:00:00.000Z</published>
    <updated>2022-02-22T03:48:57.959Z</updated>
    
    <content type="html"><![CDATA[<p>Many people complain that the Cypress <a href="https://on.cypress.io/then">cy.then</a> command is confusing. It looks like a Promise, yet it is not.</p><ul><li>you cannot replace it with <code>async / await</code> syntax sugar</li><li>it behaves differently from the <code>Promise.then</code>, for example if the callback returns undefined value, then the original subject value is passed to the next command or assertion</li></ul><p>To avoid the confusion, you can disallow using the <code>cy.then</code> command completely.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if anyone tries to use cy.then in the spec code or in a plugin</span></span><br><span class="line"><span class="comment">// we will get an error</span></span><br><span class="line">Cypress.Commands.overwrite(<span class="string">&#x27;then&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">then, subject, cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Using cy.then command is disallowed&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">cy.wrap(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">  .then(cy.log)</span><br><span class="line">  .then(<span class="function">(<span class="params">x</span>) =&gt;</span> x + x)</span><br><span class="line">  .should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;HelloHello&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/cy-later/ban-cy-then.png" alt="Banning the cy.then command"></p><p>We still want the functionality of the <code>cy.then</code> command, but under the less confusing name. We do need the original <code>cy.then</code> command functionality. Thus we will grab the reference to the function so we can call it from our command. We can find the reference by inspecting the <code>Cypress.Commands</code> object.</p><p><img src="../images/cy-later/commands.png" alt="All command functions are stored in Cypress.Commands._commands object"></p><p>Let&#39;s add a custom command <code>cy.later</code> that calls the banned <code>cy.then</code> command function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// find and save the reference to the original cy.then command</span></span><br><span class="line"><span class="comment">// by inspecting the internals of the Cypress.Commands object</span></span><br><span class="line"><span class="keyword">const</span> thenCommand = Cypress.Commands._commands.then.fn</span><br><span class="line"></span><br><span class="line"><span class="comment">// if anyone tries to use cy.then in the spec code or in a plugin</span></span><br><span class="line"><span class="comment">// we will get an error</span></span><br><span class="line">Cypress.Commands.overwrite(<span class="string">&#x27;then&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">then, subject, cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Using cy.then command is disallowed&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Cypress.Commands.add(</span><br><span class="line">  <span class="string">&#x27;later&#x27;</span>,</span><br><span class="line">  &#123; <span class="attr">prevSubject</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  (subject, cb) =&gt; &#123;</span><br><span class="line">    <span class="comment">// cy.later behaves just like cy.then</span></span><br><span class="line">    <span class="comment">// which we implement by calling the original cy.then command</span></span><br><span class="line">    <span class="keyword">return</span> thenCommand(subject, cb)</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">cy.wrap(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">  .later(cy.log)</span><br><span class="line">  .later(<span class="function">(<span class="params">x</span>) =&gt;</span> x + x)</span><br><span class="line">  .should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;HelloHello&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The new command is working as expected, but hopefully does not lead the users down the wrong path.</p><p><img src="../images/cy-later/later.png" alt="The new custom command cy.later is working as expected"></p><p>I hope this helps.</p><blockquote class="pullquote"><p>🎁 You can find the above code in a recipe at <a href="https://glebbahmutov.com/cypress-examples">glebbahmutov.com/cypress-examples</a>.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Many people complain that the Cypress &lt;a href=&quot;https://on.cypress.io/then&quot;&gt;cy.then&lt;/a&gt; command is confusing. It looks like a Promise, yet
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Incremental Blog Scraping</title>
    <link href="https://glebbahmutov.com/blog/incremental-post-scraping/"/>
    <id>https://glebbahmutov.com/blog/incremental-post-scraping/</id>
    <published>2022-02-18T05:00:00.000Z</published>
    <updated>2022-02-18T14:39:42.756Z</updated>
    
    <content type="html"><![CDATA[<p>In the previous blog post <a href="/blog/scrape-static-site-with-algolia/" title="Scrape Static Site with Algolia">Scrape Static Site with Algolia</a> I have shown how to scrape a static site to make it instantly searchable. After each deploy, you run the scraper which replaces the entire Algolia index with new content. That might work for smaller sites, but quickly runs into Algolia usage limits as the site scales up. I have an Algolia index for all my <a href="../tags/cypress/">Cypress blog posts</a> and scraping all blog posts again and again generated way too many record operations, hitting the 10k limit on my free Algolia plan.</p><p>The worst thing was - when I publish a new Cypress blog post, the rest of the posts stay unchanged, so all that scraping is replacing the search records with identical records. We need to devise a way to only scrape the new and the changed blog posts. This is what I call &quot;incremental&quot; scraping.</p><h2><span id="text-records">Text records</span></h2><p>Another problem one can run into is the number of records created by blog post. At first, I used a CSS selector that returns all paragraphs, list items, and even the code comments to create individual Algolia records</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.article .article-inner .article-entry p,</span><br><span class="line">.article .article-inner .article-entry li,</span><br><span class="line">.article .article-inner .article-entry figure.highlight .comment</span><br></pre></td></tr></table></figure><p>For a typical blog post like <a href="/blog/email-cypress-report/" title="Email Cypress Test Report">Email Cypress Test Report</a> the above selector returns 20 text records.</p><p><img src="../images/incremental-scraping/selectors.png" alt="A small blog post might generate more than twenty records"></p><p>In addition, the text records, we scrape the H1, H2, and the blog description, creating hierarchical Algolia records. All this means that a typical post on my blog generates 25 - 80 Algolia records. Multiply by the number of Cypress posts I have written over the years (180+ as of this writing) and each scraping session might use up 9k Algolia operations. For comparison: the free Algolia monthly plan has a limit of 10k operations - and we are hitting it in a single scrape!</p><h2><span id="changing-the-text-records">Changing the text records</span></h2><p>After consulting with the Algolia engineers, I have decided to change how the scraping records are formed. Instead of taking the individual <code>P</code>, <code>LI</code>, and <code>.comment</code> elements, and creating a record for each one, I have decided to combine them all into a single text record. After all - you cannot individually target a <code>P</code> record. My blog post only has anchor links for the header elements, thus all the <code>P</code>, <code>LI</code>, and other elements between them could be a single Algolia text record with the header anchor.</p><p><img src="../images/incremental-scraping/merge.png" alt="Our goal is to have a single text record between the headers"></p><p>Unfortunately, the default <a href="https://docsearch.algolia.com/docs/legacy/run-your-own/">Algolia scraper code</a> does not allow merging the text records into one large record before uploading. Thus I needed to implement something myself. Luckily, Cypress can load the page and process it in every possible way. Time to write our own scraper.</p><h2><span id="scraper-inside-cypress">Scraper inside Cypress</span></h2><blockquote class="pullquote"><p>🎁 You can find my source code used to incrementally scrape the blog posts in the repository <a href="https://github.com/bahmutov/scrape-blog-post-page">bahmutov/scrape-blog-post-page</a>.</p></blockquote><p>Using the <a href="https://on.cypress.io/get">cy.get</a> command we get the individual records, including the headers. Then we combine them into largr text records, up until we see a header element. Then we start a new text record. This is done by Cypress in <a href="https://github.com/bahmutov/scrape-blog-post-page/blob/main/cypress/integration/utils.js">cypress/integration/utils.js</a> file</p><figure class="highlight js"><figcaption><span>cypress/integration/utils.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hasAnchor</span>(<span class="params">$el</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> $anchor = $el.find(<span class="string">&#x27;[id]&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> $anchor.length &gt; <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getAnchor</span>(<span class="params">$el</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> $anchor = $el.find(<span class="string">&#x27;[id]&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> $anchor.attr(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// now process all article elements, grouping them by the anchor</span></span><br><span class="line"><span class="keyword">return</span> cy</span><br><span class="line">  .get(</span><br><span class="line">    <span class="string">`</span></span><br><span class="line"><span class="string">      header.article-header h2,</span></span><br><span class="line"><span class="string">      article .article-inner h2,</span></span><br><span class="line"><span class="string">      .article .article-inner .article-entry p,</span></span><br><span class="line"><span class="string">      .article .article-inner .article-entry figure.highlight .comment</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">  )</span><br><span class="line">  .each(<span class="function">(<span class="params">$snippet</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hasAnchor($snippet)) &#123;</span><br><span class="line">      <span class="keyword">const</span> anchor = getAnchor($snippet)</span><br><span class="line">      currentRecord = &#123;</span><br><span class="line">        anchor,</span><br><span class="line">        text: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">      records.push(currentRecord)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      currentRecord.text += <span class="string">&#x27;\n&#x27;</span> + $snippet.text().replace(<span class="regexp">/\s+/g</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Whenever we see a header element with an anchor, we start a new text record. All the individual <code>P</code> and <code>.comment</code> records after that are appended as text, forming one large chunk of text (the code later checks the total text record size, Algolia recommends the records to be below 10k or 100k bytes). Thus instead of 20 individual text records, the &quot;Email Cypress Test Report&quot; blog post will have just 3 text records plus a few header records.</p><p><img src="../images/incremental-scraping/record.png" alt="Typical text record after scraping"></p><p>A typical Algolia record has one or several paragraphs of text, an anchor, and the full URL that uses the anchor to immediately direct the user to the right place. Here is the user searching using a part of the text above. You can try searching yourself by going to <a href="https://cypress.tips/search">cypress.tips/search</a></p><p><img src="../images/incremental-scraping/the-search.png" alt="The search widget finds the scraped text"></p><p>When the user clicks on the search result, they are directed to the section&#39;s URL.</p><p><img src="../images/incremental-scraping/the-result.png" alt="The click on the search result takes you to the section"></p><p>I use Cypress to scrape, even if something like <a href="https://cheerio.js.org/">cheerio.js</a> is faster. I can see and debug the scraper much better by using the Cypress GUI. I can see each found DOM element (including using at the DevTools Elements panel), step through the code, save the intermediate records - all to understand what the scraping algorithm is doing. If I wanted, I could then transfer the scraper logic into a Node script using <code>cheerio.js</code>. But as you will see in the next section, there is no need to optimize the speed of the scraper at the expense of the debugging experience - because we will scrape very few posts at a time.</p><p><img src="../images/incremental-scraping/cy-scrape.png" alt="Observing the records being merged in Cypress browser"></p><p>The merged text and header records are then uploading to Algolia using the code inside the Cypress <a href="https://github.com/bahmutov/scrape-blog-post-page/blob/main/cypress/plugins/index.js">plugins file</a>.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> algoliasearch = <span class="built_in">require</span>(<span class="string">&#x27;algoliasearch&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// upload scraped records to Algolia</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">uploadRecords</span>(<span class="params">&#123; records, slug &#125;</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; APPLICATION_ID, ADMIN_API_KEY, INDEX_NAME &#125; = process.env</span><br><span class="line">      <span class="keyword">if</span> (!APPLICATION_ID || !ADMIN_API_KEY || !INDEX_NAME) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Algolia app/key not set&#x27;</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">          <span class="string">&#x27;Skipping uploading %d records for slug %s&#x27;</span>,</span><br><span class="line">          records.length,</span><br><span class="line">          slug,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> client = algoliasearch(APPLICATION_ID, ADMIN_API_KEY)</span><br><span class="line">      <span class="keyword">const</span> index = client.initIndex(INDEX_NAME)</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;%s: removing existing records for %s&#x27;</span>, INDEX_NAME, slug)</span><br><span class="line">      <span class="keyword">await</span> index.deleteBy(&#123;</span><br><span class="line">        filters: slug,</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;%s: adding %d records&#x27;</span>, INDEX_NAME, records.length)</span><br><span class="line">      <span class="comment">// each record should have a unique id set</span></span><br><span class="line">      <span class="keyword">await</span> index.saveObjects(records, &#123;</span><br><span class="line">        autoGenerateObjectIDIfNotExist: <span class="literal">true</span>,</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// cy.task must return something</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note that if a blog post has been edited, we need to remove any existing records, which I do by using the post slug</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// take the last part of the url which is the post name</span></span><br><span class="line"><span class="keyword">const</span> slug = _.last(_.filter(_.split(baseUrl, <span class="string">&#x27;/&#x27;</span>), <span class="built_in">Boolean</span>)</span><br></pre></td></tr></table></figure><p>Now we just need to make sure we only scrape the changed and the new blog posts.</p><h2><span id="incremental-scraping">Incremental scraping</span></h2><p>On my Hexo blog every published blog post has its &quot;lastmod&quot; date, which you can find in the <a href="https://glebbahmutov.com/blog/sitemap.xml">sitemap.xml</a></p><p><img src="../images/incremental-scraping/sitemap.png" alt="Blog post URLs and last modified dates"></p><p>We can get the list of Cypress blog posts from the <a href="https://glebbahmutov.com/blog/tags/cypress/">/tags/cypress/</a> page.</p><p><img src="../images/incremental-scraping/tag.png" alt="A page with all Cypress blog posts"></p><p><strong>Tip:</strong> if you use the pagination in Hexo blog, then the &quot;tag&quot; page only shows the first N blog posts for a tag. I have removed this limit by cloning the pagination plugin which you can find at <a href="https://github.com/bahmutov/hexo-generator-gleb">bahmutov/hexo-generator-gleb</a>.</p><p>Getting the list of URLs from the tag page is simple to do using <code>cheerio.js</code> in <a href="https://github.com/bahmutov/scrape-blog-post-page/blob/main/get-post-urls.js">get-post-urls.js</a></p><figure class="highlight js"><figcaption><span>get-post-urls.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; URL &#125; = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogPostUrls</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> tagPageUrl = <span class="string">&#x27;https://glebbahmutov.com/blog/tags/cypress/&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> got(tagPageUrl)</span><br><span class="line">  <span class="keyword">const</span> $ = cheerio.load(res.body)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// find all tags pointing at the blog posts</span></span><br><span class="line">  <span class="comment">// and put the full URL in the array</span></span><br><span class="line">  <span class="keyword">const</span> links = []</span><br><span class="line">  $(<span class="string">&#x27;a.archive-article-title&#x27;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">k, el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> relativeUrl = $(el).attr(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> fullUrl = <span class="keyword">new</span> URL(relativeUrl, tagPageUrl)</span><br><span class="line">    links.push(fullUrl.href)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;found %d links&#x27;</span>, links.length)</span><br><span class="line">  <span class="keyword">return</span> links</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Any time we want to get the list of blog posts to scrape, we can get the sitemap, parse it into URLs and the last modified dates. At the same time we get the Cypress post URLs and intersect the two lists.</p><figure class="highlight js"><figcaption><span>get-modified-post-urls.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; getBlogPostUrls &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./get-post-urls&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; getSiteMap &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./get-sitemap&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([getSiteMap(), getBlogPostUrls()]).then(<span class="function">(<span class="params">[modified, posts]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> cypressPostsWithModified = &#123;&#125;</span><br><span class="line">  posts.forEach(<span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!modified[url]) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">&#x27;missing modified date for %s&#x27;</span>, url)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cypressPostsWithModified[url] = modified[url]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> filename = <span class="string">&#x27;blog-post-urls.json&#x27;</span></span><br><span class="line">  fs.writeFileSync(</span><br><span class="line">    filename,</span><br><span class="line">    <span class="built_in">JSON</span>.stringify(cypressPostsWithModified, <span class="literal">null</span>, <span class="number">2</span>) + <span class="string">&#x27;\n&#x27;</span>,</span><br><span class="line">  )</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">&#x27;saved %d links to %s&#x27;</span>,</span><br><span class="line">    <span class="built_in">Object</span>.keys(cypressPostsWithModified).length,</span><br><span class="line">    filename,</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I like saving the intermediate results as JSON files, because that allows me to inspect the data, and continue from a known state. Now we need to decide for each URL if it needs scraping. At first, I tried to use Algolia to tell me the scraped timestamps, but later decided to simplify the logic and just have a database of records and the scrape timestamps. I have created <a href="https://github.com/bahmutov/was-it-scraped">was-it-scraped</a> NPM module to abstract saving which records were scraped already. Under the hood it uses an external Supabase database, but you could use a local JSON file as well. Now we can write a script to filter all the found Cypress blog posts and only leave the ones that need scraping:</p><figure class="highlight js"><figcaption><span>filter-scraped-posts.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">// an object with [url] =&gt; [modified]</span></span><br><span class="line"><span class="comment">// with modified string in the format &quot;YYYY-MM-DD&quot;</span></span><br><span class="line"><span class="keyword">const</span> allPosts = <span class="built_in">require</span>(<span class="string">&#x27;./blog-post-urls.json&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  <span class="string">&#x27;checking %d posts if they are scraped&#x27;</span>,</span><br><span class="line">  <span class="built_in">Object</span>.keys(allPosts).length,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; wasScrapedAfter &#125; = <span class="built_in">require</span>(<span class="string">&#x27;was-it-scraped&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">checkScrapeStatus</span>(<span class="params">urlsModified</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> urls = <span class="built_in">Object</span>.keys(urlsModified)</span><br><span class="line">  <span class="keyword">const</span> results = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> url <span class="keyword">of</span> urls) &#123;</span><br><span class="line">    <span class="keyword">const</span> modified = <span class="keyword">new</span> <span class="built_in">Date</span>(urlsModified[url])</span><br><span class="line">    <span class="keyword">const</span> scraped = <span class="keyword">await</span> wasScrapedAfter(url, modified)</span><br><span class="line">    <span class="keyword">if</span> (!scraped) &#123;</span><br><span class="line">      results.push(url)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkScrapeStatus(allPosts).then(<span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> filename = <span class="string">&#x27;need-scraping.json&#x27;</span></span><br><span class="line">  fs.writeFileSync(filename, <span class="built_in">JSON</span>.stringify(list, <span class="literal">null</span>, <span class="number">2</span>) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;saved %d links to be scraped into %s&#x27;</span>, list.length, filename)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>A typical run quickly goes through the hundreds of URLs to only find the new and the modified blog posts.</p><p><img src="../images/incremental-scraping/filter.png" alt="Filtering all URLs by the last scraped vs modified dates"></p><p>In the above run, only a single blog post URL will require scraping.</p><p><img src="../images/incremental-scraping/cat.png" alt="The saved JSON file lists a single blog post URL that needs scraping"></p><p>The last Node script goes through the list of URLs to scrape and fires up Cypress via its <a href="https://on.cypress.io/module-api">NPM module API</a>. After scraping it marks the last scraped timestamp in the database for those blog posts using the <code>was-it-scraped</code> module and its <code>markScraped</code> function.</p><figure class="highlight js"><figcaption><span>scrape-filtered-posts.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; markScraped &#125; = <span class="built_in">require</span>(<span class="string">&#x27;was-it-scraped&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cypress = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> urlsToScrape = <span class="built_in">require</span>(<span class="string">&#x27;./need-scraping.json&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;to scrape %d posts&#x27;</span>, urlsToScrape.length)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">scrapeOnePost</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> outputFolder = <span class="string">&#x27;scraped&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> slug = url.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="built_in">Boolean</span>).pop()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;scraping url %s, slug %s&#x27;</span>, url, slug)</span><br><span class="line">  <span class="keyword">const</span> outputRecordsFilename = path.join(</span><br><span class="line">    outputFolder,</span><br><span class="line">    <span class="string">`<span class="subst">$&#123;slug&#125;</span>-algolia-objects.json`</span>,</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> cypress.run(&#123;</span><br><span class="line">    config: &#123;</span><br><span class="line">      baseUrl: url,</span><br><span class="line">    &#125;,</span><br><span class="line">    env: &#123;</span><br><span class="line">      slug,</span><br><span class="line">      outputRecordsFilename,</span><br><span class="line">    &#125;,</span><br><span class="line">    spec: <span class="string">&#x27;cypress/integration/spec2.js&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> records = <span class="built_in">JSON</span>.parse(fs.readFileSync(outputRecordsFilename))</span><br><span class="line">  <span class="keyword">await</span> uploadRecordsToAlgolia(records, slug)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> markScraped(url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">scrapeUrls</span>(<span class="params">urls</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> url <span class="keyword">of</span> urls) &#123;</span><br><span class="line">    <span class="keyword">await</span> scrapeOnePost(url)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scrapeUrls(urlsToScrape)</span><br></pre></td></tr></table></figure><h2><span id="continuous-incremental-scraping">Continuous incremental scraping</span></h2><p>We can do the scraping locally, but a more consistent way is to let the CI run the scraper every night. I am using GitHub actions to call the above scripts, see the code in the <a href="https://github.com/bahmutov/scrape-blog-post-page/blob/main/.github/workflows/scrape.yml">.github/workflows/scrape.yml</a> file.</p><figure class="highlight yml"><figcaption><span>.github/workflows/scrape.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Scrape</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="comment"># scrape any new blog posts every night</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;0 1 * * *&#x27;</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">scrape:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Install NPM dependencies, cache them correctly</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span> <span class="string">📦</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">runTests:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">modified</span> <span class="string">posts</span> <span class="string">📰</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">node</span> <span class="string">./get-modified-post-urls</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Filter</span> <span class="string">scraped</span> <span class="string">posts</span> <span class="string">📤</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">node</span> <span class="string">./filter-scraped-posts</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">SUPABASE_URL:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SUPABASE_URL</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">SUPABASE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SUPABASE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Show</span> <span class="string">list</span> <span class="string">of</span> <span class="string">posts</span> <span class="string">to</span> <span class="string">scrape</span> <span class="string">🖨</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">cat</span> <span class="string">need-scraping.json</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Scrape</span> <span class="string">the</span> <span class="string">changed</span> <span class="string">posts</span> <span class="string">🚀</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">node</span> <span class="string">./scrape-filtered-posts</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="comment"># for updating the scraped timestamps</span></span><br><span class="line">          <span class="attr">SUPABASE_URL:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SUPABASE_URL</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">SUPABASE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SUPABASE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># for updating the Algolia index</span></span><br><span class="line">          <span class="attr">APPLICATION_ID:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.APPLICATION_ID</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">INDEX_NAME:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.INDEX_NAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ADMIN_API_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ADMIN_API_KEY</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>The above workflow is fast. For example, a recent run with one blog post to scrape took 35 seconds.</p><p><img src="../images/incremental-scraping/run.png" alt="Running the scrape workflow on GitHub Actions"></p><p>When scraping the blog post, Cypress outputs the main messages about the scraping progress.</p><p><img src="../images/incremental-scraping/scrape.png" alt="Scraping the blog post and uploading the records to Algolia"></p><p>Even this blog post will be scraped automatically, as it tagged &quot;cypress&quot; too. And here it is - scraped by the CI 🎉</p><p><img src="../images/incremental-scraping/scrape-itself.png" alt="This blog has been scraped"></p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/scrape-static-site-with-algolia/" title="Scrape Static Site with Algolia">Scrape Static Site with Algolia</a> is a good introduction to scraping</li><li><a href="/blog/scrape-slides/" title="Scrape Slides">Scrape Slides</a> how similarly to this approach I scrape my <a href="https://slides.com/bahmutov">slides.com/bahmutov</a> presentations</li><li>I scrape my YouTube <a href="https://www.youtube.com/playlist?list=PLP9o9QNnQuAYYRpJzDNWpeuOVTwxmIxcI">Cypress Tips &amp; Tricks playlist</a> using the code in <a href="https://github.com/bahmutov/scrape-youtube-videos">bahmutov/scrape-youtube-videos</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the previous blog post &lt;a href=&quot;/blog/scrape-static-site-with-algolia/&quot; title=&quot;Scrape Static Site with Algolia&quot;&gt;Scrape Static Site wit
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
      <category term="algolia" scheme="https://glebbahmutov.com/blog/tags/algolia/"/>
    
  </entry>
  
  <entry>
    <title>Email Cypress Test Report</title>
    <link href="https://glebbahmutov.com/blog/email-cypress-report/"/>
    <id>https://glebbahmutov.com/blog/email-cypress-report/</id>
    <published>2022-02-16T05:00:00.000Z</published>
    <updated>2022-02-16T14:44:43.737Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes you run the Cypress end-to-end tests on CI and want to be notified quickly if something has failed. Most CIs can be configured to send you an email on test job failure, but they do not send detailed information about <em>what</em> has failed. In this blog post, I will show my simple <a href="https://github.com/bahmutov/cypress-email-results">cypress-email-results</a> plugin that can send an email after each Cypress run.</p><p><strong>Important:</strong> this plugin only sends the test results from the current Cypress instance. If you are using <a href="https://on.cypress.io/parallelization">Cypress parallelization</a> then each test runner will send its portion of the results.</p><h2><span id="install-and-use">Install and use</span></h2><p>I will install the plugin in the <a href="https://github.com/bahmutov/chat.io">bahmutov/chat.io</a> repo where I am testing a Chat application. The plugin is an NPM module that I install as a dev dependency.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress-email-results</span><br><span class="line">+ cypress-email-results@1.8.0</span><br></pre></td></tr></table></figure><p>In the Cypress plugins file, let&#39;s send an email after a failed test run (by default, the plugin sends an email after each run)</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://github.com/bahmutov/cypress-email-results</span></span><br><span class="line">  <span class="comment">// only configure the email plugin if the environment variable is set</span></span><br><span class="line">  <span class="keyword">if</span> (process.env.EMAIL_TO) &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;cypress-email-results&#x27;</span>)(on, config, &#123;</span><br><span class="line">      email: process.env.EMAIL_TO,</span><br><span class="line">      emailOnSuccess: <span class="literal">false</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="ci-configuration">CI configuration</span></h2><p>For my needs I have configured a SendGrid account, but you can pass any email transport module as an option</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;cypress-email-results&#x27;</span>)(on, config, &#123;</span><br><span class="line">  email: process.env.EMAIL_TO,</span><br><span class="line">  <span class="comment">// use your own email sender</span></span><br><span class="line">  transport: &#123; sendEmail ... &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Because I am using SendGrid, on GitHub Actions I set config values as secrets</p><p><img src="../images/email-results/ci-secrets.png" alt="Setting CI secrets"></p><p>On GitHub Actions I need to explicitly pass the secrets as environment variables when running the <a href="https://github.com/cypress-io/github-action">Cypress GitHub Action</a></p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="comment"># email test results after the tests are finished</span></span><br><span class="line">    <span class="attr">EMAIL_TO:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.EMAIL_TO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="comment"># pass SendGrid settings to the plugin via environment variables</span></span><br><span class="line">    <span class="attr">SENDGRID_HOST:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SENDGRID_HOST</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">SENDGRID_PORT:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SENDGRID_PORT</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">SENDGRID_USER:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SENDGRID_USER</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">SENDGRID_PASSWORD:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SENDGRID_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">SENDGRID_FROM:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SENDGRID_FROM</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>Let&#39;s push the code and let the CI run. We see the &quot;results emailed&quot; message at the end of the run.</p><p><img src="../images/email-results/emailed.png" alt="Cypress has emailed its test results"></p><p>The received email has all the information, including the Cypress Dashboard URL (via SendGrid redirect)</p><p><img src="../images/email-results/my-email.png" alt="Cypress test run results email"></p><p>Nice.</p><p><strong>Tip:</strong> to learn about Cypress test statuses like &quot;pending&quot; and &quot;skipped&quot;, read the blog post <a href="/blog/cypress-test-statuses/" title="Cypress Test Statuses">Cypress Test Statuses</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sometimes you run the Cypress end-to-end tests on CI and want to be notified quickly if something has failed. Most CIs can be configured 
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Re-run The Tests By Clicking A Checkbox</title>
    <link href="https://glebbahmutov.com/blog/re-run-the-tests-with-checkbox/"/>
    <id>https://glebbahmutov.com/blog/re-run-the-tests-with-checkbox/</id>
    <published>2022-02-09T05:00:00.000Z</published>
    <updated>2022-02-08T16:22:09.684Z</updated>
    
    <content type="html"><![CDATA[<p>I am heavy user of <a href="/blog/renovate-app/" title="Renovate App">Renovate App</a> that keeps <a href="/blog/keep-examples-up-to-date/" title="all my repos up-to-date">all my repos up-to-date</a>. One thing that is really nice and useful is a checkbox in the Renovate master GitHub issue that I can click to re-run the dependency check.</p><p><img src="../images/re-run/renovate.png" alt="A checkbox click in the GitHub issue triggers Renovate run"></p><p>If I click on that checkbox, the Renovate app runs and checks the dependencies. How does it do it? Can I use the same approach to re-run the tests when changing the <a href="/blog/pick-tests-using-pull-request/" title="tests I want to run via Pull Request">tests I want to run via Pull Request</a>? Turns out, it is pretty simple to set up using GitHub Actions.</p><blockquote class="pullquote"><p>🎁 You can find the example project in the repo <a href="https://github.com/bahmutov/todomvc-tests-circleci">bahmutov/todomvc-tests-circleci</a>. Specifically, see the GitHub Workflow file <a href="https://github.com/bahmutov/todomvc-tests-circleci/blob/main/.github/workflows/pr.yml">.github/workflows/pr.yml</a> and the file <a href="https://github.com/bahmutov/todomvc-tests-circleci/blob/main/.github/PULL_REQUEST_TEMPLATE.md">.github/PULL_REQUEST_TEMPLATE.md</a>.</p></blockquote><h2><span id="the-pull-request-template">The pull request template</span></h2><p>We can add a checkbox to the pull request file like this</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">To re-run the tests, pick the tags above then click the checkbox below</span><br><span class="line"></span><br><span class="line">- [ ] re-run the tests</span><br></pre></td></tr></table></figure><p>By default the checkbox is unfilled. The user can fill it by editing the pull request text or by clicking on the checkbox in the GitHub UI (assuming the user has the edit permission). Let&#39;s open a pull request and click on the checkbox.</p><p><img src="../images/re-run/check.gif" alt="Clicking on the checkbox"></p><p>We need to detect the click and run the tests.</p><h2><span id="github-actions">GitHub Actions</span></h2><p>The easiest way to detect the change in the checkbox is to run a GitHub workflow on pull request edit. You can run a workflow on different pull request events: opened, synchronized, closed, edited. We only are interested in the &quot;edited&quot; events.</p><figure class="highlight yml"><figcaption><span>.github/workflows/pr.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">pr</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">edited</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">trigger-tests:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># inspect the event, see if the user</span></span><br><span class="line">  <span class="comment"># has filled the checkbox &quot;re-run the tests&quot;</span></span><br></pre></td></tr></table></figure><p>To detect if the user clicked the previously empty checkbox, we need to inspect the <code>github.event</code> object provided to the GitHub action.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Dump</span> <span class="string">GitHub</span> <span class="string">event</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">GITHUB_CONTEXT:</span> <span class="string">$&#123;&#123;</span> <span class="string">toJson(github.event)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;$GITHUB_CONTEXT&quot;</span></span><br></pre></td></tr></table></figure><p>The dumped JSON object shows the change and the current body text of the pull request.</p><p><img src="../images/re-run/pr1.png" alt="The body of the pull request before the edit"></p><p><img src="../images/re-run/pr2.png" alt="The current body of the pull request"></p><p>Thus we can compare the <code>event.changes.body.from</code> and the <code>event.pull_request.body</code> text to see if the checkbox flipped from empty to filled. I have written this check in the <a href="https://github.com/bahmutov/should-run-github-action">bahmutov/should-run-github-action</a> and created a reusable GitHub action everyone can use to determine if the user has filled the checkbox. In our project we use by providing an <code>id</code> and passing the GH event as an environment variable <code>GITHUB_EVENT</code>.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">the</span> <span class="string">PR</span></span><br><span class="line">  <span class="comment"># https://github.com/bahmutov/should-run-github-action</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">bahmutov/should-run-github-action@v1</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">check-pr</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">GITHUB_EVENT:</span> <span class="string">$&#123;&#123;</span> <span class="string">toJson(github.event)</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>After that we can look at the <code>check-pr</code> step and the output variable it sets called <code>shouldRun</code> to decide if we need to run the tests.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">the</span> <span class="string">PR</span></span><br><span class="line">  <span class="comment"># https://github.com/bahmutov/should-run-github-action</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">bahmutov/should-run-github-action@v1</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">check-pr</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">GITHUB_EVENT:</span> <span class="string">$&#123;&#123;</span> <span class="string">toJson(github.event)</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># we could trigger the tests to run on CircleCI</span></span><br><span class="line"><span class="comment"># or we can just run them here using the action</span></span><br><span class="line"><span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">if</span> <span class="string">the</span> <span class="string">user</span> <span class="string">filled</span> <span class="string">the</span> <span class="string">checkbox</span></span><br><span class="line">  <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.check-pr.outputs.shouldRun</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>This is how we can run the tests only when the user filled the checkbox. Of course, if the box is filled already and we click it the first time, it is emptied. The workflow runs, but immediately skips the test step. Then we click the checkbox and the tests run.</p><p><img src="../images/re-run/workflows.png" alt="All edits trigger the workflow, but it quickly finishes"></p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/pick-tests-using-pull-request/" title="Pick Tests To Run Using The Pull Request Text">Pick Tests To Run Using The Pull Request Text</a></li><li><a href="/blog/how-to-keep-cypress-tests-in-another-repo/" title="How to Keep Cypress Tests in Another Repo While Using GitHub Actions">How to Keep Cypress Tests in Another Repo While Using GitHub Actions</a></li><li><a href="/blog/how-to-keep-cypress-tests-in-another-repo-with-circleci/" title="How to Keep Cypress Tests in Another Repo While Using CircleCI">How to Keep Cypress Tests in Another Repo While Using CircleCI</a></li><li><a href="/blog/tag-tests/" title="How To Tag And Run End-to-End Tests">How To Tag And Run End-to-End Tests</a></li><li><a href="/blog/trying-github-actions/" title="Trying GitHub Actions">Trying GitHub Actions</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I am heavy user of &lt;a href=&quot;/blog/renovate-app/&quot; title=&quot;Renovate App&quot;&gt;Renovate App&lt;/a&gt; that keeps &lt;a href=&quot;/blog/keep-examples-up-to-date
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="advice" scheme="https://glebbahmutov.com/blog/tags/advice/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>Control React Applications From Cypress Tests</title>
    <link href="https://glebbahmutov.com/blog/react-app-actions/"/>
    <id>https://glebbahmutov.com/blog/react-app-actions/</id>
    <published>2022-02-05T05:00:00.000Z</published>
    <updated>2022-02-07T13:39:11.108Z</updated>
    
    <content type="html"><![CDATA[<p>In the previous blog post <a href="/blog/react-state-from-e2e-tests/" title="Access React Components From Cypress E2E Tests">Access React Components From Cypress E2E Tests</a> I have shown how the test code could get to the React component&#39;s internals, similar to what the React DevTools browser extension does. In this blog post, I will show how to use this approach to drastically speed up end-to-end tests. The idea is to control the application by setting its internal state rather than using the page UI in every test. We will split a single long test into individual tests, each starting the app where it needs it to be in an instant, rather than going through already tested UI commands. It is similar to what I have shown a long time ago in the blog post <a href="https://www.cypress.io/blog/2019/10/29/split-a-very-long-cypress-test-into-shorter-ones-using-app-actions/">Split a very long Cypress test into shorter ones using App Actions</a>. But the approach described in this blog post <em>does not need any modifications to the application code</em>, which is a big deal.</p><h2><span id="a-single-long-test">A single long test</span></h2><p>Imagine our application contains several forms to fill. The test has to fill the first page before the second page appears. Once the second page is filled, the third page is shown. After filling the third page, the form is submitted and the test is done.</p><figure class="highlight js"><figcaption><span>cypress/integration/single-test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="keyword">const</span> typeOptions = &#123; <span class="attr">delay</span>: <span class="number">35</span> &#125;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;books hotel (all pages)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;**First page**&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Book Hotel 1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;#first&#x27;</span>).type(<span class="string">&#x27;Joe&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#last&#x27;</span>).type(<span class="string">&#x27;Smith&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#email&#x27;</span>).type(<span class="string">&#x27;my-email@foo.bar&#x27;</span>, typeOptions)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;#field1a&#x27;</span>).type(<span class="string">&#x27;Field 1a text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field1b&#x27;</span>).type(<span class="string">&#x27;Field 1b text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field1c&#x27;</span>).type(<span class="string">&#x27;Field 1c text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field1d&#x27;</span>).type(<span class="string">&#x27;Field 1d text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field1e&#x27;</span>).type(<span class="string">&#x27;Field 1e text value&#x27;</span>, typeOptions)</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">&#x27;Next&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;**Second page**&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Book Hotel 2&#x27;</span>)</span><br><span class="line">  <span class="comment">// we are on the second page</span></span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;#username&#x27;</span>).type(<span class="string">&#x27;JoeSmith&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field2a&#x27;</span>).type(<span class="string">&#x27;Field 2a text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field2b&#x27;</span>).type(<span class="string">&#x27;Field 2b text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field2c&#x27;</span>).type(<span class="string">&#x27;Field 2c text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field2d&#x27;</span>).type(<span class="string">&#x27;Field 2d text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field2e&#x27;</span>).type(<span class="string">&#x27;Field 2e text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field2f&#x27;</span>).type(<span class="string">&#x27;Field 2f text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field2g&#x27;</span>).type(<span class="string">&#x27;Field 2g text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.contains(<span class="string">&#x27;Next&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;**Third page**&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Book Hotel 3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;#field3a&#x27;</span>).type(<span class="string">&#x27;Field 3a text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field3b&#x27;</span>).type(<span class="string">&#x27;Field 3b text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field3c&#x27;</span>).type(<span class="string">&#x27;Field 3c text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field3d&#x27;</span>).type(<span class="string">&#x27;Field 3d text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field3e&#x27;</span>).type(<span class="string">&#x27;Field 3e text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field3f&#x27;</span>).type(<span class="string">&#x27;Field 3f text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field3g&#x27;</span>).type(<span class="string">&#x27;Field 3g text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sign up&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Thank you&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test takes almost 19 seconds to finish. Of course, it is the slowest end-to-end test in the world, but you have to sit and wait for it, even if you are only interested in changing how it tests the form submission for example.</p><p><img src="../images/react-app-actions/single.png" alt="A single test going through all the page steps"></p><h2><span id="the-app-state-after-the-first-page">The app state after the first page</span></h2><p>All the fields we fill on the first page go into the internal state of the application. The application creates a form for each page and passes the change handler function as a prop.</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Step1 <span class="keyword">from</span> <span class="string">&#x27;./Step1.jsx&#x27;</span></span><br><span class="line"></span><br><span class="line">handleChange = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, value &#125; = event.target</span><br><span class="line">  <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">    [name]: value,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handleSubmit = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  event.preventDefault()</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;submitting state&#x27;</span>, <span class="built_in">this</span>.state)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; email, username &#125; = <span class="built_in">this</span>.state</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">    submitted: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  alert(<span class="string">`Your registration detail: \n</span></span><br><span class="line"><span class="string">          Email: <span class="subst">$&#123;email&#125;</span> \n</span></span><br><span class="line"><span class="string">          Username: <span class="subst">$&#123;username&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;Step1</span><br><span class="line">  currentStep=&#123;<span class="built_in">this</span>.state.currentStep&#125;</span><br><span class="line">  handleChange=&#123;<span class="built_in">this</span>.handleChange&#125;</span><br><span class="line">  email=&#123;<span class="built_in">this</span>.state.email&#125;</span><br><span class="line">/&gt;</span><br><span class="line">&lt;Step2</span><br><span class="line">  currentStep=&#123;<span class="built_in">this</span>.state.currentStep&#125;</span><br><span class="line">  handleChange=&#123;<span class="built_in">this</span>.handleChange&#125;</span><br><span class="line">  username=&#123;<span class="built_in">this</span>.state.username&#125;</span><br><span class="line">/&gt;</span><br><span class="line">&lt;Step3</span><br><span class="line">  currentStep=&#123;<span class="built_in">this</span>.state.currentStep&#125;</span><br><span class="line">  handleChange=&#123;<span class="built_in">this</span>.handleChange&#125;</span><br><span class="line">  password=&#123;<span class="built_in">this</span>.state.password&#125;</span><br><span class="line">  submitted=&#123;<span class="built_in">this</span>.state.submitted&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>Thus we can validate that the <code>Step1</code> component is working correctly by checking the state after we fill the form through the page.</p><figure class="highlight js"><figcaption><span>cypress/integration/actions.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;first page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.log(<span class="string">&#x27;**First page**&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Book Hotel 1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;#first&#x27;</span>).type(<span class="string">&#x27;Joe&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#last&#x27;</span>).type(<span class="string">&#x27;Smith&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#email&#x27;</span>).type(<span class="string">&#x27;my-email@foo.bar&#x27;</span>, typeOptions)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;#field1a&#x27;</span>).type(<span class="string">&#x27;Field 1a text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field1b&#x27;</span>).type(<span class="string">&#x27;Field 1b text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field1c&#x27;</span>).type(<span class="string">&#x27;Field 1c text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field1d&#x27;</span>).type(<span class="string">&#x27;Field 1d text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field1e&#x27;</span>).type(<span class="string">&#x27;Field 1e text value&#x27;</span>, typeOptions)</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">&#x27;Next&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;Second page&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Book Hotel 2&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/react-app-actions/step1.gif" alt="The first page filled by the test"></p><p>We are testing the page just like a human user would - by going to each input field and typing text. Once the fields are filled, we click the button &quot;Next&quot; and check if we end up on the second page. But how do we check if the values we typed really were stored correctly by the application?</p><p>By getting access to the application state through React internals. I wrote <a href="https://github.com/bahmutov/cypress-react-app-actions">cypress-react-app-actions</a> plugin that gets to the React component from a DOM element, similar to how React DevTools browser extension works.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress-react-app-actions</span><br><span class="line">+ cypress-react-app-actions@1.0.2</span><br></pre></td></tr></table></figure><p>We should import the plugin from our spec or from the support file</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/bahmutov/cypress-react-app-actions</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-react-app-actions&#x27;</span></span><br><span class="line"><span class="comment">// now we can use the child command .getComponent()</span></span><br></pre></td></tr></table></figure><p>Let&#39;s see what fields the component has at the end of the test above.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.log(<span class="string">&#x27;Second page&#x27;</span>)</span><br><span class="line">cy.contains(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Book Hotel 2&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">  .getComponent()</span><br><span class="line">  .its(<span class="string">&#x27;state&#x27;</span>)</span><br><span class="line">  .then(<span class="built_in">console</span>.log)</span><br></pre></td></tr></table></figure><p><img src="../images/react-app-actions/state.png" alt="The application state object after finishing step one"></p><p><strong>Tip:</strong> you can see all component fields and methods by printing it to the console with <code>cy.get(&#39;form&#39;).getComponent().then(console.log)</code> command.</p><p><img src="../images/react-app-actions/component.png" alt="The React component"></p><p>The component&#39;s state should always include the field values we have typed, so let&#39;s verify this. We could use &quot;deep.equal&quot; or &quot;deep.include&quot; assertion, or even <a href="https://github.com/bahmutov/cy-spok">cy-spok</a> here.</p><figure class="highlight js"><figcaption><span>cypress/integration/actions.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> startOfSecondPageState = &#123;</span><br><span class="line">  currentStep: <span class="number">2</span>,</span><br><span class="line">  email: <span class="string">&#x27;my-email@foo.bar&#x27;</span>,</span><br><span class="line">  field1a: <span class="string">&#x27;Field 1a text value&#x27;</span>,</span><br><span class="line">  field1b: <span class="string">&#x27;Field 1b text value&#x27;</span>,</span><br><span class="line">  field1c: <span class="string">&#x27;Field 1c text value&#x27;</span>,</span><br><span class="line">  field1d: <span class="string">&#x27;Field 1d text value&#x27;</span>,</span><br><span class="line">  field1e: <span class="string">&#x27;Field 1e text value&#x27;</span>,</span><br><span class="line">  first: <span class="string">&#x27;Joe&#x27;</span>,</span><br><span class="line">  last: <span class="string">&#x27;Smith&#x27;</span>,</span><br><span class="line">  username: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;first page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  cy.contains(<span class="string">&#x27;Next&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;Second page&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Book Hotel 2&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">    .getComponent()</span><br><span class="line">    .its(<span class="string">&#x27;state&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;deep.equal&#x27;</span>, startOfSecondPageState)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/react-app-actions/state-check.png" alt="The internal state is always the same after the first page is finished"></p><h2><span id="the-second-page">The second page</span></h2><p>Now let&#39;s verify that we can fill the second page of the form. In order to get to the second page, we need to fill the form on the first page. Hmm, we know it works, so repeating the same page commands does not give us any more confidence in our application. It just slows down the second test. What we can do instead is to set the application to the <em>state</em> after the first page is filled. We know this state - we have verified it at the end of the first test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the end of the first test</span></span><br><span class="line">cy.get(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">  .getComponent()</span><br><span class="line">  .its(<span class="string">&#x27;state&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;deep.equal&#x27;</span>, startOfSecondPageState)</span><br></pre></td></tr></table></figure><p>Thus we can set the app&#39;s state to the object <code>startOfSecondPageState</code> and the application will behave as if we went through the form, filling it by typing. It is the same application behavior.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;second page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">&#x27;form&#x27;</span>).getComponent().invoke(<span class="string">&#x27;setState&#x27;</span>, startOfSecondPageState)</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;**Second page**&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Book Hotel 2&#x27;</span>)</span><br><span class="line">  <span class="comment">// start filling input fields on page 2</span></span><br><span class="line">  cy.get(<span class="string">&#x27;#username&#x27;</span>).type(<span class="string">&#x27;JoeSmith&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field2a&#x27;</span>).type(<span class="string">&#x27;Field 2a text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field2b&#x27;</span>).type(<span class="string">&#x27;Field 2b text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field2c&#x27;</span>).type(<span class="string">&#x27;Field 2c text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field2d&#x27;</span>).type(<span class="string">&#x27;Field 2d text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field2e&#x27;</span>).type(<span class="string">&#x27;Field 2e text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field2f&#x27;</span>).type(<span class="string">&#x27;Field 2f text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.get(<span class="string">&#x27;#field2g&#x27;</span>).type(<span class="string">&#x27;Field 2g text value&#x27;</span>, typeOptions)</span><br><span class="line">  cy.contains(<span class="string">&#x27;Next&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;Third page&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Book Hotel 3&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/react-app-actions/second.gif" alt="Testing the second page by starting the application in the known state"></p><p>Beautiful. How does the application finish? Again - it has a certain internal state we can verify.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> startOfThirdPageState = &#123;</span><br><span class="line">  ...startOfSecondPageState,</span><br><span class="line">  currentStep: <span class="number">3</span>,</span><br><span class="line">  username: <span class="string">&#x27;JoeSmith&#x27;</span>,</span><br><span class="line">  field2a: <span class="string">&#x27;Field 2a text value&#x27;</span>,</span><br><span class="line">  field2b: <span class="string">&#x27;Field 2b text value&#x27;</span>,</span><br><span class="line">  field2c: <span class="string">&#x27;Field 2c text value&#x27;</span>,</span><br><span class="line">  field2d: <span class="string">&#x27;Field 2d text value&#x27;</span>,</span><br><span class="line">  field2e: <span class="string">&#x27;Field 2e text value&#x27;</span>,</span><br><span class="line">  field2f: <span class="string">&#x27;Field 2f text value&#x27;</span>,</span><br><span class="line">  field2g: <span class="string">&#x27;Field 2g text value&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">cy.log(<span class="string">&#x27;Third page&#x27;</span>)</span><br><span class="line">cy.contains(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Book Hotel 3&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">  .getComponent()</span><br><span class="line">  .its(<span class="string">&#x27;state&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;deep.equal&#x27;</span>, startOfThirdPageState)</span><br></pre></td></tr></table></figure><h2><span id="the-third-page">The third page</span></h2><p>We similarly start the third test to verify we can fill the form on the third page. We set the state to the same state object the second test has finished with. Even better - we know the user will submit the form, so we can spy on the component&#39;s method <code>handleSubmit</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;third page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">    .getComponent()</span><br><span class="line">    .then(<span class="function">(<span class="params">comp</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.spy(comp, <span class="string">&#x27;handleSubmit&#x27;</span>).as(<span class="string">&#x27;handleSubmit&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .invoke(<span class="string">&#x27;setState&#x27;</span>, startOfThirdPageState)</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;**Third page**&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Book Hotel 3&#x27;</span>)</span><br><span class="line">  ...</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sign up&#x27;</span>).click()</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Thank you&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;form&#x27;</span>).parent().getComponent().its(<span class="string">&#x27;state&#x27;</span>).should(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">    submitted: <span class="literal">true</span>,</span><br><span class="line">    username: <span class="string">&#x27;JoeSmith&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the spy is called once</span></span><br><span class="line">  cy.get(<span class="string">&#x27;@handleSubmit&#x27;</span>).should(<span class="string">&#x27;be.calledOnce&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/react-app-actions/third.png" alt="The third test verifies the form was submitted"></p><p>It is up to the developer to decide which application internal properties to verify.</p><h2><span id="invoking-app-actions">Invoking app actions</span></h2><p>We can verify the internal application state and we can call the component&#39;s methods. For example, we can call the form&#39;s submit method ourselves.</p><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">handleSubmit = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  event.preventDefault()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; email, username &#125; = <span class="built_in">this</span>.state</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">    submitted: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  alert(<span class="string">`Your registration detail: \n</span></span><br><span class="line"><span class="string">          Email: <span class="subst">$&#123;email&#125;</span> \n</span></span><br><span class="line"><span class="string">          Username: <span class="subst">$&#123;username&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/integration/actions.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;submits the form&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">&#x27;form&#x27;</span>).getComponent().invoke(<span class="string">&#x27;setState&#x27;</span>, beforeSubmitState)</span><br><span class="line">  cy.window().then(<span class="function">(<span class="params">win</span>) =&gt;</span> cy.spy(win, <span class="string">&#x27;alert&#x27;</span>).as(<span class="string">&#x27;alert&#x27;</span>))</span><br><span class="line">  cy.get(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">    .getComponent()</span><br><span class="line">    .invoke(<span class="string">&#x27;handleSubmit&#x27;</span>, &#123;</span><br><span class="line">      preventDefault: cy.spy().as(<span class="string">&#x27;preventDefault&#x27;</span>),</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// check the UI</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Thank you&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  <span class="comment">// check the application&#x27;s behavior</span></span><br><span class="line">  cy.get(<span class="string">&#x27;@preventDefault&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">  <span class="comment">// the alert message includes the username and the email</span></span><br><span class="line">  cy.get(<span class="string">&#x27;@alert&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;firstCall.args.0&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;include&#x27;</span>, beforeSubmitState.email)</span><br><span class="line">    .and(<span class="string">&#x27;include&#x27;</span>, beforeSubmitState.username)</span><br><span class="line">  <span class="comment">// verify the form&#x27;s state changes</span></span><br><span class="line">  cy.get(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">    .getComponent()</span><br><span class="line">    .its(<span class="string">&#x27;state&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;submitted&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We are verifying the application&#39;s behavior during the submit action.</p><p><img src="../images/react-app-actions/submit.png" alt="Invoking the submit application action and testing the behavior and the state changes"></p><p>Not only the last test is powerful and gives us insight into the application&#39;s behavior - it is also fast. The original single test took 19 seconds to finish filling the form and submitting it. The focused test &quot;submits the form&quot; above finished in 190ms which is 100 times faster.</p><h2><span id="video">Video</span></h2><p>I have recorded a video showing the main points of this blog post. Watch at below.</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/d6zggQySjQM" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the previous blog post &lt;a href=&quot;/blog/react-state-from-e2e-tests/&quot; title=&quot;Access React Components From Cypress E2E Tests&quot;&gt;Access React
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="react" scheme="https://glebbahmutov.com/blog/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Access React Components From Cypress E2E Tests</title>
    <link href="https://glebbahmutov.com/blog/react-state-from-e2e-tests/"/>
    <id>https://glebbahmutov.com/blog/react-state-from-e2e-tests/</id>
    <published>2022-02-01T05:00:00.000Z</published>
    <updated>2022-02-05T17:38:07.192Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s take a look at a simple React component with some internal state. You can find this component in <a href="https://github.com/bahmutov/react-counter/blob/main/src/Example.js">src/Example.js</a> file of my repo <a href="https://github.com/bahmutov/react-counter">bahmutov/react-counter</a>.</p><figure class="highlight jsx"><figcaption><span>src/Example.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./Example.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props)</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      count: props.initialCount || <span class="number">0</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">double</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;doubling the current value&#x27;</span>, <span class="built_in">this</span>.state.count)</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123; <span class="attr">count</span>: <span class="built_in">this</span>.state.count * <span class="number">2</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">&quot;Example&quot;</span>&gt;</span><br><span class="line">        &lt;p className=<span class="string">&quot;full&quot;</span>&gt;</span><br><span class="line">          You clicked &lt;span data-cy=<span class="string">&quot;count&quot;</span>&gt;&#123;<span class="built_in">this</span>.state.count&#125;&lt;/span&gt; times</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;button</span><br><span class="line">          className=<span class="string">&quot;full&quot;</span></span><br><span class="line">          data-cy=<span class="string">&quot;add&quot;</span></span><br><span class="line">          onClick=&#123;<span class="function">() =&gt;</span> <span class="built_in">this</span>.setState(&#123; <span class="attr">count</span>: <span class="built_in">this</span>.state.count + <span class="number">1</span> &#125;)&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          Click me</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;button className=<span class="string">&quot;full&quot;</span> data-cy=<span class="string">&quot;double&quot;</span> onClick=&#123;<span class="function">() =&gt;</span> <span class="built_in">this</span>.double()&#125;&gt;</span><br><span class="line">          Double me</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using end-to-end tests we can verify the code works by observing the DOM elements the component renders on the page.</p><figure class="highlight js"><figcaption><span>cypress/integration/e2e.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;counts&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=add]&#x27;</span>).click().click()</span><br><span class="line">  cy.contains(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Double&#x27;</span>).click()</span><br><span class="line">  cy.contains(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test only works with the application through the HTML elements.</p><p><img src="../images/react-counter/double.png" alt="E2E test"></p><h2><span id="access-the-react-component">Access the React component</span></h2><p>Can we find the React <em>component</em> instance? Yes, using the plugin <a href="https://github.com/abhinaba-ghosh/cypress-react-selector#readme">cypress-react-selector</a> we can find the <code>Example</code> component, rather than the DOM elements it renders. That is very convenient for checking the internal state of the component. For example, we could verify that clicking the button &quot;Click me&quot; three times changes the state of the component.</p><figure class="highlight js"><figcaption><span>cypress/integration/three.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-react-selector&#x27;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;checks the state&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=add]&#x27;</span>).click().click().click()</span><br><span class="line">  cy.contains(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// find the React component</span></span><br><span class="line">  cy.waitForReact(<span class="number">1000</span>, <span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// three equivalent ways of checking component &quot;Example&quot; with &quot;count: 3&quot; state</span></span><br><span class="line">  cy.getReact(<span class="string">&#x27;Example&#x27;</span>).getCurrentState().should(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;count&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  cy.getReact(<span class="string">&#x27;Example&#x27;</span>).getCurrentState().should(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">    count: <span class="number">3</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.getReact(<span class="string">&#x27;Example&#x27;</span>, &#123; <span class="attr">state</span>: &#123; <span class="attr">count</span>: <span class="number">3</span> &#125; &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The tests find the component named <code>Example</code> and confirm its internal state.</p><p><img src="../images/react-counter/three.png" alt="E2E test that checks the React component state"></p><p><strong>Tip:</strong> for checking a complex object, <a href="https://github.com/bahmutov/cy-spok">cy-spok</a> is the best.</p><p>When the application creates the <code>Example</code> component, it sets its prop <code>initialCount</code>, which we can use with <code>cy.getReact(&#39;Example&#39;)</code> to find the right component.</p><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Example initialCount=&#123;<span class="number">0</span>&#125; /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/integration/prop.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-react-selector&#x27;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;uses prop to find the component&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// find the React component</span></span><br><span class="line">  cy.waitForReact(<span class="number">1000</span>, <span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">  cy.react(<span class="string">&#x27;Example&#x27;</span>, &#123; <span class="attr">props</span>: &#123; <span class="attr">initialCount</span>: <span class="number">0</span> &#125; &#125;)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    .contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Click me&#x27;</span>)</span><br><span class="line">    .click()</span><br><span class="line">    .click()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/react-counter/prop.png" alt="Finding a component by its prop"></p><blockquote class="pullquote"><p>🎓 The plugin <code>cypress-react-selector</code> provides two high-level commands for finding components. If you need to find the DOM element by React component prop or state, use the <code>cy.react</code> command. If you want to find and access the React component instance, use the <code>cy.getReact</code> command.</p></blockquote><p>In a sense, what we are able to do is what the React DevTools browser extension shows for the component.</p><p><img src="../images/react-counter/dev.png" alt="The Example component in the React DevTools"></p><h2><span id="trigger-component-methods">Trigger component methods</span></h2><p>Our <code>Example</code> component has an instance method <code>double</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">double</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;doubling the current value&#x27;</span>, <span class="built_in">this</span>.state.count)</span><br><span class="line">  <span class="built_in">this</span>.setState(&#123; <span class="attr">count</span>: <span class="built_in">this</span>.state.count * <span class="number">2</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Can we somehow call that method from Cypress test? From the React component we need to get to the React Fiber, here is my solution following <a href="https://stackoverflow.com/questions/29321742/react-getting-a-component-from-a-dom-element-for-debugging/39165137#39165137">this StackOverflow answer</a>.</p><figure class="highlight js"><figcaption><span>cypress/integration/utils.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// note that I am not even using cypress-react-selector here</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getReactFiber = <span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> key = <span class="built_in">Object</span>.keys(el).find(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      key.startsWith(<span class="string">&#x27;__reactFiber$&#x27;</span>) || <span class="comment">// react 17+</span></span><br><span class="line">      key.startsWith(<span class="string">&#x27;__reactInternalInstance$&#x27;</span>) <span class="comment">// react &lt;17</span></span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (!key) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> el[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// react 16+</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getComponent = <span class="function">(<span class="params">fiber</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> parentFiber = fiber.return</span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">typeof</span> parentFiber.type == <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    parentFiber = parentFiber.return</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> parentFiber</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Given a DOM element, we can grab the fiber and the component reference.</p><figure class="highlight js"><figcaption><span>cypress/integration/call-method.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getReactFiber, getComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;calls Example double()&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=add]&#x27;</span>).click().click()</span><br><span class="line">  cy.contains(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;.Example&#x27;</span>).then(<span class="function">(<span class="params">el$</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fiber = getReactFiber(el$[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">console</span>.log(fiber)</span><br><span class="line">    <span class="keyword">const</span> component = getComponent(fiber)</span><br><span class="line">    <span class="built_in">console</span>.log(component.stateNode)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> In the component&#39;s prototype, we can discover common methods like <code>setState</code> and <code>double</code>.</p><p><img src="../images/react-counter/fiber.png" alt="Getting to the component reference from the DOM element"></p><p>Let&#39;s call the method <code>double()</code> from the test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;.Example&#x27;</span>).then(<span class="function">(<span class="params">el$</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> fiber = getReactFiber(el$[<span class="number">0</span>])</span><br><span class="line">  <span class="built_in">console</span>.log(fiber)</span><br><span class="line">  <span class="keyword">const</span> component = getComponent(fiber)</span><br><span class="line">  <span class="built_in">console</span>.log(component.stateNode)</span><br><span class="line">  cy.log(<span class="string">&#x27;calling **double()**&#x27;</span>)</span><br><span class="line">  component.stateNode.double()</span><br><span class="line">&#125;)</span><br><span class="line">cy.contains(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/react-counter/call-double.png" alt="Calling the component&#39;s method and then checking the updated page"></p><h2><span id="custom-command">Custom command</span></h2><p>Let&#39;s take our code to access the React component and make it into a <a href="https://on.cypress.io/custom-commands">child custom command</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getReactFiber, getComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"></span><br><span class="line">Cypress.Commands.add(<span class="string">&#x27;getComponent&#x27;</span>, &#123; <span class="attr">prevSubject</span>: <span class="string">&#x27;element&#x27;</span> &#125;, <span class="function">(<span class="params">$el</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> fiber = getReactFiber($el[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">if</span> (!fiber) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Could not find React Fiber&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> component = getComponent(fiber)</span><br><span class="line">  <span class="keyword">if</span> (!component) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Could not find React Component&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!component.stateNode) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Could not find React Component stateNode&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> component.stateNode</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Using this command we can directly access the component&#39;s state, overwrite it, and call the component&#39;s methods.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;checks and modifies state&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=add]&#x27;</span>).click().click()</span><br><span class="line">  cy.contains(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;.Example&#x27;</span>)</span><br><span class="line">    .as(<span class="string">&#x27;example&#x27;</span>)</span><br><span class="line">    .getComponent()</span><br><span class="line">    .its(<span class="string">&#x27;state&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;deep.include&#x27;</span>, &#123; <span class="attr">count</span>: <span class="number">2</span> &#125;)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;@example&#x27;</span>).getComponent().invoke(<span class="string">&#x27;double&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;@example&#x27;</span>).getComponent().invoke(<span class="string">&#x27;double&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;**call setState**&#x27;</span>)</span><br><span class="line">  <span class="comment">// set the application into the state that is normally impossible</span></span><br><span class="line">  <span class="comment">// to reach by just using the page interactions</span></span><br><span class="line">  cy.get(<span class="string">&#x27;@example&#x27;</span>).getComponent().invoke(<span class="string">&#x27;setState&#x27;</span>, &#123; <span class="attr">count</span>: -<span class="number">99</span> &#125;)</span><br><span class="line">  cy.contains(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;-99&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/react-counter/get-component.png" alt="Accessing the component using the custom command"></p><h2><span id="a-word-of-caution">A word of caution</span></h2><p>Should you call the internal component methods from your end-to-end tests? Only in the extraordinary circumstances, I think. If there is no other way to verify the behavior of the application or trigger an application action, you could. At the same time, remember that you are tying your tests to the implementation, which will make the tests harder to update. But sometimes we need to call these &quot;app actions&quot; to get to the data state we need to test.</p><h2><span id="links">Links</span></h2><ul><li><a href="https://github.com/bahmutov/react-counter">bahmutov/react-counter</a> has the source code for this repo</li><li>Blog post <a href="/blog/react-app-actions/" title="Control React Applications From Cypress Tests">Control React Applications From Cypress Tests</a> shows the continuation of this work.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s take a look at a simple React component with some internal state. You can find this component in &lt;a href=&quot;https://github.com/ba
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="react" scheme="https://glebbahmutov.com/blog/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Repeating Tests</title>
    <link href="https://glebbahmutov.com/blog/repeat-tests/"/>
    <id>https://glebbahmutov.com/blog/repeat-tests/</id>
    <published>2022-01-31T05:00:00.000Z</published>
    <updated>2022-02-01T14:29:37.818Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine you are doubting if a test works consistently. You could <a href="/blog/burning-tests/" title="run it using cypress-grep locally">run it using cypress-grep locally</a>. But what if someone working on the backend API comes in and asks if they could launch the tests too? You could give them the command line utility <a href="https://github.com/bahmutov/run-cy-on-ci">run-cy-on-ci</a> to launch the tests from the terminal. Or you could let them launch the tests from the GitHub Actions page and it is much much simpler procedure.</p><blockquote class="pullquote"><p>🎁 You can find these examples in the repo <a href="https://github.com/bahmutov/test-todomvc-using-app-actions">bahmutov/test-todomvc-using-app-actions</a>.</p></blockquote><h2><span id="run-a-test-n-times">Run a test N times</span></h2><p>Using the plugin <a href="https://github.com/cypress-io/cypress-grep">cypress-grep</a> you can select the test to run using a part of its title and skip all other tests and specs. In our GitHub Actions workflow <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/blob/master/.github/workflows/repeat-test.yml">repeat-test.yml</a> we can pass the <code>grep</code> and <code>burn</code> parameters connecting the user interface to the test run.</p><figure class="highlight yml"><figcaption><span>.github/workflows/repeat-test.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">repeat-test</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Lets</span> <span class="string">the</span> <span class="string">user</span> <span class="string">run</span> <span class="string">a</span> <span class="string">test</span> <span class="string">by</span> <span class="string">title</span> <span class="string">N</span> <span class="string">times</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">title:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Full</span> <span class="string">or</span> <span class="string">part</span> <span class="string">of</span> <span class="string">the</span> <span class="string">test</span> <span class="string">title</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">n:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Number</span> <span class="string">of</span> <span class="string">times</span> <span class="string">to</span> <span class="string">repeat</span> <span class="string">the</span> <span class="string">test</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">default:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">integer</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">repeat-test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">test</span> <span class="string">N</span> <span class="string">times</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">start-quiet</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">&#x27;grep=$<span class="template-variable">&#123;&#123; github.event.inputs.title &#125;&#125;</span>,burn=$<span class="template-variable">&#123;&#123; github.event.inputs.n &#125;&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure><p>All the user needs to do is to enter a part of the test&#39;s title and pick the number of times to run the test.</p><p><img src="../images/repeat-tests/repeat-test.png" alt="Start the workflow to run a test five times in a row"></p><p>The same test selected by its title is repeated five times in a row</p><p><img src="../images/repeat-tests/five.png" alt="The same test has been repeated fives times"></p><h2><span id="run-all-tests-tagged-x-n-times">Run all tests tagged X N times</span></h2><p>In my repo, I organize the tests using tags, see <a href="/blog/tag-tests/" title="How To Tag And Run End-to-End Tests">How To Tag And Run End-to-End Tests</a>. If I want to run all tests tagged <code>@editing</code>, I need a different workflow <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/blob/master/.github/workflows/repeat-tag.yml">repeat-tag.yml</a> to pass the tag value using <code>grepTag</code> variable to the <code>cypress-grep</code> plugin.</p><figure class="highlight yml"><figcaption><span>.github/workflows/repeat-tag.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">repeat-tag</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Lets</span> <span class="string">the</span> <span class="string">user</span> <span class="string">run</span> <span class="string">all</span> <span class="string">the</span> <span class="string">tests</span> <span class="string">with</span> <span class="string">specific</span> <span class="string">tag</span> <span class="string">N</span> <span class="string">times</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">tag:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Tag</span> <span class="string">to</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">choice</span></span><br><span class="line">        <span class="attr">options:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;@adding&#x27;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;@complete&#x27;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;@editing&#x27;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;@item&#x27;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;@persistence&#x27;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;@regression&#x27;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;@routing&#x27;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;@sanity&#x27;</span></span><br><span class="line">      <span class="attr">n:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Number</span> <span class="string">of</span> <span class="string">times</span> <span class="string">to</span> <span class="string">repeat</span> <span class="string">the</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">default:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">integer</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">repeat-tag:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">tagged</span> <span class="string">tests</span> <span class="string">N</span> <span class="string">times</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">start-quiet</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">&#x27;grepTags=$<span class="template-variable">&#123;&#123; github.event.inputs.tag &#125;&#125;</span>,burn=$<span class="template-variable">&#123;&#123; github.event.inputs.n &#125;&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> use <a href="https://github.com/bahmutov/find-cypress-specs">find-cypress-specs</a> utility to print all available test tags.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --tags</span><br><span class="line"></span><br><span class="line">Tag           Tests</span><br><span class="line">------------  -----</span><br><span class="line">@adding       6</span><br><span class="line">@complete     6</span><br><span class="line">@editing      5</span><br><span class="line">@item         3</span><br><span class="line">@persistence  1</span><br><span class="line">@regression   17</span><br><span class="line">@routing      5</span><br><span class="line">@sanity       8</span><br></pre></td></tr></table></figure><p>Let&#39;s launch the <code>@editing</code> tests and run them 3 times each.</p><p><img src="../images/repeat-tests/launch-tag.png" alt="Launching workflow to run all tests tagged @editing three times in a row"></p><p><img src="../images/repeat-tests/three.png" alt="Each tagged test ran three times"></p><h2><span id="run-a-test-file-n-times">Run a test file N times</span></h2><p>Finally, let&#39;s imagine we want to run a particular test file (spec) several times. We can install the plugin <a href="https://github.com/bahmutov/cypress-repeat">cypress-repeat</a> that uses Cypress NPM module API to run the test runner N times. For example, we can run the spec <code>cypress/integration/item-spec.js</code> twice using the terminal command</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx cypress-repeat run --spec cypress/integration/item-spec.js -n 2 ...</span><br></pre></td></tr></table></figure><p>In the workflow <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/blob/master/.github/workflows/repeat-spec.yml">repeat-spec.yml</a> we will use <code>cypress-repeat</code> as a custom command option:</p><figure class="highlight yml"><figcaption><span>.github/workflows/repeat-spec.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">repeat-spec</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Lets</span> <span class="string">the</span> <span class="string">user</span> <span class="string">run</span> <span class="string">a</span> <span class="string">spec</span> <span class="string">file</span> <span class="string">N</span> <span class="string">times</span> <span class="string">in</span> <span class="string">a</span> <span class="string">row</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">spec:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Part</span> <span class="string">or</span> <span class="string">full</span> <span class="string">path</span> <span class="string">to</span> <span class="string">the</span> <span class="string">spec</span> <span class="string">file</span> <span class="string">like</span> <span class="string">&quot;editing-spec.js&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">n:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Number</span> <span class="string">of</span> <span class="string">times</span> <span class="string">to</span> <span class="string">repeat</span> <span class="string">the</span> <span class="string">test</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">default:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">integer</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">repeat-spec:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">spec</span> <span class="string">N</span> <span class="string">times</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">start-quiet</span></span><br><span class="line">          <span class="comment"># use https://github.com/bahmutov/cypress-repeat to repeat the spec</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">npx</span> <span class="string">cypress-repeat</span> <span class="string">-n</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.inputs.n</span> <span class="string">&#125;&#125;</span> <span class="string">--spec</span> <span class="string">&#x27;**/$<span class="template-variable">&#123;&#123; github.event.inputs.spec &#125;&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure><p>Note that we add the wildcard to the spec filename to let the user simple specify the file name without the <code>cypress/integration/</code> prefix.</p><p><img src="../images/repeat-tests/launch-spec.png" alt="Launching workflow to run the item-spec.js test file"></p><p>In the action output, you should see the <code>cypress-repeat</code> messages like</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">cypress-repeat: will repeat Cypress command 2 time(s)</span><br><span class="line">***** cypress-repeat: 1 of 2 *****</span><br><span class="line">====================================================================================================</span><br><span class="line"></span><br><span class="line">  (Run Starting)</span><br><span class="line"></span><br><span class="line">  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">  │ Cypress:        9.3.1                                                                          │</span><br><span class="line">  │ Browser:        Electron 94 (headless)                                                         │</span><br><span class="line">  │ Node Version:   v16.13.2 (/usr/local/bin/node)                                                 │</span><br><span class="line">  │ Specs:          1 found (item-spec.js)                                                         │</span><br><span class="line">  │ Searched:       **/item-spec.js                                                                │</span><br><span class="line">  └────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">***** cypress-repeat: 2 of 2 *****</span><br><span class="line">====================================================================================================</span><br><span class="line"></span><br><span class="line">  (Run Starting)</span><br><span class="line"></span><br><span class="line">  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">  │ Cypress:        9.3.1                                                                          │</span><br><span class="line">  │ Browser:        Electron 94 (headless)                                                         │</span><br><span class="line">  │ Node Version:   v16.13.2 (/usr/local/bin/node)                                                 │</span><br><span class="line">  │ Specs:          1 found (item-spec.js)                                                         │</span><br><span class="line">  │ Searched:       **/item-spec.js                                                                │</span><br><span class="line">  └────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line">...</span><br><span class="line">***** finished 2 run(s) successfully *****</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> you can run multiple spec files by giving a common parent folder name. For example, to run <em>all</em> integration specs in the folder <code>cypress/integration</code> enter the &quot;integration&quot; as the spec name. It will invoke Cypress with parameter <code>--spec **/integration</code> which will match all specs.</p><h2><span id="see-more">See more</span></h2><ul><li><a href="https://www.cypress.io/blog/2020/12/03/retry-rerun-repeat/">Retry, Rerun, Repeat</a></li><li><a href="/blog/burning-tests/" title="Burning Tests with cypress-grep">Burning Tests with cypress-grep</a></li><li><a href="/blog/pick-tests-using-pull-request/" title="Pick Tests To Run Using The Pull Request Text">Pick Tests To Run Using The Pull Request Text</a></li><li><a href="/blog/tag-tests/" title="How To Tag And Run End-to-End Tests">How To Tag And Run End-to-End Tests</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine you are doubting if a test works consistently. You could &lt;a href=&quot;/blog/burning-tests/&quot; title=&quot;run it using cypress-grep locally&quot;
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress History API Example</title>
    <link href="https://glebbahmutov.com/blog/cypress-history-api-example/"/>
    <id>https://glebbahmutov.com/blog/cypress-history-api-example/</id>
    <published>2022-01-28T05:00:00.000Z</published>
    <updated>2022-01-28T12:29:30.131Z</updated>
    
    <content type="html"><![CDATA[<p>One of the key features of Cypress is its ability to access the native browser API objects used by the application itself. For example, you could stub the <a href="/blog/browser-filesystem-api/" title="browser FileSystem methods">browser FileSystem methods</a> or the <a href="/blog/stub-navigator-api/" title="navigator API">navigator API</a> to ensure the application is using those APIs correctly. In this blog post I will show how you can test an application that uses the browser <a href="http://html5doctor.com/history-api/">History API</a>.</p><blockquote class="pullquote"><p>🎁 You can find the example application and its Cypress tests in the repo <a href="https://github.com/bahmutov/cypress-history-api-example">bahmutov/cypress-history-api-example</a>.</p></blockquote><h2><span id="the-application">The application</span></h2><p>The application shows pictures of cats. When the user clicks on the link, the application changes the image by modifying the image source attribute, and then pushes the state to the browser history. To the user it looks like normal (but very fast) navigation, yet you do see the URL change, the location history, and you can correctly navigate using the browser &quot;Back&quot; button.</p><p><img src="../images/history-api/cats.png" alt="The Cats example application"></p><p>The code in the application pushes the new state to the application after switching the image source and the content.</p><figure class="highlight js"><figcaption><span>public/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">vat cats = &#123;</span><br><span class="line">  fluffy: &#123;</span><br><span class="line">    content: <span class="string">&#x27;Fluffy!&#x27;</span>,</span><br><span class="line">    photo: <span class="string">&#x27;https://placekitten.com/200/200&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  socks: &#123;</span><br><span class="line">    content: <span class="string">&#x27;Socks!&#x27;</span>,</span><br><span class="line">    photo: <span class="string">&#x27;https://placekitten.com/280/280&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  whiskers: &#123;</span><br><span class="line">    content: <span class="string">&#x27;Whiskers!&#x27;</span>,</span><br><span class="line">    photo: <span class="string">&#x27;https://placekitten.com/350/350&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  bob: &#123;</span><br><span class="line">    content: <span class="string">&#x27;Just Bob.&#x27;</span>,</span><br><span class="line">    photo: <span class="string">&#x27;https://placekitten.com/320/210&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateContent</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (data == <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  contentEl.textContent = data.content</span><br><span class="line">  photoEl.src = data.photo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">goTo</span>(<span class="params">cat, title, href</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> data = cats[cat] || <span class="literal">null</span> <span class="comment">// In reality this could be an AJAX request</span></span><br><span class="line">  updateContent(data)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add an item to the history log</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;going to&#x27;</span>, cat, title, href)</span><br><span class="line">  history.pushState(data, title, href)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// each links has this handler</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickHandler</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cat = event.target.getAttribute(<span class="string">&#x27;href&#x27;</span>).split(<span class="string">&#x27;/&#x27;</span>).pop()</span><br><span class="line">  goTo(cat, event.target.textContent, event.target.href)</span><br><span class="line">  <span class="keyword">return</span> event.preventDefault()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Can we verify this behavior?</p><h2><span id="cypress-and-history-api">Cypress and History API</span></h2><p>First, let&#39;s verify the test can access the History object.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;redirects to a cat at the start&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/history/fluffy&#x27;</span>)</span><br><span class="line">  cy.log(<span class="string">&#x27;**has History API**&#x27;</span>)</span><br><span class="line">  cy.window()</span><br><span class="line">    .its(<span class="string">&#x27;history&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;respondTo&#x27;</span>, <span class="string">&#x27;pushState&#x27;</span>)</span><br><span class="line">    .and(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;state&#x27;</span>)</span><br><span class="line">    <span class="comment">// inspect the state object</span></span><br><span class="line">    .should(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">      content: <span class="string">&#x27;Fluffy!&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test gets the <code>history</code> property from the application&#39;s <code>window</code> object. We could validate the entire state object, or just parts of it. We can click on the <code>ITS history</code> command to see the entire object. We could call those methods like <code>back</code> and <code>go</code> from our tests too!</p><p><img src="../images/history-api/devtools.png" alt="The history object"></p><h2><span id="spy-on-the-history-method-calls">Spy on the history method calls</span></h2><p>Before we try to call the history methods, why don&#39;t we check how the application uses them. Using the Sinon spies (bundled with Cypress using <a href="https://on.cypress.io/spy">cy.spy</a> command) let&#39;s confirm the application uses the <code>history.pushState</code> correctly.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;spies on history.pushState&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// spy on the &quot;pushState&quot; method</span></span><br><span class="line">      cy.spy(win.history, <span class="string">&#x27;pushState&#x27;</span>).as(<span class="string">&#x27;pushState&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/history/fluffy&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;@pushState&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;args.0&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;deep.equal&#x27;</span>, [</span><br><span class="line">      &#123; <span class="attr">content</span>: <span class="string">&#x27;Fluffy!&#x27;</span>, <span class="attr">photo</span>: <span class="string">&#x27;https://placekitten.com/200/200&#x27;</span> &#125;,</span><br><span class="line">      <span class="string">&#x27;Fluffy&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;/history/fluffy&#x27;</span>,</span><br><span class="line">    ])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/history-api/spy.png" alt="Spying on the history.pushState method calls made by the application"></p><p><strong>Tip:</strong> using the <a href="https://github.com/bahmutov/cy-spok">cy-spok</a> plugin, we can write powerful assertions to check the entire list of arguments.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spok <span class="keyword">from</span> <span class="string">&#x27;cy-spok&#x27;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;spies on history.pushState using cy-spok&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// spy on the &quot;pushState&quot; method</span></span><br><span class="line">      cy.spy(win.history, <span class="string">&#x27;pushState&#x27;</span>).as(<span class="string">&#x27;pushState&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/history/fluffy&#x27;</span>)</span><br><span class="line">  <span class="comment">// navigate to a different cat</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;Whiskers&#x27;</span>).click()</span><br><span class="line">  cy.contains(<span class="string">&#x27;#content&#x27;</span>, <span class="string">&#x27;Whiskers!&#x27;</span>)</span><br><span class="line">  <span class="comment">// check the pushState calls</span></span><br><span class="line">  cy.get(<span class="string">&#x27;@pushState&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.been.calledTwice&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;args&#x27;</span>)</span><br><span class="line">    .should(</span><br><span class="line">      spok([</span><br><span class="line">        <span class="comment">// first call</span></span><br><span class="line">        [</span><br><span class="line">          &#123; <span class="attr">content</span>: <span class="string">&#x27;Fluffy!&#x27;</span>, <span class="attr">photo</span>: <span class="string">&#x27;https://placekitten.com/200/200&#x27;</span> &#125;,</span><br><span class="line">          <span class="string">&#x27;Fluffy&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;/history/fluffy&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// second call</span></span><br><span class="line">        [</span><br><span class="line">          &#123; <span class="attr">content</span>: <span class="string">&#x27;Whiskers!&#x27;</span>, <span class="attr">photo</span>: <span class="string">&#x27;https://placekitten.com/350/350&#x27;</span> &#125;,</span><br><span class="line">          <span class="string">&#x27;Whiskers&#x27;</span>,</span><br><span class="line">          <span class="comment">// we get the full URL here</span></span><br><span class="line">          Cypress.config(<span class="string">&#x27;baseUrl&#x27;</span>) + <span class="string">&#x27;/history/whiskers&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">      ]),</span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/history-api/spok.png" alt="Checking multiple calls using cy-spok"></p><h2><span id="calling-history-methods">Calling history methods</span></h2><p>Now let&#39;s navigate by calling the History object methods from the test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;navigates using history methods&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#content&#x27;</span>, <span class="string">&#x27;Fluffy!&#x27;</span>)</span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/history/fluffy&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;Socks&#x27;</span>).click()</span><br><span class="line">  cy.contains(<span class="string">&#x27;#content&#x27;</span>, <span class="string">&#x27;Socks!&#x27;</span>)</span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/history/socks&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;Whiskers&#x27;</span>).click()</span><br><span class="line">  cy.contains(<span class="string">&#x27;#content&#x27;</span>, <span class="string">&#x27;Whiskers!&#x27;</span>)</span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/history/whiskers&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>).click()</span><br><span class="line">  cy.contains(<span class="string">&#x27;#content&#x27;</span>, <span class="string">&#x27;Just Bob.&#x27;</span>)</span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/history/bob&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;**go back in history**&#x27;</span>)</span><br><span class="line">  cy.window().its(<span class="string">&#x27;history&#x27;</span>).invoke(<span class="string">&#x27;back&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#content&#x27;</span>, <span class="string">&#x27;Whiskers!&#x27;</span>)</span><br><span class="line">  <span class="comment">// unfortunately Cypress does not change the URL _shown_</span></span><br><span class="line">  <span class="comment">// but it does change the URL _in_ the browser</span></span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/history/whiskers&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;**go -2 in history**&#x27;</span>)</span><br><span class="line">  cy.window().its(<span class="string">&#x27;history&#x27;</span>).invoke(<span class="string">&#x27;go&#x27;</span>, -<span class="number">2</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#content&#x27;</span>, <span class="string">&#x27;Fluffy!&#x27;</span>)</span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/history/fluffy&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/history-api/navigation.png" alt="The application navigates when we call history methods from the test"></p><h2><span id="adding-synthetic-history-state">Adding synthetic history state</span></h2><p>Finally, our application restores the saved history state if it finds it at the start</p><figure class="highlight js"><figcaption><span>public/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initialCat = <span class="built_in">document</span>.location.href.split(<span class="string">&#x27;/&#x27;</span>).pop()</span><br><span class="line"><span class="keyword">if</span> (!cats[initialCat]) &#123;</span><br><span class="line">  <span class="comment">// maybe there is something in the history?</span></span><br><span class="line">  <span class="keyword">if</span> (history.state) &#123;</span><br><span class="line">    updateContent(history.state)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// go to the first cat</span></span><br><span class="line">    goTo(<span class="string">&#x27;fluffy&#x27;</span>, <span class="string">&#x27;Fluffy&#x27;</span>, <span class="string">&#x27;/history/fluffy&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s test it by putting a robot cat 🤖😺 into the History object first and the visiting the application.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;starts at our state&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// populate the state history</span></span><br><span class="line">      win.history.pushState(</span><br><span class="line">        &#123;</span><br><span class="line">          cat: <span class="string">&#x27;robot-whiskers&#x27;</span>,</span><br><span class="line">          content: <span class="string">&#x27;Robot Whiskers!&#x27;</span>,</span><br><span class="line">          <span class="comment">// we can even use some other photos during testing</span></span><br><span class="line">          photo: <span class="string">&#x27;https://robohash.org/CE6.png?set=set4&amp;size=150x150&#x27;</span>,</span><br><span class="line">          title: <span class="string">&#x27;Robot Whiskers&#x27;</span>,</span><br><span class="line">          href: <span class="string">&#x27;/history/robot-whiskers&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;Robot Whiskers&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;/history/robot-whiskers&#x27;</span>,</span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">&#x27;#content&#x27;</span>, <span class="string">&#x27;Robot Whiskers!&#x27;</span>)</span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/history/robot-whiskers&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/history-api/robot.png" alt="Setting up the application to load a robot cat"></p><p>Nice!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;One of the key features of Cypress is its ability to access the native browser API objects used by the application itself. For example, y
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Wordle Page Objects</title>
    <link href="https://glebbahmutov.com/blog/wordle-page-objects/"/>
    <id>https://glebbahmutov.com/blog/wordle-page-objects/</id>
    <published>2022-01-27T05:00:00.000Z</published>
    <updated>2022-01-27T03:39:31.667Z</updated>
    
    <content type="html"><![CDATA[<p>The game <a href="https://www.powerlanguage.co.uk/wordle/">Wordle</a> is pretty popular, and I have been solving / playing it using Cypress for a while. You can find my code in the repo <a href="https://github.com/bahmutov/cypress-wordle">bahmutov/cypress-wordle</a> and multiple short videos showing my test implementations in this <a href="https://www.youtube.com/playlist?list=PLP9o9QNnQuAaihgCPlXyzlj_P-1TTbj-O">YouTube playlist</a>.</p><p><img src="../images/wordle-page-objects/really-solved.png" alt="Cypress solved Wordle game"></p><p>Recently, other Wordle game implementations have appeared. For example <a href="https://agreenerworldle.org/">A Greener Wordle</a> let&#39;s you play using only the words related to the climate crisis. Another <a href="https://github.com/yyx990803/vue-wordle">version</a> lets you encode the target word via URL query parameter so your friends can guess the word you send them. For example, we can send the URL with the word &quot;quick&quot; encoded using base64 algorithm and appended to the url as <code>cXVpY2s=</code>. The test correctly calculates the answer starting with the word &quot;start&quot; in four steps.</p><p><img src="../images/wordle-page-objects/vue.png" alt="Cypress solved the custom Wordle implementation"></p><p>How can the same code solve the two different implementations of the game? If we inspect the page structure, the two games are implemented <em>very</em> differently. The original game is implemented using WebComponents with shadow DOM elements everywhere.</p><p><img src="../images/wordle-page-objects/shadow.png" alt="The first Wordle implementation uses WebComponents"></p><p>The Vue version uses a single DOM with its own classes and attributes used to show each letter&#39;s status.</p><p><img src="../images/wordle-page-objects/vue-elements.png" alt="The second Wordle implementation uses Vue framework"></p><p>The algorithm to solve the game is independent of the page. To solve the game we need to pick a word from the word list, enter the letters into the game, collect the game&#39;s feedback (which letter is at the correct position, which letter is present, and which letter is absent). We use the feedback to prune the word list, and pick a word again.</p><h2><span id="the-page-objects">The page objects</span></h2><p>We can abstract entering the word and collect the letter feedback by using a <em>page object</em>. It will be a simple JavaScript object with methods to call the Cypress commands. A page object is specific to the implementation - thus we will have one object for the first Wordle game implementation, and another page object for the second implementation.</p><p>Here is the first page object.</p><figure class="highlight js"><figcaption><span>cypress/integration/utils/pages.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Playing = &#123;</span><br><span class="line">  <span class="function"><span class="title">enterWord</span>(<span class="params">word</span>)</span> &#123;</span><br><span class="line">    word.split(<span class="string">&#x27;&#x27;</span>).forEach(<span class="function">(<span class="params">letter</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.window(silent).trigger(<span class="string">&#x27;keydown&#x27;</span>, &#123; <span class="attr">key</span>: letter, <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.window(silent)</span><br><span class="line">      .trigger(<span class="string">&#x27;keydown&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;Enter&#x27;</span>, <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">      <span class="comment">// let the letter animation finish</span></span><br><span class="line">      .wait(<span class="number">2000</span>, silent)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Looks at the entered word row and collects the status of each letter</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">getLetters</span>(<span class="params">word</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cy</span><br><span class="line">      .get(<span class="string">`game-row[letters=<span class="subst">$&#123;word&#125;</span>]`</span>)</span><br><span class="line">      .find(<span class="string">&#x27;game-tile&#x27;</span>, silent)</span><br><span class="line">      .should(<span class="string">&#x27;have.length&#x27;</span>, word.length)</span><br><span class="line">      .then(<span class="function">(<span class="params">$tiles</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> $tiles.toArray().map(<span class="function">(<span class="params">tile, k</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> letter = tile.getAttribute(<span class="string">&#x27;letter&#x27;</span>)</span><br><span class="line">          <span class="keyword">const</span> evaluation = tile.getAttribute(<span class="string">&#x27;evaluation&#x27;</span>)</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;%d: letter %s is %s&#x27;</span>, k, letter, evaluation)</span><br><span class="line">          <span class="keyword">return</span> &#123; k, letter, evaluation &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is the second page object - notice how it uses &quot;keyup&quot; instead of &quot;keydown&quot; events to input the characters.</p><figure class="highlight js"><figcaption><span>cypress/integration/vue-wordle/pages.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> silent = &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// interact with the VueWordle via custom page object</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Playing = &#123;</span><br><span class="line">  <span class="function"><span class="title">enterWord</span>(<span class="params">word</span>)</span> &#123;</span><br><span class="line">    word.split(<span class="string">&#x27;&#x27;</span>).forEach(<span class="function">(<span class="params">letter</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.window(silent).trigger(<span class="string">&#x27;keyup&#x27;</span>, &#123; <span class="attr">key</span>: letter, <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.window(silent)</span><br><span class="line">      .trigger(<span class="string">&#x27;keyup&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;Enter&#x27;</span>, <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">      <span class="comment">// let the letter animation finish</span></span><br><span class="line">      .wait(<span class="number">2000</span>, silent)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Looks at the entered word row and collects the status of each letter</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">getLetters</span>(<span class="params">word</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cy</span><br><span class="line">      .get(<span class="string">&#x27;#board .row .tile.filled.revealed .back&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.length.gte&#x27;</span>, word.length)</span><br><span class="line">      .then(<span class="function">(<span class="params">$tiles</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// only take the last 5 letters</span></span><br><span class="line">        <span class="keyword">return</span> $tiles</span><br><span class="line">          .toArray()</span><br><span class="line">          .slice(-<span class="number">5</span>)</span><br><span class="line">          .map(<span class="function">(<span class="params">tile, k</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> letter = tile.innerText.toLowerCase()</span><br><span class="line">            <span class="keyword">const</span> evaluation = tile.classList.contains(<span class="string">&#x27;correct&#x27;</span>)</span><br><span class="line">              ? <span class="string">&#x27;correct&#x27;</span></span><br><span class="line">              : tile.classList.contains(<span class="string">&#x27;present&#x27;</span>)</span><br><span class="line">              ? <span class="string">&#x27;present&#x27;</span></span><br><span class="line">              : <span class="string">&#x27;absent&#x27;</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;%d: letter %s is %s&#x27;</span>, k, letter, evaluation)</span><br><span class="line">            <span class="keyword">return</span> &#123; k, letter, evaluation &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Checks if the Wordle was solved */</span></span><br><span class="line">  <span class="function"><span class="title">solved</span>(<span class="params">greeting</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// contains the given greeting (like &quot;Genius&quot;) ig any</span></span><br><span class="line">    ;(greeting ? cy.contains(<span class="string">&#x27;.message&#x27;</span>, greeting) : cy.get(<span class="string">&#x27;.message&#x27;</span>))</span><br><span class="line">      .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">      <span class="comment">// contain the solved tiles minimap</span></span><br><span class="line">      .find(<span class="string">&#x27;pre&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The page object can have other methods to do additional actions on the page, like <code>Playing.solved()</code> to close the popup at the end.</p><p>You can watch a short video where I make a page object below.</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/R4Ji8lrFrec" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="solver">Solver</span></h2><p>Now that we have a page object to perform actual operations on the page, let&#39;s use it from a function that solves the Wordle. The solver function is almost pure - meaning it does not touch the page and does not have to deal with the particular implementation. If it needs to enter the word or interact with the page, it uses the page object passed as a parameter. Here is a short version of the solver without details</p><figure class="highlight js"><figcaption><span>cypress/integration/utils/solver.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">solve</span>(<span class="params">startWord, pageObject</span>) </span>&#123;</span><br><span class="line">  expect(pageObject, <span class="string">&#x27;page object&#x27;</span>)</span><br><span class="line">    .to.be.an(<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">    .and.to.respondTo(<span class="string">&#x27;enterWord&#x27;</span>)</span><br><span class="line">    .and.to.respondTo(<span class="string">&#x27;getLetters&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> cy</span><br><span class="line">    .get(<span class="string">&#x27;@wordList&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">wordList</span>) =&gt;</span> tryNextWord(wordList, startWord, pageObject))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Takes the feedback from the game about each letter,</span></span><br><span class="line"><span class="comment"> * and trims the word list to remove words that don&#x27;t match.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateWordList</span>(<span class="params">wordList, word, letters</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Takes the word list and the word and uses the page object</span></span><br><span class="line"><span class="comment"> * to enter the word, get the feedback, and proceed to the next word.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tryNextWord</span>(<span class="params">wordList, word, pageObject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// we should be seeing the list shrink with each iteration</span></span><br><span class="line">  cy.log(<span class="string">`Word list has <span class="subst">$&#123;wordList.length&#125;</span> words`</span>)</span><br><span class="line">  <span class="keyword">if</span> (!word) &#123;</span><br><span class="line">    word = pickWordWithUniqueLetters(wordList)</span><br><span class="line">  &#125;</span><br><span class="line">  cy.log(<span class="string">`**<span class="subst">$&#123;word&#125;</span>**`</span>)</span><br><span class="line">  pageObject.enterWord(word)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pageObject.getLetters(word).then(<span class="function">(<span class="params">letters</span>) =&gt;</span> &#123;</span><br><span class="line">    wordList = updateWordList(wordList, word, letters)</span><br><span class="line">    <span class="keyword">if</span> (wordList === word) &#123;</span><br><span class="line">      <span class="comment">// we solved it!</span></span><br><span class="line">      <span class="keyword">return</span> word</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tryNextWord(wordList, <span class="literal">null</span>, pageObject)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Notice how the <code>tryNextWord</code> uses <code>pageObject.enterWord</code> and <code>pageObject.getLetters</code> method calls to access the page?</p><h2><span id="specs">Specs</span></h2><p>The individual specs are where the solver and the page objects are put together. To solve the first Wordle implementation, we pick the first page object to pass to the solver function.</p><figure class="highlight js"><figcaption><span>cypress/integration/solve.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// use page objects to close the modals, solve the puzzle, etc</span></span><br><span class="line"><span class="keyword">import</span> &#123; Start, Playing, Solved &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils/pages&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; solve &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils/solver&#x27;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;solves the game&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.fixture(<span class="string">&#x27;wordlist.json&#x27;</span>).as(<span class="string">&#x27;wordList&#x27;</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  Start.close()</span><br><span class="line">  solve(<span class="string">&#x27;grasp&#x27;</span>, Playing).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;sugar&#x27;</span>)</span><br><span class="line">  Solved.close()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> I like having different page objects for different stages of the page. In this case, there is a page object called <code>Start</code> to close with the initial popup.</p><p>The spec to solve the Vue version of the game imports its own page objects but calls the same <code>solve</code> function.</p><figure class="highlight js"><figcaption><span>cypress/integration/vue-wordle/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Playing &#125; <span class="keyword">from</span> <span class="string">&#x27;./pages&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; solve &#125; <span class="keyword">from</span> <span class="string">&#x27;../utils/solver&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Vue Wordle&#x27;</span>, &#123; <span class="attr">baseUrl</span>: <span class="string">&#x27;https://vue-wordle.netlify.app/&#x27;</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;solves the game&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    cy.fixture(<span class="string">&#x27;wordlist.json&#x27;</span>).as(<span class="string">&#x27;wordList&#x27;</span>)</span><br><span class="line">    <span class="comment">// the word to guess</span></span><br><span class="line">    <span class="keyword">const</span> word = <span class="string">&#x27;quick&#x27;</span></span><br><span class="line">    cy.visit(<span class="string">`/?<span class="subst">$&#123;btoa(word)&#125;</span>`</span>)</span><br><span class="line">    solve(<span class="string">&#x27;start&#x27;</span>, Playing).should(<span class="string">&#x27;equal&#x27;</span>, word)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Works beautifully. If you prefer to learn how to use page objects, solvers, and specs, watch the video below.</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/4MOfRd6I3UY" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The game &lt;a href=&quot;https://www.powerlanguage.co.uk/wordle/&quot;&gt;Wordle&lt;/a&gt; is pretty popular, and I have been solving / playing it using Cypre
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>How To Check Network Requests Using Cypress</title>
    <link href="https://glebbahmutov.com/blog/network-requests-with-cypress/"/>
    <id>https://glebbahmutov.com/blog/network-requests-with-cypress/</id>
    <published>2022-01-22T05:00:00.000Z</published>
    <updated>2022-01-24T01:28:00.983Z</updated>
    
    <content type="html"><![CDATA[<p>Recently a user posted in the <a href="https://gitter.im/cypress-io/cypress">Cypress Gitter channel</a> the following image and asked why this code is not working.</p><p><img src="../images/net-cy/net-question.png" alt="This code is broken"></p><p>The above code has several problems. In this blog post, I will fix them all. I have recorded a short video showing the fixes step by step, you can watch the video below, or keep reading.</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/LiYJtUbe7gc" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><!-- toc --><ul><li><a href="#the-returned-value">The returned value</a></li><li><a href="#printing-the-value">Printing the value</a><ul><li><a href="#why-cylog-prints-null-or-undefined">Why cy.log prints null or undefined</a></li><li><a href="#when-to-use-cypress-then-callback-to-use-the-value">When To Use Cypress .Then Callback To Use The Value</a></li></ul></li><li><a href="#fluent-programming">Fluent programming</a><ul><li><a href="#bonus-cy-spok">Bonus: cy-spok</a></li></ul></li></ul><!-- tocstop --><h2><span id="the-returned-value">The returned value</span></h2><p>First, let&#39;s deal with the returned value of the <code>cy.wait(...).then(...)</code> chain.</p><p><img src="../images/net-cy/return-value.png" alt="The returned value is not the organization id"></p><p>Think about JavaScript promises. A promise <code>.then</code> method does NOT return the value, it returns another promise, so you can attach another <code>.then</code> callback, or a callback to catch an error using <code>.catch</code>, right?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// INCORRECT, the &quot;x&quot; is a promise instance, not the value 42</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="built_in">Promise</span>.resolve(...).then(...).then(<span class="function">() =&gt;</span> <span class="number">42</span>)</span><br></pre></td></tr></table></figure><p>If you want to get the resolved value <code>x</code>, you need to put the code that uses <code>x</code> into the last callback.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FIXED, the &quot;x&quot; is used inside `.then(...)` callback</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve(...).then(...).then(<span class="function">() =&gt;</span> <span class="number">42</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// use x here, x should be 42</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Cypress command chains might look like promise chains, but they are more like reactive streams, see <a href="https://slides.com/bahmutov/reactive-conf">this presentation from ReactiveConf 2018</a>. Thus every command like <code>cy.wait</code> and <code>cy.then</code> returns another instance of Cypress chainable interface so you can attach more commands. If you want to use the value returned (or &quot;yielded&quot; as Cypress calls it), use it inside <code>.then(...)</code> callback.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cy.wait(<span class="string">&#x27;@createUnion&#x27;</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; statusCode, body &#125; = response.response</span><br><span class="line">  <span class="keyword">const</span> org = body.data</span><br><span class="line"></span><br><span class="line">  <span class="comment">// validate the response</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> org.id</span><br><span class="line">&#125;).then(<span class="function"><span class="params">orgId</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// you can use the orgId now</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="printing-the-value">Printing the value</span></h2><p>Let&#39;s look at why the <code>console.log(orgId)</code> prints a weird object.</p><p><img src="../images/net-cy/log-value.png" alt="The console.log prints something unexpected"></p><p>As I explained above, the returned value of the Cypress callback is an internal chainable object used to add more commands to be executed. The Cypress commands themselves are queued up, the have not started running. The Cypress chains of commands are lazy - they only start running once the browser is ready (which is another difference from the Promises which are <a href="/blog/difference-between-promise-and-task/" title="very very eager to run">very very eager to run</a>). If we look at the order of execution, the <code>console.log</code> runs <em>way</em> before the Cypress command gets the intercepted response and gets the ID property.</p><p>I marked the order of statements executed in the code snippet.</p><p><img src="../images/net-cy/order.png" alt="The order in which the code statements run"></p><ol><li>First, the code runs <code>cy.wait</code> to schedule the &quot;WAIT&quot; command. It returns Cypress chainable object</li><li>The Cypress chainable object has <code>then</code> method, it gets called with a function callback reference. The Cypress method schedules the &quot;THEN&quot; command to be run after &quot;WAIT&quot; is finished (nothing is running at this point).</li><li>There are no more Cypress commands to call, thus the assignment <code>const orgId =</code> runs, assigning the (unexpected) Cypress chainable object reference to the local variable <code>orgId</code></li><li>The problem happens here: the next JavaScript statement that runs is the <code>console.log(orgId)</code> which tries to print the Chainable object, while the user expects to see the organization id. So it prints something weird.</li><li>Cypress test starts running, finds the &quot;WAIT&quot; command, waits for that alias &quot;@createUnion&quot;, yields the intercept to the next scheduled command &quot;THEN&quot;, calls the function callback which returns the real organization ID.</li></ol><p>To fix the code snippet, move the <code>console.log</code> into the <code>.then</code> callback that gets the ID, or attach it as another <code>.then</code> callback.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cy.wait(<span class="string">&#x27;@createUnion&#x27;</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; statusCode, body &#125; = response.response</span><br><span class="line">  <span class="keyword">const</span> org = body.data</span><br><span class="line"></span><br><span class="line">  <span class="comment">// validate the response</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> org.id</span><br><span class="line">&#125;).then(<span class="built_in">console</span>.log)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> you can print the value to the DevTools using <code>.then(console.log)</code> but a better idea is to print it to the Cypress Command Log with <code>.then(cy.log)</code>. See the video <a href="https://www.youtube.com/watch?v=SgTsCJCujNw">How to use Cypress cy.log command to output messages to the Command Log</a>.</p><p>In general, anything you get from the application page, or from another Cypress command must be used inside the <code>.then</code> callback to have its value set. I have two short videos explaining the above problem and how to write your tests correctly.</p><h3><span id="why-cylog-prints-null-or-undefined">Why cy.log prints null or undefined</span></h3><center><iframe width="560" height="315" src="https://www.youtube.com/embed/uGWWoq0ECY8" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h3><span id="when-to-use-cypress-then-callback-to-use-the-value">When To Use Cypress .Then Callback To Use The Value</span></h3><center><iframe width="560" height="315" src="https://www.youtube.com/embed/-aptS3yvqcc" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="fluent-programming">Fluent programming</span></h2><p>Now let&#39;s refactor the body of the <code>.then(...)</code> callback function. Currently it takes the <code>response</code> object from the intercept, runs multiple assertions against it, then yields the organization ID. Let&#39;s refactor it for clarity.</p><blockquote class="pullquote"><p>🎓 You can find the code from this section in my workshop &quot;Cypress Basics&quot; in the repo <a href="https://github.com/bahmutov/cypress-workshop-basics">bahmutov/cypress-workshop-basics</a>.</p></blockquote><p>Our first attempt mimics the user&#39;s question.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;validates and processes the intercept object&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>).as(<span class="string">&#x27;postTodo&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">&#x27;new todo&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> completed = <span class="literal">false</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.new-todo&#x27;</span>).type(title + <span class="string">&#x27;&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.wait(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">intercept</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// get the field from the intercept object</span></span><br><span class="line">      <span class="keyword">const</span> &#123; statusCode, body &#125; = intercept.response</span><br><span class="line">      <span class="comment">// confirm the status code is 201</span></span><br><span class="line">      expect(statusCode).to.eq(<span class="number">201</span>)</span><br><span class="line">      <span class="comment">// confirm some properties of the response data</span></span><br><span class="line">      expect(body.title).to.equal(title)</span><br><span class="line">      expect(body.completed).to.equal(completed)</span><br><span class="line">      <span class="comment">// return the field from the body object</span></span><br><span class="line">      <span class="keyword">return</span> body.id</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(cy.log)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test is green.</p><p><img src="../images/net-cy/response.png" alt="The test validates the response"></p><p>Let&#39;s look at the code. First, we are only interested in the property <code>response</code> from the intercept (there are a lot more!). Thus let&#39;s extract it using <a href="https://on.cypress.io/its">cy.its</a> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;extracts the response property first&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>).as(<span class="string">&#x27;postTodo&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">&#x27;new todo&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> completed = <span class="literal">false</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.new-todo&#x27;</span>).type(title + <span class="string">&#x27;&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.wait(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; statusCode, body &#125; = response</span><br><span class="line">      <span class="comment">// confirm the status code is 201</span></span><br><span class="line">      expect(statusCode).to.eq(<span class="number">201</span>)</span><br><span class="line">      <span class="comment">// confirm some properties of the response data</span></span><br><span class="line">      expect(body.title).to.equal(title)</span><br><span class="line">      expect(body.completed).to.equal(completed)</span><br><span class="line">      <span class="comment">// return the field from the body object</span></span><br><span class="line">      <span class="keyword">return</span> body.id</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(cy.log)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>It runs the same way. If you need to debug the intercept object, click on the &quot;ITS&quot; command and see it in the DevTools console.</p><p><img src="../images/net-cy/its.png" alt="Print the entire intercept object to the DevTools console"></p><p>Let&#39;s look at our assertions. Right now they offer very little to the developer aside from printing their value. Let&#39;s add a message to each assertion to make it clearer.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; statusCode, body &#125; = response</span><br><span class="line">  <span class="comment">// confirm the status code is 201</span></span><br><span class="line">  expect(statusCode, <span class="string">&#x27;status code&#x27;</span>).to.eq(<span class="number">201</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/net-cy/message.png" alt="Added message argument to the assertion"></p><p>Isn&#39;t the top assertion more informative than the next two? We can make it even better by using the specific Chai assertion for checking the property.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; body &#125; = response</span><br><span class="line">  <span class="comment">// confirm the status code is 201</span></span><br><span class="line">  expect(response).to.have.property(<span class="string">&#x27;statusCode&#x27;</span>, <span class="number">201</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/net-cy/property.png" alt="The property assertion has even more information"></p><p>If Cypress <a href="https://on.cypress.io/then">.then</a> command returns undefined and has no other Cypress commands, then its original <em>subject</em> value gets passed to the next command automatically. Thus we can move the <code>statusCode</code> check into its own <code>.then</code> callback to separate it from the response object checks.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cy.wait(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">  .its(<span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// confirm the status code is 201</span></span><br><span class="line">    expect(response).to.have.property(<span class="string">&#x27;statusCode&#x27;</span>, <span class="number">201</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; body &#125; = response</span><br><span class="line">    <span class="comment">// confirm some properties of the response data</span></span><br><span class="line">    expect(body.title).to.equal(title)</span><br><span class="line">    expect(body.completed).to.equal(completed)</span><br><span class="line">    <span class="comment">// return the field from the body object</span></span><br><span class="line">    <span class="keyword">return</span> body.id</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>The output looks the same as before, but now we can notice that we only deal with the <code>body</code> property from the <code>response</code> object. Let&#39;s apply <code>cy.its</code> command, just like we extracted the <code>response</code> from the <code>intercept</code> object.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cy.wait(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">  .its(<span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// confirm the status code is 201</span></span><br><span class="line">    expect(response).to.have.property(<span class="string">&#x27;statusCode&#x27;</span>, <span class="number">201</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">body</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// confirm some properties of the response data</span></span><br><span class="line">    expect(body.title).to.equal(title)</span><br><span class="line">    expect(body.completed).to.equal(completed)</span><br><span class="line">    <span class="comment">// return the field from the body object</span></span><br><span class="line">    <span class="keyword">return</span> body.id</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(cy.log)</span><br></pre></td></tr></table></figure><p><img src="../images/net-cy/body.png" alt="Using the body from the response"></p><p>Remember - the <code>cy.its</code> command automatically fails if the property does not exist on the object. It also accepts nested properties, so you could grab the <code>body</code> from the <code>intercept</code> object using <code>cy.wait(...).its(&#39;response.body&#39;)</code> syntax.</p><p>Now the last callback only deals with the properties of a single <code>body</code> object. We can confirm some of the properties using <code>deep.include</code> assertion.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cy.wait(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">  .its(<span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// confirm the status code is 201</span></span><br><span class="line">    expect(response).to.have.property(<span class="string">&#x27;statusCode&#x27;</span>, <span class="number">201</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">body</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// confirm some properties of the response data</span></span><br><span class="line">    expect(body).to.deep.include(&#123;</span><br><span class="line">      title,</span><br><span class="line">      completed</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// return the field from the body object</span></span><br><span class="line">    <span class="keyword">return</span> body.id</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>We cannot use <code>deep.equals</code> since we do not know the &quot;id&quot; property. For more assertion examples, see my <a href="https://glebbahmutov.com/cypress-examples/commands/assertions.html">Assertions</a> page.</p><p>Ok, so returning <code>body.id</code> at the end could use <code>cy.its</code> command, so let&#39;s move it out. Since we are not returning anything from the <code>.then(body =&gt; ...)</code> callback, the <code>body</code> wil be yielded to the next command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cy.wait(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">  .its(<span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// confirm the status code is 201</span></span><br><span class="line">    expect(response).to.have.property(<span class="string">&#x27;statusCode&#x27;</span>, <span class="number">201</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">body</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// confirm some properties of the response data</span></span><br><span class="line">    expect(body).to.deep.include(&#123;</span><br><span class="line">      title,</span><br><span class="line">      completed</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .its(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">  .then(cy.log)</span><br></pre></td></tr></table></figure><p>We now have just the assertions inside <code>.then</code> callback. Thus we can use the BDD <code>should</code> assertion instead.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cy.wait(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">  .its(<span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// confirm the status code is 201</span></span><br><span class="line">    expect(response).to.have.property(<span class="string">&#x27;statusCode&#x27;</span>, <span class="number">201</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;deep.include&#x27;</span>, &#123; title, completed &#125;)</span><br><span class="line">  .its(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">  .then(cy.log)</span><br></pre></td></tr></table></figure><p><img src="../images/net-cy/should.png" alt="BDD should assertion"></p><p>I hope the above test code transformation has shown some of the beauty and power of the Cypress fluent syntax where we can chain the commands and the assertions.</p><p><strong>Aside:</strong> we cannot use the BDD should assertion to verify the status code property like <code>should(&#39;have.property&#39;, &#39;statusCode&#39;, 201)</code> fluent syntax because <code>have.property</code> is one of just a few assertions that <em>change</em> the subject to the property value, while we need to keep the <code>response</code> object.</p><h3><span id="bonus-cy-spok">Bonus: cy-spok</span></h3><p>The test looks good, but there is one improvement we can make. I like the Command Log to be as useful as possible. The standard Chai assertions are good, but <a href="https://github.com/bahmutov/cy-spok">cy-spok</a> makes them perfect.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spok <span class="keyword">from</span> <span class="string">&#x27;cy-spok&#x27;</span></span><br><span class="line">cy.wait(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">  .its(<span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">  .should(</span><br><span class="line">    spok(&#123;</span><br><span class="line">      statusCode: <span class="number">201</span></span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">  .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">  .should(</span><br><span class="line">    spok(&#123;</span><br><span class="line">      title,</span><br><span class="line">      completed</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">  .its(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">  .then(cy.log)</span><br></pre></td></tr></table></figure><p>Look at the Command Log output - isn&#39;t this super helpful?</p><p><img src="../images/net-cy/spok.png" alt="Using cy-spok to write assertions"></p><p>The plugin <code>cy-spok</code> is built on top of <a href="https://github.com/thlorenz/spok">spok</a> which is <em>really</em> good at asserting nested objects and even checking built-in predicates. For example, we do not know the <code>id</code> of the item, but we know it is a string. Let&#39;s write a single assertion to verify the properties we can inside the entire intercept object.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spok <span class="keyword">from</span> <span class="string">&#x27;cy-spok&#x27;</span></span><br><span class="line">it(<span class="string">&#x27;checks the response using cy-spok&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>).as(<span class="string">&#x27;postTodo&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">&#x27;new todo&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> completed = <span class="literal">false</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.new-todo&#x27;</span>).type(title + <span class="string">&#x27;&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.wait(<span class="string">&#x27;@postTodo&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">    .should(</span><br><span class="line">      spok(&#123;</span><br><span class="line">        statusCode: <span class="number">201</span>,</span><br><span class="line">        body: &#123;</span><br><span class="line">          title,</span><br><span class="line">          completed,</span><br><span class="line">          id: spok.string</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .its(<span class="string">&#x27;body.id&#x27;</span>)</span><br><span class="line">    .then(cy.log)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/net-cy/spok2.png" alt="Using cy-spok to verify the entire nested object"></p><p>Love it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently a user posted in the &lt;a href=&quot;https://gitter.im/cypress-io/cypress&quot;&gt;Cypress Gitter channel&lt;/a&gt; the following image and asked why
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Pick Tests To Run Using The Pull Request Text</title>
    <link href="https://glebbahmutov.com/blog/pick-tests-using-pull-request/"/>
    <id>https://glebbahmutov.com/blog/pick-tests-using-pull-request/</id>
    <published>2022-01-21T05:00:00.000Z</published>
    <updated>2022-01-24T15:02:25.384Z</updated>
    
    <content type="html"><![CDATA[<p>I have been looking closely at keeping the tests <a href="/blog/how-to-keep-cypress-tests-in-another-repo-with-circleci/" title="in a separate repo">in a separate repo</a> from the application. At Mercari US our frontend lives in its own repository, and triggers the Cypress tests in another repository using <a href="https://github.com/bahmutov/trigger-circleci-pipeline">trigger-circleci-pipeline</a> utility. We even report the test statuses back in the original repo using GitHub statuses via <a href="https://github.com/bahmutov/cypress-set-github-status">cypress-set-github-status</a> plugin. But there is a disconnect between opening a feature pull request and picking the tests to run. For speed, we run any changed specs in the test repo branch with the matching name, and then run all tests tagged <code>@sanity</code> (read how we tag the tests in the blog post <a href="/blog/tag-tests/" title="How To Tag And Run End-to-End Tests">How To Tag And Run End-to-End Tests</a>).</p><p>If the developer wants to run more tests, they can trigger the tests from the command line using the <a href="https://github.com/bahmutov/run-cy-on-ci">run-cy-on-ci</a> utility. For convenience, we also allow you to start a new test run via GitHub Actions manual workflow where you can pick the test tags to run via a web form.</p><p><img src="../images/tag-tests/flow-inputs.png" alt="Picking the test tags to run"></p><p>While the above approaches are ok, they are inconvenient. You have to trigger a <em>separate</em> test run, not tied to the original feature pull request. What if you could specify the tests to run <em>when opening</em> your pull request? This is what this blog post will show you.</p><h2><span id="the-application">The application</span></h2><p>For this blog post, I will use the <a href="https://github.com/bahmutov/todomvc-no-tests-vercel">bahmutov/todomvc-no-tests-vercel</a> repo. On every pull request, a preview environment is deployed. The tests live in their own repo <a href="https://github.com/bahmutov/todomvc-tests-circleci">bahmutov/todomvc-tests-circleci</a>. The tests are tagged, and let&#39;s use the utility <a href="https://github.com/bahmutov/find-cypress-specs">find-cypress-specs</a> to <a href="/blog/know-your-tests/" title="learn about them">learn about them</a>.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D find-cypress-specs</span><br><span class="line">+ find-cypress-specs@1.7.0</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;tags&quot;</span>: <span class="string">&quot;find-cypress-specs --tags&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;names&quot;</span>: <span class="string">&quot;find-cypress-specs --names&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ npm run names</span><br><span class="line"></span><br><span class="line">&gt; todomvc-tests-circleci@1.0.0 names</span><br><span class="line">&gt; find-cypress-specs --names</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cypress/integration/last-spec.js (1 test)</span><br><span class="line">└─ last test [@sanity]</span><br><span class="line"></span><br><span class="line">cypress/integration/log-spec.js (2 tests)</span><br><span class="line">└─ Log [@log]</span><br><span class="line">  ├─ logs message on startup [@sanity]</span><br><span class="line">  └─ logs message when adding a todo</span><br><span class="line"></span><br><span class="line">cypress/integration/second-spec.js (1 test)</span><br><span class="line">└─ completes second item [@sanity, @user]</span><br><span class="line"></span><br><span class="line">cypress/integration/spec.js (2 tests)</span><br><span class="line">├─ works</span><br><span class="line">└─ has no visit logic</span><br><span class="line"></span><br><span class="line">cypress/integration/third-spec.js (1 test)</span><br><span class="line">└─ third test</span><br><span class="line"></span><br><span class="line">found 5 specs (7 tests)</span><br></pre></td></tr></table></figure><p>Let&#39;s look at the tags applied to the tests</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ npm run tags</span><br><span class="line"></span><br><span class="line">&gt; todomvc-tests-circleci@1.0.0 tags</span><br><span class="line">&gt; find-cypress-specs --tags</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Tag      Tests</span><br><span class="line">-------  -----</span><br><span class="line">@log     2</span><br><span class="line">@sanity  3</span><br><span class="line">@user    1</span><br></pre></td></tr></table></figure><p>These are the tags we want to the user to pick when they make a new pull request to change the TodoMVC application behavior. Plus of course, the user might want to run all the tests without any filtering.</p><h2><span id="application-pull-request">Application pull request</span></h2><p>Let&#39;s create a pull request template in the application repo. It should be named <a href="https://github.com/bahmutov/todomvc-no-tests-vercel/blob/main/.github/PULL_REQUEST_TEMPLATE.md">.github/PULL_REQUEST_TEMPLATE.md</a> for GitHub to automatically use it when opening a new PR.</p><figure class="highlight md"><figcaption><span>.github/PULL_REQUEST_TEMPLATE.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Summary</span></span><br><span class="line"></span><br><span class="line"><span class="section">## Tests to run</span></span><br><span class="line"></span><br><span class="line">Please pick all tests you would like to run against this pull request</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> [ ] all tests</span><br><span class="line"><span class="bullet">-</span> [ ] tests tagged <span class="code">`@log`</span></span><br><span class="line"><span class="bullet">-</span> [ ] tests tagged <span class="code">`@sanity`</span></span><br><span class="line"><span class="bullet">-</span> [ ] tests tagged <span class="code">`@user`</span></span><br></pre></td></tr></table></figure><p>When a pull request is opened, the application gets deployed, triggering the <code>deployment_status</code> event. If the deployment has been successful, we trigger the tests pipeline in the tests repo. See the <a href="https://github.com/bahmutov/todomvc-no-tests-vercel/blob/main/.github/workflows/deploy.yml">deploy.yml</a> workflow for details, but we pass the URL to test, and the current commit SHA as test pipeline parameters to test the right thing</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export TEST_URL=$&#123;&#123; github.event.deployment_status.target_url &#125;&#125;</span><br><span class="line"></span><br><span class="line">npx trigger-circleci-pipeline \</span><br><span class="line">  --org bahmutov --project todomvc-tests-circleci --branch $&#123;BRANCH_NAME&#125; \</span><br><span class="line">  --parameters TEST_URL=$&#123;TEST_URL&#125;,TEST_BRANCH=$&#123;BRANCH_NAME&#125;,TEST_COMMIT=$&#123;GITHUB_SHA&#125;</span><br></pre></td></tr></table></figure><p>Sometimes we know the pull request number right away. In my situation, that number of unavailable. At least the head commit SHA was known, thus I could pass it to the test pipeline via <code>TEST_COMMIT=$&#123;GITHUB_SHA&#125;</code> parameter.</p><h2><span id="the-tests">The tests</span></h2><p>In the <a href="https://github.com/bahmutov/todomvc-tests-circleci/blob/main/.circleci/config.yml">bahmutov/todomvc-tests-circleci CircleCI workflow</a> we receive the <code>TEST_</code> parameters and run Cypress tests against them. But we also install the <a href="https://github.com/bahmutov/grep-tests-from-pull-requests">grep-tests-from-pull-requests</a> plugin and configure it.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D grep-tests-from-pull-requests</span><br><span class="line">+ grep-tests-from-pull-requests@1.1.0</span><br></pre></td></tr></table></figure><p>In the plugin file we put the <code>grep-tests-from-pull-requests</code> first, before the <code>cypress-grep</code> plugin.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (on, config) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">require</span>(<span class="string">&#x27;grep-tests-from-pull-requests&#x27;</span>)(on, config, &#123;</span><br><span class="line">    <span class="comment">// try to find checkbox lines in the pull request body with these tags</span></span><br><span class="line">    tags: [<span class="string">&#x27;@log&#x27;</span>, <span class="string">&#x27;@sanity&#x27;</span>, <span class="string">&#x27;@user&#x27;</span>],</span><br><span class="line">    <span class="comment">// repo with the pull request text to read</span></span><br><span class="line">    owner: <span class="string">&#x27;bahmutov&#x27;</span>,</span><br><span class="line">    repo: <span class="string">&#x27;todomvc-no-tests-vercel&#x27;</span>,</span><br><span class="line">    <span class="comment">// pass the pull request number in the above repo</span></span><br><span class="line">    <span class="comment">// we will grab the tests to run from the body of the pull request (if the number is known)</span></span><br><span class="line">    pull: config.env.pullRequest,</span><br><span class="line">    <span class="comment">// if the pull request number is unknown, pass the commit SHA</span></span><br><span class="line">    <span class="comment">// as a fallback. The plugin will try to find the PR with this head commit</span></span><br><span class="line">    commit: config.env.testCommit,</span><br><span class="line">    <span class="comment">// to get a private repo above, you might need a personal token</span></span><br><span class="line">    token: process.env.PERSONAL_GH_TOKEN || process.env.GITHUB_TOKEN,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// https://github.com/bahmutov/cypress-grep</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;cypress-grep/src/plugin&#x27;</span>)(config)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In my situation the pull request number is unknown, thus the plugin will try to list all pulls requests in the repo <code>bahmutov/todomvc-no-tests-vercel</code> and find the pull request with the head commit equal to the given SHA. See the <a href="https://github.com/bahmutov/todomvc-tests-circleci/blob/main/.circleci/config.yml">full CircleCI workflow file</a> and the <a href="https://github.com/bahmutov/todomvc-tests-circleci/blob/main/cypress/plugins/index.js">cypress/plugins/index.js</a>.</p><h2><span id="a-pull-request">A pull request</span></h2><p>Let&#39;s open a new pull request in the application repo.</p><p><img src="../images/pick-tests-using-pull-request/pr.png" alt="The pull request gets deployed"></p><p>When opening the pull request, I checked the <code>@user</code> line. The triggered CircleCI pipeline in the <code>todomvc-tests-circleci</code> shows the correct tests to run by tag. It has found the pull request number 11, read the Markdown text, and found the line with checked box for tag <code>@user</code></p><p><img src="../images/pick-tests-using-pull-request/grep-tag.png" alt="The plugin correctly found the tests we marked to run"></p><p>Only a single spec file with a single test has executed. Now let&#39;s say we want to execute all tests. We check the box <code>all tests</code> and push an empty commit.</p><p><img src="../images/pick-tests-using-pull-request/run-all-check.png" alt="Checked all tests box before pushing a new commit"></p><p>The option &quot;all: true&quot; overwrites all other options and all tests will execute</p><p><img src="../images/pick-tests-using-pull-request/all.png" alt="All tests have executed"></p><h3><span id="trigger-workflow-by-clicking-on-the-checkbox">Trigger workflow by clicking on the checkbox</span></h3><p><strong>Tip:</strong> for &quot;normal&quot; GitHub workflows, you can re-trigger the workflow when clicking or clearing the checkboxes using the pull request event with custom activation types:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">pr</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># run tests when the user opened / reopened a PR</span></span><br><span class="line">  <span class="comment"># or pushed a new commit (synchronize type)</span></span><br><span class="line">  <span class="comment"># and also run the selected tests when the user possible</span></span><br><span class="line">  <span class="comment"># checked a box with the type of the tests to run</span></span><br><span class="line">  <span class="comment"># https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">opened</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">synchronize</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">reopened</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">edited</span></span><br></pre></td></tr></table></figure><p>Nice!</p><p>Since each checkbox change produces &quot;edited&quot; event and triggers the workflow, I suggest if you want to check and uncheck multiple boxes to edit the pull request text then click &quot;Save&quot; instead of clicking the individual checkboxes.</p><h2><span id="bonus-1-status-checks">Bonus 1: status checks</span></h2><p>We want to see the feedback on each application pull request right there in the application pull request. Using <a href="https://github.com/bahmutov/cypress-set-github-status">cypress-set-github-status</a> plugin, you can report the Cypress test statuses back on the original commit. The plugin is set up very similarly to the <code>grep-tests-from-pull-requests</code> plugin. In the Cypress plugins file, point at the original repository and pass the commit and the token to set the status.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// when we are done, post the status to GitHub</span></span><br><span class="line"><span class="comment">// application repo, using the passed commit SHA</span></span><br><span class="line"><span class="comment">// https://github.com/bahmutov/cypress-set-github-status</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;cypress-set-github-status&#x27;</span>)(on, config, &#123;</span><br><span class="line">  owner: <span class="string">&#x27;bahmutov&#x27;</span>,</span><br><span class="line">  repo: <span class="string">&#x27;todomvc-no-tests-vercel&#x27;</span>,</span><br><span class="line">  commit: config.env.testCommit || process.env.TEST_COMMIT,</span><br><span class="line">  token: process.env.GITHUB_TOKEN || process.env.PERSONAL_GH_TOKEN,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>In the pull request I have used, the statuses are displayed using my GitHub profile, since I am using my personal GH token.</p><p><img src="../images/pick-tests-using-pull-request/statuses.png" alt="The Cypress test statuses displayed on the original application PR"></p><p>You can see the status checks for yourself in the PR <a href="https://github.com/bahmutov/todomvc-no-tests-vercel/pull/11">#11</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have been looking closely at keeping the tests &lt;a href=&quot;/blog/how-to-keep-cypress-tests-in-another-repo-with-circleci/&quot; title=&quot;in a sep
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="advice" scheme="https://glebbahmutov.com/blog/tags/advice/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>Visit Non-HTML Page</title>
    <link href="https://glebbahmutov.com/blog/visit-non-html-page/"/>
    <id>https://glebbahmutov.com/blog/visit-non-html-page/</id>
    <published>2022-01-20T05:00:00.000Z</published>
    <updated>2022-01-20T15:06:53.327Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine you have a REST API endpoint that returns a JSON object. Can you see that JSON response in a Cypress test? In the blog post <a href="/blog/test-plain-or-markdown-file/" title="Test Plain Or Markdown File Using Cypress">Test Plain Or Markdown File Using Cypress</a> I have shown how to request a plain text resource using <a href="https://on.cypress.io/request">cy.request</a> and write the received response into the empty application document using <code>document.write</code>. In this blog post I will show an alternative approach using <a href="https://on.cypress.io/visit">cy.visit</a> + <a href="https://on.cypress.io/intercept">cy.intercept</a> commands.</p><blockquote class="pullquote"><p>🎁 You can find the code shown in this blog post in my <a href="https://github.com/bahmutov/cypress-workshop-basics">Cypress Basics Workshop</a>.</p></blockquote><p>Let&#39;s say we set our backend with the data items from the fixture file. The initial code looks like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.fixture(<span class="string">&#x27;two-items&#x27;</span>).as(<span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">beforeEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// by using &quot;function () &#123;&#125;&quot; callback we can access</span></span><br><span class="line">  <span class="comment">// the alias created in the previous hook using &quot;this.&lt;name&gt;&quot;</span></span><br><span class="line">  cy.task(<span class="string">&#x27;resetData&#x27;</span>, &#123; <span class="attr">todos</span>: <span class="built_in">this</span>.todos &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Now we want to visit the <code>/todos/1</code> resource to confirm the JSON is returned.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;tries to visit JSON resource&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/todos/1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We get an error.</p><p><img src="../images/visit-non-html-page/visit-json.png" alt="Trying to visit a JSON resource"></p><p>Hmm, how do we &quot;convince&quot; Cypress that the received response should be treated as HTML text? By intercepting and overwriting the response content type header!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;visits the todo JSON response&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/todos/*&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">    req.continue(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.headers[<span class="string">&#x27;content-type&#x27;</span>].includes(<span class="string">&#x27;application/json&#x27;</span>)) &#123;</span><br><span class="line">        res.headers[<span class="string">&#x27;content-type&#x27;</span>] = <span class="string">&#x27;text/html&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      req.body = <span class="string">`&lt;body&gt;&lt;pre&gt;<span class="subst">$&#123;res.body&#125;</span>&lt;/pre&gt;&lt;/body&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).as(<span class="string">&#x27;todo&#x27;</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/todos/1&#x27;</span>)</span><br><span class="line">  <span class="comment">// make sure you intercept has worked</span></span><br><span class="line">  cy.wait(<span class="string">&#x27;@todo&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above works.</p><p><img src="../images/visit-non-html-page/visit-html.png" alt="Treat JSON response as HTML"></p><p>I like showing the response using this approach because it becomes visible in the test video, and can be captured using <a href="https://on.cypress.io/screenshot">cy.screenshot</a> command.</p><p>Let&#39;s confirm the title of the first todo is shown on the page. Because we have used <code>function () &#123; ... &#125;</code> syntax as the test callback, we can access the alias <code>todos</code> using <code>this.todos</code> inside the test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;/todos/1&#x27;</span>)</span><br><span class="line"><span class="comment">// make sure you intercept has worked</span></span><br><span class="line">cy.wait(<span class="string">&#x27;@todo&#x27;</span>)</span><br><span class="line"><span class="comment">// check the text shown in the browser</span></span><br><span class="line">cy.contains(<span class="built_in">this</span>.todos[<span class="number">0</span>].title)</span><br></pre></td></tr></table></figure><p>If you hover over the <code>CONTAINS</code> command, notice the found DOM element on the page is not highlighted.</p><p><img src="../images/visit-non-html-page/contains.png" alt="The found element is not highlighted"></p><p>This is because the response does not include the <code>&lt;body&gt;</code> element. Let&#39;s wrap our JSON response in some markup and make it prettier.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cy.intercept(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/todos/*&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">  req.continue(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.headers[<span class="string">&#x27;content-type&#x27;</span>].includes(<span class="string">&#x27;application/json&#x27;</span>)) &#123;</span><br><span class="line">      res.headers[<span class="string">&#x27;content-type&#x27;</span>] = <span class="string">&#x27;text/html&#x27;</span></span><br><span class="line">      <span class="keyword">const</span> text = <span class="string">`&lt;body&gt;&lt;pre&gt;<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(</span></span></span><br><span class="line"><span class="string"><span class="subst">        res.body,</span></span></span><br><span class="line"><span class="string"><span class="subst">        <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="string"><span class="subst">        <span class="number">2</span></span></span></span><br><span class="line"><span class="string"><span class="subst">      )&#125;</span>&lt;/pre&gt;&lt;/body&gt;`</span></span><br><span class="line">      res.send(text)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).as(<span class="string">&#x27;todo&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Now the element is highlighted correctly.</p><p><img src="../images/visit-non-html-page/json-text.png" alt="The found element is highlighted if we put a proper BODY markup"></p><p>The last part I want to show is how to validate the URL using regular expression named captured groups. The URL should have the todo ID &quot;1&quot;. We could split the pathname and get the id by index, but that is hard to maintain.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cy.location(<span class="string">&#x27;pathname&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;/todos/&#x27;</span>)</span><br><span class="line">  <span class="comment">// we have a string, which we can split by &#x27;/&#x27;</span></span><br><span class="line">  .invoke(<span class="string">&#x27;split&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// and get the 3rd item in the array [&quot;&quot;, &quot;todos&quot;, &quot;1&quot;]</span></span><br><span class="line">  .its(<span class="number">2</span>)</span><br><span class="line">  <span class="comment">// and verify this is the same as the item ID</span></span><br><span class="line">  .should(<span class="string">&#x27;eq&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure><p>If the resources move from <code>/todos/1</code> to <code>/api/todos/1</code> finding all the test places where we get the ID part is going to be tricky. Instead let&#39;s use a regular expression to grab the ID via <a href="https://javascript.info/regexp-groups">named capture group</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.location(<span class="string">&#x27;pathname&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">  <span class="comment">// use named capture group to get the ID from the string</span></span><br><span class="line">  .invoke(<span class="string">&#x27;match&#x27;</span>, <span class="regexp">/\/todos\/(?&lt;id&gt;\d+)/</span>)</span><br><span class="line">  .its(<span class="string">&#x27;groups.id&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/visit-non-html-page/id.png" alt="Use a named capture group to extract the ID from the URL"></p><p>Beautiful.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine you have a REST API endpoint that returns a JSON object. Can you see that JSON response in a Cypress test? In the blog post &lt;a hr
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Know Your Tests</title>
    <link href="https://glebbahmutov.com/blog/know-your-tests/"/>
    <id>https://glebbahmutov.com/blog/know-your-tests/</id>
    <published>2022-01-14T05:00:00.000Z</published>
    <updated>2022-01-14T00:10:08.253Z</updated>
    
    <content type="html"><![CDATA[<p>If you have a repository with large number of Cypress specs, pretty soon they get out of control. What if you have 200 tests, how do you find which tests cover what feature? How do you run all the tests testing X or Y? I the blog post <a href="/blog/tag-tests/" title="How To Tag And Run End-to-End Tests">How To Tag And Run End-to-End Tests</a> I have described how we organize, tag, and run end-to-end tests at Mercari US. In this blog post I will demo a little CLI utility <a href="https://github.com/bahmutov/find-cypress-specs">find-cypress-specs</a> I use to keep track of the tests in the project.</p><blockquote class="pullquote"><p>📦 You can find the example repository with the specs I am using in this blog post at <a href="https://github.com/bahmutov/test-todomvc-using-app-actions">bahmutov/test-todomvc-using-app-actions</a>.</p></blockquote><h2><span id="print-just-the-specs">Print just the specs</span></h2><p>Cypress finds its integration specs inside <code>cypress/integration</code> folder - but you might have renamed it into <code>tests/e2e</code>. So just to find the spec files requires looking at the <code>cypress.json</code> file and using the config settings to glob for files. For example, in my project I ignore the <code>utils.js</code> and some other files.</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;ignoreTestFiles&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;*.page.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;utils.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;*.d.ts&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By default <code>find-cypress-specs</code> simply finds spec files following the settings from my configuration file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs</span><br><span class="line">cypress&#x2F;integration&#x2F;adding-spec.js,cypress&#x2F;integration&#x2F;clear-completed-spec.js,</span><br><span class="line">cypress&#x2F;integration&#x2F;complete-all-spec.js,cypress&#x2F;integration&#x2F;editing-spec.js,</span><br><span class="line">cypress&#x2F;integration&#x2F;item-spec.js,cypress&#x2F;integration&#x2F;persistence-spec.js,</span><br><span class="line">cypress&#x2F;integration&#x2F;routing-spec.js,cypress&#x2F;integration&#x2F;spec.js</span><br></pre></td></tr></table></figure><p>What if we want to see the tests and the suites inside each spec file?</p><h2><span id="print-all-tests">Print all tests</span></h2><p>Let&#39;s get an idea of what is inside each spec file. Using <code>find-cypress-specs --names</code> get the tests and their tags:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --names</span><br><span class="line"></span><br><span class="line">cypress&#x2F;integration&#x2F;adding-spec.js (7 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ New Todo [@adding]</span><br><span class="line">  │ ├─ should allow me to add todo items [@regression]</span><br><span class="line">  │ ├─ adds items [@sanity, @regression]</span><br><span class="line">  │ ├─ should clear text input field when an item is added [@regression]</span><br><span class="line">  │ ├─ should append new items to the bottom of the list</span><br><span class="line">  │ ├─ should trim text input [@regression]</span><br><span class="line">  │ └─ should show #main and #footer when items added</span><br><span class="line">  └─ Adds items (spy example)</span><br><span class="line">    └─ calls inform</span><br><span class="line"></span><br><span class="line">cypress&#x2F;integration&#x2F;clear-completed-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Clear completed button [@complete]</span><br><span class="line">    ├─ should display the correct text</span><br><span class="line">    ├─ should remove completed items when clicked [@sanity, @regression]</span><br><span class="line">    └─ should be hidden when there are no items that are completed [@regression]</span><br><span class="line"></span><br><span class="line">cypress&#x2F;integration&#x2F;complete-all-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Mark all as completed [@complete]</span><br><span class="line">    ├─ should allow me to mark all items as completed [@regression]</span><br><span class="line">    ├─ should allow me to clear the complete state of all items [@sanity, @regression]</span><br><span class="line">    └─ complete all checkbox should update state when items are completed &#x2F; cleared</span><br><span class="line"></span><br><span class="line">cypress&#x2F;integration&#x2F;editing-spec.js (5 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Editing [@editing]</span><br><span class="line">    ├─ should hide other controls when editing</span><br><span class="line">    ├─ should save edits on blur [@sanity]</span><br><span class="line">    ├─ should trim entered text</span><br><span class="line">    ├─ should remove the item if an empty text string was entered</span><br><span class="line">    └─ should cancel edits on escape</span><br><span class="line"></span><br><span class="line">cypress&#x2F;integration&#x2F;item-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Item [@item]</span><br><span class="line">    ├─ should allow me to mark items as complete [@sanity, @regression]</span><br><span class="line">    ├─ should allow me to un-mark items as complete [@regression]</span><br><span class="line">    └─ should allow me to edit an item</span><br><span class="line"></span><br><span class="line">cypress&#x2F;integration&#x2F;persistence-spec.js (1 test)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Persistence [@persistence]</span><br><span class="line">    └─ should persist its data [@sanity, @regression]</span><br><span class="line"></span><br><span class="line">cypress&#x2F;integration&#x2F;routing-spec.js (5 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Routing [@routing]</span><br><span class="line">    ├─ should allow me to display active items [@regression]</span><br><span class="line">    ├─ should respect the back button</span><br><span class="line">    ├─ should allow me to display completed items [@sanity, @regression]</span><br><span class="line">    ├─ should allow me to display all items [@regression]</span><br><span class="line">    └─ should highlight the currently applied filter</span><br><span class="line"></span><br><span class="line">cypress&#x2F;integration&#x2F;spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ When page is initially opened [@regression]</span><br><span class="line">  │ └─ should focus on the todo input field</span><br><span class="line">  ├─ No Todos</span><br><span class="line">  │ └─ should hide #main and #footer [@regression]</span><br><span class="line">  └─ Counter</span><br><span class="line">    └─ should display the current number of todo items [@sanity, @regression]</span><br><span class="line"></span><br><span class="line">found 8 specs (30 tests)</span><br></pre></td></tr></table></figure><p>Ughh, the line height on my blog separates the individual lines, in the terminal it looks much better, maybe I should add <a href="https://github.com/bahmutov/find-cypress-specs/issues/5">some color</a></p><p><img src="../images/know-your-tests/terminal.png" alt="find-cypress-specs --names output in the terminal"></p><p>Great, what if we had some tests <a href="/blog/cypress-test-statuses/" title="pending">pending</a>? The <code>find-cypress-specs</code> would tell us.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cypress&#x2F;integration&#x2F;spec.js (3 tests, 1 pending)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ When page is initially opened [@regression]</span><br><span class="line">  │ └─ should focus on the todo input field</span><br><span class="line">  ├─ No Todos</span><br><span class="line">  │ └─ should hide #main and #footer [@regression]</span><br><span class="line">  └─ Counter</span><br><span class="line">    └⊙ should display the current number of todo items [@sanity, @regression]</span><br><span class="line"></span><br><span class="line">found 8 specs (30 tests, 1 pending)</span><br></pre></td></tr></table></figure><p>Each skipped block / test is marked and the count is shown. Pending tests are warning signs: they are either flaky or test a feature that is not working. Like commented out code, they eventually become a historical anomaly and must be removed.</p><h2><span id="print-and-count-the-tags">Print and count the tags</span></h2><p>Some tests have their own tags, and the suites might have their own tags. The suite tags apply to the tests inside them. We can count the tags across all specs and report the numbers.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --tags</span><br><span class="line"></span><br><span class="line">Tag           Tests</span><br><span class="line">------------  -----</span><br><span class="line">@adding       6</span><br><span class="line">@complete     6</span><br><span class="line">@editing      5</span><br><span class="line">@item         3</span><br><span class="line">@persistence  1</span><br><span class="line">@regression   17</span><br><span class="line">@routing      5</span><br><span class="line">@sanity       8</span><br></pre></td></tr></table></figure><p>Nice, we have tags covering individual features like <code>@editing</code> and <code>@routing</code>, and a few coverage sets of tests like <code>@sanity</code> and <code>@coverage</code>. These numbers are <em>effective</em> tags - if a tag is present on the parent suite, it applies and counts towards each test inside.</p><h2><span id="tips-for-finding-tests">Tips for finding tests</span></h2><p>I love looking at tests using <a href="https://github.com/bahmutov/find-cypress-specs">find-cypress-specs</a>.</p><h3><span id="find-all-tests-with-a-tag">Find all tests with a tag</span></h3><p>To only show the tests tagged <code>@sanity</code>, use the <code>grep</code> CLI utility.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --names | grep @sanity</span><br><span class="line">  │ ├─ adds items [@sanity]</span><br><span class="line">    ├─ should remove completed items when clicked [@sanity]</span><br><span class="line">    ├─ should allow me to clear the complete state of all items [@sanity]</span><br><span class="line">    ├─ should save edits on blur [@sanity]</span><br><span class="line">    ├─ should allow me to mark items as complete [@sanity]</span><br><span class="line">    └─ should persist its data [@sanity]</span><br><span class="line">    ├─ should allow me to display completed items [@sanity]</span><br><span class="line">    └─ should display the current number of todo items [@sanity]</span><br></pre></td></tr></table></figure><p>To count the number of <code>@sanity</code> tests, pipe the output from the <code>grep</code> CLI utility to <code>wc</code> utility</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --names | grep @sanity | wc -l</span><br><span class="line">       8</span><br></pre></td></tr></table></figure><p>I must say this is very crude way, since it only supports tags on the test level. Follow my work in the repository to see if I release a better implementation.</p><h3><span id="find-test-with-its-suite">Find test with its suite</span></h3><p>To find a test by name and print its suite and file, use <code>grep -B &lt;N&gt;</code> to print N text lines before the match.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --names | grep &#x27;adds items&#x27; -B 4</span><br><span class="line">cypress/integration/adding-spec.js (7 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ New Todo [@adding]</span><br><span class="line">  │ ├─ should allow me to add todo items</span><br><span class="line">  │ ├─ adds items [@sanity]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you have a repository with large number of Cypress specs, pretty soon they get out of control. What if you have 200 tests, how do you 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>How To Tag And Run End-to-End Tests</title>
    <link href="https://glebbahmutov.com/blog/tag-tests/"/>
    <id>https://glebbahmutov.com/blog/tag-tests/</id>
    <published>2022-01-10T05:00:00.000Z</published>
    <updated>2022-01-13T20:32:03.677Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s say you have hundreds of end-to-end tests (this is our current situation at Mercari US). Running the tests in parallel makes the test run <a href="/blog/parallel-cypress-tests-gh-action/" title="faster">faster</a>, but there is a problem. If someone inside the organization wants to change how some internal service operates, or changes a particular database field, you do not want to run all the tests. Or at least, you want to run the tests for that product area first to provide fast and useful feedback. This is how I organize and tag my end-to-end tests and run them.</p><blockquote class="pullquote"><p>🧰 I will be using the repo <a href="https://github.com/bahmutov/test-todomvc-using-app-actions">bahmutov/test-todomvc-using-app-actions</a> as my example. It only has about 30 tests, but the lessons scale even better when the number of tests is large.</p></blockquote><!-- toc --><ul><li><a href="#organize-the-tests-by-feature">Organize the tests by feature</a></li><li><a href="#run-any-changed-tests-first">Run any changed tests first</a></li><li><a href="#the-sanity-tag">The sanity tag</a></li><li><a href="#all-tests">All tests</a></li><li><a href="#run-all-tests-with-a-tag-on-ci">Run all tests with a tag on CI</a><ul><li><a href="#circleci">CircleCI</a></li><li><a href="#github-actions">GitHub Actions</a></li><li><a href="#separate-jobs">Separate jobs</a></li></ul></li><li><a href="#the-regression-tag">The regression tag</a></li><li><a href="#the-final-tag-organization">The final tag organization</a></li><li><a href="#bonus-1-github-triggers-circleci">Bonus 1: GitHub triggers CircleCI</a></li><li><a href="#bonus-2-when-you-have-a-lot-of-test-tags">Bonus 2: When you have a lot of test tags</a></li></ul><!-- tocstop --><h2><span id="organize-the-tests-by-feature">Organize the tests by feature</span></h2><p>The first thing I do is to split a single long spec file into separate spec files. Each spec file is focused on a particular application feature. I try to keep the spec duration under two minutes, and I <a href="/blog/split-spec/" title="split long tests">split long tests</a> to make them easier to run. Currently I have 8 specs in the project:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs</span><br><span class="line">cypress&#x2F;integration&#x2F;adding-spec.js,cypress&#x2F;integration&#x2F;clear-completed-spec.js,</span><br><span class="line">cypress&#x2F;integration&#x2F;complete-all-spec.js,cypress&#x2F;integration&#x2F;editing-spec.js,</span><br><span class="line">cypress&#x2F;integration&#x2F;item-spec.js,cypress&#x2F;integration&#x2F;persistence-spec.js,</span><br><span class="line">cypress&#x2F;integration&#x2F;routing-spec.js,cypress&#x2F;integration&#x2F;spec.js</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> I will use <a href="https://github.com/bahmutov/find-cypress-specs">find-cypress-specs</a> utility to print specs and test names.</p><p>In each spec file, I add a tag to the suite of tests using the <a href="https://github.com/cypress-io/cypress-grep">cypress-grep</a> convention. For example, the tests related to routing are tagged <code>@routing</code>. The <code>@</code> character has no special meaning, it just makes it simpler to find it in the source code.</p><figure class="highlight js"><figcaption><span>cypress/integration/routing-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;TodoMVC&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  context(<span class="string">&#x27;Routing&#x27;</span>, &#123; <span class="attr">tags</span>: <span class="string">&#x27;@routing&#x27;</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    it(<span class="string">&#x27;should allow me to display active items&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    it(<span class="string">&#x27;should respect the back button&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I can see all tests and their tags using <a href="https://github.com/bahmutov/find-cypress-specs">find-cypress-specs</a> with <code>--names</code> argument.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --names</span><br><span class="line"></span><br><span class="line">cypress/integration/adding-spec.js (7 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ New Todo [@adding]</span><br><span class="line">  │ ├─ should allow me to add todo items</span><br><span class="line">  │ ├─ adds items</span><br><span class="line">  │ ├─ should clear text input field when an item is added</span><br><span class="line">  │ ├─ should append new items to the bottom of the list</span><br><span class="line">  │ ├─ should trim text input</span><br><span class="line">  │ └─ should show #main and #footer when items added</span><br><span class="line">  └─ Adds items (spy example)</span><br><span class="line">    └─ calls inform</span><br><span class="line"></span><br><span class="line">cypress/integration/clear-completed-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Clear completed button [@complete]</span><br><span class="line">    ├─ should display the correct text</span><br><span class="line">    ├─ should remove completed items when clicked</span><br><span class="line">    └─ should be hidden when there are no items that are completed</span><br><span class="line"></span><br><span class="line">cypress/integration/complete-all-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Mark all as completed [@complete]</span><br><span class="line">    ├─ should allow me to mark all items as completed</span><br><span class="line">    ├─ should allow me to clear the complete state of all items</span><br><span class="line">    └─ complete all checkbox should update state when items are completed / cleared</span><br><span class="line"></span><br><span class="line">cypress/integration/editing-spec.js (5 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Editing [@editing]</span><br><span class="line">    ├─ should hide other controls when editing</span><br><span class="line">    ├─ should save edits on blur</span><br><span class="line">    ├─ should trim entered text</span><br><span class="line">    ├─ should remove the item if an empty text string was entered</span><br><span class="line">    └─ should cancel edits on escape</span><br><span class="line"></span><br><span class="line">cypress/integration/item-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Item [@item]</span><br><span class="line">    ├─ should allow me to mark items as complete</span><br><span class="line">    ├─ should allow me to un-mark items as complete</span><br><span class="line">    └─ should allow me to edit an item</span><br><span class="line"></span><br><span class="line">cypress/integration/persistence-spec.js (1 test)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Persistence [@persistence]</span><br><span class="line">    └─ should persist its data</span><br><span class="line"></span><br><span class="line">cypress/integration/routing-spec.js (5 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Routing [@routing]</span><br><span class="line">    ├─ should allow me to display active items</span><br><span class="line">    ├─ should respect the back button</span><br><span class="line">    ├─ should allow me to display completed items</span><br><span class="line">    ├─ should allow me to display all items</span><br><span class="line">    └─ should highlight the currently applied filter</span><br><span class="line"></span><br><span class="line">cypress/integration/spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ When page is initially opened</span><br><span class="line">  │ └─ should focus on the todo input field</span><br><span class="line">  ├─ No Todos</span><br><span class="line">  │ └─ should hide #main and #footer</span><br><span class="line">  └─ Counter</span><br><span class="line">    └─ should display the current number of todo items</span><br><span class="line"></span><br><span class="line">found 8 specs and 30 tests</span><br></pre></td></tr></table></figure><p>Not all tests need tags. For example, the last <code>spec.js</code> collects miscellaneous tests without any tags.</p><h2><span id="run-any-changed-tests-first">Run any changed tests first</span></h2><p>I have shown how to run the changed specs first, see <a href="/blog/faster-ci-feedback/" title="GitHub Actions post">GitHub Actions post</a> or <a href="/blog/faster-ci-feedback-on-circleci/" title="CircleCI post">CircleCI post</a>. In my example application, I am using CircleCI, here is how I run the changed specs before running all tests. You can find the full CircleCI config file at <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/blob/master/circle.yml">circle.yml</a>.</p><figure class="highlight yml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="comment"># https://github.com/cypress-io/circleci-orb</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@1.29.0</span></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Run</span> <span class="string">changed</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line">            <span class="comment"># stop if on master branch - all tests should run there</span></span><br><span class="line">            <span class="string">if</span> [ <span class="string">&quot;$CIRCLE_BRANCH&quot;</span> <span class="string">=</span> <span class="string">&quot;master&quot;</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">              <span class="string">echo</span> <span class="string">&quot;Default branch, will run all tests&quot;</span></span><br><span class="line">              <span class="string">exit</span> <span class="number">0</span></span><br><span class="line">            <span class="string">fi</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># be careful about counting the lines</span></span><br><span class="line">            <span class="string">specsLines=$(git</span> <span class="string">diff</span> <span class="string">--name-only</span> <span class="string">--diff-filter=AMR</span> <span class="string">origin/master</span> <span class="string">|</span> &#123; <span class="string">grep</span> <span class="string">cypress/integration</span> <span class="string">||</span> <span class="literal">true</span><span class="string">;</span> &#125;<span class="string">)</span></span><br><span class="line">            <span class="string">n=$(echo</span> <span class="string">$specsLines</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">&#x27;/^\s*$/d&#x27;</span> <span class="string">|</span> <span class="string">wc</span> <span class="string">-l</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-d</span> <span class="string">&#x27; &#x27;</span><span class="string">)</span></span><br><span class="line">            <span class="string">specs=$(echo</span> <span class="string">$specsLines</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">&#x27;/^\s*$/d&#x27;</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">&#x27;\n&#x27;</span> <span class="string">&#x27;,&#x27;</span><span class="string">)</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;Changed and added $&#123;n&#125; Cypress specs&quot;</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">$&#123;specs&#125;</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="string">if</span> [ <span class="string">$</span>&#123;<span class="string">n</span>&#125; <span class="string">-lt</span> <span class="number">1</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">              <span class="string">echo</span> <span class="string">&quot;No Cypress specs changed, exiting...&quot;</span></span><br><span class="line">              <span class="string">exit</span> <span class="number">0</span></span><br><span class="line">            <span class="string">fi</span></span><br><span class="line">            <span class="comment"># we have to form the Cypress run command ourselves</span></span><br><span class="line">            <span class="string">npx</span> <span class="string">cypress</span> <span class="string">run</span> <span class="string">--spec</span> <span class="string">$&#123;specs&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Run</span> <span class="string">all</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">requires:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Run</span> <span class="string">changed</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">build:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">print-tests</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>If we push a branch <code>change1</code> where we just change something in <code>cypress/integration/routing.js</code> file, we see that test executed first.</p><p><img src="../images/tag-tests/workflow.png" alt="Workflow with two jobs"></p><p>Inside the &quot;Run changed tests&quot; job, Cypress shows the specs it is about to execute.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Changed and added 1 Cypress specs</span><br><span class="line">cypress/integration/complete-all-spec.js,</span><br><span class="line">...</span><br><span class="line">====================================================================================================</span><br><span class="line"></span><br><span class="line">  (Run Starting)</span><br><span class="line"></span><br><span class="line">  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">  │ Cypress:        9.2.0                                                                          │</span><br><span class="line">  │ Browser:        Electron 94 (headless)                                                         │</span><br><span class="line">  │ Node Version:   v12.19.0 (/usr/local/bin/node)                                                 │</span><br><span class="line">  │ Specs:          1 found (complete-all-spec.js)                                                 │</span><br><span class="line">  │ Searched:       cypress/integration/complete-all-spec.js,                                      │</span><br><span class="line">  └────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>Running the changed tests first gives us fast feedback. If the changed tests pass, all tests execute to confirm the application works. Notice that running the changed tests is much faster compared to running all tests.</p><p><img src="../images/tag-tests/timing.png" alt="The changed specs job is shorter than running all specs job"></p><h2><span id="the-sanity-tag">The sanity tag</span></h2><p>As the number of specs grows, running all tests on every pull request becomes a burden on the infrastructure and CI resources. Thus I recommend creating a small set of sanity tests, with one test per feature. We can tag these tests <code>@sanity</code> and run on every pull request by default. Here are the tagged tests</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --names</span><br><span class="line"></span><br><span class="line">cypress/integration/adding-spec.js (7 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ New Todo [@adding]</span><br><span class="line">  │ ├─ should allow me to add todo items</span><br><span class="line">  │ ├─ adds items [@sanity]</span><br><span class="line">  │ ├─ should clear text input field when an item is added</span><br><span class="line">  │ ├─ should append new items to the bottom of the list</span><br><span class="line">  │ ├─ should trim text input</span><br><span class="line">  │ └─ should show #main and #footer when items added</span><br><span class="line">  └─ Adds items (spy example)</span><br><span class="line">    └─ calls inform</span><br><span class="line"></span><br><span class="line">cypress/integration/clear-completed-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Clear completed button [@complete]</span><br><span class="line">    ├─ should display the correct text</span><br><span class="line">    ├─ should remove completed items when clicked [@sanity]</span><br><span class="line">    └─ should be hidden when there are no items that are completed</span><br><span class="line"></span><br><span class="line">cypress/integration/complete-all-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Mark all as completed [@complete]</span><br><span class="line">    ├─ should allow me to mark all items as completed</span><br><span class="line">    ├─ should allow me to clear the complete state of all items [@sanity]</span><br><span class="line">    └─ complete all checkbox should update state when items are completed / cleared</span><br><span class="line"></span><br><span class="line">cypress/integration/editing-spec.js (5 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Editing [@editing]</span><br><span class="line">    ├─ should hide other controls when editing</span><br><span class="line">    ├─ should save edits on blur [@sanity]</span><br><span class="line">    ├─ should trim entered text</span><br><span class="line">    ├─ should remove the item if an empty text string was entered</span><br><span class="line">    └─ should cancel edits on escape</span><br><span class="line"></span><br><span class="line">cypress/integration/item-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Item [@item]</span><br><span class="line">    ├─ should allow me to mark items as complete [@sanity]</span><br><span class="line">    ├─ should allow me to un-mark items as complete</span><br><span class="line">    └─ should allow me to edit an item</span><br><span class="line"></span><br><span class="line">cypress/integration/persistence-spec.js (1 test)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Persistence [@persistence]</span><br><span class="line">    └─ should persist its data [@sanity]</span><br><span class="line"></span><br><span class="line">cypress/integration/routing-spec.js (5 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Routing [@routing]</span><br><span class="line">    ├─ should allow me to display active items</span><br><span class="line">    ├─ should respect the back button</span><br><span class="line">    ├─ should allow me to display completed items [@sanity]</span><br><span class="line">    ├─ should allow me to display all items</span><br><span class="line">    └─ should highlight the currently applied filter</span><br><span class="line"></span><br><span class="line">cypress/integration/spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ When page is initially opened</span><br><span class="line">  │ └─ should focus on the todo input field</span><br><span class="line">  ├─ No Todos</span><br><span class="line">  │ └─ should hide #main and #footer</span><br><span class="line">  └─ Counter</span><br><span class="line">    └─ should display the current number of todo items [@sanity]</span><br><span class="line"></span><br><span class="line">found 8 specs and 30 tests</span><br></pre></td></tr></table></figure><p>We can run the sanity tests instead of all the tests. Let&#39;s modify the &quot;Run all specs&quot; job by passing <code>grepTags</code> parameter through the Cypress environment variables. This is how you control the <code>cypress-grep</code> plugin.</p><figure class="highlight yml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Run</span> <span class="string">sanity</span> <span class="string">tests</span></span><br><span class="line">    <span class="attr">requires:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Run</span> <span class="string">changed</span> <span class="string">tests</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">print-tests</span></span><br><span class="line">    <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">env:</span> <span class="string">grepTags=@sanity</span></span><br></pre></td></tr></table></figure><p>If you look at the CircleCI output, you can see that cypress-grep plugin is working</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cypress-grep: filtering using tag &quot;@sanity&quot;</span><br><span class="line">cypress-grep: will omit filtered tests</span><br><span class="line">cypress-grep: filtering specs using tag &quot;@sanity&quot;</span><br></pre></td></tr></table></figure><p>The final test run only executed 8 tests.</p><p><img src="../images/tag-tests/eight.png" alt="CircleCI job only ran 8 sanity tests"></p><p><strong>Bonus:</strong> running just the sanity tests and skipping the rest saves on your <a href="https://www.cypress.io/pricing/">Cypress Dashboard</a> bill 💸</p><h2><span id="all-tests">All tests</span></h2><p>Hmm, we should still run all tests sometimes. The best solution is to run all tests periodically, for example every night, plus on demand by triggering the workflow using something like <a href="https://github.com/bahmutov/run-cy-on-ci">bahmutov/run-cy-on-ci</a>. I have <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/commit/89d80d20388d4b913c4131b19cefb95227e2a205">added a workflow</a> to run all tests nightly</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">nightly:</span></span><br><span class="line">    <span class="attr">triggers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">schedule:</span></span><br><span class="line">          <span class="attr">cron:</span> <span class="string">&#x27;0 0 * * *&#x27;</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="attr">branches:</span></span><br><span class="line">              <span class="attr">only:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Run</span> <span class="string">all</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">build:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">print-tests</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="string">...</span></span><br></pre></td></tr></table></figure><h2><span id="run-all-tests-with-a-tag-on-ci">Run all tests with a tag on CI</span></h2><h3><span id="circleci">CircleCI</span></h3><p>Imagine someone is changing a component related to editing the Todo text on the page. They have deployed the site and want to run all end-to-end tests related to editing items. Without <a href="../tags/code-coverage/">code coverage</a> it is hard to say which E2E tests should run. Well, in general we run the sanity tests and we should run all tests tagged <code>@editing</code>. Let&#39;s allow anyone to trigger the CI workflow and to pass the tag to the test job. I will add a new workflow and pipeline parameters to the <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/blob/master/circle.yml">circle.yml</a> file.</p><figure class="highlight yml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="attr">GREP_TAGS:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">enum</span></span><br><span class="line">    <span class="attr">enum:</span></span><br><span class="line">      [</span><br><span class="line">        <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@sanity&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@adding&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@complete&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@editing&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@item&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@persistence&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@routing&#x27;</span>,</span><br><span class="line">      ]</span><br><span class="line">    <span class="attr">default:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">nightly:</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tagged:</span></span><br><span class="line">    <span class="attr">when:</span> <span class="string">&lt;&lt;</span> <span class="string">pipeline.parameters.GREP_TAGS</span> <span class="string">&gt;&gt;</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tagged</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">build:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">print-tests</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">grepTags=&lt;&lt;</span> <span class="string">pipeline.parameters.GREP_TAGS</span> <span class="string">&gt;&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">unless:</span> <span class="string">&lt;&lt;</span> <span class="string">pipeline.parameters.GREP_TAGS</span> <span class="string">&gt;&gt;</span></span><br><span class="line">    <span class="string">...</span></span><br></pre></td></tr></table></figure><p>Our new workflow <code>tagged</code> only runs when there is <code>GREP_TAGS</code> string and an empty default string &quot;&quot; does not count. Let&#39;s trigger the workflow from the CircleCI web interface.</p><p><img src="../images/tag-tests/trigger.png" alt="Click the &quot;Trigger pipeline&quot; button"></p><p>Add a string parameter named <code>GREP_TAGS</code> and enter one of the above <code>enum</code> values, like <code>@editing</code>.</p><p><img src="../images/tag-tests/enter-tag.png" alt="Enter the tag to use to filter the tests"></p><p>The workflow <code>tagged</code> runs, while the normal workflow is skipped. On other commits, the entire <code>build</code> workflow runs, while the <code>tagged</code> workflow is skipped.</p><p><img src="../images/tag-tests/pipelines.png" alt="Workflows skipped depending on the GREP_TAGS parameter"></p><p>The workflows are enabled and disabled using the pipeline parameter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tagged:</span><br><span class="line">  when: &lt;&lt; pipeline.parameters.GREP_TAGS &gt;&gt;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">build:</span><br><span class="line">  unless: &lt;&lt; pipeline.parameters.GREP_TAGS &gt;&gt;</span><br></pre></td></tr></table></figure><h3><span id="github-actions">GitHub Actions</span></h3><p>The user who tries to run the tests by a tag on CircleCI has to remember how to trigger the workflow and add the right parameter. I would like the experience to be simpler. Thus I looked at using GitHub Actions with its new &quot;workflow_dispatch&quot; workflows. In the <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/blob/master/.github/workflows/tagged.yml">.github/workflows/tagged.yml</a> I have defined a workflow where each input parameter is a boolean for the tag to run. It looks scary, but this is simple repetition: each tag matches one input parameter and one job to run.</p><figure class="highlight yml"><figcaption><span>.github/workflows/tagged.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">tagged</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="comment"># these inputs will be shown to the user on GitHub Actions page</span></span><br><span class="line">      <span class="comment"># and the user can simply check off the tags to run</span></span><br><span class="line">      <span class="attr">sanity:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">tests</span> <span class="string">tagged</span> <span class="string">&quot;@sanity&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">      <span class="attr">adding:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">tests</span> <span class="string">tagged</span> <span class="string">&quot;@adding&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">      <span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">tagged:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># install dependencies and start the server</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span> <span class="string">📦</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">runTests:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Start</span> <span class="string">the</span> <span class="string">server</span> <span class="string">🚀</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">start</span> <span class="string">&amp;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">sanity</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.inputs.sanity</span> <span class="string">==</span> <span class="string">&#x27;true&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">install:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">grepTags=@sanity</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">adding</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.inputs.adding</span> <span class="string">==</span> <span class="string">&#x27;true&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">install:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">grepTags=@adding</span></span><br><span class="line"></span><br><span class="line">      <span class="string">...</span></span><br></pre></td></tr></table></figure><p>This is pretty sweet - any user with GitHub access to the repo can click on the button &quot;Run workflow&quot; and check off the tags to test.</p><p><img src="../images/tag-tests/pick-tags.png" alt="Pick the test tags to run"></p><p>Only the picked test tags execute, the other steps are skipped.</p><p><img src="../images/tag-tests/action.png" alt="Running just the selected sets of tests on GitHub"></p><p>Beautiful.</p><h3><span id="separate-jobs">Separate jobs</span></h3><p>Instead of having a single job executing tagged tests, we could have created a separate job for each tag that can be picked. These jobs could all work in parallel. Here is the main part of the <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/blob/master/.github/workflows/tagged-jobs.yml">tagged-jobs.yml</a></p><figure class="highlight yml"><figcaption><span>.github/workflows/tagged-jobs.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># separate running each grep tag into own job</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">tagged-jobs</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="comment"># these inputs will be shown to the user on GitHub Actions page</span></span><br><span class="line">      <span class="comment"># and the user can simply check off the tags to run</span></span><br><span class="line">      <span class="attr">sanity:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">tests</span> <span class="string">tagged</span> <span class="string">&quot;@sanity&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">      <span class="attr">adding:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">tests</span> <span class="string">tagged</span> <span class="string">&quot;@adding&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">      <span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># each job is independent from other jobs</span></span><br><span class="line">  <span class="comment"># and only runs the tests for the picked test tag</span></span><br><span class="line">  <span class="attr">sanity:</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.inputs.sanity</span> <span class="string">==</span> <span class="string">&#x27;true&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">sanity</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">grepTags=@sanity</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">adding:</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.inputs.adding</span> <span class="string">==</span> <span class="string">&#x27;true&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">adding</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">grepTags=@adding</span></span><br><span class="line"></span><br><span class="line">  <span class="string">...</span></span><br></pre></td></tr></table></figure><p>Now we can pick the features to test without worrying about a long queue of tests running sequentially.</p><p><img src="../images/tag-tests/pick-separate-tags.png" alt="Pick as many features to test as you wish"></p><p>The screenshot below shows how the jobs proceed in parallel with each other</p><p><img src="../images/tag-tests/parallel.png" alt="The parallel test jobs each running tagged tests"></p><p>Fast.</p><h2><span id="the-regression-tag">The regression tag</span></h2><p>Imagine you are deploying a schema change in the database, or fiddling with some API service. You might not know which area of the site you might have broken. Running all tests might take too long, and running just the tests tagged <code>@sanity</code> is not enough - they are only covering the essential user paths. We need something in between the <code>@sanity</code> list and all the tests.</p><p>This is where the <code>@regression</code> tag comes in. We can mark a big chunk of the tests with this tag, and whenever we want to confirm the site still works, we run those tests by tag. Of course, running all the tests could be better, but there is a trade off: speed vs completeness.</p><p>Here is how the &quot;clear-completed-spec.js&quot; looks. The tests tagged <code>@sanity</code> get the second tag, and another test now gets its <code>@regression</code> tag.</p><figure class="highlight js"><figcaption><span>cypress/integration/clear-completed-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;TodoMVC&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  context(<span class="string">&#x27;Clear completed button&#x27;</span>, &#123; <span class="attr">tags</span>: <span class="string">&#x27;@complete&#x27;</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    it(<span class="string">&#x27;should display the correct text&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">    it(<span class="string">&#x27;should remove completed items when clicked&#x27;</span>,</span><br><span class="line">      &#123; <span class="attr">tags</span>: [<span class="string">&#x27;@sanity&#x27;</span>, <span class="string">&#x27;@regression&#x27;</span>] &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">    it(<span class="string">&#x27;should be hidden when there are no items that are completed&#x27;</span>,</span><br><span class="line">      &#123; <span class="attr">tags</span>: <span class="string">&#x27;@regression&#x27;</span> &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>In general, the <code>@regression</code> set is a superset of the <code>@sanity</code> tests.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --names | grep &#x27;@sanity&#x27; | wc -l</span><br><span class="line">       8</span><br><span class="line">$ npx find-cypress-specs --names | grep &#x27;@regression&#x27; | wc -l</span><br><span class="line">      17</span><br></pre></td></tr></table></figure><p>The full test outline</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --names</span><br><span class="line"></span><br><span class="line">$ npx find-cypress-specs --names</span><br><span class="line"></span><br><span class="line">cypress/integration/adding-spec.js (7 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ New Todo [@adding]</span><br><span class="line">  │ ├─ should allow me to add todo items [@regression]</span><br><span class="line">  │ ├─ adds items [@sanity, @regression]</span><br><span class="line">  │ ├─ should clear text input field when an item is added [@regression]</span><br><span class="line">  │ ├─ should append new items to the bottom of the list</span><br><span class="line">  │ ├─ should trim text input [@regression]</span><br><span class="line">  │ └─ should show #main and #footer when items added</span><br><span class="line">  └─ Adds items (spy example)</span><br><span class="line">    └─ calls inform</span><br><span class="line"></span><br><span class="line">cypress/integration/clear-completed-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Clear completed button [@complete]</span><br><span class="line">    ├─ should display the correct text</span><br><span class="line">    ├─ should remove completed items when clicked [@sanity, @regression]</span><br><span class="line">    └─ should be hidden when there are no items that are completed [@regression]</span><br><span class="line"></span><br><span class="line">cypress/integration/complete-all-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Mark all as completed [@complete]</span><br><span class="line">    ├─ should allow me to mark all items as completed [@regression]</span><br><span class="line">    ├─ should allow me to clear the complete state of all items [@sanity, @regression]</span><br><span class="line">    └─ complete all checkbox should update state when items are completed / cleared</span><br><span class="line"></span><br><span class="line">cypress/integration/editing-spec.js (5 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Editing [@editing]</span><br><span class="line">    ├─ should hide other controls when editing</span><br><span class="line">    ├─ should save edits on blur [@sanity]</span><br><span class="line">    ├─ should trim entered text</span><br><span class="line">    ├─ should remove the item if an empty text string was entered</span><br><span class="line">    └─ should cancel edits on escape</span><br><span class="line"></span><br><span class="line">cypress/integration/item-spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Item [@item]</span><br><span class="line">    ├─ should allow me to mark items as complete [@sanity, @regression]</span><br><span class="line">    ├─ should allow me to un-mark items as complete [@regression]</span><br><span class="line">    └─ should allow me to edit an item</span><br><span class="line"></span><br><span class="line">cypress/integration/persistence-spec.js (1 test)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Persistence [@persistence]</span><br><span class="line">    └─ should persist its data [@sanity, @regression]</span><br><span class="line"></span><br><span class="line">cypress/integration/routing-spec.js (5 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  └─ Routing [@routing]</span><br><span class="line">    ├─ should allow me to display active items [@regression]</span><br><span class="line">    ├─ should respect the back button</span><br><span class="line">    ├─ should allow me to display completed items [@sanity, @regression]</span><br><span class="line">    ├─ should allow me to display all items [@regression]</span><br><span class="line">    └─ should highlight the currently applied filter</span><br><span class="line"></span><br><span class="line">cypress/integration/spec.js (3 tests)</span><br><span class="line">└─ TodoMVC</span><br><span class="line">  ├─ When page is initially opened [@regression]</span><br><span class="line">  │ └─ should focus on the todo input field</span><br><span class="line">  ├─ No Todos</span><br><span class="line">  │ └─ should hide #main and #footer [@regression]</span><br><span class="line">  └─ Counter</span><br><span class="line">    └─ should display the current number of todo items [@sanity, @regression]</span><br><span class="line"></span><br><span class="line">found 8 specs and 30 tests</span><br></pre></td></tr></table></figure><p>I have updated the CircleCI and the GitHub Actions workflows to allow selecting <code>@regression</code> tag.</p><p><img src="../images/tag-tests/regression.png" alt="Manually running all regression tests on GitHub"></p><p><img src="../images/tag-tests/regression-job.png" alt="A single job ran executing just the regression tests"></p><h2><span id="the-final-tag-organization">The final tag organization</span></h2><p>To summarize: we have organized our tests using tags. There are feature-level tags like <code>@editing</code> and two &quot;coverage&quot; tags: <code>@sanity</code> and <code>@regression</code>. The sets of tests overlap, and there might be tests without any tags.</p><p><img src="../images/tag-tests/tag-organization.png" alt="Test tag coverage"></p><p>On every pull request we execute the changed specs and then run <code>@sanity</code> tests. Whenever someone is working on the feature, they can quickly run the tests for that feature using the individual feature tag. When in doubt, you can execute a wider set of tests using <code>@regression</code> tag. To completely test the software (which we can do periodically), one can run all the tests without any filtering by tag.</p><h2><span id="bonus-1-github-triggers-circleci">Bonus 1: GitHub triggers CircleCI</span></h2><p>If you have implemented running tests on CircleCI, but want to use the GitHub Actions user interface, you can collect the tags and trigger the CircleCI pipeline, see <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/blob/master/.github/workflows/trigger-circleci.yml">trigger-circleci.yml</a> workflow file.</p><figure class="highlight yml"><figcaption><span>trigger-circleci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">trigger-circleci</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="comment"># these inputs will be shown to the user on GitHub Actions page</span></span><br><span class="line">      <span class="comment"># and the user can simply check off the tags to run</span></span><br><span class="line">      <span class="attr">sanity:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">tests</span> <span class="string">tagged</span> <span class="string">&quot;@sanity&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">      <span class="attr">regression:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">tests</span> <span class="string">tagged</span> <span class="string">&quot;@regression&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">      <span class="string">...</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">trigger-circleci:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Print</span> <span class="string">GitHub</span> <span class="string">event</span> <span class="string">inputs</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">EVENT:</span> <span class="string">$&#123;&#123;</span> <span class="string">toJson(github.event.inputs)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;$EVENT&quot;</span></span><br><span class="line">          <span class="comment"># all environment variables that start with GITHUB_</span></span><br><span class="line">          <span class="comment"># https://github.com/bahmutov/print-env</span></span><br><span class="line">          <span class="string">npx</span> <span class="string">@bahmutov/print-env</span> <span class="string">GITHUB_</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Trigger</span> <span class="string">CircleCI</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">CIRCLE_CI_API_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CIRCLE_CI_API_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="comment"># collect all input parameters into one string</span></span><br><span class="line">          <span class="string">TAGS=</span></span><br><span class="line">          <span class="string">if</span> [[ <span class="string">&quot;$<span class="template-variable">&#123;&#123; github.event.inputs.sanity &#125;&#125;</span>&quot;</span> <span class="string">==</span> <span class="string">&quot;true&quot;</span> ]]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">            <span class="string">TAGS=&quot;@sanity&quot;</span></span><br><span class="line">          <span class="string">fi</span></span><br><span class="line">          <span class="string">if</span> [[ <span class="string">&quot;$<span class="template-variable">&#123;&#123; github.event.inputs.regression &#125;&#125;</span>&quot;</span> <span class="string">==</span> <span class="string">&quot;true&quot;</span> ]]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">            <span class="string">TAGS=&quot;$TAGS</span> <span class="string">@regression&quot;</span></span><br><span class="line">          <span class="string">fi</span></span><br><span class="line">          <span class="string">if</span> [[ <span class="string">&quot;$<span class="template-variable">&#123;&#123; github.event.inputs.adding &#125;&#125;</span>&quot;</span> <span class="string">==</span> <span class="string">&quot;true&quot;</span> ]]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">            <span class="string">TAGS=&quot;$TAGS</span> <span class="string">@adding&quot;</span></span><br><span class="line">          <span class="string">fi</span></span><br><span class="line">          <span class="string">...</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;Collected tags: $TAGS&quot;</span></span><br><span class="line">          <span class="comment"># https://github.com/bahmutov/trigger-circleci-pipeline</span></span><br><span class="line">          <span class="string">npx</span> <span class="string">trigger-circleci-pipeline</span> <span class="string">\</span></span><br><span class="line">            <span class="string">--org</span> <span class="string">bahmutov</span> <span class="string">--project</span> <span class="string">test-todomvc-using-app-actions</span> <span class="string">\</span></span><br><span class="line">            <span class="string">--branch</span> <span class="string">$GITHUB_REF_NAME</span> <span class="string">--parameters</span> <span class="string">GREP_TAGS=&quot;$TAGS&quot;</span></span><br></pre></td></tr></table></figure><p>I am using <a href="https://github.com/bahmutov/print-env">print-env</a> to print the GitHub environment variables and <a href="https://github.com/bahmutov/trigger-circleci-pipeline">trigger-circleci-pipeline</a> to trigger the CircleCI pipeline via API (you will need your personal CircleCI API token to work).</p><h2><span id="bonus-2-when-you-have-a-lot-of-test-tags">Bonus 2: When you have a lot of test tags</span></h2><p>If you have a lot of test tags, and want to let the user pick the ones to run from GitHub user interface, using individual input workflow parameters quickly runs into the ten parameters max limit (January 2022). Thus I have reworked the above workflow to let the user pick some common sets (like the regression the and sanity sets) using checkboxes, and let the user pick other tags to run by entering them as a single string. Find the full workflow at <a href="https://github.com/bahmutov/test-todomvc-using-app-actions/blob/master/.github/workflows/trigger-circle-type.yml">trigger-circle-type.yml</a></p><figure class="highlight yml"><figcaption><span>.github/workflows/trigger-circle-type.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">trigger-circleci-type</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="comment"># these inputs will be shown to the user on GitHub Actions page</span></span><br><span class="line">      <span class="comment"># and the user can simply check off the tags to run</span></span><br><span class="line">      <span class="comment"># the two sets of tests covering most of the features</span></span><br><span class="line">      <span class="comment"># <span class="doctag">NOTE:</span> GitHub workflows are limited to ten input parameters</span></span><br><span class="line">      <span class="attr">sanity:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">tests</span> <span class="string">tagged</span> <span class="string">&quot;@sanity&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">      <span class="attr">regression:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Run</span> <span class="string">the</span> <span class="string">tests</span> <span class="string">tagged</span> <span class="string">&quot;@regression&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">      <span class="comment"># tests for individual features - the user will need to type the tags</span></span><br><span class="line">      <span class="comment"># comma-separated in order to avoid hitting then ten workflow input limit</span></span><br><span class="line">      <span class="attr">testTags:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">Other</span> <span class="string">test</span> <span class="string">tags</span> <span class="string">to</span> <span class="string">run,</span> <span class="string">comma-separated.</span> <span class="string">Includes</span> <span class="string">@adding,</span> <span class="string">@complete,</span></span><br><span class="line">          <span class="string">@editing,</span> <span class="string">@item,</span> <span class="string">@persistence,</span> <span class="string">@routing</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="comment"># collect all input parameters into one string</span></span><br><span class="line">  <span class="string">TAGS=</span></span><br><span class="line">  <span class="string">if</span> [[ <span class="string">&quot;$<span class="template-variable">&#123;&#123; github.event.inputs.sanity &#125;&#125;</span>&quot;</span> <span class="string">==</span> <span class="string">&quot;true&quot;</span> ]]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">    <span class="string">TAGS=&quot;@sanity&quot;</span></span><br><span class="line">  <span class="string">fi</span></span><br><span class="line">  <span class="string">if</span> [[ <span class="string">&quot;$<span class="template-variable">&#123;&#123; github.event.inputs.regression &#125;&#125;</span>&quot;</span> <span class="string">==</span> <span class="string">&quot;true&quot;</span> ]]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">    <span class="string">TAGS=&quot;$TAGS,@regression&quot;</span></span><br><span class="line">  <span class="string">fi</span></span><br><span class="line">  <span class="string">if</span> [[ <span class="string">&quot;$<span class="template-variable">&#123;&#123; github.event.inputs.testTags &#125;&#125;</span>&quot;</span> <span class="type">!=</span> <span class="string">&quot;&quot;</span> ]]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">    <span class="string">TAGS=&quot;$TAGS,$&#123;&#123;</span> <span class="string">github.event.inputs.testTags</span> <span class="string">&#125;&#125;&quot;</span></span><br><span class="line">  <span class="string">fi</span></span><br></pre></td></tr></table></figure><p>I include the available tags in the description, so it is easy to remember the choices.</p><p><img src="../images/tag-tests/flow-inputs.png" alt="Picking the test tags to run"></p><p><strong>Tip:</strong> I pass the additional custom tag as a string &quot;Blog post demo&quot; - that is purely to tag the recorded Dashboard run to make it simple to find it.</p><p><img src="../images/tag-tests/flow-run.png" alt="The recorded run has all selected test tags and the custom tag string"></p><p><strong>Tip 2:</strong> use the Cypress Dashboard tag dropdown to filter the recorded runs by a tag.</p><p><img src="../images/tag-tests/tag-dropdown.png" alt="Available tags to filter the runs by"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s say you have hundreds of end-to-end tests (this is our current situation at Mercari US). Running the tests in parallel makes th
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="advice" scheme="https://glebbahmutov.com/blog/tags/advice/"/>
    
  </entry>
  
  <entry>
    <title>How To Solve A Simple Numeric Problem Using Computers and JavaScript</title>
    <link href="https://glebbahmutov.com/blog/find-the-number/"/>
    <id>https://glebbahmutov.com/blog/find-the-number/</id>
    <published>2022-01-09T05:00:00.000Z</published>
    <updated>2022-01-09T16:42:52.247Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="the-problem">The problem</span></h2><p>Let&#39;s say I ask you to fix a number to make this equation true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_ &#x3D; 3</span><br></pre></td></tr></table></figure><p>Of course you might say - ohh it is easy, just put &quot;3&quot; where the <code>_</code> is. What if I ask you to find numbers between 1 and 10 to make this equation true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_ + 3 &#x3D; _ * 2</span><br></pre></td></tr></table></figure><p>You probably now have to try a few numbers to find at least one solution.</p><p>As the size of the equation and the number of unknown numbers grows, manually trying combinations of numbers becomes slower and slower. Why not let the computers do this for us? Let me teach you how to program your <em>browser</em> to solve problems like this almost instantly.</p><h2><span id="the-environment">The environment</span></h2><p>To find numbers we will use JavaScript programming language that runs in every browser (and even on the browsers on the phones). You can take any browser window, press <code>Options + Cmd + I</code> keys at the same time (I am writing this is on Mac) or select &quot;View / Development / Developer Tools&quot;. You should see the Developer Tools tab opened. We will be using the &quot;Console&quot; tab</p><p><img src="../images/find-the-number/dev-tools.png" alt="Console tab in the Developer Tools in the Chrome browser"></p><p>You can open and close the Developer Tools (DevTools for short) at any moment in any browser window. Let&#39;s use the console to compute something for us</p><p><img src="../images/find-the-number/compute.png" alt="Use DevTools console as a calculator"></p><h2><span id="comparing-numbers">Comparing numbers</span></h2><p>To find the solution to <code>_ = 3</code> let&#39;s try <code>1 = 3</code> in the DevTools console.</p><p><img src="../images/find-the-number/error.png" alt="We get an error trying to run 1 = 3 expression"></p><p>Oops, the computer is complaining. JavaScript language uses the character <code>=</code> to <em>assign a value</em> to a variable, like <code>a = 10</code> and <code>x = 2</code>. We are only asking if <code>1</code> is equal to <code>3</code>. In JavaScript asking to compare to values has a special operator <code>===</code> that we will use.</p><p><img src="../images/find-the-number/is-equal.png" alt="Comparing two numbers using === operator"></p><p>When comparing numbers, we get back <code>true</code> or <code>false</code>.</p><h2><span id="printing">Printing</span></h2><p>If the browser is computing something, it needs to print the results, and maybe print messages during the steps. To print something in the DevTools console, we can use the <code>console.log</code> function.</p><p><img src="../images/find-the-number/log1.png" alt="Printing the result of comparing two numbers"></p><p>You can pass one or multiple arguments to print. For example, we can compare numbers and print if one is larger or smaller than another.</p><p><img src="../images/find-the-number/log2.png" alt="Comparing the numbers and printing the results"></p><h2><span id="variables">Variables</span></h2><p>When solving <code>_ = 3</code> we need to try different values in place of <code>_</code>. Instead of <code>_</code> let&#39;s call the unknown value &quot;x&quot;. We are trying to solve <code>x = 3</code> after all. In JavaScript, we can create <code>x</code> which called a variable. We can assign this variable (which is like an empty box) different values, then compare the current value to 3. Here is how it looks in DevTools: we are using <code>let x</code> to create a variable, <code>=</code> operator to put a value into <code>x</code>, and <code>===</code> to compare the current value of the variable to another value.</p><p><img src="../images/find-the-number/variable.png" alt="Using variable x and comparing it to 3"></p><p>We can explicitly print the comparison result using <code>console.log</code> making it very clear what is going on</p><p><img src="../images/find-the-number/logx.png" alt="Printing x and the result of comparing it to 3"></p><p>To save space we can assign the value and compare it on one line, we just need to separate the assignment and the print statements using the special <code>;</code> to avoid JavaScript confusing them.</p><p><img src="../images/find-the-number/semi.png" alt="Separate statements using ; character"></p><h2><span id="functions">Functions</span></h2><p>We will be comparing <code>x</code> to <code>3</code> multiple times while checking if we have found the solution. We can create a little reusable piece of code that takes <code>x</code> and tells us if the equation is true or false. The reusable pieces of code are called <em>functions</em> and have a special syntax.</p><p><img src="../images/find-the-number/function.png" alt="Example function"></p><p>Inside the function, <code>x</code> variable is equal to whatever we passed in the first argument place when we called <code>check</code>. When we called it <code>check(1)</code> inside the function <code>x</code> was 1. When we called it <code>check(5)</code> the value <code>x</code> was 5. Even if there is a variable <code>x</code> outside the function, the function does not care - it uses its internal value of the argument.</p><p><img src="../images/find-the-number/shadow.png" alt="Local variable x is used"></p><p>Note how in the DevTools you can type multiple lines before executing them. Use <code>Shift + Enter</code> to add one more line. Use <code>Enter</code> key to run the JavaScript.</p><h2><span id="loops">Loops</span></h2><p>Ok, so let&#39;s run all values from 1 to 10 through our function <code>check</code> and print the result.</p><p><img src="../images/find-the-number/ten.png" alt="Calling check ten times with different argument"></p><p>Ughh, so verbose, and the only difference is the value we used to call <code>check(...)</code>. Let&#39;s remove the duplicate code. We can use a loop to execute the same statement again and again. The way to write this in JavaScript is to use <em>another</em> counter variable and specify its initial and final value and how to increment the variable after each iteration.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">1</span>; k &lt; <span class="number">11</span>; k += <span class="number">1</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We have declared a new variable using <code>let k</code> just too keep track of the iteration. We gave it a starting value <code>let k = 1</code> and we will continue executing all code inside the curly braces <code>&#123; ... &#125;</code> as long as the value of <code>k</code> is less than 11. Each iteration we will increment <code>k</code> by 1 using the special operator <code>+=</code>. Let&#39;s put our <code>check(...)</code> statement inside the loop.</p><p><img src="../images/find-the-number/loop.png" alt="Using a loop to call check with 10 different values"></p><p>Each iteration we call <code>check(...)</code> with the current value of the variable <code>k</code>. The function <code>check(x)</code> takes the passed value like 1, then 2, then 3, ... and puts it into its argument variable <code>x</code> and computes the result and returns it to be printed using <code>console.log</code>.</p><h2><span id="multiple-loops">Multiple loops</span></h2><p>Let&#39;s say we are trying to solve an equation with multiple unknown values like <code>_ + 3 = _ * 2</code>. Our check function will need to expect 2 variables.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + <span class="number">3</span> === y * <span class="number">2</span> &#125;</span><br></pre></td></tr></table></figure><p>And we will need to try values from 1 to 10 for variable <code>x</code>. And for each <code>x</code> we need to try values from 1 to 10 for variable <code>y</code>. We can nest loops and just try different values; that&#39;s why it is called brute force approach. The computers can do billions of such calculations each second, so we don&#39;t have to worry about how long it takes to solve such problems. We expect 100 total checks (10 values of x * 10 values of y for each x):</p><p><img src="../images/find-the-number/loops.png" alt="Using loop inside a loop to try 100 pairs of numbers"></p><p>It is very common to use variable names like <code>k</code>, <code>j</code>, <code>i</code> for loop counters, and <code>x</code>, <code>y</code> for unknown values that we are trying to find.</p><h2><span id="branches">Branches</span></h2><p>In the image above, most of the 100 pairs return <code>false</code>, so let&#39;s print only the solutions. We can use the built-in JavaScript <code>if</code> operator</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (some condition value) &#123;</span><br><span class="line">  <span class="comment">// do this statements if value is true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// do this statements if false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If there is nothing to do for the <code>else</code> branch, we can omit it</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (some condition value) &#123;</span><br><span class="line">  <span class="comment">// do this statements if value is true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here are our solutions found by iteration and only printing the ones where <code>check(...)</code> returns true.</p><p><img src="../images/find-the-number/if.png" alt="Printing the solutions only"></p><h2><span id="variable-names">Variable names</span></h2><p>JavaScript variables can be full words, and it is a good practice to use descriptive variable names that make it clear what the variable is holding inside.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeting</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello,&#x27;</span>, name)</span><br><span class="line">&#125;</span><br><span class="line">greeting(<span class="string">&#x27;Gleb&#x27;</span>)</span><br><span class="line"><span class="comment">// Hello, Gleb</span></span><br></pre></td></tr></table></figure><p>On the other hand, if you have a lot of unknowns in your equation, you can use variable names with indices like <code>x1</code>, <code>x2</code>, <code>x3</code>, <code>x4</code> instead of one letter <code>x</code>, <code>y</code>, <code>v</code>, <code>w</code>. In the screenshot below I used <code>x1</code> and <code>x2</code> for unknowns and <code>k1</code> and <code>k2</code> for iteration counter variables.</p><p><img src="../images/find-the-number/names.png" alt="Using consistent variables names"></p><h2><span id="challenges">Challenges</span></h2><p>Try to solve in your browser DevTools the following problems</p><ol><li>what is the value of <code>(1 - 100) * 5 + 1234 + 588/2</code>.<ol><li>Is it larger or smaller than the value of the expression <code>56 * 7</code>?</li><li>put the value of the first expression into the variable <code>left</code> and the value of the second expression into the variable <code>right</code> and print to the console both variables</li></ol></li><li>print the word &quot;Bot&quot; 25 times in a row</li><li>find two numbers so that <code>x * 15 = 5 + y</code>. Each unknown number can be between 1 and 100</li><li>print &quot;yes!!!&quot; if the expression <code>45 * 19 * 22</code> is larger than 10000 and print &quot;No :(&quot; otherwise</li><li>find the number that solves the triple equality <code>x + 6 = 94 - 10 * x = 2 * x - 2</code></li><li>iterate over numbers from 1 to 300 in increments of 6 and print the numbers. Your first few numbers should be 1, 7, 13, ...</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;the-problem&quot;&gt;The problem&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Let&amp;#39;s say I ask you to fix a number to make this equation true&lt;/p&gt;
&lt;figure class=&quot;h
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="javascript" scheme="https://glebbahmutov.com/blog/tags/javascript/"/>
    
      <category term="tutorial" scheme="https://glebbahmutov.com/blog/tags/tutorial/"/>
    
  </entry>
  
  <entry>
    <title>Crawl Local Pages Using Cypress</title>
    <link href="https://glebbahmutov.com/blog/crawl-using-cypress/"/>
    <id>https://glebbahmutov.com/blog/crawl-using-cypress/</id>
    <published>2022-01-07T05:00:00.000Z</published>
    <updated>2022-01-07T14:27:26.162Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes you want to simply visit every local page on your site to make sure the links are correct and every page loads. Cypress is not a crawler, but it can definitely handle the crawl for smaller sites. In the videos below I show how to collect every anchor link, filter external links, and visit every collected URL once.</p><blockquote class="pullquote"><p>🎁 You can find the full source code in my repository <a href="https://github.com/bahmutov/cypress-crawl-example">bahmutov/cypress-crawl-example</a>.</p></blockquote><h2><span id="collect-the-urls">Collect the URLs</span></h2><p>The best way to write a crawler is to think about the actions on every page. The crawler needs to:</p><ol><li>grab the first URL to visit from a queue<ul><li>if there are no URLs to visit, we are done</li></ul></li><li>call <code>cy.visit(url)</code></li><li>collect all anchor elements<ul><li>filter external links</li><li>filter links we have already visited</li><li>filter links we have already queued up to visit</li><li>add the filtered URLs to the queue</li></ul></li><li>go to step 1</li></ol><p>You can see my implementation of the above steps in the test file <a href="https://github.com/bahmutov/cypress-crawl-example/blob/main/cypress/integration/spec.js">spec.js</a> and watch the implementation in the video below:</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/FDNeiwKWdb4" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Perfect, at the end of the test each URL has been visited, but some pages were visited twice - because the crawler does not know that links to <code>/tos.html</code> and <code>/tos</code> lead to the same page.</p><p><img src="../images/crawl-using-cypress/tos.png" alt="Visiting the same page via two different links"></p><h2><span id="resolving-urls">Resolving URLs</span></h2><p>To prevent visiting the same page via different links, we need to check if a given URL leads to a page we have visited already. We can do this by using the <a href="https://on.cypress.io/request">cy.request</a> command and inspecting the <code>redirects</code> array.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// check URLs by requesting them and getting through the redirects</span></span><br><span class="line"><span class="keyword">const</span> redirected = []</span><br><span class="line">localUrls.forEach(<span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.request(&#123; url, <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    .its(<span class="string">&#x27;redirects&#x27;</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    <span class="comment">// resources without redirects will</span></span><br><span class="line">    <span class="comment">// not have the property &quot;redirects&quot;</span></span><br><span class="line">    <span class="comment">// so prevent Cypres from throwing an error</span></span><br><span class="line">    .should(Cypress._.noop)</span><br><span class="line">    .then(<span class="function">(<span class="params">redirects</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(redirects) &amp;&amp; redirects.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// each redirect record is like &quot;301: URL&quot;</span></span><br><span class="line">        <span class="comment">// so grab the last redirect and parse it</span></span><br><span class="line">        <span class="comment">// that will be the final address</span></span><br><span class="line">        <span class="keyword">const</span> redirectedUrl =</span><br><span class="line">          redirects[redirects.length - <span class="number">1</span>].split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="comment">// keep just the local part of the full URL</span></span><br><span class="line">        <span class="keyword">const</span> parsed = <span class="keyword">new</span> URL(redirectedUrl)</span><br><span class="line">        redirected.push(parsed.pathname)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        redirected.push(url)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You can find the full source code in the file <a href="https://github.com/bahmutov/cypress-crawl-example/blob/main/cypress/integration/spec2.js">spec2.js</a> and the explanation in the video below.</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/h7taQNvj0Cs" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="bonus-check-the-404-resource">Bonus: check the 404 resource</span></h2><p>The crawl example has one additional test file <a href="https://github.com/bahmutov/cypress-crawl-example/blob/main/cypress/integration/404-spec.js">404-spec.js</a> that shows how to verify the error page the site serves when you try to visit a non-existent URL. Again, we can use a combination of <code>cy.request</code> and <code>cy.visit</code> commands to verify the status code and the error page served. We do need to let the commands work on the status code 4xx by using <code>failOnStatusCode: false</code> option</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows 404 error&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">&#x27;/does-not-exist&#x27;</span></span><br><span class="line">  cy.request(&#123; url, <span class="attr">failOnStatusCode</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    .its(<span class="string">&#x27;status&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">0</span> &#125;)</span><br><span class="line">    .should(<span class="string">&#x27;eq&#x27;</span>, <span class="number">404</span>)</span><br><span class="line">  cy.visit(url, &#123; <span class="attr">failOnStatusCode</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  cy.contains(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;404&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You can find the explanation in the video below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/0OfILKbqbsg" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Happy Crawling 🕷</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sometimes you want to simply visit every local page on your site to make sure the links are correct and every page loads. Cypress is not 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress JSON Test Results</title>
    <link href="https://glebbahmutov.com/blog/json-test-results/"/>
    <id>https://glebbahmutov.com/blog/json-test-results/</id>
    <published>2022-01-03T05:00:00.000Z</published>
    <updated>2022-01-03T21:41:40.792Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes you want to run the Cypress tests and do something based on the number of tests passed or failed. You need the test results in a JSON format, maybe saved as a text file. There are three ways to do this:</p><h2><span id="wrap-cypress-in-your-cli">Wrap Cypress in your CLI</span></h2><p>You can wrap the Cypress <a href="https://on.cypress.io/module-api">NPM module API</a> in your CLI script. Your script will get all test results as a JSON object and then can run other programs to process the test results further.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cypress = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line">cypress.run(&#123; ... &#125;).then(<span class="function"><span class="params">results</span> =&gt;</span> ...)</span><br></pre></td></tr></table></figure><p>I used this approach several times, see my blog post <a href="/blog/wrap-cypress-using-npm/" title="Wrap Cypress Using NPM Module API">Wrap Cypress Using NPM Module API</a>.</p><h2><span id="use-json-reporter">Use JSON reporter</span></h2><p>Cypress comes with built-in <a href="https://on.cypress.io/reporters">reporters</a> plus you can bring your own. If you want to output JSON results into a separate file, you could try</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx cypress run --reporter json --reporter-options output&#x3D;result.json</span><br></pre></td></tr></table></figure><p>There is a problem though: the JSON reporter removes the standard terminal output. If you want to write the JSON results and the typical terminal output, you would need to install something like <a href="https://github.com/you54f/cypress-multi-reporters">cypress-multi-reporters</a> and configure it ... just to save the test results as a JSON file. Which brings us to the third way of saving the test results - via a plugin.</p><h2><span id="use-cypress-json-results">Use cypress-json-results</span></h2><p>I wrote the plugin <a href="https://github.com/bahmutov/cypress-json-results">cypress-json-results</a> specifically to make saving the JSON results file super simple. Install the plugin and add it to your plugin file:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress-json-results</span><br><span class="line">+ cypress-json-results@1.0.0</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// `on` is used to hook into various events Cypress emits</span></span><br><span class="line">  <span class="comment">// `config` is the resolved Cypress config</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// https://github.com/bahmutov/cypress-json-results</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;cypress-json-results&#x27;</span>)(&#123;</span><br><span class="line">    on,</span><br><span class="line">    filename: <span class="string">&#x27;results.json&#x27;</span>, <span class="comment">// default filename</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Once you run the tests, you should see a message like this after all the tests have finished</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cypress-json-results: wrote results to results.json</span><br></pre></td></tr></table></figure><p>The saved file has each spec that executed locally with the <a href="/blog/cypress-test-statuses/" title="test status">test status</a>.</p><figure class="highlight json"><figcaption><span>results.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;cypress/integration/spec.js&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;receives the right text file&quot;</span>: <span class="string">&quot;passed&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;visits the text file&quot;</span>: <span class="string">&quot;passed&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;visits the Markdown file&quot;</span>: <span class="string">&quot;passed&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;converts the Markdown file&quot;</span>: <span class="string">&quot;passed&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The standard terminal output stays unchanged.</p><blockquote class="pullquote"><p>🎁 You can find the example application with cypress-json-results plugin in the repo <a href="https://github.com/bahmutov/check-text-file-example">bahmutov/check-text-file-example</a>.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sometimes you want to run the Cypress tests and do something based on the number of tests passed or failed. You need the test results in 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>How I Hire</title>
    <link href="https://glebbahmutov.com/blog/how-i-hire/"/>
    <id>https://glebbahmutov.com/blog/how-i-hire/</id>
    <published>2021-12-29T05:00:00.000Z</published>
    <updated>2021-12-29T13:59:00.340Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s say I want to hire someone to write automated Cypress end-to-end tests. Here is what I do:</p><ol><li>Write a job description with minimal corporate boilerplate filler like &quot;team player, excellent communicator, fast-paced environment&quot;. I do not care about reading this, and it tells the candidates nothing. Instead, I describe what the person is going to do, what kind of projects they will be working on, and the team. The HR department fights me on this, so it does not always go my way. If I win, the job posting will include the <a href="/blog/cypress-skills-ladder/" title="Cypress Skills Ladder">Cypress Skills Ladder</a>. If I lose, we will go over the skills ladder in the first interview. This skills checklist describes what I would love someone in this position to know or planning to learn. It gives the candidate a good idea of what the team needs and what day-to-day is going to be like.</li><li>When the job is posted, I have to go back to HR and ask them to delete &quot;Bachelors of Science or equivalent degree is required&quot; from the minimal job qualifications. Recruiters <em>love</em> inserting college degree requirements everywhere, even in the places where it is completely unnecessary. Something to watch out for. I also check for any other &quot;minimum X years of experience with technology Y&quot;. I had cases where the job posting had &quot;minimum five years of Cypress experience&quot;, which only a few people in Cypress.io had at that moment 😆</li><li>During my first interview with you, I just want to chat about what you have done and know following the ... published skills list. I share my screen and start asking about topics and checking the box if yes. Each topic becomes a jump-off for discussion. For Cypress skills I use my interactive <a href="https://cypress.tips/skills">https://cypress.tips/skills</a> form.</li></ol><center><iframe width="560" height="315" src="https://www.youtube.com/embed/0SgRYcJACjM" title="Cypress skills form" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>For example, if I asked the candidate &quot;did you organize multiple Cypress tests by topic and feature?&quot; and they said &quot;No, we kept all spec files in one folder&quot;, we would then converse about how many tests there were, how did they write them, and if it was easy to find and run a particular test. If the candidate said &quot;yes, we organized our tests using the following approach&quot;, we would talk about it. Each topic is not a school test-like &quot;pass/fail&quot;, but rather a jump off topic for a friendly chat.</p><p>After the interview I would copy / paste the test results into our internal candidate HR profile. I hope from the first interview, the candidate gets a very strong understanding of what day to day skills we are looking for. Which helps in the next step: the homework assignment.</p><ol start="4"><li><p>The homework assignment is your chance to shine as a candidate. Now that you know how I think about testing, and what we would like you to do day-to-day on the job, let&#39;s see what you can do. The assignment usually is described as follows:</p><ul><li>take any web application and write end-to-end tests for it</li><li>do not spend more than three hours writing the tests</li><li>take as much time to think about the application and the testing approach (within limits of course, if we do not hear from the candidate in a couple of weeks, we probably decide that you are not interested)</li><li>write a new set of tests, do not merely add one more test to an existing set of tests. We want to see your entire strategy</li></ul></li><li><p>The homework assignment review meeting. Once the candidate is done with the assignment, they send us the link to the GitHub repo and we schedule the second interview, usually with several people from my company attending. The purpose of the meeting is to review the tests, ask how they work, why the candidate wrote those specific tests, how they implemented them, etc. This matches closely our day-to-day work discussions and pull request reviews. On our side, we see if the candidate wrote good tests, if their thinking about testing, coding, and designing the solution is what we are looking for. The candidate gets a good idea of kind of questions we ask during code reviews, the people they will be working with, the tools and techniques we use.</p></li></ol><p>After the meeting, all people on the company side meet to give their feedback. We discuss the homework itself, and how the candidate explained their thinking, their code and the testing approach. Would the same approach and code pass our normal pull request review? Does the candidate match or exceed what we are looking for?</p><h2><span id="bonus-avoid-poisoning-the-well">Bonus: avoid poisoning the well</span></h2><p>The most crucial, important, paramount, <em>whatever-big-word-superlative</em> you want to use, thing to do while hiring is to <strong>avoid leaving the candidate with a bad impression of the company</strong>. For every person hired, you probably interview and reject 1-10 people. These are people who wanted to work with you at your company X. You are rejecting the people who want to join and work with you, yet now they know they cannot. They might feel sad and angry, especially if they feel the hiring process was unfair. Imagine for every employee you have 1-10 bitter people out there - does this change your hiring approach?</p><p>The way I solved this approach at Cypress was two-fold. First, be transparent with the candidate. State the salary range upfront. Talk honestly about the company, how it grew, and what the future looks like in your opinion. If the candidate does not have enough required skills already, no big deal, tell them. Second, respect their effort. For a while, if we rejected a candidate after the homework assignment, we would give the candidate a gift card to thank them for their time. A small nice gesture like this goes a long way towards sweetening the loss, I think. I would rather have 100 people out there remembering my company X for the some gift they got from us, rather than thinking how we unfairly rejected them.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/help-me-say-yes/" title="Help Me Say Yes">Help Me Say Yes</a></li><li><a href="/blog/dont-help-me-say-no/" title="Don&#39;t help me say No">Don&#39;t help me say No</a></li><li><a href="/blog/cypress-skills-ladder/" title="Cypress Skills Ladder">Cypress Skills Ladder</a></li><li><a href="/blog/rating-recruiter-pitches/" title="Rating recruiter pitches">Rating recruiter pitches</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s say I want to hire someone to write automated Cypress end-to-end tests. Here is what I do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write a job description
      
    
    </summary>
    
      <category term="people" scheme="https://glebbahmutov.com/blog/categories/people/"/>
    
    
      <category term="advice" scheme="https://glebbahmutov.com/blog/tags/advice/"/>
    
      <category term="hiring" scheme="https://glebbahmutov.com/blog/tags/hiring/"/>
    
  </entry>
  
  <entry>
    <title>Test Web Apps That Use The Browser FileSystem API</title>
    <link href="https://glebbahmutov.com/blog/browser-filesystem-api/"/>
    <id>https://glebbahmutov.com/blog/browser-filesystem-api/</id>
    <published>2021-12-28T05:00:00.000Z</published>
    <updated>2021-12-28T20:28:15.956Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s say you have a web application that calls <a href="https://web.dev/file-system-access/">browser FileSystem API</a> to read a file. How do you write an end-to-end test for this app?</p><p><img src="../images/browser-filesystem-api/open.png" alt="App opens FileSystem dialog to read a local file"></p><p>The application above shows the system file selection which lets the user pick a local file. Its contents is then pasted into the output text area.</p><figure class="highlight js"><figcaption><span>public/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;read-file&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> fileHandle</span><br><span class="line">  <span class="comment">// Destructure the one-element array.</span></span><br><span class="line">  ;[fileHandle] = <span class="keyword">await</span> <span class="built_in">window</span>.showOpenFilePicker()</span><br><span class="line">  <span class="keyword">const</span> file = <span class="keyword">await</span> fileHandle.getFile()</span><br><span class="line">  <span class="keyword">const</span> contents = <span class="keyword">await</span> file.text()</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;output&#x27;</span>).textContent = contents</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>🎁 You can find the application and the tests in the repo <a href="https://github.com/bahmutov/cypress-browser-file-system-example">bahmutov/cypress-browser-file-system-example</a>.</p></blockquote><p>Whenever you need to deal with the standard browser APIs in Cypress, take advantage of its unique architecture - you can access each browser object from the test, and then spy or stub its methods. I have shown examples in other blog posts <a href="/blog/spy-on-dom-methods/" title="Spy On DOM Methods And Properties">Spy On DOM Methods And Properties</a>, <a href="/blog/stubbing-the-non-configurable/" title="Stubbing The Non-configurable">Stubbing The Non-configurable</a>, <a href="/blog/stub-navigator-api/" title="Stub navigator API in end-to-end tests">Stub navigator API in end-to-end tests</a>, <a href="/blog/stub-window-open/" title="Stub window.open">Stub window.open</a>, and a few others. In our case, we want to stub the <code>window.showOpenFilePicker</code> method. Let&#39;s do it.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows file contents&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;showOpenFilePicker&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.get(<span class="string">&#x27;button&#x27;</span>).click()</span><br></pre></td></tr></table></figure><p>In general, you need to stub a method before the application calls it. I like stubbing things early to ensure the application sees the stubbed method from the moment it loads. Using <a href="https://on.cypress.io/visit">cy.visit</a> <code>onBeforeLoad</code> callback is a good place to set up the stubs.</p><p>What should the stub return? It should resolve (which means async result) with a &quot;file handle&quot; object. That object should have a method that resolves with some text. So I will use three different stubs.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> file = &#123;</span><br><span class="line">      text: cy.stub().resolves(<span class="string">&#x27;Hello, world!&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> fileHandle = &#123;</span><br><span class="line">      getFile: cy.stub().resolves(file),</span><br><span class="line">    &#125;</span><br><span class="line">    cy.stub(win, <span class="string">&#x27;showOpenFilePicker&#x27;</span>)</span><br><span class="line">      .resolves([fileHandle])</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Nice, but if we want to see the calls in the Command Log and assert they have happened, let&#39;s give each stub an alias.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows file contents&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> file = &#123;</span><br><span class="line">        text: cy.stub().resolves(<span class="string">&#x27;Hello, world!&#x27;</span>).as(<span class="string">&#x27;text&#x27;</span>),</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> fileHandle = &#123;</span><br><span class="line">        getFile: cy.stub().resolves(file).as(<span class="string">&#x27;file&#x27;</span>),</span><br><span class="line">      &#125;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;showOpenFilePicker&#x27;</span>)</span><br><span class="line">        .resolves([fileHandle])</span><br><span class="line">        .as(<span class="string">&#x27;showOpenFilePicker&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.get(<span class="string">&#x27;button&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;#output&#x27;</span>).should(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;Hello, world!&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;@text&#x27;</span>).should(<span class="string">&#x27;be.called&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Beautiful - the test runs.</p><p><img src="../images/browser-filesystem-api/stub-file.png" alt="The test stubs the browser file system open feature"></p><p>What happens if the user cancels selecting the file? Hmm, our application does not handle it at all!</p><p><img src="../images/browser-filesystem-api/exception.png" alt="The FileSystem throws an exception if the user cancels selecting the local file"></p><p>We need to handle the errors in our application, at least let&#39;s put <code>try / catch</code> around the code</p><figure class="highlight js"><figcaption><span>public/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  ;[fileHandle] = <span class="keyword">await</span> <span class="built_in">window</span>.showOpenFilePicker()</span><br><span class="line">  <span class="keyword">const</span> file = <span class="keyword">await</span> fileHandle.getFile()</span><br><span class="line">  <span class="keyword">const</span> contents = <span class="keyword">await</span> file.text()</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;output&#x27;</span>).textContent = contents</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  alert(<span class="string">&#x27;Error: &#x27;</span> + err.message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s test it. Our stub will reject with an error, and we will check if the <code>alert</code> method is called with excepted message.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows alert when the user cancels&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;alert&#x27;</span>).as(<span class="string">&#x27;alert&#x27;</span>)</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;showOpenFilePicker&#x27;</span>).rejects(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;User cancelled&#x27;</span>))</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.get(<span class="string">&#x27;button&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;@alert&#x27;</span>).should(<span class="string">&#x27;be.calledWith&#x27;</span>, <span class="string">&#x27;Error: User cancelled&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test runs and confirms our application now behaves correctly.</p><p><img src="../images/browser-filesystem-api/test-error.png" alt="Testing the error handling"></p><p>Nice.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s say you have a web application that calls &lt;a href=&quot;https://web.dev/file-system-access/&quot;&gt;browser FileSystem API&lt;/a&gt; to read a fi
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Save The Page On Test Failure</title>
    <link href="https://glebbahmutov.com/blog/cyclope-intro/"/>
    <id>https://glebbahmutov.com/blog/cyclope-intro/</id>
    <published>2021-12-22T05:00:00.000Z</published>
    <updated>2021-12-22T18:02:28.473Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes a Cypress test fails on CI, and you cannot determine why the test has failed from the screenshot and video alone. For example, if a <code>cy.get(&#39;[data-cy=...]&#39;)</code> command fails to find an element, but you see the element in the screenshot and are wondering &quot;what has happened...&quot;. Maybe the data attribute was missing due to some feature flag? Maybe it is a bug in Cypress? How can you look at the DOM of the page itself?</p><p>Here is where my <a href="https://github.com/bahmutov/cyclope">cyclope</a> comes in handy. It has a feature for saving the full page whenever you want, including automatically saving the page on test failure.</p><h2><span id="the-app">The app</span></h2><p>Let&#39;s take an example application in the repo <a href="https://github.com/bahmutov/todo-app-for-cyclope">bahmutov/todo-app-for-cyclope</a> and write a test. Since we don&#39;t want to spend a lot of time, we will write a single test to add and complete items.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;adds and removes todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=&quot;add-todo&quot;]&#x27;</span>).clear()</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=&quot;add-todo&quot;]&#x27;</span>).type(</span><br><span class="line">    <span class="string">&#x27;record the test&#123;enter&#125;&#x27;</span>,</span><br><span class="line">  )</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=&quot;add-todo&quot;]&#x27;</span>).clear()</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=&quot;add-todo&quot;]&#x27;</span>).type(</span><br><span class="line">    <span class="string">&#x27;find the secret&#123;enter&#125;&#x27;</span>,</span><br><span class="line">  )</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=&quot;add-todo&quot;]&#x27;</span>).clear()</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=&quot;add-todo&quot;]&#x27;</span>).type(<span class="string">&#x27;use Studio&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=todo]&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">    .eq(<span class="number">1</span>)</span><br><span class="line">    .find(<span class="string">&#x27;.cb-input&#x27;</span>)</span><br><span class="line">    .check()</span><br><span class="line">    .should(<span class="string">&#x27;be.checked&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;#items-left&#x27;</span>).should(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;#completed&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;#completed&#x27;</span>).should(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes successfully</p><p><img src="../images/cyclope-intro/test.png" alt="The passing test"></p><p>Super, now let&#39;s run this test on CI. I picked CircleCI using the <a href="https://github.com/cypress-io/circleci-orb">Cypress CircleCI Orb</a>.</p><figure class="highlight yml"><figcaption><span>.circleci/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/cypress-io/circleci-orb</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:3777&#x27;</span></span><br><span class="line">          <span class="attr">config:</span> <span class="string">&#x27;baseUrl=http://localhost:3777&#x27;</span></span><br><span class="line">          <span class="comment"># no need to store the workspace, as there are no jobs after this one</span></span><br><span class="line">          <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>The test passes successfully on CI.</p><h2><span id="the-failed-test">The failed test</span></h2><p>Now I am getting too excited and I add one more assertion to verify the &quot;Completed&quot; view shows a single Todo.</p><figure class="highlight diff"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  cy.get(&#x27;#completed&#x27;).click()</span><br><span class="line">  cy.get(&#x27;#completed&#x27;).should(&#x27;have.class&#x27;, &#x27;on&#x27;)</span><br><span class="line"><span class="addition">+ cy.get(&#x27;[data-cy=todo]:visible&#x27;)</span></span><br><span class="line"><span class="addition">+   .should(&#x27;have.length&#x27;, 1)</span></span><br><span class="line"><span class="addition">+   .contains(&#x27;find the secret&#x27;)</span></span><br></pre></td></tr></table></figure><p>I push the code without checking it first, and ... the test fails.</p><p><img src="../images/cyclope-intro/failed.png" alt="The test failed on CI"></p><p>To debug the failure I could do three things:</p><ol><li>Run the test locally, hoping it shows the same problem</li><li>Record the test to <a href="https://on.cypress.io/dashboard-introduction">Cypress Dashboard</a></li><li>Store images and video automatically generated by Cypress on CircleCI as a test artifact</li></ol><p>Let&#39;s store the test images and video on CI by adding the following to the Cypress Run job</p><figure class="highlight diff"><figcaption><span>.circleci/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  - cypress/run:</span><br><span class="line">      ...</span><br><span class="line">      no-workspace: true</span><br><span class="line"><span class="addition">+     store_artifacts: true</span></span><br></pre></td></tr></table></figure><p><img src="../images/cyclope-intro/ci.png" alt="The failed test screenshot and videos stored on CircleCI"></p><p>We can click on the MP4 file to watch the video, and click on the image filename to see the screenshot - CircleCI acts as a static HTML server by default. Let&#39;s look at the screenshot.</p><p><img src="../images/cyclope-intro/screenshot.png" alt="The Cypress at the moment of the failure"></p><p>Notice something suspicious - <code>cy.get(&#39;[data-cy=todo]&#39;)</code> command has found 3 elements, but some of them were invisible, as indicated by the eye badge.</p><blockquote class="pullquote"><p>📺 Watch my video &quot;<a href="https://www.youtube.com/watch?v=84NQf-HVWWE">Visibility Of Multiple Elements Explained</a>&quot;</p></blockquote><p>So some elements were invisible, some visible, and that is why the test has failed. What are those three elements? This is where an image screenshot is not enough to say. We need to look at the page DOM elements to figure it out.</p><h2><span id="the-cyclope-plugin">The cyclope plugin</span></h2><p>We can install the <a href="https://github.com/bahmutov/cyclope">cyclope</a> using NPM or Yarn</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D cyclope</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> or using Yarn</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add -D cyclope</span></span><br><span class="line"></span><br><span class="line">+ cyclope@2.0.2</span><br></pre></td></tr></table></figure><p>From the plugins file initialize the plugin and return the config object.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://github.com/bahmutov/cyclope</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;cyclope/plugin&#x27;</span>)(on, config)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// IMPORTANT to return the config object</span></span><br><span class="line">  <span class="comment">// with the any changed environment variables</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the support file register the <code>afterEach</code> hook to save the full page if a test fails</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/bahmutov/cyclope</span></span><br><span class="line"><span class="keyword">import</span> &#123; savePageIfTestFailed &#125; <span class="keyword">from</span> <span class="string">&#x27;cyclope&#x27;</span></span><br><span class="line">afterEach(savePageIfTestFailed)</span><br></pre></td></tr></table></figure><p>You can see the plugin in action locally - it will save the full page in a subfolder of <code>cypress/failed</code>. Let&#39;s store this folder on CircleCI as an artifact.</p><figure class="highlight diff"><figcaption><span>.circleci/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  - cypress/run:</span><br><span class="line">      ...</span><br><span class="line">      no-workspace: true</span><br><span class="line">      store_artifacts: true</span><br><span class="line"><span class="addition">+     post-steps:</span></span><br><span class="line"><span class="addition">+       - store_artifacts:</span></span><br><span class="line"><span class="addition">+           path: cypress/failed</span></span><br></pre></td></tr></table></figure><p>Push the code changes and see the messages in the terminal telling the full page was saved.</p><p><img src="../images/cyclope-intro/save.png" alt="The terminal output shows the save messages"></p><p>Let&#39;s look at the &quot;Artifacts&quot; tab on CircleCI where the screenshots, videos, and the full pages are listed.</p><p><img src="../images/cyclope-intro/artifacts.png" alt="The page HTML and CSS and images were saved as test artifacts on CI"></p><p>Click on the &quot;index.html&quot; and see the static page open right from CircleCI, which acts as a static web server. There is no JavaScript running - it is just a DOM snapshot at the moment of failure. Open the DevTools and inspect the todo area - and see that there are invisible Todo elements!</p><p><img src="../images/cyclope-intro/elements.png" alt="Inspect the page elements in the browser"></p><p>Ok, so the application just hides the Todo items when viewing Completed items. Thus our assertion has to limit itself to the visible items using the jQuery <code>:visible</code> pseudo selector.</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- cy.get(&#x27;[data-cy=todo]&#x27;)</span></span><br><span class="line"><span class="addition">+ cy.get(&#x27;[data-cy=todo]:visible&#x27;)</span></span><br><span class="line">    .should(&#x27;have.length&#x27;, 1)</span><br><span class="line">    .contains(&#x27;find the secret&#x27;)</span><br></pre></td></tr></table></figure><p>The test passes. We can see the video of the successful test stored on CircleCI. There are no screenshots and no full page screenshots since no tests have failed. Tip: you can store a full page HTML using <code>cy.close(...)</code> command provided by the <a href="https://github.com/bahmutov/cyclope">cyclope</a> plugin at any point during the test, similar to calling the <code>cy.screenshot(...)</code> command.</p><p><img src="../images/cyclope-intro/fixed.png" alt="The passing test artifacts on CircleCI include only the MP4 video"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sometimes a Cypress test fails on CI, and you cannot determine why the test has failed from the screenshot and video alone. For example, 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="circle" scheme="https://glebbahmutov.com/blog/tags/circle/"/>
    
  </entry>
  
  <entry>
    <title>Cypress Hosts Option</title>
    <link href="https://glebbahmutov.com/blog/cypress-hosts-option/"/>
    <id>https://glebbahmutov.com/blog/cypress-hosts-option/</id>
    <published>2021-12-20T05:00:00.000Z</published>
    <updated>2021-12-20T17:02:37.808Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Problem:</strong> you have a local HTTPS site (for example using Create-React-App) and want to access it locally using <code>https://&lt;domain name&gt;:3000</code>. How do you do it? Here is my solution that probably the simplest way of accessing domains using self-signed certificates. You can find the source code in the repo <a href="https://github.com/bahmutov/cypress-local-https">bahmutov/cypress-local-https</a>.</p><h2><span id="local-self-signed-certificate">Local self-signed certificate</span></h2><p>Let&#39;s say I want to test my own (non-existent) domain &quot;my-secure-site&quot;. I will create a self-signed certificate on Mac (other operating systems have their own quirks)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ brew install mkcert</span><br><span class="line">$ mkcert -install</span><br><span class="line">$ mkdir .cert</span><br><span class="line">$ mkcert -key-file .&#x2F;.cert&#x2F;key.pem -cert-file .&#x2F;.cert&#x2F;cert.pem &quot;my-secure-site&quot;</span><br></pre></td></tr></table></figure><p>Now I have two text files in the folder <code>.cert</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat .cert&#x2F;key.pem</span><br><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">MIIEvQIBADANBgkqhkiG9w0BAQEFA...</span><br><span class="line"></span><br><span class="line">$ cat .cert&#x2F;perm.pem</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIEVzCCAr+gAwIBAgIQL</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2><span id="the-application">The application</span></h2><p>I have scaffolded a new React application using <a href="https://create-react-app.dev/">Create-React-App</a> v5. I have set the following options in the <a href="https://github.com/bahmutov/cypress-local-https/blob/main/.env.development">.env.development</a> file.</p><figure class="highlight ini"><figcaption><span>.env.development</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">HTTPS</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">BROWSER</span>=none</span><br><span class="line"><span class="comment"># load the local certificate</span></span><br><span class="line"><span class="attr">SSL_CRT_FILE</span>=./.cert/cert.pem</span><br><span class="line"><span class="attr">SSL_KEY_FILE</span>=./.cert/key.pem</span><br></pre></td></tr></table></figure><p>Let&#39;s start the local app</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br><span class="line"></span><br><span class="line">Compiled successfully!</span><br><span class="line"></span><br><span class="line">You can now view cypress-local-https in the browser.</span><br><span class="line"></span><br><span class="line">  Local:            https://localhost:3000</span><br><span class="line">  On Your Network:  https://10.0.0.187:3000</span><br></pre></td></tr></table></figure><p>If we try to access the local site at <code>https://localhost:3000</code> we get a problem: our self-signed certificate is for domain &quot;my-secure-site&quot;, not for &quot;localhost&quot;.</p><p><img src="../images/cypress-hosts-option/error.png" alt="HTTPS localhost error"></p><p>If we try to access <code>https://my-secure-site:3000</code> the browser does not know what to do. The browser asks the network stack to look up the IP address for domain name &quot;my-secure-site&quot;, which hits the DNS server, which returns &quot;UNKNOWN&quot; error. We are stuck.</p><h2><span id="hosts-option">Hosts option</span></h2><p>Typically at this point, you would modify your local <a href="https://en.wikipedia.org/wiki/Hosts_%28file%29">hosts file</a> and add the following line to it to map the name &quot;my-secure-site&quot; to the local IP address 127.0.0.1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># my local testing for cypress-hosts-option</span><br><span class="line">127.0.0.1 my-secure-site</span><br></pre></td></tr></table></figure><p>You might need to clear the local network DNS cache, restart the browser. Who knows.</p><p>There is an easier way if all you plan to do is to run end-to-end tests against the local application. You can specify the local domain mapping using the (absolutely undocumented) <code>hosts</code> Cypress <a href="https://on.cypress.io/configuration">configuration option</a>:</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;https://my-secure-site:3000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;hosts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;my-secure-site&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note: the &quot;hosts&quot; resolution only maps the domain name to an IP address, it does nothing to the port number.</p><p>Start Cypress and enjoy the <code>cy.visit(&#39;/&#39;)</code> correctly loading your local HTTPS site.</p><p><img src="../images/cypress-hosts-option/visit.png" alt="Visit the local HTTPS site from the test"></p><p>Other uses for locally mapped <code>hosts</code> in Cypress: tricking single sing-on flows (see the <a href="https://github.com/cypress-io/cypress-example-recipes">cypress-example-recipes</a> repo) and blocking resources from some domains.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt; you have a local HTTPS site (for example using Create-React-App) and want to access it locally using &lt;code&gt;http
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Check Items For Duplicates</title>
    <link href="https://glebbahmutov.com/blog/check-for-duplicates/"/>
    <id>https://glebbahmutov.com/blog/check-for-duplicates/</id>
    <published>2021-12-18T05:00:00.000Z</published>
    <updated>2021-12-18T19:30:50.244Z</updated>
    
    <content type="html"><![CDATA[<p>In my previous blog post <a href="/blog/fp-cy-helpers/" title="Functional Helpers For Cypress Tests">Functional Helpers For Cypress Tests</a> I have shown how to test if a table is sorted. In this blog post I will show how to check a list of items on the page to detect any duplicates. You can find the shown source code in the repos <a href="https://github.com/bahmutov/cypress-examples">bahmutov/cypress-examples</a> and <a href="https://github.com/bahmutov/cypress-should-really">bahmutov/cypress-should-really</a>.</p><h2><span id="check-duplicate-text">Check duplicate text</span></h2><p>Let&#39;s say we have a list of items and want to confirm there are no duplicates. We need to grab the desired elements, get the text from each one, then check the array of strings for duplicates. You can find this example in the <a href="https://glebbahmutov.com/cypress-examples/">cypress-examples recipes</a>.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- items without duplicates --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Apples<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Oranges<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Bananas<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>For better <a href="https://on.cypress.io/retry-ability">retry-ability</a> we should write all steps inside a <code>should(callback)</code> function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">  <span class="comment">// wait for the list to be stable</span></span><br><span class="line">  .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  .and(<span class="function">(<span class="params">$list</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> values = Cypress._.map($list, <span class="string">&#x27;innerText&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> distinct = Cypress._.uniq(values)</span><br><span class="line">    expect(distinct, <span class="string">&#x27;all strings are different&#x27;</span>).to.have.length(</span><br><span class="line">      values.length,</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/check-for-duplicates/list.png" alt="List has no duplicates"></p><p><strong>Tip:</strong> destructure the <code>Cypress._</code> object to get the <code>map</code> and <code>uniq</code> functions for more concise test code</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// destructure Cypress._ for convenience</span></span><br><span class="line"><span class="keyword">const</span> &#123; map, uniq &#125; = Cypress._</span><br><span class="line">cy.get(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">  <span class="comment">// wait for the list to be stable</span></span><br><span class="line">  .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  .and(<span class="function">(<span class="params">$list</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> values = map($list, <span class="string">&#x27;innerText&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> distinct = uniq(values)</span><br><span class="line">    expect(distinct, <span class="string">&#x27;all strings are different&#x27;</span>).to.have.length(</span><br><span class="line">      values.length,</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Since <code>map</code> and <code>uniq</code> are so short, we can skip the intermediate variable and compose the calls</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; map, uniq &#125; = Cypress._</span><br><span class="line">cy.get(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">  <span class="comment">// wait for the list to be stable</span></span><br><span class="line">  .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  .and(<span class="function">(<span class="params">$list</span>) =&gt;</span> &#123;</span><br><span class="line">    expect(</span><br><span class="line">      uniq(map($list, <span class="string">&#x27;innerText&#x27;</span>)), <span class="string">&#x27;all strings are different&#x27;</span></span><br><span class="line">    ).to.have.length(values.length)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2><span id="report-duplicates">Report duplicates</span></h2><p>The code above works, but it shows a very confusing and unhelpful error if there are duplicates.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Apples<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Oranges<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Bananas<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Oranges<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/check-for-duplicates/error.png" alt="The error is unhelpful"></p><p>The error should specifically report which items are duplicates. So we can process the items slightly differently and count the number of times each item is seen using <code>_.countBy</code> function. Then we can pick just the items with the count larger than one using <code>_.pickBy</code> function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// destructure Cypress._ for convenience</span></span><br><span class="line"><span class="keyword">const</span> &#123; map, countBy, pickBy &#125; = Cypress._</span><br><span class="line">cy.get(<span class="string">&#x27;li&#x27;</span>).should(<span class="function">(<span class="params">$list</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> counts = countBy(map($list, <span class="string">&#x27;innerText&#x27;</span>))</span><br><span class="line">  <span class="keyword">const</span> duplicates = pickBy(counts, <span class="function">(<span class="params">n</span>) =&gt;</span> n &gt; <span class="number">1</span>)</span><br><span class="line">  expect(duplicates, <span class="string">&#x27;duplicates&#x27;</span>).to.be.empty</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test reports the duplicates nicely</p><p><img src="../images/check-for-duplicates/duplicates.png" alt="The error shows the duplicate values"></p><p>This is a good error.</p><h2><span id="detecting-duplicate-attributes">Detecting duplicate attributes</span></h2><p>What if instead of the element text, we want to detect duplicate attributes? We first need to call <code>Element.getAttribute</code> but then the rest stays the same.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-product-id</span>=<span class="string">&quot;a11&quot;</span>&gt;</span>Apples<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-product-id</span>=<span class="string">&quot;b20&quot;</span>&gt;</span>Oranges<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-product-id</span>=<span class="string">&quot;a11&quot;</span>&gt;</span>Bananas<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Notice the duplicate product id &quot;a11&quot;. Let&#39;s make sure we find it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// destructure Cypress._ for convenience</span></span><br><span class="line"><span class="keyword">const</span> &#123; map, countBy, pickBy &#125; = Cypress._</span><br><span class="line">cy.get(<span class="string">&#x27;li&#x27;</span>).should(<span class="function">(<span class="params">$list</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> ids = map($list, <span class="function">(<span class="params">$el</span>) =&gt;</span> $el.getAttribute(<span class="string">&#x27;data-product-id&#x27;</span>))</span><br><span class="line">  <span class="keyword">const</span> counts = countBy(ids)</span><br><span class="line">  <span class="keyword">const</span> duplicates = pickBy(counts, <span class="function">(<span class="params">n</span>) =&gt;</span> n &gt; <span class="number">1</span>)</span><br><span class="line">  expect(duplicates, <span class="string">&#x27;duplicates&#x27;</span>).to.be.empty</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/check-for-duplicates/a11.png" alt="Detecting the duplicate attribute a11"></p><h2><span id="using-functional-helpers">Using functional helpers</span></h2><p>The code above works pretty well, but you might write it a little bit more concise using functional helpers from <a href="https://github.com/bahmutov/cypress-should-really">cypress-should-really</a> if that is your thing. Our assertion callback function makes the following steps passing the result from each step to the next one.</p><ul><li>maps each element to the attribute by calling <code>getAttribute</code> method with &quot;data-product-id&quot; argument<ul><li>this can be done using <code>map(invoke(&#39;getAttribute&#39;, &#39;data-product-id&#39;))</code> code</li></ul></li><li>counts the number of times each value is present in the array using <code>_.countBy</code> function<ul><li>we can keep this step as is</li></ul></li><li>from the count object, picks properties with value greater than one<ul><li>we can use the function <code>(counts) =&gt; pickBy(counts, greaterThan(1))</code> to achieve this</li></ul></li></ul><p>The entire pipeline using <code>cypress-should-really</code> helpers and <code>Cypress._</code> functions is below.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  really,</span><br><span class="line">  invoke,</span><br><span class="line">  map,</span><br><span class="line">  greaterThan</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-should-really&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123; countBy, pickBy &#125; = Cypress._</span><br><span class="line">it(<span class="string">&#x27;by attribute (greaterThan)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;cypress/integration/duplicates/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// using a few more shortcuts</span></span><br><span class="line">  cy.get(<span class="string">&#x27;li&#x27;</span>).should(</span><br><span class="line">    really(</span><br><span class="line">      map(invoke(<span class="string">&#x27;getAttribute&#x27;</span>, <span class="string">&#x27;data-product-id&#x27;</span>)),</span><br><span class="line">      countBy,</span><br><span class="line">      (counts) =&gt; pickBy(counts, greaterThan(<span class="number">1</span>)),</span><br><span class="line">      <span class="string">&#x27;be.empty&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Notice the <code>(counts) =&gt; pickBy(counts, greaterThan(1))</code> step. The Lodash function <code>pickBy</code> expects the object as the first argument. The object is not yet known, it will be computed in the previous step. The second argument is a function <code>greaterThan(1)</code>, which is known. If the expected order of arguments could be reversed and curried, we could partially apply the callback right away like <code>pickBy(greaterThan(1))</code>. But the order is reversed, which makes us write a function just to pass the first argument.</p><p>We could write our own function helper <code>pickBy</code>, but here is another possible solution. We can flip the order of arguments using functional helper <code>flipTwoArguments</code> available in <code>cypress-should-really</code>. For example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;flipTwoArguments&#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress-should-really&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> pickByFn = flipTwoArguments(Cypress._.pickBy)</span><br><span class="line"><span class="comment">// call pickByFn with the callback and the object</span></span><br><span class="line"><span class="keyword">const</span> result = pickByFn(largerThan(<span class="number">1</span>), counts)</span><br></pre></td></tr></table></figure><p>The function <code>pickByFn</code> works great, we just need to apply the first known argument so it only waits for the <code>counts</code> object to be provided. We can apply the first argument using the <code>partial</code> helper</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;flipTwoArguments, partial, greaterThan&#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress-should-really&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> pickByFn = flipTwoArguments(Cypress._.pickBy)</span><br><span class="line"><span class="keyword">const</span> pickLargerThanOne = partial(pickByFn, greaterThan(<span class="number">1</span>))</span><br><span class="line"><span class="comment">// call pickLargerThanOne with the object</span></span><br><span class="line"><span class="keyword">const</span> result = pickLargerThanOne(counts)</span><br></pre></td></tr></table></figure><p>Now that we got our &quot;pick&quot; function sorted out, we can write the callback function in a single shot.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;by attribute (flip arguments and partial apply)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;cypress/integration/duplicates/index.html&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> pickLargerThanOne = partial(</span><br><span class="line">    flipTwoArguments(pickBy),</span><br><span class="line">    greaterThan(<span class="number">1</span>),</span><br><span class="line">  )</span><br><span class="line">  cy.get(<span class="string">&#x27;li&#x27;</span>).should(</span><br><span class="line">    really(</span><br><span class="line">      map(invoke(<span class="string">&#x27;getAttribute&#x27;</span>, <span class="string">&#x27;data-product-id&#x27;</span>)),</span><br><span class="line">      countBy,</span><br><span class="line">      pickLargerThanOne,</span><br><span class="line">      <span class="string">&#x27;be.empty&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/check-for-duplicates/last.png" alt="The functional programming test detects the duplicate attribute &quot;a11&quot;"></p><blockquote class="pullquote"><p>🤪 If Stephen Curry wrote the above function, he would get free points for it. Of course, being a Curry, he would not even need to use the partial helper...</p></blockquote><p>Note: this blog post was mentioned in the <a href="https://cypresstips.substack.com/p/check-items-for-duplicates">Cypress Advent Calendar 2021 Day 18</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In my previous blog post &lt;a href=&quot;/blog/fp-cy-helpers/&quot; title=&quot;Functional Helpers For Cypress Tests&quot;&gt;Functional Helpers For Cypress Tests
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="functional" scheme="https://glebbahmutov.com/blog/tags/functional/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress internal commands cy.now and cy.state</title>
    <link href="https://glebbahmutov.com/blog/cy-now-and-state/"/>
    <id>https://glebbahmutov.com/blog/cy-now-and-state/</id>
    <published>2021-12-17T05:00:00.000Z</published>
    <updated>2021-12-17T20:13:38.263Z</updated>
    
    <content type="html"><![CDATA[<p>Cypress does not have a REPL which is unfortunate: sometimes you just want to run a few Cypress commands after the test has finished to see how to extend the test. Yet the only way you can run a command is by adding it to the spec file, saving it, causing Cypress to re-run the entire test. Unless you use tricks like <a href="/blog/faster-user-creation/" title="using cypress-data-session plugin">using cypress-data-session plugin</a> or <a href="https://www.cypress.io/blog/2019/10/29/split-a-very-long-cypress-test-into-shorter-ones-using-app-actions/">splitting a long test</a>, waiting for the entire test to finish just to check one command is frustrating.</p><p>This is where an internal Cypress command <code>cy.now</code> comes in very handy. This is the only place where <code>cy.now</code> is explained in the Cypress docs:</p><p><img src="../images/cy-now-and-state/cy-now-docs.png" alt="cy.now command documentation"></p><p>Pretty sweet, isn&#39;t it? But if that warning is not strong enough, let me add my own:</p><blockquote class="pullquote"><p>🚨 The <code>cy.now</code> and <code>cy.state</code> commands described in this blog post are internal to Cypress Test Runner. They can change without any warning in the future versions, they may not work in all cases, and they can cause your blood pressure to rise to dangerous levels. Please consult a Cypress doctor before using them.</p></blockquote><p>If you are ok with that, let&#39;s continue.</p><h2><span id="cynow">cy.now</span></h2><p>So let&#39;s say we have opened the DevTools console, the test has finished and we want to visit the site again. In the console run <code>cy.now(&#39;visit&#39;, &#39;/&#39;)</code>. The site loads.</p><p><img src="../images/cy-now-and-state/now-visit.gif" alt="Visit the baseUrl using the cy.now command"></p><p>Let&#39;s say we want to check if a selector works. Try using <code>cy.now(&#39;get&#39;, &#39;.todo&#39;)</code> to see what happens.</p><p><img src="../images/cy-now-and-state/get1.gif" alt="Calling cy.get to find all elements with class todo"></p><p>Hmm, which elements did it find? The <code>cy.now</code> returns a promise, so we should print the results to the console using <code>cy.now(&#39;get&#39;, &#39;.todo&#39;).then(console.log)</code>.</p><p><img src="../images/cy-now-and-state/log.gif" alt="Logging the resolved elements to the console"></p><p>There is another way to see the results of the <code>cy.now</code> commands. They are logged to the Cypress Command Log at the end of the last test (excluding pending or skipped tests). The video below shows me expanding the last test and observing the commands I executed using <code>cy.now</code> command.</p><p><img src="../images/cy-now-and-state/log2.gif" alt="Cypress Command Log shows the cy.now commands inside the last test"></p><p>Note that there are no DOM snapshots for <code>cy.now</code> commands, but you can log the command results by clicking on the command itself.</p><p>The <code>cy.now</code> command returns a Promise object, not a Cypress chainable object, thus you cannot chain multiple commands together, which makes it hard to build a REPL.</p><h2><span id="cynow-use-case">cy.now use case</span></h2><p>Building an entire testing suite by relying on <code>cy.now</code> is a bad idea. But using it sparingly might be necessary. For example, in <a href="https://github.com/bahmutov/cypress-data-session">cypress-data-session</a> I have a few static <code>Cypress.*</code> methods to help with debugging the cached data. Like calling a task by name to print all currently existing data sessions in the plugin process - I don&#39;t want the user to type <code>cy.now(&#39;tast&#39;, ...)</code> to list the sessions, instead I <a href="https://github.com/bahmutov/cypress-data-session/blob/9eb8f30b00ca19335817cdac2cf6009419d2632c/src/index.js#L265-L390">exposed static methods</a>:</p><figure class="highlight js"><figcaption><span>cypress/plugin/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in the plugin file we have a task that prints the sessions and returns them</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cypressDataSessionPlugin</span>(<span class="params">on, config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> savedValues = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">printDataSessions</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> n = <span class="built_in">Object</span>.keys(savedValues).length</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;%d data session(s)&#x27;</span>, n)</span><br><span class="line">    <span class="built_in">Object</span>.keys(savedValues).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;  %s: %o&#x27;</span>, key, savedValues[key])</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> savedValues</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="string">&#x27;dataSession:print&#x27;</span>: printDataSessions,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = cypressDataSessionPlugin</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Prints data sessions stored in the plugin space</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Cypress.printSharedDataSessions = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> cy.now(<span class="string">&#x27;task&#x27;</span>, <span class="string">&#x27;dataSession:print&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Super, the user can run this command at any time from the console to see the sessions. The browser even shows autocomplete for the <code>Cypress</code> methods, which is convenient.</p><p><img src="../images/cy-now-and-state/print.gif" alt="Calling a static Cypress method that calls cy.now"></p><p>But what if we want to use the same static method <em>during the test</em>?</p><h2><span id="cystate">cy.state</span></h2><p>Take the static method <code>Cypress.printSharedDataSessions</code>. Imagine we want to confirm the plugin process has a specific key present. We want to call the task and get the value and chain assertions on it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;stores the value&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> key = ...</span><br><span class="line">  <span class="comment">// somewhere inside the test file</span></span><br><span class="line">  <span class="comment">// we get the data session from the plugin file</span></span><br><span class="line">  Cypress.printSharedDataSessions()</span><br><span class="line">    .should(<span class="string">&#x27;not.be.empty&#x27;</span>)</span><br><span class="line">    .and(<span class="string">&#x27;have.property&#x27;</span>, key)</span><br><span class="line">    .should(<span class="string">&#x27;be.an&#x27;</span>, <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;data&#x27;</span>, <span class="string">&#x27;test value&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hmm, we need to run <code>cy.task</code> if the tests are running or use <code>cy.now</code> if the user called <code>Cypress.printSharedDataSessions</code> from the browser console. How do we know if the tests are running or not? This is where the internal <code>cy.state</code> command comes in handy. Again, this is a command NOT meant to be used. The Cypress Documentation site has a few places where it mentions it, like this one:</p><p><img src="../images/cy-now-and-state/cy-state-docs.png" alt="Cypress documentation mentions cy.state as a way to get the test retries counter"></p><p>The best way to understand what <code>cy.state</code> has is to look at it in the console. It is a grab bag of everything Cypress Test Runner uses internally.</p><p><img src="../images/cy-now-and-state/cy-state.png" alt="cy.state returns an object referencing all Test Runner internals"></p><p>There are a lot of things. Often Cypress public commands like <code>cy.get</code> use <code>cy.state(&#39;document&#39;)</code> and <code>cy.state(&#39;window&#39;)</code> to get references to the application&#39;s document and window objects without using <code>cy.document()</code> and <code>cy.window()</code> commands. In our case <code>cy.state(&#39;ctx&#39;)._runnable</code> looks like it might do the trick. If there is a test running, it returns an object. After the tests have finished, it returns undefined. Thus we can we use it to determine if we can call <code>cy.task</code> or must use <code>cy.now</code> to call get the info from the plugin process.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns true if we are currently running a test</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isTestRunning</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Boolean</span>(cy.state(<span class="string">&#x27;ctx&#x27;</span>)._runnable)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Prints data sessions stored in the plugin space</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Cypress.printSharedDataSessions = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (isTestRunning()) &#123;</span><br><span class="line">    <span class="keyword">return</span> cy.task(<span class="string">&#x27;dataSession:print&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cy.now(<span class="string">&#x27;task&#x27;</span>, <span class="string">&#x27;dataSession:print&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>One last detail. Normally <code>cy.*</code> methods can only be called inside a test or a hook. The commands <code>cy.now</code> and <code>cy.state</code> are exceptions.</p><p><strong>Note:</strong> this blog post was linked from <a href="https://cypresstips.substack.com/p/cypress-secrets-cynow-and-cystate">Cypress Advent 2021</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Cypress does not have a REPL which is unfortunate: sometimes you just want to run a few Cypress commands after the test has finished to s
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Faster User Object Creation</title>
    <link href="https://glebbahmutov.com/blog/faster-user-creation/"/>
    <id>https://glebbahmutov.com/blog/faster-user-creation/</id>
    <published>2021-12-15T05:00:00.000Z</published>
    <updated>2021-12-15T17:02:35.142Z</updated>
    
    <content type="html"><![CDATA[<p>In the blog post <a href="#">Post not found: cypress-data-session</a> I have introduced the <a href="https://github.com/bahmutov/cypress-data-session">cypress-data-session</a> plugin. In this blog post I will show how to use this plugin to speed up creating a user during the test, and how to instantly log in the user by caching the session cookie.</p><!-- toc --><ul><li><a href="#utilities">Utilities</a></li><li><a href="#the-first-test">The first test</a></li><li><a href="#deleting-all-users">Deleting all users</a></li><li><a href="#conditional-creation">Conditional creation</a></li><li><a href="#restarting-the-spec">Restarting the spec</a></li><li><a href="#session-data-session">Session data session</a></li><li><a href="#dependent-data-sessions">Dependent data sessions</a></li><li><a href="#validation">Validation</a></li></ul><!-- tocstop --><blockquote class="pullquote"><p>🎁 You can find the source code for this post in the repo <a href="https://github.com/bahmutov/chat.io">bahmutov/chat.io</a>.</p></blockquote><h2><span id="utilities">Utilities</span></h2><p>First, let&#39;s introduce two utility functions for creating a new user and for logging in.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A function that visits the page and creates the new user by submitting a form.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">username</span></span> - the username to use</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">password</span></span> - the password to use</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerUser</span>(<span class="params">username, password</span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;#create-account&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;.register-form&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    .within(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      cy.get(<span class="string">&#x27;[placeholder=username]&#x27;</span>)</span><br><span class="line">        .type(username, &#123; <span class="attr">delay</span>: <span class="number">100</span> &#125;)</span><br><span class="line">        .should(<span class="string">&#x27;have.value&#x27;</span>, username)</span><br><span class="line">      cy.get(<span class="string">&#x27;[placeholder=password]&#x27;</span>).type(password, &#123; <span class="attr">delay</span>: <span class="number">100</span> &#125;)</span><br><span class="line"></span><br><span class="line">      cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;create&#x27;</span>).click().should(<span class="string">&#x27;be.disabled&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// if everything goes well</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;.success&#x27;</span>, <span class="string">&#x27;Your account has been created&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Opens the page, enters the username and password and clicks the login button.</span></span><br><span class="line"><span class="comment"> * If the login is successful, the browser should redirect to the rooms page.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>username Existing user name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>password The password to use</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loginUser</span>(<span class="params">username, password</span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;.login-form&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    .within(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      cy.get(<span class="string">&#x27;[placeholder=username]&#x27;</span>)</span><br><span class="line">        .type(username, &#123; <span class="attr">delay</span>: <span class="number">100</span> &#125;)</span><br><span class="line">        .should(<span class="string">&#x27;have.value&#x27;</span>, username)</span><br><span class="line">      cy.get(<span class="string">&#x27;[placeholder=password]&#x27;</span>).type(password, &#123; <span class="attr">delay</span>: <span class="number">100</span> &#125;)</span><br><span class="line"></span><br><span class="line">      cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;login&#x27;</span>).click()</span><br><span class="line">      cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note that <code>registerUser</code> assumes the user with the given username does not exist yet. Now let&#39;s right our first test.</p><h2><span id="the-first-test">The first test</span></h2><p>The first test assumes a clean slate.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;registers and logs in via UI&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">&#x27;Test&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> password = <span class="string">&#x27;MySecreT&#x27;</span></span><br><span class="line">  registerUser(username, password)</span><br><span class="line">  loginUser(username, password)</span><br><span class="line">  <span class="comment">// check if the user is logged in successfully</span></span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;.user-info&#x27;</span>, <span class="string">&#x27;Test&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>It works</p><p><img src="../images/faster-user-creation/test1.gif" alt="The test passes on the first run"></p><p>The test unfortunately fails when we try to re-run it with the error &quot;Username already exists&quot;</p><p><img src="../images/faster-user-creation/test2.gif" alt="The test fails to create a user with the same username"></p><p>Ok, so we need to delete the user, or clear all users, or use a random username for every test.</p><h2><span id="deleting-all-users">Deleting all users</span></h2><p>We can update the test to delete the users before registration</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;deletes all users before registering&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.task(<span class="string">&#x27;clearUsers&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">&#x27;Test&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> password = <span class="string">&#x27;MySecreT&#x27;</span></span><br><span class="line">  registerUser(username, password)</span><br><span class="line">  loginUser(username, password)</span><br><span class="line">  <span class="comment">// check if the user is logged in successfully</span></span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;.user-info&#x27;</span>, <span class="string">&#x27;Test&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The task <code>clearUsers</code> is registered in the <a href="https://github.com/bahmutov/chat.io/blob/main/cypress/plugins/index.js">cypress/plugins/index.js file</a> and uses the application&#39;s database code to perform its task.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> database = <span class="built_in">require</span>(<span class="string">&#x27;../../app/database&#x27;</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">clearUsers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;clear users&#x27;</span>)</span><br><span class="line">  <span class="keyword">await</span> database.models.user.deleteMany(&#123;&#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    clearUsers,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>🎓 You can clear the users yourself from the browser&#39;s DevTools console by calling the task:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.now(<span class="string">&#x27;task&#x27;</span>, <span class="string">&#x27;clearUsers&#x27;</span>)</span><br></pre></td></tr></table></figure></p></blockquote><p>Great, but now every test takes six seconds - and this is our little application. What if we needed to set something else? Or if there are external systems involved that slow the user object creation? Do we want to wait 30 seconds just to start each test?</p><h2><span id="conditional-creation">Conditional creation</span></h2><p>We probably want to create the user <em>if it does not exist yet</em>. Good, how do we do that? By using <a href="https://github.com/bahmutov/cypress-data-session">cypress-data-session</a> - just move the <code>registerUser</code> command into the <code>cy.dataSession</code> callback <code>setup</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;cache the created user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">&#x27;Test&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> password = <span class="string">&#x27;MySecreT&#x27;</span></span><br><span class="line">  cy.dataSession(&#123;</span><br><span class="line">    name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      registerUser(username, password)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// as long as there is something in memory</span></span><br><span class="line">    <span class="comment">// we know we have created the user already</span></span><br><span class="line">    validate: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  loginUser(username, password)</span><br><span class="line">  <span class="comment">// check if the user is logged in successfully</span></span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;.user-info&#x27;</span>, <span class="string">&#x27;Test&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The first time the test runs, there is no data session with the name &quot;user&quot;, thus it executes the <code>setup</code> callback with our command to register the user.</p><p><img src="../images/faster-user-creation/cache-user.gif" alt="The first time the test run"></p><p>The test looks exactly like our very first attempt, but with an extra message at the top of <code>cy.dataSession</code></p><p><img src="../images/faster-user-creation/first.png" alt="The data session user needs to be created"></p><p>Let&#39;s run the test again.</p><p><img src="../images/faster-user-creation/still-valid.gif" alt="The second run"></p><p>Notice the test became faster - it skipped creating the user steps completely. At the start of the data session, it found something in its memory, it was valid (thanks to the <code>validate: true</code> parameter!), and it skipped running <code>registerUser</code> function.</p><p><img src="../images/faster-user-creation/second.png" alt="The data session user was found in memory"></p><p>Super. We can even see what was cached in memory under the session name &quot;user&quot; by running from the DevTools console <code>Cypress.getDataSession(&#39;user&#39;)</code> - this static method is added to the global <code>Cypress</code> object by the <a href="https://github.com/bahmutov/cypress-data-session">cypress-data-session</a> plugin.</p><p><img src="../images/faster-user-creation/get-data-session.png" alt="The data session contents"></p><p>The data session stores whatever is yielded by the last Cypress command inside the <code>setup</code> callback. In our case, it was the DOM element <code>cy.contains(&#39;.success&#39;, &#39;Your account has been created&#39;)</code>. It works in our case, in the future example we will store something more meaningful like the user session cookie.</p><h2><span id="restarting-the-spec">Restarting the spec</span></h2><p>What happens if we hard-reload the spec file? Or close and open the Cypress? We will have no data sessions, but the user is already in the database. This will break our test, as we will try to create the user to store in the data session, hitting the &quot;Username already exists&quot; error. This is where the <code>init</code> callback is used.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="comment">// if there is nothing in memory for the session</span></span><br><span class="line">  <span class="comment">// try pulling the user from the database</span></span><br><span class="line">  <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    cy.task(<span class="string">&#x27;findUser&#x27;</span>, username)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    registerUser(username, password)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// as long as there is something in memory</span></span><br><span class="line">  <span class="comment">// we know we have created the user already</span></span><br><span class="line">  validate: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The first time <code>cy.dataSession</code> runs and does not find the &quot;user&quot; session, it first runs the <code>init</code> callback. If it yields something, and that value passes the validation (thanks again to <code>validate: true</code> property), our code skips the <code>setup</code> and stores the value in memory. Now we have the data session ready to go, initialized with the already existing user.</p><p><img src="../images/faster-user-creation/init.png" alt="Find the user in the database and cache it"></p><p>The task <code>findUser</code> is implemented in the plugin file using the database access code, just like <code>clearUsers</code> is.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> database = <span class="built_in">require</span>(<span class="string">&#x27;../../app/database&#x27;</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">findUser</span>(<span class="params">username</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;find user&#x27;</span>, username)</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> username !== <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;username must be a string&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> database.models.user.findOne(&#123; username &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    clearUsers,</span><br><span class="line">    findUser,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="session-data-session">Session data session</span></h2><p>What about logging in the user? Do we always have to go through the page and submit the form? How does the browser &quot;know&quot; that the user is logged in? Look at the DevTools - in our case, the <code>/login</code> form submission, if the user supplies valid username and password, the server sets the session cookie called <code>connect.sid</code>.</p><p><img src="../images/faster-user-creation/cookie.png" alt="The session cookie"></p><p>Ok, let&#39;s use <code>cy.dataSession</code>. If we have nothing in memory, our setup should do what we have done already - call the <code>loginUser</code> function. The browser will finish with the logged in user - and that&#39;s when we grab the cookie and <code>cy.dataSession</code> will store it in memory for us.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;logged in&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    loginUser(username, password)</span><br><span class="line">    cy.getCookie(<span class="string">&#x27;connect.sid&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  validate: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Great, but what about the second run? We have the cookie value stored in memory inside the data session &quot;logged in&quot;, but the browser is on the blank page. How do we use the cookie? By setting it ourselves using the <a href="https://on.cypress.io/setcookie">cy.setCookie</a> before visiting the page. And we set the cookie and visit the page in the <code>recreate</code> callback - this function every time the <code>cy.dataSession</code> has valid item in memory.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;logged in&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    loginUser(username, password)</span><br><span class="line">    cy.getCookie(<span class="string">&#x27;connect.sid&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  validate: <span class="literal">true</span>,</span><br><span class="line">  <span class="function"><span class="title">recreate</span>(<span class="params">cookie</span>)</span> &#123;</span><br><span class="line">    cy.setCookie(<span class="string">&#x27;connect.sid&#x27;</span>, cookie.value)</span><br><span class="line">    cy.visit(<span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Beautiful - and fast too. Look at the execution timing when we have the cookie already in memory, we completely skip the slow parts of the test.</p><p><img src="../images/faster-user-creation/two-sessions.png" alt="Two data sessions make the test fast"></p><p>We can inspect the cookie stored in the data session memory.</p><p><img src="../images/faster-user-creation/log-cookie.png" alt="Dump the logged in data session value"></p><h2><span id="dependent-data-sessions">Dependent data sessions</span></h2><p>We have two data sessions: &quot;user&quot; and &quot;logged in&quot;. We storing the user &quot;object&quot; which is not really an object, and the cookie. What if the user object is deleted from the database? Then the test can no longer log in using the cached cookie - because that cookie does not belong to a valid user any more, and the backend check will reject it. Thus the data session &quot;logged in&quot; depends on the data session &quot;user&quot;. If the data session &quot;user&quot; is recomputed for whatever reason, the user needs to be logged in again. This can be done automatically by explicitly listing the dependency between the two data sessions.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;logged in&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    loginUser(username, password)</span><br><span class="line">    cy.getCookie(<span class="string">&#x27;connect.sid&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  validate: <span class="literal">true</span>,</span><br><span class="line">  <span class="function"><span class="title">recreate</span>(<span class="params">cookie</span>)</span> &#123;</span><br><span class="line">    cy.setCookie(<span class="string">&#x27;connect.sid&#x27;</span>, cookie.value)</span><br><span class="line">    cy.visit(<span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  dependsOn: [<span class="string">&#x27;user&#x27;</span>],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Under the hood, the <code>cy.dataSession</code> command keeps the timestamp when the data session called <code>setup</code> function. Thus it can tell if the parent session was recomputed, which invalidates the current data session.</p><h2><span id="validation">Validation</span></h2><p>We skipped over the validation logic, instead using the <code>validate: true</code> in our test. Whenever there is something in the data session memory, we assumed it was valid. This is incorrect, we should validate the user object, and we should check if the session is still valid.</p><p>Here is how we validate the user object - we yield it from the <code>init</code> and <code>setup</code> and it will be stored</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    cy.task(<span class="string">&#x27;findUser&#x27;</span>, username)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    registerUser(username, password)</span><br><span class="line">    cy.task(<span class="string">&#x27;findUser&#x27;</span>, username)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">validate</span>(<span class="params">user</span>)</span> &#123;</span><br><span class="line">    cy.task(<span class="string">&#x27;findUser&#x27;</span>, user.username).then(</span><br><span class="line">      (found) =&gt; found &amp;&amp; found._id === user._id,</span><br><span class="line">    )</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We can see the object yielded by <code>cy.task(&#39;findUser&#39;)</code> stored in memory</p><p><img src="../images/faster-user-creation/user-object.png" alt="The user object to be validated"></p><p>Our <code>validate</code> callback will receive the object from memory, and it needs to make sure there is still a user with this username, and the IDs match. Then we know the user is still good to use.</p><p>Let&#39;s validate the session cookie to prevent the tests failing if the session is very short or there was some backend session purge. Let&#39;s use <a href="https://on.cypress.io/request">cy.request</a> to verify the cookie - by trying to request a protected resource.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">cy.dataSession(&#123;</span><br><span class="line">  name: <span class="string">&#x27;logged in&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    loginUser(username, password)</span><br><span class="line">    cy.getCookie(<span class="string">&#x27;connect.sid&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">validate</span>(<span class="params">cookie</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// try making a request with the cookie value</span></span><br><span class="line">    <span class="comment">// to a protected route. If it is successful</span></span><br><span class="line">    <span class="comment">// we are good to go. If we get a redirect</span></span><br><span class="line">    <span class="comment">// to login instead, we know the cookie is invalid</span></span><br><span class="line">    cy.request(&#123;</span><br><span class="line">      url: <span class="string">&#x27;/rooms&#x27;</span>,</span><br><span class="line">      failOnStatusCode: <span class="literal">false</span>,</span><br><span class="line">      followRedirect: <span class="literal">false</span>,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        cookie: <span class="string">`connect.sid=<span class="subst">$&#123;cookie.value&#125;</span>`</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">      .its(<span class="string">&#x27;status&#x27;</span>)</span><br><span class="line">      .then(<span class="function">(<span class="params">status</span>) =&gt;</span> status === <span class="number">200</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">recreate</span>(<span class="params">cookie</span>)</span> &#123;</span><br><span class="line">    cy.setCookie(<span class="string">&#x27;connect.sid&#x27;</span>, cookie.value)</span><br><span class="line">    cy.visit(<span class="string">&#x27;/rooms&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  dependsOn: [<span class="string">&#x27;user&#x27;</span>],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/faster-user-creation/request.png" alt="Validating the cached cookie by making a request"></p><p>Beautiful and fast.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the blog post &lt;a href=&quot;#&quot;&gt;Post not found: cypress-data-session&lt;/a&gt; I have introduced the &lt;a href=&quot;https://github.com/bahmutov/cypress-
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Server Running Inside Cypress Plugin Process</title>
    <link href="https://glebbahmutov.com/blog/restart-server/"/>
    <id>https://glebbahmutov.com/blog/restart-server/</id>
    <published>2021-12-12T05:00:00.000Z</published>
    <updated>2021-12-12T00:48:51.099Z</updated>
    
    <content type="html"><![CDATA[<p>In the blog post <a href="/blog/how-to-correctly-unit-test-express-server/" title="How to correctly unit test Express server">How to correctly unit test Express server</a> I have shown how to unit test an Express server using Mocha. In this blog post I will show how to run the Express server inside Cypress plugin process, and how to restart it before each spec.</p><blockquote class="pullquote"><p>🎁 You can find the source code in the repo <a href="https://github.com/bahmutov/server-restart-example">bahmutov/server-restart-example</a>.</p></blockquote><h2><span id="the-server">The server</span></h2><p>My server is a plain <a href="http://expressjs.com/">Express</a> server that I can construct and close when needed. Here is the source code - the server really has a single endpoint, that is enough for us to show the tests.</p><figure class="highlight js"><figcaption><span>src/server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeServer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> app = express()</span><br><span class="line">  app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      message: <span class="string">&#x27;Hello World!&#x27;</span>,</span><br><span class="line">      responseId: <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * <span class="number">1e6</span>),</span><br><span class="line">      port,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> port = <span class="number">6000</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> server = app.listen(port, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> port = server.address().port</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;Example app listening at port %d&#x27;</span>, port)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// close the server</span></span><br><span class="line">      <span class="keyword">const</span> close = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;closing server&#x27;</span>)</span><br><span class="line">          server.close(resolve)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      resolve(&#123; server, port, close &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = makeServer</span><br></pre></td></tr></table></figure><p>To construct and shut down the server one needs to use the returned object.</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> makeServer = <span class="built_in">require</span>(<span class="string">&#x27;./server&#x27;</span>)</span><br><span class="line">makeServer().then(<span class="function">(<span class="params">&#123;server, port, close&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// wait for some signal, then shutdown</span></span><br><span class="line">  <span class="keyword">return</span> close()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="the-first-tests">The first tests</span></h2><p>Let&#39;s write a Cypress API test that confirms something, maybe some fields in the response body.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec1.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;Express server 1&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;responds&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.request(<span class="string">&#x27;http://localhost:6000&#x27;</span>).its(<span class="string">&#x27;body&#x27;</span>).should(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">      message: <span class="string">&#x27;Hello World!&#x27;</span>,</span><br><span class="line">      port: <span class="number">6000</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;responds with random id&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.request(<span class="string">&#x27;http://localhost:6000&#x27;</span>)</span><br><span class="line">      .its(<span class="string">&#x27;body.responseId&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;be.a&#x27;</span>, <span class="string">&#x27;number&#x27;</span>)</span><br><span class="line">      .and(<span class="string">&#x27;be.within&#x27;</span>, <span class="number">1e5</span>, <span class="number">1e6</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Ok, but before we run the tests we need to start the server. We could use <a href="https://github.com/bahmutov/start-server-and-test">start-server-and-test</a>, but let&#39;s just run the server inside the Cypress plugin process, which runs in Node. We can use the <code>before:spec</code> event fired by Cypress before every spec starts to make sure the server is up and running. After the spec file finishes running all tests, we can close the server.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// `on` is used to hook into various events Cypress emits</span></span><br><span class="line">  <span class="comment">// `config` is the resolved Cypress config</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> server, port, close</span><br><span class="line"></span><br><span class="line">  on(<span class="string">&#x27;before:spec&#x27;</span>, <span class="keyword">async</span> (spec) =&gt; &#123;</span><br><span class="line">    <span class="comment">// we can customize the server based on the spec about to run</span></span><br><span class="line">    <span class="keyword">const</span> info = <span class="keyword">await</span> makeServer()</span><br><span class="line">    <span class="comment">// save the server instance information</span></span><br><span class="line">    server = info.server</span><br><span class="line">    port = info.port</span><br><span class="line">    close = info.close</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;started the server on port %d&#x27;</span>, port)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  on(<span class="string">&#x27;after:spec&#x27;</span>, <span class="keyword">async</span> (spec) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!server) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;no server to close&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> close()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;closed the server running on port %d&#x27;</span>, port)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Important:</strong> the <code>before:spec</code> and <code>after:spec</code> are only fired in the non-interactive mode when you use <code>cypress run</code>. We need to enable them to run in the interactive mode too. In Cypress v9 we should enable this using the experimental feature <a href="https://on.cypress.io/experiments">experimentalInteractiveRunEvents</a>.</p><figure class="highlight js"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;experimentalInteractiveRunEvents&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>While we are at it, let&#39;s add another spec file</p><figure class="highlight js"><figcaption><span>cypress/integration/spec2.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;Express server 2&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;has timing info&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.request(<span class="string">&#x27;http://localhost:6000&#x27;</span>)</span><br><span class="line">      <span class="comment">// Cypress adds duration ms to the response</span></span><br><span class="line">      .its(<span class="string">&#x27;duration&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;be.above&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let&#39;s see our tests and the server in action.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ npx cypress run</span><br><span class="line">...</span><br><span class="line">Browser:        Electron 94 (headless)</span><br><span class="line">Node Version:   v14.17.1</span><br><span class="line">...</span><br><span class="line">  Running:  spec1.js</span><br><span class="line">Example app listening at port 6000</span><br><span class="line">started the server on port 6000</span><br><span class="line">...</span><br><span class="line">  Express server 1</span><br><span class="line">    ✓ responds (60ms)</span><br><span class="line">    ✓ responds with random id (21ms)</span><br><span class="line">...</span><br><span class="line">closing server</span><br><span class="line">closed the server running on port 6000</span><br><span class="line">...</span><br><span class="line">  Running:  spec2.js</span><br><span class="line">Example app listening at port 6000</span><br><span class="line">started the server on port 6000</span><br><span class="line">...</span><br><span class="line">closing server</span><br><span class="line">closed the server running on port 6000</span><br></pre></td></tr></table></figure><p>Cypress v9 uses the default system Node, making it simple to install the dependencies and run the server. Every spec starts the server and shuts it down.</p><h2><span id="random-port">Random port</span></h2><p>Let&#39;s pretend that each spec starts the server a little bit differently. For example, what if we need to start the server at a random port? How would we send the port number to the spec file so it makes the right request? In our example, we can use <a href="https://github.com/sindresorhus/get-port">get-port</a> module to find an open port to use.</p><figure class="highlight js"><figcaption><span>src/server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getPort = <span class="built_in">require</span>(<span class="string">&#x27;get-port&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; makeRange &#125; = getPort</span><br><span class="line">...</span><br><span class="line"><span class="comment">// the port value will be set later</span></span><br><span class="line"><span class="keyword">let</span> port</span><br><span class="line"><span class="comment">// random number between 6100 and 6300</span></span><br><span class="line"><span class="keyword">const</span> n = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * <span class="number">200</span>) + <span class="number">6100</span></span><br><span class="line"><span class="keyword">const</span> ports = makeRange(n, <span class="number">6300</span>)</span><br><span class="line">getPort(&#123; <span class="attr">port</span>: ports &#125;).then(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">  port = p</span><br><span class="line">  <span class="comment">// start the server at the port number</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Great, now let&#39;s update the tests</p><h2><span id="sending-the-info-to-the-spec">Sending the info to the spec</span></h2><p>We can start the server and save the port, but we need to somehow tell the spec which port to use. The port number is stored in the plugin memory process as a local variable. To let the spec know, we can run <a href="https://on.cypress.io/task">cy.task</a> and fetch the port number.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// `on` is used to hook into various events Cypress emits</span></span><br><span class="line">  <span class="comment">// `config` is the resolved Cypress config</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> server, port, close</span><br><span class="line"></span><br><span class="line">  on(<span class="string">&#x27;before:spec&#x27;</span>, <span class="keyword">async</span> (spec) =&gt; &#123;</span><br><span class="line">    <span class="comment">// we can customize the server based on the spec about to run</span></span><br><span class="line">    <span class="keyword">const</span> info = <span class="keyword">await</span> makeServer()</span><br><span class="line">    <span class="comment">// save the server instance information</span></span><br><span class="line">    server = info.server</span><br><span class="line">    port = info.port</span><br><span class="line">    close = info.close</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;started the server on port %d&#x27;</span>, port)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  on(<span class="string">&#x27;after:spec&#x27;</span>, <span class="keyword">async</span> (spec) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!server) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;no server to close&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> close()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;closed the server running on port %d&#x27;</span>, port)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">getPort</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="comment">// cy.task cannot return undefined</span></span><br><span class="line">      <span class="comment">// thus we return null if there is no port value</span></span><br><span class="line">      <span class="keyword">return</span> port || <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We want every spec to &quot;know&quot; the port number. Thus we can call the <code>cy.task(&#39;getPort&#39;)</code> from the support file which runs before every spec file. We can store the returned port number in the <a href="https://on.cypress.io/env">Cypress.env</a> object.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.task(<span class="string">&#x27;getPort&#x27;</span>).then(<span class="function">(<span class="params">port</span>) =&gt;</span> &#123;</span><br><span class="line">    expect(port).to.be.a(<span class="string">&#x27;number&#x27;</span>)</span><br><span class="line">    <span class="comment">// store the port and url in the Cypress env object</span></span><br><span class="line">    Cypress.env(<span class="string">&#x27;port&#x27;</span>, port)</span><br><span class="line">    Cypress.env(<span class="string">&#x27;url&#x27;</span>, <span class="string">`http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let&#39;s modify the spec to use the port. <strong>Important</strong> the values of <code>port</code> and <code>url</code> are set in the <code>before</code> hook, thus they are going to be set inside the test or any hooks. Thus we need to get the value from the <code>Cypress.env</code> object in the test for example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;Express server 2&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;has timing info&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> port = Cypress.env(<span class="string">&#x27;port&#x27;</span>)</span><br><span class="line">    expect(port).to.be.a(<span class="string">&#x27;number&#x27;</span>).and.to.be.within(<span class="number">6100</span>, <span class="number">6300</span>)</span><br><span class="line">    cy.request(<span class="string">`http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">      <span class="comment">// Cypress adds duration ms to the response</span></span><br><span class="line">      .its(<span class="string">&#x27;duration&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;be.above&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Super, everything works.</p><p><img src="../images/restart-server/port.png" alt="The test uses the random port number from the plugin file"></p><p>Similar update in the <code>spec1.js</code></p><figure class="highlight js"><figcaption><span>cypress/integration/spec1.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;Express server 1&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;responds&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = Cypress.env(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> port = Cypress.env(<span class="string">&#x27;port&#x27;</span>)</span><br><span class="line">    cy.request(url).its(<span class="string">&#x27;body&#x27;</span>).should(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">      message: <span class="string">&#x27;Hello World!&#x27;</span>,</span><br><span class="line">      port,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;responds with random id&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = Cypress.env(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">    cy.request(url)</span><br><span class="line">      .its(<span class="string">&#x27;body.responseId&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;be.a&#x27;</span>, <span class="string">&#x27;number&#x27;</span>)</span><br><span class="line">      .and(<span class="string">&#x27;be.within&#x27;</span>, <span class="number">1e5</span>, <span class="number">1e6</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Want more API testing goodness? Try using <a href="https://github.com/bahmutov/cy-api">cy-api</a> plugin.</p><h2><span id="use-cy-spok">Use cy-spok</span></h2><p>Finally, any time we need to do <a href="https://www.cypress.io/blog/2019/12/23/asserting-network-calls-from-cypress-tests/">network assertions</a>, and using the <a href="https://github.com/bahmutov/cy-spok">cy-spok</a> as a very convenient way of writing complex object assertions. Let&#39;s install <code>cy-spok</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cy-spok</span><br><span class="line">+ cy-spok@1.4.1</span><br></pre></td></tr></table></figure><p>In the spec file, let&#39;s use the <code>spok</code> instead of <code>deep.include</code>, and we can thus verify the random response ID property.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec1.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spok <span class="keyword">from</span> <span class="string">&#x27;cy-spok&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Express server 1&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;responds&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = Cypress.env(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> port = Cypress.env(<span class="string">&#x27;port&#x27;</span>)</span><br><span class="line">    cy.request(url)</span><br><span class="line">      .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">      .should(</span><br><span class="line">        spok(&#123;</span><br><span class="line">          message: <span class="string">&#x27;Hello World!&#x27;</span>,</span><br><span class="line">          port,</span><br><span class="line">          responseId: spok.range(<span class="number">1e5</span>, <span class="number">1e6</span>),</span><br><span class="line">        &#125;),</span><br><span class="line">      )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We just replaced two tests with a single test, and the Command Log is cleaner too.</p><p><img src="../images/restart-server/spok.png" alt="Assert object properties using cy-spok"></p><p>Beautiful.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the blog post &lt;a href=&quot;/blog/how-to-correctly-unit-test-express-server/&quot; title=&quot;How to correctly unit test Express server&quot;&gt;How to corr
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Add Timestamps To Cypress</title>
    <link href="https://glebbahmutov.com/blog/cypress-timestamps/"/>
    <id>https://glebbahmutov.com/blog/cypress-timestamps/</id>
    <published>2021-12-10T05:00:00.000Z</published>
    <updated>2021-12-09T22:03:48.138Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes a test fails due to some API service failing to work. You need to debug the service logs, the first piece of information you need is to know when the failure has happened. This blog post explains how to add the timestamps to different parts of Cypress output.</p><!-- toc --><ul><li><a href="#terminal-output">Terminal output</a></li><li><a href="#screenshot-timestamp">Screenshot timestamp</a></li><li><a href="#add-timestamp-to-the-error-message">Add timestamp to the error message</a></li><li><a href="#command-timestamps">Command timestamps</a></li><li><a href="#cypress-timestamps-plugin">cypress-timestamps plugin</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><blockquote class="pullquote"><p>🎁 You can find the source code for this blog post in the repo <a href="https://github.com/bahmutov/todo-graphql-example">bahmutov/todo-graphql-example</a>.</p></blockquote><h2><span id="terminal-output">Terminal output</span></h2><p>Let&#39;s output to the terminal when each test begins and finishes using the plugin file. In the plugin file register new tasks to just print the timestamp of the test</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getUTC</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="keyword">return</span> now.toISOString()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">beforeTest</span>(<span class="params">testName</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`=== <span class="subst">$&#123;getUTC()&#125;</span> start: <span class="subst">$&#123;testName&#125;</span>`</span>)</span><br><span class="line">      <span class="comment">// cy.task must return something, cannot return undefined</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">afterTest</span>(<span class="params">testName</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`=== <span class="subst">$&#123;getUTC()&#125;</span> end: <span class="subst">$&#123;testName&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can execute these tasks around every test by using the global <code>beforeEach</code> and <code>afterEach</code> hooks defined in support file.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.task(<span class="string">&#x27;beforeTest&#x27;</span>, Cypress.currentTest.title)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">afterEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.task(<span class="string">&#x27;afterTest&#x27;</span>, Cypress.currentTest.title)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> we had to create our own tasks because Cypress API only has <code>before:run</code> and <code>before:spec</code> events, thus there is no built-in way to run something before or after every <em>test</em>.</p><p>The local terminal shows the UTC dates</p><p><img src="../images/cypress-timestamps/terminal.png" alt="The timestamps are printed around the test terminal output"></p><p>If you are recording to <a href="https://on.cypress.io/dashboard-introduction">Cypress Dashboard</a>, the timestamps and all the output from the plugin file is captured too.</p><p><img src="../images/cypress-timestamps/terminal-dashboard.gif" alt="The Dashboard shows the test timestamps"></p><h2><span id="screenshot-timestamp">Screenshot timestamp</span></h2><p>When a command or an assertion fails, Cypress takes a screenshot, unless <code>screenshotOnRunFailure: false</code> is set. The <a href="https://on.cypress.io/after-screenshot-api">screenshot event</a> in the plugin file has the information we need - and it is pretty accurate timestamp of the failure. Let&#39;s print it to the terminal:</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// https://on.cypress.io/after-screenshot-api</span></span><br><span class="line">  on(<span class="string">&#x27;after:screenshot&#x27;</span>, <span class="function">(<span class="params">&#123; testFailure, takenAt &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (testFailure) &#123;</span><br><span class="line">      <span class="comment">// this is a screenshot taken on test failure</span></span><br><span class="line">      <span class="comment">// not a screenshot from the cy.screenshot command</span></span><br><span class="line">      <span class="comment">// takenAt is a UTC string</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`xxx <span class="subst">$&#123;takenAt&#125;</span> error`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note: the screenshot on failure is only taken in the <code>cypress run</code> mode.</p><p>Here is a typical output from a failed test, note that using the screenshot we can pin-point the failure a few hundred milliseconds closer compared to the <code>afterEach</code> hook task.</p><p><img src="../images/cypress-timestamps/screenshot-timestamp.png" alt="Printing screenshot takenAt timestamp"></p><h2><span id="add-timestamp-to-the-error-message">Add timestamp to the error message</span></h2><p>In the <a href="https://on.cypress.io/catalog-of-events">Cypress catalog of events</a> you can find the <code>fail</code> event. We can modify the error message and rethrow it. Since we want every test to have the timestamp in the error message, we place our callback in the support file.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Cypress.on(<span class="string">&#x27;fail&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err)</span><br><span class="line">  <span class="keyword">const</span> at = <span class="keyword">new</span> <span class="built_in">Date</span>().toISOString()</span><br><span class="line">  err.message = at + <span class="string">&#x27;\n&#x27;</span> + err.message</span><br><span class="line">  <span class="keyword">throw</span> err</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The timestamp is going to be present in the Dashboard and in the screenshot.</p><p><img src="../images/cypress-timestamps/timestamp-error.png" alt="The timestamp is one the first line of the error message"></p><h2><span id="command-timestamps">Command timestamps</span></h2><p>Inside a long test, you might want to know when a particular command has run. Cypress <a href="https://on.cypress.io/catalog-of-events">events</a> has an event <code>command:start</code> delivered when a command is starting. We can take an advantage of this command to add timestamps for each <a href="https://on.cypress.io/custom-commands">parent command</a> to avoid spamming the Command Log with excessive logging.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Cypress.on(<span class="string">&#x27;command:start&#x27;</span>, <span class="function">(<span class="params">&#123; attributes &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (attributes.type === <span class="string">&#x27;parent&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> at = <span class="keyword">new</span> <span class="built_in">Date</span>().toISOString()</span><br><span class="line">    Cypress.log(&#123;</span><br><span class="line">      name: <span class="string">`<span class="subst">$&#123;at&#125;</span> - <span class="subst">$&#123;attributes.name&#125;</span>`</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-timestamps/parent-timestamps.png" alt="Printing timestamp at the start of each Cypress command chain"></p><p>Now we know what is going on and when it is happening!</p><p><strong>Note:</strong> we cannot simply use <code>cy.log</code> inside the <code>command:start</code> callback since <code>cy.log</code> is itself a command, which will trigger another <code>command:start</code> event, which will just keep looping until the browser runs out of memory.</p><h2><span id="cypress-timestamps-plugin">cypress-timestamps plugin</span></h2><p>I factored out the timestamp code into its own plugin <a href="https://github.com/bahmutov/cypress-timestamps">cypress-timestamps</a>. Add this plugin as a dev dependency using <code>npm i -D cypress-timestamps</code> and call the registration functions from the support and the plugin files</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/bahmutov/cypress-timestamps</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;cypress-timestamps/support&#x27;</span>)(&#123;</span><br><span class="line">  terminal: <span class="literal">true</span>, <span class="comment">// by default the terminal output is disabled</span></span><br><span class="line">  error: <span class="literal">true</span>,</span><br><span class="line">  commandLog: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/plugin/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://github.com/bahmutov/cypress-timestamps</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;cypress-timestamps/plugin&#x27;</span>)(on)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="see-also">See also</span></h2><ul><li><a href="https://www.cypress.io/blog/2020/05/22/where-does-the-test-spend-its-time/">Where Does the Test Spend Its Time?</a></li><li><a href="https://github.com/bahmutov/cypress-failed-log">cypress-failed-log</a> plugin</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sometimes a test fails due to some API service failing to work. You need to debug the service logs, the first piece of information you ne
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Dealing With 3rd Party Scripts In Cypress Tests</title>
    <link href="https://glebbahmutov.com/blog/3rd-party/"/>
    <id>https://glebbahmutov.com/blog/3rd-party/</id>
    <published>2021-12-09T05:00:00.000Z</published>
    <updated>2021-12-09T15:16:12.946Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s take a look at an application that uses 3rd party script, like a chat widget. Here is my site with the Tidio widget opened:</p><p><img src="../images/3rd-party/chat.png" alt="Site with a 3rd party chat widget"></p><p>Our first question might be how to ensure the 3rd party JavaScript has loaded before starting to test the site. In this particular application, the button &quot;Open chat 🗣&quot; calls the code <code>tidioChatApi.open()</code> after a click</p><figure class="highlight js"><figcaption><span>public/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;open-chat&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;opening chat&#x27;</span>)</span><br><span class="line">  <span class="comment">// https://docs.tidio.com/docs/other_methods</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// safeguard against slow-loading JavaScript code</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.tidioChatApi) &#123;</span><br><span class="line">    tidioChatApi.open()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If the <code>tidioChatApi</code> library is slow to load or initialize, the click does nothing, leading to the user frustration. Let&#39;s see how to slow down the 3rd party JavaScript to test this.</p><blockquote class="pullquote"><p>🎁 You can find the full source code shown in this blog post as well as links to multiple videos explaining the solutions step-by-step in the repo <a href="https://github.com/bahmutov/cypress-3rd-party-script-example">bahmutov/cypress-3rd-party-script-example</a>.</p></blockquote><h2><span id="slow-down-the-javascript-resource">Slow down the JavaScript resource</span></h2><p>The application is loading the 3rd party JS library asynchronously</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// load 3rd party libraries</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// add the script tag to the HEAD</span></span><br><span class="line">  <span class="keyword">const</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">  script.type = <span class="string">&#x27;text/javascript&#x27;</span></span><br><span class="line">  script.src = <span class="string">&#x27;https://code.tidio.co/zwjhqkduaeqdmkflwoyfcmqd64fj2a3s.js&#x27;</span></span><br><span class="line">  head.appendChild(script)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We can intercept the <code>code.tidio.co</code> resource and slow it down using the <a href="https://on.cypress.io/intercept">cy.intercept</a> command</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;by returning a promise&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;https://code.tidio.co/*.js&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span></span><br><span class="line">    Cypress.Promise.delay(<span class="number">3000</span>).then(<span class="function">() =&gt;</span> req.continue()),</span><br><span class="line">  ).as(<span class="string">&#x27;tidio&#x27;</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.wait(<span class="string">&#x27;@tidio&#x27;</span>)</span><br><span class="line">  <span class="comment">// by now the JS should have loaded</span></span><br><span class="line">  cy.get(<span class="string">&#x27;#open-chat&#x27;</span>).click()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test waits for the network resource to finish before clicking the button.</p><p><img src="../images/3rd-party/slow-down.gif" alt="Waiting for the slowed down network request to return"></p><p>We can shorten the intercept command by returning a delayed promise without anything. This will make Cypress think you are making a spy, thus the request will continue to the server.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// slows down the network request by 3 seconds</span></span><br><span class="line">cy.intercept(<span class="string">&#x27;https://code.tidio.co/*.js&#x27;</span>, <span class="function">() =&gt;</span></span><br><span class="line">  Cypress.Promise.delay(<span class="number">3000</span>),</span><br><span class="line">).as(<span class="string">&#x27;tidio&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Works the same was as <code>req.continue()</code> above.</p><h2><span id="wait-for-3rd-party-initialization">Wait for 3rd party initialization</span></h2><p>Even if the JavaScript is returned, does not mean it is ready to work - it might require additional code to be loaded, DOM elements to be created, etc. The application is using <code>window.tidioChatApi</code> object - let&#39;s make our test wait for that object to be ready before clicking the button.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;waits for the chat object to be created&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;https://code.tidio.co/*.js&#x27;</span>, <span class="function">() =&gt;</span></span><br><span class="line">    Cypress.Promise.delay(<span class="number">3000</span>),</span><br><span class="line">  ).as(<span class="string">&#x27;tidio&#x27;</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// wait for the chat object to be created</span></span><br><span class="line">  <span class="comment">// before clicking on the button</span></span><br><span class="line">  <span class="comment">// https://on.cypress.io/its</span></span><br><span class="line">  <span class="comment">// we increase the timeout, because the network request</span></span><br><span class="line">  <span class="comment">// is slowed down by 3 seconds, leaving very little time</span></span><br><span class="line">  <span class="comment">// for the the library to load and start working</span></span><br><span class="line">  cy.window().its(<span class="string">&#x27;tidioChatApi&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">6000</span> &#125;)</span><br><span class="line">  cy.get(<span class="string">&#x27;#open-chat&#x27;</span>).click()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test waits more precisely than the test that simply waited for the network request using <code>cy.wait(&#39;@tidio&#39;)</code> and you can see it from the recording - it actually opens the browser widget!</p><p><img src="../images/3rd-party/wait-for-property.gif" alt="Waiting for the window property to exist"></p><h2><span id="confirm-the-method-was-called">Confirm the method was called</span></h2><p>Now let&#39;s confirm the application calls the method <code>tidioChatApi.open()</code>. We need to create a spy before clicking the button. We get to the method to spy on using the same <code>cy.window().its(...)</code> commands as above.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;calls chat open method&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// get the window.tidioChatApi object</span></span><br><span class="line">  cy.window()</span><br><span class="line">    .its(<span class="string">&#x27;tidioChatApi&#x27;</span>)</span><br><span class="line">    <span class="comment">// spy on tidioChatApi.open method call</span></span><br><span class="line">    .then(<span class="function">(<span class="params">tidioChatApi</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.spy(tidioChatApi, <span class="string">&#x27;open&#x27;</span>).as(<span class="string">&#x27;open&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// click on the button</span></span><br><span class="line">  cy.get(<span class="string">&#x27;#open-chat&#x27;</span>).click()</span><br><span class="line">  <span class="comment">// confirm the spy was called once without arguments</span></span><br><span class="line">  cy.get(<span class="string">&#x27;@open&#x27;</span>).should(<span class="string">&#x27;be.calledOnceWithExactly&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The video shows the application does in fact call the method without any arguments.</p><p><img src="../images/3rd-party/spy.png" alt="Spy on the open call the application makes"></p><h2><span id="call-open-from-the-test">Call open from the test</span></h2><p>We can even call the <code>open()</code> method ourselves from the test if necessary - what I call <a href="https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/">app action</a> and which is a unique property of the Cypress tests.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;opens the chat from the test code&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// wait for the chat object to be created</span></span><br><span class="line">  <span class="comment">// and then invoke a method on it</span></span><br><span class="line">  <span class="comment">// https://on.cypress.io/invoke</span></span><br><span class="line">  cy.window().its(<span class="string">&#x27;tidioChatApi&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">10000</span> &#125;).invoke(<span class="string">&#x27;open&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/3rd-party/invoke-open.gif" alt="Call 3rd party method from the test"></p><h2><span id="subscribe-to-events">Subscribe to events</span></h2><p>What if we let the application call the 3rd party chat methods, but subscribe from the test runner to the <a href="https://docs.tidio.com/docs/listeners_events">events it delivers</a>? Sure thing:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;delivers the ready event&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.window().its(<span class="string">&#x27;tidioChatApi&#x27;</span>).invoke(<span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;ready&#x27;</span>, cy.stub().as(<span class="string">&#x27;ready&#x27;</span>))</span><br><span class="line">  cy.get(<span class="string">&#x27;@ready&#x27;</span>).should(<span class="string">&#x27;be.called&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/3rd-party/ready-event.gif" alt="The test confirms the chat widget sends the &quot;ready&quot; event"></p><p><strong>Tip:</strong> for more <code>cy.spy</code> and <code>cy.stub</code> examples, see my <a href="https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html">Spies, Stubs, and Clock</a> page.</p><h2><span id="see-also">See also</span></h2><p>I have recorded several videos showing how to deal with 3rd party JavaScript code based on this chat application. Take a look at</p><ul><li><a href="https://youtu.be/MzCACth7qLE">Slow Down And Wait For 3rd Party JavaScript To Load</a></li><li><a href="https://youtu.be/5SBjkrKwhIA">Spy On The Application Calling 3rd Party Library Code</a></li><li><a href="https://youtu.be/PRpuE2DXRlQ">Cypress Dashboard, Reusing GitHub Workflows, Flake Detection, And Test Retries</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s take a look at an application that uses 3rd party script, like a chat widget. Here is my site with the Tidio widget opened:&lt;/p&gt;
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
</feed>
