<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Better world by better software</title>
  
  <subtitle>Gleb Bahmutov PhD</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://glebbahmutov.com/blog/"/>
  <updated>2022-07-23T11:58:56.407Z</updated>
  <id>https://glebbahmutov.com/blog/</id>
  
  <author>
    <name>Gleb Bahmutov</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Emulate Media In Cypress Tests</title>
    <link href="https://glebbahmutov.com/blog/cypress-emulate-media/"/>
    <id>https://glebbahmutov.com/blog/cypress-emulate-media/</id>
    <published>2022-07-23T04:00:00.000Z</published>
    <updated>2022-07-23T11:58:56.407Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="the-application">The application</span></h2><p>Let&#39;s say our application has different styles depending on the media and the user&#39;s current <code>prefers-color-scheme</code> setting. In my example, the HTML page is normally uses the black text on the white background. If the user has <code>prefers-color-scheme: dark</code> setting, the page uses cyan on black colors to show the text.</p><blockquote class="pullquote"><p>üéÅ You can find the source code for this blog post in the repo <a href="https://github.com/bahmutov/cypress-emulate-media">bahmutov&#x2F;cypress-emulate-media</a>.</p></blockquote><figure class="highlight html"><figcaption><span>public/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>cypress-emulate-media<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./style.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">      Lorem ipsum dolor sit amet, ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><figcaption><span>public/style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2rem</span> <span class="number">4rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* default color theme */</span></span><br><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">prefers-color-scheme</span>: dark) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#d0d</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">prefers-color-scheme</span>: light) &#123;</span><br><span class="line">  <span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/emulate/light.png" alt="The page shown in the browser that prefers the light color scheme"></p><h2><span id="emulate-color-scheme-using-the-chrome-devtools">Emulate color scheme using the Chrome DevTools</span></h2><p>The simplest way to see how the page looks with the <code>prefers-color-scheme: dark</code> is to open the browser DevTools (I am using Chrome), and run the command &quot;Emulate CSS prefers-color-scheme ...&quot;</p><p><img src="../images/emulate/emulate.png" alt="Pick the DevTools command to emulate the dark color theme"></p><p>The page switches to use its dark media CSS styles</p><p><img src="../images/emulate/dark.png" alt="The page shown in the browser that prefers the dark color scheme"></p><p>How do we control the CSS media from a Cypress test?</p><h2><span id="devtools-automation">DevTools automation</span></h2><p>Cypress has a built-in DevTools automation channel as I described in the <a href="/blog/cypress-automation/" title="Cypress Automation">Cypress Automation</a> blog post. If you know that it is possible to execute a command from the DevTools, then you can find the actual command using the <a href="https://chromedevtools.github.io/devtools-protocol">Chrome Debugger Protocol site</a>. I have found the <code>Emulation</code> commands that has what we need.</p><p><img src="../images/emulate/emulation.png" alt="The Emulation DevTools protocol commands"></p><p><img src="../images/emulate/set-media.png" alt="Emulation.setEmulatedMedia command"></p><p>Let&#39;s use it in our test</p><figure class="highlight js"><figcaption><span>cypress/e2e/dark.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;prefers the dark color scheme&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">wrap</span>(</span><br><span class="line">    <span class="title class_">Cypress</span>.<span class="title function_">automation</span>(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">command</span>: <span class="string">&#x27;Emulation.setEmulatedMedia&#x27;</span>,</span><br><span class="line">      <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">media</span>: <span class="string">&#x27;page&#x27;</span>,</span><br><span class="line">        <span class="attr">features</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;prefers-color-scheme&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="string">&#x27;dark&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Success!</p><p><img src="../images/emulate/dark.cy.png" alt="The Cypress web test running using the dark color preference"></p><p><strong>Tip:</strong> I use <code>cy.wrap(...)</code> around the Promise-returning <code>Cypress.automation</code> call to make all other Cypress commands like <code>cy.visit</code> wait until the <code>Emulation.setEmulatedMedia</code> command has finished. See my <a href="https://glebbahmutov.com/cypress-examples/commands/misc.html"><code>cy.wrap</code> examples</a>.</p><h2><span id="confirm-the-applied-css">Confirm the applied CSS</span></h2><p>Let&#39;s make sure the actual dark background color is used by the page. We can grab the DOM element and ask the <code>window</code> object to give us the computed CSS property.</p><figure class="highlight js"><figcaption><span>cypress/e2e/dark.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;prefers the dark color scheme&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">wrap</span>(</span><br><span class="line">    <span class="title class_">Cypress</span>.<span class="title function_">automation</span>(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">command</span>: <span class="string">&#x27;Emulation.setEmulatedMedia&#x27;</span>,</span><br><span class="line">      <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">media</span>: <span class="string">&#x27;page&#x27;</span>,</span><br><span class="line">        <span class="attr">features</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;prefers-color-scheme&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="string">&#x27;dark&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.text&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">$el</span>) =&gt;</span> <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>($el[<span class="number">0</span>]).<span class="property">backgroundColor</span>)</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;rgb(0, 0, 0)&#x27;</span>) <span class="comment">// black color!</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The <code>.then(($el) =&gt; window.getComputedStyle($el[0]).backgroundColor)</code> code is a little unwieldy. Let&#39;s make a utility function to get us the computed style by name.</p><figure class="highlight js"><figcaption><span>cypress/e2e/utils.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// use Lodash _.camelCase to support both &quot;backgroundColor&quot; and &quot;background-color&quot;</span></span><br><span class="line"><span class="keyword">const</span> &#123; camelCase &#125; = <span class="title class_">Cypress</span>.<span class="property">_</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getComputedProperty</span> = (<span class="params">property</span>) =&gt; <span class="function">(<span class="params">$el</span>) =&gt;</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>($el[<span class="number">0</span>])[<span class="title function_">camelCase</span>(property)]</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/e2e/dark.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getComputedProperty &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;prefers the dark color scheme&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">wrap</span>(</span><br><span class="line">    <span class="title class_">Cypress</span>.<span class="title function_">automation</span>(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">command</span>: <span class="string">&#x27;Emulation.setEmulatedMedia&#x27;</span>,</span><br><span class="line">      <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">media</span>: <span class="string">&#x27;page&#x27;</span>,</span><br><span class="line">        <span class="attr">features</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;prefers-color-scheme&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="string">&#x27;dark&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.text&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="title function_">getComputedProperty</span>(<span class="string">&#x27;background-color&#x27;</span>))</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;rgb(0, 0, 0)&#x27;</span>) <span class="comment">// black color!</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Nice.</p><h2><span id="confirm-the-light-color-scheme">Confirm the light color scheme</span></h2><p>Let&#39;s have a spec that explicitly sets the light color theme preference and verifies the colors.</p><figure class="highlight js"><figcaption><span>cypress/e2e/light.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getComputedProperty &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;uses the light color scheme&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">wrap</span>(</span><br><span class="line">    <span class="title class_">Cypress</span>.<span class="title function_">automation</span>(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">command</span>: <span class="string">&#x27;Emulation.setEmulatedMedia&#x27;</span>,</span><br><span class="line">      <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">media</span>: <span class="string">&#x27;page&#x27;</span>,</span><br><span class="line">        <span class="attr">features</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;prefers-color-scheme&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="string">&#x27;light&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.text&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="title function_">getComputedProperty</span>(<span class="string">&#x27;background-color&#x27;</span>))</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;rgb(255, 255, 255)&#x27;</span>) <span class="comment">// white!</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.text&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="title function_">getComputedProperty</span>(<span class="string">&#x27;color&#x27;</span>))</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;rgb(85, 85, 85)&#x27;</span>) <span class="comment">// #333!</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/emulate/light-test.png" alt="The Cypress web test running using the light color preference"></p><h2><span id="warning">Warning</span></h2><p>Once you change the page media preferences, it stays that way. The Cypress Time-Traveling Debugger does NOT restore the media preferences when you hover over the command DOM snapshots. Thus if you have different tests in the same spec file, or switch the media preferences in the same test, it will not show the correct CSS styles when you inspect the commands.</p><figure class="highlight js"><figcaption><span>cypress/e2e/light-and-dark.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getComputedProperty &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;uses the light color scheme then the dark&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">wrap</span>(</span><br><span class="line">    <span class="title class_">Cypress</span>.<span class="title function_">automation</span>(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">command</span>: <span class="string">&#x27;Emulation.setEmulatedMedia&#x27;</span>,</span><br><span class="line">      <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">media</span>: <span class="string">&#x27;page&#x27;</span>,</span><br><span class="line">        <span class="attr">features</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;prefers-color-scheme&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="string">&#x27;light&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.text&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="title function_">getComputedProperty</span>(<span class="string">&#x27;background-color&#x27;</span>))</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;rgb(255, 255, 255)&#x27;</span>) <span class="comment">// white!</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.text&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="title function_">getComputedProperty</span>(<span class="string">&#x27;color&#x27;</span>))</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;rgb(85, 85, 85)&#x27;</span>) <span class="comment">// #333!</span></span><br><span class="line">    .<span class="title function_">wait</span>(<span class="number">1000</span>) <span class="comment">// for demo</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span></span><br><span class="line">      <span class="title class_">Cypress</span>.<span class="title function_">automation</span>(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">command</span>: <span class="string">&#x27;Emulation.setEmulatedMedia&#x27;</span>,</span><br><span class="line">        <span class="attr">params</span>: &#123;</span><br><span class="line">          <span class="attr">media</span>: <span class="string">&#x27;page&#x27;</span>,</span><br><span class="line">          <span class="attr">features</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;prefers-color-scheme&#x27;</span>,</span><br><span class="line">              <span class="attr">value</span>: <span class="string">&#x27;dark&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">    )</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.text&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="title function_">getComputedProperty</span>(<span class="string">&#x27;background-color&#x27;</span>))</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;rgb(0, 0, 0)&#x27;</span>) <span class="comment">// black color!</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes. But when I hover over the commands, the page CSS Media preference is not restored, and thus I see the last dark color them CSS.</p><p><img src="../images/emulate/no-dom.gif" alt="The Cypress time-traveling debugger still uses the last media CSS"></p><p>So just watch out for that.</p><h2><span id="use-cypress-cdp">Use cypress-cdp</span></h2><p>You can simply Cypress automation commands and avoid the extra <code>cy.wrap</code> and <code>cy.then(() =&gt; Cypress.automation(...))</code> code by using my plugin <a href="https://github.com/bahmutov/cypress-cdp">cypress-cdp</a>. I will show how to use <code>cy.CDP</code> to emulate the color theme preference in my <a href="https://cypress.tips/courses/cypress-plugins">Cypress Plugins course</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;the-application&quot;&gt;The application&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Let&amp;#39;s say our application has different styles depending on the media and t
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Convert Cypress Specs from JavaScript to TypeScript</title>
    <link href="https://glebbahmutov.com/blog/cypress-js-to-ts/"/>
    <id>https://glebbahmutov.com/blog/cypress-js-to-ts/</id>
    <published>2022-07-19T04:00:00.000Z</published>
    <updated>2022-07-29T14:35:30.466Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s say you have a project with Cypress end-to-end tests. You might be thinking of converting the specs from JavaScript to TypeScript language. This blog post describes how I have converted one such project in my repo <a href="https://github.com/bahmutov/test-todomvc-using-app-actions">bahmutov&#x2F;test-todomvc-using-app-actions</a>.</p><!-- toc --><ul><li><a href="#step-1-decide-why-you-want-to-convert">Step 1: Decide why you want to convert</a></li><li><a href="#step-2-configure-the-intelligent-code-completion">Step 2: Configure the intelligent code completion</a></li><li><a href="#step-3-use-jsconfig-file">Step 3: use jsconfig file</a></li><li><a href="#step-4-use-jsdoc-comments-to-give-types">Step 4: use JSDoc comments to give types</a></li><li><a href="#step-5-start-checking-types">Step 5: start checking types</a></li><li><a href="#step-6-check-types-using-typescript">Step 6: Check types using TypeScript</a></li><li><a href="#step-7-check-types-on-ci">Step 7: Check types on CI</a></li><li><a href="#step-8-extend-the-globals-types">Step 8: Extend the globals types</a></li><li><a href="#step-9-turn-the-screws">Step 9: Turn the screws</a></li><li><a href="#step-10-move-specs-to-typescript">Step 10: Move specs to TypeScript</a></li><li><a href="#step-11-fix-the-ts-lint-errors">Step 11: Fix the TS lint errors</a></li><li><a href="#step-12-use-json-fixtures">Step 12: Use JSON fixtures</a><ul><li><a href="#cast-data-after-loading-using-cyfixture-command">Cast data after loading using cy.fixture command</a></li><li><a href="#import-json-fixtures-and-cast-the-type">Import JSON fixtures and cast the type</a></li><li><a href="#cast-yielded-value-from-cyfixture">Cast yielded value from cy.fixture</a></li></ul></li><li><a href="#my-thoughts">My thoughts</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><!-- VSCode color theme used to create the screenshots is "Material minimal dark" --><h2><span id="step-1-decide-why-you-want-to-convert">Step 1: Decide why you want to convert</span></h2><p>The most important step is to decide <em>what</em> benefits you are seeking from the conversion. Does the team use TS to code and is used to its static types? Do you want to see the intelligent code completion when coding Cypress tests? Do you want to share code and types between the application and the tests? Do you plan to check the static types in the spec files on CI? During pre-commit hook?</p><p>Conversion might take some time and effort, so it is better be worth it. I mostly use just JavaScript Cypress specs together with <a href="https://slides.com/bahmutov/ts-without-ts">JSDoc types</a> for simplicity. But I definitely see why someone might want to use TS to code the E2E tests. Luckily, it is not &quot;either &#x2F; or&quot; proposition. You can bring the static types into your Cypress project gradually and immediately enjoy some of the static typing benefits. Then you can progress through the rest of the code at your own pace.</p><h2><span id="step-2-configure-the-intelligent-code-completion">Step 2: Configure the intelligent code completion</span></h2><p>The first benefit of static types in Cypress specs is the intelligent code completion (IntelliSense) that pops up when you type Cypress <code>cy.*</code> commands, like <code>cy.visit</code>, etc. Without IntelliSense, when you hover over the <code>cy.visit</code> command, all you see is &quot;any&quot;. Your code editor cannot help you write this or any other Cypress command (pun intended)</p><p><img src="../images/cypress-js-to-ts/no-intellisense.png" alt="No IntelliSense for you, Cypress globals"></p><p>You can read the <a href="https://on.cypress.io/intellisense">Cypress IntelliSense guide</a> on how to set it up. In most modern code editors, I recommend starting with a special comment that tells the code editor to load TypeScript definitions for the global objects <code>cy</code> and <code>Cypress</code>.</p><figure class="highlight js"><figcaption><span>cypress/e2e/adding-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br></pre></td></tr></table></figure><p>Voila - the code editor goes to <code>node_modules/cypress/package.json</code> file, finds the <code>&quot;types&quot;: &quot;types&quot;</code> property, and loads the TypeScript file <code>node_modules/cypress/types/index.d.ts</code> file that describes what <code>Cypress</code> and &#96;cy are. Boom, your editor is helping you:</p><p><img src="../images/cypress-js-to-ts/intellisense.png" alt="My VSCode gives me help every time I type a Cypress command or assertion"></p><h2><span id="step-3-use-jsconfig-file">Step 3: use jsconfig file</span></h2><p>Instead of adding the <code>reference types</code> comment to each JavaScript spec, we could use a <code>jsconfig.json</code> file at the root of our project. At least in VSCode editor this file can tell which types to load for all files.</p><figure class="highlight json"><figcaption><span>jsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;cypress&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;cypress/**/*.js&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Each Cypress JS spec file now automatically knows the <code>cy</code>, <code>Cypress</code>, etc.</p><p>You can watch me explaining the <code>jsconfig.json</code> file in the video <a href="https://www.youtube.com/watch?v=XIaA8k7TOA4">Load Global Cypress Types In VSCode Using jsconfig.json File</a> below:</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/XIaA8k7TOA4" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>I also explain using <code>jsconfig.json</code> file to load Cypress and 3rd party plugin types in my course <a href="https://cypress.tips/courses/cypress-plugins">Cypress Plugins</a>.</p><h2><span id="step-4-use-jsdoc-comments-to-give-types">Step 4: use JSDoc comments to give types</span></h2><p>While coding our specs in JavaScript we use local variables, Cypress commands, etc. The code editor does not know the types of the variables we use. For example, the <code>title</code> variable in the below spec shows up as <code>any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> title</span><br><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">title</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> &#123;</span><br><span class="line">  title = t</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-js-to-ts/title-any.png" alt="VSCode shows the title variable having type any"></p><p>We can keep the specs in JavaScript and add a <a href="https://docs.joshuatz.com/cheatsheets/js/jsdoc/">JSDoc type comment</a> to tell our code editor what we intend for it to be.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type</span> string */</span></span><br><span class="line"><span class="keyword">let</span> title</span><br><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">title</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> &#123;</span><br><span class="line">  title = t</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-js-to-ts/title-string.png" alt="VSCode shows the title variable having type any"></p><p>Ok, looks good. I use JSDoc types a lot, and I must admit they become cumbersome at some point. Even forcing a variable to be of a certain type is non-trivial and looks plain ugly. For example, to tell the code editor that <code>something</code> is really a string we need to cast it through an <code>unknown</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">any</span>&#125; */</span></span><br><span class="line"><span class="keyword">let</span> something;</span><br><span class="line"><span class="comment">// success is a string</span></span><br><span class="line"><span class="keyword">const</span> success = <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">string</span>&#125; */</span> (<span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">unknown</span>&#125; */</span> (something))</span><br></pre></td></tr></table></figure><p>Ughh.</p><h2><span id="step-5-start-checking-types">Step 5: start checking types</span></h2><p>Once your code editor &quot;knows&quot; the Cypress types, you can start checking them as you edit the files by adding <code>// @ts-check</code> directive. Let&#39;s say we pretend the <code>title</code> variable is a number, while the <a href="https://on.cypress.io/title">cy.title</a> command yields a string.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type</span> number */</span></span><br><span class="line"><span class="keyword">let</span> title</span><br><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">title</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> &#123;</span><br><span class="line">  title = t</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>VSCode by default does NOT warn us about the type mismatch.</p><p><img src="../images/cypress-js-to-ts/no-warn.png" alt="Even with types, the code editor does not warn us about string to number assignment"></p><p>To tell the code editor to warn us on type mismatch, we can add a special comment <code>// @ts-check</code> to our JavaScript files. The comment must come before any regular code.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// @ts-check</span><br><span class="line">// any imports</span><br><span class="line">/** @type number */</span><br><span class="line">let title</span><br><span class="line">cy.visit(&#x27;/&#x27;)</span><br><span class="line">cy.title().then((t) =&gt; &#123;</span><br><span class="line">  title = t &lt;=== a type error</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-js-to-ts/warn.png" alt="VSCode shows that we have a type error"></p><h2><span id="step-6-check-types-using-typescript">Step 6: Check types using TypeScript</span></h2><p>If we are checking the types while the code editor is running, let&#39;s check it from the command line and from the CI. Let&#39;s install TypeScript compiler</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D typescript</span><br><span class="line">+ typescript@4.7.4</span><br></pre></td></tr></table></figure><p>Add the <code>lint</code> command to the <code>package.json</code> file</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc --noEmit --pretty --allowJs cypress/**/*.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Let&#39;s run the <code>lint</code> step from the command line to find any mistakes with <code>npm run lint</code></p><p><img src="../images/cypress-js-to-ts/lint.png" alt="Linting JavaScript specs from the command line using TypeScript compiler"></p><p><strong>Tip:</strong> only the JS files with <code>// @ts-check</code> comment are checked, thus you can introduce type checking gradually into your project.</p><h2><span id="step-7-check-types-on-ci">Step 7: Check types on CI</span></h2><p>Let&#39;s run the types lint step and the sanity tests on CI using <a href="https://github.com/cypress-io/github-action">Cypress GitHub Action</a></p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">tests:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="comment"># Install NPM dependencies, cache them correctly</span></span><br><span class="line">      <span class="comment"># and run all Cypress tests</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># check the spec types</span></span><br><span class="line">          <span class="attr">build:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">lint</span></span><br><span class="line">          <span class="comment"># start the application before running Cypress</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="comment"># pass the grep tag to run only some tests</span></span><br><span class="line">          <span class="comment"># https://github.com/cypress-io/cypress-grep</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">grepTags=@sanity</span></span><br></pre></td></tr></table></figure><p>The CI service catches types mismatch in our specs</p><p><img src="../images/cypress-js-to-ts/ci.png" alt="Checking types before running the tests on GitHub Actions"></p><h2><span id="step-8-extend-the-globals-types">Step 8: Extend the globals types</span></h2><p>If your Cypress project is using any custom commands, like <code>cy.addTodo</code> or extends the <code>window</code> object by storing and passing custom properties, you might need to extend the global types to pass the types checks. For adding types for custom commands, see my blog post <a href="/blog/writing-custom-cypress-command/" title="Writing a Custom Cypress Command">Writing a Custom Cypress Command</a>. In our project, the application sets the <code>window.model</code> property when running inside a Cypress test.</p><figure class="highlight js"><figcaption><span>src/app.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> model = <span class="keyword">new</span> app.<span class="title class_">TodoModel</span>(<span class="string">&#x27;react-todos&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">Cypress</span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">model</span> = model</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This allows the test to grab the <code>window.model</code> and use the application&#39;s code to quickly execute application actions, giving it <a href="https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/">superpowers</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// spy on model.inform method called by the app</span></span><br><span class="line"><span class="comment">// when adding todos</span></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;calls inform&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">window</span>()</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;model&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.an&#x27;</span>, <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">model</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">spy</span>(model, <span class="string">&#x27;inform&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;inform&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="title function_">addDefaultTodos</span>()</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@inform&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>To make sure our types &quot;know&quot; what the <code>cy.window().its(&#39;model&#39;)</code> yields, we need to extends the <code>window</code> type definition. We can create a file <code>cypress/e2e/model.d.ts</code> that just describes the new types</p><figure class="highlight ts"><figcaption><span>cypress/e2e/model.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Describes the TodoMVC model instance.</span></span><br><span class="line"><span class="comment">// Ideally it would come from the application,</span></span><br><span class="line"><span class="comment">// but in our example app does not have types,</span></span><br><span class="line"><span class="comment">// so we write method signatures ourselves.</span></span><br><span class="line"><span class="comment">// From out app actions we only use a couple of methods.</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">TodoModel</span> &#123;</span><br><span class="line">  <span class="attr">todos</span>: <span class="built_in">unknown</span>[]</span><br><span class="line">  <span class="title function_">addTodo</span>(...<span class="attr">todos</span>: <span class="built_in">string</span>[])</span><br><span class="line">  <span class="title function_">toggle</span>(<span class="attr">item</span>: <span class="built_in">unknown</span>)</span><br><span class="line">  <span class="title function_">inform</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// During tests there we set &quot;window.model&quot; property</span></span><br><span class="line"><span class="comment">// now cy.window() returns Window instance with</span></span><br><span class="line"><span class="comment">// the &quot;model&quot; property that has TodoModel interface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Window</span> &#123;</span><br><span class="line">  <span class="attr">model</span>: <span class="title class_">TodoModel</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To use this file during code editor&#39;s type checks include it in the list of files in the <code>jsconfig.json</code> file</p><figure class="highlight json"><figcaption><span>jsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;cypress&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;cypress/**/*.js&quot;</span><span class="punctuation">,</span> <span class="string">&quot;cypress/e2e/model.d.ts&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="../images/cypress-js-to-ts/model.png" alt="window.model now has the correct type"></p><h2><span id="step-9-turn-the-screws">Step 9: Turn the screws</span></h2><p>Now that we have some initial types and are linting them, let&#39;s make the types stricter. For the code editor, you can turn the strict type checks using the <code>jsconfig.json</code> file</p><figure class="highlight js"><figcaption><span>jsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;types&quot;</span>: [<span class="string">&quot;cypress&quot;</span>],</span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;include&quot;</span>: [<span class="string">&quot;cypress/**/*.js&quot;</span>, <span class="string">&quot;cypress/e2e/model.d.ts&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> if you see too many errors, turn the <code>strict</code> option off and instead turn the checks like <code>noImplicitAny</code>, etc one by one.</p><p>For linting types from the command line, add the option to the NPM script command</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc --noEmit --pretty --allowJs --strict cypress/**/*.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="../images/cypress-js-to-ts/lint-strict.png" alt="Linting the types using strict setting"></p><p>Some of the errors are easy to fix. For example, the <code>clickFilter</code> function just needs the <code>@param</code> type in its existing JSDoc comment. If we add <code>@param &#123;string&#125; name</code> the TS error goes away.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Little utility function to click on a given filter on the page.</span></span><br><span class="line"><span class="comment"> * We are testing routing links, so these tests go through the DOM.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">name</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clickFilter</span> = (<span class="params">name</span>) =&gt; cy.<span class="title function_">get</span>(<span class="string">&#x27;.filters&#x27;</span>).<span class="title function_">contains</span>(name).<span class="title function_">click</span>()</span><br></pre></td></tr></table></figure><p>Similarly, we can add parameter types to the page object methods</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">todo</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">createTodo</span>(<span class="params">todo</span>) &#123;</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;.new-todo&#x27;</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;).<span class="title function_">type</span>(<span class="string">`<span class="subst">$&#123;todo&#125;</span>&#123;enter&#125;`</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; k Index of the todo to toggle</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">toggle</span>(<span class="params">k</span>) &#123;</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list li&#x27;</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;).<span class="title function_">eq</span>(k).<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>).<span class="title function_">check</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TypeScript compiler is even smart enough to figure out the runtime type checks. For example, for optional <code>k</code> parameter, the <code>if</code> branch cannot have undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns either all todo items on the page,</span></span><br><span class="line"><span class="comment"> * or just a given one (zero index)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number|undefined</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_">todos</span>(<span class="params">k</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (k !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="comment">// k can only be a number here</span></span><br><span class="line">    <span class="keyword">return</span> cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list li&#x27;</span>).<span class="title function_">eq</span>(k)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list li&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Finally, for anything complicated, but working in reality, I just ignore the error using the <code>@ts-ignore</code> directive.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">addTodos</span> = (<span class="params">...todos</span>) =&gt; &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>You can ignore specific errors instead of ignoring all possible TS errors in the next line using TS error codes like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-ignore TS6133</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>If the spec file has too many TS errors to be fixed right away, you can tell the TS compiler to ignore it completely using the <code>// @ts-nocheck</code> comment at the top:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO fix the types later</span></span><br><span class="line"><span class="comment">// @ts-nocheck</span></span><br></pre></td></tr></table></figure><h2><span id="step-10-move-specs-to-typescript">Step 10: Move specs to TypeScript</span></h2><ol><li>Add the <code>.ts</code> files to the E2E spec pattern in the <code>cypress.config.js</code> file</li></ol><figure class="highlight js"><figcaption><span>cypress.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">e2e</span>: &#123;</span><br><span class="line">    <span class="attr">baseUrl</span>: <span class="string">&#x27;http://localhost:8888&#x27;</span>,</span><br><span class="line">    <span class="attr">excludeSpecPattern</span>: [<span class="string">&#x27;*.page.js&#x27;</span>, <span class="string">&#x27;utils.js&#x27;</span>, <span class="string">&#x27;*.d.ts&#x27;</span>],</span><br><span class="line">    <span class="attr">specPattern</span>: <span class="string">&#x27;cypress/e2e/**/*spec.&#123;js,ts&#125;&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>Take a spec and change its file extension to <code>.ts</code>. For example, I have renamed <code>adding-spec.js</code> to <code>adding-spec.ts</code></li></ol><p><img src="../images/cypress-js-to-ts/ts-spec.png" alt="TypeScript spec file"></p><ol start="3"><li>Add the TS files to the list of included files in <code>jsconfig.json</code></li></ol><figure class="highlight json"><figcaption><span>jsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;cypress&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;cypress/**/*.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;cypress/e2e/model.d.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;cypress/e2e/*spec.ts&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>Click on the TS spec file. You should see an error message ü§Ø</li></ol><p><img src="../images/cypress-js-to-ts/ts-error.png" alt="Trying to run the renamed TS spec leads to an error"></p><ol start="5"><li>Rename the file <code>jsconfig.json</code> to <code>tsconfig.json</code> and add the options to allow JavaScript and do not emit JS</li></ol><figure class="highlight json"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;cypress&quot;</span><span class="punctuation">,</span> <span class="string">&quot;cypress-grep&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noEmit&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;cypress/e2e/model.d.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;cypress/e2e/*spec.ts&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;cypress/e2e/adding-spec.ts&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Note:</strong> I could not make the <code>tsconfig.json</code> work without listing at least one spec in its <code>files</code> list. Weird.</p><p>Now we can type anything in our spec files using &quot;normal&quot; TypScript, which is very convenient</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">title</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> &#123;</span><br><span class="line">  title = t</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You can remove some of the JSDoc typings and use &quot;normal&quot; argument variable declarations</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Little utility function to click on a given filter on the page.</span></span><br><span class="line"><span class="comment"> * We are testing routing links, so these tests go through the DOM.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clickFilter</span> = (<span class="params">name: <span class="built_in">string</span></span>) =&gt;</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.filters&#x27;</span>).<span class="title function_">contains</span>(name).<span class="title function_">click</span>()</span><br></pre></td></tr></table></figure><p>You can now move more and more spec files to TypeScript and ensure they all have sound types.</p><h2><span id="step-11-fix-the-ts-lint-errors">Step 11: Fix the TS lint errors</span></h2><p>Once the specs move to TypeScript, you can adjust the lint command in the <code>package.json</code> file</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc --noEmit --pretty&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>The command becomes stricter, as TypeScript now validates using only the settings specified in the <code>tsconfig.json</code> which seems to be stricter than using the <code>jsconfig.json</code> file.</p><p><img src="../images/cypress-js-to-ts/more-ts-lint.png" alt="More types errors discovered"></p><p>We can fix the top three errors by declaring the method return types in the <code>model.d.ts</code> file</p><figure class="highlight ts"><figcaption><span>model.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">TodoModel</span> &#123;</span><br><span class="line">  <span class="attr">todos</span>: <span class="built_in">unknown</span>[]</span><br><span class="line">  <span class="title function_">addTodo</span>(...<span class="attr">todos</span>: <span class="built_in">string</span>[]): <span class="built_in">void</span></span><br><span class="line">  <span class="title function_">toggle</span>(<span class="attr">item</span>: <span class="built_in">unknown</span>): <span class="built_in">void</span></span><br><span class="line">  <span class="title function_">inform</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s fix the 3rd party cryptic errors like these ones</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">node_modules/cypress/types/bluebird/index.d.ts:795:32 - error TS2304: Cannot find name &#x27;IterableIterator&#x27;.</span><br><span class="line"></span><br><span class="line">795       generatorFunction: () =&gt; IterableIterator&lt;any&gt;,</span><br><span class="line">                                   ~~~~~~~~~~~~~~~~</span><br><span class="line"></span><br><span class="line">node_modules/cypress/types/chai/index.d.ts:850:49 - error TS2304: Cannot find name &#x27;ReadonlySet&#x27;.</span><br><span class="line"></span><br><span class="line">850         include&lt;T&gt;(haystack: ReadonlyArray&lt;T&gt; | ReadonlySet&lt;T&gt; | ReadonlyMap&lt;any, T&gt;, needle: T, message?: string): void;</span><br></pre></td></tr></table></figure><p>Let&#39;s tell our TS compiler that the spec is meant to run in the browser that supports modern JavaScript and has DOM APIs. We add the <code>lib</code> list to the <code>compilerOptions</code> object:</p><figure class="highlight json"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;cypress&quot;</span><span class="punctuation">,</span> <span class="string">&quot;cypress-grep&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;DOM&quot;</span><span class="punctuation">,</span> <span class="string">&quot;ES2015&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noEmit&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;cypress/e2e/*.ts&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;cypress/e2e/adding-spec.ts&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm run lint</span><br><span class="line"></span><br><span class="line">&gt; test-todomvc-using-app-actions@1.0.0 lint</span><br><span class="line">&gt; tsc --noEmit --pretty</span><br></pre></td></tr></table></figure><p>No more errors</p><h2><span id="step-12-use-json-fixtures">Step 12: Use JSON fixtures</span></h2><h3><span id="cast-data-after-loading-using-cyfixture-command">Cast data after loading using cy.fixture command</span></h3><p>Let&#39;s say we are using the JSON fixtures to put into the application. Our JSON file has an object with the list of todos.</p><figure class="highlight json"><figcaption><span>cypress/fixtures/todos.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;todos&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Write code&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;completed&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Pass the tests&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;completed&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>We can import the fixture file and grab its <code>todos</code> property.</p><figure class="highlight js"><figcaption><span>cypress/e2e/using-fixture-spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Use JSON fixture&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;adds todos following the fixture&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">fixture</span>(<span class="string">&#x27;todos.json&#x27;</span>)</span><br><span class="line">      .<span class="title function_">its</span>(<span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">      .<span class="title function_">should</span>(<span class="string">&#x27;be.an&#x27;</span>, <span class="string">&#x27;array&#x27;</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">todos</span>) =&gt;</span> &#123;</span><br><span class="line">        todos.<span class="title function_">forEach</span>(<span class="function">(<span class="params">todo, k</span>) =&gt;</span> &#123;</span><br><span class="line">          cy.<span class="title function_">get</span>(<span class="string">&#x27;input.new-todo&#x27;</span>).<span class="title function_">type</span>(todo.<span class="property">title</span> + <span class="string">&#x27;&#123;enter&#125;&#x27;</span>)</span><br><span class="line">          cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list li&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, k + <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">if</span> (todo.<span class="property">completed</span>) &#123;</span><br><span class="line">            cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list li&#x27;</span>).<span class="title function_">last</span>().<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">            cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list li&#x27;</span>).<span class="title function_">last</span>().<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Unfortunately, <code>cy.fixture</code> yields <code>Cypress.Chainable&lt;any&gt;</code>, which means the <code>todos</code> argument has <code>any</code> type.</p><p><img src="../images/cypress-js-to-ts/fixture1.png" alt="Data loaded using cy.fixture has type any"></p><p>We can fix the callback function by adding an explicit type to the argument. I will add an interface <code>Todo</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cy.<span class="title function_">fixture</span>(<span class="string">&#x27;todos.json&#x27;</span>)</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;be.an&#x27;</span>, <span class="string">&#x27;array&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">todos: Todo[]</span>) =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-js-to-ts/fixture2.png" alt="Adding type to the data loaded by the cy.fixture command"></p><p>We can move such common types to the <code>model.d.ts</code> and export what is necessary:</p><figure class="highlight ts"><figcaption><span>cypress/e2e/model.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>cypress/e2e/using-fixture-spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Todo</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./model&#x27;</span></span><br></pre></td></tr></table></figure><h3><span id="import-json-fixtures-and-cast-the-type">Import JSON fixtures and cast the type</span></h3><p>If our fixture data is static JSON, we could simply import the data in our specs. We need to allow TypeScript to resolve JSON files</p><figure class="highlight json"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>If we import the data into the TS spec, it gets whatever the type the compiler can infer. Thus I like creating another variable to cast the imported object.</p><figure class="highlight ts"><figcaption><span>cypress/e2e/import-fixture-spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Todo</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./model&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; todos &#125; <span class="keyword">from</span> <span class="string">&#x27;../fixtures/todos.json&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">initialTodos</span>: <span class="title class_">Todo</span>[] = todos</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Import JSON fixture&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;adds todos following the fixture&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    initialTodos.<span class="title function_">forEach</span>(<span class="function">(<span class="params">todo, k</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;input.new-todo&#x27;</span>).<span class="title function_">type</span>(todo.<span class="property">title</span> + <span class="string">&#x27;&#123;enter&#125;&#x27;</span>)</span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list li&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, k + <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">if</span> (todo.<span class="property">completed</span>) &#123;</span><br><span class="line">        cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list li&#x27;</span>).<span class="title function_">last</span>().<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">        cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list li&#x27;</span>).<span class="title function_">last</span>().<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3><span id="cast-yielded-value-from-cyfixture">Cast yielded value from cy.fixture</span></h3><p>In the code fragment below, we yield <code>any</code> from the <code>cy.fixture</code> command to the <code>cy.its</code> command, which yields <code>any</code> to the <code>.then()</code> callback. We know what <code>cy.fixture</code> loads, let&#39;s tell the compiler that. We know the JSON file has an object with &quot;todos&quot; property, and its value is a list of Todos. Let&#39;s tell the compiler that using the expression <code>cy.fixture&lt;&#123; todos: Todo[] &#125;&gt;</code>:</p><figure class="highlight ts"><figcaption><span>cypress/e2e/cast-fixture-spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Todo</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./model&#x27;</span></span><br><span class="line">cy.<span class="property">fixture</span>&lt;&#123; <span class="attr">todos</span>: <span class="title class_">Todo</span>[] &#125;&gt;(<span class="string">&#x27;todos.json&#x27;</span>)</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;be.an&#x27;</span>, <span class="string">&#x27;array&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">todos</span>) =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>If you inspect the commands after <code>cy.fixture</code>, you can see that <code>cy.its</code> for example yields the list of Todo objects, since it already &quot;knows&quot; the correct type of its subject. Nice.</p><p><img src="../images/cypress-js-to-ts/cast-fixture.png" alt="Adding type to the value yielded by the cy.fixture command makes the entire command chain correct"></p><h2><span id="my-thoughts">My thoughts</span></h2><p>At my Mercari US we are currently at Step 8. We use JavaScript + a few TypeScript definition files for our custom commands. We lint all spec files on CI and keep the lint step green. We probably should move to full TypeScript, as our fixtures and mock object become hard to type using JSDoc.</p><h2><span id="see-also">See also</span></h2><ul><li>my old blog post <a href="/blog/use-typescript-with-cypress/" title="Use TypeScript With Cypress">Use TypeScript With Cypress</a></li><li><a href="/blog/trying-typescript/" title="Trying TypeScript">Trying TypeScript</a></li><li>Cypress <a href="https://on.cypress.io/typescript">TypeScript docs</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s say you have a project with Cypress end-to-end tests. You might be thinking of converting the specs from JavaScript to TypeScri
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="typescript" scheme="https://glebbahmutov.com/blog/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>Cypress Cannot Add Out-Of-Band Commands</title>
    <link href="https://glebbahmutov.com/blog/cypress-out-of-band/"/>
    <id>https://glebbahmutov.com/blog/cypress-out-of-band/</id>
    <published>2022-07-15T04:00:00.000Z</published>
    <updated>2022-07-15T14:47:27.750Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="single-chain-of-commands">Single chain of commands</span></h2><p>Cypress test acts like a human user interacting with the web page. A human cannot click two buttons at once - the user can only do one action at a time. Thus the test runner always runs a single command at a time. A command has to fully finish before the next command starts. All commands are queued up at the start of the test, and then execute one by one.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;selector&#x27;</span>) <span class="comment">// first command</span></span><br><span class="line">  .<span class="title function_">find</span>(<span class="string">&#x27;another selector&#x27;</span>) <span class="comment">// second</span></span><br><span class="line">  .<span class="title function_">click</span>() <span class="comment">// third</span></span><br></pre></td></tr></table></figure><p>At the start of the test all commands are &quot;read&quot; and added to the queue</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Queue of commands</span><br><span class="line">1. GET &quot;selector&quot;</span><br><span class="line">2. - FIND &quot;another selector&quot;</span><br><span class="line">3. - CLICK</span><br></pre></td></tr></table></figure><p>Then the test starts running, reading the commands one by one from the queue and executing them.</p><blockquote class="pullquote"><p>üëÄ You can see the queue by using the plugin <a href="https://github.com/bahmutov/cypress-command-chain">cypress-command-chain</a>, read the blog post <a href="/blog/visualize-cypress-command-queue/" title="Visualize Cypress Command Queue">Visualize Cypress Command Queue</a>.</p></blockquote><h2><span id="dynamic-command-chain">Dynamic command chain</span></h2><p>A command can add other Cypress commands by inserting them into the command chain. For example, here is a <a href="https://on.cypress.io/conditional-testing">conditional test</a> that clicks on the element IF it finds the parent element:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;selector&#x27;</span>)</span><br><span class="line">  <span class="comment">// disable the built-in &quot;should exist&quot; assertion</span></span><br><span class="line">  .<span class="title function_">should</span>(<span class="title class_">Cypress</span>.<span class="property">_</span>.<span class="property">noop</span>)</span><br><span class="line">  .<span class="title function_">then</span>($el =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> ($el.<span class="property">length</span>) &#123;</span><br><span class="line">    cy.<span class="title function_">log</span>(<span class="string">&#x27;Found the element&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">wrap</span>($el)</span><br><span class="line">      .<span class="title function_">find</span>(<span class="string">&#x27;another selector&#x27;</span>)</span><br><span class="line">      .<span class="title function_">click</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Here is the command chain of known commands at the start of the test:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Queue of commands</span><br><span class="line">1. GET &quot;selector&quot;</span><br><span class="line">2. - THEN callback</span><br></pre></td></tr></table></figure><p>That&#39;s it. Cypress does not know what is inside the callback function yet. The test starts running, executes the <code>GET &quot;selector&quot;</code> command, and passes the jQuery object (which could be empty) to the &quot;THEN callback&quot; command. Cypress then adds new commands depending on the <code>if ($el.length)</code> condition. If there are no elements, it simply finishes the callback, completes the <code>THEN callback</code> commands and finishes the test. But if there is an element there, Cypress queues up the new commands:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Updated queue of commands</span><br><span class="line">1. GET &quot;selector&quot;   | done</span><br><span class="line">2. - THEN callback  | running</span><br><span class="line">3. LOG &quot;Found ...&quot;</span><br><span class="line">4. WRAP $el</span><br><span class="line">5. - FIND &quot;another selector&quot;</span><br><span class="line">6. - CLICK</span><br></pre></td></tr></table></figure><p>Cypress completes the &quot;THEN callback&quot; command and moves on to the next command in the queue &quot;LOG Found ...&quot;, etc.</p><h2><span id="out-of-band-commands">Out-of-band commands</span></h2><p>Cypress commands like &quot;THEN callback&quot; can add new commands to the queue. What about if some other test code tries to add a new command? For example, what if we do the following</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">wait</span>(<span class="number">10_000</span>) <span class="comment">// sleep 10 seconds</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;New command!&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">5_000</span>)</span><br></pre></td></tr></table></figure><p>You will get an error, Cypress does not know where this command is meant to join the queue.</p><p><img src="../images/out-of-band/out-of-band-error.png" alt="Cypress throws an error when trying to add an out-of-band command"></p><p>The same can happen when you try to add new commands from <code>Cypress.on</code> or <code>cy.intercept(..., req =&gt; ...)</code> callbacks.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">intercept</span>(<span class="string">&#x27;/ajax&#x27;</span>, <span class="function"><span class="params">req</span> =&gt;</span> &#123;</span><br><span class="line">  req.<span class="title function_">continue</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// üö® not going to work</span></span><br><span class="line">    cy.<span class="title function_">log</span>(<span class="string">&#x27;got response!&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Nope, the callback <code>res =&gt; &#123; ... &#125;</code> happens while some <em>other</em> Cypress command is running and it cannot insert the <code>cy.log</code> correctly.</p><h2><span id="use-the-cythen-command-instead">Use the <code>cy.then</code> command instead</span></h2><p>Instead of using <code>setTimeout...</code> you can use <a href="https://on.cypress.io/then">cy.then</a> to add or insert new Cypress commands into the queue.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">log</span>(<span class="string">&#x27;first&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// insert more commands</span></span><br><span class="line">  <span class="comment">// before the &quot;LOG third&quot; command</span></span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;second&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">cy.<span class="title function_">log</span>(<span class="string">&#x27;third&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/out-of-band/insert.png" alt="The new log command was inserted between two existing commands"></p><p>Adding new Cypress commands from <code>cy.then</code> is super useful for <a href="https://glebbahmutov.com/cypress-examples/recipes/conditional-testing.html">conditional testing</a> and <a href="https://github.com/bahmutov/cypress-recurse">recursive tests</a>.</p><h2><span id="add-your-own-queue">Add your own queue</span></h2><p>You can even store all the data for the commands you want to run and then schedule them for later using the <code>cy.then</code> command. For example, if you want to print the network data from the server, instead of trying to use <code>cy.log(...)</code> from the <code>cy.intercept</code> callback, store the response data and then print it later:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">intercept</span>(<span class="string">&#x27;/ajax&#x27;</span>, <span class="function"><span class="params">req</span> =&gt;</span> &#123;</span><br><span class="line">  req.<span class="title function_">continue</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// üö® not going to work</span></span><br><span class="line">    cy.<span class="title function_">log</span>(<span class="string">&#x27;got response!&#x27;</span>, res.<span class="property">body</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ‚úÖ store the responses to be printed later</span></span><br><span class="line"><span class="keyword">const</span> responses = []</span><br><span class="line">cy.<span class="title function_">intercept</span>(<span class="string">&#x27;/ajax&#x27;</span>, <span class="function"><span class="params">req</span> =&gt;</span> &#123;</span><br><span class="line">  req.<span class="title function_">continue</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    responses.<span class="title function_">push</span>(res.<span class="property">body</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// test commands</span></span><br><span class="line"><span class="comment">// now ensure there are some responses</span></span><br><span class="line"><span class="comment">// and print them</span></span><br><span class="line">cy.<span class="title function_">wrap</span>(responses).<span class="title function_">should</span>(<span class="string">&#x27;not.be.empty&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    responses.<span class="title function_">forEach</span>(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">log</span>(<span class="string">&#x27;got response!&#x27;</span>, r)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// if we want to print more responses later</span></span><br><span class="line">    responses.<span class="property">length</span> = <span class="number">0</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Hope it helps.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;single-chain-of-commands&quot;&gt;Single chain of commands&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Cypress test acts like a human user interacting with the web 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Component Code Coverage in Cypress v10</title>
    <link href="https://glebbahmutov.com/blog/component-code-coverage/"/>
    <id>https://glebbahmutov.com/blog/component-code-coverage/</id>
    <published>2022-07-07T04:00:00.000Z</published>
    <updated>2022-07-07T17:55:07.972Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s say you are enjoying the <a href="https://on.cypress.io/component-testing">Cypress component testing</a>, but wondering how to get the code coverage information from the component tests? Back in my days of <a href="/blog/my-vision-for-component-tests/" title="cypress-react-unit-test">cypress-react-unit-test</a> the code coverage was built-in... But now it requires adding it in. Luckily it is not very hard. Let me show you how to get the component testing code coverage report for a small example application.</p><blockquote class="pullquote"><p>üéÅ You can find the complete source code at <a href="https://github.com/bahmutov/stub-react-import">bahmutov&#x2F;stub-react-import</a>, specifically in the <a href="https://github.com/bahmutov/stub-react-import/pull/1/files">pull request #1</a>.</p></blockquote><h2><span id="instrument-the-source-files">Instrument the source files</span></h2><p>To collect the code coverage information, we need to instrument the application. When the component tests execute, the counters will be updated, and we will know which source statements were covered by the tests. To insert the counters into the source code, we add the <a href="https://github.com/istanbuljs/babel-plugin-istanbul#readme">babel-plugin-istanbul</a> into our Babel transpile step.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D babel-plugin-istanbul</span><br><span class="line">+ babel-plugin-istanbul@6.1.1</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">component</span>: &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">framework</span>: <span class="string">&#x27;create-react-app&#x27;</span>,</span><br><span class="line">      <span class="attr">bundler</span>: <span class="string">&#x27;webpack&#x27;</span>,</span><br><span class="line">      <span class="attr">webpackConfig</span>: &#123;</span><br><span class="line">        <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">        <span class="attr">devtool</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">module</span>: &#123;</span><br><span class="line">          <span class="attr">rules</span>: [</span><br><span class="line">            <span class="comment">// application and Cypress files are bundled like React components</span></span><br><span class="line">            <span class="comment">// and instrumented using the babel-plugin-istanbul</span></span><br><span class="line">            <span class="comment">// (we will filter the code coverage for non-application files later)</span></span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">              <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">              <span class="attr">use</span>: &#123;</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                  <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>, <span class="string">&#x27;@babel/preset-react&#x27;</span>],</span><br><span class="line">                  <span class="attr">plugins</span>: [</span><br><span class="line">                    <span class="comment">// we could optionally insert this plugin</span></span><br><span class="line">                    <span class="comment">// only if the code coverage flag is on</span></span><br><span class="line">                    <span class="string">&#x27;istanbul&#x27;</span>,</span><br><span class="line">                  ],</span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If you execute the component tests now, you can find the <code>window.__coverage__</code> object that has the counters for each transpiled source file, which includes the application source files and the spec files.</p><p><img src="../images/component-code-coverage/instrumented.png" alt="The component source files were instrumented"></p><p>At the end of the test run, we want to generate the code coverage report based on the <code>window.__coverage__</code> object.</p><h2><span id="the-code-coverage-report">The code coverage report</span></h2><p>To generate the code coverage reports in different formats, including the human-readable HTML format, let&#39;s use my plugin <a href="https://github.com/bahmutov/cypress-code-coverage">@bahmutov&#x2F;cypress-code-coverage</a>.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D @bahmutov/cypress-code-coverage</span><br><span class="line">+ @bahmutov/cypress-code-coverage@1.3.1</span><br></pre></td></tr></table></figure><p>This plugin needs to be included in the <code>cypress.config.js</code> file and in the component support file.</p><figure class="highlight js"><figcaption><span>cypress.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">component</span>: &#123;</span><br><span class="line">    <span class="title function_">setupNodeEvents</span>(<span class="params">on, config</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setupNodeEvents for components&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// https://github.com/bahmutov/cypress-code-coverage</span></span><br><span class="line">      <span class="built_in">require</span>(<span class="string">&#x27;@bahmutov/cypress-code-coverage/plugin&#x27;</span>)(on, config)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> config</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="comment">// our Webpack setup</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/support/component.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/bahmutov/cypress-code-coverage</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@bahmutov/cypress-code-coverage/support&#x27;</span></span><br></pre></td></tr></table></figure><p>Great, let&#39;s see what we get now. We can see the messages from the code coverage reporting plugin. There are no warnings, so it seems, it is working.</p><p><img src="../images/component-code-coverage/messages.png" alt="The code coverage plugin is working"></p><p><strong>Note:</strong> the <code>@bahmutov/cypress-code-coverage</code> plugin is a fork of <a href="https://github.com/cypress-io/code-coverage">@cypress&#x2F;code-coverage</a> plugin I have written a while ago. I prefer using my fork, since I have fixed some problems there.</p><p>After the test finishes, we can find the generated code coverage reports in the folder <code>coverage</code>. Let&#39;s open the HTML report</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ open coverage/lcov-report/index.html</span><br></pre></td></tr></table></figure><p><img src="../images/component-code-coverage/report1.png" alt="The HTML code coverage summary"></p><p>Hmm, the report includes our test folder <code>cypress/support</code>. What about the <code>src</code> folder?</p><p><img src="../images/component-code-coverage/report2.png" alt="The code coverage includes the test files"></p><p>We have a problem. We have files we do not want in the final report, and it is also missing some of the files we do want there. For example, the final report should tell us that the file <code>src/index.js</code> has NOT been covered by the component test (since we have not loaded it)</p><p><img src="../images/component-code-coverage/src.png" alt="The source files in our src folder"></p><h2><span id="include-and-exclude-files">Include and exclude files</span></h2><p>We want our code coverage report to skip the Cypress&#39; own spec files, and include the application&#39;s source files. Under the hood, the <code>@bahmutov/cypress-code-coverage</code> plugin is using <a href="https://istanbul.js.org/">nyc</a> CLI utility to produce the reports. We can control the source files included in the report by adding the <code>nyc</code> object of settings to the <code>package.json</code> file.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;nyc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;all&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;excludeAfterRemap&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/**/*.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;cypress/**/*.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;src/**/*.cy.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;src/**/*.test.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;src/setupTests.js&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> restart Cypress completely after changing the <code>nyc</code> settings, since we want to reload the <code>package.json</code> file to make the changes take effect. Let&#39;s look at our report now:</p><p><img src="../images/component-code-coverage/report3.png" alt="The code coverage report after excluding the specs and extra files"></p><p>Nice - the folder <code>cypress</code> is gone, and the only files we got the code coverage for are the real source files in the <code>src</code> folder. The component <code>App.js</code> has been tested by the <code>App.cy.js</code> component test at 100%. The <code>Location.js</code> has been mostly skipped - because we are stubbing its export for the test, read the blog post <a href="/blog/stub-react-import/" title="Stub an import from a Cypress v10 component test">Stub an import from a Cypress v10 component test</a>.</p><p><img src="../images/component-code-coverage/report4.png" alt="The code coverage report for the source file Location.js"></p><p>Finally, the source file <code>index.js</code> has zero code coverage, because the component test never loaded it. We can either add another component test, or test the <code>index.js</code> using an end-to-end test.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s say you are enjoying the &lt;a href=&quot;https://on.cypress.io/component-testing&quot;&gt;Cypress component testing&lt;/a&gt;, but wondering how to 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="code coverage" scheme="https://glebbahmutov.com/blog/tags/code-coverage/"/>
    
  </entry>
  
  <entry>
    <title>Periodically Update A Branch</title>
    <link href="https://glebbahmutov.com/blog/update-branch/"/>
    <id>https://glebbahmutov.com/blog/update-branch/</id>
    <published>2022-07-06T04:00:00.000Z</published>
    <updated>2022-07-07T16:35:23.054Z</updated>
    
    <content type="html"><![CDATA[<p>Imaging you have a repo with default branch <code>main</code> and another branch <code>X</code>. You want to have <code>X</code> always up-to-date, maybe it is deployed to the staging environment nightly. Here is how to update the branch <code>X</code> automatically using a GitHub Action.</p><blockquote class="pullquote"><p>üéÅ This example is available at <a href="https://github.com/bahmutov/self-update-branch">bahmutov&#x2F;self-update-branch</a>.</p></blockquote><h2><span id="github-action">GitHub Action</span></h2><p>I am using a GH Action workflow to update the branch <code>X</code> nightly or when manually triggered. See the file <a href="https://github.com/bahmutov/self-update-branch/blob/main/.github/workflows/update-branch.yml">update-branch.yml</a></p><figure class="highlight yml"><figcaption><span>.github/workflows/update-branch.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://glebbahmutov.com/blog/trying-github-actions/</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">update-branch</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># update the branch X every night</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;0 3 * * *&#x27;</span></span><br><span class="line">  <span class="comment"># or update the branch X manually</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">update:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">üõé</span></span><br><span class="line">        <span class="comment"># https://github.com/actions/checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># check out all branches</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line">          <span class="comment"># use a personal access token to commit</span></span><br><span class="line">          <span class="comment"># the merged code and trigger CI actions</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GH_PAT</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Update</span> <span class="string">Git</span> <span class="string">branch</span> <span class="string">X</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git config user.name &quot;Update branch&quot;</span></span><br><span class="line"><span class="string">          git config user.email github-actions@github.com</span></span><br><span class="line"><span class="string">          git checkout X</span></span><br><span class="line"><span class="string">          git merge main --no-edit -m &quot;Merged main branch on $(date +%F)&quot;</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Push</span> <span class="string">the</span> <span class="string">updated</span> <span class="string">branch</span> <span class="string">X</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">git</span> <span class="string">push</span> <span class="string">origin</span> <span class="string">X</span></span><br></pre></td></tr></table></figure><p>I need to use the GitHub <a href="https://github.com/settings/tokens">personal access token</a> in order for the update commit to trigger other CI services.</p><h2><span id="example">Example</span></h2><p>You can find a pull request <a href="https://github.com/bahmutov/self-update-branch/pull/1">#1</a> that automatically gets the new updates from the <code>main</code> branch. A merged commit into the branch <code>X</code> triggers the CI runs. In the screenshot below, the merge commit triggers another GitHub workflow <code>test-branch-x</code> and a CircleCI workflow.</p><p><img src="../images/update-branch/pr.png" alt="The pull request from the branch X updated automatically"></p><h2><span id="see-also">See also</span></h2><p>One use case for keeping a branch evergreen using the approach described in this blog post is deploying an instrumented version of the application for testing to collect the code coverage information. Read the blog post <a href="/blog/code-coverage-for-nextjs-app/" title="Code Coverage For Nextjs Application">Code Coverage For Nextjs Application</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imaging you have a repo with default branch &lt;code&gt;main&lt;/code&gt; and another branch &lt;code&gt;X&lt;/code&gt;. You want to have &lt;code&gt;X&lt;/code&gt; always u
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
      <category term="git" scheme="https://glebbahmutov.com/blog/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Stub an import from a Cypress v10 component test</title>
    <link href="https://glebbahmutov.com/blog/stub-react-import/"/>
    <id>https://glebbahmutov.com/blog/stub-react-import/</id>
    <published>2022-07-05T04:00:00.000Z</published>
    <updated>2022-07-07T17:54:01.686Z</updated>
    
    <content type="html"><![CDATA[<p>A user has recently asked in the <a href="https://on.cypress.io/discord">Cypress Discord channel</a> how to write a component test for a component that executes the following code <code>window.location.host.split(&quot;.&quot;)</code>. Grabbing the <code>window.location</code> is a side-effect and is generally unavailable from a component test. It would work great in an end-to-end test, of course, but we need to make it work right now.</p><p><img src="../images/stub-react-import/question.png" alt="How to handle the window.location access from the component"></p><p>Any time you have a piece of code that gives you problems, move it into its own function or source file and stub it from the Cypress test to bypass the problem. Of course, you want to stub the smallest piece of your code to make sure you still test the most of it, see the blog post <a href="/blog/stub-form-that-opens-2nd-tab/" title="Stub The Form That Opens The Second Browser Tab">Stub The Form That Opens The Second Browser Tab</a> that shows it nicely. Let&#39;s see how the same principle could work for a React component test.</p><p>I have started the a new React application using the <code>create-react-app</code> to scaffold it.</p><blockquote class="pullquote"><p>üéÅ You can find the complete source code at <a href="https://github.com/bahmutov/stub-react-import">bahmutov&#x2F;stub-react-import</a>.</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-react-app stub-react-import</span><br><span class="line">$ cd stub-react-import</span><br></pre></td></tr></table></figure><p>I installed Cypress and Prettier</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress prettier</span><br><span class="line">+ cypress@10.3.0</span><br><span class="line">+ prettier@2.7.1</span><br></pre></td></tr></table></figure><p>I love using <a href="/blog/configure-prettier-in-vscode/" title="Prettier to format my code">Prettier to format my code</a>. Let&#39;s configure the <a href="https://on.cypress.io/component-testing">Cypress component testing</a>.</p><p><img src="../images/stub-react-import/configure.png" alt="Cypress detects the framework used to bundle the application code"></p><p>Cypress wizard suggests the following <a href="https://github.com/bahmutov/stub-react-import/blob/main/cypress.config.js">cypress.config.js</a> file</p><figure class="highlight js"><figcaption><span>cypress.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">component</span>: &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">framework</span>: <span class="string">&#x27;create-react-app&#x27;</span>,</span><br><span class="line">      <span class="attr">bundler</span>: <span class="string">&#x27;webpack&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="the-component">The component</span></h2><p>Let&#39;s put have our <code>App.js</code> show the host and the path</p><figure class="highlight js"><figcaption><span>src/App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;./logo.svg&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; hostname, pathname &#125; = <span class="variable language_">window</span>.<span class="property">location</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">header</span> <span class="attr">className</span>=<span class="string">&quot;App-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;logo&#125;</span> <span class="attr">className</span>=<span class="string">&quot;App-logo&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;logo&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">data-cy</span>=<span class="string">&quot;location&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;hostname&#125; &#123;pathname&#125;&#123;&#x27; &#x27;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure><h2><span id="end-to-end-test">End-to-end test</span></h2><p>First, let&#39;s confirm the component is showing the expected host and path when running in an end-to-end test. Our test is simple:</p><figure class="highlight js"><figcaption><span>cypress/e2e/spec.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows the host and path&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=location]&#x27;</span>, <span class="string">&#x27;localhost /&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/stub-react-import/e2e.png" alt="The end-to-end test confirms the app is showing the right host and path"></p><h2><span id="component-test">Component test</span></h2><p>Nice, let&#39;s take a look at our component. Without any changes to the source code, our component test could be</p><figure class="highlight js"><figcaption><span>src/App.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows the location host and path&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">mount</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/stub-react-import/c1.png" alt="The component test has its test window location"></p><p>Ughh, the component runs in the test window, thus it shows the spec&#39;s pathname. Can we simply <a href>stub the <code>window.location</code></a>? Not really, we cannot redefine the <code>window.location</code> property, it is pretty locked down in the browser for security reasons.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows the location host and path&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// try stubbing the window.location.hostname property</span></span><br><span class="line">  cy.<span class="title function_">stub</span>(<span class="variable language_">window</span>.<span class="property">location</span>, <span class="string">&#x27;hostname&#x27;</span>).<span class="title function_">value</span>(<span class="string">&#x27;localhost&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">mount</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/stub-react-import/stub.png" alt="The browser does not allow stubbing the location properties"></p><h2><span id="move-the-side-effect">Move the side effect</span></h2><p>Let&#39;s start by moving the problematic code that accesses the <code>window.location</code> object to its own source file.</p><figure class="highlight js"><figcaption><span>src/Location.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getLocation</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; hostname, pathname &#125; = <span class="variable language_">window</span>.<span class="property">location</span></span><br><span class="line">  <span class="keyword">return</span> &#123; hostname, pathname &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>App.js</code> imports the <code>getLocation</code> function and calls it to get the <code>window.location</code> properties.</p><figure class="highlight js"><figcaption><span>src/App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getLocation &#125; <span class="keyword">from</span> <span class="string">&#x27;./Location&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; hostname, pathname &#125; = <span class="title function_">getLocation</span>()</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="stub-the-import">Stub the import</span></h2><p>Now we need to add one more plugin <code>@babel/plugin-transform-modules-commonjs</code> to our development dependencies for our tests to work</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D @babel/plugin-transform-modules-commonjs</span><br><span class="line">+ @babel/plugin-transform-modules-commonjs@7.18.6</span><br></pre></td></tr></table></figure><p>We have relied on the default Webpack settings found in the repository to bundle each component during Cypress component tests. Now we need to insert the <code>@babel/plugin-transform-modules-commonjs</code> into the transpiling pipeline. Thus I will expand the <a href="https://github.com/bahmutov/stub-react-import/blob/main/cypress.config.js">cypress.config.js</a> file to pass the full Webpack config</p><figure class="highlight js"><figcaption><span>cypress.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">component</span>: &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">framework</span>: <span class="string">&#x27;create-react-app&#x27;</span>,</span><br><span class="line">      <span class="attr">bundler</span>: <span class="string">&#x27;webpack&#x27;</span>,</span><br><span class="line">      <span class="attr">webpackConfig</span>: &#123;</span><br><span class="line">        <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">        <span class="attr">devtool</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">module</span>: &#123;</span><br><span class="line">          <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">test</span>: <span class="regexp">/\.?js$/</span>,</span><br><span class="line">              <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">              <span class="attr">use</span>: &#123;</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                  <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>, <span class="string">&#x27;@babel/preset-react&#x27;</span>],</span><br><span class="line">                  <span class="attr">plugins</span>: [</span><br><span class="line">                    [</span><br><span class="line">                      <span class="string">&#x27;@babel/plugin-transform-modules-commonjs&#x27;</span>,</span><br><span class="line">                      &#123; <span class="attr">loose</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">                    ],</span><br><span class="line">                  ],</span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// e2e config</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The plugin&#39;s <code>loose: true</code> option makes all imports accessible from other files, thus a spec file can stub an import and the stub will be used in the source files. If you run the component test again, nothing should change. But now let&#39;s modify our component test and stub the <code>getLocation</code> import</p><figure class="highlight js"><figcaption><span>src/App.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">Location</span> <span class="keyword">from</span> <span class="string">&#x27;./Location&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows the location host and path&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">stub</span>(<span class="title class_">Location</span>, <span class="string">&#x27;getLocation&#x27;</span>).<span class="title function_">returns</span>(&#123;</span><br><span class="line">    <span class="attr">hostname</span>: <span class="string">&#x27;cy-test&#x27;</span>,</span><br><span class="line">    <span class="attr">pathname</span>: <span class="string">&#x27;/App&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">mount</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=location]&#x27;</span>, <span class="string">&#x27;cy-test /App&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/stub-react-import/stub-get-location.png" alt="The component test stubs the import getLocation"></p><p>We can make the test stricter by confirming our <code>getLocation</code> stub was used and the test has not passed accidentally.</p><figure class="highlight js"><figcaption><span>src/App.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">Location</span> <span class="keyword">from</span> <span class="string">&#x27;./Location&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows the location host and path&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">stub</span>(<span class="title class_">Location</span>, <span class="string">&#x27;getLocation&#x27;</span>)</span><br><span class="line">    .<span class="title function_">returns</span>(&#123;</span><br><span class="line">      <span class="attr">hostname</span>: <span class="string">&#x27;cy-test&#x27;</span>,</span><br><span class="line">      <span class="attr">pathname</span>: <span class="string">&#x27;/App&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">as</span>(<span class="string">&#x27;getLocation&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">mount</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=location]&#x27;</span>, <span class="string">&#x27;cy-test /App&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@getLocation&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/stub-react-import/confirm.png" alt="The test confirms the import stub was called by the component"></p><p>Happy stubbing!</p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/component-code-coverage/" title="Component Code Coverage in Cypress v10">Component Code Coverage in Cypress v10</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;A user has recently asked in the &lt;a href=&quot;https://on.cypress.io/discord&quot;&gt;Cypress Discord channel&lt;/a&gt; how to write a component test for a 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Stub The Form That Opens The Second Browser Tab</title>
    <link href="https://glebbahmutov.com/blog/stub-form-that-opens-2nd-tab/"/>
    <id>https://glebbahmutov.com/blog/stub-form-that-opens-2nd-tab/</id>
    <published>2022-07-01T04:00:00.000Z</published>
    <updated>2022-07-13T13:35:40.598Z</updated>
    
    <content type="html"><![CDATA[<p>A user complained that a small Cypress test opens a new browser window and Cypress cannot continue with its test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;opens 2nd browser window&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;Open&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/stub-form/second.png" alt="The test opens the second browser window"></p><p>The user has provided a reproducible example, so great job! I have marked the important steps in the code that we will stub from our Cypress spec file.</p><p><img src="../images/stub-form/code.png" alt="The application code"></p><p>Let&#39;s prevent the application from opening the second browser widow.</p><blockquote class="pullquote"><p>üéÅ You can find the source code and the spec files in the repo <a href="https://github.com/bahmutov/cypress-form-opens-second-tab-example">bahmutov&#x2F;cypress-form-opens-second-tab-example</a>.</p></blockquote><h2><span id="remove-the-onclick-attribute">Remove the onclick attribute</span></h2><p>The simplest solution to prevent the application code from running is to remove the <code>onclick</code> attribute marked with <strong>&quot;1&quot;</strong> in the code screenshot above. The application is using this attribute to call the JavaScript function, so by removing it we avoid opening the second browser window.</p><figure class="highlight js"><figcaption><span>cypress/e2e/1-remove-onlick.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;removes the onclick attribute&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the application opens the 2nd tab in response</span></span><br><span class="line">  <span class="comment">// to the click handler set via &quot;onclick=...&quot; attribute</span></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;Open&#x27;</span>)</span><br><span class="line">    <span class="comment">// confirm the A element has the &quot;onclick&quot; attribute</span></span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;onclick&#x27;</span>)</span><br><span class="line">  <span class="comment">// disable the behavior by removing the &quot;onclick&quot; attribute</span></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;Open&#x27;</span>).<span class="title function_">invoke</span>(<span class="string">&#x27;attr&#x27;</span>, <span class="string">&#x27;onclick&#x27;</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  <span class="comment">// confirm we remain on the home screen</span></span><br><span class="line">  cy.<span class="title function_">location</span>(<span class="string">&#x27;pathname&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/stub-form/test1.png" alt="The test stops the code execution by removing the onclick attribute"></p><p>The test simply does nothing - it does not execute any of the application&#39;s code, which is probably not what we want. We want the test to run as much code as possible! The shown approach also would not work if the application attached the click event listener using <code>addEventListener</code> instead of using the element&#39;s attribute.</p><p>My rating of the above solution <strong>1 out of 10 stars</strong>.</p><h2><span id="stub-the-internal-application-code">Stub the internal application code</span></h2><p>The click calls the application code that calls <em>another</em> application function by using the <code>window.openNew</code> call. This is marked <strong>&quot;2&quot;</strong> in the code screenshot above:</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">openNewTab</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">openNew</span>(&#123;</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;test_blank&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;submitted.html&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By calling the &quot;openNew&quot; as a window&#39;s property, the application allows Cypress to easily spy &#x2F; stub the application&#39;s call.</p><figure class="highlight js"><figcaption><span>cypress/e2e/2-stub-openNew.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;passes&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the application internally calls</span></span><br><span class="line">  <span class="comment">// the &quot;window.openNew&quot; method</span></span><br><span class="line">  <span class="comment">// we can stub it using the cy.stub command</span></span><br><span class="line">  cy.<span class="title function_">window</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">stub</span>(win, <span class="string">&#x27;openNew&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;openNew&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;Open&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  <span class="comment">// and confirm the stub was called as expected</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@openNew&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;firstCall.args.0&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">target</span>: <span class="string">&#x27;test_blank&#x27;</span>,</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;submitted.html&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/stub-form/test2.png" alt="The test confirms the application calls the internal code correctly after a click"></p><p>Using this approach we can confirm the user interface and the application code are working correctly. We can let the app&#39;s code run all the way to the &quot;edge&quot; and stub the low-level method use to make the final call that opens the second browser window. Thus I rate this powerful approach <strong>6 out of 10 stars</strong>.</p><p><strong>Tip:</strong> see more <code>cy.stub</code> and related code examples at my <a href="https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html">Stubs, spies, and clocks examples page</a>.</p><h2><span id="stub-the-form-submit-method">Stub the form submit method</span></h2><p>In the previous test, we have stubbed the application&#39;s method <code>window.openNew</code>. We can also stub pretty much any browser API. For example, our application is preparing a form to submit. Then it calls the <code>form.submit()</code> method, marked <strong>&quot;3&quot;</strong> in the code snapshot:</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">openNew</span>(<span class="params">option</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">  form.<span class="property">target</span> = option.<span class="property">target</span> || <span class="string">&#x27;_blank&#x27;</span></span><br><span class="line">  form.<span class="property">action</span> = option.<span class="property">url</span></span><br><span class="line">  form.<span class="property">method</span> = <span class="string">&#x27;GET&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// send some additional information</span></span><br><span class="line">  <span class="keyword">const</span> name = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">  name.<span class="title function_">setAttribute</span>(<span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">  name.<span class="title function_">setAttribute</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;firstName&#x27;</span>)</span><br><span class="line">  name.<span class="title function_">setAttribute</span>(<span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;Joe&#x27;</span>)</span><br><span class="line">  form.<span class="title function_">appendChild</span>(name)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(form)</span><br><span class="line">  form.<span class="title function_">submit</span>() <span class="comment">// 3</span></span><br><span class="line">  $(form).<span class="title function_">remove</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The problem is the last call <code>form.submit()</code> - it submits the form to the server. We are interested in the form preparation, but don&#39;t want it to actually be submitted. Thus let&#39;s stub the <code>form.submit</code> method.</p><figure class="highlight js"><figcaption><span>cypress/e2e/3-stub-form-submit.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;passes&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the application will create the form</span></span><br><span class="line">  <span class="comment">// and call its submit method. Let&#x27;s</span></span><br><span class="line">  <span class="comment">// stub the form.submit() to prevent</span></span><br><span class="line">  cy.<span class="title function_">document</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">doc</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> create = doc.<span class="property">createElement</span>.<span class="title function_">bind</span>(doc)</span><br><span class="line">    <span class="keyword">const</span> stub = cy.<span class="title function_">stub</span>(doc, <span class="string">&#x27;createElement&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// all calls should still go to the original method</span></span><br><span class="line">    stub.<span class="title function_">callThrough</span>()</span><br><span class="line">    <span class="comment">// if the app is calling document.createElement(&quot;form&quot;)</span></span><br><span class="line">    <span class="comment">// then call our own method that created the form element</span></span><br><span class="line">    <span class="comment">// but stubs its &quot;submit()&quot; method</span></span><br><span class="line">    stub.<span class="title function_">withArgs</span>(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">callsFake</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> form = <span class="title function_">create</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">      cy.<span class="title function_">stub</span>(form, <span class="string">&#x27;submit&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;submit&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> form</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;Open&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@submit&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">  <span class="comment">// you could confirm the form&#x27;s attributes and input elements</span></span><br><span class="line">  <span class="comment">// by getting them from the &quot;@submit&quot; stub instance</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test has a lot of comments explaining what we are trying to do: we want to keep using the <code>document.createElement</code> method, but if the application&#39;s code calls <code>document.createElement(&#39;form&#39;)</code> then we return the form instance with the stubbed <code>submit</code> method. Thus the application&#39;s code does everything, only the final browser <code>submit</code> call goes to our stub instance.</p><p><img src="../images/stub-form/test3.png" alt="The test stubs the final form submit method"></p><p>Cypress tests run in the browser, thus the same <code>cy.spy</code> and <code>cy.stub</code> methods work on the browser&#39;s own APIs like <code>document.createElement</code>. By letting the application code run all the way to the last <code>form.submit()</code> the test is almost end-to-end. Thus I rate this test <strong>8 out of 10 stars</strong>.</p><h2><span id="stub-the-form-target-property">Stub the form target property</span></h2><p>Why does our form open the second browser window? Because the form has the <code>target: test_blank</code> property, marked in the code snapshot with <strong>&quot;4&quot;</strong>.</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">openNewTab</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">openNew</span>(&#123;</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;test_blank&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;submitted.html&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">openNew</span>(<span class="params">option</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">  form.<span class="property">target</span> = option.<span class="property">target</span> || <span class="string">&#x27;_blank&#x27;</span> <span class="comment">// &quot;4&quot;</span></span><br><span class="line">  form.<span class="property">action</span> = option.<span class="property">url</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Just like <code>&lt;a target=&quot;...&quot;&gt;</code> elements, the form can be loaded in the current browser tab by using the <code>target: _self</code> value. Let&#39;s adjust our spec to stub the form&#39;s <code>target</code> property and set it always to <code>_self</code>.</p><figure class="highlight js"><figcaption><span>cypress/e2e/4-stub-form-target.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;passes&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// before clicking on the link, stub the Document.createElement</span></span><br><span class="line">  <span class="comment">// and if the user is trying to create a new form, stub its</span></span><br><span class="line">  <span class="comment">// property &quot;target&quot; to not allow opening new tabs; always have it at &quot;_self&quot;</span></span><br><span class="line">  cy.<span class="title function_">document</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">doc</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> create = doc.<span class="property">createElement</span>.<span class="title function_">bind</span>(doc)</span><br><span class="line">    cy.<span class="title function_">stub</span>(doc, <span class="string">&#x27;createElement&#x27;</span>).<span class="title function_">callsFake</span>(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (name === <span class="string">&#x27;form&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> form = <span class="title function_">create</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">        cy.<span class="title function_">stub</span>(form, <span class="string">&#x27;target&#x27;</span>).<span class="title function_">value</span>(<span class="string">&#x27;_self&#x27;</span>)</span><br><span class="line">        <span class="comment">// Also spy on the instance method &quot;submit&quot;</span></span><br><span class="line">        <span class="comment">// so that later we can validate the submitted form</span></span><br><span class="line">        cy.<span class="title function_">spy</span>(form, <span class="string">&#x27;submit&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;submit&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> form</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">create</span>(name)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// spy on the network call to submit the form</span></span><br><span class="line">  cy.<span class="title function_">intercept</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">pathname</span>: <span class="string">&#x27;submitted.html&#x27;</span>,</span><br><span class="line">  &#125;).<span class="title function_">as</span>(<span class="string">&#x27;submitted&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// click on the link and confirm the form</span></span><br><span class="line">  <span class="comment">// has loaded in the current tab</span></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;Open&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Thank you&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// verify the network call to submit the form</span></span><br><span class="line">  <span class="comment">// has the expected URL search parameters</span></span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@submitted&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;request.url&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> parsed = <span class="keyword">new</span> <span class="title function_">URL</span>(url)</span><br><span class="line">      <span class="keyword">return</span> parsed.<span class="property">searchParams</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// the form submits the field &quot;firstName=Joe&quot;</span></span><br><span class="line">    .<span class="title function_">invoke</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;firstName&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;Joe&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// grab the form&#x27;s submit call</span></span><br><span class="line">  <span class="comment">// to get back to the form and its input elements</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@submit&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;firstCall.thisValue.elements&#x27;</span>)</span><br><span class="line">    <span class="comment">// the form&#x27;s HTML elements include every input element</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">elements</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// we can validate the form&#x27;s first name input element</span></span><br><span class="line">      <span class="comment">// has the expected value set by the application&#x27; code</span></span><br><span class="line">      <span class="title function_">expect</span>(elements.<span class="title function_">namedItem</span>(<span class="string">&#x27;firstName&#x27;</span>), <span class="string">&#x27;first name&#x27;</span>).<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">value</span>(<span class="string">&#x27;Joe&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The form is loaded in the same browser tab as the current page, and we can continue working with the form, as if we switched to the second tab.</p><p><img src="../images/stub-form/test4.png" alt="The test stubs the final form submit method"></p><p>The above test has many things going for it:</p><ul><li>it lets the form be submitted to the backend, and it verifies the submitted URL parameters by using <a href="https://on.cypress.io/intercept">cy.intercept</a> command and the browser&#39;s own <code>URL</code> API.</li><li>it verifies the form element and its input elements by getting them from the <code>submit</code> spy</li></ul><p>I rate the above test <strong>9 out of 10 stars</strong>.</p><p>If only Cypress could <a href="https://github.com/cypress-io/cypress/issues/6251">control two tabs</a>, then the test would earn <strong>10 ‚≠êÔ∏è</strong>.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/cypress-second-tab/" title="Deal with Second Tab in Cypress">Deal with Second Tab in Cypress</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;A user complained that a small Cypress test opens a new browser window and Cypress cannot continue with its test.&lt;/p&gt;
&lt;figure class=&quot;high
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Sinon Edge Cases</title>
    <link href="https://glebbahmutov.com/blog/sinon-edge/"/>
    <id>https://glebbahmutov.com/blog/sinon-edge/</id>
    <published>2022-06-30T04:00:00.000Z</published>
    <updated>2022-06-30T11:22:48.322Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://sinonjs.org/">Sinon.js</a> is my favorite JavaScript library for spying and stubbing object methods. This blog post describes a few seldomly used stub features that I always have to look up. These examples come from my <a href="https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html">Cypress examples page</a>.</p><h2><span id="callthrough">callThrough</span></h2><p>Imagine we want to stub a method, and return a value for the specific argument, but let the original method be called for all other arguments. We can use the <code>callThrough</code> feature.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> greeter = &#123;</span><br><span class="line">  <span class="title function_">greet</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stub = cy.<span class="title function_">stub</span>(greeter, <span class="string">&#x27;greet&#x27;</span>)</span><br><span class="line"><span class="comment">// all non-matched calls should call the real method</span></span><br><span class="line">stub.<span class="title function_">callThrough</span>()</span><br><span class="line"><span class="comment">// all calls with a string argument should get &quot;Hi&quot;</span></span><br><span class="line">stub.<span class="title function_">withArgs</span>(<span class="title class_">Cypress</span>.<span class="property">sinon</span>.<span class="property">match</span>.<span class="property">string</span>).<span class="title function_">returns</span>(<span class="string">&#x27;Hi&#x27;</span>)</span><br><span class="line"><span class="comment">// call the &quot;greet&quot; method</span></span><br><span class="line"><span class="title function_">expect</span>(greeter.<span class="title function_">greet</span>(<span class="string">&#x27;World&#x27;</span>)).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&#x27;Hi&#x27;</span>)</span><br><span class="line"><span class="title function_">expect</span>(greeter.<span class="title function_">greet</span>(<span class="number">42</span>)).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&#x27;Hello, 42!&#x27;</span>)</span><br></pre></td></tr></table></figure><h2><span id="callsfake">callsFake</span></h2><p>To have the absolute power over the stub, I sometimes use the &#96;callsFake Sinon feature to redirect the method calls to my own function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Joe&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cy.<span class="title function_">stub</span>(person, <span class="string">&#x27;getName&#x27;</span>).<span class="title function_">callsFake</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// call the real person.getName() using the wrappedMethod</span></span><br><span class="line">    person.<span class="property">getName</span></span><br><span class="line">      .<span class="title function_">wrappedMethod</span>()</span><br><span class="line">      <span class="comment">// but then reverse the returned string</span></span><br><span class="line">      .<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      .<span class="title function_">reverse</span>()</span><br><span class="line">      .<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">expect</span>(person.<span class="title function_">getName</span>()).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&#x27;eoJ&#x27;</span>)</span><br></pre></td></tr></table></figure><p>It allows me to programmatically decide what to do with the call. In my repo <a href="https://github.com/bahmutov/cypress-form-opens-second-tab-example">cypress-form-opens-second-tab-example</a> I am stubbing the <code>document.createElement</code> calls when the argument is <code>form</code>, but let the original method be called for all other elements.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> create = doc.<span class="property">createElement</span>.<span class="title function_">bind</span>(doc)</span><br><span class="line">cy.<span class="title function_">stub</span>(doc, <span class="string">&#x27;createElement&#x27;</span>).<span class="title function_">callsFake</span>(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">&#x27;form&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> form = <span class="title function_">create</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">stub</span>(form, <span class="string">&#x27;target&#x27;</span>).<span class="title function_">value</span>(<span class="string">&#x27;_self&#x27;</span>)</span><br><span class="line">    <span class="comment">// Also spy on the instance method &quot;submit&quot;</span></span><br><span class="line">    <span class="comment">// so that later we can validate the submitted form</span></span><br><span class="line">    cy.<span class="title function_">spy</span>(form, <span class="string">&#x27;submit&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;submit&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> form</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">create</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="value">value</span></h2><p>You can stub an object&#39;s property using the <code>value</code> keyword. For example, to prevent anyone from setting the <code>target</code> property in the above <code>&lt;form&gt;</code> example, I used the following syntax:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">stub</span>(form, <span class="string">&#x27;target&#x27;</span>).<span class="title function_">value</span>(<span class="string">&#x27;_self&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The application code can do the following:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">form.<span class="property">target</span> = <span class="string">&#x27;test_blank&#x27;</span></span><br></pre></td></tr></table></figure><p>Yet, the form element will always submit in the current browser window, because the <code>form.target</code> will always remain <code>_self</code>.</p><h2><span id="resethistory">resetHistory</span></h2><p>Sinon spies&#x2F;stubs keep the history of their calls. We can reset the history whenever we want</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test subject</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="title function_">birthday</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> += <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// spy on the subject&#x27;s method</span></span><br><span class="line">cy.<span class="title function_">spy</span>(person, <span class="string">&#x27;birthday&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;birthday&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">wrap</span>(person)</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// the application calls the method twice</span></span><br><span class="line">    person.<span class="title function_">birthday</span>()</span><br><span class="line">    person.<span class="title function_">birthday</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// verify the spy recorded two calls</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;@birthday&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledTwice&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;@birthday&#x27;</span>).<span class="title function_">its</span>(<span class="string">&#x27;callCount&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// reset the spy&#x27;s history</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;@birthday&#x27;</span>).<span class="title function_">invoke</span>(<span class="string">&#x27;resetHistory&#x27;</span>)</span><br><span class="line"><span class="comment">// the spy call count and the history have been cleared</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;@birthday&#x27;</span>).<span class="title function_">its</span>(<span class="string">&#x27;callCount&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;@birthday&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.have.been.called&#x27;</span>)</span><br></pre></td></tr></table></figure><h2><span id="restore">restore</span></h2><p>When you no longer want to use the stub, call <code>.restore()</code> method on the stub</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Joe&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">expect</span>(person.<span class="title function_">getName</span>(), <span class="string">&#x27;true name&#x27;</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&#x27;Joe&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">stub</span>(person, <span class="string">&#x27;getName&#x27;</span>).<span class="title function_">returns</span>(<span class="string">&#x27;Cliff&#x27;</span>)</span><br><span class="line"><span class="title function_">expect</span>(person.<span class="title function_">getName</span>(), <span class="string">&#x27;mock name&#x27;</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&#x27;Cliff&#x27;</span>)</span><br><span class="line"><span class="comment">// restore the original method</span></span><br><span class="line">person.<span class="property">getName</span>.<span class="title function_">restore</span>()</span><br><span class="line"><span class="title function_">expect</span>(person.<span class="title function_">getName</span>(), <span class="string">&#x27;restored name&#x27;</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&#x27;Joe&#x27;</span>)</span><br></pre></td></tr></table></figure><p>If use have a Cypress alias, you can also invoke the <code>restore</code> method:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Joe&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">expect</span>(person.<span class="title function_">getName</span>(), <span class="string">&#x27;true name&#x27;</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&#x27;Joe&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">stub</span>(person, <span class="string">&#x27;getName&#x27;</span>).<span class="title function_">returns</span>(<span class="string">&#x27;Cliff&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;getName&#x27;</span>)</span><br><span class="line"><span class="title function_">expect</span>(person.<span class="title function_">getName</span>(), <span class="string">&#x27;mock name&#x27;</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&#x27;Cliff&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;@getName&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">  .<span class="title function_">invoke</span>(<span class="string">&#x27;restore&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(person.<span class="title function_">getName</span>(), <span class="string">&#x27;restored name&#x27;</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&#x27;Joe&#x27;</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2><span id="learn-more">Learn more</span></h2><ul><li><a href="/blog/lock-down-sinon-stub/" title="Lock Down Sinon Stub">Lock Down Sinon Stub</a></li><li><a href="/blog/mocha-and-sinon/" title="How to set up Mocha with Sinon.js">How to set up Mocha with Sinon.js</a></li><li><a href="/blog/spying-on-methods/" title="Spying on methods">Spying on methods</a></li><li><a href="https://on.cypress.io/stub">cy.stub</a>, <a href="https://on.cypress.io/spy">cy.spy</a> commands</li><li><a href="https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html">Stubs, spies, and clock examples</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://sinonjs.org/&quot;&gt;Sinon.js&lt;/a&gt; is my favorite JavaScript library for spying and stubbing object methods. This blog post desc
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress v10 Environment Variables</title>
    <link href="https://glebbahmutov.com/blog/cypress-v10-env/"/>
    <id>https://glebbahmutov.com/blog/cypress-v10-env/</id>
    <published>2022-06-28T04:00:00.000Z</published>
    <updated>2022-06-28T22:23:21.785Z</updated>
    
    <content type="html"><![CDATA[<p>Cypress tests have two different sets of values: the config values and the user values. The config values are controlling the test runner itself: the spec pattern, the viewport resolution, even the <code>baseUrl</code> is the config value (which is why you need to set it using the config block, see the video <a href="https://www.youtube.com/watch?v=f5UaXuAc52c&feature=youtu.be">How to correctly use the baseUrl to visit a site in Cypress</a>). The user values are everything else: the username and the password to enter into the site under the test, the API key to use with the <code>cy.request</code> command, the item name to search for. These values are called in Cypress-speak &quot;env values&quot; and you can access them using the <a href="https://on.cypress.io/env">Cypress.env</a> command.</p><p>Cypress v10 has merged the plugins file with the <code>cypress.json</code> file into a single <code>cypress.config.js</code> file. By adding the <a href="https://on.cypress.io/component-testing">component testing</a> into the mix, the config file is confusing: where should we add our user values? Should they go into the top-level <code>env</code> object? Or be under the <code>e2e</code> property? What if we put them into both places? And how can we control these values using the <code>setupNodeEvents</code> callback? Let&#39;s start playing with the source code in <a href="https://github.com/bahmutov/cypress-env-v10-example">bahmutov&#x2F;cypress-env-v10-example</a> repo:</p><figure class="highlight js"><figcaption><span>cypress.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="comment">// our project does not use fixture files</span></span><br><span class="line">  <span class="attr">fixturesFolder</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="comment">// user values block 1</span></span><br><span class="line">    <span class="attr">level</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">e2e</span>: &#123;</span><br><span class="line">    <span class="comment">// our project does not need the support file</span></span><br><span class="line">    <span class="attr">supportFile</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">env</span>: &#123;</span><br><span class="line">      <span class="comment">// user values block 2</span></span><br><span class="line">      <span class="attr">level</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">e2e</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setupNodeEvents</span>(<span class="params">on, config</span>) &#123;</span><br><span class="line">      <span class="comment">// can we control the &quot;env&quot; object here?</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>So what do we see for the above configuration? Launch the Test Runner and look at the &quot;Settings&quot; tab right under the &quot;Specs&quot; tab. Look at the &quot;Project Settings&quot;. Scroll down to the &quot;Resolved configuration&quot;, which is a large object. We see <em>only the environment variables from the e2e block</em>. The top level config object is meant <em>only</em> for the test runner&#39;s own configuration properties.</p><p><img src="../images/v10-env/env1.png" alt="The resolved Cypress env object"></p><p>So here is our first find: no root level <code>env</code> block.</p><p><img src="../images/v10-env/block.png" alt="You should place the env object in the e2e object"></p><h2><span id="custom-logic">Custom logic</span></h2><p>What about the <code>setupNodeEvents</code> callback? What can it do for our user values? Notice that it gets the <code>config</code> passed as the second argument. Let&#39;s print the <code>config.env</code> to the terminal.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setupNodeEvents(on, config) &#123;</span><br><span class="line">  // can we control the &quot;env&quot; object here?</span><br><span class="line">  console.log(config.env)</span><br><span class="line">&#125;,</span><br><span class="line">// prints</span><br><span class="line">&#123; level: 2, e2e: true &#125;</span><br></pre></td></tr></table></figure><p>Great, so whatever you see in the resolved project settings is also passed into the <code>setupNodeEvents</code> callback. But there is more: you can <em>change</em> the <code>config.env</code> object in that callback. You can remove &#x2F; change &#x2F; add new values to that object! Just remember to <strong>return the updated config object</strong> from the <code>setupNodeEvents</code> callback (I forget to return it regularly, and then curse myself hours later when I notice the mistake).</p><p>The <code>cypress.config.js</code> file runs from a Node (Electron) Cypress process, thus it can access your local environment, unlike the spec or support files that run in the browser. Thus we can access the process environment variables, or read local files, etc. For example, let&#39;s say we want to pass the username and the password to our tests. We could use the process environment variables to do this securely:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ USERNAME=Joe PASSWORD=Smart12345 npx cypress open</span><br></pre></td></tr></table></figure><p>Here is what we could do in our <code>cypress.config.js</code> file to use the <code>USERNAME</code> and the <code>PASSWORD</code> values</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setupNodeEvents</span>(<span class="params">on, config</span>) &#123;</span><br><span class="line">  <span class="comment">// set any additional user values</span></span><br><span class="line">  config.<span class="property">env</span>.<span class="property">registered</span> = <span class="literal">true</span></span><br><span class="line">  config.<span class="property">env</span>.<span class="property">user</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: process.<span class="property">env</span>.<span class="property">USERNAME</span>,</span><br><span class="line">    <span class="attr">password</span>: process.<span class="property">env</span>.<span class="property">PASSWORD</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// REMEMBER TO RETURN THE CHANGED CONFIG OBJECT</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>Open the Test Runner with <code>USERNAME=Joe PASSWORD=Smart12345 npx cypress open</code> command and see the resolved config; it now includes the <code>e2e.env</code> object plus the values added by the <code>setupNodeEvents</code> callback</p><p><img src="../images/v10-env/combined.png" alt="The resolved env object with inserted values"></p><blockquote class="pullquote"><p>üí° Windows OS has its own syntax for <a href="https://www.howtogeek.com/789660/how-to-use-windows-cmd-environment-variables/">setting the process environment variables</a>. No matter what your operating system is, I recommend using <a href="https://github.com/bahmutov/as-a">as-a</a> to inject such values.</p></blockquote><h2><span id="cypress-prefix">Cypress prefix</span></h2><p>Instead of reading the <code>process.env</code> values in the <code>setupNodeEvents</code> callback, we can let Cypress automatically read these values. Cypress is nice enough to automatically read any process environment values that start with the <code>CYPRESS_</code> prefix, and if the name does not match any built-in config values, it is added to the <code>env</code> object automatically. Let&#39;s remove our custom logic from the <code>cypress.config.js</code> file</p><figure class="highlight js"><figcaption><span>cypress.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// go back to printing the parsed `config.env` object</span></span><br><span class="line"><span class="title function_">setupNodeEvents</span>(<span class="params">on, config</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(config.<span class="property">env</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We could have achieved the same <code>env</code> object by opening Cypress with the following process environment variables</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ CYPRESS_registered=true \</span><br><span class="line">  CYPRESS_user=&#x27;&#123;&quot;name&quot;:&quot;Joe&quot;,&quot;password&quot;:&quot;Smart12345&quot;&#125;&#x27; \</span><br><span class="line">  npx cypress open</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  level: 2,</span><br><span class="line">  e2e: true,</span><br><span class="line">  user: &#123; name: &#x27;Joe&#x27;, password: &#x27;Smart12345&#x27; &#125;,</span><br><span class="line">  registered: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cypress automatically parses such variables, making sure they have the right type, and any JSON stringified objects are parsed into the JS objects.</p><h2><span id="recommended-reading">Recommended reading</span></h2><ul><li><a href="/blog/keep-passwords-secret-in-e2e-tests/" title="Keep passwords secret in E2E tests">Keep passwords secret in E2E tests</a></li><li><a href="/blog/secrets-to-env/" title="Set All Cypress Env Values Using A Single GitHub Actions Secret">Set All Cypress Env Values Using A Single GitHub Actions Secret</a></li><li><a href="https://on.cypress.io/environment-variables">Cypress environment variables documentation</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Cypress tests have two different sets of values: the config values and the user values. The config values are controlling the test runner
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress v10 Tips and Tricks</title>
    <link href="https://glebbahmutov.com/blog/cypress-v10-tips/"/>
    <id>https://glebbahmutov.com/blog/cypress-v10-tips/</id>
    <published>2022-06-21T04:00:00.000Z</published>
    <updated>2022-07-27T14:41:33.679Z</updated>
    
    <content type="html"><![CDATA[<p>This blog post collects my tips for using Cypress v10+ which is a large step after the previous versions of Cypress. I plan to add more tips to this blog post as I use v10 more. See my post <a href="/blog/cypress-tips-and-tricks/" title="Cypress Tips and Tricks">Cypress Tips and Tricks</a> for more content; most of it still applies to Cypress v10+ tests.</p><!-- toc --><ul><li><a href="#learn-cypress-v10-fundamentals">Learn Cypress v10 Fundamentals</a></li><li><a href="#register-the-plugins">Register the plugins</a></li><li><a href="#launch-the-test-runner-in-the-desired-mode">Launch the test runner in the desired mode</a></li><li><a href="#quickly-change-the-testing-type">Quickly change the testing type</a></li><li><a href="#run-all-specs">Run all specs</a></li><li><a href="#run-e2e-and-component-tests-on-ci">Run E2E and component tests on CI</a></li><li><a href="#check-the-mode-from-the-config-file">Check the mode from the config file</a></li><li><a href="#set-the-user-values-using-the-env-block">Set the user values using the env block</a></li><li><a href="#overwrite-cylog-to-print-to-the-terminal">Overwrite <code>cy.log</code> to print to the terminal</a></li><li><a href="#stub-an-es6-import">Stub an ES6 import</a></li><li><a href="#collect-the-component-code-coverage">Collect the component code coverage</a></li><li><a href="#slow-down-cypress-tests">Slow down Cypress tests</a></li><li><a href="#migrate-your-angular-tests-from-protractor">Migrate your Angular tests from Protractor</a></li></ul><!-- tocstop --><h2><span id="learn-cypress-v10-fundamentals">Learn Cypress v10 Fundamentals</span></h2><p>The best way to start learning E2E and component testing in Cypress v10 is to go through my FREE course &quot;Cypress version 10 Fundamentals&quot; hosted by <a href="https://www.blazemeter.com/university">BlazeMeter University</a>.</p><ul><li>go to the BlazeMeter University <a href="https://university.blazemeter.com/">Login screen</a></li><li>create a free account and log in</li><li>find my course by name &quot;Cypress ...&quot; and enroll</li></ul><p><img src="../images/cypress-v10-tips/blazemeter.png" alt="Cypress v10 Fundamentals course"></p><p><strong>Tip:</strong> after learning the Cypress fundamentals, continue learning by taking my courses <a href="https://cypress.tips/courses/network-testing">Cypress Network Testing Exercises</a> and <a href="https://cypress.tips/courses/cypress-plugins">Cypress Plugins</a>.</p><h2><span id="register-the-plugins">Register the plugins</span></h2><p>Cypress v10+ has merged the <code>cypress.json</code> and the <code>cypress/plugins/index.js</code> files into a single <code>cypress.config.js</code> file. The plugins that you have registered before now should be registered in the <code>e2e / setupNodeEvents</code> method. For example, the <a href="https://github.com/bahmutov/cypress-high-resolution">cypress-high-resolution</a> used to be registered like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cypress/plugins/index.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://github.com/bahmutov/cypress-high-resolution</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;cypress-high-resolution&#x27;</span>)(on, config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In Cypress v10 it should be registered as</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cypress.config.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">e2e</span>: &#123;</span><br><span class="line">    <span class="title function_">setupNodeEvents</span>(<span class="params">on, config</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">&#x27;./cypress/plugins/index.js&#x27;</span>)(on, config)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> the Cypress migration wizard moves the plugins file automatically and it worked pretty well for me.</p><p><img src="../images/cypress-v10-tips/migration.png" alt="The migration wizard moving the plugins file to the config file"></p><h2><span id="launch-the-test-runner-in-the-desired-mode">Launch the test runner in the desired mode</span></h2><p>When using <code>cypress open</code> command, we have to pick the testing type and then pick the browser before we can click on the spec to run. This requires extra clicks just to get to the desired list of specs. You can shorten the process via command line arguments (which you can always look up using <code>cypress open --help</code>), for example to open e2e tests using the Electron browser:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cypress open --e2e --browser electron</span><br></pre></td></tr></table></figure><p>If you want to start component testing using the Chrome browser:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cypress open --component --browser chrome</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> you can still use <a href="https://github.com/bahmutov/start-server-and-test">start-server-and-test</a> to launch the application server when doing e2e testing. For example, here are my NPM scripts from the <code>package.json</code> file</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts start&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eject&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts eject&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;start-test 3000 cy:e2e&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;e2e&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cypress open --e2e --browser electron&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;comp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cypress open --component --browser electron&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>If I want to run just the component tests, I use <code>npm run comp</code> command. If I plan to run the E2E tests, I use <code>npm run dev</code> script which starts the application and opens Cypress in the E2E testing mode.</p><h2><span id="quickly-change-the-testing-type">Quickly change the testing type</span></h2><p>When running the tests, you can quickly switch from E2E to Component testing and back. Click on the test type icon in the top left corner.</p><p><img src="../images/cypress-v10-tips/icon.png" alt="Click on the testing type icon"></p><p>This brings the testing type modal dialog where you can switch to E2E testing</p><p><img src="../images/cypress-v10-tips/pick.png" alt="Pick the other testing type"></p><h2><span id="run-all-specs">Run all specs</span></h2><p>Cypress v10 has removed the &quot;Run all specs&quot; button. To learn how to get around it, read my blog post <a href="/blog/run-all-specs-cypress-v10/" title="Run All Specs in Cypress v10">Run All Specs in Cypress v10</a>.</p><h2><span id="run-e2e-and-component-tests-on-ci">Run E2E and component tests on CI</span></h2><p>If you are using the <a href="https://github.com/cypress-io/github-action">Cypress GitHub Action</a>, you need to upgrade to v4 to correctly install the dependencies and run the tests. For example, if you plan to run the component tests before running e2e tests (because it is faster), then do the following in your GitHub workflow</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">E2E</span> <span class="string">tests</span> <span class="string">üß™</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v4</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="comment"># to run component tests we need to use &quot;component: true&quot;</span></span><br><span class="line">    <span class="attr">component:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">Component</span> <span class="string">tests</span> <span class="string">üß™</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v4</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="comment"># we have already installed everything</span></span><br><span class="line">    <span class="attr">install:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># start the application before running</span></span><br><span class="line">    <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br></pre></td></tr></table></figure><p>Similarly, if you use <a href="https://github.com/cypress-io/circleci-orb">Cypress CircleCI Orb</a>, you would need to use v2</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@2</span></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="comment"># check out the code, install the dependencies</span></span><br><span class="line">      <span class="comment"># and run just the component tests</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">component:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2><span id="check-the-mode-from-the-config-file">Check the mode from the config file</span></h2><p>If you are trying to decide if the user is running cypress using the <code>cypress open</code> or the <code>cypress run</code> command, you can look at the <code>config.isTextTerminal</code> property. It is set to true during the <code>run</code> non-interactive mode.</p><figure class="highlight js"><figcaption><span>cypress.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">e2e</span>: &#123;</span><br><span class="line">    <span class="title function_">setupNodeEvents</span>(<span class="params">on, config</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (config.<span class="property">isTextTerminal</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;cypress run!)</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure><h2><span id="set-the-user-values-using-the-env-block">Set the user values using the env block</span></h2><p>Read the blog post <a href="/blog/cypress-v10-env/" title="Cypress v10 Environment Variables">Cypress v10 Environment Variables</a>.</p><h2><span id="overwrite-cylog-to-print-to-the-terminal">Overwrite <code>cy.log</code> to print to the terminal</span></h2><p>You can overwrite the <code>cy.log</code> command to print the message both to the Command Log and to the terminal. See the code in the <a href="https://github.com/bahmutov/cypress-log-to-term">bahmutov&#x2F;cypress-log-to-term</a> repo.</p><figure class="highlight js"><figcaption><span>spec.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cypress</span>.<span class="property">Commands</span>.<span class="title function_">overwrite</span>(<span class="string">&#x27;log&#x27;</span>, <span class="function">(<span class="params">log, message, ...args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// print the to Cypress Command Log</span></span><br><span class="line">  <span class="comment">// to preserve the existing functionality</span></span><br><span class="line">  <span class="title function_">log</span>(message, ...args)</span><br><span class="line">  <span class="comment">// send the formatted message down to the Node</span></span><br><span class="line">  <span class="comment">// callback in the cypress.config.js to be printed to the terminal</span></span><br><span class="line">  cy.<span class="title function_">task</span>(<span class="string">&#x27;print&#x27;</span>, [message, ...args].<span class="title function_">join</span>(<span class="string">&#x27;, &#x27;</span>), &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;prints log messages&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setupNodeEvents</span>(<span class="params">on, config</span>) &#123;</span><br><span class="line">  <span class="title function_">on</span>(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">print</span>(<span class="params">s</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-v10-tips/log.png" alt="Logs the messages to the Command Log and the terminal"></p><h2><span id="stub-an-es6-import">Stub an ES6 import</span></h2><p>Read the blog post <a href="/blog/stub-react-import/" title="Stub an import from a Cypress v10 component test">Stub an import from a Cypress v10 component test</a>.</p><h2><span id="collect-the-component-code-coverage">Collect the component code coverage</span></h2><p>Read the blog post <a href="/blog/component-code-coverage/" title="Component Code Coverage in Cypress v10">Component Code Coverage in Cypress v10</a>.</p><h2><span id="slow-down-cypress-tests">Slow down Cypress tests</span></h2><p>This tip works both with Cypress v9 and v10. You can slow down each Cypress command by X milliseconds using my plugin <a href="https://github.com/bahmutov/cypress-slow-down">cypress-slow-down</a>. Watch the video below:</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/lxx-_nAkQo8" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="migrate-your-angular-tests-from-protractor">Migrate your Angular tests from Protractor</span></h2><p>Use the <a href="https://migrator.cypress.io/">migrator.cypress.io</a> tool from Cypress team.</p><p><img src="../images/cypress-v10-tips/migrator.png" alt="Migrating an example Protractor test to Cypress"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This blog post collects my tips for using Cypress v10+ which is a large step after the previous versions of Cypress. I plan to add more t
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Test App From Another Repo</title>
    <link href="https://glebbahmutov.com/blog/test-app/"/>
    <id>https://glebbahmutov.com/blog/test-app/</id>
    <published>2022-06-11T04:00:00.000Z</published>
    <updated>2022-06-11T11:16:26.554Z</updated>
    
    <content type="html"><![CDATA[<p>I have created <a href="https://cypress.tips/courses">Cypress Network Testing Course</a> with 90+ test exercises for anyone who wants to learn <a href="https://on.cypress.io/intercept">cy.intercept</a>, <a href="https://on.cypress.io/request">cy.request</a>, and other Cypress commands. The starting exercise specs are in the repo <a href="https://github.com/bahmutov/fastify-example-tests">bahmutov&#x2F;fastify-example-tests</a>. Each exercise is a test to be filled out by the user, something like this:</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows the fruit returned by the server&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// spy on the network call the application makes</span></span><br><span class="line">  <span class="comment">// tip: use https://on.cypress.io/intercept</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// visit the page</span></span><br><span class="line">  <span class="comment">// https://on.cypress.io/visit</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// wait for the app to make the network call</span></span><br><span class="line">  <span class="comment">// (there might be a delay)</span></span><br><span class="line">  <span class="comment">// https://on.cypress.io/wait</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// from the network call, get the response body</span></span><br><span class="line">  <span class="comment">// and the name of the fruit and confirm</span></span><br><span class="line">  <span class="comment">// the fruit is shown on the page</span></span><br><span class="line">  <span class="comment">// https://on.cypress.io/its</span></span><br><span class="line">  <span class="comment">// https://on.cypress.io/then</span></span><br><span class="line">  <span class="comment">// https://on.cypress.io/contains</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Each lesson has a video showing how I implement the above starting code until it really does what the comments say. To make sure all answers are correct I have another repository with answers to each lesson. That repo <a href="https://github.com/bahmutov/fastify-example-answers">bahmutov&#x2F;fastify-example-answers</a> is private, of course. I don&#39;t want everyone to just look at the answer and say &quot;Yeah, this is how I would write this test&quot;. How do I know the answers are correct, especially as I upgrade Cypress version?</p><p><img src="../images/test-app/tweet.png" alt="Test answers work when upgrading from Cypress v9 to v10"></p><p>I run them against the application using <code>cypress run</code>, of course! The test application lives in the repo <a href="https://github.com/bahmutov/fastify-example">bahmutov&#x2F;fastify-example</a>, luckily it is easy to check out both repos using <a href="/blog/trying-github-actions/" title="GitHub Actions">GitHub Actions</a>. Here is my workflow file from <code>fastify-example-answers</code> repo that checks out both repos, installs the app&#39;s dependencies, starts the application in the background, and runs all Cypress tests.</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">this</span> <span class="string">repo</span> <span class="string">üõé</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">the</span> <span class="string">application</span> <span class="string">repo</span> <span class="string">üõé</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">bahmutov/fastify-example</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">app</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">app</span> <span class="string">dependencies</span> <span class="string">üì¶</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">bahmutov/npm-install@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">working-directory:</span> <span class="string">app</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Start</span> <span class="string">the</span> <span class="string">application</span> <span class="string">üé¨</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          cd app</span></span><br><span class="line"><span class="string">          npm run start &amp;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">üß™</span></span><br><span class="line">        <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v3</span></span><br></pre></td></tr></table></figure><p>Every time I push a commit to <code>fastify-example-answers</code>, it is tested by the CI. The current status is shown in the README badge.</p><p><img src="../images/test-app/badges.png" alt="The GitHub Actions workflow status badge"></p><p><strong>Bonus:</strong> the Cypress version badge is created by my own little utility <a href="https://github.com/bahmutov/dependency-version-badge">dependency-version-badge</a>. Here is the GitHub Actions workflow that periodically updates it and pushes the changed README.md file if needed.</p><figure class="highlight yml"><figcaption><span>.github/workflows/badges.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">badges</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="comment"># update README badge only if the README file changes</span></span><br><span class="line">    <span class="comment"># or if the package.json file changes, or this file changes</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">README.md</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">package.json</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.github/workflows/badges.yml</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="comment"># update badges every night</span></span><br><span class="line">    <span class="comment"># because we have a few badges that are linked</span></span><br><span class="line">    <span class="comment"># to the external repositories</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;0 5 * * *&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">badges:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Badges</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">üõé</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Update</span> <span class="string">version</span> <span class="string">badges</span> <span class="string">üè∑</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npx</span> <span class="string">-p</span> <span class="string">dependency-version-badge</span> <span class="string">update-badge</span> <span class="string">cypress</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Commit</span> <span class="string">any</span> <span class="string">changed</span> <span class="string">files</span> <span class="string">üíæ</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">stefanzweifel/git-auto-commit-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">commit_message:</span> <span class="string">Updated</span> <span class="string">badges</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line">          <span class="attr">file_pattern:</span> <span class="string">README.md</span></span><br></pre></td></tr></table></figure><p>Read the blog post <a href="/blog/keep-examples-up-to-date/" title="Keep Examples Up To Date">Keep Examples Up To Date</a> to learn more about dependencies and version badges.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have created &lt;a href=&quot;https://cypress.tips/courses&quot;&gt;Cypress Network Testing Course&lt;/a&gt; with 90+ test exercises for anyone who wants to 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Run All Specs in Cypress v10</title>
    <link href="https://glebbahmutov.com/blog/run-all-specs-cypress-v10/"/>
    <id>https://glebbahmutov.com/blog/run-all-specs-cypress-v10/</id>
    <published>2022-06-04T04:00:00.000Z</published>
    <updated>2022-06-11T10:50:51.265Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Note:</strong> Cypress v10 has removed the &quot;Run all&quot; specs button because of its technical limitations, see the <a href="/blog/run-all-specs/" title="Be careful when running all specs together">Be careful when running all specs together</a> blog post. You can voice your feedback by commenting on the issue <a href="https://github.com/cypress-io/cypress/discussions/21628">#21628</a>. This blog post explains my workaround for running all specs together (or some specs only).</p><p><strong>Video:</strong> if you would rather watch the explanation, I have recorded the video &quot;<a href="https://youtu.be/z56rRoh0z_c">How To Run All Specs In Cypress v10</a>&quot; below, part of my <a href="https://www.youtube.com/playlist?list=PLP9o9QNnQuAYYRpJzDNWpeuOVTwxmIxcI">Cypress Tips &amp; Tricks Playlist</a>.</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/z56rRoh0z_c" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Let&#39;s say I have 3 End-to-End spec files. I can run each spec by clicking on it.</p><p><img src="../images/run-all/one-spec.png" alt="Running one spec at a time using Cypress v10"></p><p>Ok, so how do I run <em>all 3 specs together</em>? Hmm. That is a conundrum.</p><p>Here is what you do. Create a new e2e spec that just imports all other specs.</p><figure class="highlight js"><figcaption><span>cypress/e2e/all.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./clock.cy&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./play.cy&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./spec.cy&#x27;</span></span><br></pre></td></tr></table></figure><p>Click on the &quot;all.cy.js&quot; spec in Cypress and voil√† - you got all your specs running together, just like the good old days.</p><p><img src="../images/run-all/all.png" alt="Running all specs together"></p><p>Want to run just the test files &quot;spec.cy.js&quot; and &quot;clock.cy.js&quot; together? Comment out the &quot;play.cy&quot; import</p><figure class="highlight js"><figcaption><span>cypress/e2e/all.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./clock.cy&#x27;</span></span><br><span class="line"><span class="comment">// import &#x27;./play.cy&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./spec.cy&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="../images/run-all/two.png" alt="Skipping the play.cy.js spec file"></p><h2><span id="continuous-integration">Continuous integration</span></h2><p>What about the CI? We don&#39;t want to run all specs individually AND run them again by hitting the <code>all.cy.js</code> spec file on CI? You can <em>exclude</em> the <code>all.cy.js</code> when running the tests on CI</p><figure class="highlight js"><figcaption><span>cypress.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">e2e</span>: &#123;</span><br><span class="line">    <span class="attr">baseUrl</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">    <span class="attr">excludeSpecPattern</span>: process.<span class="property">env</span>.<span class="property">CI</span> ? [<span class="string">&#x27;cypress/e2e/all.cy.js&#x27;</span>] : [],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">component</span>: &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">framework</span>: <span class="string">&#x27;create-react-app&#x27;</span>,</span><br><span class="line">      <span class="attr">bundler</span>: <span class="string">&#x27;webpack&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If we run the tests locally using <code>cypress run</code> we see 4 specs included</p><p><img src="../images/run-all/local.png" alt="All specs are included by default"></p><p>But when we simulate the Continuous Integration server by setting the <code>CI=1</code> environment variable we see the <code>all.cy.js</code> spec file skipped, so only the real test files run.</p><p><img src="../images/run-all/ci.png" alt="The all.cy.js spec file skilled on CI"></p><p>Happy Cypress v10 testing</p><p><strong>PS:</strong> it would be nice to know in the <code>cypress.config.js</code> file if we are running using the <code>cypress open</code> or <code>cypress run</code> mode.</p><h2><span id="update-1-skip-the-allcyjs-spec-when-using-the-cypress-run-command">Update 1: skip the all.cy.js spec when using the cypress run command</span></h2><p>I have recorded <a href="https://www.youtube.com/watch?v=butlgoP4SzI">a video</a> showing how to automatically ignore the <code>all.cy.js</code> spec when using the <code>cypress run</code> command. Hint: we will use the <code>config.isTextTerminal</code> property to determine if Cypress is running using <code>cypress run</code> or <code>cypress open</code> mode.</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/butlgoP4SzI" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>In short, you can return changed config options from the <code>setupNodeEvents</code> method. To determine the <code>run</code> mode you can look at the <code>config.isTextTerminal</code> property.</p><figure class="highlight js"><figcaption><span>cypress.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">projectId</span>: <span class="string">&#x27;1qsjjk&#x27;</span>,</span><br><span class="line">  <span class="attr">e2e</span>: &#123;</span><br><span class="line">    <span class="attr">baseUrl</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">    <span class="title function_">setupNodeEvents</span>(<span class="params">on, config</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (config.<span class="property">isTextTerminal</span>) &#123;</span><br><span class="line">        <span class="comment">// skip the all.cy.js spec in &quot;cypress run&quot; mode</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">excludeSpecPattern</span>: [<span class="string">&#x27;cypress/e2e/all.cy.js&#x27;</span>],</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Cypress v10 has removed the &amp;quot;Run all&amp;quot; specs button because of its technical limitations, see the &lt;a href
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>How We Run The Mobile Web Browser Tests at Mercari US</title>
    <link href="https://glebbahmutov.com/blog/mobile-tests/"/>
    <id>https://glebbahmutov.com/blog/mobile-tests/</id>
    <published>2022-05-19T04:00:00.000Z</published>
    <updated>2022-05-19T14:24:25.738Z</updated>
    
    <content type="html"><![CDATA[<p>At <a href="https://www.mercari.com/">Mercari US</a> users can buy and sell things. While most of the application traffic comes from our mobile application (which we <a href="https://medium.com/mercari-engineering/why-we-decided-to-rewrite-our-ios-android-apps-from-scratch-in-react-native-9f1737558299">are rewriting as a ReactNative App right now</a>), a big chunk of users use Mercari via web browsers, both desktop and mobile. The mobile web application is not simply a responsive version of the app, but it renders a lot of web components differently, and processes different user events, like &quot;touch&quot; instead of &quot;click.</p><p><img src="../images/mobile-tests/r-vs-web.png" alt="Responsive web vs mobile emulation Mercari home page"></p><p>In the right image above, I simulate a mobile web browser using Chrome DevTools mobile browser emulation.</p><p><img src="../images/mobile-tests/emulate.png" alt="The DevTools mobile web browser emulation"></p><p>The mobile web browser emulation works by attaching a custom &quot;user-agent&quot; header to every outgoing request. The Mercari web server looks at that request to determine what page to serve (including different CSS and JS bundles). Thus the page looks and behaves differently from the normal desktop page. How do we test the mobile version of the web page using Cypress Test Runner?</p><h2><span id="mobile-tests">Mobile tests</span></h2><p>We must request pages using the same emulation &quot;user-agent&quot; header. Cypress includes a <a href="https://on.cypress.io/configuration">configuration option</a> that let&#39;s you set an arbitrary <code>userAgent</code> value to sent with each request. The value does not even have to be very complicated. For example, in our NPM scripts, we have a command to run the &quot;normal&quot; desktop Cypress tests, and another command to open Cypress with a mobile user agent and set the app viewport to 400 by 600 pixels:</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;cy:open&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cypress open&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cy:open:mobile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cypress open --config viewportWidth=400,viewportHeight=600,</span></span><br><span class="line"><span class="string">      userAgent=\&quot;Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) Mobile/14E304\&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>When we execute <code>npm run cy:open:mobile</code> or <code>yarn cy:open:mobile</code> the configuration options <code>--config ...</code> are applied and set the viewport of the browser to <code>400x600</code> pixels, and set the &quot;user-agent&quot; header to a simplified string the backend server still considers a mobile browser client. Here is how a typical mobile test looks when running:</p><p><img src="../images/mobile-tests/mobile.png" alt="Typical mobile test"></p><p>Not every test needs to be executed in the mobile web browser emulation mode. While we have 500+ full end-to-end tests, only about 75 tests are meant to exercise mobile-specific web flows. We <a href="/blog/tag-tests/" title="tag tests">tag tests</a> to mark the tests that have mobile-specific features. The test above is defined as both a regression and a mobile test.</p><figure class="highlight js"><figcaption><span>buy-and-change-payment-method.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;Can change payment method on checkout&#x27;</span>,</span><br><span class="line">  &#123; <span class="attr">tags</span>: [<span class="string">&#x27;@regression&#x27;</span>, <span class="string">&#x27;@mobile&#x27;</span>] &#125;,</span><br><span class="line">  <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">signup</span>(seller)</span><br><span class="line">    cy.<span class="title function_">createListing</span>(&#123; name, price &#125;)</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>üí° For tagging individual tests and suites of tests, we use my <a href="https://github.com/cypress-io/cypress-grep">cypress-grep</a> plugin. For finding all tests tagged &quot;@mobile&quot; we use my <a href="https://github.com/bahmutov/find-cypress-specs">find-cypress-specs</a> utility.</p></blockquote><h2><span id="fast-feedback">Fast feedback</span></h2><p>It is extremely important to get early results when running lots of end-to-end tests. Whenever someone opens a pull request, we first run a CI job that only runs any new and modified spec files. Read my blog posts <a href="/blog/faster-ci-feedback/" title="Get Faster Feedback From Your Cypress Tests Running On GitHub Actions">Get Faster Feedback From Your Cypress Tests Running On GitHub Actions</a> and <a href="/blog/faster-ci-feedback-on-circleci/" title="Get Faster Feedback From Your Cypress Tests Running On CircleCI">Get Faster Feedback From Your Cypress Tests Running On CircleCI</a> how we do this. For mobile spec specifically, we have a separate CI step that runs any specs with the found <code>@mobile</code> tag inside using <code>cypress run --config viewport,userAgent=mobile..</code> command. The relevant CircleCI command is below</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># find all changed or new specs with the test tag &quot;@mobile&quot; inside</span><br><span class="line">specs=$(npx find-cypress-specs --branch main --parent --tagged @mobile)</span><br><span class="line">n=$(npx find-cypress-specs --branch main --parent --tagged @mobile --count)</span><br><span class="line">echo &quot;&quot;</span><br><span class="line">echo &quot;Changed and added $&#123;n&#125; Cypress mobile specs&quot;</span><br><span class="line">echo $&#123;specs&#125;</span><br><span class="line">echo &quot;&quot;</span><br><span class="line"></span><br><span class="line">if [ $&#123;n&#125; -lt 1 ]; then</span><br><span class="line">  echo &quot;No Cypress mobile specs changed, exiting...&quot;</span><br><span class="line">  exit 0</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># we have to form the Cypress run command ourselves</span><br><span class="line"># to only execute the changed specs using mobile user agent</span><br><span class="line">npx cypress run --record --parallel \</span><br><span class="line">  --group &quot;0. Changed mobile specs&quot; \</span><br><span class="line">  --browser chrome \</span><br><span class="line">  --config viewportWidth=400,viewportHeight=600, \</span><br><span class="line">    userAgent=&quot;Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) Mobile/14E304&quot; \</span><br><span class="line">  --spec $&#123;specs&#125;</span><br></pre></td></tr></table></figure><p>Any changed &quot;normal&quot; specs execute in a different CircleCI job. Only if changed (and added) specs pass, we run a sanity set of tests for each pull request.</p><p><img src="../images/mobile-tests/workflow.png" alt="CircleCI executes the changed specs first"></p><p>Because the changed specs passed in mobile and desktop modes, we can proceed with running all sanity tests in the &quot;Other specs&quot; group.</p><p><img src="../images/mobile-tests/dashboard.png" alt="All test results are recorded on Cypress Dashboard"></p><p><strong>Tip:</strong> the pull request text allows our engineers to run tests by topic or run a larger regression suite of tests, or even run all specs just by checking the PR checkboxes, see the blog post <a href="/blog/pick-tests-using-pull-request/" title="Pick Tests To Run Using The Pull Request Text">Pick Tests To Run Using The Pull Request Text</a>.</p><h2><span id="mobile-specific-steps">Mobile-specific steps</span></h2><p>Some tests should run in desktop and in mobile modes. Thus we need to have the conditional Cypress steps that look at the current user agent configuration setting.</p><figure class="highlight js"><figcaption><span>utils.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isMobile</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> userAgent = <span class="title class_">Cypress</span>.<span class="title function_">config</span>(<span class="string">&#x27;userAgent&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> userAgent &amp;&amp; userAgent.<span class="title function_">includes</span>(<span class="string">&#x27;Mobile&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;isMobile&#125; <span class="keyword">from</span> <span class="string">&#x27;./utils.js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> isMobilePage = <span class="title function_">isMobile</span>()</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;runs this test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span> (isMobilePage) &#123;</span><br><span class="line">    <span class="comment">// mobile page does not have user icon, only nav</span></span><br><span class="line">    cy.<span class="title function_">byTestId</span>(<span class="string">&#x27;InquiriesButtonNav&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;nav img[alt=avatar]&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Because the user agent cannot change while the tests are running, we can check the <code>Cypress.config(&#39;userAgent&#39;)</code> once and then use the value through the spec file.</p><h2><span id="the-next-steps">The next steps</span></h2><p>If you follow my <a href="https://cypress.tips/courses">Cypress Network Testing Exercises</a> course, you might have seen &quot;Bonus 20&quot; lesson that simulates the mobile mode using the <code>cy.intercept</code> command. I am exploring ways to NOT use the <code>userAgent</code> configuration option to run mobile tests, and instead attaching the request header to every outgoing request. Stay tuned.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;At &lt;a href=&quot;https://www.mercari.com/&quot;&gt;Mercari US&lt;/a&gt; users can buy and sell things. While most of the application traffic comes from our 
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Pass The Reference</title>
    <link href="https://glebbahmutov.com/blog/pass-reference/"/>
    <id>https://glebbahmutov.com/blog/pass-reference/</id>
    <published>2022-05-16T04:00:00.000Z</published>
    <updated>2022-05-16T11:34:22.930Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine your code is using a lot of <code>instanceof</code> checks. When running Cypress tests, you might want to also check if a given object is an instance of a given constructor function. The problem is, your specs and the application run in different iframes. Thus a constructor <em>might</em> have the same name (let&#39;s say <code>Alert</code>), but an instance of <code>Alert</code> from the spec&#39;s iframe window is different from an instance of the application&#39;s iframe window. Watch my video below for the introduction to this problem and one possible solution</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/5VJOpg09w2k" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><blockquote class="pullquote"><p>üìù For more, read the the recipe &quot;Be very careful with instanceof assertion&quot; from my <a href="https://glebbahmutov.com/cypress-examples">Cypress examples site</a>.</p></blockquote><p>In this blog post, I will show a general way of how to avoid this problem if you are making objects yourself from the spec. Let&#39;s say we have the following statements in the application and in the Cypress spec files:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// application code in &quot;src&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Alert</span> <span class="keyword">from</span> <span class="string">&#x27;./Alert&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isAlert</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="comment">// uses the imported &quot;Alert&quot; function</span></span><br><span class="line">  <span class="keyword">return</span> a <span class="keyword">instanceof</span> <span class="title class_">Alert</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// cypress/integration/spec.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Alert</span> <span class="keyword">from</span> <span class="string">&#x27;../../src/Alert&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isAlert</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="comment">// uses its own imported &quot;Alert&quot; function</span></span><br><span class="line">  <span class="keyword">return</span> a <span class="keyword">instanceof</span> <span class="title class_">Alert</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you are importing &quot;Alert&quot; from the spec, that this <code>Alert</code> function is <em>different</em> from the Alert imported in the application. If the spec calls <code>isAlert</code> and passes its own objects, the check will fail and return false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cypress/integration/spec.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Alert</span> <span class="keyword">from</span> <span class="string">&#x27;../../src/Alert&#x27;</span></span><br><span class="line"><span class="comment">// if get the instance of alert from the application</span></span><br><span class="line">cy.<span class="title function_">get</span>(...).<span class="title function_">then</span>(... =&gt; &#123;</span><br><span class="line">  <span class="comment">// NOPE, will fail!</span></span><br><span class="line">  <span class="title function_">expect</span>(<span class="title function_">isAlert</span>(appAlert)).<span class="property">to</span>.<span class="property">be</span>.<span class="property">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>So how do we ensure the spec has <em>the same Alert</em> reference as the application? By avoiding importing it and instead getting it from the application. Following the approach outlined in the blog post <a href="/blog/send-data-to-the-test/" title="Send Data From The Application To The Cypress Test">Send Data From The Application To The Cypress Test</a> we do the following in the application:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// application code in &quot;src&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Alert</span> <span class="keyword">from</span> <span class="string">&#x27;./Alert&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">Cypress</span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">Alert</span> = <span class="title class_">Alert</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isAlert</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a <span class="keyword">instanceof</span> <span class="title class_">Alert</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So when the application loads, it &quot;saves&quot; its <code>Alert</code> reference on the <code>window</code> object. From the spec we can get to that reference using the <a href="https://on.cypress.io/window">cy.window</a> and <a href="https://on.cypress.io/its">cy.its</a> commands. Even if it takes a little for the application to load and set the <code>window.Alert</code> no problem, the <code>cy.its</code> command <a href="https://on.cypress.io/retry-ability">retries automatically</a> until that property is found.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cypress/integration/spec.js</span></span><br><span class="line"><span class="comment">// do not import Alert, instead</span></span><br><span class="line">cy.<span class="title function_">window</span>().<span class="title function_">its</span>(<span class="string">&#x27;Alert&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">Alert</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ‚úÖ The Alert instance now comes from the application code</span></span><br><span class="line">  cy.<span class="title function_">get</span>(...).<span class="title function_">then</span>(... =&gt; &#123;</span><br><span class="line">    <span class="title function_">expect</span>(<span class="title function_">isAlert</span>(appAlert)).<span class="property">to</span>.<span class="property">be</span>.<span class="property">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Beautiful.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine your code is using a lot of &lt;code&gt;instanceof&lt;/code&gt; checks. When running Cypress tests, you might want to also check if a given o
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Check More Things Before Clicking</title>
    <link href="https://glebbahmutov.com/blog/check-more-things/"/>
    <id>https://glebbahmutov.com/blog/check-more-things/</id>
    <published>2022-05-11T04:00:00.000Z</published>
    <updated>2022-05-11T11:50:29.895Z</updated>
    
    <content type="html"><![CDATA[<p>I have my <a href="https://cypress.tips/">Cypress.tips</a> site with my <a href="https://cypress.tips/courses">Cypress courses</a> page. It needs some end-to-end tests. Since <a href="https://www.cypress.io/blog/2022/04/25/cypress-9-6-0-easily-test-multi-domain-workflows-with-cy-origin/">Cypress v9.6.0</a> came out, I had no problem logging in using 3rd party authentication provider, see the video <a href="https://www.youtube.com/watch?v=XMJP07Ft1nA">Instant Application Login Via External Domain Using cy.session And cy.origin Commands</a>.</p><p>For testing on CI I used my favorite <a href="/blog/trying-github-actions/" title="GitHub Actions">GitHub Actions</a>. Here is the GitHub workflow file:</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">this</span> <span class="string">repo</span> <span class="string">üõé</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">üß™</span></span><br><span class="line">        <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">yarn</span> <span class="string">dev</span></span><br><span class="line">          <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br></pre></td></tr></table></figure><p>In my first spec, I wanted to log into the course and scroll the list of lessons. You can find the test code in <a href="https://github.com/bahmutov/cypress-tips/pull/13">the pull request #13</a>. I started with one test.</p><figure class="highlight yml"><figcaption><span>cypress/integration/course-login.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">describe(&#x27;Course</span> <span class="string">login&#x27;,</span> &#123; <span class="attr">viewportHeight:</span> <span class="number">1200</span> &#125;<span class="string">,</span> <span class="string">()</span> <span class="string">=&gt;</span> &#123;</span><br><span class="line">  <span class="string">it(&#x27;uses</span> <span class="string">the</span> <span class="string">authentication&#x27;</span>, <span class="string">()</span> <span class="string">=&gt;</span> &#123;</span><br><span class="line">    <span class="string">cy.visit(&#x27;/courses&#x27;)</span></span><br><span class="line">    <span class="string">cy.contains(&#x27;h1&#x27;</span>, <span class="string">&#x27;Courses&#x27;</span><span class="string">).should(&#x27;be.visible&#x27;)</span></span><br><span class="line">    <span class="string">cy.contains(&#x27;button&#x27;</span>, <span class="string">&#x27;Log in&#x27;</span><span class="string">).click()</span></span><br><span class="line"></span><br><span class="line">    <span class="string">//</span> <span class="string">https://on.cypress.io/origin</span></span><br><span class="line">    <span class="string">cy.origin(&#x27;https://auth.coursekit.dev&#x27;</span>, <span class="string">()</span> <span class="string">=&gt;</span> &#123;</span><br><span class="line">      <span class="string">cy.contains(&#x27;#message&#x27;</span>, <span class="string">&#x27;Cypress Tips&#x27;</span><span class="string">).should(&#x27;be.visible&#x27;)</span></span><br><span class="line">      <span class="string">cy.get(&#x27;input#loginId&#x27;)</span></span><br><span class="line">        <span class="string">//</span> <span class="string">hide</span> <span class="string">the</span> <span class="string">email</span> <span class="string">from</span> <span class="string">the</span> <span class="string">video</span></span><br><span class="line">        <span class="string">.invoke(&#x27;attr&#x27;</span>, <span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;password&#x27;</span><span class="string">)</span></span><br><span class="line">        <span class="string">.type(Cypress.env(&#x27;COURSE_EMAIL&#x27;)</span>, &#123; <span class="attr">log:</span> <span class="literal">false</span> &#125;<span class="string">)</span></span><br><span class="line">      <span class="string">cy.get(&#x27;input#password&#x27;).type(Cypress.env(&#x27;COURSE_PASSWORD&#x27;)</span>, &#123;</span><br><span class="line">        <span class="attr">log:</span> <span class="literal">false</span>,</span><br><span class="line">      &#125;<span class="string">)</span></span><br><span class="line">      <span class="string">cy.contains(&#x27;button&#x27;</span>, <span class="string">&#x27;Log In&#x27;</span><span class="string">).click()</span></span><br><span class="line">    &#125;<span class="string">)</span></span><br><span class="line"></span><br><span class="line">    <span class="string">//</span> <span class="string">back</span> <span class="string">to</span> <span class="string">the</span> <span class="string">local</span> <span class="string">courses</span> <span class="string">page</span></span><br><span class="line">    <span class="string">cy.location(&#x27;pathname&#x27;).should(&#x27;equal&#x27;</span>, <span class="string">&#x27;/courses&#x27;</span><span class="string">)</span></span><br><span class="line">    <span class="string">cy.contains(&#x27;button&#x27;</span>, <span class="string">&#x27;Log out&#x27;</span><span class="string">).should(&#x27;be.visible&#x27;)</span></span><br><span class="line">    <span class="string">cy.contains(&#x27;h2&#x27;</span>, <span class="string">&#x27;Cypress Network Testing Exercises&#x27;</span><span class="string">).click()</span></span><br><span class="line">    <span class="string">cy.get(&#x27;section.summary&#x27;).should(&#x27;have.length.greaterThan&#x27;</span>, <span class="number">20</span><span class="string">)</span></span><br><span class="line">    <span class="string">cy.scrollTo(&#x27;bottom&#x27;</span>, &#123; <span class="attr">duration:</span> <span class="number">2000</span> &#125;<span class="string">)</span></span><br><span class="line">  &#125;<span class="string">)</span></span><br><span class="line">&#125;<span class="string">)</span></span><br></pre></td></tr></table></figure><p>The test works locally beautifully. We see the login (I hide the password by changing the type of the email input element to be <code>password</code>), we see the logged in course page, and we can go to the course itself to scroll through the lessons.</p><p><img src="../images/check-more-things/login-test1.gif" alt="Login test works locally"></p><p>Unfortunately the test failed on CI.</p><p><img src="../images/check-more-things/fails.png" alt="Login test failed on CI"></p><p>Ughh, the error might come from the test command <code>cy.get(&#39;section.summary&#39;).should(&#39;have.length.greaterThan&#39;, 20)</code> but we are not sure. I want to see the screenshot, so I set up recording the test results on <a href="https://on.cypress.io/dashboard-introduction">Cypress Dashboard</a>. The next CI run still failed, but it was recorded this time.</p><p><img src="../images/check-more-things/test.png" alt="The failed test info on Cypress Dashboard"></p><p>Why does it fail?</p><h2><span id="red-flags">Red flags</span></h2><p>When running on CI your main concern should be the timing. The CI machine is a small virtual box (unless you pay for custom resource class), nothing compared to your development machine. This underpowered virtual box has to run the web application and the Cypress Test Runner. When browsing Next.js application, each page has to be built, which takes time, then it is loaded by the browser, which also takes time. What it means is that everything is slower than when running locally.</p><p>Look at the local test duration in the GIF above - the local test took <strong>15.45</strong> seconds. Look at the CI screenshot - the same test took <strong>35</strong> seconds. And it did not even finish! Can the app execute fast enough to keep up with our clicks and other commands? Look at the Ajax messages around <code>cy.click</code> and the failing command. We want to click and see the course page, but the Ajax messages show the web application is still <em>doing something</em>.</p><p><img src="../images/check-more-things/building.png" alt="The web application is doing something on CI while we click"></p><p>Even working locally, we can see that our <code>cy.click</code> command is executed <em>while</em> the page is still loading. If I hover over it locally, I can see the page still loading images.</p><p><img src="../images/check-more-things/click.gif" alt="The images are still loading when we click"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;h2&#x27;</span>, <span class="string">&#x27;Cypress Network Testing Exercises&#x27;</span>).<span class="title function_">click</span>()</span><br></pre></td></tr></table></figure><p>Hmm, the test runner simply &quot;sees&quot; the &quot;H2&quot; element with expected text and clicks on it. But if the page is still loading and scaffolding, it might not process the <code>click</code> event. How do we prevent this? How do we tell the test to wait for the application to fully load?</p><p>Before we jump into event handlers and check if <a href="/blog/when-can-the-test-click/" title="there is one attached">there is one attached</a>, let&#39;s simple confirm what we see. Let&#39;s confirm the images have loaded before clicking on the course title. Let&#39;s confirm other page elements, like the enrolled status element.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">location</span>(<span class="string">&#x27;pathname&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/courses&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Log out&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;.status&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;Enrolled&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> courseTitle = <span class="string">&#x27;Cypress Network Testing Exercises&#x27;</span></span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;section.summary&#x27;</span>, courseTitle).<span class="title function_">within</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;img[alt=&quot;Course thumbnail&quot;]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    <span class="comment">// check if the image has finished loading</span></span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;0.naturalWidth&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.greaterThan&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h2&#x27;</span>, courseTitle).<span class="title function_">click</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Locally we see images have loaded when we get to the <code>cy.contains(&#39;h2&#39;, courseTitle).click()</code> commands</p><p><img src="../images/check-more-things/loaded-images.gif" alt="The images have fully loaded"></p><p>Ok, looks good locally. On CI? Still fails.</p><p><img src="../images/check-more-things/still-fails.png" alt="The test still failed on CI"></p><p>Hmm, let&#39;s check more things. We only checked if the course thumbnail image has finished loading. Let&#39;s also confirm the author&#39;s thumbnail has loaded.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let the page load and be ready to process the click</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;img[data-cy=&quot;author-photo&quot;]&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;0.naturalWidth&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;be.greaterThan&#x27;</span>, <span class="number">50</span>)</span><br><span class="line"><span class="keyword">const</span> courseTitle = <span class="string">&#x27;Cypress Network Testing Exercises&#x27;</span></span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;section.summary&#x27;</span>, courseTitle).<span class="title function_">within</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;img[alt=&quot;Course thumbnail&quot;]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    <span class="comment">// check if the image has finished loading</span></span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;0.naturalWidth&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.greaterThan&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h2&#x27;</span>, courseTitle).<span class="title function_">click</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I also added one more check - since the URL changes after the click, before we check the number of sections displayed on the page, we should confirm we got to the new page.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the url changes to include the course ID</span></span><br><span class="line">cy.<span class="title function_">location</span>(<span class="string">&#x27;pathname&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">10_000</span> &#125;).<span class="title function_">should</span>(</span><br><span class="line">  <span class="string">&#x27;match&#x27;</span>,</span><br><span class="line">  <span class="regexp">/\/courses\/[a-z0-9]+$/</span>,</span><br><span class="line">)</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;section.summary&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length.greaterThan&#x27;</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>Finally the CI is green!</p><p><img src="../images/check-more-things/ci-passed.png" alt="The test has passed"></p><p>So remember - it takes time to fully load the page before it is ready to react to the user events. If you find the test failing because the page is still loading, add more commands and assertions to check those loading elements. The test will give the page an opportunity to fully load, and then the test can proceed.</p><p>Worst comes to worst, and nothing on the page looks like it is loading and can be checked using Cypress commands? Nothing the <code>cy.intercept</code> can spy on? Add <code>cy.wait(10000)</code> to sleep for ten seconds while the page is loading.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/solve-the-first-click/" title="Solve The First Click">Solve The First Click</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have my &lt;a href=&quot;https://cypress.tips/&quot;&gt;Cypress.tips&lt;/a&gt; site with my &lt;a href=&quot;https://cypress.tips/courses&quot;&gt;Cypress courses&lt;/a&gt; page. 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>Set All Cypress Env Values Using A Single GitHub Actions Secret</title>
    <link href="https://glebbahmutov.com/blog/secrets-to-env/"/>
    <id>https://glebbahmutov.com/blog/secrets-to-env/</id>
    <published>2022-05-09T04:00:00.000Z</published>
    <updated>2022-05-09T21:29:41.457Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s say you need to pass some values to Cypress tests. You should use <a href="https://on.cypress.io/environment-variables">Cypress environment variables</a> (not to be confused with process environment variables) and read them using <a href="https://on.cypress.io/env">Cypress.env</a> command. For example, you could pass login information to your specs, as describe in <a href="/blog/keep-passwords-secret-in-e2e-tests/" title="Keep passwords secret in E2E tests">Keep passwords secret in E2E tests</a>. On CI, you could store the value as a secret, and then pass it to Cypress. The syntax differs, but for example on <a href="/blog/trying-github-actions/" title="GitHub Actions">GitHub Actions</a> you could use something like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx cypress run --env userName=$&#123;&#123; secrets.USERNAME &#125;&#125;,password=$&#123;&#123; secrets.PASSWORD &#125;&#125;</span><br></pre></td></tr></table></figure><p>It all works if you only have a few simple values to pass. If you have multiple values, or if they are complex JSON objects, passing them via command line is bound to break due to parsing and quotes. Luckily, there are other ways, and this blog post shows one good way for GitHub Actions.</p><blockquote class="pullquote"><p>üéÅ You can find the source code and see the executed GitHub Actions in the repo <a href="https://github.com/bahmutov/cypress-env-example">bahmutov&#x2F;cypress-env-example</a>.</p></blockquote><p>First, you could put the values into <code>env</code> key of the <code>cypress.json</code> file</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;person&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Jane&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">25</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;San Francisco&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>The test in our case simply checks the values.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;has valid env values&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title class_">Cypress</span>.<span class="title function_">env</span>())</span><br><span class="line">    .<span class="property">to</span>.<span class="property">be</span>.<span class="title function_">an</span>(<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">    .<span class="property">and</span>.<span class="property">to</span>.<span class="property">include</span>.<span class="title function_">keys</span>(<span class="string">&#x27;person&#x27;</span>, <span class="string">&#x27;location&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">wrap</span>(<span class="title class_">Cypress</span>.<span class="title function_">env</span>(<span class="string">&#x27;person&#x27;</span>))</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.keys&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.within&#x27;</span>, <span class="number">10</span>, <span class="number">99</span>)</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;**name:** &#x27;</span> + <span class="title class_">Cypress</span>.<span class="title function_">env</span>(<span class="string">&#x27;person&#x27;</span>).<span class="property">name</span>)</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;**city:** &#x27;</span> + <span class="title class_">Cypress</span>.<span class="title function_">env</span>(<span class="string">&#x27;location&#x27;</span>).<span class="property">city</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// save a screenshot of the test runner</span></span><br><span class="line">  <span class="comment">// to show what the env values were</span></span><br><span class="line">  cy.<span class="title function_">screenshot</span>(<span class="string">&#x27;env&#x27;</span>, &#123; <span class="attr">capture</span>: <span class="string">&#x27;runner&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I ran the test locally and it shows the expected values from the <code>cypress.json</code> file</p><p><img src="../images/secrets-to-env/env.png" alt="Cypress checked the env val"></p><p>To better separate Cypress own configuration values from the user&#39;s own values, you could move the <code>env</code> object from <code>cypress.json</code> to <code>cypress.env.json</code> file.</p><figure class="highlight json"><figcaption><span>cypress.env.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;person&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Jane&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">25</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;San Francisco&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>The test passes the same way.</p><h2><span id="continuous-integration">Continuous Integration</span></h2><p>Now let&#39;s move to CI. We probably will use different values when running the tests. I will add these values as a <em>secret</em>. GitHub Actions allow multiline secrets, so I add a complete JSON object there.</p><p><img src="../images/secrets-to-env/gh-action-secret.png" alt="Entire JSON we want to use on CI"></p><p>Now let&#39;s write our workflow file. I will skip using my own <a href="https://github.com/bahmutov/cypress-workflows">Cypress reusable workflows</a> and instead will use the plain <a href="https://github.com/cypress-io/github-action">Cypress GitHub Action</a>.</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">tests:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">üõé</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Write</span> <span class="string">the</span> <span class="string">cypress.env.json</span> <span class="string">file</span> <span class="string">üìù</span></span><br><span class="line">        <span class="comment"># use quotes around the secret, as its value</span></span><br><span class="line">        <span class="comment"># is simply inserted as a string into the command</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &#x27;$&#123;&#123; secrets.CYPRESS_ENV_CI &#125;&#125;&#x27; &gt; cypress.env.json</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span> <span class="string">üöÄ</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># you can use Cypress Dashboard to store the screenshots</span></span><br><span class="line">      <span class="comment"># or store them on GitHub and download the zip file</span></span><br><span class="line">      <span class="comment"># https://github.com/actions/upload-artifact</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Save</span> <span class="string">screenshots</span> <span class="string">üñº</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v3</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">always()</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">cypress-screenshots</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">cypress/screenshots</span></span><br></pre></td></tr></table></figure><p>As you can see, we echo the secret&#39;s value and redirect it to the &quot;cypress.env.json&quot; file, overwriting the existing file. Then we run the tests and save the screenshots folder produced by the tests. A typical run finishes successfully.</p><p><img src="../images/secrets-to-env/run.png" alt="GitHub Actions run"></p><p>We download the zip archive with the screenshots by clicking on it. The Test Runner shows the values from the CI secret were used in the test.</p><p><img src="../images/secrets-to-env/ci.png" alt="The test received the values from the secrets JSON"></p><p>Pretty sweet.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s say you need to pass some values to Cypress tests. You should use &lt;a href=&quot;https://on.cypress.io/environment-variables&quot;&gt;Cypress
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>A Quick React Component Test</title>
    <link href="https://glebbahmutov.com/blog/quick-click/"/>
    <id>https://glebbahmutov.com/blog/quick-click/</id>
    <published>2022-05-05T04:00:00.000Z</published>
    <updated>2022-05-05T01:05:45.311Z</updated>
    
    <content type="html"><![CDATA[<p>I laid <a href="/blog/my-vision-for-component-tests/" title="My Vision for Component Tests in Cypress">My Vision for Component Tests in Cypress</a> in Cypress a long time ago. The first public presentation about End-to-End + Component test combination was made in the presentation <a href="https://slides.com/bahmutov/assertjs">The Shape Of Testing Pyramid</a> at AssertJS in February of 2018, ughh 4 years ago. Where did the time go? Where is Cypress v10 (aka Cypress X) with full production component testing? I don&#39;t know.</p><p>But here is a user asking about it on <a href="https://on.cypress.io/discord">Cypress Discord channel</a></p><p><img src="../images/quick-click/question.png" alt="How to confirm the button was really clicked?"></p><p>Let me answer this question in the strongest way - but creating a working example.</p><blockquote class="pullquote"><p>üéÅ You can find my source code in the repository <a href="https://github.com/bahmutov/click-returns-true">bahmutov&#x2F;click-returns-true</a>.</p></blockquote><p>I have created a new project using the following commands:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># make a new folder</span><br><span class="line">$ mkdir click-returns-true</span><br><span class="line">$ cd click-returns-true</span><br><span class="line"># create a new Git repository</span><br><span class="line">$ git init</span><br><span class="line"># initialize a new NPM project</span><br><span class="line">$ npm init --yes</span><br><span class="line"># add Cypress and Prettier</span><br><span class="line">$ npm i -D cypress prettier</span><br><span class="line">+ cypress@9.6.0</span><br><span class="line">+ prettier@2.6.2</span><br></pre></td></tr></table></figure><p>I added Cypress and Prettier as dev dependencies. I love <a href="/blog/configure-prettier-in-vscode/" title="using Prettier">using Prettier</a>. <strong>Note:</strong> the coming Cypress v10 release might change how the application looks and runs, this blog post uses v9. I hope the post shows the main principles that still apply.</p><p>Ok, we need to execute a React component. So I will add React, Read DOM, and react-scripts dependencies.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -S react@17 react-dom@17 react-scripts</span><br><span class="line">+ react@17.0.2</span><br><span class="line">+ react-dom@17.0.2</span><br><span class="line">+ react-scripts@5.0.1</span><br></pre></td></tr></table></figure><p>I add <code>browserslist</code> field to the <code>package.json</code> file</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;click-returns-true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^17.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;react-dom&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^17.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;react-scripts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.0.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@cypress/react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.12.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@cypress/webpack-dev-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.8.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cypress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^9.6.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prettier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.6.2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;browserslist&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;&gt; 1%&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;last 2 versions&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;not ie &lt;= 11&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Question:</strong> why did I not use Yarn? In this example it does not matter if I use <code>npm</code> or <code>yarn</code> to install NPM dependencies.</p><p>Now I need to follow the Cypress <a href="https://on.cypress.io/component-testing">component testing</a> guide to install specific dependencies for mounting React components inside Cypress. I suggest following the examples in <a href="https://github.com/cypress-io/cypress-component-testing-examples">cypress-io&#x2F;cypress-component-testing-examples</a>. In particular, I installed two dev dependencies:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D @cypress/react @cypress/webpack-dev-server</span><br><span class="line">+ @cypress/react@5.12.4</span><br><span class="line">+ @cypress/webpack-dev-server@1.8.4</span><br></pre></td></tr></table></figure><p>Super, and here is my modified plugin file that uses the React dev server provided by the <code>react-scripts</code></p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> injectDevServer = <span class="built_in">require</span>(<span class="string">&#x27;@cypress/react/plugins/react-scripts&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">injectDevServer</span>(on, config)</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now let&#39;s test our React component. I write the following component spec file</p><figure class="highlight js"><figcaption><span>cypress/component/click.spec.ct.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&#x27;@cypress/react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">&#123; onClick &#125;</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;renders an active base button&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">mount</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;cy.stub().as(</span>&#x27;<span class="attr">click</span>&#x27;)&#125;&gt;</span>Click me<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let&#39;s open the Cypress in component testing mode</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx cypress open-ct</span><br></pre></td></tr></table></figure><p>Click on the &quot;click.spec.ct.js&quot; name shown in the browser file explorer. You see the button component running as a mini React web application.</p><p><img src="../images/quick-click/button.png" alt="The mounted Button component inside a browser"></p><p>A cool thing about React component testing in Cypress - the React DevTools are mounted automatically to make inspecting the complex components a breeze.</p><p><img src="../images/quick-click/tools.png" alt="The Button component inspected using included React DevTools"></p><h1><span id="the-stub">The stub</span></h1><p>Wait, did we just pass a stub reference from the spec code to the component? Yes we did</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Button</span> onClick=&#123;cy.<span class="title function_">stub</span>().<span class="title function_">as</span>(<span class="string">&#x27;click&#x27;</span>)&#125;&gt;<span class="title class_">Click</span> me&lt;/<span class="title class_">Button</span>&gt;</span><br></pre></td></tr></table></figure><p>This is the most powerful feature in the Cypress test runner. In the E2E and component tests, you can access the actual application and spy &#x2F; stub its methods, or browser APIs, because the test spec is running inside the browser itself, and not just sending browser automation commands. Read my blog post <a href="/blog/cypress-vs-other-test-runners/" title="Cypress vs Other Test Runners">Cypress vs Other Test Runners</a> for more information.</p><p>Ok, let&#39;s click on the button. There is <a href="https://on.cypress.io/click">cy.click</a> command, and all Cypress commands used normally during E2E tests work in the component tests (except the <code>cy.visit</code>, since you don&#39;t really visit an URL in a component test)</p><figure class="highlight js"><figcaption><span>cypress/component/click.spec.ct.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&#x27;@cypress/react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">&#123; onClick &#125;</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;renders an active base button&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">mount</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;cy.stub().as(</span>&#x27;<span class="attr">click</span>&#x27;)&#125;&gt;</span>Click me<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@click&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledOnce&#x27;</span>).<span class="title function_">invoke</span>(<span class="string">&#x27;resetHistory&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">click</span>().<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@click&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledTwice&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/quick-click/button-click.gif" alt="Confirming the Button component calls the passed prop on click"></p><p>Yup, this React component really calls the prop <code>onClick</code> when the user clicks the HTML element <code>button</code>.</p><h2><span id="disabled-button">Disabled button</span></h2><p>What happens if the HTML button is disabled? Does the <code>onClick</code> event handler fire? Let&#39;s try it out. By default <a href="https://on.cypress.io/click">cy.click</a> requires the button to be <a href="https://on.cypress.io/interacting-with-elements#Actionability">actionable</a> - being visible, enabled, and that sort of thing. Thus we need to use <code>.click(&#123; force: true &#125;)</code> to skip those checks.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&#x27;@cypress/react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">&#123; onClick, disabled &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">disabled</span>=<span class="string">&#123;disabled&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Click me</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;does not call the handler on the disabled button&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">mount</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">disabled</span>=<span class="string">&#123;true&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;cy.stub().as(</span>&#x27;<span class="attr">click</span>&#x27;)&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      Click me</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span>,</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">click</span>(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@click&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.have.been.called&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/quick-click/disabled.png" alt="Confirming the click event is ignored on a disabled button"></p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/my-vision-for-component-tests/" title="My Vision for Component Tests in Cypress">My Vision for Component Tests in Cypress</a></li><li><a href="/blog/react-app-actions/" title="Control React Applications From Cypress Tests">Control React Applications From Cypress Tests</a></li><li><a href="/blog/react-state-from-e2e-tests/" title="Access React Components From Cypress E2E Tests">Access React Components From Cypress E2E Tests</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I laid &lt;a href=&quot;/blog/my-vision-for-component-tests/&quot; title=&quot;My Vision for Component Tests in Cypress&quot;&gt;My Vision for Component Tests in C
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Spy On A Complex Method Call</title>
    <link href="https://glebbahmutov.com/blog/spy-on-complex-method-call/"/>
    <id>https://glebbahmutov.com/blog/spy-on-complex-method-call/</id>
    <published>2022-05-04T04:00:00.000Z</published>
    <updated>2022-05-04T13:55:08.321Z</updated>
    
    <content type="html"><![CDATA[<p>Here is a question that came from (deprecated) Cypress <a href="https://gitter.im/cypress-io/cypress">Gitter chat channel</a>. The user provided a repo with a reproducible test that tried to assert that <code>window.dataLayer.push</code> method was called with an object with the field <code>event: lead</code>. This is just one particular call among hundreds of calls the application is making to track its various events.</p><p><img src="../images/spy-data/calls.png" alt="We are trying to confirm this particular call amongst many others"></p><p>The user is struggling to write the correct test and asked me to help.</p><h2><span id="the-original-test">The original test</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;testin datalayer&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">before</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">intercept</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;**mule/customer/clicktocall&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;clicktocall&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;https://flsit.vtr.lla.digital/&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">wait</span>(<span class="number">5000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;wait &amp; assert&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">window</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-floating-button&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-click-to-call-form input&#x27;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">type</span>(<span class="string">&#x27;111111111&#x27;</span>)</span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-click-to-call-form input&#x27;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">type</span>(<span class="string">&#x27;9872819281&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-button.llad-contact-info-form__button button&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">      cy.<span class="title function_">wait</span>(<span class="string">&#x27;@clicktocall&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      cy.<span class="title function_">wait</span>(<span class="number">10000</span>)</span><br><span class="line">      <span class="comment">// find the index of the argument that corresponds to this event</span></span><br><span class="line">      <span class="comment">// cy.wrap(&#x27;@open&#x27;).should((res) =&gt; &#123;</span></span><br><span class="line">      <span class="comment">//   const index = res.args.findIndex((i) =&gt; i[0].event == &#x27;lead&#x27;);</span></span><br><span class="line">      <span class="comment">//   cy.log(index);</span></span><br><span class="line">      <span class="comment">// &#125;);</span></span><br><span class="line">      <span class="keyword">const</span> data = cy.<span class="title function_">spy</span>(win.<span class="property">dataLayer</span>, <span class="string">&#x27;push&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;dataL&#x27;</span>)</span><br><span class="line">      cy.<span class="title function_">log</span>(data.<span class="property">args</span>)</span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;@dataL&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        cy.<span class="title function_">log</span>(res.<span class="property">args</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>A few observations about this test right away:</p><ul><li>the base URL is hardcoded in the test, which is an anti-pattern. I prefer setting the base URL in the <code>cypress.json</code> file, watch the video <a href="https://www.youtube.com/watch?v=f5UaXuAc52c">How to correctly use the baseUrl to visit a site in Cypress</a></li><li>there are several hard-coded <code>cy.wait(ms)</code> commands, probably to let the page load the tracking library and create the <code>window.dataLayer</code> object. We can specifically wait for the <code>window.dataLayer</code> to exist, avoiding the hard-coded waits</li></ul><h2><span id="updated-test">Updated test</span></h2><p>Let&#39;s start by moving the base URL to the <code>cypress.json</code> file and removing the <code>cy.wait(ms)</code> commands. Instead we will wait for the <code>window</code> object to have a property <code>dataLayer</code> with the method <code>push</code>. See the inline code comments for the full explanation and links to more documentation.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;testing datalayer&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">before</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">intercept</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;**mule/customer/clicktocall&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;clicktocall&#x27;</span>)</span><br><span class="line">    <span class="comment">// cy.visit command yields the window object</span></span><br><span class="line">    <span class="comment">// and cy.its command retries until the &quot;dataLayer&quot; property is found</span></span><br><span class="line">    <span class="comment">// then we check if there is a method &quot;push&quot; on that object</span></span><br><span class="line">    <span class="comment">// https://on.cypress.io/visit</span></span><br><span class="line">    <span class="comment">// https://on.cypress.io/its</span></span><br><span class="line">    <span class="comment">// https://glebbahmutov.com/cypress-examples/commands/assertions.html</span></span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">its</span>(<span class="string">&#x27;dataLayer&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;respondTo&#x27;</span>, <span class="string">&#x27;push&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;wait &amp; assert&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-floating-button&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-click-to-call-form input&#x27;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">type</span>(<span class="string">&#x27;111111111&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-click-to-call-form input&#x27;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">type</span>(<span class="string">&#x27;9872819281&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-button.llad-contact-info-form__button button&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">    cy.<span class="title function_">wait</span>(<span class="string">&#x27;@clicktocall&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/spy-data/datalayer.gif" alt="The updated test waits only until the window.dataLayer property is found"></p><h2><span id="spying">Spying</span></h2><p>Ok, what about our spy? Sure, let&#39;s add a spy on the method <code>push</code> of the <code>dataLayer</code> object. The most interesting thing here is how to check if the spy function was called by the application. We have complex calls, and are only interested in the call where the first argument is an object with property <code>event: &quot;lead&quot;</code>. Luckily, Chai-Sinon assertions included with Cypress provide a way to use a custom matcher to check the calls.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;testing datalayer&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">before</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">intercept</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;**mule/customer/clicktocall&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;clicktocall&#x27;</span>)</span><br><span class="line">    <span class="comment">// cy.visit command yields the window object</span></span><br><span class="line">    <span class="comment">// and cy.its command retries until the &quot;dataLayer&quot; property is found</span></span><br><span class="line">    <span class="comment">// then we check if there is a method &quot;push&quot; on that object</span></span><br><span class="line">    <span class="comment">// https://on.cypress.io/visit</span></span><br><span class="line">    <span class="comment">// https://on.cypress.io/its</span></span><br><span class="line">    <span class="comment">// https://glebbahmutov.com/cypress-examples/commands/assertions.html</span></span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      .<span class="title function_">its</span>(<span class="string">&#x27;dataLayer&#x27;</span>)</span><br><span class="line">      .<span class="title function_">should</span>(<span class="string">&#x27;respondTo&#x27;</span>, <span class="string">&#x27;push&#x27;</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">dataLayer</span>) =&gt;</span> &#123;</span><br><span class="line">        cy.<span class="title function_">spy</span>(dataLayer, <span class="string">&#x27;push&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;dataL&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;wait &amp; assert&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-floating-button&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-click-to-call-form input&#x27;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">type</span>(<span class="string">&#x27;111111111&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-click-to-call-form input&#x27;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">type</span>(<span class="string">&#x27;9872819281&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-button.llad-contact-info-form__button button&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">    cy.<span class="title function_">wait</span>(<span class="string">&#x27;@clicktocall&#x27;</span>)</span><br><span class="line">    <span class="comment">// confirm there was a call that satisfies the custom predicate function</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">isLead</span> = (<span class="params">d</span>) =&gt; d.<span class="property">event</span> === <span class="string">&#x27;lead&#x27;</span></span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;@dataL&#x27;</span>).<span class="title function_">should</span>(</span><br><span class="line">      <span class="string">&#x27;have.been.calledWith&#x27;</span>,</span><br><span class="line">      <span class="title class_">Cypress</span>.<span class="property">sinon</span>.<span class="title function_">match</span>(isLead, <span class="string">&#x27;lead event&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>For more Chai-Sinon assertion examples, see my <a href="https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html"><code>cy.stub</code>, <code>cy.spy</code>, and <code>cy.clock</code> examples</a>. For now, the test works, even if it is pretty noisy - there are lots of <code>dataLayer.push</code> calls!</p><p><img src="../images/spy-data/assert-called.gif" alt="The application does call dataLayer.push with the lead event"></p><h2><span id="cut-the-noise">Cut the noise</span></h2><p>We only want to be informed about <code>dataLayer.push(lead)</code> events, not every call. Unfortunately, the built-in Sinon mechanism to create a targeted spy <code>cy.spy(dataLayer, &#39;push&#39;).withArgs(&#123; event: &#39;lead&#39; &#125;).as(&#39;lead&#39;)</code> expects the exact argument match, not part of the object. We could use the same match via predicate when creating a spy:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">spy</span>(dataLayer, <span class="string">&#x27;push&#x27;</span>)</span><br><span class="line">  .<span class="title function_">withArgs</span>(<span class="title class_">Cypress</span>.<span class="property">sinon</span>.<span class="title function_">match</span>(isLead))</span><br><span class="line">  .<span class="title function_">as</span>(<span class="string">&#x27;lead&#x27;</span>)</span><br></pre></td></tr></table></figure><p>It does simplify the assertion</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;@lead&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Unfortunately, this still records <em>other</em> calls to <code>dataLayer.push</code> method ‚òπÔ∏è</p><p><img src="../images/spy-data/many-spies.png" alt="The Cypress Command Log still shows all spy calls"></p><p>We really need to avoid using <code>cy.spy</code> for calls we are not interested in. We can do this by constructing a &quot;plain&quot; Sinon.js stub function avoiding the <code>cy.stub</code> or <code>cy.spy</code> command to avoid logging <em>every</em> call. Here is the entire test, including printing the event data to the Command Log.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;testing datalayer&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">isLead</span> = (<span class="params">d</span>) =&gt; d.<span class="property">event</span> === <span class="string">&#x27;lead&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">before</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">intercept</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;**mule/customer/clicktocall&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;clicktocall&#x27;</span>)</span><br><span class="line">    <span class="comment">// cy.visit command yields the window object</span></span><br><span class="line">    <span class="comment">// and cy.its command retries until the &quot;dataLayer&quot; property is found</span></span><br><span class="line">    <span class="comment">// then we check if there is a method &quot;push&quot; on that object</span></span><br><span class="line">    <span class="comment">// https://on.cypress.io/visit</span></span><br><span class="line">    <span class="comment">// https://on.cypress.io/its</span></span><br><span class="line">    <span class="comment">// https://glebbahmutov.com/cypress-examples/commands/assertions.html</span></span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      .<span class="title function_">its</span>(<span class="string">&#x27;dataLayer&#x27;</span>)</span><br><span class="line">      .<span class="title function_">should</span>(<span class="string">&#x27;respondTo&#x27;</span>, <span class="string">&#x27;push&#x27;</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">dataLayer</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// we need to call the real method on the dataLayer object</span></span><br><span class="line">        <span class="keyword">const</span> realPush = dataLayer.<span class="property">push</span>.<span class="title function_">bind</span>(dataLayer)</span><br><span class="line">        <span class="comment">// and our stub function to be able to check it later</span></span><br><span class="line">        <span class="keyword">const</span> leadStub = cy.<span class="title function_">stub</span>().<span class="title function_">as</span>(<span class="string">&#x27;lead&#x27;</span>)</span><br><span class="line">        <span class="comment">// use &quot;plain&quot; Sinon stub to replace dataLayer.push method</span></span><br><span class="line">        <span class="title class_">Cypress</span>.<span class="property">sinon</span>.<span class="title function_">stub</span>(dataLayer, <span class="string">&#x27;push&#x27;</span>).<span class="title function_">callsFake</span>(<span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// if this is a lead event, call the Cypress stub</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="title function_">isLead</span>(args[<span class="number">0</span>])) &#123;</span><br><span class="line">            <span class="title function_">leadStub</span>(...args)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// and always call the real dataLayer.push</span></span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">realPush</span>(...args)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;wait &amp; assert&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-floating-button&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-click-to-call-form input&#x27;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">type</span>(<span class="string">&#x27;111111111&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-click-to-call-form input&#x27;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">type</span>(<span class="string">&#x27;9872819281&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;lla-button.llad-contact-info-form__button button&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">    cy.<span class="title function_">wait</span>(<span class="string">&#x27;@clicktocall&#x27;</span>)</span><br><span class="line">    <span class="comment">// confirm the cy.stub was called</span></span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;@lead&#x27;</span>)</span><br><span class="line">      .<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">      <span class="comment">// and grab its first call&#x27;s arguments</span></span><br><span class="line">      .<span class="title function_">its</span>(<span class="string">&#x27;firstCall.args&#x27;</span>)</span><br><span class="line">      <span class="comment">// and log them to Cypress Command Log</span></span><br><span class="line">      .<span class="title function_">then</span>(<span class="title class_">JSON</span>.<span class="property">stringify</span>)</span><br><span class="line">      .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test is beautiful ü•∞ and takes only four seconds üèé instead of 20+ seconds of the original test with hard-coded waits.</p><p><img src="../images/spy-data/spy-stub.gif" alt="Logging only the method call we are interested in"></p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/spy-on-dom-methods/" title="Spy On DOM Methods And Properties">Spy On DOM Methods And Properties</a></li><li><a href="https://on.cypress.io/stubs-spies-and-clocks">Cypress Stubs, Spies, and Clocks Guide</a></li><li>my <a href="https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html"><code>cy.stub</code>, <code>cy.spy</code>, and <code>cy.clock</code> examples</a></li><li>find more stubbing and spying examples by searching using my <a href="https://cypress.tips/search">cypress.tips&#x2F;search</a> page</li><li><a href="https://sinonjs.org/">Sinon.js documentation</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Here is a question that came from (deprecated) Cypress &lt;a href=&quot;https://gitter.im/cypress-io/cypress&quot;&gt;Gitter chat channel&lt;/a&gt;. The user p
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Send Data From The Application To The Cypress Test</title>
    <link href="https://glebbahmutov.com/blog/send-data-to-the-test/"/>
    <id>https://glebbahmutov.com/blog/send-data-to-the-test/</id>
    <published>2022-05-03T04:00:00.000Z</published>
    <updated>2022-05-03T15:49:09.180Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine an application where the user fills a form. The application takes the form, cleans up the entered data, and sends the form to the backend API. The <code>public/app.js</code> has the following code</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span></span><br><span class="line">  .<span class="title function_">querySelector</span>(<span class="string">&#x27;form input[type=submit]&#x27;</span>)</span><br><span class="line">  .<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>()</span><br><span class="line">    <span class="comment">// grab the form element and form the data to be sent</span></span><br><span class="line">    <span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>(form)</span><br><span class="line">    <span class="keyword">const</span> data = &#123;&#125;</span><br><span class="line">    formData.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">      data[key] = value</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (data.<span class="property">phone</span>) &#123;</span><br><span class="line">      <span class="comment">// clean up the phone number by removing all non-digit characters</span></span><br><span class="line">      data.<span class="property">phone</span> = data.<span class="property">phone</span>.<span class="title function_">replace</span>(<span class="regexp">/[^\d]/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// send the Ajax request to the server</span></span><br><span class="line">    <span class="keyword">const</span> request = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    request.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/api/v1/message&#x27;</span>)</span><br><span class="line">    request.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>)</span><br><span class="line">    request.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data))</span><br><span class="line">    request.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (request.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="comment">// all good</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">alert</span>(<span class="string">&#x27;Error: &#x27;</span> + request.<span class="property">status</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>üéÅ You can find the source code for this blog post in the repository <a href="https://github.com/bahmutov/cypress-track-events">bahmutov&#x2F;cypress-track-events</a>.</p></blockquote><p>Let&#39;s write a test. We need to visit the page, type the test data into the input fields, and confirm the outgoing network call. Because our backend API is not ready yet, we will stub the server&#39;s response.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;sends a form&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">intercept</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/api/v1/message&#x27;</span>, &#123;&#125;).<span class="title function_">as</span>(<span class="string">&#x27;post&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">within</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=name]&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;John Doe&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=email]&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;joe@doe.com&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=phone]&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;+1 (555) 555-5555&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=message]&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;input[type=submit]&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// confirm the network request was sent correctly</span></span><br><span class="line">  <span class="comment">// hmm, how do we verify the request as sent by the application?</span></span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@post&#x27;</span>).<span class="title function_">its</span>(<span class="string">&#x27;request.body&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">0</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/send-data-to-the-test/test1.gif" alt="The above test enters the data into the form and submits it"></p><p>We hit a slight problem. The application modifies the data before sending it. Of course, the test should know exactly what the expected data is, but let&#39;s pretend we do not know it. How do we check the network call?</p><p>When Cypress controls the browser, the application runs in an iframe, and Cypress sets a property <code>Cypress</code> on the application&#39;s window object. Thus the application can &quot;know&quot; if it is running inside a Cypress test by checking that property:</p><figure class="highlight js"><figcaption><span>public/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (data.<span class="property">phone</span>) &#123;</span><br><span class="line">  <span class="comment">// clean up the phone number by removing all non-digit characters</span></span><br><span class="line">  data.<span class="property">phone</span> = data.<span class="property">phone</span>.<span class="title function_">replace</span>(<span class="regexp">/[^\d]/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">Cypress</span>) &#123;</span><br><span class="line">  <span class="comment">// Hurray, we are being tested!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In our case, the application can pass to the test runner the data object it is about to send to the backend. If the application finds the <code>track()</code> method on the <code>Cypress</code> object, then it would call it with the constructed <code>data</code> object.</p><figure class="highlight js"><figcaption><span>public/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (data.<span class="property">phone</span>) &#123;</span><br><span class="line">  <span class="comment">// clean up the phone number by removing all non-digit characters</span></span><br><span class="line">  data.<span class="property">phone</span> = data.<span class="property">phone</span>.<span class="title function_">replace</span>(<span class="regexp">/[^\d]/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">Cypress</span>) &#123;</span><br><span class="line">  <span class="comment">// Hurray, we are being tested!</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">Cypress</span>.<span class="property">track</span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">Cypress</span>.<span class="title function_">track</span>(<span class="string">&#x27;form&#x27;</span>, data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using the modern ES6 <a href="https://github.com/tc39/proposal-optional-chaining">optional chaining</a> syntax supported by all modern browsers, we can safely pass the data using a one-liner (with lots of comments):</p><figure class="highlight js"><figcaption><span>public/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (data.<span class="property">phone</span>) &#123;</span><br><span class="line">  <span class="comment">// clean up the phone number by removing all non-digit characters</span></span><br><span class="line">  data.<span class="property">phone</span> = data.<span class="property">phone</span>.<span class="title function_">replace</span>(<span class="regexp">/[^\d]/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if we are running the application inside a Cypress browser test</span></span><br><span class="line"><span class="comment">// send the internal data to be confirmed or used by the test</span></span><br><span class="line"><span class="comment">// We are using optional chaining operator &quot;?.&quot; to safely</span></span><br><span class="line"><span class="comment">// access each property if it exists (or do nothing if it doesn&#x27;t)</span></span><br><span class="line"><span class="comment">// including the last call to the &quot;track()&quot; method if it exists</span></span><br><span class="line"><span class="comment">// See https://github.com/tc39/proposal-optional-chaining</span></span><br><span class="line"><span class="variable language_">window</span>?.<span class="property">Cypress</span>?.<span class="property">track</span>?.(<span class="string">&#x27;form&#x27;</span>, data)</span><br></pre></td></tr></table></figure><p>Of course, we need to create the <code>Cypress.track</code> method ourselves. We also need to clean it up to avoid accidentally leaking it from one test to another. Using <code>beforeEach</code> and <code>afterEach</code> hooks works well for this purpose.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">Cypress</span>.<span class="property">track</span> = cy.<span class="title function_">stub</span>().<span class="title function_">as</span>(<span class="string">&#x27;track&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">afterEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// clean up Cypress.track property</span></span><br><span class="line">  <span class="keyword">delete</span> <span class="title class_">Cypress</span>.<span class="property">track</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Now we can finish our test. We can confirm the <a href="https://on.cypress.io/stub">stub</a> function <code>Cypress.track</code> was called with the first argument &quot;form&quot;. From the first such call, we can grab the <em>second</em> argument, which should be an object. We can confirm some properties of the object, and then also use it to confirm what the application sent to the server.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;sends the expected form&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">intercept</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/api/v1/message&#x27;</span>, &#123;&#125;).<span class="title function_">as</span>(<span class="string">&#x27;post&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">within</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=name]&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;John Doe&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=email]&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;joe@doe.com&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=phone]&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;+1 (555) 555-5555&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=message]&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;input[type=submit]&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// hmm, how do we verify the request as sent by the application?</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@track&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.calledWith&#x27;</span>, <span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;firstCall.args.1&#x27;</span>)</span><br><span class="line">    <span class="comment">// you can confirm some properties of the sent data</span></span><br><span class="line">    <span class="comment">// Tip: use https://github.com/bahmutov/cy-spok</span></span><br><span class="line">    <span class="comment">// for similar object and array assertions</span></span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;Hello World&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data))</span><br><span class="line">      <span class="comment">// confirm the network request was sent correctly</span></span><br><span class="line">      cy.<span class="title function_">wait</span>(<span class="string">&#x27;@post&#x27;</span>)</span><br><span class="line">        .<span class="title function_">its</span>(<span class="string">&#x27;request.body&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">0</span> &#125;)</span><br><span class="line">        .<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/send-data-to-the-test/test2.gif" alt="Receive the data from the application and use it to confirm the network call"></p><p><strong>Tip:</strong> use <a href="https://github.com/bahmutov/cy-spok">cy-spok</a> to confirm properties of any object, thank me later.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine an application where the user fills a form. The application takes the form, cleans up the entered data, and sends the form to the
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Log in Using Collected Words</title>
    <link href="https://glebbahmutov.com/blog/login-words/"/>
    <id>https://glebbahmutov.com/blog/login-words/</id>
    <published>2022-05-02T04:00:00.000Z</published>
    <updated>2022-05-03T15:49:35.348Z</updated>
    
    <content type="html"><![CDATA[<p>Have you seen web sites that show you a list of random words to write down when signing up? When you go to log in, the site shows the same random words with some words missing. You need to enter the missing words exactly as they appeared, and this is how you log in. Here is a Cypress test showing this login in action:</p><p><img src="../images/login-words/words.gif" alt="Log in using words application test"></p><p>Let&#39;s see how the Cypress test can &quot;remember&quot; the words and type them at the correct positions. The application has two screens: the first one shows the words to find and save, the second one shows the input elements instead of some words. We need to look up the saved word at that position and enter it.</p><blockquote class="pullquote"><p>üéÅ You can find the source code for this blog post in the repository <a href="https://github.com/bahmutov/cypress-login-words">bahmutov&#x2F;cypress-login-words</a>. You can also watch the explanation in the video <a href="https://youtu.be/sUHs2zLFjIM">Log In Using Words</a>.</p></blockquote><h2><span id="login-fails">Login fails</span></h2><p>First, let&#39;s confirm the application <em>does not let</em> log in with incorrect words. On the second screen we can simply type &quot;word&quot; + index number.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;does not log in with wrong words&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">    <span class="comment">// wait 1 second for clarity</span></span><br><span class="line">    .<span class="title function_">wait</span>(<span class="number">1000</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;I remember&#x27;</span>, &#123; <span class="attr">matchCase</span>: <span class="literal">false</span> &#125;).<span class="title function_">click</span>()</span><br><span class="line">  <span class="comment">// the section changes</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;section#login&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;input[type=text]&#x27;</span>).<span class="title function_">each</span>(<span class="function">(<span class="params">$input, k</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// take the jQuery element $input</span></span><br><span class="line">    <span class="comment">// and wrap it using Cypress cy.wrap command</span></span><br><span class="line">    <span class="comment">// now we can correctly chain Cypress commands</span></span><br><span class="line">    cy.<span class="title function_">wrap</span>($input).<span class="title function_">type</span>(<span class="string">&#x27;word&#x27;</span> + (k + <span class="number">1</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;#login-button&#x27;</span>, <span class="string">&#x27;Log in&#x27;</span>, &#123; <span class="attr">matchCase</span>: <span class="literal">false</span> &#125;).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;#login-button&#x27;</span>, <span class="string">&#x27;Try again&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/login-words/cannot-random.gif" alt="The test types random strings and fails to log in"></p><p>We are using my favorite Cypress commands <a href="https://on.cypress.io/contains">cy.contains</a>, <a href="https://on.cypress.io/get">cy.get</a>, <a href="https://on.cypress.io/each">cy.each</a>, and <a href="https://on.cypress.io/wrap">cy.wrap</a>.</p><blockquote class="pullquote"><p>üìö You can find lots of Cypress command examples at my site <a href="https://glebbahmutov.com/cypress-examples">https://glebbahmutov.com/cypress-examples</a>. It has a good search that quickly shows my practical Cypress use examples.</p></blockquote><h2><span id="save-the-words">Save the words</span></h2><p>In order for the end-to-end test to log in correctly, the test needs to save the shown words. We can store the words in a regular array.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;remembers the words&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">    <span class="comment">// wait 1 second for clarity</span></span><br><span class="line">    .<span class="title function_">wait</span>(<span class="number">1000</span>)</span><br><span class="line">  <span class="comment">// remember the words from the list</span></span><br><span class="line">  <span class="keyword">const</span> words = []</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#show-words .words li&#x27;</span>)</span><br><span class="line">    .<span class="title function_">each</span>(<span class="function">(<span class="params">$li</span>) =&gt;</span> &#123;</span><br><span class="line">      words.<span class="title function_">push</span>($li.<span class="title function_">text</span>())</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// we can use the data from the page</span></span><br><span class="line">      <span class="comment">// in cy.then callback function</span></span><br><span class="line">      cy.<span class="title function_">log</span>(words.<span class="title function_">join</span>(<span class="string">&#x27;, &#x27;</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/login-words/store-words.png" alt="The test grabs the shown words from the page"></p><p>We store the extracted words in the local variable <code>words</code>. After the <code>cy.each</code> command finishes, that array is filled with words. We can use the array <em>after</em> <code>cy.each</code> command by using <a href="https://on.cypress.io/then">cy.then</a> callback.</p><blockquote class="pullquote"><p>ü§î Are you not sure why and how Cypress executes its commands? Read my blog post <a href="/blog/visualize-cypress-command-queue/" title="Visualize Cypress Command Queue">Visualize Cypress Command Queue</a>.</p></blockquote><h2><span id="type-the-saved-words">Type the saved words</span></h2><p>Now that we have the words in the correct order, we need to look at the list shown on the second page. Some of the list items are <code>&lt;input&gt;</code> elements and we need to enter the correct string from the array of strings. Here is how we look at each <code>li</code> item, and use <code>cy.each</code> command to check if there is an input element inside. We are using the jQuery <code>.find</code> method to synchronously see if there is <code>&lt;li&gt;&lt;input&gt;...&lt;/li&gt;</code> situation. If yes, we need to type the word at index <code>k</code> using a Cypress command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;#login .words li&#x27;</span>).<span class="title function_">each</span>(<span class="function">(<span class="params">$li, k</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> $input = $li.<span class="title function_">find</span>(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> ($input.<span class="property">length</span>) &#123;</span><br><span class="line">    cy.<span class="title function_">wrap</span>($input).<span class="title function_">type</span>(words[k])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Nice!</p><blockquote class="pullquote"><p>üò≥ Wait, isn&#39;t this an example of &quot;Conditional Testing&quot;, which is an anti-pattern? Yes, we are looking at the page to decide what the test needs to do. Sometimes it is necessary, so I have <a href="https://glebbahmutov.com/cypress-examples/recipes/conditional-testing.html">a few recipes how to handle it</a>.</p></blockquote><p>Here is the full test that saves and types the words, and checks if the page transitions are successful.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;logs in&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">    <span class="comment">// wait 1 second for clarity</span></span><br><span class="line">    .<span class="title function_">wait</span>(<span class="number">1000</span>)</span><br><span class="line">  <span class="comment">// remember the words from the list</span></span><br><span class="line">  <span class="keyword">const</span> words = []</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#show-words .words li&#x27;</span>)</span><br><span class="line">    .<span class="title function_">each</span>(<span class="function">(<span class="params">$li</span>) =&gt;</span> &#123;</span><br><span class="line">      words.<span class="title function_">push</span>($li.<span class="title function_">text</span>())</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// we can use the data from the page</span></span><br><span class="line">      <span class="comment">// in cy.then callback function</span></span><br><span class="line">      cy.<span class="title function_">log</span>(words.<span class="title function_">join</span>(<span class="string">&#x27;, &#x27;</span>))</span><br><span class="line"></span><br><span class="line">      cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;I remember&#x27;</span>, &#123; <span class="attr">matchCase</span>: <span class="literal">false</span> &#125;).<span class="title function_">click</span>()</span><br><span class="line">      <span class="comment">// the section changes</span></span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;section#login&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;#login .words li&#x27;</span>).<span class="title function_">each</span>(<span class="function">(<span class="params">$li, k</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> $input = $li.<span class="title function_">find</span>(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> ($input.<span class="property">length</span>) &#123;</span><br><span class="line">          cy.<span class="title function_">wrap</span>($input).<span class="title function_">type</span>(words[k])</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;#login-button&#x27;</span>, <span class="string">&#x27;Log in&#x27;</span>, &#123; <span class="attr">matchCase</span>: <span class="literal">false</span> &#125;).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;#login-button&#x27;</span>, <span class="string">&#x27;Success&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Beautiful, isn&#39;t it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Have you seen web sites that show you a list of random words to write down when signing up? When you go to log in, the site shows the sam
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Listen To The Message</title>
    <link href="https://glebbahmutov.com/blog/listen-to-the-message/"/>
    <id>https://glebbahmutov.com/blog/listen-to-the-message/</id>
    <published>2022-04-28T04:00:00.000Z</published>
    <updated>2022-04-28T18:15:09.154Z</updated>
    
    <content type="html"><![CDATA[<p>The <code>window.postMessage</code> calls are often used by complex web applications to <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage">send messages</a> between different frames. In this blog post, I will show how to confirm the message was sent when using Cypress end-to-end test runner.</p><h2><span id="the-application">The application</span></h2><blockquote class="pullquote"><p>üéÅ You can find the source code for this blog post in the repository <a href="https://github.com/bahmutov/cypress-window-message-example">bahmutov&#x2F;cypress-window-message-example</a>.</p></blockquote><p>The top document loads its JavaScript and includes an inner iframe element.</p><figure class="highlight html"><figcaption><span>public/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Top window<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;inner.html&quot;</span> <span class="attr">name</span>=<span class="string">&quot;inner&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;top.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><figcaption><span>public/inner.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Inner<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;inner.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The top window is listening to the messages sent by the inner frame</p><figure class="highlight js"><figcaption><span>public/top.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;TOP:&#x27;</span>, <span class="string">&#x27;message&#x27;</span>, e.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;listening for messages&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>public/inner.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;in the inner script&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">top</span>.<span class="title function_">postMessage</span>(<span class="string">&#x27;inner frame is ready&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>We see the console messages when visiting the page in the regular browser</p><p><img src="../images/listen-to-the-message/top-inner.gif" alt="The message sent by the inner frame gets to the top window"></p><p>Let&#39;s confirm this communication works.</p><h2><span id="make-the-application-work">Make the application work</span></h2><p>Let&#39;s visit the page from a Cypress test and see if it works</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;loads and communicates&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Open Cypress with <code>npx cypress open</code> ... and the message from the <code>inner</code> frame never shows up ‚òπÔ∏è</p><p><img src="../images/listen-to-the-message/no-messages.gif" alt="The message from the inner frame gets &quot;lost&quot; somehow"></p><p>The problem happens because the inner frame communicates using <code>window.top.postMessage</code> method call. When Cypress visits the site, it embeds the site in an iframe. Thus the <em>Cypress</em> is the top window, and <em>it</em> receives the message from the <code>inner</code> frame.</p><p><img src="../images/listen-to-the-message/windows.png" alt="The three different windows"></p><p>Hmm, how do we tell the <code>inner</code> iframe to send the message to the correct application window? Luckily, Cypress can rewrite the <code>window.top</code> references on the fly to make sure the message gets to the original intended top <code>window</code> object. In the <code>cypress.json</code> enable the following flag:</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;experimentalSourceRewriting&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Now we see the message sent during the test.</p><p><img src="../images/listen-to-the-message/top-message.gif" alt="The message now gets to the application window"></p><p>Ok, let&#39;s test it.</p><h2><span id="spy-on-the-consolelog-method-call">Spy on the console.log method call</span></h2><p>The top window logs the received messages. Let&#39;s confirm one of the <code>console.log</code> calls prints the message from the inner frame with text &quot;inner frame is ready&quot;. We can spy on the <code>console.log</code> method, see the <a href="https://on.cypress.io/stubs-spies-and-clocks">Stubs, Spies, and Clocks</a> guide.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;spies on console.log call&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">onBeforeLoad</span>(<span class="params">win</span>) &#123;</span><br><span class="line">      cy.<span class="title function_">spy</span>(win.<span class="property">console</span>, <span class="string">&#x27;log&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@log&#x27;</span>).<span class="title function_">should</span>(</span><br><span class="line">    <span class="string">&#x27;have.been.calledWith&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;TOP:&#x27;</span>,</span><br><span class="line">    <span class="title class_">Cypress</span>.<span class="property">sinon</span>.<span class="property">match</span>.<span class="property">string</span>,</span><br><span class="line">    <span class="string">&#x27;inner frame is ready&#x27;</span>,</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Notice the placeholder <code>Cypress.sinon.match.string</code> used during the assertion - we are not interested in the second argument, we only want to find if the <code>console.log</code> was called with <code>(&quot;TOP:&quot;, some string, &quot;inner frame is ready&quot;)</code> parameters. For Sinon spying assertion examples see my <a href="https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html">Spies and stubs examples page</a>. There are several <code>console.log</code> calls made by the application, but we confirm only the one that interests us.</p><p><img src="../images/listen-to-the-message/spy-log.gif" alt="Spying on the console.log test"></p><h2><span id="listening-to-the-windowpostmessage">Listening to the window.postMessage</span></h2><p>What if the top application window does not log the message send by the inner frame? What if we are only interested in the message &quot;inner frame is ready&quot; sent by the inner frame to know that the application is ready to be tested? We can listen to that message from the spec file.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;receives the window messages&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://on.cypress.io/stub</span></span><br><span class="line">  <span class="keyword">const</span> winMessage = cy.<span class="title function_">stub</span>().<span class="title function_">as</span>(<span class="string">&#x27;message&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">onBeforeLoad</span>(<span class="params">win</span>) &#123;</span><br><span class="line">      win.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// call our cy.stub (which is just a function)</span></span><br><span class="line">        <span class="title function_">winMessage</span>(e.<span class="property">data</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// confirm the inner frame sent the ready message</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@message&#x27;</span>).<span class="title function_">should</span>(</span><br><span class="line">    <span class="string">&#x27;have.been.calledOnceWithExactly&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;inner frame is ready&#x27;</span>,</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The command <a href="https://on.cypress.io/stub">cy.stub</a> creates a function that we can call ourselves. In the test above, we call the stub function with the message data, which should be just the string &quot;inner frame is ready&quot;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">win.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// call our cy.stub (which is just a function)</span></span><br><span class="line">  <span class="title function_">winMessage</span>(e.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>By giving our stub an alias, we can conveniently load it again and confirm that at some point it gets called with the expected argument</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// confirm the inner frame sent the ready message</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;@message&#x27;</span>).<span class="title function_">should</span>(</span><br><span class="line">  <span class="string">&#x27;have.been.calledOnceWithExactly&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;inner frame is ready&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="../images/listen-to-the-message/calls-stub.gif" alt="Listening to the window messages and calling our test stub"></p><p>Pretty sweet, isn&#39;t it</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The &lt;code&gt;window.postMessage&lt;/code&gt; calls are often used by complex web applications to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>The Rendered Font</title>
    <link href="https://glebbahmutov.com/blog/rendered-font/"/>
    <id>https://glebbahmutov.com/blog/rendered-font/</id>
    <published>2022-04-26T04:00:00.000Z</published>
    <updated>2022-04-26T14:34:34.936Z</updated>
    
    <content type="html"><![CDATA[<p>This blog post shows another example <a href="/blog/cypress-automation/" title="automation">automation</a> use case in Cypress Test Runner via its <a href="https://github.com/bahmutov/cypress-cdp">Chrome Debugger Protocol</a> connection. Let&#39;s take a page that uses a custom fancy font from Google Fonts site to render the body text. You can find this example page in the repo <a href="https://github.com/bahmutov/fastify-example">bahmutov&#x2F;fastify-example</a>.</p><figure class="highlight html"><figcaption><span>public/fancy.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Fancy<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css2?family=Satisfy&amp;display=swap&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&#x27;Satisfy&#x27;</span>, cursive;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">2rem</span> <span class="number">4rem</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Fancy Page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      Lorem ipsum dolor sit amet consectetur adipisicing elit. Recusandae</span><br><span class="line">      expedita dolore natus itaque cum, exercitationem consequatur possimus,</span><br><span class="line">      illo dignissimos fugiat a deserunt sunt, sed maiores libero rem eveniet</span><br><span class="line">      aspernatur. Omnis.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>How does the page look while the font is loading? Using the <a href="https://on.cypress.io/intercept">cy.intercept</a> command we can slow down loading either the initial CSS resource, or the actual font (see the bonus lesson in my <a href="https://cypress.tips/courses">Cypress network testing course</a> to learn how to slow down network calls). While the font &quot;Satisfy&quot; is loading, the browser shows the fallback font family &quot;cursive&quot; which loads the system font from my laptop.</p><p><img src="../images/rendered-font/fancy.gif" alt="The test delays by two seconds loading the custom font"></p><p>How do we confirm the font &quot;Satisfy&quot; really loads? If we ask the browser what the font <em>should</em> be used, it will answer &quot;Satisfy&quot; right away. The DOM simply returns what we listed in the element&#39;s styles. Let&#39;s write a test that uses the Chai-jQuery assertion &quot;have.css&quot;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows the font listed in the style&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/fancy.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.css&#x27;</span>, <span class="string">&#x27;font-family&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;Satisfy&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hmm, the <code>.should(&#39;have.css&#39;, &#39;font-family&#39;)</code> assertion yields the &quot;Satisfy, cursive&quot; style string, not the actual rendered font name. You can see how the test passes, even if the laptop has its network WiFi turned off.</p><p><img src="../images/rendered-font/test-passes.png" alt="The test checks the font listed in the body style"></p><p>The font &quot;Satisfy&quot; does not even load, yet the test only looks at the listed style. How do we get the actual rendered font name?</p><h2><span id="rendered-font-in-devtools">Rendered font in DevTools</span></h2><p>If you inspect the element in the Chrome DevTools, you can find the &quot;rendered font&quot; name after the font successfully loads and is applied to the element. The system font name is available in the DevTools Elements Tab at the bottom of the &quot;Computed&quot; properties sub tab.</p><p><img src="../images/rendered-font/font.png" alt="The DevTools shows the current rendered font name"></p><p>Let&#39;s get this rendered font name from the test. It takes a few calls via <code>Cypress.automation</code> low-level command which uses the existing <a href="/blog/cypress-automation/" title="Cypress Automation">Cypress Automation</a> Chrome Debugger Protocol connection to send CDP commands.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Cypress.automation returns a Promise</span></span><br><span class="line"><span class="title class_">Cypress</span>.<span class="title function_">automation</span>(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">command</span>: <span class="string">&#x27;... CDP command ...&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="comment">// command params</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>I will use my <a href="https://github.com/bahmutov/cypress-cdp">cypress-cdp</a> plugin to get the element&#39;s Node ID we need to fetch the rendered fonts using CDP command.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress-cdp</span><br><span class="line">+ cypress-cdp@1.1.0</span><br></pre></td></tr></table></figure><p>From the spec file I import the plugin and use a Chrome-based browser to run the test. We need to get the rendered font, which we can do using the Chrome Debugger Protocol command <a href="https://chromedevtools.github.io/devtools-protocol/tot/CSS/#method-getPlatformFontsForNode">CSS.getPlatformFontsForNode</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-cdp&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;confirms the rendered font after a delay&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// disable network caching</span></span><br><span class="line">  cy.<span class="title function_">CDP</span>(<span class="string">&#x27;Network.setCacheDisabled&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">cacheDisabled</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// slow down the font load</span></span><br><span class="line">  cy.<span class="title function_">intercept</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">hostname</span>: <span class="string">&#x27;fonts.gstatic.com&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="title class_">Cypress</span>.<span class="property">Promise</span>.<span class="title function_">delay</span>(<span class="number">2000</span>),</span><br><span class="line">  )</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/fancy.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// wait for the rendered font to be &quot;Satisfy&quot;</span></span><br><span class="line">  cy.<span class="title function_">getCDPNodeId</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">nodeId</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">CDP</span>(<span class="string">&#x27;CSS.getPlatformFontsForNode&#x27;</span>, &#123;</span><br><span class="line">      nodeId,</span><br><span class="line">    &#125;).<span class="title function_">should</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">expect</span>(result.<span class="property">fonts</span>)</span><br><span class="line">        .<span class="property">to</span>.<span class="property">be</span>.<span class="title function_">an</span>(<span class="string">&#x27;array&#x27;</span>)</span><br><span class="line">        .<span class="property">and</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">length</span>(<span class="number">1</span>)</span><br><span class="line">      <span class="title function_">expect</span>(</span><br><span class="line">        result.<span class="property">fonts</span>[<span class="number">0</span>].<span class="property">familyName</span>,</span><br><span class="line">        <span class="string">&#x27;font family&#x27;</span>,</span><br><span class="line">      ).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&#x27;Satisfy&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test retries fetching the rendered font until the real font &quot;Satisfy&quot; loads and is used by the browser to render the text in the <code>&lt;body&gt;</code> element.</p><p><img src="../images/rendered-font/check-font.gif" alt="The test confirming that the remote custom font &quot;Satisfy&quot; is used to render the text"></p><p>Nice!</p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/cypress-automation/" title="Cypress Automation">Cypress Automation</a></li><li><a href="/blog/cypress-vs-other-test-runners/" title="Cypress vs Other Test Runners">Cypress vs Other Test Runners</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This blog post shows another example &lt;a href=&quot;/blog/cypress-automation/&quot; title=&quot;automation&quot;&gt;automation&lt;/a&gt; use case in Cypress Test Runne
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Solve The First Click</title>
    <link href="https://glebbahmutov.com/blog/solve-the-first-click/"/>
    <id>https://glebbahmutov.com/blog/solve-the-first-click/</id>
    <published>2022-04-22T04:00:00.000Z</published>
    <updated>2022-04-22T19:47:24.180Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I wrote a blog post <a href="/blog/cypress-module-problem/" title="Cypress Module Problem">Cypress Module Problem</a> where I tested a sample Svelte Kit application <a href="https://github.com/bahmutov/my-svelte-app">bahmutov&#x2F;my-svelte-app</a>. The simple test I wrote just confirmed the home page Counter application works.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;counts&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> incrementSelector = <span class="string">&#x27;[aria-label=&quot;Increase the counter by one&quot;]&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> decrementSelector = <span class="string">&#x27;[aria-label=&quot;Decrease the counter by one&quot;]&#x27;</span>;</span><br><span class="line">cy.<span class="title function_">get</span>(incrementSelector).<span class="title function_">click</span>().<span class="title function_">click</span>();</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">get</span>(decrementSelector).<span class="title function_">click</span>();</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The tests works locally just fine.</p><p><img src="../images/solve-the-first-click/local.gif" alt="The passing local test"></p><h2><span id="continuous-integration">Continuous Integration</span></h2><p>One of the first things I recommend anyone do when writing end-to-end tests is to run the tests on continuous integration service. So I set up a GitHub Actions workflow using my own <a href="https://github.com/bahmutov/cypress-workflows">bahmutov&#x2F;cypress-workflows</a> reusable workflow called &quot;standard&quot;.</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="comment"># use the reusable workflow to check out the code, install dependencies</span></span><br><span class="line">    <span class="comment"># and run the Cypress tests</span></span><br><span class="line">    <span class="comment"># https://github.com/bahmutov/cypress-workflows</span></span><br><span class="line">    <span class="attr">uses:</span> <span class="string">bahmutov/cypress-workflows/.github/workflows/standard.yml@v1</span></span><br><span class="line">    <span class="attr">with:</span></span><br><span class="line">      <span class="attr">start:</span> <span class="string">&#x27;npm run dev&#x27;</span></span><br><span class="line">      <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">      <span class="attr">wait-on-timeout:</span> <span class="number">60</span></span><br></pre></td></tr></table></figure><p>The workflow installs the dependencies, caches them, starts the application using the command <code>npm run dev</code> and runs Cypress when the application responds on port 3000. All was good until I pushed the code. The workflow failed.</p><p><img src="../images/solve-the-first-click/step1.png" alt="The test has failed on CI"></p><p>Hmm, what has happened? Seems the element <code>[data-cy=count]</code> was present, but had a number different from 2. Was it 0? Was it 1? Was it something else? I need to see the browser at the moment of failure.</p><h2><span id="cypress-dashboard">Cypress Dashboard</span></h2><p>I have decided to set up recording the test results on <a href="https://on.cypress.io/dashboard-introduction">Cypress Dashboard</a>. In the Cypress running locally I switched to the &quot;Runs&quot; tab.</p><p><img src="../images/solve-the-first-click/runs.png" alt="Cypress Desktop GUI &quot;Runs&quot; tab"></p><p>I clicked the &quot;Connect to Dashboard&quot; button. On the next screen I have picked my <a href="https://on.cypress.io/organizations#Open-Source-Plan">Open Source organization plan</a> and set the project visibility to &quot;Public&quot;.</p><p><img src="../images/solve-the-first-click/project.png" alt="Picking the Dashboard organization to record the project to"></p><p>The next screen shows the Record key created by the Cypress Dashboard for this project. Keep this key private.</p><p><img src="../images/solve-the-first-click/key.png" alt="The recording key created for this project"></p><p>Great, now let&#39;s record the CI results to the Dashboard.</p><h2><span id="recording">Recording</span></h2><p>To record the test results and error screenshots on the Cypress Dashboard, I could have set the shown Cypress record key as an environment variable <code>CYPRESS_RECORD_KEY</code>. Since I am using GitHub Actions, I need to set the key as a secret.</p><p><img src="../images/solve-the-first-click/secret.png" alt="Set the record key as a repo Actions secret"></p><p>We need to pass our secret value to the reusable GitHub workflow, and tell the workflow to record. Here is the updated <a href="https://github.com/bahmutov/my-svelte-app/blob/main/.github/workflows/ci.yml">ci.yml</a> file</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="comment"># use the reusable workflow to check out the code, install dependencies</span></span><br><span class="line">    <span class="comment"># and run the Cypress tests</span></span><br><span class="line">    <span class="comment"># https://github.com/bahmutov/cypress-workflows</span></span><br><span class="line">    <span class="attr">uses:</span> <span class="string">bahmutov/cypress-workflows/.github/workflows/standard.yml@v1</span></span><br><span class="line">    <span class="attr">with:</span></span><br><span class="line">      <span class="attr">start:</span> <span class="string">&#x27;npm run dev&#x27;</span></span><br><span class="line">      <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">      <span class="attr">wait-on-timeout:</span> <span class="number">60</span></span><br><span class="line">      <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">secrets:</span></span><br><span class="line">      <span class="attr">recordKey:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CYPRESS_RECORD_KEY</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>The CI runs and shows the Dashboard run URL for us to open.</p><p><img src="../images/solve-the-first-click/first-run.png" alt="The terminal output shows the Cypress Dashboard URL"></p><p>Let&#39;s open the shown URL. Each test result has its own wealth of information, including the stack, the code frame, and the screenshot.</p><p><img src="../images/solve-the-first-click/run1.png" alt="The failed test run and the error location"></p><p>The Dashboard has the screenshot of the failure. Hmm, the button did work once, we can see the count was 0 and then became 1. Why isn&#39;t it 2?</p><p><img src="../images/solve-the-first-click/click2.png" alt="The screenshot from the test that failed on CI shows count of 1 instead of 2"></p><h2><span id="debugging-the-failure">Debugging the failure</span></h2><p>Ok, maybe the test clicked the button twice too quickly. Maybe we need to wait for the counter to show 1 before clicking the second time? I have modified the test to add an assertion between the two clicks.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;counts&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> incrementSelector = <span class="string">&#x27;[aria-label=&quot;Increase the counter by one&quot;]&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> decrementSelector = <span class="string">&#x27;[aria-label=&quot;Decrease the counter by one&quot;]&#x27;</span>;</span><br><span class="line">cy.<span class="title function_">get</span>(incrementSelector).<span class="title function_">click</span>();</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">get</span>(incrementSelector).<span class="title function_">click</span>();</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">get</span>(decrementSelector).<span class="title function_">click</span>();</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>I push the code and watch. The CI fails again, the Cypress Dashboard shows the new error screenshot.</p><p><img src="../images/solve-the-first-click/only-1.png" alt="The very first click does not work"></p><p>Ok, seems the very first click on the button does not register. The second click did work (in the previous version of the test). Is this a problem caused by the event listeners yet to be attached to the button, as I described in the blog post <a href="/blog/when-can-the-test-click/" title="When Can The Test Click">When Can The Test Click</a>?</p><p>To check, I first added a wait of one second before clicking the button for the very first time. This should give some time to the JavaScript framework to register the event listeners and be ready to process the user events.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;counts&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> incrementSelector = <span class="string">&#x27;[aria-label=&quot;Increase the counter by one&quot;]&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> decrementSelector = <span class="string">&#x27;[aria-label=&quot;Decrease the counter by one&quot;]&#x27;</span>;</span><br><span class="line">cy.<span class="title function_">wait</span>(<span class="number">1000</span>);</span><br><span class="line">cy.<span class="title function_">get</span>(incrementSelector).<span class="title function_">click</span>();</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">get</span>(incrementSelector).<span class="title function_">click</span>();</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">get</span>(decrementSelector).<span class="title function_">click</span>();</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Nice, the test worked on CI.</p><p><img src="../images/solve-the-first-click/passed.png" alt="The test is working if we wait one second before clicking the button"></p><p>Of course, to be really sure, I would need to run the test repeatedly as described in my blog post <a href="/blog/burning-tests/" title="Burning Tests with cypress-grep">Burning Tests with cypress-grep</a> or my other blog post <a href="https://www.cypress.io/blog/2020/12/03/retry-rerun-repeat/">Retry, Rerun, Repeat</a>.</p><p>Ok, so waiting a little bit seems to solve the &quot;missing click&quot; problem. How does the application handle the click? Let&#39;s inspect the button in the browser.</p><p><img src="../images/solve-the-first-click/el.png" alt="The Counter component attaches the click event listener to the button"></p><p>Super. So the page shows the button very quickly, before the Counter component is listening. Cypress Test Runner sees the button and clicks it right away: the button is there, it is not disabled, so good to go ... but not really. A very quick user could also click the button before the application is ready to react to the clicks.</p><h2><span id="the-solution">The solution</span></h2><p>There are no observable attributes on the page I could find that would let me know when the application has finished attaching its event listeners. Thus I need to ask the button itself &quot;do you have click event listener?&quot; as described in <a href="/blog/when-can-the-test-click/" title="When Can The Test Click">When Can The Test Click</a> blog post. I installed the <a href="https://github.com/bahmutov/cypress-cdp">cypress-cdp</a> plugin and added a command to the test file <a href="https://github.com/bahmutov/my-svelte-app/blob/main/cypress/integration/spec.js">cypress&#x2F;integration&#x2F;spec.js</a>.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-cdp&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;counts&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> incrementSelector = <span class="string">&#x27;[aria-label=&quot;Increase the counter by one&quot;]&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> decrementSelector = <span class="string">&#x27;[aria-label=&quot;Decrease the counter by one&quot;]&#x27;</span>;</span><br><span class="line">cy.<span class="title function_">hasEventListeners</span>(incrementSelector, &#123; <span class="attr">type</span>: <span class="string">&#x27;click&#x27;</span> &#125;);</span><br><span class="line">cy.<span class="title function_">get</span>(incrementSelector).<span class="title function_">click</span>();</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">get</span>(incrementSelector).<span class="title function_">click</span>();</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">get</span>(decrementSelector).<span class="title function_">click</span>();</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=count]&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="../images/solve-the-first-click/wait-for-click-listener.png" alt="The test waits for the click event listener to be attached to the button"></p><p>Beautiful.</p><p><img src="../images/solve-the-first-click/actions.png" alt="The spec seems to be reliable on CI"></p><p>Our test now seems to work reliable on CI, see for yourself at <a href="https://github.com/bahmutov/my-svelte-app/actions">bahmutov&#x2F;my-svelte-app&#x2F;actions</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently I wrote a blog post &lt;a href=&quot;/blog/cypress-module-problem/&quot; title=&quot;Cypress Module Problem&quot;&gt;Cypress Module Problem&lt;/a&gt; where I te
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="cypress dashboard" scheme="https://glebbahmutov.com/blog/tags/cypress-dashboard/"/>
    
  </entry>
  
  <entry>
    <title>Cypress Module Problem</title>
    <link href="https://glebbahmutov.com/blog/cypress-module-problem/"/>
    <id>https://glebbahmutov.com/blog/cypress-module-problem/</id>
    <published>2022-04-21T04:00:00.000Z</published>
    <updated>2022-04-22T18:53:46.983Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes you might see an error message when adding Cypress to an existing project that uses ES6 modules. When you run the <code>cypress open</code> command and it opens the first window, it tries to load the plugins file and shows an error</p><p><img src="../images/cypress-module-problem/module-error.png" alt="Cypress shows an error trying to load the plugins file"></p><p>For completeness, the full error text is below</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">**Message:** Your `pluginsFile` is invalid: `/Users/glebbahmutov/git/my-svelte-app/cypress/plugins/index.js`</span><br><span class="line"></span><br><span class="line">It threw an error when required, check the stack trace below:</span><br><span class="line"></span><br><span class="line">**Details:** Error [ERR_REQUIRE_ESM]: require() of ES Module</span><br><span class="line">/Users/glebbahmutov/git/my-svelte-app/cypress/plugins/index.js from</span><br><span class="line">/Users/glebbahmutov/Library/Caches/Cypress/9.5.4/Cypress.app/Contents/Resources/app/packages/server/lib/plugins/child/run_plugins.js not supported.</span><br><span class="line">index.js is treated as an ES module file as it is a .js file whose nearest parent package.json</span><br><span class="line">contains &quot;type&quot;: &quot;module&quot; which declares all .js files in that package scope as ES modules.</span><br><span class="line">Instead rename index.js to end in .cjs, change the requiring code to use dynamic import()</span><br><span class="line">which is available in all CommonJS modules, or change &quot;type&quot;: &quot;module&quot; to &quot;type&quot;: &quot;commonjs&quot;</span><br><span class="line">in /Users/glebbahmutov/git/my-svelte-app/package.json to treat all .js files as CommonJS</span><br><span class="line">(using .mjs for all ES modules instead).</span><br><span class="line"></span><br><span class="line">    at runPlugins (/Users/glebbahmutov/Library/Caches/Cypress/9.5.4/Cypress.app/Contents/Resources/app/packages/server/lib/plugins/child/run_plugins.js:186:15)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/Users/glebbahmutov/Library/Caches/Cypress/9.5.4/Cypress.app/Contents/Resources/app/packages/server/lib/plugins/child/index.js:8:25)</span><br><span class="line"></span><br><span class="line">**Stack trace:**</span><br></pre></td></tr></table></figure><p>It seems if the application has <code>type: module</code> setting in its <code>package.json</code>, the Cypress plugins that runs in Node and tries to load CommonJS modules fails to even load. The specs are happy - if the Cypress config file <code>cypress.json</code> specifies no plugins file, the specs load.</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;pluginsFile&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="../images/cypress-module-problem/project-loads.png" alt="Without the plugins file the project loads even if type:module is used"></p><h2><span id="the-solution">The solution</span></h2><p>The solution to this problem comes from the error description itself:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">... it is a .js file whose nearest parent package.json contains &quot;type&quot;: &quot;module&quot; ...</span><br></pre></td></tr></table></figure><p>Did you see it? The phrase &quot;nearest parent package.json&quot; is the key. If the entire project has <code>package.json</code> with <code>type: module</code>, all we need to do is to create another <code>package.json</code> closer to the Cypress plugins file that has <code>type: commonjs</code>. Here is what I do:</p><ul><li>I create a file &quot;package.json&quot; and place it in the &quot;cypress&quot; folder. It becomes the &quot;nearest&quot; package for the Cypress plugins file</li><li>I place the following JSON into that file:</li></ul><figure class="highlight js"><figcaption><span>cypress/package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;cypress-tests&quot;</span>,</span><br><span class="line"><span class="string">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;type&quot;</span>: <span class="string">&quot;commonjs&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This solves the plugins loading problem.</p><p><img src="../images/cypress-module-problem/counts.gif" alt="Without the plugins file the project loads even if type:module is used"></p><p>You can find the full source code in the repo <a href="https://github.com/bahmutov/my-svelte-app">bahmutov&#x2F;my-svelte-app</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sometimes you might see an error message when adding Cypress to an existing project that uses ES6 modules. When you run the &lt;code&gt;cypress
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>When Can The Test Click</title>
    <link href="https://glebbahmutov.com/blog/when-can-the-test-click/"/>
    <id>https://glebbahmutov.com/blog/when-can-the-test-click/</id>
    <published>2022-04-15T04:00:00.000Z</published>
    <updated>2022-04-22T19:32:42.003Z</updated>
    
    <content type="html"><![CDATA[<p>Many many moons ago I wrote a blog post <a href="https://www.cypress.io/blog/2019/01/22/when-can-the-test-click/">When Can The Test Click?</a>. It was part of a <a href="https://www.cypress.io/blog/tag/flake/">series of blog posts</a> that explain why an end-to-end test might be flaky. The main reason in my opinion that causes a test to sometimes not work, is that the test runner does not <em>know</em> when the application is ready to receive test commands, like click. There might be many reasons why that is the case, but one of the hardest to reliably solve is knowing when the application has finished its initial load. Is the application ready to receive the user click? Or does it need extra 100ms to finish loading and starting its JavaScript code? I have discussed a possible solution in the blog post <a href="/blog/app-loaded/" title="When Has The App Loaded">When Has The App Loaded</a>. In this blog post, I will show another solution that goes directly to the heart of the problem of &quot;missing&quot; clicks - checking if the application has attached its event listeners to the button before clicking on it.</p><h2><span id="the-problem">The problem</span></h2><p>Let&#39;s take an application that responds to a button click event.</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">output</span> <span class="attr">id</span>=<span class="string">&quot;output&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#one&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> output = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#output&#x27;</span>)</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  output.<span class="property">innerText</span> = <span class="string">&#x27;clicked&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above application registers the event handler synchronously. When the <code>cy.visit</code> command finishes, the application is ready to go.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec1.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;clicks on the button&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;button#one&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;#output&#x27;</span>, <span class="string">&#x27;clicked&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test reliably passes.</p><p><img src="../images/when-click/spec1.png" alt="The test can immediately click on the button"></p><p>But what if the application delays its load? What if it attaches the &quot;click&quot; event listener by one second? What if the application is slowly loading chunks of its code? While the user sees the page elements, they are not ready to process any events, and the test fails.</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#one&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> output = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#output&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// add event listeners after a short delay</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    output.<span class="property">innerText</span> = <span class="string">&#x27;clicked&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>The same test now fails - because the &quot;click&quot; even gets lost. The test runner clicks before the application starts listening.</p><p><img src="../images/when-click/click-fails.gif" alt="The test fails because it clicks before the application registers the click event handler"></p><h2><span id="the-diagnosis">The diagnosis</span></h2><p>A good way to determine if the test acts before the application is ready to respond is to add <a href="https://on.cypress.io/wait">cy.wait</a> commands. You can wait for some external <a href="/blog/app-loaded/" title="observable event">observable event</a>, or simply wait N milliseconds (I know, I know, but this is temporary).</p><figure class="highlight js"><figcaption><span>cypress/integration/spec1.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;clicks on the button&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// let the application fully load</span></span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="number">5000</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;button#one&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;#output&#x27;</span>, <span class="string">&#x27;clicked&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test now reliably passes</p><p><img src="../images/when-click/wait5.png" alt="The test waits five seconds before clicking"></p><p>How can we avoid the hard-coded wait, and instead click after the application is ready to receive the &quot;click&quot; event?</p><h2><span id="event-listeners">Event listeners</span></h2><p>If you open the DevTools and look at the button DOM element, the tab &quot;Event Listeners&quot; shows the currently attached ... event listeners.</p><p><img src="../images/when-click/event-listener.png" alt="The button element has the click event listener attached"></p><p>This &quot;click&quot; event listener is attached to the element by the application code after it is done initializing.</p><h2><span id="cypress-cdp">cypress-cdp</span></h2><p>Hmm, if only our test could wait for this event listener to exist before clicking... Well, let&#39;s check! If the DevTools panel can query an element to show its event listeners, we can do the same thing from Cypress using Chrome Debugger Protocol. After all, Cypress has this connection already and even exposes it to the test code, as I show in my blog post <a href="/blog/cypress-vs-other-test-runners/" title="Cypress vs Other Test Runners">Cypress vs Other Test Runners</a>. In general, this looks like</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cypress</span>.<span class="title function_">automation</span>(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">command</span>: rdpCommand,</span><br><span class="line">  params,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Because <code>Cypress.automation</code> is a very low-level primitive, it eagerly returns a Promise, which your code needs to <code>cy.wrap(Promise)</code> to wait to resolve. But since I am a nice person, I wrote a little NPM plugin that exposes the Chrome Debugger Protocol via a Cypress custom command <code>cy.CDP</code>. You can find the source code in the repo <a href="https://github.com/bahmutov/cypress-cdp">bahmutov&#x2F;cypress-cdp</a>.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress-cdp</span><br></pre></td></tr></table></figure><p>In your support or spec file, import the <code>cypress-cdp</code> and you will get the <code>cy.CDP</code> command. Let&#39;s use it to wait for the event listeners to be attached. First, we need to find the internal browser object ID for the button we want to click. We can ask the <code>Runtime</code> object to <code>evaluate</code> the expression in the application&#39;s iframe:</p><figure class="highlight js"><figcaption><span>cypress/integration/click.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-cdp&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;clicks on the button when there is an event handler&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> selector = <span class="string">&#x27;button#one&#x27;</span></span><br><span class="line">  cy.<span class="title function_">CDP</span>(<span class="string">&#x27;Runtime.evaluate&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">expression</span>: <span class="string">&#x27;frames[0].document.querySelector(&quot;&#x27;</span> + selector + <span class="string">&#x27;&quot;)&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">expect</span>(v.<span class="property">result</span>).<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">property</span>(<span class="string">&#x27;objectId&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;result.objectId&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The command <code>cy.CDP</code> has DOM snapshots and checks the attached assertions, so it is meant to be retry-able. You can see the button&#39;s internal object ID printed in the Command Log.</p><p><img src="../images/when-click/button-id.png" alt="We got the internal button ID from the browser using the Chrome Debugger Protocol"></p><p>Now that we have the ID, let&#39;s query the event listeners - and because the <code>cy.CDP</code> command retries the assertions that follow it, we can check the returned event listeners array. If there are no event listeners (we could also check their types), then we can throw an error to re-query the element.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;clicks on the button when there is an event handler&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> selector = <span class="string">&#x27;button#one&#x27;</span></span><br><span class="line">  cy.<span class="title function_">CDP</span>(<span class="string">&#x27;Runtime.evaluate&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">expression</span>: <span class="string">&#x27;frames[0].document.querySelector(&quot;&#x27;</span> + selector + <span class="string">&#x27;&quot;)&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">expect</span>(v.<span class="property">result</span>).<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">property</span>(<span class="string">&#x27;objectId&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;result.objectId&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">objectId</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">CDP</span>(<span class="string">&#x27;DOMDebugger.getEventListeners&#x27;</span>, &#123;</span><br><span class="line">        objectId,</span><br><span class="line">        <span class="attr">depth</span>: -<span class="number">1</span>,</span><br><span class="line">        <span class="attr">pierce</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;).<span class="title function_">should</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">expect</span>(v.<span class="property">listeners</span>).<span class="property">to</span>.<span class="property">have</span>.<span class="property">length</span>.<span class="title function_">greaterThan</span>(<span class="number">0</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// now we can click that button</span></span><br><span class="line">  cy.<span class="title function_">get</span>(selector).<span class="title function_">click</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Does it work? Let&#39;s see:</p><p><img src="../images/when-click/clicked.gif" alt="The test waits for the event listener to be attached before clicking"></p><p>Beautiful!</p><p><strong>Tip:</strong> you can find the full list of Chrome Debugger Protocol commands <a href="https://chromedevtools.github.io/devtools-protocol/">here</a>.</p><h2><span id="update-1-example-application">Update 1: example application</span></h2><p>Just as I wrote this blog post, I hit a real-world use case for waiting for the &quot;click&quot; event listener to be attached, read my blog post <a href="/blog/solve-the-first-click/" title="Solve The First Click">Solve The First Click</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Many many moons ago I wrote a blog post &lt;a href=&quot;https://www.cypress.io/blog/2019/01/22/when-can-the-test-click/&quot;&gt;When Can The Test Click
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Elements Visible In The Current Viewport</title>
    <link href="https://glebbahmutov.com/blog/visible-in-the-viewport/"/>
    <id>https://glebbahmutov.com/blog/visible-in-the-viewport/</id>
    <published>2022-04-13T04:00:00.000Z</published>
    <updated>2022-04-14T14:50:11.855Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine your application loads in stages and shows several loading elements. There are two loading elements visible to the user right away (above the fold), and one more loading element below the fold. Here is a sample page showing this situation:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;page1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loading&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loading&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;page2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loading&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The <code>#page1</code> and <code>#page2</code> sections are marked with different colors. Each is 1000x1000 pixels and if we zoom out look like this:</p><p><img src="../images/visible-in-the-viewport/sections.png" alt="Two sections with three loading elements"></p><p><strong>Tip:</strong> I set the viewport width and height as 1000 pixels in the <code>cypress.json</code> file. To show the two sections at once, I modified the viewport height using per-test configuration:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;loads&#x27;</span>, &#123; <span class="attr">viewportHeight</span>: <span class="number">2000</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>üéÅ You can find the source code and the tests shown in this bog post in the repo <a href="https://github.com/bahmutov/loading-elements">bahmutov&#x2F;loading-elements</a>.</p></blockquote><p><strong>Video:</strong> I have recorded a <a href="https://youtu.be/XLgwQsSa9PM">short video</a> showing how to check the loading elements in the current viewport. You can watch the video below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/XLgwQsSa9PM" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>The application &quot;loads&quot; and removes the first two loading elements.</p><figure class="highlight js"><figcaption><span>public/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [loading1, loading2] = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;#page1 .loading&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hiding the first loading element&#x27;</span>)</span><br><span class="line">  loading1.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;removing the second loading element&#x27;</span>)</span><br><span class="line">  loading2.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(loading2)</span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>If we want to check if the loading elements <em>above</em> the fold disappear, we cannot just check the visibility - because it will include the third loading element that is still visible, even if the user cannot see it without scrolling.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;the loading element below the fold never goes away&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// at first, all loading elements are visible</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.loading&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>).<span class="title function_">and</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  <span class="comment">// the loaders on the first page disappear</span></span><br><span class="line">  <span class="comment">// but the loader on the second page is still visible</span></span><br><span class="line">  <span class="comment">// so the next assertion fails</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.loading&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/visible-in-the-viewport/failing-test.gif" alt="The test fails, as the third loading element remains visible below the fold"></p><p>How do we check if the loading elements inside the <em>current viewport</em> are no longer visible? By using the bounding rectangle of the elements before checking them! See the documentation for the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect">Element.getBoundingClientRect</a> which returns the rectangle in the current viewport. I took this chart from the documentation page:</p><p><img src="../images/visible-in-the-viewport/element-box-diagram.png" alt="The element bounding box, source: Mozilla Developer docs"></p><p>If the bottom of the element is less than zero, then the element is above the current viewport. If the top of the element is larger than the viewport height, then the element is still below the current viewport. Similarly, we can check the Let me write a custom command to repeatedly check the DOM until the elements in the current viewport become hidden.</p><figure class="highlight js"><figcaption><span>cypress/integration/support.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Cypress</span>.<span class="property">Commands</span>.<span class="title function_">add</span>(<span class="string">&#x27;invisibleInViewport&#x27;</span>, <span class="function">(<span class="params">selector</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">window</span>(&#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// get the current viewport of the application</span></span><br><span class="line">    <span class="keyword">const</span> &#123; innerHeight, innerWidth &#125; = win</span><br><span class="line">    cy.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; innerHeight, innerWidth &#125;))</span><br><span class="line"></span><br><span class="line">    cy.<span class="title function_">get</span>(selector).<span class="title function_">should</span>(<span class="function">(<span class="params">$el</span>) =&gt;</span> &#123;</span><br><span class="line">      $el.<span class="title function_">each</span>(<span class="function">(<span class="params">k, el</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// skip stray and hidden elements</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title class_">Cypress</span>.<span class="property">dom</span>.<span class="title function_">isAttached</span>(el)) &#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title class_">Cypress</span>.<span class="property">dom</span>.<span class="title function_">isVisible</span>(el)) &#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect</span></span><br><span class="line">        <span class="keyword">const</span> rect = el.<span class="title function_">getBoundingClientRect</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rect.<span class="property">bottom</span> &lt; <span class="number">0</span> || rect.<span class="property">top</span> &gt; innerHeight) &#123;</span><br><span class="line">          <span class="comment">// the element is outside the viewport vertically</span></span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rect.<span class="property">right</span> &lt; <span class="number">0</span> || rect.<span class="property">left</span> &gt; innerWidth) &#123;</span><br><span class="line">          <span class="comment">// the element is outside the viewport horizontally</span></span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`loader <span class="subst">$&#123;k + <span class="number">1</span>&#125;</span> is visible`</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;selector&#125;</span> is invisible in viewport`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let&#39;s make our application even more complicated. We will hide &#x2F; remove all loading elements one by one after 2, 3 and 4.5 seconds.</p><figure class="highlight js"><figcaption><span>public/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [loading1, loading2] = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;#page1 .loading&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> loading3 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#page2 .loading&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hiding the first loading element&#x27;</span>)</span><br><span class="line">  loading1.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;removing the second loading element&#x27;</span>)</span><br><span class="line">  loading2.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(loading2)</span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;removing the third loading element&#x27;</span>)</span><br><span class="line">  loading3.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(loading3)</span><br><span class="line">&#125;, <span class="number">4500</span>)</span><br></pre></td></tr></table></figure><p>Our test will wait for the above the folder loading elements to disappear before scrolling to the bottom of the page and verifying the last loading element is also gone from the view.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec2.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;checks if the loading element is visible within the current viewport&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// at first, both loading elements are visible</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.loading&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>).<span class="title function_">and</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">invisibleInViewport</span>(<span class="string">&#x27;.loading&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">scrollTo</span>(<span class="string">&#x27;bottom&#x27;</span>, &#123; <span class="attr">duration</span>: <span class="number">500</span> &#125;)</span><br><span class="line">  <span class="comment">// there is one more loading element visible here</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.loading:visible&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="comment">// then the last loading element goes away</span></span><br><span class="line">  cy.<span class="title function_">invisibleInViewport</span>(<span class="string">&#x27;.loading&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test works beautifully.</p><p><img src="../images/visible-in-the-viewport/spec2.gif" alt="The test correctly looks at the loading elements in the current viewport"></p><p>Happy Testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine your application loads in stages and shows several loading elements. There are two loading elements visible to the user right awa
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>When Has The App Loaded</title>
    <link href="https://glebbahmutov.com/blog/app-loaded/"/>
    <id>https://glebbahmutov.com/blog/app-loaded/</id>
    <published>2022-03-31T04:00:00.000Z</published>
    <updated>2022-03-31T13:44:22.773Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s take an application that fetches data from the server and write end-to-end tests for it. What happens if the application takes a little bit longer than usual to bootstrap, get the data, and render it? Will the test fail because it does not wait for the data to finish loading?</p><p>The example I am about to show comes from <a href="https://github.com/bahmutov/cypress-workshop-basics">bahmutov&#x2F;cypress-workshop-basics</a>. The test visits the application URL and confirms there are no items on the page.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with zero items&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hmm, the test passes, yet I can clearly see 2 todo items on the page? Is the assertion <code>cy.get(&#39;li.todo&#39;).should(&#39;have.length&#39;, 0)</code> not doing its job?</p><p><img src="../images/app-loaded/todos.png" alt="The test passes when it should have failed"></p><p>The test finishes <em>too quickly</em>. While the application is still loading the data, the assertion <code>cy.get(&#39;li.todo&#39;).should(&#39;have.length&#39;, 0)</code> checks the empty initial page. There are no todo items, and the test completes. Only then the Ajax call returns and the 2 items are rendered on the page. By then the test has finished.</p><p>Note that the <code>.should(&#39;have.length&#39;, 0)</code> assertion is similar to the <code>.should(&#39;not.exist&#39;)</code> assertion. Such negative assertions are dangerous in my opinion, they can pass for the wrong reason (like in our case). Read the blog posts <a href="/blog/negative-assertions/" title="Be Careful With Negative Assertions">Be Careful With Negative Assertions</a> and <a href="/blog/negative-assertions-and-missing-states/" title="Negative Assertions And Missing States">Negative Assertions And Missing States</a> for more examples.</p><h2><span id="waiting-for-the-data-load">Waiting for the data load</span></h2><p>The simplest solution to this problem, is to make the test wait for the data to load. Perhaps a one second delay would be enough?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with zero items (waits)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="number">1000</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Yes, now the test fails as expected, because the page shows the loaded data when the test checks it.</p><p><img src="../images/app-loaded/wait.png" alt="The test waits one second before checking the page"></p><p>Is one second wait enough? It might be enough when running the application locally. When running the tests against a remote server, we might need to wait longer. The worst is when the data load takes approximately one second. It leads to a race condition between the application and the test. Sometimes the application takes slightly longer than one second, and the test fails to detect the data, leading to the <a href="https://on.cypress.io/flaky-test-management">flaky tests</a>.</p><h2><span id="waiting-for-network-call-to-finish">Waiting for network call to finish</span></h2><p>A much better solution is to spy on the Ajax call made by the application and wait for the data to return before checking the page. You can use <a href="https://on.cypress.io/intercept">cy.intercept</a> command to spy on calls made by the application. You can spy on Ajax calls or any resource requested by the browser.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with zero items&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// start Cypress network server</span></span><br><span class="line">  <span class="comment">// spy on route `GET /todos`</span></span><br><span class="line">  <span class="comment">// THEN visit the page</span></span><br><span class="line">  cy.<span class="title function_">intercept</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@todos&#x27;</span>) <span class="comment">// wait for `GET /todos` response</span></span><br><span class="line">    <span class="comment">// inspect the server&#x27;s response</span></span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;response.body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">  <span class="comment">// then check the DOM</span></span><br><span class="line">  <span class="comment">// note that we don&#x27;t have to use &quot;cy.wait(...).then(...)&quot;</span></span><br><span class="line">  <span class="comment">// because all Cypress commands are flattened into a single chain</span></span><br><span class="line">  <span class="comment">// automatically. Thus just write &quot;cy.wait(); cy.get();&quot; naturally</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/app-loaded/network.png" alt="The test waits for the network call to complete"></p><p>The command <code>cy.wait(&#39;@todos&#39;)</code> waits for the network call, even if the call is made later.</p><p>In my application example, I can force the application to wait N seconds before making the initial load.</p><p>The application might delay the Ajax call.</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// state.delay comes from URL query parameter</span></span><br><span class="line"><span class="comment">// ?delay=2000</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">commit</span>(<span class="string">&#x27;SET_LOADING&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  axios</span><br><span class="line">    .<span class="title function_">get</span>(<span class="string">&#x27;/todos&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> r.<span class="property">data</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">todos</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;SET_TODOS&#x27;</span>, todos)</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;SET_LOADING&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;could not load todos&#x27;</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(e.<span class="property">message</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(e.<span class="property">response</span>.<span class="property">data</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// an easy way for the application to signal</span></span><br><span class="line">      <span class="comment">// that it is done loading</span></span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;loaded&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, state.<span class="property">delay</span>)</span><br></pre></td></tr></table></figure><p>The delay makes no difference, the test still correctly waits for the application to load its initial data.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with zero items (delay)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">intercept</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/?delay=2000&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@todos&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Look at the recording below. The Ajax call is detected two seconds after the visit, yet <code>cy.wait(&#39;@todos&#39;)</code> happily waits for it before Cypress proceeds to the next command.</p><p><img src="../images/app-loaded/delay.gif" alt="The test waits for the delayed Ajax call"></p><h2><span id="render-delay">Render delay</span></h2><p>What if our application has a delay between receiving the data and rendering it on the page?</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">axios</span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&#x27;/todos&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> r.<span class="property">data</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">todos</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;SET_TODOS&#x27;</span>, todos)</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;SET_LOADING&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">    &#125;, state.<span class="property">renderDelay</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Hmm, our test again passes when it should have failed.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with zero items (delay plus render delay)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">intercept</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/?delay=2000&amp;renderDelay=1500&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@todos&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/app-loaded/render-delay.gif" alt="The delay between the network call and showing items on the page confuses the test"></p><p>The &quot;missing&quot; step between finishing the network call and rendering the data on the page is exactly the problem I have described in the blog post <a href="/blog/negative-assertions-and-missing-states/" title="Negative Assertions And Missing States">Negative Assertions And Missing States</a>. The test does not &quot;know&quot; that the application is still not done loading. We need an explicit way of signalling from the application to the test runner &quot;I am done loading the data&quot;.</p><h2><span id="observe-the-page">Observe the page</span></h2><p>The best approach to tell that the application has finished loading ... is for application to set something observable to tell the test runner (and the human users) that the data load is done. For example, the application can set a CSS class or a utility data attribute</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">SET_LOADING</span>(<span class="params">state, flag</span>) &#123;</span><br><span class="line">  state.<span class="property">loading</span> = flag</span><br><span class="line">  <span class="keyword">if</span> (flag === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="comment">// an easy way for the application to signal</span></span><br><span class="line">    <span class="comment">// that it is done loading</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;loaded&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then the test can tell when the application has finished loading by observing the <code>&lt;body&gt;</code> element.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with zero items (check body.loaded)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// use delays to simulate the delayed load and render</span></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/?delay=2000&amp;renderDelay=1500&#x27;</span>)</span><br><span class="line">  <span class="comment">// the application sets &quot;loaded&quot; class on the body</span></span><br><span class="line">  <span class="comment">// in the test we can check for this class</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;loaded&#x27;</span>)</span><br><span class="line">  <span class="comment">// then check the number of items</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test behaves correctly and fails as expected.</p><p><img src="../images/app-loaded/body-loaded.gif" alt="The test waits for the body element to have class loaded"></p><p>Note: the assertion <code>.should(&#39;have.class&#39;, &#39;loaded&#39;)</code> passes after 3.5 seconds; the application requests the data after 2 seconds, and renders it after 1.5 seconds. The assertion might time out if the data load takes slightly longer, since the default command timeout is 4 seconds. I would suggest using a longer command time out in this case:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;body&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">7_000</span> &#125;).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;loaded&#x27;</span>)</span><br></pre></td></tr></table></figure><h2><span id="check-the-window-object">Check the window object</span></h2><p>We can use another mechanism to signal the test runner that the application has finished loading the data. We can even pass the data we got from the server!</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">SET_TODOS</span>(<span class="params">state, todos</span>) &#123;</span><br><span class="line">  state.<span class="property">todos</span> = todos</span><br><span class="line">  <span class="comment">// expose the todos via the global &quot;window&quot; object</span></span><br><span class="line">  <span class="comment">// but only if we are running Cypress tests</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">Cypress</span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">todos</span> = todos</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The test then can detect when the <code>window.todos</code> property is set using <a href="https://on.cypress.io/window">cy.window</a> and <a href="https://on.cypress.io/its">cy.its</a> commands.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with zero items (check the window)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// use delays to simulate the delayed load and render</span></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/?delay=2000&amp;renderDelay=1500&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">window</span>().<span class="title function_">its</span>(<span class="string">&#x27;todos&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">7_000</span> &#125;)</span><br><span class="line">  <span class="comment">// then check the number of items</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/app-loaded/window.png" alt="Continue the test when the application sets the window.todos object"></p><p>If we can detect when the <code>window.todos</code> property is set, we can read the actual todos and use them to check the rendered page.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with N items&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// use delays to simulate the delayed load and render</span></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/?delay=2000&amp;renderDelay=1500&#x27;</span>)</span><br><span class="line">  <span class="comment">// access the loaded Todo items</span></span><br><span class="line">  cy.<span class="title function_">window</span>()</span><br><span class="line">    <span class="comment">// you can drill down nested properties using &quot;.&quot;</span></span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;todos.length&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// then check the number of items</span></span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, n)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/app-loaded/todos-n.gif" alt="Using the data from the app to check the rendered page"></p><p>You can even use the <code>window.todos</code> to check what the page renders.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;starts with N items and checks the page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// use delays to simulate the delayed load and render</span></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/?delay=2000&amp;renderDelay=1500&#x27;</span>)</span><br><span class="line">  <span class="comment">// access the loaded Todo items</span></span><br><span class="line">  cy.<span class="title function_">window</span>()</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">todos</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// then check the number of items</span></span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;li.todo&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, todos.<span class="property">length</span>)</span><br><span class="line">      todos.<span class="title function_">forEach</span>(<span class="function">(<span class="params">todo</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (todo.<span class="property">completed</span>) &#123;</span><br><span class="line">          cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo&#x27;</span>, todo.<span class="property">title</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo&#x27;</span>, todo.<span class="property">title</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/app-loaded/check-todos.png" alt="Check if the page renders each todo correctly"></p><p>For more on accessing the application data from the Cypress test via the <code>window</code> object, see the blog post <a href="/blog/stub-via-window/" title="Stub Objects By Passing Them Via Window Property">Stub Objects By Passing Them Via Window Property</a>.</p><h2><span id="conclusion">Conclusion</span></h2><p>The test runner should not &quot;run away&quot; from the application. If the application is still loading the data, the test runner should wait for the data to load and the page to be ready to continue testing. In this blog post, I have shown how to wait for the data to load using:</p><ul><li>a hard-coded <code>cy.wait(N)</code> command</li><li>network spy using the <code>cy.intercept</code> command</li><li>a <code>body</code> element property added after the load</li><li>a property on the <code>window</code> object set by the application after the load</li></ul><p>Happy testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s take an application that fetches data from the server and write end-to-end tests for it. What happens if the application takes 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Stub Objects By Passing Them Via Window Property</title>
    <link href="https://glebbahmutov.com/blog/stub-via-window/"/>
    <id>https://glebbahmutov.com/blog/stub-via-window/</id>
    <published>2022-03-30T04:00:00.000Z</published>
    <updated>2022-03-30T12:55:27.063Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine you have an application that imports a config object from another file, and then uses the config to control what it shows on the page.</p><figure class="highlight ts"><figcaption><span>Config.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;Todo App&#x27;</span>,</span><br><span class="line">  <span class="attr">showCount</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>App.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Config</span> <span class="keyword">from</span> <span class="string">&#x27;./Config&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;Config.title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Can you change the <code>Config</code> object from a Cypress end-to-end test?</p><blockquote class="pullquote"><p>üéÅ You can find the source code in the repo <a href="https://github.com/bahmutov/stub-window-object-example">bahmutov&#x2F;stub-window-object-example</a></p></blockquote><h2><span id="set-config-on-the-window">Set Config on the window</span></h2><p>To let the test &quot;know&quot; the config values, the simplest is to assign it to a property of the <code>window</code> object.</p><figure class="highlight ts"><figcaption><span>App.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Config</span> <span class="keyword">from</span> <span class="string">&#x27;./Config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">Cypress</span>) &#123;</span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">Config</span> = <span class="title class_">Config</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;Config.title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The test can confirm the keys in the config object, and use the title from the config to check the page.</p><figure class="highlight js"><figcaption><span>cypress/integration/config-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;sets the window config&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">// cy.visit yields the window object</span></span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;Config&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.keys&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;showCount&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">title</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, title)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/stub-via-window/title.png" alt="Checking the title"></p><p><strong>Tip:</strong> I am using <code>// @ts-ignore</code> above some source lines to avoid fighting the TypeScript compiler.</p><p><img src="../images/stub-via-window/ts-ignore.png" alt="Not today, TypeScript"></p><h2><span id="override-the-config-object">Override the config object</span></h2><p>If we can read the config object from the window object, we can also override it. We just need to define a custom property that lets us return a new value from the test. In the application, we make an intermediate variable to pass the config object.</p><figure class="highlight ts"><figcaption><span>App.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _config <span class="keyword">from</span> <span class="string">&#x27;./Config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Config</span> = _config</span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">Cypress</span>) &#123;</span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">Config</span> = <span class="title class_">Config</span></span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  <span class="title class_">Config</span> = <span class="variable language_">window</span>.<span class="property">Config</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// use the Config object</span></span><br></pre></td></tr></table></figure><p>Our Cypress test can intercept the assignment &quot;window.Config &#x3D; Config&quot; and replace its value and return its own object. We just need to make sure we are ready before the application loads its application code. We can do this in the <code>onBeforeLoad</code> callback of the <a href="https://on.cypress.io/visit">cy.visit</a> command.</p><figure class="highlight js"><figcaption><span>cypress/integration/override-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;overrides the config&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">onBeforeLoad</span>(<span class="params">win</span>) &#123;</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(win, <span class="string">&#x27;Config&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">// ignore the config the application sets</span></span><br><span class="line">        <span class="comment">// and instead use our own test config object</span></span><br><span class="line">        <span class="attr">set</span>: cy.<span class="title function_">stub</span>().<span class="title function_">as</span>(<span class="string">&#x27;setConfig&#x27;</span>),</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;Cypress Test&#x27;</span>,</span><br><span class="line">            <span class="attr">showCount</span>: <span class="literal">false</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Cypress Test&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-cy=&quot;pending-count&quot;]&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/stub-via-window/override.png" alt="The test returns its own config object"></p><h2><span id="combine-the-config-object">Combine the config object</span></h2><p>We do not have to completely replace the application&#39;s config object. We can combine its value with some of our test properties.</p><figure class="highlight js"><figcaption><span>cypress/integration/combine-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;combines the config&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">onBeforeLoad</span>(<span class="params">win</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> appValue</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(win, <span class="string">&#x27;Config&#x27;</span>, &#123;</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">v</span>) &#123;</span><br><span class="line">          appValue = v</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="comment">// returns a combined config</span></span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            ...appValue,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;Cypress Test&#x27;</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// we only check the property we have set</span></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Cypress Test&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/stub-via-window/combine.png" alt="The test returns its own config object"></p><h2><span id="mock-config-module">Mock Config module</span></h2><p>We can go one step beyond the previous solutions. Instead of modifying the application code to expose the Config object, we can directly mock the <code>src/Config.tsx</code> module in our JavaScript bundle (assuming the &quot;standard&quot; Webpack module format). We can do this using the plugin <a href="https://github.com/bahmutov/mock-in-bundle">mock-in-bundle</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D mock-in-bundle</span><br><span class="line">+ mock-in-bundle@1.3.0</span><br></pre></td></tr></table></figure><p>From the spec file, specify the module and the new default export.</p><figure class="highlight js"><figcaption><span>cypress/integration/mock-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mockInBundle &#125; <span class="keyword">from</span> <span class="string">&#x27;mock-in-bundle&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;mocks the Config module&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">mockInBundle</span>(<span class="string">&#x27;src/Config.tsx&#x27;</span>, &#123; <span class="attr">default</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;Mock Test&#x27;</span> &#125; &#125;)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Mock Test&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Boom üí£ the mock title is shown.</p><p><img src="../images/stub-via-window/mock.png" alt="The Cypress test mocks the module by name in the JavaScript bundle loaded by the application"></p><p>Happy testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine you have an application that imports a config object from another file, and then uses the config to control what it shows on the 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>How Cypress Freezes CSS Animations And You Can Too</title>
    <link href="https://glebbahmutov.com/blog/css-animations/"/>
    <id>https://glebbahmutov.com/blog/css-animations/</id>
    <published>2022-03-29T04:00:00.000Z</published>
    <updated>2022-03-29T16:08:18.751Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s take a web application with beautiful CSS animations showing time of day. Each click of the button sets a different CSS class which triggers CSS transitions.</p><p><img src="../images/css-animations/day-sunset.gif" alt="Time of day via CSS animations"></p><blockquote class="pullquote"><p>üñº You can find the example application in the repo <a href="https://github.com/bahmutov/css-animation-cypress-example">bahmutov&#x2F;css-animation-cypress-example</a>. It is based on <a href="https://codepen.io/oliviale/pen/ELPvLM">this Codepen</a> created by Olivia Ng.</p></blockquote><h2><span id="css-animations">CSS Animations</span></h2><p>To create the transitions, the application sets a different CSS class name</p><figure class="highlight js"><figcaption><span>public/script.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.option&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="string">&#x27;.option&#x27;</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> type = $(<span class="variable language_">this</span>).<span class="title function_">data</span>(<span class="string">&#x27;option&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="string">&#x27;day&#x27;</span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;.time&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;time day&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&#x27;night&#x27;</span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;.time&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;time night&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&#x27;dusk&#x27;</span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;.time&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;time dusk&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&#x27;sunset&#x27;</span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;.time&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;time sunset&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The application CSS specifies the transition duration applied to different elements. For example, to move the sun and the clouds, the application uses SVG shapes. Each shape will change its &quot;fill&quot; property in five seconds.</p><figure class="highlight css"><figcaption><span>public/style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">path,</span><br><span class="line">polygon,</span><br><span class="line">circle,</span><br><span class="line">rect &#123;</span><br><span class="line">  <span class="attribute">transition</span>: fill <span class="number">5s</span> ease;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Similarly, the &quot;.sun&quot; and other CSS classes will change its styles when applied in five seconds</p><figure class="highlight css"><figcaption><span>public/style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sun</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">5s</span> ease;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clouds</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">5s</span> ease <span class="number">0.1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.night</span> <span class="selector-class">.stars</span>,</span><br><span class="line"><span class="selector-class">.night</span> <span class="selector-class">.moon</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">5s</span> ease <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="cypress-tests">Cypress tests</span></h2><p>Ok, pretty slick. But how do the slow transitions affect the Cypress tests? Well, Cypress test does not &quot;know&quot; about five seconds it takes to finish the transition after clicking each button. Thus a typical test will show a weird start of the transition before abruptly starting a new one.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> times = [<span class="string">&#x27;Day&#x27;</span>, <span class="string">&#x27;Sunset&#x27;</span>, <span class="string">&#x27;Night&#x27;</span>, <span class="string">&#x27;Dusk&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;goes through the day&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  times.<span class="title function_">forEach</span>(<span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">contains</span>(time)</span><br><span class="line">      .<span class="title function_">click</span>()</span><br><span class="line">      <span class="comment">// add one second delay to show the animation in progress</span></span><br><span class="line">      .<span class="title function_">wait</span>(<span class="number">1000</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/css-animations/too-short.gif" alt="The test only waits one second before the next step"></p><p>We could slow down the test by waiting five seconds, but what if we could speed up the animations instead? Or disable them completely?</p><h2><span id="cypress-screenshots">Cypress screenshots</span></h2><p>If you every used <a href="https://on.cypress.io/screenshot">cy.screenshot</a> command, you might have noticed the option <code>disableTimersAndAnimations</code> in its documentation page:</p><p><img src="../images/css-animations/screenshot-option.png" alt="The cy.screenshot command mentions CSS animations"></p><p>Hmm, does <code>cy.screenshot</code> know how to disable CSS animations?! Let&#39;s try it out.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;takes a screenshot&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  times.<span class="title function_">forEach</span>(<span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">contains</span>(time).<span class="title function_">click</span>()</span><br><span class="line">    <span class="comment">// notice we are taking a screenshot immediately</span></span><br><span class="line">    <span class="comment">// without waiting for anything to finish updating</span></span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;.window&#x27;</span>).<span class="title function_">screenshot</span>(time, &#123;</span><br><span class="line">      <span class="attr">overwrite</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Look at the screenshots - they all show the page as if the CSS animations ran to the finish!</p><p><img src="../images/css-animations/combined.png" alt="Somehow cy.screenshot shows the final transition in each image"></p><p>How does it do it? How does it bypass waiting 5 seconds?</p><p>Let&#39;s search the <a href="https://github.com/cypress-io/cypress">Cypress source code</a> for &quot;disableTimersAndAnimations&quot;. This search result seems very relevant.</p><p><img src="../images/css-animations/search1.png" alt="Looks like cy.screenshot is injecting something into the application&#39;s frame to disable CSS animations"></p><p>Let&#39;s click on the search result to find the utility method <code>addCssAnimationDisabler</code>. It seems to just add a style to overwrite all CSS transitions in the page and set their duration to zero!</p><p><img src="../images/css-animations/search2.png" alt="How Cypress skips CSS animations during screenshots"></p><h2><span id="disabling-animations-from-out-test">Disabling animations from out test</span></h2><p>Nice, we can do the same thing ourselves from the Cypress test. We can use jQuery bundled with Cypress under <code>Cypress.$</code> to make the code simpler.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;disables animations&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">invoke</span>(</span><br><span class="line">    <span class="string">&#x27;append&#x27;</span>,</span><br><span class="line">    <span class="title class_">Cypress</span>.$(<span class="string">`</span></span><br><span class="line"><span class="string">      &lt;style id=&quot;__cypress-animation-disabler&quot;&gt;</span></span><br><span class="line"><span class="string">        *, *:before, *:after &#123;</span></span><br><span class="line"><span class="string">          transition-property: none !important;</span></span><br><span class="line"><span class="string">          animation: none !important;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &lt;/style&gt;</span></span><br><span class="line"><span class="string">    `</span>),</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  times.<span class="title function_">forEach</span>(<span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">contains</span>(time).<span class="title function_">click</span>().<span class="title function_">wait</span>(<span class="number">1000</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test shows the nice final state of each animation.</p><p><img src="../images/css-animations/disabled.gif" alt="The Cypress test with disabled CSS animations"></p><p>Note: I should record a video showing what I have explained in this blog post. Subscribe to <a href="https://www.youtube.com/glebbahmutov">my YouTube channel</a> to find the video when it comes out.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s take a web application with beautiful CSS animations showing time of day. Each click of the button sets a different CSS class w
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Negative Assertions And Missing States</title>
    <link href="https://glebbahmutov.com/blog/negative-assertions-and-missing-states/"/>
    <id>https://glebbahmutov.com/blog/negative-assertions-and-missing-states/</id>
    <published>2022-03-28T04:00:00.000Z</published>
    <updated>2022-03-28T14:19:26.139Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine you got lost in a foreign town. You see someone and ask them a question in whatever little foreign language you have: &quot;what street is this?&quot; When they tell you the name of the street, you are no longer lost, assuming you know every street or have a map with you. But what if you ask, and the stranger instead of naming the street simply states a negative &quot;you are NOT on Main street&quot;, then what? If the town only has two streets: Main and Second, then you are fine too. If you are not on Main street, then you are on Second street. Of course, if there are more than two streets, the answer &quot;you are NOT on Main street&quot; does not help you at all. You could be on any of the town&#39;s other N - 1 streets.</p><p>In the same town, now imagine you were walking with some directions. From the ocean shore, you were going down the Ocean ave, then you were taking the Main street to your destination. But the town has a fork in the road, the Ocean ave can lead to Main street and to Second street. At the end of Second street there is a fire-breathing dragon, and he is hungry. You do not want to go there.</p><p><img src="../images/missing-state/streets.png" alt="The town you are walking through"></p><p>Let&#39;s say at some point in your journey you ask someone &quot;This is NOT Second street, is this?&quot; You only hope to eliminate the dangerous section. But that is a wrong question to ask (props to <a href="https://en.wikipedia.org/wiki/All_the_Wrong_Questions">Lemony Snicket</a>). It only eliminates one street, and our town has three. Thus we could be on two streets, including Ocean avenue. We could still be approaching the dangerous fork and not even know it!</p><h2><span id="application-states">Application states</span></h2><p>Often when walking through a new city, it helps to separate the journey into logical sections. In our case, the two legs of the journey are &quot;before the fork&quot; and &quot;after the fork&quot;.</p><p><img src="../images/missing-state/fork.png" alt="The journey has two sections"></p><p>If we get disoriented, but know the section we are on, we can safely use a &quot;This is NOT Second street, is this?&quot; Each section cuts the number of possible choices to two.</p><ul><li>when walking before the fork, the only answer possible is &quot;No, this is not Second street&quot; (we can only be on Ocean ave)</li><li>when walking after the fork, the only two choices are Second and Main. If we hear &quot;Yes, you are on Second street&quot;, we turn around and run back to the fork in the road.</li></ul><p>Here is how this translates to web applications. Let&#39;s model our application&#39;s state using <a href="https://xstate.js.org/">xstate.js</a> library. In my case, we will start with the simple Promise machine example from the Xstate documentation.</p><figure class="highlight js"><figcaption><span>machine.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createMachine &#125; <span class="keyword">from</span> <span class="string">&#x27;xstate&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> promiseMachine = <span class="title function_">createMachine</span>(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;promise&#x27;</span>,</span><br><span class="line">  <span class="attr">initial</span>: <span class="string">&#x27;pending&#x27;</span>,</span><br><span class="line">  <span class="attr">states</span>: &#123;</span><br><span class="line">    <span class="attr">pending</span>: &#123;</span><br><span class="line">      <span class="attr">on</span>: &#123;</span><br><span class="line">        <span class="attr">RESOLVE</span>: &#123; <span class="attr">target</span>: <span class="string">&#x27;resolved&#x27;</span> &#125;,</span><br><span class="line">        <span class="attr">REJECT</span>: &#123; <span class="attr">target</span>: <span class="string">&#x27;rejected&#x27;</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resolved</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;final&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rejected</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;final&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The machine only has two 3 states, almost like the 3 streets in our town. We can copy &#x2F; paste the above code into the <a href="https://stately.ai/viz">Xstate visualizer</a> to see the states.</p><p><img src="../images/missing-state/machine.png" alt="The Promise state machine"></p><p>If we emit the &quot;REJECT&quot; event, the machine transitions to the &quot;rejected&quot; state. If we emit the &quot;RESOLVE&quot; event, the machine goes to the &quot;resolved&quot; state.</p><p>Let&#39;s implement a web interface.</p><figure class="highlight js"><figcaption><span>App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useMachine &#125; <span class="keyword">from</span> <span class="string">&#x27;@xstate/react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; promiseMachine &#125; <span class="keyword">from</span> <span class="string">&#x27;./machine&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Component</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, send] = <span class="title function_">useMachine</span>(promiseMachine)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex flex-col&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;mb-5 self-center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/** You can listen to what state the service is in */&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;state.matches(&#x27;pending&#x27;) &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>Loading it...<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;state.matches(&#x27;rejected&#x27;) &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;settled&quot;</span>&gt;</span>Promise Rejected<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;state.matches(&#x27;resolved&#x27;) &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;settled&quot;</span>&gt;</span>Promise Resolved<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/** You can send events to the running service */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> send(&#x27;RESOLVE&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">          type=&quot;button&quot;</span></span><br><span class="line"><span class="language-xml">          disabled=&#123;!state.matches(&#x27;pending&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;</span></span><br><span class="line"><span class="language-xml">          Resolve</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> send(&#x27;REJECT&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">          type=&quot;button&quot;</span></span><br><span class="line"><span class="language-xml">          disabled=&#123;!state.matches(&#x27;pending&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;</span></span><br><span class="line"><span class="language-xml">          Reject</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex flex-col justify-center items-center h-screen&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Component</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The application reacts to your button clicks. Each button emits its own event, which the machine uses as input. The machine the transitions to the new state, and the web app re-renders.</p><p><img src="../images/missing-state/resolved.gif" alt="The app in action"></p><blockquote class="pullquote"><p>üéÅ You can find the source code for this blog post in the repo <a href="https://github.com/bahmutov/xstate-load-state">bahmutov&#x2F;xstate-load-state</a>.</p></blockquote><p>How can we verify that application is working correctly? We can write a Cypress test to click the button and check the page.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;resolves the promise (wrong question)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Loading...&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Resolve&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Loading...&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test uses a negative assertion <code>cy.contains(&#39;Loading...&#39;).should(&#39;not.exist&#39;)</code> and while it passes, it does not tell us if the state machine is working correctly.</p><p><img src="../images/missing-state/no-loading.png" alt="The test passes"></p><p>For example, the application might wire the state machine incorrectly. On clicking the &quot;Resolve&quot; button it might go to the &quot;Rejected&quot; state, yet our test will still pass.</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  pending: &#123;</span><br><span class="line">    on: &#123;</span><br><span class="line"><span class="deletion">-     RESOLVE: &#123; target: &#x27;resolved&#x27; &#125;,</span></span><br><span class="line"><span class="addition">+     RESOLVE: &#123; target: &#x27;rejected&#x27; &#125;,</span></span><br><span class="line">      REJECT: &#123; target: &#x27;rejected&#x27; &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><img src="../images/missing-state/wrong1.png" alt="The test passes but the application is incorrect"></p><p>Ughh, our test gives us false confidence. The application is broken, yet the test is green. It asked a wrong question. Remember that there 3 three streets, and your negative assertion only eliminates one of them.</p><p>What if we ask a negative assertion about the &quot;Rejected&quot; message? That still does not eliminate all the possible problem states.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;resolves the promise (more wrong questions)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Loading it...&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Resolve&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Promise Rejected&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The negative assertion <code>cy.contains(&#39;Promise Rejected&#39;).should(&#39;not.exist&#39;)</code> only helps us IF we are in the binary situation &quot;Promise Rejected | Promise Resolved&quot;. If the application wires the states incorrectly, we could still be at the loading state! Let&#39;s break the app by removing the &quot;onClick&quot; handler from the &quot;Resolve&quot; button.</p><figure class="highlight diff"><figcaption><span>App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  &lt;button</span><br><span class="line"><span class="deletion">-   onClick=&#123;() =&gt; send(&#x27;RESOLVE&#x27;)&#125;</span></span><br><span class="line">    type=&quot;button&quot;</span><br><span class="line">    disabled=&#123;!state.matches(&#x27;pending&#x27;)&#125;</span><br><span class="line">  &gt;</span><br><span class="line">    Resolve</span><br><span class="line">  &lt;/button&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/missing-state/still-loading.png" alt="The app is still loading, yet we asked about the rejected state"></p><p>Negative assertions only work if we are for sure in a binary situation. The best way in our situation to ensure this is to eliminate states, even with negative assertions.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;resolves the promise after no longer loading&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Loading it...&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Resolve&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Loading it...&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Promise Rejected&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Now the test correctly detects the broken application.</p><p><img src="../images/missing-state/fails1.png" alt="The test uses negative assertion correctly"></p><h3><span id="test-the-state">Test the state</span></h3><p>While checking the UI is nice, we can go beyond it. We can expose the current state from the application during end-to-end tests by checking the presense of <code>window.Cypress</code> property. Then our test assertions can be a lot more powerful.</p><figure class="highlight diff"><figcaption><span>App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  const Component = () =&gt; &#123;</span><br><span class="line">    const [state, send] = useMachine(promiseMachine)</span><br><span class="line"></span><br><span class="line"><span class="addition">+   if (window.Cypress) &#123;</span></span><br><span class="line"><span class="addition">+     window.state = state</span></span><br><span class="line"><span class="addition">+   &#125;</span></span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>From the test we can get to the <code>window.state</code> object and directly ask it.</p><figure class="highlight js"><figcaption><span>spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;moves away from the pending state&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Resolve&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  <span class="comment">// observe the state machine</span></span><br><span class="line">  <span class="comment">// Tip: have to use a should(callback)</span></span><br><span class="line">  <span class="comment">// because window.state is replaced when the state changes</span></span><br><span class="line">  <span class="comment">// see https://on.cypress.io/retry-ability</span></span><br><span class="line">  cy.<span class="title function_">window</span>().<span class="title function_">should</span>(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(win.<span class="property">state</span>.<span class="title function_">matches</span>(<span class="string">&#x27;pending&#x27;</span>)).<span class="property">to</span>.<span class="property">be</span>.<span class="property">false</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// now check if the promise is resolved or rejected</span></span><br><span class="line">  <span class="comment">// even better, check for the correct state</span></span><br><span class="line">  cy.<span class="title function_">window</span>().<span class="title function_">should</span>(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(win.<span class="property">state</span>.<span class="title function_">matches</span>(<span class="string">&#x27;resolved&#x27;</span>)).<span class="property">to</span>.<span class="property">be</span>.<span class="property">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/missing-state/state-fails1.png" alt="The test checks the state machine"></p><p>So remember, instead of checking if you no longer can see the ocean, check if you are on the right street. And maybe then check if you for real cannot see the ocean any more.</p><p>So by using positive assertions, or by using negative assertions in binary situations, we can correctly test everything? Almost - as long as the state machine is correct.</p><h2><span id="the-missing-state">The missing state</span></h2><p>When someone gives you directions, they might misremember, or assume you know the details. A fork in the road might be more like a T intersection. Ocean ave might become Main street <em>before</em> Second street branches out.</p><p><img src="../images/missing-state/changes-name.png" alt="Ocean ave becomes Main ave slightly before Second street fork"></p><p>The above situation is dangerous to the traveler. They might think they are safe as they see &quot;Main street&quot; signs, and then accidentally continue down Second street. Asking &quot;This is NOT Second street, is it?&quot; gives them a false sense of security, as they do not know that the answer might change as they keep walking - the fork is still coming up!</p><p>The states &quot;Ocean ave &#x3D; before the road fork&quot;, &quot;Main ave &#x3D; after the road fork&quot; do not cover the real world. The part between the street changing the name from Ocean ave to Main st, but before Second st branches out is ... weird. It is not covered by our description at the start of the walk. Asking questions (even good ones, like &quot;Are we on Main street?&quot;) does not gives us enough information. Even when the answer is &quot;Yes&quot;, we are still in danger, and we can turn to Second street accidentally.</p><p>This part of the road is missing its own state. Our journey is really three states as shown in the next diagram: before the street changes its name, after the name change, but before the fork, and after the fork.</p><p><img src="../images/missing-state/three-states.png" alt="We need to use three states to show the journey"></p><h3><span id="testing-an-app-with-a-missing-state">Testing an app with a missing state</span></h3><p>Here is how a missing state can happen in your web application. We will take our &quot;Promise&quot; state machine which works very well, and then we will try to implement &quot;application loading&quot; state machine. We will start by what we think is a reasonable first step - emit the event &quot;Reject&quot; after a short delay.</p><figure class="highlight diff"><figcaption><span>App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  &lt;button</span><br><span class="line"><span class="deletion">-   onClick=&#123;() =&gt; send(&#x27;RESOLVE&#x27;)&#125;</span></span><br><span class="line"><span class="addition">+   onClick=&#123;() =&gt; setTimeout(() =&gt; send(&#x27;REJECT&#x27;), 70)&#125;</span></span><br><span class="line">    type=&quot;button&quot;</span><br><span class="line">    disabled=&#123;!state.matches(&#x27;pending&#x27;)&#125;</span><br><span class="line">  &gt;</span><br><span class="line">    Resolve</span><br><span class="line">  &lt;/button&gt;</span><br></pre></td></tr></table></figure><p>Adding a 70ms delay should not change the app too much, right? I hope our tests catch the error though - we are sending the &quot;REJECT&quot; event to the app instead of &quot;RESOLVE&quot;. Let&#39;s see our test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;A negative assertion and app delay&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Loading it...&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Reject&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Promise Resolved&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We assume that clicking the button &quot;Reject&quot; moves the app out of &quot;pending&quot; state to the &quot;Rejected | Resolved&quot; state. Now that we have binary option to check, we can use the negative assertion <code>cy.contains(&#39;Promise Resolved&#39;).should(&#39;not.exist&#39;)</code> to correctly test the app.</p><p><img src="../images/missing-state/delay.png" alt="The test passes even though it should have failed"></p><p>The test does not catch the problem. The assumption that we are no longer in the &quot;pending&quot; state immediately after clicking the button &quot;Reject&quot; is false - the application stays in that state during <code>onClick=&#123;() =&gt; setTimeout(() =&gt; send(&#39;RESOLVE&#39;), 70)&#125;</code> duration.</p><p>I see this error a lot. A widget is loading, and the test checks if an error message is shown. There is no error message, so the test continues. But that is wrong, since the app is still loading. Then the app finishes the loading and displays an error, but it is too late for the test to detect.</p><p>So what&#39;s a better way?</p><ol><li>Explicitly model the &quot;loading&quot; state here. Let&#39;s change our state machine a little.</li></ol><figure class="highlight js"><figcaption><span>loadingMachine.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createMachine &#125; <span class="keyword">from</span> <span class="string">&#x27;xstate&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> loadingMachine = <span class="title function_">createMachine</span>(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;loading&#x27;</span>,</span><br><span class="line">  <span class="attr">initial</span>: <span class="string">&#x27;pending&#x27;</span>,</span><br><span class="line">  <span class="attr">states</span>: &#123;</span><br><span class="line">    <span class="attr">pending</span>: &#123;</span><br><span class="line">      <span class="attr">on</span>: &#123;</span><br><span class="line">        <span class="attr">LOAD</span>: &#123;</span><br><span class="line">          <span class="attr">target</span>: <span class="string">&#x27;loading&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">loading</span>: &#123;</span><br><span class="line">      <span class="attr">on</span>: &#123;</span><br><span class="line">        <span class="attr">RESOLVE</span>: &#123; <span class="attr">target</span>: <span class="string">&#x27;resolved&#x27;</span> &#125;,</span><br><span class="line">        <span class="attr">REJECT</span>: &#123; <span class="attr">target</span>: <span class="string">&#x27;rejected&#x27;</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resolved</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;final&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rejected</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;final&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let&#39;s visualize this tate machine</p><p><img src="../images/missing-state/loading-machine-viz.png" alt="The above state machine visualized"></p><ol start="2"><li>Have an explicit way to check the current state from the test. This way the test can check if the application is still loading the data.</li></ol><p>For example, you could set class or data attribute</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;mb-5 self-center&quot;</span>&gt;</span><br><span class="line">  &#123;<span class="comment">/** You can listen to what state the service is in */</span>&#125;</span><br><span class="line">  &#123;state.<span class="title function_">matches</span>(<span class="string">&#x27;pending&#x27;</span>) &amp;&amp; <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">data-state</span>=<span class="string">&quot;initial&quot;</span>&gt;</span>Initial<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#125;</span><br><span class="line">  &#123;state.<span class="title function_">matches</span>(<span class="string">&#x27;loading&#x27;</span>) &amp;&amp; <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">data-state</span>=<span class="string">&quot;loading&quot;</span>&gt;</span>Loading it...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#125;</span><br><span class="line">  &#123;state.<span class="title function_">matches</span>(<span class="string">&#x27;rejected&#x27;</span>) &amp;&amp; (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">data-state</span>=<span class="string">&quot;loaded&quot;</span>&gt;</span>Promise Rejected<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  )&#125;</span><br><span class="line">  &#123;state.<span class="title function_">matches</span>(<span class="string">&#x27;resolved&#x27;</span>) &amp;&amp; (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">data-state</span>=<span class="string">&quot;loaded&quot;</span>&gt;</span>Promise Resolved<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  )&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>Then the test can explicitly check how the state moved along the expected transitions.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;Checks the state&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-state=&quot;initial&quot;]&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Reject&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-state=&quot;loaded&quot;]&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Promise Resolved&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Another alternative to checking the page, is to check the underlying state of the state machine. We can access the state machine from the test, just like before; the application code needs to put the state object on the <code>window</code> object. I suggest adding a custom command for checking the expected state.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cypress</span>.<span class="property">Commands</span>.<span class="title function_">add</span>(<span class="string">&#x27;reachedState&#x27;</span>, <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">`expecting **<span class="subst">$&#123;state&#125;</span>** state`</span>)</span><br><span class="line">  cy.<span class="title function_">window</span>(&#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;).<span class="title function_">should</span>(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (win.<span class="property">state</span>.<span class="title function_">matches</span>(state) !== <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Expected state &quot;<span class="subst">$&#123;state&#125;</span>&quot;, got &quot;<span class="subst">$&#123;win.state.value&#125;</span>&quot;`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;Checks the state machine&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">reachedState</span>(<span class="string">&#x27;pending&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Reject&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  <span class="comment">// optional: check the intermediate state</span></span><br><span class="line">  cy.<span class="title function_">reachedState</span>(<span class="string">&#x27;loading&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">reachedState</span>(<span class="string">&#x27;rejected&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Promise Resolved&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>For example, in our case it catches the transition to the wrong state.</p><p><img src="../images/missing-state/wrong-state.png" alt="The application gets into an unexpected state"></p><p>Finally, after fixing the application code, we have a passing test</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;Checks the state machine&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">reachedState</span>(<span class="string">&#x27;pending&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Reject&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  <span class="comment">// optional: check the intermediate state</span></span><br><span class="line">  cy.<span class="title function_">reachedState</span>(<span class="string">&#x27;loading&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">reachedState</span>(<span class="string">&#x27;rejected&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Promise Rejected&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/missing-state/states.gif" alt="The passing test for the fixed application"></p><p>The test is tight - it will be hard for the application to be broken with this kind of test that confirms the app&#39;s state transitions step by step using positive assertions.</p><h2><span id="use-better-questions">Use better questions</span></h2><ul><li>when getting lost in a city, ask which street intersection you are on. That gives you a unique precise position, eliminating all other possibilities.</li><li>when testing a web application and the user flow, use properties that eliminate as many other states as possible. For example, I love using <a href="https://on.cypress.io/location">cy.location</a> to know when the application has transitioned to the new state. A positive assertion eliminates a lot more possible states than a negative assertion.</li></ul><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/negative-assertions/" title="Be Careful With Negative Assertions">Be Careful With Negative Assertions</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine you got lost in a foreign town. You see someone and ask them a question in whatever little foreign language you have: &amp;quot;what 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
</feed>
