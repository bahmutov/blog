<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Better world by better software</title>
  
  <subtitle>Gleb Bahmutov PhD</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://glebbahmutov.com/blog/"/>
  <updated>2021-07-17T12:10:33.873Z</updated>
  <id>https://glebbahmutov.com/blog/</id>
  
  <author>
    <name>Gleb Bahmutov</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Control Next.js Server-Side Data During Cypress Tests</title>
    <link href="https://glebbahmutov.com/blog/control-nextjs-data-during-tests/"/>
    <id>https://glebbahmutov.com/blog/control-nextjs-data-during-tests/</id>
    <published>2021-07-17T04:00:00.000Z</published>
    <updated>2021-07-17T12:10:33.873Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#the-default-test">The default test</a></li><li><a href="#using-the-next_data">Using the NEXT_DATA</a></li><li><a href="#modifying-the-next_data">Modifying the NEXT_DATA</a><ul><li><a href="#change-the-next_data-object-when-set">Change the NEXT_DATA object when set</a></li><li><a href="#replace-html">Replace HTML</a></li></ul></li><li><a href="#navigation">Navigation</a></li><li><a href="#related-posts">Related posts</a></li></ul><!-- tocstop --><p>Let&#39;s take a <a href="https://nextjs.org/">Next.js</a> example application that passes data from the server to the client-side through props. You can find my example in the repo <a href="https://github.com/bahmutov/next-state-overwrite-example">bahmutov/next-state-overwrite-example</a>. Here is the home page <a href="https://github.com/bahmutov/next-state-overwrite-example/blob/main/pages/index.js">pages/index.js</a>:</p><figure class="highlight jsx"><figcaption><span>pages/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Head <span class="keyword">from</span> <span class="string">&#x27;next/head&#x27;</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;../styles/Home.module.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getServerSideProps</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> props = &#123;</span><br><span class="line">    experiments: &#123;</span><br><span class="line">      greeting: <span class="string">&#x27;Server-side says hello!&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;server-side props: %o&#x27;</span>, props)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    props,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params">&#123; experiments &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;styles.container&#125;&gt;</span><br><span class="line">      &lt;Head&gt;</span><br><span class="line">        &lt;title&gt;Create Next App&lt;/title&gt;</span><br><span class="line">        &lt;meta name=<span class="string">&quot;description&quot;</span> content=<span class="string">&quot;Generated by create next app&quot;</span> /&gt;</span><br><span class="line">        &lt;link rel=<span class="string">&quot;icon&quot;</span> href=<span class="string">&quot;/favicon.ico&quot;</span> /&gt;</span><br><span class="line">      &lt;/Head&gt;</span><br><span class="line"></span><br><span class="line">      &lt;main className=&#123;styles.main&#125;&gt;</span><br><span class="line">        &lt;h1 className=&#123;styles.title&#125;&gt;Hello there&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">        &lt;p className=&#123;styles.description&#125; data-cy=<span class="string">&quot;greeting&quot;</span>&gt;</span><br><span class="line">          &#123;experiments.greeting || <span class="string">&#x27;Silence&#x27;</span>&#125;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">      &lt;/main&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>getServerSideProps</code> executes server-side, we can see the console log message in the terminal</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wait  - compiling...</span><br><span class="line">event - compiled successfully</span><br><span class="line">server-side props: &#123; experiments: &#123; greeting: &#x27;Server-side says hello!&#x27; &#125; &#125;</span><br></pre></td></tr></table></figure><p>The data is then passed to the client-side through <code>prop</code> to the component where it is used to render the text</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#123;styles.description&#125;</span> <span class="attr">data-cy</span>=<span class="string">&quot;greeting&quot;</span>&gt;</span></span><br><span class="line">  &#123;experiments.greeting || &#x27;Silence&#x27;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can see the result in the browser</p><p><img src="../images/next-data/app.png" alt="The application shows the greeting text"></p><h2><span id="the-default-test">The default test</span></h2><p>We can write a test to confirm the expected message appears on the page.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Next.js app&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;shows the default server-side greeting&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.contains(<span class="string">&#x27;[data-cy=greeting]&#x27;</span>, <span class="string">&#x27;Server-side says hello!&#x27;</span>).should(</span><br><span class="line">      <span class="string">&#x27;be.visible&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test is green</p><p><img src="../images/next-data/the-test.png" alt="The default test"></p><h2><span id="using-the-next_data">Using the NEXT_DATA</span></h2><p>We can avoid hard-coding the expected text. Instead let&#39;s grab the server-side greeting from the page itself. If we look at the source code for the page, we can find the <code>&lt;script id=&quot;__NEXT_DATA__&quot; type=&quot;application/json&quot;&gt;</code> element with the server-side props.</p><p><img src="../images/next-data/props.png" alt="The page source"></p><p>The Next.js code takes that script and parses it into an object <code>window.__NEXT_DATA__</code>.</p><p><img src="../images/next-data/variable.png" alt="The automatically created variable"></p><p>We can access this object from the test to get the expected text.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows the text from the __NEXT_DATA__&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">// visit yields the &quot;window&quot; object</span></span><br><span class="line">    <span class="comment">// and we can get nested property in a single command</span></span><br><span class="line">    .its(<span class="string">&#x27;__NEXT_DATA__.props.pageProps.experiments.greeting&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">greeting</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.contains(<span class="string">&#x27;[data-cy=greeting]&#x27;</span>, greeting).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/next-data/its-greeting.png" alt="Using the greeting from the page props object"></p><h2><span id="modifying-the-next_data">Modifying the NEXT_DATA</span></h2><p>Let&#39;s overwrite the NEXT_DATA before the application uses it. We can do it in two ways.</p><h3><span id="change-the-next_data-object-when-set">Change the NEXT_DATA object when set</span></h3><p>We can intercept the moment when the framework parses the <code>&lt;script id=&quot;__NEXT_DATA__&quot; type=&quot;application/json&quot;&gt;</code> and sets the <code>window.__NEXT_DATA__</code> property. I will use the <code>Object.defineProperty(win, &#39;__NEXT_DATA__&#39; ...)</code> with <code>set</code> and <code>get</code> handlers. The <code>set</code> handler will be called when the framework sets the object. The test can replace the property in the object and the application happily continues from this point.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;removes the text from __NEXT_DATA__&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> greeting = <span class="string">&#x27;Cypress say Yo!&#x27;</span></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    onBeforeLoad: <span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> nextData</span><br><span class="line"></span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(win, <span class="string">&#x27;__NEXT_DATA__&#x27;</span>, &#123;</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">o</span>)</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;setting __NEXT_DATA__&#x27;</span>, o)</span><br><span class="line">          <span class="comment">// here is our change to modify the injected parsed data</span></span><br><span class="line">          o.props.pageProps.experiments.greeting = greeting</span><br><span class="line">          nextData = o</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> nextData</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.contains(<span class="string">&#x27;[data-cy=greeting]&#x27;</span>, greeting).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/next-data/set-greeting.png" alt="Overwrite the greeting property during the test"></p><p>Well, not 100% happily. If we used the prop to set the component&#39;s state, it would be enough. But we are using the greeting server-side to render the initial HTML. If we replace just the property value, the server-side HTML and the client-side HTML versions won&#39;t match. Which is what the React complains about in the DevTools:</p><p><img src="../images/next-data/warning.png" alt="React shows HTML mismatch warning"></p><p>In this case, we need to replace both the page prop and &quot;fix&quot; the server-side HTML the browser receives.</p><h3><span id="replace-html">Replace HTML</span></h3><p>Let&#39;s &quot;fix up&quot; the HTML sent by the server before we replace the greeting inside the NEXT_DATA. Here I put an arrow on the string we need to replace to avoid the warning:</p><p><img src="../images/next-data/html.png" alt="The HTML element we need to update to match the test prop"></p><p>We can use the <a href="https://on.cypress.io/intercept">cy.intercept</a> command for this.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;patches HTML and removes the text from __NEXT_DATA__&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> greeting = <span class="string">&#x27;Cypress say Yo!&#x27;</span></span><br><span class="line">  cy.intercept(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span></span><br><span class="line">    req.continue(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      res.body = res.body.replace(</span><br><span class="line">        <span class="string">&#x27;&gt;Server-side says hello!&lt;/&#x27;</span>,</span><br><span class="line">        <span class="string">`&gt;<span class="subst">$&#123;greeting&#125;</span>&lt;/`</span>,</span><br><span class="line">      )</span><br><span class="line">    &#125;),</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    onBeforeLoad: <span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> nextData</span><br><span class="line"></span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(win, <span class="string">&#x27;__NEXT_DATA__&#x27;</span>, &#123;</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">o</span>)</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;setting __NEXT_DATA__&#x27;</span>, o)</span><br><span class="line">          <span class="comment">// here is our change to modify the injected parsed data</span></span><br><span class="line">          o.props.pageProps.experiments.greeting = greeting</span><br><span class="line">          nextData = o</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> nextData</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.contains(<span class="string">&#x27;[data-cy=greeting]&#x27;</span>, greeting).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>No more React warnings.</p><p><img src="../images/next-data/no-warning.png" alt="Happy web app with controlled server-side props"></p><h2><span id="navigation">Navigation</span></h2><p>It is not enough to modify the <code>__NEXT_DATA__</code> on the very first page visit. The application might navigate to other pages. For example, let&#39;s add &quot;About&quot; page.</p><figure class="highlight html"><figcaption><span>/pages/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;/about&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span>&gt;</span>About me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The About pages will have its own server-side props</p><figure class="highlight js"><figcaption><span>/pages/about.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Head <span class="keyword">from</span> <span class="string">&#x27;next/head&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;../styles/Home.module.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getServerSideProps</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> props = &#123;</span><br><span class="line">    experiments: &#123;</span><br><span class="line">      greeting: <span class="string">&#x27;About info&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;About server-side props: %o&#x27;</span>, props)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    props,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">About</span>(<span class="params">&#123; experiments &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;styles.container&#125;&gt;</span><br><span class="line">      &lt;Head&gt;</span><br><span class="line">        &lt;title&gt;About&lt;/title&gt;</span><br><span class="line">        &lt;meta name=<span class="string">&quot;description&quot;</span> content=<span class="string">&quot;Generated by create next app&quot;</span> /&gt;</span><br><span class="line">        &lt;link rel=<span class="string">&quot;icon&quot;</span> href=<span class="string">&quot;/favicon.ico&quot;</span> /&gt;</span><br><span class="line">      &lt;/Head&gt;</span><br><span class="line"></span><br><span class="line">      &lt;main className=&#123;styles.main&#125;&gt;</span><br><span class="line">        &lt;h1 className=&#123;styles.title&#125;&gt;About&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">        &lt;p className=&#123;styles.description&#125; data-cy=<span class="string">&quot;greeting&quot;</span>&gt;</span><br><span class="line">          &#123;experiments.greeting || <span class="string">&#x27;Silence&#x27;</span>&#125;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Link href=<span class="string">&quot;/&quot;</span>&gt;</span><br><span class="line">          &lt;a&gt;Home&lt;/a&gt;</span><br><span class="line">        &lt;/Link&gt;</span><br><span class="line">      &lt;/main&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The Next.js framework sends these server-side props through a JSON fetch request to <code>http://localhost:3000/_next/data/development/about.json</code> endpoint.</p><p><img src="../images/next-data/fetch-json.png" alt="The application fetching props for the About page"></p><p>We can spy on this request using <a href="https://on.cypress.io/intercept">cy.intercept</a> command. <strong>Important:</strong> the request comes with the header <code>If-None-Match</code> which controls the caching. In most cases, the server-side JSON object is the same, thus the Next server responds with 304 without data. We need to intercept the actual object during the test, thus we will remove this header to force the server to send the full object. For more examples of <code>cy.intercept</code> command read <a href="/blog/cypress-intercept-problems/" title="Cypress cy.intercept Problems">Cypress cy.intercept Problems</a>.</p><p><img src="../images/next-data/header.png" alt="The request headers used to fetch the server-side props for the About page"></p><p>Let&#39;s intercept and modify the server-side props for the About page.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;modifies __NEXT_DATA__ on navigation&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// let the default greeting show on the home page</span></span><br><span class="line">  <span class="keyword">const</span> defaultGreeting = <span class="string">&#x27;Server-side says hello!&#x27;</span></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;[data-cy=greeting]&#x27;</span>, defaultGreeting).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the About page will make a fetch request to get</span></span><br><span class="line">  <span class="comment">// the server-side props, so we need to be ready</span></span><br><span class="line">  <span class="keyword">const</span> greeting = <span class="string">&#x27;Testing hi&#x27;</span></span><br><span class="line">  cy.intercept(<span class="string">&#x27;_next/data/development/about.json&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// prevent the server from responding with 304</span></span><br><span class="line">    <span class="comment">// without an actual object</span></span><br><span class="line">    <span class="keyword">delete</span> req.headers[<span class="string">&#x27;if-none-match&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> req.continue(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// let&#x27;s use the same test greeting</span></span><br><span class="line">      res.body.pageProps.experiments.greeting = greeting</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.contains(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;About&#x27;</span>).click()</span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/about&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;[data-cy=greeting]&#x27;</span>, greeting).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/next-data/about-test.png" alt="The finished About page test with expected greeting"></p><p>Note: if we go back to the Home page, the framework fetches its page props the same way using the <code>GET development/index.json</code> request.</p><h2><span id="related-posts">Related posts</span></h2><ul><li><a href="/blog/ssr-e2e/" title="End-to-end Testing for Server-Side Rendered Pages">End-to-end Testing for Server-Side Rendered Pages</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#the-default-test&quot;&gt;The default test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#using-the-next_data&quot;&gt;Using the NEXT_DATA&lt;/a&gt;&lt;/li&gt;

      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Test Feature Flags Using Cypress and Flagsmith</title>
    <link href="https://glebbahmutov.com/blog/test-feature-flags/"/>
    <id>https://glebbahmutov.com/blog/test-feature-flags/</id>
    <published>2021-07-16T04:00:00.000Z</published>
    <updated>2021-07-16T15:07:34.315Z</updated>
    
    <content type="html"><![CDATA[<p>This blog post teaches you how to control the feature flags provided by 3rd party services like Flagsmith, LaunchDarkly, Split, etc during end-to-end tests.</p><!-- toc --><ul><li><a href="#the-loading-message">The loading message</a></li><li><a href="#test-application-with-feature-a-turned-off">Test application with Feature A turned OFF</a><ul><li><a href="#stub-the-features-ajax-call">Stub the features Ajax call</a></li><li><a href="#modify-the-response-only">Modify the response only</a></li></ul></li><li><a href="#test-application-with-feature-a-turned-on">Test application with Feature A turned ON</a></li><li><a href="#reusable-function">Reusable function</a></li></ul><!-- tocstop --><p>I have created a small project on <a href="https://flagsmith.com/">Flagsmith.com</a> and added a single feature flag &quot;feature_a&quot;. At first the flag is turned off.</p><p><img src="../images/test-feature-flags/feature_a.png" alt="Feature A toggle on Flagsmith"></p><p>My web application uses the <a href="https://docs.flagsmith.com/clients/javascript">Flagsmith JavaScript SDK</a> to fetch the flags at runtime. Depending on the feature flag presence, the application renders a different message.</p><blockquote class="pullquote"><p>🎁 You can find the application code and the Cypress tests in the repo <a href="https://github.com/bahmutov/flagsmith-cypress-example">bahmutov/flagsmith-cypress-example</a>.</p></blockquote><p>The <a href="https://github.com/bahmutov/flagsmith-cypress-example/blob/main/public/index.html">index.html</a> loads the Flagsmith library and the application code</p><figure class="highlight html"><figcaption><span>public/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>flagsmith-cypress-example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/flagsmith/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The application code in <a href="https://github.com/bahmutov/flagsmith-cypress-example/blob/main/public/app.js">app.js</a> inserts an element with the text determined by the feature flag.</p><figure class="highlight js"><figcaption><span>public/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// output DIV element</span></span><br><span class="line"><span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">div.setAttribute(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;feature-area&#x27;</span>)</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(div)</span><br><span class="line"></span><br><span class="line">div.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">&#x27;Initializing...&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> shouldShow = flagsmith.hasFeature(<span class="string">&#x27;feature_a&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> label = (shouldShow ? <span class="string">&#x27;Showing&#x27;</span> : <span class="string">&#x27;Not showing&#x27;</span>) + <span class="string">&#x27; feature A&#x27;</span></span><br><span class="line">  div.replaceChild(<span class="built_in">document</span>.createTextNode(label), div.firstChild)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://docs.flagsmith.com/clients/javascript/</span></span><br><span class="line">flagsmith.init(&#123;</span><br><span class="line">  <span class="comment">// comes from the Flagsmith project settings</span></span><br><span class="line">  environmentID: <span class="string">&#x27;gxzgHaQ84gijocUvctHJFb&#x27;</span>,</span><br><span class="line">  onChange: render,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>By default the <code>feature_a</code> is turned off. Thus the application sets the label to &quot;Not showing feature A&quot;.</p><p><img src="../images/test-feature-flags/without-feature.gif" alt="When the Feature A is off"></p><p>If we flip the feature switch and reload the web page, the feature A will be active and the label changes.</p><p><img src="../images/test-feature-flags/with-feature.gif" alt="Activate Feature A"></p><p>Let&#39;s test the web application behavior using Cypress test runner. I want to confirm the following three scenarios:</p><ul><li>the application is showing the loading message while the feature flags are fetched</li><li>the application is working correctly when Feature A is turned OFF during the test</li><li>the application is working correctly when Feature A is turned ON during the test</li></ul><h2><span id="the-loading-message">The loading message</span></h2><p>Let&#39;s load the page from a Cypress test to see what is going on. I will flip the feature A back to &quot;off&quot; in the Flagmisth project. The test in the <a href="https://github.com/bahmutov/flagsmith-cypress-example/blob/main/cypress/integration/spec.js">spec.js</a> uses the <a href="https://on.cypress.io/visit">cy.visit</a> command to load the page.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Flagsmith Cypress example&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;loads the page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Notice the Command Log showing the Ajax call the Flagsmith SDK is making to its API endpoint to fetch the current flags.</p><p><img src="../images/test-feature-flags/ajax.png" alt="Flagsmith SDK is fetching the features"></p><p>Click on that network call to dump its contents in the DevTools console. The server response has all the feature flags in an array.</p><p><img src="../images/test-feature-flags/response.png" alt="The response includes our feature A object"></p><p>In the future tests we can control the response value, but for now let&#39;s just slow the network call to make the loading message visible during the test.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows the loading message&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// slow down the network call by 1 second</span></span><br><span class="line">  cy.intercept(<span class="string">&#x27;/api/v1/flags/&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span></span><br><span class="line">    Cypress.Promise.delay(<span class="number">1000</span>).then(req.continue),</span><br><span class="line">  ).as(<span class="string">&#x27;flags&#x27;</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#feature-area&#x27;</span>, <span class="string">&#x27;Initializing...&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  <span class="comment">// wait for the feature flags Ajax call</span></span><br><span class="line">  cy.wait(<span class="string">&#x27;@flags&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;Initializing...&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test proves the loading message is visible at first, then it goes away.</p><p><img src="../images/test-feature-flags/loading-message.gif" alt="The loading message test"></p><p><strong>Tip:</strong> read the blog post <a href="/blog/negative-assertions/" title="Be Careful With Negative Assertions">Be Careful With Negative Assertions</a> for a detailed essay about testing the loading element.</p><h2><span id="test-application-with-feature-a-turned-off">Test application with Feature A turned OFF</span></h2><h3><span id="stub-the-features-ajax-call">Stub the features Ajax call</span></h3><p>Let&#39;s test how our application behaves without the feature A. We already have the network call response from the Flagsmith API - copy the response object body from the Network tab of the browser&#39;s DevTools.</p><p><img src="../images/test-feature-flags/copy-response.png" alt="Copy the feature flags API call response body from the Network tab"></p><p>Save the text as a JSON file in <a href="https://github.com/bahmutov/flagsmith-cypress-example/blob/main/cypress/fixtures/no-feature-a.json">cypress/fixtures/no-feature-a.json</a>.</p><figure class="highlight json"><figcaption><span>cypress/fixtures/no-feature-a.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">56756</span>,</span><br><span class="line">    <span class="attr">&quot;feature&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="number">10804</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;feature_a&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;created_date&quot;</span>: <span class="string">&quot;2021-07-15T23:38:27.661659Z&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;The first feature&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;initial_value&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">&quot;default_enabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;STANDARD&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;feature_state_value&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;enabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;environment&quot;</span>: <span class="number">9128</span>,</span><br><span class="line">    <span class="attr">&quot;identity&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;feature_segment&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>The test can mock the Ajax call using the above fixture file using the <a href="https://on.cypress.io/intercept">cy.intercept</a> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;does not show feature A&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;/api/v1/flags/&#x27;</span>, &#123; <span class="attr">fixture</span>: <span class="string">&#x27;no-feature-a.json&#x27;</span> &#125;).as(<span class="string">&#x27;flags&#x27;</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.wait(<span class="string">&#x27;@flags&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#feature-area&#x27;</span>, <span class="string">&#x27;Not showing feature A&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/test-feature-flags/stub-no-feature.png" alt="Stub the Flagsmith Ajax call test"></p><h3><span id="modify-the-response-only">Modify the response only</span></h3><p>Stubbing the entire Flagsmith call seems excessive. What if there are a lot of features? Do we have to constantly update the fixture file? We are only interested in the <code>feature_a</code> flag. Let&#39;s spy on the Ajax call to <code>/api/v1/flags/</code> and just modify the response to always have the <code>feature_a</code> OFF.</p><p><strong>Tip:</strong> Cypress bundles <a href="https://on.cypress.io/_">Lodash</a> library as <code>Cypress._</code> so you can use its powerful <a href="https://lodash.com/docs/">utility functions</a> from tests.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;does not show feature A (modify response)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;/api/v1/flags/&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">    req.continue(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      expect(res.body, <span class="string">&#x27;response is a list of features&#x27;</span>).to.be.an(<span class="string">&#x27;array&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> featureA = Cypress._.find(</span><br><span class="line">        res.body,</span><br><span class="line">        (f) =&gt; f.feature.name === <span class="string">&#x27;feature_a&#x27;</span>,</span><br><span class="line">      )</span><br><span class="line">      <span class="comment">// make sure the feature is present</span></span><br><span class="line">      expect(featureA, <span class="string">&#x27;feature_a is present&#x27;</span>).to.be.an(<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">      expect(featureA).to.have.property(<span class="string">&#x27;enabled&#x27;</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">&#x27;changing %s from %s to %s&#x27;</span>,</span><br><span class="line">        featureA.feature.name,</span><br><span class="line">        featureA.enabled,</span><br><span class="line">        <span class="literal">false</span>,</span><br><span class="line">      )</span><br><span class="line">      featureA.enabled = <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).as(<span class="string">&#x27;flags&#x27;</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.wait(<span class="string">&#x27;@flags&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#feature-area&#x27;</span>, <span class="string">&#x27;Not showing feature A&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test uses <code>req.continue((res) =&gt; &#123; ... &#125;)</code> callback to inspect the response from the Flagsmith server and modify the feature flag A. By sprinkling a few assertions there we verify that the flag is still present. The console log message shows that even if we toggle the feature flag for the project, the test still overrides it.</p><p><img src="../images/test-feature-flags/override.png" alt="Override the feature_a flag in the response object"></p><h2><span id="test-application-with-feature-a-turned-on">Test application with Feature A turned ON</span></h2><p>Similar to the previous test, we can verify the application&#39;s behavior when the feature A is turned ON.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows the feature A&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;/api/v1/flags/&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">    req.continue(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      expect(res.body, <span class="string">&#x27;response is a list of features&#x27;</span>).to.be.an(<span class="string">&#x27;array&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> featureA = Cypress._.find(</span><br><span class="line">        res.body,</span><br><span class="line">        (f) =&gt; f.feature.name === <span class="string">&#x27;feature_a&#x27;</span>,</span><br><span class="line">      )</span><br><span class="line">      <span class="comment">// make sure the feature is present</span></span><br><span class="line">      expect(featureA, <span class="string">&#x27;feature_a is present&#x27;</span>).to.be.an(<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">      expect(featureA).to.have.property(<span class="string">&#x27;enabled&#x27;</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">&#x27;changing %s from %s to %s&#x27;</span>,</span><br><span class="line">        featureA.feature.name,</span><br><span class="line">        featureA.enabled,</span><br><span class="line">        <span class="literal">true</span>,</span><br><span class="line">      )</span><br><span class="line">      featureA.enabled = <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).as(<span class="string">&#x27;flags&#x27;</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.wait(<span class="string">&#x27;@flags&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#feature-area&#x27;</span>, <span class="string">&#x27;Showing feature A&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/test-feature-flags/feature-a-on.png" alt="Override the feature_a flag to be true during the test"></p><h2><span id="reusable-function">Reusable function</span></h2><p>Modifying the feature flags can be abstracted into a utility function. For example, we could specify multiple flags to be overwritten, and the utility function will set up a single network intercept with its logic to find and set each feature flag.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> setFeatureFlags = <span class="function">(<span class="params">flags = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  expect(flags).to.be.an(<span class="string">&#x27;object&#x27;</span>).and.not.to.be.empty</span><br><span class="line"></span><br><span class="line">  cy.intercept(<span class="string">&#x27;/api/v1/flags/&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">    req.continue(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      expect(res.body, <span class="string">&#x27;response is a list of features&#x27;</span>).to.be.an(<span class="string">&#x27;array&#x27;</span>)</span><br><span class="line">      Cypress._.forEach(flags, <span class="function">(<span class="params">value, flagName</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> feature = Cypress._.find(</span><br><span class="line">          res.body,</span><br><span class="line">          (f) =&gt; f.feature.name === flagName,</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">// make sure the feature is present</span></span><br><span class="line">        expect(feature, <span class="string">&#x27;feature_a is present&#x27;</span>).to.be.an(<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">        expect(feature).to.have.property(<span class="string">&#x27;enabled&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">          <span class="string">&#x27;changing %s from %s to %s&#x27;</span>,</span><br><span class="line">          feature.feature.name,</span><br><span class="line">          feature.enabled,</span><br><span class="line">          value,</span><br><span class="line">        )</span><br><span class="line">        feature.enabled = value</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).as(<span class="string">&#x27;flags&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;controls the flags&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  setFeatureFlags(&#123; <span class="attr">feature_a</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.wait(<span class="string">&#x27;@flags&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#feature-area&#x27;</span>, <span class="string">&#x27;Showing feature A&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I like add an assertion to verify the function&#39;s arguments like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expect(flags).to.be.an(<span class="string">&#x27;object&#x27;</span>).and.not.to.be.empty</span><br></pre></td></tr></table></figure><p>The above assertion is printed to the Command Log allowing the test run video to reflect what feature flags were set during the test.</p><p><img src="../images/test-feature-flags/reusable.png" alt="Reusable feature flags function"></p><p>Happy Feature Flags Testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This blog post teaches you how to control the feature flags provided by 3rd party services like Flagsmith, LaunchDarkly, Split, etc durin
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Testing React Native Navigation</title>
    <link href="https://glebbahmutov.com/blog/rn-test-for-navigation/"/>
    <id>https://glebbahmutov.com/blog/rn-test-for-navigation/</id>
    <published>2021-07-15T04:00:00.000Z</published>
    <updated>2021-07-15T12:51:41.440Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#the-navigation">The navigation</a></li><li><a href="#the-navigation-tests">The navigation tests</a></li><li><a href="#navigating-back">Navigating back</a></li></ul><!-- tocstop --><p>Let&#39;s take a React Native application that implements the app navigation using <a href="https://reactnavigation.org/">React Navigation</a> packages. Our application first shows a home screen. The user can navigate to the Pokemon List screen, and then to an individual Pokemon card.</p><p><img src="../images/rn-test-for-navigation/navigation.gif" alt="The user is navigating through the Pokemon RN application"></p><p>How do we test the navigation when this React Native application is running through <a href="https://expo.io">Expo</a>? Notice in the above video the URL was not changing at all. Thus we cannot use the typical Cypress commands like <a href="https://on.cypress.io/location">cy.location</a> and <a href="https://on.cypress.io/hash">cy.hash</a> to confirm the screen changes. Instead we need to use the page titles.</p><h2><span id="the-navigation">The navigation</span></h2><p> The Application implements the navigation like this:</p><figure class="highlight js"><figcaption><span>App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;react-native-gesture-handler&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; NavigationContainer &#125; <span class="keyword">from</span> <span class="string">&#x27;@react-navigation/native&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStackNavigator &#125; <span class="keyword">from</span> <span class="string">&#x27;@react-navigation/stack&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Import your screens</span></span><br><span class="line"><span class="keyword">import</span> PokeList <span class="keyword">from</span> <span class="string">&#x27;./components/PokeList&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Pokemon <span class="keyword">from</span> <span class="string">&#x27;./components/Pokemon&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;./components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Stack = createStackNavigator()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;NavigationContainer&gt;</span><br><span class="line">      &lt;Stack.Navigator initialRouteName=<span class="string">&quot;Home&quot;</span>&gt;</span><br><span class="line">        &lt;Stack.Screen name=<span class="string">&quot;Home&quot;</span> component=&#123;Home&#125; /&gt;</span><br><span class="line">        &lt;Stack.Screen name=<span class="string">&quot;PokeList&quot;</span> component=&#123;PokeList&#125; /&gt;</span><br><span class="line">        &lt;Stack.Screen name=<span class="string">&quot;Pokemon&quot;</span> component=&#123;Pokemon&#125; /&gt;</span><br><span class="line">      &lt;/Stack.Navigator&gt;</span><br><span class="line">    &lt;/NavigationContainer&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>🎁 You can find the application and its tests in the repo <a href="https://github.com/bahmutov/pokemon-api-app">bahmutov/pokemon-api-app</a>. I copied the original code before making it compatible with Expo from the blog post <a href="https://alialhaddad.medium.com/fetching-data-in-react-native-d92fb6876973">Fetching Data in React Native</a>.</p></blockquote><p>The individual Pokemon card component gets its name from the route parameters.</p><figure class="highlight js"><figcaption><span>components/Pokemon/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pokemon</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> navigationOptions = <span class="function">(<span class="params">&#123; route &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">    title: <span class="string">`<span class="subst">$&#123;route.params.name&#125;</span> Info`</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; route &#125; = <span class="built_in">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;Image</span><br><span class="line">          source=&#123;&#123;</span><br><span class="line">            uri: <span class="string">&#x27;https://res.cloudinary.com/aa1997/image/upload/v1535930682/pokeball-image.jpg&#x27;</span>,</span><br><span class="line">          &#125;&#125;</span><br><span class="line">          style=&#123;styles.pokemonImage&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;Text testID=<span class="string">&quot;pokemon-name&quot;</span> style=&#123;styles.nameOfPokemon&#125;&gt;</span><br><span class="line">          &#123;route.params.name&#125;</span><br><span class="line">        &lt;/Text&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Pokemon</span><br></pre></td></tr></table></figure><p>Let&#39;s confirm the navigation works.</p><h2><span id="the-navigation-tests">The navigation tests</span></h2><p>Let&#39;s confirm the application is on the home screen when it loads. We can use the title - which is equal to the <code>name</code> property set by the <code>&lt;Stack.Screen name=&quot;Home&quot; component=&#123;Home&#125; /&gt;</code> element.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Pokemon&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;shows a card&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.title().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;Home&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/rn-test-for-navigation/home-title.png" alt="The home screen test"></p><p>Let&#39;s go to the list screen by clicking the button.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows a card&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.title().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;Home&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;Go to Pokes&#x27;</span>).click()</span><br><span class="line">  cy.title().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;PokeList&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test goes through <em>very</em> quickly, making it hard to see what&#39;s happening.</p><p><img src="../images/rn-test-for-navigation/blink.gif" alt="The test goes to the next screen very very quickly"></p><p>Blink - and you will miss it! Thus I found it useful to add a custom command to slow down the tests where needed.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// using small delays can make the video a lot more useful</span></span><br><span class="line">Cypress.Commands.add(<span class="string">&#x27;delay&#x27;</span>, <span class="function">(<span class="params">ms = <span class="number">500</span></span>) =&gt;</span> &#123;</span><br><span class="line">  cy.wait(ms, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Pokemon&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;shows a card&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.title().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;Home&#x27;</span>).delay()</span><br><span class="line">    cy.contains(<span class="string">&#x27;Go to Pokes&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">    cy.title().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;PokeList&#x27;</span>)</span><br><span class="line">    cy.delay()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/rn-test-for-navigation/delay.gif" alt="The test with delay command"></p><p>A small half-second delay makes the video of the test with screen transitions a lot more useful.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows a card&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.title().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;Home&#x27;</span>).delay()</span><br><span class="line">  cy.contains(<span class="string">&#x27;Go to Pokes&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">  cy.title().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;PokeList&#x27;</span>)</span><br><span class="line">  cy.delay()</span><br><span class="line">  <span class="comment">// the list is fetched from the API</span></span><br><span class="line">  cy.get(<span class="string">&#x27;[data-testid=&quot;poke-card&quot;]&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">    .first()</span><br><span class="line">    .click()</span><br><span class="line"></span><br><span class="line">  cy.title().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;Pokemon&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-testid=pokemon-name]&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>).delay()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test finishes at the individual Pokemon card screen.</p><p><img src="../images/rn-test-for-navigation/card.png" alt="The finished test"></p><h2><span id="navigating-back">Navigating back</span></h2><p>To go back to the Home screen the user would click the &quot;&lt;-&quot; button at the top of the screen. The navigation library inserts the default accessible HTML markup for the button, even adding a label that includes the target screen&#39;s name.</p><p><img src="../images/rn-test-for-navigation/back.png" alt="The Back button markup"></p><p>Let&#39;s extend our test to navigate back to the Home screen. I like adding a log statement to the Command Log for major parts of the test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cy.log(<span class="string">&#x27;**go back to Home screen**&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;[aria-label=&quot;PokeList, back&quot;]&#x27;</span>).click().delay()</span><br><span class="line">cy.title().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;PokeList&#x27;</span>).delay()</span><br><span class="line">cy.get(<span class="string">&#x27;[aria-label=&quot;Home, back&quot;]&#x27;</span>).click()</span><br><span class="line">cy.title().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;Home&#x27;</span>).delay()</span><br></pre></td></tr></table></figure><p>As always, you can use the Command Log to travel back in time, observing the button clicked. Notice the &quot;Before / After&quot; DOM snapshots the Test Runner shows when hovering over the &quot;Click&quot; command.</p><p><img src="../images/rn-test-for-navigation/back-debug.gif" alt="Time-traveling debugger and the Back button"></p><p>Happy React Native testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#the-navigation&quot;&gt;The navigation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-navigation-tests&quot;&gt;The navigation tests&lt;/a&gt;&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="react native" scheme="https://glebbahmutov.com/blog/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>Testing A Web App Using The Keyboard Only</title>
    <link href="https://glebbahmutov.com/blog/test-app-using-the-keyboard/"/>
    <id>https://glebbahmutov.com/blog/test-app-using-the-keyboard/</id>
    <published>2021-07-12T04:00:00.000Z</published>
    <updated>2021-07-12T20:33:43.731Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s take a good TodoMVC example made with accessability features included, as every app should have. One of the aspects we need to confirm in our tests is that the user can fully interact with the app without using a mouse. We need to test every feature using the keyboard, as posts like <a href="https://blog.testlodge.com/keyboard-navigation-accessibility-testing/">Keyboard Navigation Accessibility Testing</a> suggest.</p><!-- toc --><ul><li><a href="#testing">Testing</a></li><li><a href="#completing-items">Completing items</a></li><li><a href="#deleting-the-first-item">Deleting the first item</a></li><li><a href="#editing-an-item">Editing an item</a></li><li><a href="#tab-through-filters">Tab through filters</a></li><li><a href="#test-the-filtered-views">Test the filtered views</a></li><li><a href="#avoiding-clicks">Avoiding clicks</a></li><li><a href="#testing-smaller-features">Testing smaller features</a><ul><li><a href="#cancel-edits">Cancel edits</a></li><li><a href="#clear-completed-todos">Clear completed todos</a></li><li><a href="#toggle-all">Toggle all</a></li></ul></li><li><a href="#publishing-the-site">Publishing the site</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><p>Our example app is at <a href="https://dylanb.github.io/todomvc/">dylanb.github.io/todomvc</a> with the source code available in <a href="https://github.com/dylanb/todomvc">dylanb/todomvc</a> repo. Here is me adding a todo item and then marking it completed using the keyboard keys.</p><p><img src="../images/keyboard-only/add.gif" alt="Adding and completing a todo using the keyboard"></p><p>Every action can be done using the keyboard. Every element of the application can get its focus by pressing the Tab key. We can focus on the previous item by pressing Shift+Tab keys together. In the video below I rotate through the items and the buttons using the keyboard Tab key before going back to the input field.</p><p><img src="../images/keyboard-only/tab.gif" alt="Navigating through the application using Tab and reverse Tab"></p><h2><span id="testing">Testing</span></h2><p>To learn the basics of keyboard testing for web applications, read the <a href="https://webaim.org/techniques/keyboard/">WebAIM: Keyboard Accessibility</a> article.</p><p>Let&#39;s confirm the application does in fact work using the keyboard commands without using the mouse button. To write the tests I will use <a href="https://www.cypress.io">Cypress.io</a> with <a href="https://github.com/dmtrKovalenko/cypress-real-events#readme">cypress-real-events</a> plugin for sending the real &quot;Tab&quot; event to the browser. Tip: read my blog post <a href="/blog/cypress-real-events/" title="Cypress Real Events Plugin">Cypress Real Events Plugin</a> for more information about this awesome plugin.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D cypress cypress-real-events</span></span><br><span class="line">+ cypress-real-events@1.5.0</span><br><span class="line">+ cypress@7.7.0</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>🎁 You can find these tests and the fixed application in the repo <a href="https://github.com/bahmutov/test-todomvc-using-keyboard">bahmutov/test-todomvc-using-keyboard</a>. You can use my version of the application at <a href="https://glebbahmutov.com/test-todomvc-using-keyboard/">https://glebbahmutov.com/test-todomvc-using-keyboard/</a>.</p></blockquote><p>Let&#39;s write a test to make sure we can focus the input field by pressing <code>Tab</code>.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// load intelligent code completion for Cypress and the plugin</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress-real-events&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-real-events/support&#x27;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;works using the keyboard only&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> noLog = &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;What needs to be done?&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    <span class="comment">// for the purpose of the blog post</span></span><br><span class="line">    <span class="comment">// slow down the commands by inserting waits</span></span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the first tab should bring us to the input element</span></span><br><span class="line">  <span class="comment">// but first we must be in the application&#x27;s iframe</span></span><br><span class="line">  cy.get(<span class="string">&#x27;body&#x27;</span>).realClick().realPress(<span class="string">&#x27;Tab&#x27;</span>)</span><br><span class="line">  cy.focused().should(<span class="string">&#x27;have.id&#x27;</span>, <span class="string">&#x27;new-todo&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We are using <code>.realClick()</code> to first focus the test runner on the application, then send <code>.realPress(&#39;Tab&#39;)</code>. The application should set focus on the input field, which we check using the <code>cy.focused().should(&#39;have.id&#39;, &#39;new-todo&#39;)</code> assertion.</p><p><img src="../images/keyboard-only/test1.gif" alt="The first Tab focuses on the input field"></p><p>While the element has focus, let&#39;s confirm its label is visible. Let&#39;s look at the HTML markup.</p><p><img src="../images/keyboard-only/markup.png" alt="The input field label"></p><p>We can add to our test a new command with an explicit visibility assertion.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the first tab should bring us to the input element</span></span><br><span class="line"><span class="comment">// but first we must be in the application&#x27;s iframe</span></span><br><span class="line">cy.get(<span class="string">&#x27;body&#x27;</span>).realClick().realPress(<span class="string">&#x27;Tab&#x27;</span>)</span><br><span class="line">cy.focused().should(<span class="string">&#x27;have.id&#x27;</span>, <span class="string">&#x27;new-todo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// confirm the label is visible</span></span><br><span class="line">cy.contains(<span class="string">&#x27;label[for=new-todo]&#x27;</span>, <span class="string">&#x27;What needs to be done?&#x27;</span>).should(</span><br><span class="line">  <span class="string">&#x27;be.visible&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Note that Cypres time-traveling debugger does not reset the &quot;:focus&quot; when recreating the DOM snapshot. Thus if we go back to the <code>cy.contains</code> command, the DOM snapshot restores the regular element.</p><p><img src="../images/keyboard-only/hover.gif" alt="Going back to the command shows the DOM snapshot without the element&#39;s focus"></p><p>Thus to make the tests more explicit and the elements clearly positioned, let&#39;s add a <a href="https://on.cypress.io/wait">wait</a> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// confirm the label is visible</span></span><br><span class="line">cy.wait(<span class="number">1000</span>, noLog)</span><br><span class="line">cy.contains(<span class="string">&#x27;label[for=new-todo]&#x27;</span>, <span class="string">&#x27;What needs to be done?&#x27;</span>).should(</span><br><span class="line">  <span class="string">&#x27;be.visible&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Let&#39;s add a few Todo items by typing into the focused input field.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.focused().type(<span class="string">&#x27;code app&#123;enter&#125;&#x27;</span>).type(<span class="string">&#x27;ensure a11y&#123;enter&#125;&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">cy.wait(<span class="number">1000</span>, noLog)</span><br></pre></td></tr></table></figure><p><img src="../images/keyboard-only/test2.gif" alt="The test is adding two todo items"></p><p><strong>Note:</strong> I have used the <code>cy.wait(1000, noLog)</code> commands through the test to make sure the videos clearly show the focused elements.</p><h2><span id="completing-items">Completing items</span></h2><p>To complete an item the user needs to focus on the &quot;Complete&quot; item button by pressing the Tab key. We could write a new test or we could continue extending the same &quot;works using the keyboard only&quot; end-to-end test with a log message to clearly identify what the test is doing. Again, for the video I have added 1 second pauses after some test commands.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cy.log(<span class="string">&#x27;**complete the first item**&#x27;</span>)</span><br><span class="line">cy.realPress(<span class="string">&#x27;Tab&#x27;</span>)</span><br><span class="line"><span class="comment">// confirm we are at &quot;complete all&quot; element</span></span><br><span class="line">cy.focused().should(<span class="string">&#x27;have.id&#x27;</span>, <span class="string">&#x27;toggle-all&#x27;</span>).wait(<span class="number">1000</span>, noLog)</span><br><span class="line">cy.realPress(<span class="string">&#x27;Tab&#x27;</span>)</span><br><span class="line"><span class="comment">// confirm we are at the &quot;complete first todo&quot; element</span></span><br><span class="line">cy.focused()</span><br><span class="line">  .should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-labelledby&#x27;</span>, <span class="string">&#x27;todo-0&#x27;</span>)</span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  .click()</span><br><span class="line"><span class="comment">// confirm the todo was completed</span></span><br><span class="line">cy.focused()</span><br><span class="line">  .should(<span class="string">&#x27;be.checked&#x27;</span>)</span><br><span class="line">  .and(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-checked&#x27;</span>, <span class="string">&#x27;true&#x27;</span>)</span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br><span class="line"><span class="comment">// marks the item as completed</span></span><br><span class="line">cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>)</span><br><span class="line">  .first()</span><br><span class="line">  .should(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br></pre></td></tr></table></figure><p><img src="../images/keyboard-only/complete.gif" alt="The test navigates using Tab and completes the first todo"></p><p>Notice how clearly the application shows the focused element using the element outline. Please <a href="http://outlinenone.com/">do not remove the outline</a>.</p><h2><span id="deleting-the-first-item">Deleting the first item</span></h2><p>Let&#39;s navigate to the Delete element and remove the item.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cy.log(<span class="string">&#x27;**delete the first item**&#x27;</span>)</span><br><span class="line">cy.realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// first goes to the item text field</span></span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  .realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// then to the delete button</span></span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br><span class="line"><span class="comment">// we should be on the delete button</span></span><br><span class="line">cy.focused().should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-label&#x27;</span>, <span class="string">&#x27;Delete&#x27;</span>)</span><br><span class="line">cy.focused().should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-describedby&#x27;</span>, <span class="string">&#x27;todo-0&#x27;</span>)</span><br><span class="line">cy.focused().click().wait(<span class="number">1000</span>, noLog)</span><br><span class="line"><span class="comment">// one item should be gone</span></span><br><span class="line">cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>).wait(<span class="number">1000</span>, noLog)</span><br></pre></td></tr></table></figure><p><img src="../images/keyboard-only/delete.gif" alt="The test deletes the first todo"></p><h2><span id="editing-an-item">Editing an item</span></h2><p>After deleting an item, we have two more application features to test. First, let&#39;s edit an item.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">cy.log(<span class="string">&#x27;**edit an item**&#x27;</span>)</span><br><span class="line"><span class="comment">// the focus goes to the next &quot;delete&quot; button</span></span><br><span class="line">cy.focused()</span><br><span class="line">  .should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-label&#x27;</span>, <span class="string">&#x27;Delete&#x27;</span>)</span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  <span class="comment">// now do the tab in the reverse order to get to the edit field</span></span><br><span class="line">  .realPress([<span class="string">&#x27;Shift&#x27;</span>, <span class="string">&#x27;Tab&#x27;</span>])</span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">cy.focused()</span><br><span class="line">  .should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-describedby&#x27;</span>, <span class="string">&#x27;clicktoedit&#x27;</span>)</span><br><span class="line">  .click()</span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br><span class="line"><span class="comment">// retry the focused element until the app</span></span><br><span class="line"><span class="comment">// starts editing the item</span></span><br><span class="line">cy.focused()</span><br><span class="line">  .should(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;edit&#x27;</span>)</span><br><span class="line">  .and(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  <span class="comment">// if we use cy.clear() the element is deleted by the application</span></span><br><span class="line">  <span class="comment">// .clear()</span></span><br><span class="line">  <span class="comment">// thus we clear it differently</span></span><br><span class="line">  .type(<span class="string">&#x27;&#123;selectall&#125;&#123;backspace&#125;&#x27;</span>)</span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  .type(<span class="string">&#x27;confirm by testing&#123;enter&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">cy.contains(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;confirm by testing&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>).wait(<span class="number">1000</span>, noLog)</span><br></pre></td></tr></table></figure><p>The steps show the application changing the text of the todo item.</p><p><img src="../images/keyboard-only/edit.gif" alt="Editing the todo item"></p><h2><span id="tab-through-filters">Tab through filters</span></h2><p>From editing an item, let&#39;s navigate through the filters at the bottom of the page.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cy.log(<span class="string">&#x27;**tab through filters**&#x27;</span>)</span><br><span class="line">cy.realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// at the delete button</span></span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  .realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// at the &quot;All&quot; filter link</span></span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  .realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// at the &quot;Active&quot; filter link</span></span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  .realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// at the &quot;Completed&quot; filter link</span></span><br><span class="line">cy.focused().should(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;nodeName&#x27;</span>, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">cy.focused().should(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;Completed&#x27;</span>).wait(<span class="number">1000</span>, noLog)</span><br></pre></td></tr></table></figure><p><img src="../images/keyboard-only/tab-filters.gif" alt="Navigate through the filters"></p><h2><span id="test-the-filtered-views">Test the filtered views</span></h2><p>Finally, let&#39;s confirm the filtered views work.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cy.focused().should(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;Completed&#x27;</span>).wait(<span class="number">1000</span>, noLog).click()</span><br><span class="line"></span><br><span class="line"><span class="comment">// confirm the &quot;Completed&quot; view shows</span></span><br><span class="line">cy.log(<span class="string">&#x27;**completed items view**&#x27;</span>)</span><br><span class="line">cy.hash().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;#/completed&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">cy.contains(<span class="string">&#x27;#todo-count&#x27;</span>, <span class="string">&#x27;1 item left&#x27;</span>)</span><br><span class="line">cy.focused().should(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;All&#x27;</span>).wait(<span class="number">1000</span>, noLog)</span><br><span class="line"></span><br><span class="line">cy.log(<span class="string">&#x27;**active items view**&#x27;</span>)</span><br><span class="line">cy.realPress(<span class="string">&#x27;Tab&#x27;</span>)</span><br><span class="line">cy.focused().should(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;Active&#x27;</span>).wait(<span class="number">1000</span>, noLog).click()</span><br><span class="line">cy.hash().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;#/active&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// note: after clicking, the filter is highlighted</span></span><br><span class="line"><span class="comment">// but the focus is still on the &quot;All&quot; link</span></span><br><span class="line">cy.focused().should(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;All&#x27;</span>)</span><br><span class="line">cy.contains(<span class="string">&#x27;li[role=presentation] a&#x27;</span>, <span class="string">&#x27;Active&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;selected&#x27;</span>)</span><br><span class="line">  .and(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-checked&#x27;</span>, <span class="string">&#x27;true&#x27;</span>)</span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br></pre></td></tr></table></figure><p>The test correctly navigates through the filtered views</p><p><img src="../images/keyboard-only/active-tab.gif" alt="The tested filtered views"></p><h2><span id="avoiding-clicks">Avoiding clicks</span></h2><p>&quot;Wait!&quot;, you might say. You used the command <a href="https://on.cypress.io/click">.click()</a> in the test - which is a <em>mouse click</em> event. This is a wrong command to use during the keyboard-only test.</p><p>Yes, I should have used the <code>.realPress</code> command only. To avoid accidentally using <code>cy.click()</code> let&#39;s remove this command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cypress.Commands.overwrite(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Cannot use click command during keyboard-only test&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;works using the keyboard only&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Our current test fails.</p><p><img src="../images/keyboard-only/no-click.png" alt="No click command allowed"></p><p>Instead of <code>cy.click</code> we should use <code>cy.realPress(&#39;Space&#39;)</code> or <code>.realPress(&#39;Enter&#39;)</code> command. This is where we find a problem - we cannot edit an existing item using the keyboard only - we need to click the item to start editing it. The application does not listen to the &quot;Enter&quot; key when focused on the existing Todo item.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cy.focused()</span><br><span class="line">  .should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-describedby&#x27;</span>, <span class="string">&#x27;clicktoedit&#x27;</span>)</span><br><span class="line">  .realPress(<span class="string">&#x27;Enter&#x27;</span>)</span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br></pre></td></tr></table></figure><p><img src="../images/keyboard-only/no-edit.png" alt="The application does not let us start editing an item using the keyboard"></p><p>Ok, time to fork the application and do some coding. I have copied the application into <a href="https://github.com/bahmutov/test-todomvc-using-keyboard/tree/main/public">public folder</a> and added a static server and <a href="https://github.com/bahmutov/start-server-and-test">start-server-and-test</a> utility.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D serve start-server-and-test</span></span><br><span class="line">+ serve@12.0.0</span><br><span class="line">+ start-server-and-test@1.12.6</span><br></pre></td></tr></table></figure><p>We need to server the <code>public</code> folder and open Cypress after the port 5000 responds. These are the new NPM package script commands.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;cy:open&quot;</span>: <span class="string">&quot;cypress open&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cy:run&quot;</span>: <span class="string">&quot;cypress run&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;serve public&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;start-test 5000 cy:open&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Normally I would use <code>npm run dev</code> to develop the code locally white testing it, see the post <a href="/blog/organize-npm-scripts/" title="How I Organize my NPM Scripts">How I Organize my NPM Scripts</a>.</p><p>To fix the individual item edit, I added the following code in <a href="https://github.com/bahmutov/test-todomvc-using-keyboard/blob/main/public/js/directives/todoKbd.js">todoKbd.js</a> directive:</p><figure class="highlight js"><figcaption><span>todoKbd.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.on(<span class="string">&#x27;keydown&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (event.keyCode === ENTER_KEY) &#123;</span><br><span class="line">    scope.editTodo(scope.todo)</span><br><span class="line">    scope.$apply()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// the rest of the keyboard handlers</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The full test below now should pass</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// load intelligent code completion for Cypress and the plugin</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress-real-events&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-real-events/support&#x27;</span></span><br><span class="line"></span><br><span class="line">Cypress.Commands.overwrite(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Cannot use click command during keyboard-only test&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;works using the keyboard only&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> noLog = &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;What needs to be done?&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    <span class="comment">// for the purpose of the blog post</span></span><br><span class="line">    <span class="comment">// slow down the commands by inserting waits</span></span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the first tab should bring us to the input element</span></span><br><span class="line">  <span class="comment">// but first we must be in the application&#x27;s iframe</span></span><br><span class="line">  cy.get(<span class="string">&#x27;body&#x27;</span>).realClick().realPress(<span class="string">&#x27;Tab&#x27;</span>)</span><br><span class="line">  cy.focused().should(<span class="string">&#x27;have.id&#x27;</span>, <span class="string">&#x27;new-todo&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// confirm the label is visible</span></span><br><span class="line">  cy.wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  cy.contains(<span class="string">&#x27;label[for=new-todo]&#x27;</span>, <span class="string">&#x27;What needs to be done?&#x27;</span>).should(</span><br><span class="line">    <span class="string">&#x27;be.visible&#x27;</span>,</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  cy.focused().type(<span class="string">&#x27;code app&#123;enter&#125;&#x27;</span>).type(<span class="string">&#x27;ensure a11y&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">  cy.wait(<span class="number">1000</span>, noLog)</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;**complete the first item**&#x27;</span>)</span><br><span class="line">  cy.realPress(<span class="string">&#x27;Tab&#x27;</span>)</span><br><span class="line">  <span class="comment">// confirm we are at &quot;complete all&quot; element</span></span><br><span class="line">  cy.focused().should(<span class="string">&#x27;have.id&#x27;</span>, <span class="string">&#x27;toggle-all&#x27;</span>).wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  cy.realPress(<span class="string">&#x27;Tab&#x27;</span>)</span><br><span class="line">  <span class="comment">// confirm we are at the &quot;complete first todo&quot; element</span></span><br><span class="line">  cy.focused()</span><br><span class="line">    .should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-labelledby&#x27;</span>, <span class="string">&#x27;todo-0&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">    .realPress(<span class="string">&#x27;Space&#x27;</span>)</span><br><span class="line">  <span class="comment">// confirm the todo was completed</span></span><br><span class="line">  cy.focused()</span><br><span class="line">    .should(<span class="string">&#x27;be.checked&#x27;</span>)</span><br><span class="line">    .and(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-checked&#x27;</span>, <span class="string">&#x27;true&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  <span class="comment">// marks the item as completed</span></span><br><span class="line">  cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>)</span><br><span class="line">    .first()</span><br><span class="line">    .should(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;**delete the first item**&#x27;</span>)</span><br><span class="line">  cy.realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// first goes to the item text field</span></span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">    .realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// then to the delete button</span></span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  <span class="comment">// we should be on the delete button</span></span><br><span class="line">  cy.focused().should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-label&#x27;</span>, <span class="string">&#x27;Delete&#x27;</span>)</span><br><span class="line">  cy.focused().should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-describedby&#x27;</span>, <span class="string">&#x27;todo-0&#x27;</span>)</span><br><span class="line">  cy.focused().realPress(<span class="string">&#x27;Space&#x27;</span>).wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  <span class="comment">// one item should be gone</span></span><br><span class="line">  cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>).wait(<span class="number">1000</span>, noLog)</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;**edit an item**&#x27;</span>)</span><br><span class="line">  <span class="comment">// the focus goes to the next &quot;delete&quot; button</span></span><br><span class="line">  cy.focused()</span><br><span class="line">    .should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-label&#x27;</span>, <span class="string">&#x27;Delete&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">    <span class="comment">// now do the tab in the reverse order to get to the edit field</span></span><br><span class="line">    .realPress([<span class="string">&#x27;Shift&#x27;</span>, <span class="string">&#x27;Tab&#x27;</span>])</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  cy.focused()</span><br><span class="line">    .should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-describedby&#x27;</span>, <span class="string">&#x27;clicktoedit&#x27;</span>)</span><br><span class="line">    .realPress(<span class="string">&#x27;Enter&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  <span class="comment">// retry the focused element until the app</span></span><br><span class="line">  <span class="comment">// starts editing the item</span></span><br><span class="line">  cy.focused()</span><br><span class="line">    .should(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;edit&#x27;</span>)</span><br><span class="line">    .and(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    <span class="comment">// if we use cy.clear() the element is deleted by the application</span></span><br><span class="line">    <span class="comment">// .clear()</span></span><br><span class="line">    <span class="comment">// thus we clear it differently</span></span><br><span class="line">    .type(<span class="string">&#x27;&#123;selectall&#125;&#123;backspace&#125;&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">    .type(<span class="string">&#x27;confirm by testing&#123;enter&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;confirm by testing&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>).wait(<span class="number">1000</span>, noLog)</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;**tab through filters**&#x27;</span>)</span><br><span class="line">  cy.realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// at the delete button</span></span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">    .realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// at the &quot;All&quot; filter link</span></span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">    .realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// at the &quot;Active&quot; filter link</span></span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">    .realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// at the &quot;Completed&quot; filter link</span></span><br><span class="line">  cy.focused().should(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;nodeName&#x27;</span>, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">  cy.focused()</span><br><span class="line">    .should(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;Completed&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">    .realPress(<span class="string">&#x27;Enter&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// confirm the &quot;Completed&quot; view shows</span></span><br><span class="line">  cy.log(<span class="string">&#x27;**completed items view**&#x27;</span>)</span><br><span class="line">  cy.hash().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;#/completed&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#todo-count&#x27;</span>, <span class="string">&#x27;1 item left&#x27;</span>)</span><br><span class="line">  cy.focused().should(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;All&#x27;</span>).wait(<span class="number">1000</span>, noLog)</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;**active items view**&#x27;</span>)</span><br><span class="line">  cy.realPress(<span class="string">&#x27;Tab&#x27;</span>)</span><br><span class="line">  cy.focused()</span><br><span class="line">    .should(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;Active&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">    .realPress(<span class="string">&#x27;Enter&#x27;</span>)</span><br><span class="line">  cy.hash().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;#/active&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="comment">// note: after clicking, the filter is highlighted</span></span><br><span class="line">  <span class="comment">// but the focus is still on the &quot;All&quot; link</span></span><br><span class="line">  cy.focused().should(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;All&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;li[role=presentation] a&#x27;</span>, <span class="string">&#x27;Active&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;selected&#x27;</span>)</span><br><span class="line">    .and(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-checked&#x27;</span>, <span class="string">&#x27;true&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/keyboard-only/pass.png" alt="The full keyboard-only test passes"></p><h2><span id="testing-smaller-features">Testing smaller features</span></h2><p>When we are done with the longer test, I like to see if there are smaller application features that need to be tested. Usually I suggest using <a href="../tags/code-coverage/">code coverage as a guide</a> to finding the missed features. In our case, the application has no built step, so using the code coverage is tricky. Let&#39;s simply look at the code to find what features the application has but we are not testing yet.</p><h3><span id="cancel-edits">Cancel edits</span></h3><p>The application code has the following fragment:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (event.keyCode === ESCAPE_KEY) &#123;</span><br><span class="line">  scope.revertEdits(scope.todo)</span><br><span class="line">  focus = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When we are editing an existing item in the list, if we press the Escape key, the edits should be reverted. Let&#39;s test it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;cancels edit on escape&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;What needs to be done?&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    <span class="comment">// for the purpose of the blog post</span></span><br><span class="line">    <span class="comment">// slow down the commands by inserting waits</span></span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the first tab should bring us to the input element</span></span><br><span class="line">  <span class="comment">// but first we must be in the application&#x27;s iframe</span></span><br><span class="line">  cy.get(<span class="string">&#x27;body&#x27;</span>).realClick().realPress(<span class="string">&#x27;Tab&#x27;</span>)</span><br><span class="line">  cy.focused()</span><br><span class="line">    .should(<span class="string">&#x27;have.id&#x27;</span>, <span class="string">&#x27;new-todo&#x27;</span>)</span><br><span class="line">    .type(<span class="string">&#x27;first&#123;enter&#125;&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  cy.realPress(<span class="string">&#x27;Tab&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">    .realPress(<span class="string">&#x27;Tab&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">    .realPress(<span class="string">&#x27;Tab&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">    <span class="comment">// let&#x27;s start editing</span></span><br><span class="line">    .realPress(<span class="string">&#x27;Enter&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  cy.focused().should(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;first&#x27;</span>).type(<span class="string">&#x27; todo&#x27;</span>)</span><br><span class="line">  cy.focused().should(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;first todo&#x27;</span>).wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  <span class="comment">// now Escape, use cy.type because cypress-real-events does not implement Escape yet</span></span><br><span class="line">  cy.focused().type(<span class="string">&#x27;&#123;esc&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the todo item is reverted to its original text</span></span><br><span class="line">  <span class="comment">// which we check using the regular expression</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;#todo-list li .todoitem&#x27;</span>, <span class="regexp">/^first$/</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/keyboard-only/cancel.gif" alt="Testing if the app reverts an edit on Escape press"></p><h3><span id="clear-completed-todos">Clear completed todos</span></h3><p>Another feature we need to test is clearing the completed items using a button press. The button only appears when there are completed items.</p><p><img src="../images/keyboard-only/clear.png" alt="We need to clear the completed items using the keyboard navigation"></p><p>To speed up this test we can avoid entering the todo items through the page. The application stores the todos in the <code>localStorage</code> object.</p><p><img src="../images/keyboard-only/localstorage.png" alt="Todo items stored by the application"></p><p>Cypress automatically clears the local storage before each test. We can set the items in the local storage when visiting the page to start the application with a few items before testing completing them.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;completes all todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> todos = [</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">&#x27;use keyboard&#x27;</span>,</span><br><span class="line">      completed: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">&#x27;disable mouse&#x27;</span>,</span><br><span class="line">      completed: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">&#x27;write a11y tests&#x27;</span>,</span><br><span class="line">      completed: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> STORAGE_ID = <span class="string">&#x27;todos-angularjs&#x27;</span></span><br><span class="line">      win.localStorage.setItem(STORAGE_ID, <span class="built_in">JSON</span>.stringify(todos))</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>).wait(<span class="number">1000</span>, noLog)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test starts almost instantly, since the data is already there. Next, let&#39;s verify that clearing the 2 completed items works.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the focus should be set on the &quot;All&quot; filter link</span></span><br><span class="line">cy.focused()</span><br><span class="line">  .should(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;All&#x27;</span>)</span><br><span class="line">  .realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// at the &quot;Active&quot; link</span></span><br><span class="line">  .wait(<span class="number">500</span>, noLog)</span><br><span class="line">  .realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// at the &quot;Completed&quot; link</span></span><br><span class="line">  .wait(<span class="number">500</span>, noLog)</span><br><span class="line">  .realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// at the &quot;Clear completed&quot; button</span></span><br><span class="line">  .wait(<span class="number">500</span>, noLog)</span><br><span class="line">cy.focused()</span><br><span class="line">  .should(<span class="string">&#x27;have.id&#x27;</span>, <span class="string">&#x27;clear-completed&#x27;</span>)</span><br><span class="line">  .and(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;Clear completed (2)&#x27;</span>)</span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  .realPress(<span class="string">&#x27;Space&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cy.log(<span class="string">&#x27;**only incomplete items remain**&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">cy.contains(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;write a11y tests&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>).wait(<span class="number">1000</span>, noLog)</span><br></pre></td></tr></table></figure><p>The test passes</p><p><img src="../images/keyboard-only/clear-completed.gif" alt="Clear completed items test"></p><h3><span id="toggle-all">Toggle all</span></h3><p>We also need to make sure we can toggle all todos using the button next to the input element.</p><p><img src="../images/keyboard-only/toggle-all.png" alt="Toggle all todos button"></p><p>Again, we need a couple of todos to start with. We can move the <code>todos</code> array from the previous test into its own JSON file. Instead of using the <a href="https://on.cypress.io/fixture">cy.fixture</a> command, we can import the JSON file into the spec file, see the post <a href="/blog/import-cypress-fixtures/" title="Import Cypress fixtures">Import Cypress fixtures</a>.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> todos <span class="keyword">from</span> <span class="string">&#x27;./todos.json&#x27;</span></span><br><span class="line"><span class="comment">// use todos array</span></span><br></pre></td></tr></table></figure><p>When toggling all todos, we need to count which items are completed. First, there are two such items.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;#todo-list li.completed&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">cy.contains(<span class="string">&#x27;#todo-count strong&#x27;</span>, <span class="string">&#x27;1&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>).wait(<span class="number">1000</span>, noLog)</span><br></pre></td></tr></table></figure><p>The initial focus is set on the &quot;All&quot; filter. We need to press &quot;Shift+Tab&quot; 10 times to navigate back to the <code>#toggle-all</code> element. We can do this by calling the <code>cy.realPress</code> via Lodash <code>_.times</code> function bundled in Cypress.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the focus should be set on the &quot;All&quot; filter link</span></span><br><span class="line"><span class="comment">// we need to navigate to the &quot;#toggle-all&quot; element</span></span><br><span class="line"><span class="comment">// through each todo item with text, complete, and delete elements.</span></span><br><span class="line">cy.focused().should(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;All&#x27;</span>)</span><br><span class="line">Cypress._.times(<span class="number">10</span>, <span class="function">() =&gt;</span> cy.realPress([<span class="string">&#x27;Shift&#x27;</span>, <span class="string">&#x27;Tab&#x27;</span>]).wait(<span class="number">250</span>, noLog))</span><br><span class="line"><span class="comment">// confirm we are at the right element</span></span><br><span class="line">cy.focused()</span><br><span class="line">  .should(<span class="string">&#x27;have.id&#x27;</span>, <span class="string">&#x27;toggle-all&#x27;</span>)</span><br><span class="line">  .and(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-label&#x27;</span>, <span class="string">&#x27;Mark all todos as completed&#x27;</span>)</span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br></pre></td></tr></table></figure><p>Let&#39;s press the element and see what happens.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cy.focused()</span><br><span class="line">  .should(<span class="string">&#x27;have.id&#x27;</span>, <span class="string">&#x27;toggle-all&#x27;</span>)</span><br><span class="line">  .and(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-label&#x27;</span>, <span class="string">&#x27;Mark all todos as completed&#x27;</span>)</span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  .realPress(<span class="string">&#x27;Space&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;#todo-list li.completed&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// all items are now complete</span></span><br><span class="line">cy.contains(<span class="string">&#x27;#todo-count strong&#x27;</span>, <span class="string">&#x27;0&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">cy.contains(<span class="string">&#x27;#clear-completed&#x27;</span>, <span class="string">&#x27;Clear completed (3)&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br></pre></td></tr></table></figure><p>What happens if we press the element again? All items will be active again.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if we press the &quot;toggle-all&quot; again, all items will become incomplete</span></span><br><span class="line">cy.realPress(<span class="string">&#x27;Space&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;#todo-list li.completed&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">cy.contains(<span class="string">&#x27;#todo-count strong&#x27;</span>, <span class="string">&#x27;3&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">cy.contains(<span class="string">&#x27;#clear-completed&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>).wait(<span class="number">1000</span>, noLog)</span><br></pre></td></tr></table></figure><p>The entire test is a joy to watch.</p><p><img src="../images/keyboard-only/toggle-all-test.gif" alt="Testing the toggle all element"></p><h2><span id="publishing-the-site">Publishing the site</span></h2><p>I have added continuous integration to my repository using <a href="/blog/trying-github-actions/" title="GitHub Actions">GitHub Actions</a>. Here is the entire <a href="https://github.com/bahmutov/test-todomvc-using-keyboard/blob/main/.github/workflows/ci.yml">cy.yml</a> file.</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>, <span class="string">pull_request</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">code</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:5000&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># if the tests passed, publish the application</span></span><br><span class="line">      <span class="comment"># https://github.com/peaceiris/actions-gh-pages</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Publish</span> <span class="string">site</span> <span class="string">🌐</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">github.ref</span> <span class="string">==</span> <span class="string">&#x27;refs/heads/main&#x27;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure><p>You can see the automatically deployed app at <a href="https://glebbahmutov.com/test-todomvc-using-keyboard/">https://glebbahmutov.com/test-todomvc-using-keyboard/</a> and verify the keyboard input really works. If you find a bug, let me know, as I want to make sure the tests are complete.</p><h2><span id="see-also">See also</span></h2><p>On the personal level, I feel like the above keyboard tests should be executed against every TodoMVC example included in the <a href="https://todomvc.com/">todomvc.com</a> site.</p><ul><li>Read my other blog posts about <a href="../tags/a11y/">testing a11y</a> and check out <a href="https://github.com/component-driven/cypress-axe">cypress-axe</a> plugin</li><li><a href="https://webaim.org/techniques/keyboard/">WebAIM: Keyboard Accessibility</a></li><li><a href="http://outlinenone.com/">Do Not Remove The Outline</a></li><li><a href="https://dev.to/steady5063/starting-your-accessibility-journey-a-developers-guide-37o4">Starting Your Accessibility Journey: A Developers Guide</a></li><li><a href="https://dev.to/eevajonnapanula/don-t-develop-just-for-yourself-a-developer-s-checklist-to-accessibility-545k">Don&#39;t Develop Just for Yourself - A Developer&#39;s Checklist to Accessibility</a></li><li><a href="https://www.a11yproject.com/resources/">The A11y Project: Resources</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s take a good TodoMVC example made with accessability features included, as every app should have. One of the aspects we need to 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="a11y" scheme="https://glebbahmutov.com/blog/tags/a11y/"/>
    
  </entry>
  
  <entry>
    <title>Why cy.log Prints Nothing</title>
    <link href="https://glebbahmutov.com/blog/why-cy-log-prints-nothing/"/>
    <id>https://glebbahmutov.com/blog/why-cy-log-prints-nothing/</id>
    <published>2021-07-10T04:00:00.000Z</published>
    <updated>2021-07-10T12:50:14.929Z</updated>
    
    <content type="html"><![CDATA[<p>This is a very common question and comes up at least every couple of days on the <a href="https://on.cypress.io/chat">Cypress chat</a> channel.</p><p>Imagine you have an element on the page</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span>Mary<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>You would like to print the text from the element <code>#username</code> to Cypress Command Log. You know that Cypress <a href="https://on.cypress.io/introduction-to-cypress#Commands-Are-Asynchronous">commands are asynchronous</a>, so you place the value into a variable before calling <code>cy.log</code> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;prints the text&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// ⛔️ INCORRECT - PRINTS NULL</span></span><br><span class="line">  <span class="keyword">let</span> username = <span class="literal">null</span></span><br><span class="line">  cy.get(<span class="string">&#x27;#username&#x27;</span>).then(<span class="function">(<span class="params">$el</span>) =&gt;</span> (username = $el.text()))</span><br><span class="line">  cy.log(username) <span class="comment">// always prints null ⚠️</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hmm, the Command Log prints NULL.</p><p><img src="../images/cy-log-print/null.png" alt="Cypress Command Log shows NULL instead of text"></p><p>Let&#39;s fix it!</p><blockquote class="pullquote"><p>🎁 You can find the source code for this blog post in the repo <a href="https://github.com/bahmutov/cypress-log-example">bahmutov/cypress-log-example</a>.</p></blockquote><p>If you would rather watch the explanation than read it, I have recorded a short video below.</p><center><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/uGWWoq0ECY8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p><strong>Tip:</strong> for more videos about Cypress subscribe to my <a href="https://www.youtube.com/glebbahmutov">YouTube channel</a></p><h2><span id="the-root-cause">The root cause</span></h2><p>Cypress commands are asynchronous, but they are also <em>chained</em> first. When Cypress runs through the test the first time, it only internally queues the commands for execution. Every command is stored as an object in Cypress memory together with its arguments. In JavaScript, when you call a function, the primitive arguments are passed by value. Each argument&#39;s value at the moment of the call is copied and passed into the function. Let&#39;s write down as a comment the command and its argument as stored in memory. For example, <code>cy.visit(&#39;index.html&#39;)</code> will become an object with the command &quot;VISIT&quot; to run and an argument string <code>index.html</code>. This object is stored in Cypress command chain.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test code                              chained command with arguments</span></span><br><span class="line">cy.visit(<span class="string">&#x27;index.html&#x27;</span>)                    <span class="comment">// VISIT &quot;index.html&quot;</span></span><br><span class="line"><span class="keyword">let</span> username = <span class="literal">null</span></span><br><span class="line">cy.get(<span class="string">&#x27;#username&#x27;</span>)                       <span class="comment">// GET &quot;#username&quot;</span></span><br><span class="line">  .then(<span class="function">(<span class="params">$el</span>) =&gt;</span> (username = $el.text())) <span class="comment">// THEN callback function</span></span><br><span class="line">cy.log(username)                          <span class="comment">// LOG null</span></span><br></pre></td></tr></table></figure><p>At the moment when <code>cy.log(username)</code> is called, the value of the argument is given by the variable <code>username</code>. JavaScript looks up the current value, sees <code>null</code> and then calls <code>cy.log(null)</code>. That is JavaScript semantics - it has nothing to do with Cypress&#39; logic.</p><h2><span id="the-solution">The solution</span></h2><p>We need to <em>delay</em> calling <code>cy.log(username)</code> until the variable <code>username</code> has a value. One solution is to move calling <code>cy.log</code> into its own <code>.then</code> block <em>after</em> the <code>.then(($el) =&gt; (username = $el.text()))</code> finishes.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"><span class="comment">// ✅ CORRECT - prints &quot;Mary&quot;</span></span><br><span class="line"><span class="keyword">let</span> username = <span class="literal">null</span></span><br><span class="line">cy.get(<span class="string">&#x27;#username&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">$el</span>) =&gt;</span> (username = $el.text()))</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// by this point the &quot;username&quot; primitive variable</span></span><br><span class="line">    <span class="comment">// has been set, and the call is made cy.log(&quot;Mary&quot;)</span></span><br><span class="line">    cy.log(username)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cy-log-print/mary.png" alt="The cy.log prints the text from the page"></p><p>We do not need a separate <code>.then</code> callback, we can simply log the text immediate as we receive it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"><span class="comment">// ✅ CORRECT - prints &quot;Mary&quot;</span></span><br><span class="line"><span class="keyword">let</span> username = <span class="literal">null</span></span><br><span class="line">cy.get(<span class="string">&#x27;#username&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">$el</span>) =&gt;</span> &#123;</span><br><span class="line">    username = $el.text()</span><br><span class="line">    cy.log(username)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>In this case, we do not even need a variable</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"><span class="comment">// ✅ CORRECT - prints &quot;Mary&quot;</span></span><br><span class="line">cy.get(<span class="string">&#x27;#username&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">$el</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.log($el.text())</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>We do not even need a <code>.then</code> callback. We can invoke the method <code>text</code> and pass the result to the <code>cy.log</code> method.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"><span class="comment">// ✅ CORRECT - prints &quot;Mary&quot;</span></span><br><span class="line">cy.get(<span class="string">&#x27;#username&#x27;</span>).invoke(<span class="string">&#x27;text&#x27;</span>).then(cy.log)</span><br></pre></td></tr></table></figure><h2><span id="bonus-see-the-order-of-command-chaining-and-execution">Bonus: see the order of command chaining and execution</span></h2><p>You can print each Cypress command as it is added to the chain of commands in memory by subscribing to the <a href="https://on.cypress.io/catalog-of-events#Cypress-Events">Cypress command events</a>. You can even print the commands at the start and at the end of their actual execution.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">it.only(<span class="string">&#x27;prints null with event trace&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.on(<span class="string">&#x27;command:enqueued&#x27;</span>, <span class="function">(<span class="params">&#123; name, args &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`ENQUEUED <span class="subst">$&#123;name&#125;</span>: <span class="subst">$&#123;args&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.on(<span class="string">&#x27;command:start&#x27;</span>, <span class="function">(<span class="params">&#123; attributes: &#123; name, args &#125; &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`START <span class="subst">$&#123;name&#125;</span>: <span class="subst">$&#123;args&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// ⛔️ INCORRECT - PRINTS NULL</span></span><br><span class="line">  <span class="keyword">let</span> username = <span class="literal">null</span></span><br><span class="line">  cy.get(<span class="string">&#x27;#username&#x27;</span>).then(<span class="function">(<span class="params">$el</span>) =&gt;</span> (username = $el.text()))</span><br><span class="line">  cy.log(username) <span class="comment">// always prints null ⚠️</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The DevTools console shows the <code>log</code> command without an argument</p><p><img src="../images/cy-log-print/log-null.png" alt="Tracing Cypress commands"></p><p>Let&#39;s see the trace for the corrected test</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;prints text with event trace&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.on(<span class="string">&#x27;command:enqueued&#x27;</span>, <span class="function">(<span class="params">&#123; name, args &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`ENQUEUED <span class="subst">$&#123;name&#125;</span>: <span class="subst">$&#123;args&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.on(<span class="string">&#x27;command:start&#x27;</span>, <span class="function">(<span class="params">&#123; attributes: &#123; name, args &#125; &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`START <span class="subst">$&#123;name&#125;</span>: <span class="subst">$&#123;args&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// ✅ CORRECT - prints &quot;Mary&quot;</span></span><br><span class="line">  cy.get(<span class="string">&#x27;#username&#x27;</span>)</span><br><span class="line">    .invoke(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    <span class="comment">// avoid printing internals of cy.log in the trace</span></span><br><span class="line">    .then(<span class="function">(<span class="params">s</span>) =&gt;</span> cy.log(s))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cy-log-print/trace.png" alt="Tracing Cypress commands during correct test"></p><p>Notice in the trace that <code>LOG</code> command was enqueued only after the command <code>invoke(&#39;text&#39;)</code> has ran. By the time <code>cy.log(s)</code> is added to the queue, the value <code>s</code> exists and is passed to the call.</p><h2><span id="more-info">More info</span></h2><p>Read <a href="/blog/cypress-tips-and-tricks/" title="Cypress Tips and Tricks">Cypress Tips and Tricks</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is a very common question and comes up at least every couple of days on the &lt;a href=&quot;https://on.cypress.io/chat&quot;&gt;Cypress chat&lt;/a&gt; ch
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>How to Keep Cypress Tests in Another Repo While Using CircleCI</title>
    <link href="https://glebbahmutov.com/blog/how-to-keep-cypress-tests-in-another-repo-with-circleci/"/>
    <id>https://glebbahmutov.com/blog/how-to-keep-cypress-tests-in-another-repo-with-circleci/</id>
    <published>2021-07-03T04:00:00.000Z</published>
    <updated>2021-07-27T14:36:57.752Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine you are developing a web application and deploying it to preview environments using <a href="https://vercel.com/">Vercel</a>. How do you run the tests that reside in a separate repo? This blog post teaches you how to trigger CircleCI workflows after deployment.</p><p><strong>Note:</strong> I have written a similar blog post <a href="/blog/how-to-keep-cypress-tests-in-another-repo/" title="How to Keep Cypress Tests in Another Repo While Using GitHub Actions">How to Keep Cypress Tests in Another Repo While Using GitHub Actions</a> that shows the solution when using Netlify and GitHub Actions.</p><blockquote class="pullquote"><p>🎁 You can find the example application in the repository <a href="https://github.com/bahmutov/todomvc-no-tests-vercel">bahmutov/todomvc-no-tests-vercel</a> and its end-to-end tests in the repository <a href="https://github.com/bahmutov/todomvc-tests-circleci">bahmutov/todomvc-tests-circleci</a>. You can see the deployed application at <a href="https://todomvc-no-tests-vercel.vercel.app/">https://todomvc-no-tests-vercel.vercel.app/</a> and see CircleCI workflows at <a href="https://app.circleci.com/pipelines/github/bahmutov/todomvc-tests-circleci">https://app.circleci.com/pipelines/github/bahmutov/todomvc-tests-circleci</a>. You can find the recorded tests on Cypress Dashboard <a href="https://dashboard.cypress.io/projects/15cjtg/runs">here</a>.</p></blockquote><!-- toc --><ul><li><a href="#the-application">The application</a></li><li><a href="#the-tests">The tests</a></li><li><a href="#the-tests-workflow">The tests workflow</a></li><li><a href="#trigger-circleci-pipeline">Trigger CircleCI pipeline</a></li><li><a href="#trigger-the-tests-on-the-different-branch">Trigger the tests on the different branch</a></li><li><a href="#shortcomings">Shortcomings</a></li><li><a href="#the-deployment-event">The deployment event</a></li><li><a href="#merging-the-pull-requests">Merging the pull requests</a></li><li><a href="#the-remaining-problem">The remaining problem</a><ul><li><a href="#workaround">Workaround</a></li></ul></li><li><a href="#update-1-record-tests-on-cypress-dashboard">Update 1: record tests on Cypress Dashboard</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><h2><span id="the-application">The application</span></h2><p>Every pull request opened in the <a href="https://github.com/bahmutov/todomvc-no-tests-vercel">bahmutov/todomvc-no-tests-vercel</a> is automatically deployed to Vercel at the URL that follows the pattern</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://$&#123;VERCEL_PROJECT_NAME&#125;-git-$&#123;GITHUB_HEAD_REF&#125;-$&#123;VERCEL_TEAM_NAME&#125;.vercel.app/</span><br></pre></td></tr></table></figure><p>For example, <a href="https://github.com/bahmutov/todomvc-no-tests-vercel/pull/3">pull request #3</a> from branch named <code>pr3</code> shows the following Vercel comment after the deploy:</p><p><img src="../images/separate-circleci/vercel-comment.png" alt="Vercel deployment comment"></p><h2><span id="the-tests">The tests</span></h2><p>The developer would normally run the end-to-end tests against the application running locally. Thus the <code>baseUrl</code> in the <a href="https://github.com/bahmutov/todomvc-tests-circleci/blob/main/cypress.json">cypress.json</a> file points at the local app by default.</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;http://localhost:3000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;fixturesFolder&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;supportFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;pluginsFile&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I wrote a simple end-to-end test that you can find in <a href="https://github.com/bahmutov/todomvc-tests-circleci/tree/main/cypress/integration">cypress/integration</a> folder.</p><figure class="highlight js"><figcaption><span>spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;works&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// application starts with 3 todos</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=new-todo]&#x27;</span>).type(<span class="string">&#x27;Add tests!&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">    .eq(<span class="number">3</span>)</span><br><span class="line">    .should(<span class="string">&#x27;include.text&#x27;</span>, <span class="string">&#x27;Add tests!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">&#x27;.todo&#x27;</span>, <span class="string">&#x27;Learn about React&#x27;</span>)</span><br><span class="line">    .contains(<span class="string">&#x27;[data-cy=complete]&#x27;</span>, <span class="string">&#x27;Complete&#x27;</span>)</span><br><span class="line">    .click()</span><br><span class="line">  cy.contains(<span class="string">&#x27;.todo&#x27;</span>, <span class="string">&#x27;Learn about React&#x27;</span>).find(<span class="string">&#x27;[data-cy=remove]&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;.todo&#x27;</span>, <span class="string">&#x27;Learn about React&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.screenshot(<span class="string">&#x27;finished&#x27;</span>, &#123; <span class="attr">capture</span>: <span class="string">&#x27;runner&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/separate-circleci/finished.png" alt="The screenshot finished.png"></p><h2><span id="the-tests-workflow">The tests workflow</span></h2><p>We want to run our tests on CircleCI using <a href="https://github.com/cypress-io/circleci-orb">Cypress CircleCI Orb</a> and we want to trigger the pipeline using <a href="https://circleci.com/docs/api/v2/#operation/triggerPipeline">CircleCI API</a>. To pass the URL to test, we can use pipeline parameters. The workflow file is shown below. I like having a separate &quot;info&quot; just just to print the received pipeline parameters.</p><figure class="highlight yml"><figcaption><span>.circleci/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># to use orbs, must use version &gt;= 2.1</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="comment"># import Cypress orb by specifying an exact version x.y.z</span></span><br><span class="line">  <span class="comment"># or the latest version 1.x.x using &quot;@1&quot; syntax</span></span><br><span class="line">  <span class="comment"># https://github.com/cypress-io/circleci-orb</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="attr">TEST_BRANCH:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">default:</span> <span class="string">&#x27;main&#x27;</span></span><br><span class="line">  <span class="comment"># by default, test the production deployment</span></span><br><span class="line">  <span class="attr">TEST_URL:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">default:</span> <span class="string">&#x27;https://todomvc-no-tests-vercel.vercel.app/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">info:</span></span><br><span class="line">    <span class="attr">machine:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">ubuntu-2004:202104-01</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">print</span> <span class="string">variables</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;TEST_BRANCH is &lt;&lt; pipeline.parameters.TEST_BRANCH &gt;&gt;&quot;</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;TEST_URL is &lt;&lt; pipeline.parameters.TEST_URL &gt;&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># preview deploys might take a little bit to be ready</span></span><br><span class="line">  <span class="comment"># this job pings the TEST_URL to check if the deployment has finished</span></span><br><span class="line">  <span class="attr">wait-for-deploy:</span></span><br><span class="line">    <span class="attr">machine:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">ubuntu-2004:202104-01</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># we don&#x27;t really need to check TEST_URL,</span></span><br><span class="line">      <span class="comment"># since we only run the entire workflow when it is present</span></span><br><span class="line">      <span class="comment"># but I like to remember how to use the Circle halt command</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">unless:</span></span><br><span class="line">          <span class="attr">condition:</span> <span class="string">&lt;&lt;</span> <span class="string">pipeline.parameters.TEST_URL</span> <span class="string">&gt;&gt;</span></span><br><span class="line">          <span class="attr">steps:</span></span><br><span class="line">            <span class="comment"># https://circleci.com/docs/2.0/configuration-reference/#ending-a-job-from-within-a-step</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">circleci-agent</span> <span class="string">step</span> <span class="string">halt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">wait</span> <span class="string">for</span> <span class="string">deployment</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;Using wait-on to check if the URL &lt;&lt; pipeline.parameters.TEST_URL &gt;&gt; responds&quot;</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;See https://www.npmjs.com/package/wait-on&quot;</span></span><br><span class="line">            <span class="string">npx</span> <span class="string">wait-on</span> <span class="string">--verbose</span> <span class="string">\</span></span><br><span class="line">              <span class="string">--interval</span> <span class="number">10000</span> <span class="string">--timeout</span> <span class="number">60000</span> <span class="string">\</span></span><br><span class="line">              <span class="string">&lt;&lt;</span> <span class="string">pipeline.parameters.TEST_URL</span> <span class="string">&gt;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">e2e:</span></span><br><span class="line">    <span class="comment"># only run the workflow when TEST_URL is set</span></span><br><span class="line">    <span class="attr">when:</span> <span class="string">&lt;&lt;</span> <span class="string">pipeline.parameters.TEST_URL</span> <span class="string">&gt;&gt;</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">info</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">wait-for-deploy</span></span><br></pre></td></tr></table></figure><p>I am including a job &quot;wait-for-deploy&quot; to ping the <code>TEST_URL</code> every 10 seconds until it responds. When this job finishes successfully, the preview deploy is ready to be tested. Let&#39;s add another job to the workflow to run after <code>wait-for-deploy</code> is done.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">info</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">wait-for-deploy</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">E2E</span> <span class="string">tests</span></span><br><span class="line">      <span class="attr">requires:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">wait-for-deploy</span></span><br><span class="line">      <span class="attr">config:</span> <span class="string">&#x27;baseUrl=&lt;&lt; pipeline.parameters.TEST_URL &gt;&gt;&#x27;</span></span><br><span class="line">      <span class="comment"># save videos and screenshots on Circle as artifacts</span></span><br><span class="line">      <span class="attr">store_artifacts:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># we do not need to save the workspace after the tests are done</span></span><br><span class="line">      <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>We are using the job <code>run</code> defined in the imported orb <a href="https://github.com/cypress-io/circleci-orb"><code>cypress: cypress-io/cypress@1</code></a> and control it via parameters like <code>config</code> and <code>store_artifacts</code>. Let&#39;s run this workflow on CircleCI.</p><p><img src="../images/separate-circleci/workflow.png" alt="The finished CircleCI workflow"></p><p>You can click on the &quot;Cypress E2E tests&quot; job to see the stored test artifacts: movies and screenshots.</p><p><img src="../images/separate-circleci/test-artifacts.png" alt="The stored test artifacts"></p><p><strong>Tip:</strong> while storing test artifacts is possible, <a href="https://www.cypress.io/dashboard/">Cypress Dashboard</a> does a much better job showing them.</p><p><strong>Tip 2:</strong> it is easy to mess up YML CI configuration syntax. Luckily, you can use <a href="https://circleci.com/docs/2.0/local-cli/">CircleCI CLI</a> utility to validate the config file syntax before pushing the code to the remote repository.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ circleci config validate .circleci/config.yml</span><br><span class="line">Error: Error calling workflow: <span class="string">&#x27;e2e&#x27;</span></span><br><span class="line">Error calling job: <span class="string">&#x27;test&#x27;</span></span><br><span class="line">Unknown variable(s): TEST_BRANCH</span><br><span class="line"><span class="comment"># fix the syntax error and verify again</span></span><br><span class="line">$ circleci config validate .circleci/config.yml</span><br><span class="line">Config file at .circleci/config.yml is valid.</span><br></pre></td></tr></table></figure><h2><span id="trigger-circleci-pipeline">Trigger CircleCI pipeline</span></h2><p>Let&#39;s get back to the application repository. We need to trigger the testing pipeline. The first solution is to use a GitHub Actions workflow.</p><figure class="highlight yml"><figcaption><span>.github/workflows/pr.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># every time we open a pull request, or a commit is pushed to it</span></span><br><span class="line"><span class="comment"># Vercel deploys the site to a preview environment</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">pull</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">pull_request</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">trigger-tests:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># trigger CircleCI pipeline to run E2E tests</span></span><br><span class="line">      <span class="comment"># https://circleci.com/docs/api/v2/#operation/triggerPipeline</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># the preview URL follows the format:</span></span><br><span class="line">      <span class="comment"># https://&lt;project name&gt;-git-&lt;branch name&gt;-&lt;team name&gt;.vercel.app/</span></span><br><span class="line">      <span class="comment"># https://docs.github.com/en/actions/reference/environment-variables#default-environment-variables</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Trigger</span> <span class="string">CircleCI</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">export</span> <span class="string">VERCEL_PROJECT_NAME=todomvc-no-tests-vercel</span></span><br><span class="line">          <span class="string">export</span> <span class="string">VERCEL_TEAM_NAME=gleb-bahmutov</span></span><br><span class="line">          <span class="string">export</span> <span class="string">PREVIEW_URL=https://$&#123;VERCEL_PROJECT_NAME&#125;-git-$&#123;GITHUB_HEAD_REF&#125;-$&#123;VERCEL_TEAM_NAME&#125;.vercel.app/</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;Vercel deployment URL is $&#123;PREVIEW_URL&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment"># --silent option to not print request progress</span></span><br><span class="line">          <span class="string">curl</span> <span class="string">-u</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CIRCLE_CI_API_TOKEN</span> <span class="string">&#125;&#125;:</span> <span class="string">\</span></span><br><span class="line">            <span class="string">--silent</span> <span class="string">\</span></span><br><span class="line">            <span class="string">--data</span> <span class="string">parameters[TEST_BRANCH]=$&#123;GITHUB_HEAD_REF&#125;</span> <span class="string">\</span></span><br><span class="line">            <span class="string">--data</span> <span class="string">parameters[TEST_URL]=$&#123;PREVIEW_URL&#125;</span> <span class="string">\</span></span><br><span class="line">            <span class="string">https://circleci.com/api/v2/project/gh/bahmutov/todomvc-tests-circleci/pipeline</span></span><br></pre></td></tr></table></figure><p>We will need a project or a personal CircleCI API token to trigger the pipeline. We can store it privately using GitHub Actions secrets tab. The <code>parameters</code> fields will be set as pipeline params on CircleCI. We are passing the current branch name and Vercel PR preview URL we have formed ourselves.</p><p><img src="../images/separate-circleci/trigger-tests.png" alt="Trigger CircleCI pipeline from GitHub Actions"></p><p>The trigger works. We can look at the list of pipelines to see the pipeline #13. The triggered pipelines do not have a commit message.</p><p><img src="../images/separate-circleci/pipelines.png" alt="Pipeline #13 on CircleCI"></p><p>The <code>info</code> job shows the parameters passed from GitHub.</p><p><img src="../images/separate-circleci/info-13.png" alt="Pipeline parameters printed by the &quot;info&quot; job"></p><p>The screenshot image in the test artifacts in the &quot;Cypress E2E tests&quot; job shows the preview URL was tested.</p><p><img src="../images/separate-circleci/url-13.png" alt="Cypress tests ran against the preview environment"></p><h2><span id="trigger-the-tests-on-the-different-branch">Trigger the tests on the different branch</span></h2><p>When developing the application feature, the programmer probably has updated or new tests in the corresponding branch in the test repo. Thus when testing the pull request against the branch <code>feature-X</code> we want to check out a branch with the same name from the test repo before running tests. Here is how we can do this via reusable CircleCI commands and Cypress Orb <code>post-checkout</code> parameter:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># to use orbs, must use version &gt;= 2.1</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="comment"># import Cypress orb by specifying an exact version x.y.z</span></span><br><span class="line">  <span class="comment"># or the latest version 1.x.x using &quot;@1&quot; syntax</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="comment"># by default test everything using the current default branch</span></span><br><span class="line">  <span class="comment"># but if the pipeline is triggered via API, you can pass the branch name</span></span><br><span class="line">  <span class="comment"># to check out and run tests from.</span></span><br><span class="line">  <span class="attr">TEST_BRANCH:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">default:</span> <span class="string">&#x27;main&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands</span></span><br><span class="line"><span class="attr">commands:</span></span><br><span class="line">  <span class="attr">switch_branch:</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">Changes</span> <span class="string">the</span> <span class="string">current</span> <span class="string">branch</span> <span class="string">to</span> <span class="string">the</span> <span class="string">latest</span> <span class="string">commit</span> <span class="string">on</span> <span class="string">the</span> <span class="string">specific</span> <span class="string">branch.</span></span><br><span class="line">      <span class="attr">NOTE:</span> <span class="string">if</span> <span class="string">the</span> <span class="string">branch</span> <span class="string">does</span> <span class="string">not</span> <span class="string">exist,</span> <span class="string">does</span> <span class="string">nothing.</span></span><br><span class="line">    <span class="attr">parameters:</span></span><br><span class="line">      <span class="attr">BRANCH_NAME:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">default:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">when:</span></span><br><span class="line">          <span class="attr">condition:</span> <span class="string">&lt;&lt;</span> <span class="string">parameters.BRANCH_NAME</span> <span class="string">&gt;&gt;</span></span><br><span class="line">          <span class="attr">steps:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">branch</span> <span class="string">&lt;&lt;</span> <span class="string">parameters.BRANCH_NAME</span> <span class="string">&gt;&gt;</span></span><br><span class="line">              <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line">                <span class="string">echo</span> <span class="string">&quot;Switching to branch &lt;&lt; parameters.BRANCH_NAME &gt;&gt; if it exists&quot;</span></span><br><span class="line">                <span class="string">git</span> <span class="string">checkout</span> <span class="string">&lt;&lt;</span> <span class="string">parameters.BRANCH_NAME</span> <span class="string">&gt;&gt;</span> <span class="string">||</span> <span class="literal">true</span></span><br><span class="line">                <span class="string">git</span> <span class="string">pull</span> <span class="string">origin</span> <span class="string">&lt;&lt;</span> <span class="string">parameters.BRANCH_NAME</span> <span class="string">&gt;&gt;</span> <span class="string">||</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">print_git:</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">Prints</span> <span class="string">the</span> <span class="string">current</span> <span class="string">git</span> <span class="string">branch</span> <span class="string">and</span> <span class="string">the</span> <span class="string">commit</span> <span class="string">hash.</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Print</span> <span class="string">current</span> <span class="string">Git</span> <span class="string">info</span></span><br><span class="line">          <span class="comment"># looks like Cypress default executor does not have</span></span><br><span class="line">          <span class="comment"># a very recent Git version, thus we cannot use &quot;--show-current&quot;</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;current branch is: $(git branch -a)&quot;</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;current commit is: $(git rev-parse --short HEAD)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">e2e:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">E2E</span> <span class="string">tests</span></span><br><span class="line">          <span class="comment"># switch to the test branch before installing and running tests</span></span><br><span class="line">          <span class="attr">post-checkout:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">switch_branch:</span></span><br><span class="line">                <span class="attr">BRANCH_NAME:</span> <span class="string">&lt;&lt;</span> <span class="string">pipeline.parameters.TEST_BRANCH</span> <span class="string">&gt;&gt;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">print_git</span></span><br><span class="line">          <span class="comment"># we do not need to keep the workspace around</span></span><br><span class="line">          <span class="comment"># since there are no other jobs that depend on it</span></span><br><span class="line">          <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>Note:</strong> the above fragment comes from the repository <a href="https://github.com/bahmutov/circleci-checkout-experiment">bahmutov/circleci-checkout-experiment</a> where I experimented with CircleCI to ensure this specific way of running tests from the test branch works.</p><h2><span id="shortcomings">Shortcomings</span></h2><p>The approach to testing the preview deployments described above works, but has a bad drawback. It tests the <em>branch</em> preview URL, and not the individual deploys. Imagine the pull request has several commits, each triggering a test run. Imagine that building and deploying the preview URL takes 5 minutes, while the tests only take 1 minute. The sequence of events can be see in the table below.</p><table><thead><tr><th>wall clock</th><th>event</th></tr></thead><tbody><tr><td>00:00</td><td>very first deploy to the branch &quot;my-feature&quot; with commit A</td></tr><tr><td>00:01</td><td>open pull request &quot;merge-my-feature&quot; from branch &quot;my-feature&quot;</td></tr><tr><td>00:01</td><td>Vercel starts building and deploying &quot;<a href="https://merge-my-feature...&quot;">https://merge-my-feature...&quot;</a> preview</td></tr><tr><td>00:01</td><td>GitHub Actions trigger CircleCI pipeline with <code>TEST_URL=https://merge-my-feature...</code></td></tr><tr><td>00:01</td><td>Job <code>wait-for-deploy</code> starts pinging &quot;<a href="https://merge-my-feature...&quot;">https://merge-my-feature...&quot;</a> url</td></tr><tr><td>00:06</td><td>Vercel deploys &quot;<a href="https://merge-my-feature...&quot;">https://merge-my-feature...&quot;</a> url</td></tr><tr><td>00:06</td><td>Job <code>wait-for-deploy</code> finishes after receiving 200 response from &quot;<a href="https://merge-my-feature...&quot;">https://merge-my-feature...&quot;</a> url</td></tr><tr><td>00:06</td><td>Job <code>Cypress E2E tests</code> runs tests against the &quot;<a href="https://merge-my-feature...&quot;">https://merge-my-feature...&quot;</a> url</td></tr><tr><td>00:10</td><td>user makes another push to the branch &quot;my-feature&quot; with commit B</td></tr><tr><td>00:10</td><td>Vercel starts building and deploying &quot;<a href="https://merge-my-feature...&quot;">https://merge-my-feature...&quot;</a> preview</td></tr><tr><td>00:10</td><td>GitHub Actions trigger CircleCI pipeline with <code>TEST_URL=https://merge-my-feature...</code></td></tr><tr><td>00:10</td><td>Job <code>wait-for-deploy</code> starts pinging &quot;<a href="https://merge-my-feature...&quot;">https://merge-my-feature...&quot;</a> url.</td></tr><tr><td>00:10</td><td>Job <code>wait-for-deploy</code> finishes almost immediately because the url responds. The preview still has commit A code.</td></tr><tr><td>00:10</td><td>Job <code>Cypress E2E tests</code> runs tests against the &quot;<a href="https://merge-my-feature...&quot;">https://merge-my-feature...&quot;</a> url</td></tr><tr><td>00:16</td><td>Vercel deploys &quot;<a href="https://merge-my-feature...&quot;">https://merge-my-feature...&quot;</a> url, but nothing tests the deployed commit B code</td></tr></tbody></table><p>If we trigger the CircleCI pipeline <em>immediately</em> from GitHub Actions, then the second commit will trigger running the tests. The tests will start quickly because the job <code>wait-for-deploy</code> hits the already deployed <em>branch</em> preview URL, the tests pass. Then the Vercel preview happens - and it never gets tested!</p><p>Thus we need something better - we need to trigger the CircleCI pipeline <em>after</em> Vercel successfully deploys.</p><h2><span id="the-deployment-event">The deployment event</span></h2><p>Luckily, Vercel GitHub integration delivers a <code>deployment_status</code> event as I described in <a href="/blog/develop-preview-test/" title="Test the Preview Vercel Deploys">Test the Preview Vercel Deploys</a>. Let&#39;s first look at the events delivered by Vercel to GitHub Actions.</p><figure class="highlight yml"><figcaption><span>info.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print info from deployment events sent by Vercel</span></span><br><span class="line"><span class="comment"># https://glebbahmutov.com/blog/develop-preview-test/</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">info</span></span><br><span class="line"><span class="comment"># https://docs.github.com/en/actions/reference/events-that-trigger-workflows</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">deployment</span>, <span class="string">deployment_status</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">show-event:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Dump</span> <span class="string">GitHub</span> <span class="string">context</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_CONTEXT:</span> <span class="string">$&#123;&#123;</span> <span class="string">toJson(github)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;$GITHUB_CONTEXT&quot;</span></span><br></pre></td></tr></table></figure><p>The <code>deployment_status</code> event is delivered twice: first with the status <code>pending</code>, then with the status <code>success</code>. The event also has the unique URL of that deploy - because <a href="/blog/immutable-deploys-with-data-and-testing/" title="Vercel does immutable deploys">Vercel does immutable deploys</a>.</p><p><img src="../images/separate-circleci/deployment.png" alt="The deployment_status event has immutable deployment URL"></p><p>Thus we can trigger the CircleCI pipelines using a unique URL after the deployment has finished, see <a href="https://github.com/bahmutov/todomvc-no-tests-vercel/blob/main/.github/workflows/deploy.yml">deploy.yml</a></p><figure class="highlight yml"><figcaption><span>.github/workflows/deploy.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">deployment_status</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">trigger-tests-after-deploy:</span></span><br><span class="line">    <span class="comment"># only runs this job on successful deploy</span></span><br><span class="line">    <span class="comment"># https://glebbahmutov.com/blog/develop-preview-test/</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">github.event.deployment_status.state</span> <span class="string">==</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># trigger CircleCI pipeline to run E2E tests</span></span><br><span class="line">      <span class="comment"># https://circleci.com/docs/api/v2/#operation/triggerPipeline</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Trigger</span> <span class="string">CircleCI</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;Vercel unique deployment URL is $<span class="template-variable">&#123;&#123; github.event.deployment_status.target_url &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment"># --silent option to not print request progress</span></span><br><span class="line">          <span class="string">curl</span> <span class="string">-u</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CIRCLE_CI_API_TOKEN</span> <span class="string">&#125;&#125;:</span> <span class="string">\</span></span><br><span class="line">            <span class="string">--silent</span> <span class="string">\</span></span><br><span class="line">            <span class="string">--data</span> <span class="string">parameters[TEST_BRANCH]=$&#123;GITHUB_HEAD_REF&#125;</span> <span class="string">\</span></span><br><span class="line">            <span class="string">--data</span> <span class="string">parameters[TEST_URL]=$&#123;&#123;</span> <span class="string">github.event.deployment_status.target_url</span> <span class="string">&#125;&#125;</span> <span class="string">\</span></span><br><span class="line">            <span class="string">https://circleci.com/api/v2/project/gh/bahmutov/todomvc-tests-circleci/pipeline</span></span><br></pre></td></tr></table></figure><p>The above GitHub Action workflow triggers the CircleCI pipeline with unique URL which you can see in the test screenshot.</p><p><img src="../images/separate-circleci/unique.png" alt="The deployment preview URL"></p><h2><span id="merging-the-pull-requests">Merging the pull requests</span></h2><p>When we modify the code and the tests in two repos, we have two open pull requests. Which one do we merge first? It is a little bit of a chicken and an egg problem.</p><ol><li>We cannot merge the application pull request first - if it runs the tests before we merge the pull request in the test repo, the tests will fail, since they are still original tests.</li><li>We cannot merge the test pull request first, since the application code is still the original source, and not what the tests expect to see.</li></ol><p>We can try to time it and merge the code first, then while it is building merge the test pull request, hoping it would hit the the deployed updated application. But I would suggest a simpler approach.</p><ol><li>Merge the tests first, but skip the build using the <code>[skip ci]</code> text in the commit subject, see <a href="https://circleci.com/docs/2.0/skip-build/">CircleCI docs for example</a>. In the screenshot below I am squashing 3 commits in the test repo into a single commit that should not trigger the tests.</li></ol><p><img src="../images/separate-circleci/skip-message.png" alt="Merging the test pull request first while skipping the CI build"></p><p>The CircleCI shows the test commit was noted, but did not trigger the workflow.</p><p><img src="../images/separate-circleci/skip-workflow.png" alt="CircleCI did not build the commit with the message &quot;[skip ci]&quot;"></p><ol start="2"><li>Merge the code change pull request. It will trigger the tests that are now match the code.</li></ol><p>Problem solved.</p><h2><span id="the-remaining-problem">The remaining problem</span></h2><p>Our implementation is <em>almost</em> perfect. The tests are triggered correctly, the deployment URLs are unique - but we cannot pass the branch to the CircleCI pipeline! The <code>TEST_BRANCH</code> parameter is empty because the <code>deployment_status</code> event has no &quot;memory&quot; of the branch that has triggered the deployment, and the GitHub environment has no <code>GITHUB_HEAD_REF</code> set - because GH does not &quot;know&quot; which branch you are testing or deploying.</p><p>I wish Vercel included this information in the event details, since their system knows which branch has been deployed. We could use this information to checkout or trigger the right branch in the test repository. Then we could modify the application in branch <code>feature-X</code> while updating the tests in the separate repo using the same branch name <code>feature-X</code>. When the preview URL has been deployed we would run the tests from branch <code>feature-X</code>.</p><h3><span id="workaround">Workaround</span></h3><p>The Vercel deployment event has the commit SHA. If you dump the GitHub event object, check the <code>sha</code> property:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;token&quot;: &quot;***&quot;,</span><br><span class="line">  &quot;job&quot;: &quot;show-event&quot;,</span><br><span class="line">  &quot;ref&quot;: &quot;&quot;,</span><br><span class="line">  &quot;sha&quot;: &quot;7202eca208589fabacb2f35ac5d8dd46fcb8a12f&quot;,</span><br><span class="line">  &quot;repository&quot;: &quot;bahmutov/todomvc-no-tests-vercel&quot;,</span><br><span class="line">  &quot;repository_owner&quot;: &quot;bahmutov&quot;,</span><br><span class="line">  &quot;repositoryUrl&quot;: &quot;git://github.com/bahmutov/todomvc-no-tests-vercel.git&quot;,</span><br><span class="line">  &quot;run_id&quot;: &quot;1004603109&quot;,</span><br><span class="line">  &quot;run_number&quot;: &quot;24&quot;,</span><br><span class="line">  &quot;retention_days&quot;: &quot;90&quot;,</span><br><span class="line">  &quot;actor&quot;: &quot;vercel[bot]&quot;,</span><br><span class="line">  &quot;workflow&quot;: &quot;info&quot;,</span><br><span class="line">  &quot;head_ref&quot;: &quot;&quot;,</span><br><span class="line">  &quot;base_ref&quot;: &quot;&quot;,</span><br><span class="line">  &quot;event_name&quot;: &quot;deployment_status&quot;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can check out the full repository and find the branch name the commit belongs to (assuming the pull request commit really belongs to one branch)</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;Deployed commit $&#123;&#123; github.sha &#125;&#125;&quot;</span><br><span class="line">export BRANCH_NAME=$(git show -s --pretty=%D HEAD | tr -s &#x27;,&#x27; &#x27;\n&#x27; | sed &#x27;s/^ //&#x27; | grep -e &#x27;origin/&#x27; | head -1 | sed &#x27;s/\origin\///g&#x27;)</span><br><span class="line">echo &quot;Deployed branch $&#123;BRANCH_NAME&#125;&quot;</span><br></pre></td></tr></table></figure><h2><span id="update-1-record-tests-on-cypress-dashboard">Update 1: record tests on Cypress Dashboard</span></h2><p><a href="https://on.cypress.io/dashboard-introduction">Cypress Dashboard</a> is very useful for showing the results of tests and quickly diagnosing the failed ones. I have set up the test recording, you can see the run results <a href="https://dashboard.cypress.io/projects/15cjtg/runs">here</a>. The CircleCI <code>cypress/run</code> job gets a few extra parameters:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">E2E</span> <span class="string">tests</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line">    <span class="comment"># record test results on Cypress Dashboard</span></span><br><span class="line">    <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">e2e</span></span><br><span class="line">    <span class="comment"># tag the recording with the branch name to make it easier to find</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">&#x27;&lt;&lt; pipeline.parameters.TEST_BRANCH &gt;&gt;&#x27;</span></span><br></pre></td></tr></table></figure><p>We can include the results Markdown badge in both the tests repo&#39;s <a href="https://github.com/bahmutov/todomvc-tests-circleci#readme">README</a>, and in in the TodoMVC application&#39;s <a href="https://github.com/bahmutov/todomvc-no-tests-vercel#readme">README file</a>.</p><p><img src="../images/separate-circleci/recorded.png" alt="Recorded test runs"></p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/how-to-keep-cypress-tests-in-another-repo/" title="How to Keep Cypress Tests in Another Repo While Using GitHub Actions">How to Keep Cypress Tests in Another Repo While Using GitHub Actions</a></li><li><a href="/blog/tested-ecommerce/" title="Deploy E-Commerce Site to Netlify and Test Using GitHub Actions">Deploy E-Commerce Site to Netlify and Test Using GitHub Actions</a></li><li>my other <a href="../tags/vercel">Vercel blog posts</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine you are developing a web application and deploying it to preview environments using &lt;a href=&quot;https://vercel.com/&quot;&gt;Vercel&lt;/a&gt;. How
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="circle" scheme="https://glebbahmutov.com/blog/tags/circle/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
      <category term="vercel" scheme="https://glebbahmutov.com/blog/tags/vercel/"/>
    
  </entry>
  
  <entry>
    <title>Deal with Second Tab in Cypress</title>
    <link href="https://glebbahmutov.com/blog/cypress-second-tab/"/>
    <id>https://glebbahmutov.com/blog/cypress-second-tab/</id>
    <published>2021-07-01T04:00:00.000Z</published>
    <updated>2021-07-01T13:05:09.429Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes your application wants to open a new tab or a new browser window. Cypress injects its spec into the first window, thus it &quot;loses&quot; your application and cannot control the second tab. How to handle this case depends on how the application opens the second tab. Here are links to the solutions:</p><ol><li>Anchor link with target</li></ol><p>If your application contains a link element like <code>&lt;a href=&quot;...&quot; target=&quot;_blank&quot;&gt;</code>, see <a href="../cypress-tips-and-tricks/#deal-with-target_blank">Deal with <code>target=_blank</code></a>. The test can remove the <code>target</code> attribute or change it to <code>_self</code> before clicking.</p><ol start="2"><li><code>window.open</code></li></ol><p>If the application calls <code>window.open(url)</code> which opens 2nd tab, the test can stab the <code>window.open</code> method. See <a href="../cypress-tips-and-tricks/#deal-with-windowopen">Deal with <code>window.open</code></a> answer.</p><ol start="3"><li><code>window.location.replace</code></li></ol><p>Perhaps the toughest case to deal with is when the application uses <code>location.replace</code> to load new URL. While this call does not open the 2nd tab, the application might navigate to another domain, where Cypress loses it. This browser API method cannot be stubbed directly, see <a href="../cypress-tips-and-tricks/#deal-with-windowlocationreplace">Deal with <code>window.location.replace</code></a> on how to handle this scenario from Cypress test.</p><ol start="4"><li>Running two Cypress instances</li></ol><p>Sometimes your might want to run 2 Cypress instances to test a chat web application for example. In general, I think this is NOT necessary. Instead you can simulate the second user separately, while testing the page interface from Cypress. See my blog posts on this topic:</p><ul><li><a href="/blog/test-socketio-chat-using-cypress/" title="Test a Socket.io Chat App using Cypress">Test a Socket.io Chat App using Cypress</a></li><li><a href="/blog/run-two-cypress-runners/" title="Run Two Cypress Test Runners At The Same Time">Run Two Cypress Test Runners At The Same Time</a></li><li><a href="/blog/sync-two-cypress-runners/" title="Sync Two Cypress Runners via Checkpoints">Sync Two Cypress Runners via Checkpoints</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sometimes your application wants to open a new tab or a new browser window. Cypress injects its spec into the first window, thus it &amp;quot
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>How to Keep Cypress Tests in Another Repo While Using GitHub Actions</title>
    <link href="https://glebbahmutov.com/blog/how-to-keep-cypress-tests-in-another-repo/"/>
    <id>https://glebbahmutov.com/blog/how-to-keep-cypress-tests-in-another-repo/</id>
    <published>2021-06-29T04:00:00.000Z</published>
    <updated>2021-07-03T12:46:46.484Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine you want to start writing end-to-end tests for your web application, but it is hard to convince everyone on the team to include Cypress in the repository. Maybe you want to show the tests in action first. Maybe you want to solve technical blockers. You have decided to keep the E2E tests in a separate repository, at least at first. How would it work?</p><blockquote class="pullquote"><p>🎁 You can find the example application in the repository <a href="https://github.com/bahmutov/todomvc-no-tests">bahmutov/todomvc-no-tests</a> and its end-to-end tests in the repository <a href="https://github.com/bahmutov/todomvc-tests">bahmutov/todomvc-tests</a>.</p></blockquote><!-- toc --><ul><li><a href="#the-app">The app</a></li><li><a href="#the-tests">The tests</a></li><li><a href="#netlify-setup">Netlify setup</a></li><li><a href="#how-to-work-in-two-repos">How to work in two repos</a></li><li><a href="#manual-trigger">Manual trigger</a></li><li><a href="#status-checks">Status checks</a></li><li><a href="#related">Related</a></li></ul><!-- tocstop --><h2><span id="the-app">The app</span></h2><p>Let&#39;s say we are writing an app and every pull request is automatically deployed to a preview environment. In this blog post, my application from repo <a href="https://github.com/bahmutov/todomvc-no-tests">bahmutov/todomvc-no-tests</a> is deployed to Netlify <a href="https://todomvc-no-tests.netlify.app/">https://todomvc-no-tests.netlify.app/</a> after build. Every pull request is also deployed to its own preview environment.</p><p><img src="../images/another-repo/todo.png" alt="The deployed Todo application"></p><h2><span id="the-tests">The tests</span></h2><p>The tests live in another repo <a href="https://github.com/bahmutov/todomvc-tests">bahmutov/todomvc-tests</a> and by default assume the application is running locally at port 3000.</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;http://localhost:3000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;fixturesFolder&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;supportFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;pluginsFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;video&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can start with a single sanity test that goes through the main features of the application.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;works&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// application starts with 3 todos</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;input[type=text]&#x27;</span>).type(<span class="string">&#x27;Add tests!&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">    .eq(<span class="number">3</span>)</span><br><span class="line">    .should(<span class="string">&#x27;include.text&#x27;</span>, <span class="string">&#x27;Add tests!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">&#x27;.todo&#x27;</span>, <span class="string">&#x27;Learn about React&#x27;</span>)</span><br><span class="line">    .contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Complete&#x27;</span>)</span><br><span class="line">    .click()</span><br><span class="line">  cy.contains(<span class="string">&#x27;.todo&#x27;</span>, <span class="string">&#x27;Learn about React&#x27;</span>).find(<span class="string">&#x27;[data-cy=remove]&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;.todo&#x27;</span>, <span class="string">&#x27;Learn about React&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes</p><p><img src="../images/another-repo/todo.gif" alt="Testing the Todo application"></p><h2><span id="netlify-setup">Netlify setup</span></h2><p>The application itself is built and deployed to Netlify. I will use <a href="/blog/trying-github-actions/" title="GitHub Actions">GitHub Actions</a> to run E2E tests after each deploy. In the <code>todomvc-tests</code> repository I will configure a GitHub workflow that only runs on the workflow dispatch event.</p><p>To trigger the GitHub workflow after Netlify has finished the deploy, I will use my plugin <a href="https://github.com/bahmutov/netlify-plugin-github-dispatch">netlify-plugin-github-dispatch</a>. I will need to create a <a href="https://github.com/settings/tokens/new">personal GitHub token</a> with &quot;repo&quot; permission.</p><p><img src="../images/another-repo/new-token.png" alt="Creating a new personal GitHub token"></p><p>Then I set this token as an environment variable during the &quot;build&quot; step on Netlify.</p><p><img src="../images/another-repo/set-token.png" alt="Set the created GitHub token as Netlify environment variable in the Build step"></p><p><strong>Tip:</strong> make sure to keep Netlify to NOT allow the forked pull requests to run without review (which is the default), otherwise someone might steal your personal GitHub token.</p><p>Now create a new file <a href="https://github.com/bahmutov/todomvc-no-tests/blob/main/netlify.toml">netlify.toml</a> in the application&#39;s repository to invoke the GitHub workflow after the successful deploy.</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/bahmutov/netlify-plugin-github-dispatch</span></span><br><span class="line"><span class="section">[[plugins]]</span></span><br><span class="line">  <span class="attr">package</span> = <span class="string">&quot;netlify-plugin-github-dispatch&quot;</span></span><br><span class="line">  <span class="section">[plugins.inputs]</span></span><br><span class="line">    <span class="attr">owner</span> = <span class="string">&quot;bahmutov&quot;</span> <span class="comment"># use the target organization name</span></span><br><span class="line">    <span class="attr">repo</span> = <span class="string">&quot;todomvc-tests&quot;</span> <span class="comment"># use the target repo name</span></span><br><span class="line">    <span class="attr">workflow</span> = <span class="string">&quot;.github/workflows/e2e.yml&quot;</span> <span class="comment"># use workflow relative path</span></span><br></pre></td></tr></table></figure><p>We need to install the plugin <a href="https://github.com/bahmutov/netlify-plugin-github-dispatch">netlify-plugin-github-dispatch</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -D netlify-plugin-github-dispatch</span></span><br><span class="line">+ netlify-plugin-github-dispatch@1.0.3</span><br></pre></td></tr></table></figure><p>When we first push the above code, the Netlify reports a plugin error after successful deployment - we have not created the <code>e2e.yml</code> yet!</p><p><img src="../images/another-repo/plugin-error.png" alt="The Netlify plugin needs the repository to have the workflow ready"></p><p>Let&#39;s create our workflow - we need to check out code and run Cypress tests. We will NOT run the tests by default, only when someone dispatches the <a href="https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/">workflow_dispatch event</a>. <strong>Note:</strong> this event can be triggered via API from Netlify or manually from the GitHub web UI.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .github/workflows/e2e.yml</span></span><br><span class="line"><span class="comment"># test the deployed Netlify site</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">e2e</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">siteName:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Netlify</span> <span class="string">Site</span> <span class="string">Name</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">deployPrimeUrl:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Deployed</span> <span class="string">URL</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">default:</span> <span class="string">&#x27;https://todomvc-no-tests.netlify.app/&#x27;</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># example job showing the Netlify information</span></span><br><span class="line">  <span class="attr">show-event:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;Testing url $<span class="template-variable">&#123;&#123; github.event.inputs.deployPrimeUrl &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;Site name $<span class="template-variable">&#123;&#123; github.event.inputs.siteName &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tests:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="comment"># Installs and caches dependencies, runs all Cypress tests</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># we want to test the URL passed by Netlify</span></span><br><span class="line">          <span class="attr">config:</span> <span class="string">baseUrl=$&#123;&#123;</span> <span class="string">github.event.inputs.deployPrimeUrl</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># store video and screenshots on Cypress Dashboard</span></span><br><span class="line">          <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CYPRESS_RECORD_KEY</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>The above workflow is using <a href="https://github.com/cypress-io/github-action">cypress-io/github-action</a> to abstract installing dependencies and running Cypress tests. We point Cypress at the deployed URL using <code>baseUrl=$&#123;&#123; github.event.inputs.deployPrimeUrl &#125;&#125;</code> syntax.</p><p><strong>Tip:</strong> we could store the captured test run videos as GitHub test artifacts, or record the test results on <a href="https://www.cypress.io/dashboard">Cypress Dashboard</a>. I prefer the Dashboard since it provides a lot more information and is easier to use.</p><h2><span id="how-to-work-in-two-repos">How to work in two repos</span></h2><p>Now that we have the Netlify deploys and GitHub workflows configured, let&#39;s see how we can work day to day. I assume you are using feature branches for deployment. Then you open a pull request to merge the new feature to the main branch. If all tests pass, and if the reviewers agree, the feature is merged into the main branch. Here is how to use E2E tests together with the feature work.</p><ol><li>Pull both repos to the local machine.</li><li>Open a branch in the application repo and a branch with the same name in the tests repo.</li></ol><p>For example, let&#39;s improve the selectors in our application so our tests can find DOM elements following the Cypress&#39; <a href="https://on.cypress.io/best-practices#Selecting-Elements">best practices</a>. I will name the branches <code>better-selectors</code>.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">~/git/todomvc-tests on main</span><br><span class="line">$ git checkout -b better-selectors</span><br><span class="line">Switched to a new branch &#x27;better-selectors&#x27;</span><br><span class="line"></span><br><span class="line">~/git/todomvc-no-tests on main</span><br><span class="line">$ git checkout -b better-selectors</span><br><span class="line">Switched to a new branch &#x27;better-selectors&#x27;</span><br></pre></td></tr></table></figure><p>I will update the application and the spec while running Cypress to make sure the tests pass locally. The test has changed some of the selectors</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- cy.get(&#x27;input[type=text]&#x27;).type(&#x27;Add tests!&#123;enter&#125;&#x27;)</span></span><br><span class="line"><span class="addition">+ cy.get(&#x27;[data-cy=new-todo]&#x27;).type(&#x27;Add tests!&#123;enter&#125;&#x27;)</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Commit and push the tests <em>first</em>. You can even open a pull request in the tests repository. Remember, these tests do not run on commit, and they do not run on pull request. The tests must be triggered in order to run.</li></ol><p><img src="../images/another-repo/tests-pr.png" alt="Pushed the &quot;better-selectors&quot; branch to the tests repo"></p><ol start="4"><li>Commit and push the application branch <code>better-selectors</code>. Because this is not the main repository branch, Netlify does nothing.</li><li>Open a new pull request and Netlify will trigger the preview deploy.</li></ol><p><img src="../images/another-repo/pr.png" alt="Netlify deploys the preview site for the pull request from the &quot;better-selectors&quot; branch"></p><p>If you look at the Netlify deploy logs, the plugin <a href="https://github.com/bahmutov/netlify-plugin-github-dispatch">netlify-plugin-github-dispatch</a> triggers the workflow E2E using <code>ref: &lt;branch name&gt;</code>. Thus GitHub runs the workflow in the same branch name as the first repo branch.</p><p><img src="../images/another-repo/ref.png" alt="The dispatch triggers workflow using &quot;better-selectors&quot; branch"></p><p><strong>Note:</strong> if there is no branch with the same name, the dispatch will fail.</p><ol start="6"><li>The GitHub Actions tab shows the triggered workflow.</li></ol><p><img src="../images/another-repo/actions.png" alt="The triggered E2E workflow"></p><p>We can drill into the E2E job to see Cypress output.</p><p><img src="../images/another-repo/run.png" alt="The Cypress tests finish successfully"></p><p>We can go to the shown Cypress Dashboard URL to watch the video of the run or see the captured screenshot. Notice the updated <code>data-cy</code> selectors in the Command Log and the preview URL.</p><p><img src="../images/another-repo/cypress-screenshot.png" alt="The Cypress test screenshot"></p><p><strong>Tip:</strong> we can post the status check from the tests job back to the app repo, see the section at the end of this blog post.</p><p>If the tests are passing or not, I would put the link to the tests PR in the description of the application PR to let the reviewers see the updated tests together with the application code change.</p><p><img src="../images/another-repo/link-to-tests.png" alt="Put the link to the tests PR in the body of the application PR"></p><p>Now that the tests are passing, let&#39;s merge the tests and the code change.</p><ol><li>First merge the updated tests. Remember - the merged tests are not going to run, unless the workflow is triggered.</li><li>Merge the updated application. The deploy to the main branch will trigger the tests already merged to the main branch (I assume both repos use a matching main branch name).</li></ol><h2><span id="manual-trigger">Manual trigger</span></h2><p>If for some reason you want to re-run the tests, you can trigger a re-deploy on Netlify. Or you can trigger the workflow manually using the GitHub UI. Go to the Actions tab, pick the E2E workflow and click the &quot;Run workflow&quot; button. Change the inputs to what you desire and start the workflow.</p><p><img src="../images/another-repo/manual-trigger.png" alt="Manually trigger the E2E workflow"></p><h2><span id="status-checks">Status checks</span></h2><p>We have two separate repositories, thus we need to manage status checks ourselves. The application repo as soon as there is a pull request can post a pending status check on the merge.</p><figure class="highlight yml"><figcaption><span>.github/workflows/pr.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in repo bahmutov/todomvc-no-tests</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">pull</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">pull_request</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">set-status:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># https://github.com/marketplace/actions/github-status-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">set</span> <span class="string">pending</span> <span class="string">status</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">Sibz/github-status-action@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">authToken:</span> <span class="string">$&#123;&#123;secrets.GITHUB_TOKEN&#125;&#125;</span></span><br><span class="line">          <span class="attr">context:</span> <span class="string">&#x27;E2E tests&#x27;</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&#x27;Tests pending deploy&#x27;</span></span><br><span class="line">          <span class="comment"># success, error, failure, or pending</span></span><br><span class="line">          <span class="attr">state:</span> <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">          <span class="attr">sha:</span> <span class="string">$&#123;&#123;github.event.pull_request.head.sha&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>This check will be &quot;pending&quot; thus the reviewer knows that the tests have not finished.</p><p>In the tests repository we can use similar code to set the status check <em>in the original repo</em>. We will get the merge commit SHA from the optional workflow input parameter <code>commit</code> - this parameter will be set by the <code>netlify-plugin-github-dispatch</code> code when it calls the workflow. Here is the entire workflow file from the test repo:</p><figure class="highlight yml"><figcaption><span>.github/workflows/e2e.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># todomvc-tests repo</span></span><br><span class="line"><span class="comment"># test the deployed Netlify site</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">e2e</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">siteName:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Netlify</span> <span class="string">Site</span> <span class="string">Name</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">deployPrimeUrl:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Deployed</span> <span class="string">URL</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">default:</span> <span class="string">&#x27;https://todomvc-no-tests.netlify.app/&#x27;</span></span><br><span class="line">      <span class="attr">commit:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Original</span> <span class="string">repo</span> <span class="string">commit</span> <span class="string">SHA</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># example job showing the Netlify information</span></span><br><span class="line">  <span class="attr">show-event:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;Testing url $<span class="template-variable">&#123;&#123; github.event.inputs.deployPrimeUrl &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;Site name $<span class="template-variable">&#123;&#123; github.event.inputs.siteName &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;App commit SHA $<span class="template-variable">&#123;&#123; github.event.inputs.commit &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tests:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="comment"># Installs and caches dependencies, runs all Cypress tests</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="comment"># let&#x27;s give this action an ID so we can refer</span></span><br><span class="line">        <span class="comment"># to its output values later</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">cypress</span></span><br><span class="line">        <span class="comment"># Continue the build in case of an error, as we need to set the</span></span><br><span class="line">        <span class="comment"># commit status in the next step, both in case of success and failure</span></span><br><span class="line">        <span class="attr">continue-on-error:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># we want to test the URL passed by Netlify</span></span><br><span class="line">          <span class="attr">config:</span> <span class="string">baseUrl=$&#123;&#123;</span> <span class="string">github.event.inputs.deployPrimeUrl</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># store video and screenshots on Cypress Dashboard</span></span><br><span class="line">          <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CYPRESS_RECORD_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># after e2e tests finish, set the status back in the original repo</span></span><br><span class="line">      <span class="comment"># https://github.com/marketplace/actions/github-status-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">commit</span> <span class="string">status</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.inputs.commit</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">Sibz/github-status-action@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># create personal GitHub token to be able to</span></span><br><span class="line">          <span class="comment"># set status in other repositories</span></span><br><span class="line">          <span class="comment"># https://github.com/settings/tokens/new</span></span><br><span class="line">          <span class="attr">authToken:</span> <span class="string">$&#123;&#123;secrets.PERSONAL_GITHUB_TOKEN&#125;&#125;</span></span><br><span class="line">          <span class="attr">context:</span> <span class="string">&#x27;E2E tests&#x27;</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&#x27;Cypress ran the tests&#x27;</span></span><br><span class="line">          <span class="comment"># state can be success, error, failure, or pending</span></span><br><span class="line">          <span class="comment"># let&#x27;s grab it from the Cypress step outcomes</span></span><br><span class="line">          <span class="comment"># https://github.com/cypress-io/github-action#outputs</span></span><br><span class="line">          <span class="attr">state:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.cypress.outcome</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">owner:</span> <span class="string">&#x27;bahmutov&#x27;</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">&#x27;todomvc-no-tests&#x27;</span></span><br><span class="line">          <span class="attr">sha:</span> <span class="string">$&#123;&#123;github.event.inputs.commit&#125;&#125;</span></span><br><span class="line">          <span class="attr">target_url:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.cypress.outputs.dashboardUrl</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>We need to use our personal GitHub token to set the status in the first repository. The status check step runs every time. Here is how the pull request in the first repo looks when the Cypress tests have failed.</p><p><img src="../images/another-repo/status-check-failed.png" alt="Cypress tests failed status check"></p><p>The &quot;details&quot; link opens the Cypress Dashboard URL.</p><h2><span id="related">Related</span></h2><ul><li><a href="/blog/how-to-keep-cypress-tests-in-another-repo-with-circleci/" title="How to Keep Cypress Tests in Another Repo While Using CircleCI">How to Keep Cypress Tests in Another Repo While Using CircleCI</a></li><li><a href="/blog/tested-ecommerce/" title="Deploy E-Commerce Site to Netlify and Test Using GitHub Actions">Deploy E-Commerce Site to Netlify and Test Using GitHub Actions</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine you want to start writing end-to-end tests for your web application, but it is hard to convince everyone on the team to include C
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
      <category term="netlify" scheme="https://glebbahmutov.com/blog/tags/netlify/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Cypress Real Events Plugin</title>
    <link href="https://glebbahmutov.com/blog/cypress-real-events/"/>
    <id>https://glebbahmutov.com/blog/cypress-real-events/</id>
    <published>2021-06-28T04:00:00.000Z</published>
    <updated>2021-06-28T11:04:55.951Z</updated>
    
    <content type="html"><![CDATA[<p>Recently a Cypress user asked in the online chat why an autocomplete popup does not appear when entering the search text. Previously I have written about testing <a href="https://www.cypress.io/blog/2020/03/20/working-with-select-elements-and-select2-widgets-in-cypress/">autocomplete widgets</a> using Cypress, so I have decided to investigate. Because the user has produced a repo with the test code, I could take a look. The test looked correct to me</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;gm-search&#x27;</span>)</span><br><span class="line">  .shadow()</span><br><span class="line">  .find(<span class="string">&#x27;div#search_dropdown&#x27;</span>)</span><br><span class="line">  .find(<span class="string">&#x27;gm-text-field#searchfield&#x27;</span>)</span><br><span class="line">  .focus()</span><br><span class="line">  .trigger(<span class="string">&#x27;dblclick&#x27;</span>)</span><br><span class="line">  .find(<span class="string">&#x27;.vaadin-text-field-container&#x27;</span>)</span><br><span class="line">  .find(<span class="string">&#x27;#gm-text-field-input-6&#x27;</span>).focused()</span><br><span class="line">  .find(<span class="string">&#x27;input[placeholder=\&#x27;Typ een adres of plaats\&#x27;]&#x27;</span>).trigger(<span class="string">&#x27;focus&#x27;</span>)</span><br><span class="line">  .type(<span class="string">&#x27;Haarzuilens&#x27;</span>, &#123;<span class="attr">delay</span>: <span class="number">100</span>&#125;)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> I would improve this test by adding assertions. Right now the test only has commands, thus it could run away from the application. See my guide to <a href="https://on.cypress.io/retry-ability">Cypress retry-ability</a> for details.</p><p>The failing test is recorded below. Notice the Shadow DOM command, that might be relevant here.</p><p><img src="../images/autocomplete/type-does-not-work.gif" alt="The cy.type command does not seem to work"></p><p>I have noticed that the autocomplete does work when typing into the same box myself.</p><p><img src="../images/autocomplete/human-type.gif" alt="Typing does work"></p><p>Typically, a widget like this could take a little longer to bootstrap. Thus I tried adding a pause before typing.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.find(<span class="string">&#x27;input[placeholder=\&#x27;Typ een adres of plaats\&#x27;]&#x27;</span>).trigger(<span class="string">&#x27;focus&#x27;</span>)</span><br><span class="line">.wait(<span class="number">5000</span>)</span><br><span class="line">.type(<span class="string">&#x27;Haarzuilens&#x27;</span>, &#123;<span class="attr">delay</span>: <span class="number">100</span>&#125;)</span><br></pre></td></tr></table></figure><p>It did not help. Then I increased the key event delay from 100ms to one second. Still nothing. Let&#39;s try something else. Cypress <a href="https://on.cypress.io/type">cy.type</a> command sends synthetic JavaScript events to the input element. You can see the events by clicking on the TYPE command in the Command Log. The events show up in the DevTools console, but some of the fields are null. That is suspicious.</p><p><img src="../images/autocomplete/null.png" alt="Inspecting the list of keyboards events Cypress sent to the element"></p><p>Hmm, maybe synthetic keyboard events do not work correctly in this case, and it could possibly be related to the Shadow DOM page structure. Let&#39;s see if sending <em>real</em> browser events works better. When Cypress controls the browser, it opens a Chrome Debugger Protocol connection to perform some privileged operations. I have described this in my blog post <a href="/blog/cypress-vs-other-test-runners/" title="Cypress vs Other Test Runners">Cypress vs Other Test Runners</a>. Thus we can send real browser events when typing using the existing CDP connection, or by opening our own.</p><p>Which is what <a href="https://github.com/dmtrKovalenko/cypress-real-events">cypress-real-events</a> from my former co-worker at Cypress <a href="https://twitter.com/dmtrKovalenko">Dmitriy Kovalenko</a> does very nicely.</p><p><strong>Note:</strong> Losing Dmitriy is Cypress&#39; biggest mistake in my opinion. Not only he has helped me solve the <a href="/blog/my-vision-for-component-tests/" title="component testing">component testing</a> technical challenges, he absolutely rocks creating open source libraries that just work, like <a href="https://github.com/dmtrKovalenko/odiff">odiff</a> for image comparison. You know Percy.io/Applitools/Happo and other visual testing services? Dmitriy could build a company like that during his lunch break, I think.</p><p>After installing the library and importing it from the Cypress support file, I switched the test.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- .type(&#x27;Haarzuilens&#x27;, &#123;delay: 100&#125;)</span><br><span class="line">+ .realType(&#x27;Haarzuilens&#x27;)</span><br></pre></td></tr></table></figure><p>Boom, the application is working!</p><p><img src="../images/autocomplete/real-type.gif" alt="Real type is working"></p><p>Glad the library <code>cypress-real-events</code> exists. In addition to <code>cy.realType</code>, it has <code>cy.realClick</code>, <code>cy.realHover</code>, <code>cy.realPress</code>, <code>cy.realTouch</code>, <code>cy.realSwipe</code>, <code>cy.realMouseDown</code>, and <code>cy.realMouseUp</code>. If you find an app mysteriously refusing to act, try using the real thing. In the future, I am sure Cypress will expose these event mode in its core, while leaving the synthetic events as an option.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently a Cypress user asked in the online chat why an autocomplete popup does not appear when entering the search text. Previously I ha
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Sync Two Cypress Runners via Checkpoints</title>
    <link href="https://glebbahmutov.com/blog/sync-two-cypress-runners/"/>
    <id>https://glebbahmutov.com/blog/sync-two-cypress-runners/</id>
    <published>2021-06-24T04:00:00.000Z</published>
    <updated>2021-06-24T12:58:04.312Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="previous-blog-posts">Previous blog posts</span></h2><p>Start by reading the blog posts <a href="/blog/test-socketio-chat-using-cypress/" title="Test a Socket.io Chat App using Cypress">Test a Socket.io Chat App using Cypress</a> and <a href="/blog/run-two-cypress-runners/" title="Run Two Cypress Test Runners At The Same Time">Run Two Cypress Test Runners At The Same Time</a> that give previous solutions to the problem of testing a real-time Socket.io chat application. Running two Cypress test runners at the same time sounds nice but the tests do NOT wait for each other - instead they &quot;blindly&quot; run through own test specs. In this blog post I will show how to truly control two test runners via common checkpoints.</p><blockquote class="pullquote"><p>🎁 You can find the chat application and the implemented tests in the repo <a href="https://github.com/bahmutov/cypress-socketio-chat">bahmutov/cypress-socketio-chat</a></p></blockquote><h2><span id="starting-two-test-runners">Starting two test runners</span></h2><p>We can start the first test runner, wait a few seconds, then start the second one. The simplest way to delay the second test runner is to launch Cypress through its <a href="https://on.cypress.io/module-api">NPM module API</a>. In our case, we will start the runners by executing the Node script <a href="https://github.com/bahmutov/cypress-socketio-chat/blob/main/cypress/pair/chat.js">chat.js</a> shown below:</p><figure class="highlight js"><figcaption><span>cypress/pair/chat.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cypress = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;starting the first Cypress&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cypress</span><br><span class="line">  .run(&#123;</span><br><span class="line">    configFile: <span class="string">&#x27;cy-first-user.json&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;First Cypress has finished&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// delay starting the second Cypress instance</span></span><br><span class="line"><span class="comment">// to avoid any XVFB race conditions</span></span><br><span class="line">wait(<span class="number">5000</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;starting the second Cypress&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> cypress</span><br><span class="line">    .run(&#123;</span><br><span class="line">      configFile: <span class="string">&#x27;cy-second-user.json&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;Second Cypress has finished&#x27;</span>)</span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> exit with the test code from both runners</span></span><br><span class="line">      process.exit(<span class="number">0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="the-need-for-checkpoints">The need for checkpoints</span></h2><p>The first runner should launch first. Let&#39;s think about the first test runner. It needs to join the chat first, validate that its &quot;joined&quot; message appears, then wait for the second user to join. How can the second test runner, executing its own spec file, know when to start? The two test runners can communicate via checkpoints.</p><figure class="highlight js"><figcaption><span>cypress/pair/first-user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// this test behaves as the first user to join the chat</span></span><br><span class="line">it(<span class="string">&#x27;chats with the second user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">&#x27;First&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> secondName = <span class="string">&#x27;Second&#x27;</span></span><br><span class="line"></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(name)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// make sure the greeting message is shown</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;name&#125;</span> join the chat..`</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  cy.task(<span class="string">&#x27;checkpoint&#x27;</span>, <span class="string">&#x27;first user has joined&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The second test runner visits the page only after the first test runner signals that it has reached the checkpoint &quot;first user has joined&quot; and is waiting to continue.</p><figure class="highlight js"><figcaption><span>cypress/pair/second-user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// this test behaves as the second user to join the chat</span></span><br><span class="line">it(<span class="string">&#x27;chats with the first user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.task(<span class="string">&#x27;waitForCheckpoint&#x27;</span>, <span class="string">&#x27;first user has joined&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">&#x27;Second&#x27;</span></span><br><span class="line">  <span class="comment">// we are chatting with the first user</span></span><br><span class="line">  <span class="keyword">const</span> firstName = <span class="string">&#x27;First&#x27;</span></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(name)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="checkpoint-implementation">Checkpoint implementation</span></h2><p>The checkpoints thus require two tasks &quot;checkpoint&quot; and &quot;waitForCheckpoint&quot;. The two test runners can communicate and set the checkpoints using ... a Socket.io server of their own. We already know how to write a Socket.io server - that&#39;s what the application server launches. We need to create another Socket.io server just for the test runners. We can use the <a href="https://github.com/bahmutov/cypress-socketio-chat/blob/main/cypress/pair/chat.js">chat.js</a> script for this.</p><figure class="highlight js"><figcaption><span>cypress/pair/chat.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cypress = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Socket.io server to let two Cypress runners communicate and wait for &quot;checkpoints&quot;</span></span><br><span class="line"><span class="comment">// https://socket.io/</span></span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>)(<span class="number">9090</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// keep the last checkpoint around</span></span><br><span class="line"><span class="comment">// even if a test runner joins later, it</span></span><br><span class="line"><span class="comment">// should still receive it right away</span></span><br><span class="line"><span class="keyword">let</span> lastCheckpoint</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">&#x27;connection&#x27;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;chat new connection&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (lastCheckpoint) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;sending the last checkpoint &quot;%s&quot;&#x27;</span>, lastCheckpoint)</span><br><span class="line">    socket.emit(<span class="string">&#x27;checkpoint&#x27;</span>, lastCheckpoint)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  socket.on(<span class="string">&#x27;disconnect&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;disconnected&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  socket.on(<span class="string">&#x27;checkpoint&#x27;</span>, <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;chat checkpoint: &quot;%s&quot;&#x27;</span>, name)</span><br><span class="line">    lastCheckpoint = name</span><br><span class="line">    io.emit(<span class="string">&#x27;checkpoint&#x27;</span>, name)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;starting the first Cypress&#x27;</span>)</span><br><span class="line"><span class="comment">// rest of Cypress starting code</span></span><br></pre></td></tr></table></figure><p>When the apps run, they communicate via their own Socket.io server running on port 8080, while the test runners broadcast checkpoints via their own Socket.io server running on port 9090.</p><p><img src="../images/checkpoints/chat-server.png" alt="Test runners communicate via their own Socket.io server"></p><p>The plugins file can be shared among the test runners. The plugin file implements the <code>checkpoint</code> and <code>waitForCheckpoint</code> tasks, and acts as a client to the Socket.io server running on port 9090.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Socket.io client to allow Cypress itself</span></span><br><span class="line"><span class="comment">// to communicate with a central &quot;checkpoint&quot; server</span></span><br><span class="line"><span class="comment">// https://socket.io/docs/v4/client-initialization/</span></span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">&#x27;socket.io-client&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// this socket will be used to sync Cypress instance</span></span><br><span class="line">  <span class="comment">// to another Cypress instance. We can create it right away</span></span><br><span class="line">  <span class="keyword">const</span> cySocket = io(<span class="string">&#x27;http://localhost:9090&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// receiving the checkpoint name reached by any test runner</span></span><br><span class="line">  <span class="keyword">let</span> checkpointName</span><br><span class="line">  cySocket.on(<span class="string">&#x27;checkpoint&#x27;</span>, <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;current checkpoint %s&#x27;</span>, name)</span><br><span class="line">    checkpointName = name</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// tasks for syncing multiple Cypress instances together</span></span><br><span class="line">    <span class="function"><span class="title">checkpoint</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;emitting checkpoint name &quot;%s&quot;&#x27;</span>, name)</span><br><span class="line">      cySocket.emit(<span class="string">&#x27;checkpoint&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">waitForCheckpoint</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;waiting for checkpoint &quot;%s&quot;&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> set maximum waiting time</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> i = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;checking, current checkpoint &quot;%s&quot;&#x27;</span>, checkpointName)</span><br><span class="line">          <span class="keyword">if</span> (checkpointName === name) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;reached checkpoint &quot;%s&quot;&#x27;</span>, name)</span><br><span class="line">            <span class="built_in">clearInterval</span>(i)</span><br><span class="line">            resolve(name)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When we run the two test runners, they dance with each other at the expected sequence.</p><p><img src="../images/checkpoints/runners.png" alt="Two test runners have finished the test"></p><p>The terminal output shows the checkpoint communication.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">emitting checkpoint name &quot;first user has joined&quot;</span><br><span class="line">chat checkpoint: &quot;first user has joined&quot;</span><br><span class="line">current checkpoint first user has joined</span><br><span class="line">current checkpoint first user has joined</span><br><span class="line">waiting for checkpoint &quot;second user has joined&quot;</span><br><span class="line">checking, current checkpoint &quot;first user has joined&quot;</span><br><span class="line">checking, current checkpoint &quot;first user has joined&quot;</span><br><span class="line">checking, current checkpoint &quot;first user has joined&quot;</span><br><span class="line">checking, current checkpoint &quot;first user has joined&quot;</span><br><span class="line">checking, current checkpoint &quot;first user has joined&quot;</span><br><span class="line">...</span><br><span class="line">checking, current checkpoint &quot;first user has joined&quot;</span><br><span class="line">reached checkpoint &quot;first user has joined&quot;</span><br><span class="line">emitting checkpoint name &quot;second user has joined&quot;</span><br><span class="line">chat checkpoint: &quot;second user has joined&quot;</span><br><span class="line">current checkpoint second user has joined</span><br><span class="line">current checkpoint second user has joined</span><br><span class="line">checking, current checkpoint &quot;second user has joined&quot;</span><br><span class="line">reached checkpoint &quot;second user has joined&quot;</span><br><span class="line">emitting checkpoint name &quot;second user saw glad to be here&quot;</span><br><span class="line">chat checkpoint: &quot;second user saw glad to be here&quot;</span><br><span class="line">current checkpoint second user saw glad to be here</span><br><span class="line">current checkpoint second user saw glad to be here</span><br><span class="line">waiting for checkpoint &quot;second user saw glad to be here&quot;</span><br><span class="line">checking, current checkpoint &quot;second user saw glad to be here&quot;</span><br><span class="line">reached checkpoint &quot;second user saw glad to be here&quot;</span><br></pre></td></tr></table></figure><p>Beautiful.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;previous-blog-posts&quot;&gt;Previous blog posts&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Start by reading the blog posts &lt;a href=&quot;/blog/test-socketio-chat-using
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Sanity Test for Landing Page</title>
    <link href="https://glebbahmutov.com/blog/sanity-test/"/>
    <id>https://glebbahmutov.com/blog/sanity-test/</id>
    <published>2021-06-23T04:00:00.000Z</published>
    <updated>2021-06-23T18:41:18.682Z</updated>
    
    <content type="html"><![CDATA[<p>If you browser the web the same way I do, you probably keep your browser DevTools console open. I often see errors even on the landing pages. Things like application reference errors and 404 for static resources not loading. In this blog post I will show how to quickly catch these errors via a safe sanity test. One could run these tests after every deploy to make sure the site works.</p><blockquote class="pullquote"><p>🎁 Find the source code and the tests in the repo <a href="https://github.com/bahmutov/cypress-sanity-test-example">bahmutov/cypress-sanity-test-example</a>.</p></blockquote><p>I grabbed an example static landing page from <a href="https://cruip.com/demos/solid/">cruip.com</a> via <a href="https://dev.to/davidepacilio/40-free-html-landing-page-templates-3gfp">40 Free HTML landing page templates</a>. Then I have introduced two errors into the page: a JavaScript reference error, and a 404 by changing a line in <a href="./public/index.html">public/index.html</a></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- &lt;script src=&quot;https://unpkg.com/scrollreveal@4.0.0/dist/scrollreveal.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="addition">+ &lt;script src=&quot;https://unpkg.com/scrollreveal@1.0.0/dist/scrollreveal.min.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/sanity/errors.png" alt="The landing page errors"></p><p>Let&#39;s catch those errors by using tests.</p><h2><span id="tests">Tests</span></h2><p>You can find all tests in <a href="https://github.com/bahmutov/cypress-sanity-test-example/blob/main/cypress/integration/spec.js">cypress/integration/spec.js</a> file. To verify the failing tests, I run the tests using <a href="https://github.com/bahmutov/cypress-expect">cypress-expect</a> utility.</p><h3><span id="catching-errors">Catching errors</span></h3><p>Cypress fails the test by default if it detects application errors or unhandled rejected promises, see <a href="https://docs.cypress.io/">docs.cypress.io</a>. Just visiting the page will catch the reference error.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;catches page exceptions&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/sanity/reference-error.png" alt="Reference error fails the test"></p><h3><span id="ignoring-errors">Ignoring errors</span></h3><p>If you want to ignore an application error, define a listener</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;ignores all page errors&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://on.cypress.io/catalog-of-events#Uncaught-Exceptions</span></span><br><span class="line">  cy.on(<span class="string">&#x27;uncaught:exception&#x27;</span>, <span class="function">() =&gt;</span> <span class="literal">false</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/sanity/ignore-error.png" alt="Ignoring app error"></p><p>You can filter errors and only ignore certain ones.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;ignores specific error&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.on(<span class="string">&#x27;uncaught:exception&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// https://on.cypress.io/catalog-of-events#Uncaught-Exceptions</span></span><br><span class="line">    <span class="keyword">return</span> !e.message.includes(<span class="string">&#x27;ScrollReveal is not defined&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> watch filterig of application errors in this video <a href="https://www.youtube.com/watch?v=DwVezYq4zPM">Filtering app errors in Cypress tests</a>.</p><h3><span id="catching-404">Catching 404</span></h3><p>Cypress can spy on network calls using <a href="https://on.cypress.io/intercept">cy.intercept</a> command. We can see if any of the responses are 404. First, we can spy on the single problematic request.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;detects a single 404&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;**/scrollreveal.min.js&#x27;</span>).as(<span class="string">&#x27;resource&#x27;</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.wait(<span class="string">&#x27;@resource&#x27;</span>).its(<span class="string">&#x27;response.statusCode&#x27;</span>).should(<span class="string">&#x27;be.lt&#x27;</span>, <span class="number">400</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/sanity/404.png" alt="The resource is not found"></p><p>We can also confirm that every resource is successful</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;detects any 404&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://on.cypress.io/intercept</span></span><br><span class="line">  cy.intercept(<span class="string">&#x27;*&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span></span><br><span class="line">    <span class="comment">// assert the response</span></span><br><span class="line">    req.continue(<span class="function">(<span class="params">res</span>) =&gt;</span> expect(res.statusCode, req.url).to.be.lt(<span class="number">400</span>)),</span><br><span class="line">  )</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/sanity/all.png" alt="Checking every resource status code"></p><p>Nice! We can quickly run the above tests against the deployed environment to make sure our users do not suffer from these mistakes.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you browser the web the same way I do, you probably keep your browser DevTools console open. I often see errors even on the landing pa
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Testing React Native Todo Application Using Cypress</title>
    <link href="https://glebbahmutov.com/blog/testing-rn-todo-app/"/>
    <id>https://glebbahmutov.com/blog/testing-rn-todo-app/</id>
    <published>2021-06-21T04:00:00.000Z</published>
    <updated>2021-07-11T12:38:04.627Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="introduction">Introduction</span></h2><p>Recently I have read a nice guide to writing unit and integration tests using Jest for a React Native Todo app. You can read the guide at <a href="https://stassop.medium.com/quick-guide-to-react-native-testing-a5a830223c9e">Quick Guide to React Native Testing</a> and see the source code at <a href="https://github.com/stassop/ReactNativeTodo">stassop/ReactNativeTodo</a>. Recently I have been looking at how to test RN apps using <a href="https://www.cypress.io/">Cypress.io</a> test runner. You can read my explorations in the blog post <a href="/blog/testing-react-native-app-using-cypress/" title="The Complete Guide to Testing React Native App Using Cypress">The Complete Guide to Testing React Native App Using Cypress</a>. In this blog post I will show how to apply the testing principles and write tests quickly and efficiently.</p><p>You can find the complete application and my tests in the repo <a href="https://github.com/bahmutov/ReactNativeTodo">bahmutov/ReactNativeTodo</a>. The tests run in the browser, the typical test is shown below.</p><p><img src="../images/rn-todo/todo-test.gif" alt="ReactNative Todo app tested using Cypress"></p><!-- toc --><ul><li><a href="#jest-tests">Jest tests</a></li><li><a href="#adding-expo">Adding Expo</a></li><li><a href="#adding-cypress">Adding Cypress</a></li><li><a href="#resetting-todos">Resetting todos</a></li><li><a href="#completing-items">Completing items</a></li><li><a href="#filters">Filters</a></li><li><a href="#removing-todos">Removing todos</a></li><li><a href="#selector-refactoring">Selector refactoring</a></li><li><a href="#code-coverage">Code coverage</a></li><li><a href="#testing-server-errors">Testing server errors</a></li><li><a href="#continuous-integration">Continuous integration</a></li><li><a href="#visual-testing">Visual testing</a></li><li><a href="#cypress-dashboard">Cypress dashboard</a></li><li><a href="#accessability-testing">Accessability testing</a></li><li><a href="#unit-testing">Unit testing</a></li><li><a href="#api-tests">API tests</a></li><li><a href="#network-tests">Network tests</a></li><li><a href="#component-testing">Component testing</a></li><li><a href="#help-wanted">Help wanted</a></li></ul><!-- tocstop --><h2><span id="jest-tests">Jest tests</span></h2><p>The app comes with existing tests written using Jest and executed in the terminal. The tests are pretty low-level and have to mock the entire environment, creating dependencies between the tests and the code. For example, this is the integration test as originally written by the app&#39;s author:</p><figure class="highlight js"><figcaption><span>__tests__/integration/integration.test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> TestRenderer <span class="keyword">from</span> <span class="string">&#x27;react-test-renderer&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Text, TextInput, TouchableOpacity &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> createSagaMiddleware <span class="keyword">from</span> <span class="string">&#x27;redux-saga&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Api <span class="keyword">from</span> <span class="string">&#x27;../../api&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; App &#125; <span class="keyword">from</span> <span class="string">&#x27;../../components/App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Checkbox &#125; <span class="keyword">from</span> <span class="string">&#x27;../../components/Checkbox&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="built_in">Error</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../../components/Error&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; IconButton &#125; <span class="keyword">from</span> <span class="string">&#x27;../../components/IconButton&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Todo &#125; <span class="keyword">from</span> <span class="string">&#x27;../../components/Todo&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TodoFilter &#125; <span class="keyword">from</span> <span class="string">&#x27;../../components/TodoFilters&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; rootReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;../../reducers&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; rootSaga &#125; <span class="keyword">from</span> <span class="string">&#x27;../../sagas&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sagaMiddleware = createSagaMiddleware();</span><br><span class="line"><span class="keyword">const</span> store = createStore(rootReducer, applyMiddleware(thunk, sagaMiddleware));</span><br><span class="line">sagaMiddleware.run(rootSaga);</span><br><span class="line"></span><br><span class="line">jest.useFakeTimers(); <span class="comment">// Prevent issues with LayoutAnimation</span></span><br><span class="line"></span><br><span class="line">jest.spyOn(Api, <span class="string">&#x27;fetchTodos&#x27;</span>).mockResolvedValue([</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;Todo one&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&#x27;Todo two&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;App&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Use async/await to allow for async calls to resolve</span></span><br><span class="line">  <span class="comment">// https://reactjs.org/docs/testing-recipes.html#data-fetching</span></span><br><span class="line">  <span class="keyword">let</span> root;</span><br><span class="line">  beforeAll(<span class="function">() =&gt;</span> TestRenderer.act(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> renderer = <span class="keyword">await</span> TestRenderer.create(</span><br><span class="line">      &lt;Provider store=&#123; store &#125;&gt;</span><br><span class="line">        &lt;App /&gt;</span><br><span class="line">      &lt;/Provider&gt;</span><br><span class="line">    );</span><br><span class="line">    root = renderer.root;</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;Fetches todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> todos = root.findAllByType(Todo);</span><br><span class="line"></span><br><span class="line">    expect(todos).toHaveLength(<span class="number">2</span>);</span><br><span class="line">    expect(todos[<span class="number">0</span>].props.text).toBe(<span class="string">&#x27;Todo one&#x27;</span>);</span><br><span class="line">    expect(todos[<span class="number">1</span>].props.text).toBe(<span class="string">&#x27;Todo two&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>There are 42 lines of set up and internal code imports before we get to the test itself! Any change in the libraries or application code would require rewriting the test itself, because it is so closely coupled to the app. Let&#39;s look at the &quot;Create todo&quot; unit test. It is ... really verbose and tightly coupled to the code.</p><figure class="highlight js"><figcaption><span>__tests__/components/CreateTodo.test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> TestRenderer <span class="keyword">from</span> <span class="string">&#x27;react-test-renderer&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;TextInput, TouchableOpacity&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> reactRedux <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Actions <span class="keyword">from</span> <span class="string">&#x27;../../actions&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;CreateTodo&#125; <span class="keyword">from</span> <span class="string">&#x27;../../components/CreateTodo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// useDispatch() will be called by every test</span></span><br><span class="line"><span class="keyword">const</span> useDispatchMock = jest.fn();</span><br><span class="line">jest.spyOn(reactRedux, <span class="string">&#x27;useDispatch&#x27;</span>).mockReturnValue(useDispatchMock);</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;Handles success&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> text = <span class="string">&#x27;Todo&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> expectedAction = Actions.createTodo(text);</span><br><span class="line">  <span class="comment">// useSelector() will be called by every act()</span></span><br><span class="line">  jest.spyOn(reactRedux, <span class="string">&#x27;useSelector&#x27;</span>).mockReturnValue(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> renderer;</span><br><span class="line">  <span class="comment">// Wrap create() in act() for hooks to take effect</span></span><br><span class="line">  TestRenderer.act(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    renderer = TestRenderer.create(<span class="xml"><span class="tag">&lt;<span class="name">CreateTodo</span> /&gt;</span></span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> root = renderer.root;</span><br><span class="line">  <span class="keyword">const</span> textInput = root.findByType(TextInput);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Wrap each call in act() for it to take effect before the next one</span></span><br><span class="line">  TestRenderer.act(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    textInput.props.onChangeText(text);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  TestRenderer.act(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    textInput.props.onSubmitEditing();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  expect(useDispatchMock).toHaveBeenCalledWith(expectedAction);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>That&#39;s a lot of internal set up just to ensure the app can create a todo, don&#39;t you think? Let&#39;s see if there is a better way. Remember the above tests, as we are about to see a much simpler way.</p><h2><span id="adding-expo">Adding Expo</span></h2><p>The application was set to run using <code>react-native</code> on iOS or Android devices. To write Cypress tests, I added <a href="https://expo.io/">Expo</a> tool. This tools makes it possible to see the same RN app bundled and running in the regular browser. Having the application running in the browser while developing and testing it has advantages:</p><ul><li>it is faster to bundle and open the app in the browser than compiling and running the app in the emulator</li><li>the browser DevTools are really helpful for debugging the application</li><li>finally, if we have a web application, we can write tests using Cypress!</li></ul><p>I have added Expo to the Todo app following the <a href="https://docs.expo.io/guides/running-in-the-browser/">Expo guide</a>.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># match the React DOM version to the React version</span><br><span class="line">$ npm i -D expo expo-cli react-native-web react-dom@17.0.1 babel-preset-expo</span><br><span class="line">+ react-dom@17.0.1</span><br><span class="line">+ react-native-web@0.17.0</span><br><span class="line">+ expo-cli@4.5.2</span><br><span class="line">+ expo@41.0.1</span><br><span class="line">+ babel-preset-expo@8.3.0</span><br></pre></td></tr></table></figure><p>Then I started using <a href="https://github.com/bahmutov/ReactNativeTodo/commit/ae9c91529fbb78e8f361e2fa3dcc67f09ce7acb7">Expo icons</a> and fonts to make sure the app looks in the browser the same as on iOS.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// using icons before</span></span><br><span class="line">&lt;Icon</span><br><span class="line">  icon=&#123; checked ? <span class="string">&#x27;radio_button_checked&#x27;</span> : <span class="string">&#x27;radio_button_unchecked&#x27;</span> &#125;</span><br><span class="line">  style=&#123;[ styles.icon, disabled &amp;&amp; styles.disabled ]&#125;</span><br><span class="line">/&gt;</span><br><span class="line"><span class="comment">// using matching Expo icons</span></span><br><span class="line"><span class="keyword">import</span> &#123;MaterialIcons&#125; <span class="keyword">from</span> <span class="string">&#x27;@expo/vector-icons&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#123;checked ? (</span><br><span class="line">  &lt;MaterialIcons</span><br><span class="line">    name=<span class="string">&quot;radio-button-checked&quot;</span></span><br><span class="line">    size=&#123;<span class="number">32</span>&#125;</span><br><span class="line">    color=&#123;Colors.buttonActive&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">) : (</span><br><span class="line">  &lt;MaterialIcons</span><br><span class="line">    name=<span class="string">&quot;radio-button-unchecked&quot;</span></span><br><span class="line">    size=&#123;<span class="number">32</span>&#125;</span><br><span class="line">    color=&#123;Colors.buttonActive&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure><p>I can run the application using <code>expo start --web</code> command and see it in the browser.</p><p><img src="../images/rn-todo/todo-expo.png" alt="ReactNative Todo app running in the browser"></p><p>Getting Expo to show your RN application in the browser is definitely worth your time and effort.</p><p><strong>Tip:</strong> I have a small example of adding Expo to an existing RN project in <a href="https://github.com/bahmutov/react-native-to-expo">bahmutov/react-native-to-expo</a>.</p><h2><span id="adding-cypress">Adding Cypress</span></h2><p>I will install Cypress and configure it to load <code>localhost:19006</code> by default - that&#39;s the Expo&#39;s default local port.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress</span><br><span class="line">+ cypress@7.5.0</span><br></pre></td></tr></table></figure><p>The configuration file <code>cypress.json</code> sets the viewport and the base URL.</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;fixturesFolder&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;http://localhost:19006&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;viewportWidth&quot;</span>: <span class="number">400</span>,</span><br><span class="line">  <span class="attr">&quot;viewportHeight&quot;</span>: <span class="number">660</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The simplest test can load the application and stop. Any errors in the application&#39;s code, a thrown error, or an unhandled promise rejection would fail this test.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;RN Todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it.only(<span class="string">&#x27;loads&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="../images/rn-todo/loads.png" alt="The very first Cypress test"></p><p>Let&#39;s add a couple of Todo items and verify they appear in the list. We need to somehow select the input text box. Let&#39;s add the <code>testID</code> property to the component.</p><figure class="highlight js"><figcaption><span>components/CreateTodo.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextInput</span><br><span class="line">  testID=<span class="string">&quot;add-todo&quot;</span></span><br><span class="line">  value=&#123;text&#125;</span><br><span class="line">  ref=&#123;inputRef&#125;</span><br><span class="line">  style=&#123;styles.textInput&#125;</span><br><span class="line">  placeholder=&#123;<span class="string">&#x27;Add todo&#x27;</span>&#125;</span><br><span class="line">  onChangeText=&#123;setText&#125;</span><br><span class="line">  onSubmitEditing=&#123;create&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>React Native automatically maps the <code>testID=&quot;add-todo&quot;</code> to the HTML attribute <code>data-testid=&quot;add-todo&quot;</code> when the application is running in the browser. Similarly I will add a test ID to the Todo components.</p><figure class="highlight js"><figcaption><span>components/Todo.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Todo = <span class="function">(<span class="params">&#123;id, text, done, progress&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> dispatch = useDispatch();</span><br><span class="line">  <span class="keyword">const</span> deleteSelf = <span class="function">() =&gt;</span> dispatch(Actions.deleteTodo(id));</span><br><span class="line">  <span class="keyword">const</span> toggle = <span class="function"><span class="params">checked</span> =&gt;</span> dispatch(Actions.toggleTodo(id, checked));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;View</span><br><span class="line">      style=&#123;styles.container&#125;</span><br><span class="line">      testID=<span class="string">&quot;todo&quot;</span></span><br><span class="line">      accessibilityLabel=&#123;done ? <span class="string">&#x27;completed&#x27;</span> : <span class="string">&#x27;incomplete&#x27;</span>&#125;&gt;</span><br><span class="line">      ...</span><br><span class="line">  )</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> I have added accessibility label too, we will use it later to confirm the task completion works.</p><p>Let&#39;s extend our test by adding several todo items and confirming they appear.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;RN Todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;adds todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="comment">// using Enter works on the web</span></span><br><span class="line">    cy.get(<span class="string">&#x27;[data-testid=add-todo]&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.focus&#x27;</span>)</span><br><span class="line">      .type(<span class="string">&#x27;code RN app&#123;enter&#125;&#x27;</span>);</span><br><span class="line">    cy.get(<span class="string">&#x27;[data-testid=todo]&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// clicking &quot;Add&quot; button works too</span></span><br><span class="line">    cy.get(<span class="string">&#x27;[data-testid=add-todo]&#x27;</span>).type(<span class="string">&#x27;add Expo&#x27;</span>);</span><br><span class="line">    cy.get(<span class="string">&#x27;[data-testid=add]&#x27;</span>).click();</span><br><span class="line">    cy.get(<span class="string">&#x27;[data-testid=todo]&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The test runs and it is a pleasure watching it.</p><p><img src="../images/rn-todo/adds.gif" alt="The test is adding two todos and confirming"></p><h2><span id="resetting-todos">Resetting todos</span></h2><p>If we re-run the test the second time, it fails.</p><p><img src="../images/rn-todo/fails.png" alt="The test fails"></p><p>We can see the HTTP call to the server in the terminal returning an error code 500</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS /create 204 3.847 ms - -</span><br><span class="line">POST /create 500 14.099 ms - -</span><br></pre></td></tr></table></figure><p>The test assumes it starts with zero items on the server. Of course, that is not true - the server keeps the previous state. There are several ways we can solve this problem; <a href="https://on.cypress.io/network-requests">network stubbing</a> is usually used to isolate the frontend tests from the backend. In my case I have added another endpoint to the server to remove all existing items.</p><figure class="highlight js"><figcaption><span>server/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deleteAll = <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> writeTodos([]);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> res.json([]), TIMEOUT);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    next(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// new method for tests to use</span></span><br><span class="line">app.post(<span class="string">&#x27;/delete-all&#x27;</span>, deleteAll);</span><br></pre></td></tr></table></figure><p>The test can execute HTTP request using <a href="https://on.cypress.io/request">cy.request</a> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;RN Todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://localhost:3000/delete-all&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;adds todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The test passes every time.</p><h2><span id="completing-items">Completing items</span></h2><p>Let&#39;s continue writing our test. The user should be able to complete items. When the item is completed, it gets a different Aria label.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;RN Todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://localhost:3000/delete-all&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;adds todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="comment">// using Enter works on the web</span></span><br><span class="line">    cy.get(<span class="string">&#x27;[data-testid=add-todo]&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.focus&#x27;</span>)</span><br><span class="line">      .type(<span class="string">&#x27;code RN app&#123;enter&#125;&#x27;</span>);</span><br><span class="line">    cy.get(<span class="string">&#x27;[data-testid=todo]&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// clicking &quot;Add&quot; button works too</span></span><br><span class="line">    cy.get(<span class="string">&#x27;[data-testid=add-todo]&#x27;</span>).type(<span class="string">&#x27;add Expo&#x27;</span>);</span><br><span class="line">    cy.get(<span class="string">&#x27;[data-testid=add]&#x27;</span>).click();</span><br><span class="line">    cy.get(<span class="string">&#x27;[data-testid=todo]&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    cy.log(<span class="string">&#x27;**complete item**&#x27;</span>);</span><br><span class="line">    cy.contains(<span class="string">&#x27;[data-testid=todo]&#x27;</span>, <span class="string">&#x27;code RN&#x27;</span>)</span><br><span class="line">      .find(<span class="string">&#x27;[data-testid=toggle]&#x27;</span>)</span><br><span class="line">      .click();</span><br><span class="line">    cy.contains(<span class="string">&#x27;[data-testid=todo]&#x27;</span>, <span class="string">&#x27;code RN&#x27;</span>).should(</span><br><span class="line">      <span class="string">&#x27;have.attr&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;aria-label&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;completed&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// the other todo should still be incomplete</span></span><br><span class="line">    cy.contains(<span class="string">&#x27;[data-testid=todo]&#x27;</span>, <span class="string">&#x27;add Expo&#x27;</span>).should(</span><br><span class="line">      <span class="string">&#x27;have.attr&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;aria-label&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;incomplete&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Cypress commands are chainable. Thus to find the Todo item by text, then find the toggle checkbox icon and click on it, we use the chain</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.contains(<span class="string">&#x27;[data-testid=todo]&#x27;</span>, <span class="string">&#x27;code RN&#x27;</span>)</span><br><span class="line">  .find(<span class="string">&#x27;[data-testid=toggle]&#x27;</span>)</span><br><span class="line">  .click();</span><br></pre></td></tr></table></figure><p>To verify the completeness status, we use the Aria label attribute</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cy.contains(<span class="string">&#x27;[data-testid=todo]&#x27;</span>, <span class="string">&#x27;code RN&#x27;</span>).should(</span><br><span class="line">  <span class="string">&#x27;have.attr&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;aria-label&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;completed&#x27;</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Perfect.</p><h2><span id="filters">Filters</span></h2><p>I like creating longer meaningful tests that go through the entire user stories. Having long tests does not making debugging a failed tests more complex - Cypress automatically captures a video of the entire test run, and a screenshot at the moment of failure. The Command Log is clearly visible in the video and the screenshot, giving you an idea where and why the test has failed.</p><p>Let&#39;s exercise the &quot;Active | All | Done&quot; filters. We already have one item completed, and another one still active. So we add to our test:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cy.log(<span class="string">&#x27;**filters**&#x27;</span>);</span><br><span class="line">cy.contains(<span class="string">&#x27;[data-testid=filter]&#x27;</span>, <span class="string">&#x27;Active&#x27;</span>).click();</span><br><span class="line">cy.get(<span class="string">&#x27;[data-testid=todo]&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">cy.contains(<span class="string">&#x27;[data-testid=todo]&#x27;</span>, <span class="string">&#x27;add Expo&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line">cy.contains(<span class="string">&#x27;[data-testid=filter]&#x27;</span>, <span class="string">&#x27;Done&#x27;</span>).click();</span><br><span class="line">cy.get(<span class="string">&#x27;[data-testid=todo]&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">cy.contains(<span class="string">&#x27;[data-testid=todo]&#x27;</span>, <span class="string">&#x27;code RN&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br></pre></td></tr></table></figure><p>The test passes. Cypress has a nice time-traveling debugger. When you hover over the commands on the left, Cypress shows the application&#39;s DOM at that moment. It even shows where the <code>.click()</code> clicked, and how the application has responded.</p><p><img src="../images/rn-todo/filters.gif" alt="The time-traveling debugger"></p><h2><span id="removing-todos">Removing todos</span></h2><p>The last feature in our application is removing todos by clicking on the Trash icon button. Let&#39;s test it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cy.log(<span class="string">&#x27;**removing**&#x27;</span>);</span><br><span class="line">cy.contains(<span class="string">&#x27;[data-testid=todo]&#x27;</span>, <span class="string">&#x27;code RN&#x27;</span>)</span><br><span class="line">  .find(<span class="string">&#x27;[data-testid=delete]&#x27;</span>)</span><br><span class="line">  .click();</span><br><span class="line">cy.get(<span class="string">&#x27;[data-testid=todo]&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>);</span><br><span class="line">cy.contains(<span class="string">&#x27;[data-testid=filter]&#x27;</span>, <span class="string">&#x27;All&#x27;</span>).click();</span><br><span class="line">cy.get(<span class="string">&#x27;[data-testid=todo]&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">cy.contains(<span class="string">&#x27;[data-testid=todo]&#x27;</span>, <span class="string">&#x27;add Expo&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br></pre></td></tr></table></figure><p>The entire test is very fast, and executes in 2 seconds.</p><p><img src="../images/rn-todo/remove.png" alt="The full test"></p><h2><span id="selector-refactoring">Selector refactoring</span></h2><p>In our test we used test ID attributes or a combination of test ID + text like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;[data-testid=todo]&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">cy.contains(<span class="string">&#x27;[data-testid=todo]&#x27;</span>, <span class="string">&#x27;code RN&#x27;</span>);</span><br></pre></td></tr></table></figure><p>The above spec code is just JavaScript. If you find it too verbose, you can add little helper functions and even <a href="https://on.cypress.io/custom-commands">custom Cypress commands</a>. Let&#39;s introduce a little utility function to return the full data attribute test id selector.</p><figure class="highlight js"><figcaption><span>cypress/integration/with-helpers.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns data attribute selector for the given test id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> tid = <span class="function"><span class="params">testId</span> =&gt;</span> <span class="string">`[data-testid=&quot;<span class="subst">$&#123;testId&#125;</span>&quot;]`</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;RN Todos with helpers&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://localhost:3000/delete-all&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;adds todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="comment">// using Enter works on the web</span></span><br><span class="line">    cy.get(tid(<span class="string">&#x27;add-todo&#x27;</span>)).should(<span class="string">&#x27;have.focus&#x27;</span>).type(<span class="string">&#x27;code RN app&#123;enter&#125;&#x27;</span>);</span><br><span class="line">    cy.get(tid(<span class="string">&#x27;todo&#x27;</span>)).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// clicking &quot;Add&quot; button works too</span></span><br><span class="line">    cy.get(tid(<span class="string">&#x27;add-todo&#x27;</span>)).type(<span class="string">&#x27;add Expo&#x27;</span>);</span><br><span class="line">    cy.get(tid(<span class="string">&#x27;add&#x27;</span>)).click();</span><br><span class="line">    cy.get(tid(<span class="string">&#x27;todo&#x27;</span>)).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    cy.log(<span class="string">&#x27;**complete item**&#x27;</span>);</span><br><span class="line">    cy.contains(tid(<span class="string">&#x27;todo&#x27;</span>), <span class="string">&#x27;code RN&#x27;</span>).find(tid(<span class="string">&#x27;toggle&#x27;</span>)).click();</span><br><span class="line">    cy.contains(tid(<span class="string">&#x27;todo&#x27;</span>), <span class="string">&#x27;code RN&#x27;</span>).should(</span><br><span class="line">      <span class="string">&#x27;have.attr&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;aria-label&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;completed&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// the other todo should still be incomplete</span></span><br><span class="line">    cy.contains(tid(<span class="string">&#x27;todo&#x27;</span>), <span class="string">&#x27;add Expo&#x27;</span>).should(</span><br><span class="line">      <span class="string">&#x27;have.attr&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;aria-label&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;incomplete&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    cy.log(<span class="string">&#x27;**filters**&#x27;</span>);</span><br><span class="line">    cy.contains(tid(<span class="string">&#x27;filter&#x27;</span>), <span class="string">&#x27;Active&#x27;</span>).click();</span><br><span class="line">    cy.get(tid(<span class="string">&#x27;todo&#x27;</span>)).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    cy.contains(tid(<span class="string">&#x27;todo&#x27;</span>), <span class="string">&#x27;add Expo&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line">    cy.contains(tid(<span class="string">&#x27;filter&#x27;</span>), <span class="string">&#x27;Done&#x27;</span>).click();</span><br><span class="line">    cy.get(tid(<span class="string">&#x27;todo&#x27;</span>)).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    cy.contains(tid(<span class="string">&#x27;todo&#x27;</span>), <span class="string">&#x27;code RN&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    cy.log(<span class="string">&#x27;**removing**&#x27;</span>);</span><br><span class="line">    cy.contains(tid(<span class="string">&#x27;todo&#x27;</span>), <span class="string">&#x27;code RN&#x27;</span>).find(tid(<span class="string">&#x27;delete&#x27;</span>)).click();</span><br><span class="line">    cy.get(tid(<span class="string">&#x27;todo&#x27;</span>)).should(<span class="string">&#x27;not.exist&#x27;</span>);</span><br><span class="line">    cy.contains(tid(<span class="string">&#x27;filter&#x27;</span>), <span class="string">&#x27;All&#x27;</span>).click();</span><br><span class="line">    cy.get(tid(<span class="string">&#x27;todo&#x27;</span>)).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    cy.contains(tid(<span class="string">&#x27;todo&#x27;</span>), <span class="string">&#x27;add Expo&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>We always use <code>cy.get(tid(...))</code> and <code>cy.contains(tid(...), text)</code>, thus we can create a common abstraction function called <code>byTestId</code>.</p><figure class="highlight js"><figcaption><span>cypress/integration/with-helpers.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns data attribute selector for the given test id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> tid = <span class="function"><span class="params">testId</span> =&gt;</span> <span class="string">`[data-testid=&quot;<span class="subst">$&#123;testId&#125;</span>&quot;]`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Selects elements using cy.get or cy.contains</span></span><br><span class="line"><span class="comment"> * using the provided test ID attribute.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> byTestId = <span class="function">(<span class="params">testId, text</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (text) &#123;</span><br><span class="line">    <span class="keyword">return</span> cy.contains(tid(testId), text);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> cy.get(tid(testId));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;RN Todos with helpers&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://localhost:3000/delete-all&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;adds todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="comment">// using Enter works on the web</span></span><br><span class="line">    byTestId(<span class="string">&#x27;add-todo&#x27;</span>).should(<span class="string">&#x27;have.focus&#x27;</span>).type(<span class="string">&#x27;code RN app&#123;enter&#125;&#x27;</span>);</span><br><span class="line">    byTestId(<span class="string">&#x27;todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// clicking &quot;Add&quot; button works too</span></span><br><span class="line">    byTestId(<span class="string">&#x27;add-todo&#x27;</span>).type(<span class="string">&#x27;add Expo&#x27;</span>);</span><br><span class="line">    byTestId(<span class="string">&#x27;add&#x27;</span>).click();</span><br><span class="line">    byTestId(<span class="string">&#x27;todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    cy.log(<span class="string">&#x27;**complete item**&#x27;</span>);</span><br><span class="line">    byTestId(<span class="string">&#x27;todo&#x27;</span>, <span class="string">&#x27;code RN&#x27;</span>).find(tid(<span class="string">&#x27;toggle&#x27;</span>)).click();</span><br><span class="line">    byTestId(<span class="string">&#x27;todo&#x27;</span>, <span class="string">&#x27;code RN&#x27;</span>).should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-label&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>);</span><br><span class="line">    <span class="comment">// the other todo should still be incomplete</span></span><br><span class="line">    byTestId(<span class="string">&#x27;todo&#x27;</span>, <span class="string">&#x27;add Expo&#x27;</span>).should(</span><br><span class="line">      <span class="string">&#x27;have.attr&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;aria-label&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;incomplete&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    cy.log(<span class="string">&#x27;**filters**&#x27;</span>);</span><br><span class="line">    byTestId(<span class="string">&#x27;filter&#x27;</span>, <span class="string">&#x27;Active&#x27;</span>).click();</span><br><span class="line">    byTestId(<span class="string">&#x27;todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    byTestId(<span class="string">&#x27;todo&#x27;</span>, <span class="string">&#x27;add Expo&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line">    byTestId(<span class="string">&#x27;filter&#x27;</span>, <span class="string">&#x27;Done&#x27;</span>).click();</span><br><span class="line">    byTestId(<span class="string">&#x27;todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    byTestId(<span class="string">&#x27;todo&#x27;</span>, <span class="string">&#x27;code RN&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    cy.log(<span class="string">&#x27;**removing**&#x27;</span>);</span><br><span class="line">    byTestId(<span class="string">&#x27;todo&#x27;</span>, <span class="string">&#x27;code RN&#x27;</span>).find(tid(<span class="string">&#x27;delete&#x27;</span>)).click();</span><br><span class="line">    byTestId(<span class="string">&#x27;todo&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>);</span><br><span class="line">    byTestId(<span class="string">&#x27;filter&#x27;</span>, <span class="string">&#x27;All&#x27;</span>).click();</span><br><span class="line">    byTestId(<span class="string">&#x27;todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    byTestId(<span class="string">&#x27;todo&#x27;</span>, <span class="string">&#x27;add Expo&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The test runs just like before, and the code is readable and easy to understand. The test is NOT coupled to the implementation details. We only interact with the external representation of the elements through the page. Thus we are free to refactor the internals of the application - as long as the test is passing, the application will be working for our users.</p><h2><span id="code-coverage">Code coverage</span></h2><p>Is our single test enough? Is it effective? Are there features in our application that the test does NOT cover? Let&#39;s add <a href="https://on.cypress.io/code-coverage">code coverage</a> to find out. I have added <code>babel-plugin-istanbul</code> and <code>@cypress-io/code-coverage</code> plugin to generate the code coverage report.</p><figure class="highlight js"><figcaption><span>babel.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  presets: [<span class="string">&#x27;babel-preset-expo&#x27;</span>],</span><br><span class="line">  plugins: [<span class="string">&#x27;istanbul&#x27;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@cypress/code-coverage/support&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;@cypress/code-coverage/task&#x27;</span>)(on, config);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// add other tasks to be registered here</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// IMPORTANT to return the config object</span></span><br><span class="line">  <span class="comment">// with the any changed environment variables</span></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>When running the test, I can see the code coverage messages from the plugin.</p><p><img src="../images/rn-todo/cover-log.png" alt="The code coverage messages"></p><p>Let&#39;s open the HTML code coverage report</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ open coverage/lcov-report/index.html</span><br></pre></td></tr></table></figure><p><img src="../images/rn-todo/coverage.png" alt="The code coverage summary"></p><p>Our single complete end-to-end test covers 90% of the application&#39;s source code. Let&#39;s drill into individual files to find what the test has missed. For example, let&#39;s open the code coverage report of the reducers file.</p><p><img src="../images/rn-todo/missed.png" alt="The file report shows missed branches"></p><p>The source lines missed by the tests are highlighted in red. The missed branches and switch statements are highlighted in yellow. Our tests never encountered or tested an application error, thus we missed those lines.</p><h2><span id="testing-server-errors">Testing server errors</span></h2><p>Let&#39;s add a test verifies the error from the server is shown on load.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows error on load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;http://localhost:3000/&#x27;</span>, &#123;</span><br><span class="line">    statusCode: <span class="number">500</span>,</span><br><span class="line">    body: &#123;</span><br><span class="line">      error: <span class="string">&#x27;Load failed&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  byTestId(<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;Load failed&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>We are using the <a href="https://on.cypress.io/intercept">cy.intercept</a> command to mock the network call <em>outside</em> the browser. Thus our application really thinks that the server responded with status 500 and an error message.</p><p><img src="../images/rn-todo/load-failed.png" alt="Testing the load failed path"></p><p>Similarly, we can test how the application handles an error while creating a new Todo.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">it.only(<span class="string">&#x27;shows error on create&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> error = <span class="string">&#x27;Create todo failed&#x27;</span>;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://localhost:3000/create&#x27;</span>, &#123;</span><br><span class="line">    statusCode: <span class="number">500</span>,</span><br><span class="line">    body: &#123;</span><br><span class="line">      error,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  byTestId(<span class="string">&#x27;add-todo&#x27;</span>).type(<span class="string">&#x27;add Expo&#x27;</span>);</span><br><span class="line">  byTestId(<span class="string">&#x27;add&#x27;</span>).click();</span><br><span class="line">  byTestId(<span class="string">&#x27;error&#x27;</span>, error).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>We can also avoid mocking the server. For example, the server disallows creating empty and duplicate items.</p><figure class="highlight js"><figcaption><span>server/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createTodo = <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;text&#125; = req.body;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!text) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">&#x27;No text provided!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> todos = <span class="keyword">await</span> readTodos();</span><br><span class="line">    <span class="keyword">let</span> todo = todos.find(<span class="function"><span class="params">todo</span> =&gt;</span> todo.text === text);</span><br><span class="line">    <span class="keyword">if</span> (todo) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">&#x27;Todo already exists!&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      todo = &#123;text, <span class="attr">id</span>: <span class="built_in">Date</span>.now(), <span class="attr">done</span>: <span class="literal">false</span>&#125;;</span><br><span class="line">      todos.push(todo);</span><br><span class="line">      <span class="keyword">await</span> writeTodos(todos);</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> res.json(todo), TIMEOUT);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    next(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Let&#39;s verify the application shows the error message send by the server in those cases.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;does not allow adding empty items&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// spy on the network call to create an item</span></span><br><span class="line">  cy.intercept(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://localhost:3000/create&#x27;</span>).as(<span class="string">&#x27;create&#x27;</span>);</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">// note: this delay should not be necessary</span></span><br><span class="line">    <span class="comment">// but the application has a logical error</span></span><br><span class="line">    <span class="comment">// if the error happens quickly, the quickly disappears</span></span><br><span class="line">    .wait(<span class="number">500</span>);</span><br><span class="line">  byTestId(<span class="string">&#x27;add-todo&#x27;</span>).should(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  byTestId(<span class="string">&#x27;add&#x27;</span>).click();</span><br><span class="line">  <span class="comment">// from the network spy, get the response object</span></span><br><span class="line">  <span class="comment">// and extract the error message</span></span><br><span class="line">  cy.wait(<span class="string">&#x27;@create&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;response.body.error&#x27;</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      expect(error).to.be.a(<span class="string">&#x27;string&#x27;</span>);</span><br><span class="line">      byTestId(<span class="string">&#x27;error&#x27;</span>, error).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Similar test confirms we cannot add duplicate items.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;does not allow duplicates&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// spy on the network call to create an item</span></span><br><span class="line">  cy.intercept(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://localhost:3000/create&#x27;</span>).as(<span class="string">&#x27;create&#x27;</span>);</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  byTestId(<span class="string">&#x27;add-todo&#x27;</span>).type(<span class="string">&#x27;duplicate&#123;enter&#125;&#x27;</span>);</span><br><span class="line">  cy.wait(<span class="string">&#x27;@create&#x27;</span>); <span class="comment">// first call is successful</span></span><br><span class="line">  byTestId(<span class="string">&#x27;todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  byTestId(<span class="string">&#x27;add-todo&#x27;</span>).type(<span class="string">&#x27;duplicate&#123;enter&#125;&#x27;</span>);</span><br><span class="line">  <span class="comment">// second call should fail</span></span><br><span class="line">  cy.wait(<span class="string">&#x27;@create&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;response.body.error&#x27;</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      expect(error).to.be.a(<span class="string">&#x27;string&#x27;</span>);</span><br><span class="line">      byTestId(<span class="string">&#x27;error&#x27;</span>, error).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="../images/rn-todo/duplicate.png" alt="Duplicate item error test"></p><p>Let&#39;s confirm that we cannot delete an item with invalid id, and that the error message is shown. We will change the ID field in the outgoing request before it goes to the server.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows error on delete&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// intercept the network call and change the item&#x27;s id</span></span><br><span class="line">  <span class="comment">// to cause the delete to fail</span></span><br><span class="line">  cy.intercept(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://localhost:3000/delete&#x27;</span>, <span class="function"><span class="params">req</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// set invalid id</span></span><br><span class="line">    req.body.id = <span class="number">10</span>;</span><br><span class="line">  &#125;).as(<span class="string">&#x27;delete&#x27;</span>);</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  byTestId(<span class="string">&#x27;add-todo&#x27;</span>).type(<span class="string">&#x27;write tests&#123;enter&#125;&#x27;</span>);</span><br><span class="line">  byTestId(<span class="string">&#x27;todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">  byTestId(<span class="string">&#x27;todo&#x27;</span>).first().find(tid(<span class="string">&#x27;delete&#x27;</span>)).click();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the delete call should fail</span></span><br><span class="line">  cy.wait(<span class="string">&#x27;@delete&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;response.body.error&#x27;</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      expect(error).to.be.a(<span class="string">&#x27;string&#x27;</span>);</span><br><span class="line">      byTestId(<span class="string">&#x27;error&#x27;</span>, error).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="comment">// the original todo is still there</span></span><br><span class="line">  byTestId(<span class="string">&#x27;todo&#x27;</span>, <span class="string">&#x27;write tests&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="../images/rn-todo/delete-error.png" alt="Cannot delete invalid item test"></p><p>We can similarly test the edge case when the user tries to complete a Todo with invalid ID. All tests run in about 7 seconds.</p><p><img src="../images/rn-todo/all-tests.gif" alt="Running all tests"></p><p>With these API tests, we get a new code coverage report that shows our tests cover 97% of the application&#39;s code.</p><p><img src="../images/rn-todo/new-cover.png" alt="New code coverage report"></p><p>We can continue chasing each missed line. We can also instrument and collect code coverage from the server&#39;s JavaScript code, see the <a href="/blog/backend-coverage/" title="Backend Code Coverage from Cypress API tests">Backend Code Coverage from Cypress API tests</a> post.</p><h2><span id="continuous-integration">Continuous integration</span></h2><p>We definitely need to test our application on every commit and every pull request. Let&#39;s use <a href="/blog/trying-github-actions/" title="GitHub Actions">GitHub Actions</a> workflow to run our application and execute Cypress tests.</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">e2e</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>, <span class="string">pull_request</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">cypress-run:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Install NPM dependencies, cache them correctly</span></span><br><span class="line">      <span class="comment"># and run all Cypress tests</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">web:server</span></span><br><span class="line">          <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:19006&#x27;</span></span><br></pre></td></tr></table></figure><p>Each spec file is executed on CI.</p><p><img src="../images/rn-todo/ci.png" alt="Tests running on CI"></p><p><strong>Tip:</strong> I like adding Cypress version badge to my example projects to communicate to the readers if the project is up-to-date. Read the blog post <a href="/blog/keep-examples-up-to-date/" title="Keep Examples Up To Date">Keep Examples Up To Date</a>.</p><h2><span id="visual-testing">Visual testing</span></h2><p>Our application looks nice, doesn&#39;t it? What if someone changes the layout or CSS properties, making it look ugly? Can we prevent style regressions? Yes, with the help of <a href="https://on.cypress.io/visual-testing">visual testing</a>. For this project, I have added <a href="https://docs.percy.io/docs/cypress">Percy.io visual service</a>.</p><p>At every major step of the test, I take the full app screenshot using Percy command <code>cy.percySnapshot(name)</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;adds todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  <span class="comment">// using Enter works on the web</span></span><br><span class="line">  byTestId(<span class="string">&#x27;add-todo&#x27;</span>).should(<span class="string">&#x27;have.focus&#x27;</span>).type(<span class="string">&#x27;code RN app&#123;enter&#125;&#x27;</span>);</span><br><span class="line">  byTestId(<span class="string">&#x27;todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// clicking &quot;Add&quot; button works too</span></span><br><span class="line">  byTestId(<span class="string">&#x27;add-todo&#x27;</span>).type(<span class="string">&#x27;add Expo&#x27;</span>);</span><br><span class="line">  byTestId(<span class="string">&#x27;add&#x27;</span>).click();</span><br><span class="line">  byTestId(<span class="string">&#x27;todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// visual snapshot</span></span><br><span class="line">  cy.percySnapshot(<span class="string">&#x27;two items&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;**complete item**&#x27;</span>);</span><br><span class="line">  byTestId(<span class="string">&#x27;todo&#x27;</span>, <span class="string">&#x27;code RN&#x27;</span>).find(tid(<span class="string">&#x27;toggle&#x27;</span>)).click();</span><br><span class="line">  byTestId(<span class="string">&#x27;todo&#x27;</span>, <span class="string">&#x27;code RN&#x27;</span>).should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-label&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>);</span><br><span class="line">  <span class="comment">// the other todo should still be incomplete</span></span><br><span class="line">  byTestId(<span class="string">&#x27;todo&#x27;</span>, <span class="string">&#x27;add Expo&#x27;</span>).should(</span><br><span class="line">    <span class="string">&#x27;have.attr&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;aria-label&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;incomplete&#x27;</span>,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  cy.percySnapshot(<span class="string">&#x27;completed first item&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;**filters**&#x27;</span>);</span><br><span class="line">  byTestId(<span class="string">&#x27;filter&#x27;</span>, <span class="string">&#x27;Active&#x27;</span>).click();</span><br><span class="line">  byTestId(<span class="string">&#x27;todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">  byTestId(<span class="string">&#x27;todo&#x27;</span>, <span class="string">&#x27;add Expo&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line">  byTestId(<span class="string">&#x27;filter&#x27;</span>, <span class="string">&#x27;Done&#x27;</span>).click();</span><br><span class="line">  byTestId(<span class="string">&#x27;todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">  byTestId(<span class="string">&#x27;todo&#x27;</span>, <span class="string">&#x27;code RN&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;**removing**&#x27;</span>);</span><br><span class="line">  byTestId(<span class="string">&#x27;todo&#x27;</span>, <span class="string">&#x27;code RN&#x27;</span>).find(tid(<span class="string">&#x27;delete&#x27;</span>)).click();</span><br><span class="line">  byTestId(<span class="string">&#x27;todo&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>);</span><br><span class="line">  byTestId(<span class="string">&#x27;filter&#x27;</span>, <span class="string">&#x27;All&#x27;</span>).click();</span><br><span class="line">  byTestId(<span class="string">&#x27;todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">  byTestId(<span class="string">&#x27;todo&#x27;</span>, <span class="string">&#x27;add Expo&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>You can see the results at <a href="https://percy.io/bahmutov/ReactNativeTodo">https://percy.io/bahmutov/ReactNativeTodo</a>. The first time it runs, I need to approve the images.</p><p><img src="../images/rn-todo/percy.gif" alt="Reviewing app screenshots at Percy dashboard"></p><p><strong>Note:</strong> currently the rendered screenshots are missing icons, I am investigating, see <a href="https://github.com/percy/percy-cypress/issues/366">issue 366</a>.</p><h2><span id="cypress-dashboard">Cypress dashboard</span></h2><p>Whenever Cypress executes tests, it captures the video of the entire test run. If there are any failed tests, Cypress saves an image with the failure. We could store these videos and images as <a href="https://github.com/cypress-io/github-action#artifacts">CI test artifacts</a> but a more useful approach is to record them on <a href="https://on.cypress.io/dashboard-introduction">Cypress Dashboard</a>.</p><p><img src="../images/rn-todo/set-recording.png" alt="Setting up test recording on Cypress Dashboard"></p><p>We should set the shown record key as repo secret and pass to the test runner as an environment variable.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># run Cypress tests with Percy</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">install:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">command-prefix:</span> <span class="string">&#x27;percy exec -- npx&#x27;</span></span><br><span class="line">    <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:19006&#x27;</span></span><br><span class="line">    <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">all</span></span><br><span class="line">  <span class="comment"># inject the Percy token</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">PERCY_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.PERCY_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CYPRESS_RECORD_KEY</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>You can see the recorded tests on the Dashboard <a href="https://dashboard.cypress.io/projects/hyr4ik">here</a>. You can see each test run and drill down into each test.</p><p><img src="../images/rn-todo/dashboard.png" alt="Recorded tests on Cypress Dashboard"></p><p>The entire dev team can access all test results in a single place and track the test stats along each branch across the entire project&#39;s lifetime.</p><h2><span id="accessability-testing">Accessability testing</span></h2><p>Let&#39;s install <a href="https://github.com/component-driven/cypress-axe">cypress-axe</a> plugin to find a11y problems in our app.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev cypress-axe axe-core</span><br><span class="line">+ cypress-axe@0.12.2</span><br><span class="line">+ axe-core@4.2.2</span><br></pre></td></tr></table></figure><p>We could write a separate accessability test, but I prefer inserting the a11y checking commands into the regular tests, similar to visual testing.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;adds todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  <span class="comment">// using Enter works on the web</span></span><br><span class="line">  byTestId(<span class="string">&#x27;add-todo&#x27;</span>).should(<span class="string">&#x27;have.focus&#x27;</span>).type(<span class="string">&#x27;code RN app&#123;enter&#125;&#x27;</span>);</span><br><span class="line">  byTestId(<span class="string">&#x27;todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// clicking &quot;Add&quot; button works too</span></span><br><span class="line">  byTestId(<span class="string">&#x27;add-todo&#x27;</span>).type(<span class="string">&#x27;add Expo&#x27;</span>);</span><br><span class="line">  byTestId(<span class="string">&#x27;add&#x27;</span>).click();</span><br><span class="line">  byTestId(<span class="string">&#x27;todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// visual snapshot</span></span><br><span class="line">  cy.percySnapshot(<span class="string">&#x27;two items&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// a11y check</span></span><br><span class="line">  cy.injectAxe();</span><br><span class="line">  cy.checkA11y();</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The first time the test runs, it finds 5 violations and fails the test.</p><p><img src="../images/rn-todo/a11y-test.png" alt="The test fails due to a11y errors"></p><p>By clicking on each violation we can print the details to the DevTols console. For example, the first violation has determined that the contrast on the filters buttons is too low.</p><p><img src="../images/rn-todo/contrast.png" alt="The contrast violation"></p><p>When starting with a11y testing, you probably will have lots of errors. I recommend running just some important tests first, fixing the issues, then expanding the tests. Let&#39;s ensure the color contrast is correct by testing the <code>cat.color</code> only:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.checkA11y(<span class="literal">null</span>, &#123;</span><br><span class="line">  runOnly: &#123;</span><br><span class="line">    type: <span class="string">&#x27;tag&#x27;</span>,</span><br><span class="line">    values: [<span class="string">&#x27;cat.color&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>We can make the button background color darker to <code>#484848</code> to pass the test. Then we can add another Axe check after completing an item.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cy.log(<span class="string">&#x27;**complete item**&#x27;</span>);</span><br><span class="line">byTestId(<span class="string">&#x27;todo&#x27;</span>, <span class="string">&#x27;code RN&#x27;</span>).find(tid(<span class="string">&#x27;toggle&#x27;</span>)).click();</span><br><span class="line">byTestId(<span class="string">&#x27;todo&#x27;</span>, <span class="string">&#x27;code RN&#x27;</span>).should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-label&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>);</span><br><span class="line"><span class="comment">// the other todo should still be incomplete</span></span><br><span class="line">byTestId(<span class="string">&#x27;todo&#x27;</span>, <span class="string">&#x27;add Expo&#x27;</span>).should(</span><br><span class="line">  <span class="string">&#x27;have.attr&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;aria-label&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;incomplete&#x27;</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">cy.percySnapshot(<span class="string">&#x27;completed first item&#x27;</span>);</span><br><span class="line">cy.checkA11y(<span class="literal">null</span>, &#123;</span><br><span class="line">  runOnly: &#123;</span><br><span class="line">    type: <span class="string">&#x27;tag&#x27;</span>,</span><br><span class="line">    values: [<span class="string">&#x27;cat.color&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The check fails - the contrast is too low.</p><p><img src="../images/rn-todo/completed-contrast.png" alt="The text contrast violation"></p><p>We fix the application and test again. This time, the test is green.</p><p><img src="../images/rn-todo/fixed-contrast.png" alt="The application without a11y color violations"></p><p>I have opened a pull request with a11y checks <a href="https://github.com/bahmutov/ReactNativeTodo/pull/1">#1</a>. Notice that the functional Cypress tests passed, while visual tests have caught the background color change. The GitHub checks show the failed Percy check.</p><p><img src="../images/rn-todo/visual-checks.png" alt="Functional and visual checks"></p><p>We can click on the failed visual check to review the changes and approve it at the Percy Dashboard.</p><p><img src="../images/rn-todo/visual-diff.gif" alt="Visual differences in buttons and text"></p><p>Once we review the visual changes and approve them, the GitHub check turns green.</p><p><img src="../images/rn-todo/visual-checks-green.png" alt="The pull request is ready to go"></p><h2><span id="unit-testing">Unit testing</span></h2><p>Occasionally you need unit tests. For example, when refactoring actions or reducers it helps to run just their unit tests. The current project includes Jest unit tests, here are tests for actions.</p><figure class="highlight js"><figcaption><span>__tests__/actions/actions.test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Actions <span class="keyword">from</span> <span class="string">&#x27;../../actions&#x27;</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Action creators&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;Creates CREATE_TODO action&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> action = &#123; <span class="attr">type</span>: Actions.CREATE_TODO, <span class="attr">text</span>: <span class="string">&#x27;Todo&#x27;</span> &#125;;</span><br><span class="line">    expect(Actions.createTodo(<span class="string">&#x27;Todo&#x27;</span>)).toStrictEqual(action);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Such unit tests are easy to recreate in Cypress - just replace Jest assertions with Chai ones.</p><figure class="highlight js"><figcaption><span>cypress/integration/actions-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Actions <span class="keyword">from</span> <span class="string">&#x27;../../actions&#x27;</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Action creators&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;Creates CREATE_TODO action&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> action = &#123; <span class="attr">type</span>: Actions.CREATE_TODO, <span class="attr">text</span>: <span class="string">&#x27;Todo&#x27;</span> &#125;;</span><br><span class="line">    expect(Actions.createTodo(<span class="string">&#x27;Todo&#x27;</span>)).to.deep.equal(action);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Similarly, async actions can also be tested. Compare the Jest test</p><figure class="highlight js"><figcaption><span>__tests__/actions/actions.test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> configureMockStore <span class="keyword">from</span> <span class="string">&#x27;redux-mock-store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Api <span class="keyword">from</span> <span class="string">&#x27;../../api&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Actions <span class="keyword">from</span> <span class="string">&#x27;../../actions&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mockStore = configureMockStore([ thunk ]);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Async actions&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;Handles successful fetch&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = mockStore();</span><br><span class="line">    <span class="keyword">const</span> todos = [&#123; <span class="attr">text</span>: <span class="string">&#x27;Text&#x27;</span>, <span class="attr">id</span>: <span class="number">123</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;];</span><br><span class="line">    <span class="comment">// Mock async API method success</span></span><br><span class="line">    <span class="keyword">const</span> fetchTodosMock = jest.spyOn(Api, <span class="string">&#x27;fetchTodos&#x27;</span>).mockResolvedValue(todos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> expectedActions = [</span><br><span class="line">      Actions.fetchTodos(),</span><br><span class="line">      Actions.fetchTodosSuccess(todos),</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If a test returns nothing it will pass by default</span></span><br><span class="line">    <span class="keyword">return</span> store</span><br><span class="line">      <span class="comment">// Dispatch async action</span></span><br><span class="line">      .dispatch(Actions.fetchTodosAsync())</span><br><span class="line">      <span class="comment">// Wait for async action to complete</span></span><br><span class="line">      .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Mocked method is called</span></span><br><span class="line">        expect(fetchTodosMock).toHaveBeenCalled();</span><br><span class="line">        <span class="comment">// Expected actions are dispatched</span></span><br><span class="line">        expect(store.getActions()).toStrictEqual(expectedActions);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>To its equivalent Cypress test:</p><figure class="highlight js"><figcaption><span>cypress/integration/actions-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> configureMockStore <span class="keyword">from</span> <span class="string">&#x27;redux-mock-store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Api <span class="keyword">from</span> <span class="string">&#x27;../../api&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Actions <span class="keyword">from</span> <span class="string">&#x27;../../actions&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mockStore = configureMockStore([ thunk ]);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Async actions&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;Handles successful fetch&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = mockStore();</span><br><span class="line">    <span class="keyword">const</span> todos = [&#123; <span class="attr">text</span>: <span class="string">&#x27;Text&#x27;</span>, <span class="attr">id</span>: <span class="number">123</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;];</span><br><span class="line">    <span class="comment">// Mock async API method success</span></span><br><span class="line">    cy.stub(Api, <span class="string">&#x27;fetchTodos&#x27;</span>).resolves(todos)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> expectedActions = [</span><br><span class="line">      Actions.fetchTodos(),</span><br><span class="line">      Actions.fetchTodosSuccess(todos),</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If a test returns nothing it will pass by default</span></span><br><span class="line">    <span class="keyword">return</span> store</span><br><span class="line">      <span class="comment">// Dispatch async action</span></span><br><span class="line">      .dispatch(Actions.fetchTodosAsync())</span><br><span class="line">      <span class="comment">// Wait for async action to complete</span></span><br><span class="line">      .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Mocked method is called</span></span><br><span class="line">        expect(Api.fetchTodos).to.have.been.called</span><br><span class="line">        <span class="comment">// Expected actions are dispatched</span></span><br><span class="line">        expect(store.getActions()).to.deep.equal(expectedActions);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>We are using Sinon stubs via <a href="https://on.cypress.io/stub">cy.stub</a> and Chai assertions. We can also rewrite the above test to expose more of the objects to Cypress logging.</p><figure class="highlight js"><figcaption><span>cypress/integration/actions-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;Async actions&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;Handles successful fetch&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = mockStore();</span><br><span class="line">    <span class="keyword">const</span> todos = [&#123;<span class="attr">text</span>: <span class="string">&#x27;Text&#x27;</span>, <span class="attr">id</span>: <span class="number">123</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;];</span><br><span class="line">    <span class="comment">// Mock async API method success</span></span><br><span class="line">    cy.stub(Api, <span class="string">&#x27;fetchTodos&#x27;</span>).resolves(todos).as(<span class="string">&#x27;fetchTodos&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> expectedActions = [</span><br><span class="line">      Actions.fetchTodos(),</span><br><span class="line">      Actions.fetchTodosSuccess(todos),</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    cy.wrap(store).invoke(<span class="string">&#x27;dispatch&#x27;</span>, Actions.fetchTodosAsync());</span><br><span class="line">    cy.get(<span class="string">&#x27;@fetchTodos&#x27;</span>).should(<span class="string">&#x27;have.been.called&#x27;</span>);</span><br><span class="line">    cy.wrap(store).invoke(<span class="string">&#x27;getActions&#x27;</span>).should(<span class="string">&#x27;deep.equal&#x27;</span>, expectedActions);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>We can click on the Command Log entry to get more information, for example we can look at the <code>store.getActions()</code> command by clicking on the <code>.invoke(&#39;getActions&#39;)</code> entry. It prints the store object, and the yielded value, allowing us to see clearly what has happened.</p><p><img src="../images/rn-todo/invoke.png" alt="Inspecting individual method call"></p><p>The above exploration experience during testing and the debugging speed are my favorite features of running the browser unit tests in Cypress. You can find unit tests for actions, reduces, and sagas in the <a href="https://github.com/bahmutov/ReactNativeTodo/tree/main/cypress/integration">cypress/integration</a> folder.</p><h2><span id="api-tests">API tests</span></h2><p>The original ReactNativeTodo repository has a few API tests, but these are NOT true API tests that exercise the backend server. Instead, these tests exercise the API wrapper that calls <code>fetch</code>. A typical test looks like this:</p><figure class="highlight js"><figcaption><span>__tests__/api/api.test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Api <span class="keyword">from</span> <span class="string">&#x27;../../api&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; GET, POST &#125; = Api;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;asyncRequest()&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> fetchMock = <span class="built_in">global</span>.fetch = jest.fn();</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;Handles GET requests&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">&#x27;http://localhost:3000/&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> params = &#123;</span><br><span class="line">      method: GET,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    Api.asyncRequest();</span><br><span class="line">    expect(fetchMock).toHaveBeenCalledWith(url, params);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The Cypress version looks like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Api <span class="keyword">from</span> <span class="string">&#x27;../../api&#x27;</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;asyncRequest()&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Cypress stubs are reset before each test</span></span><br><span class="line">  beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.spy(<span class="built_in">window</span>, <span class="string">&#x27;fetch&#x27;</span>).as(<span class="string">&#x27;fetch&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;Handles GET requests&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">&#x27;http://localhost:3000/&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> params = &#123;</span><br><span class="line">      method: GET,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        Accept: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    Api.asyncRequest();</span><br><span class="line">    cy.get(<span class="string">&#x27;@fetch&#x27;</span>).should(<span class="string">&#x27;have.been.calledWith&#x27;</span>, url, params);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2><span id="network-tests">Network tests</span></h2><p>We can write better API tests by spying on the network calls made by the browser using <a href="https://on.cypress.io/intercept">cy.intercept</a> command, rather than spying on the <code>window.fetch</code> function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Api <span class="keyword">from</span> <span class="string">&#x27;../../api&#x27;</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;network&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// use cy.intercept command to spy on the</span></span><br><span class="line">  <span class="comment">// actual network calls made by the code</span></span><br><span class="line">  it(<span class="string">&#x27;creates todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> apiUrl = <span class="string">&#x27;http://localhost:3000&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    cy.intercept(<span class="string">`<span class="subst">$&#123;apiUrl&#125;</span>/`</span>, <span class="function"><span class="params">req</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// make sure the call is not cached by the browser</span></span><br><span class="line">      <span class="keyword">delete</span> req.headers[<span class="string">&#x27;if-none-match&#x27;</span>];</span><br><span class="line">    &#125;)</span><br><span class="line">      .as(<span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">      .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// once we prepared the intercept</span></span><br><span class="line">        <span class="comment">// make the call using the app code</span></span><br><span class="line">        Api.asyncRequest();</span><br><span class="line">      &#125;);</span><br><span class="line">    cy.wait(<span class="string">&#x27;@todos&#x27;</span>).its(<span class="string">&#x27;response.body&#x27;</span>).should(<span class="string">&#x27;be.an&#x27;</span>, <span class="string">&#x27;array&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// delete all items</span></span><br><span class="line">    cy.request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">`<span class="subst">$&#123;apiUrl&#125;</span>/delete-all`</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> Api.asyncRequest();</span><br><span class="line">    &#125;);</span><br><span class="line">    cy.wait(<span class="string">&#x27;@todos&#x27;</span>).its(<span class="string">&#x27;response.body&#x27;</span>).should(<span class="string">&#x27;deep.equal&#x27;</span>, []);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// let&#x27;s add a new item</span></span><br><span class="line">    <span class="keyword">const</span> todo = &#123;<span class="attr">text</span>: <span class="string">&#x27;Todo&#x27;</span>&#125;;</span><br><span class="line">    cy.then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> Api.asyncRequest(POST, <span class="string">&#x27;create&#x27;</span>, todo);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// we can also add new async commands by wrapping</span></span><br><span class="line">    <span class="comment">// the object and using cy.invoke method</span></span><br><span class="line">    cy.wrap(Api).invoke(<span class="string">&#x27;fetchTodos&#x27;</span>);</span><br><span class="line">    <span class="comment">// 1 todo item</span></span><br><span class="line">    cy.wait(<span class="string">&#x27;@todos&#x27;</span>)</span><br><span class="line">      .its(<span class="string">&#x27;response.body&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">      .its(<span class="number">0</span>)</span><br><span class="line">      <span class="comment">// each new todo item gets a random ID</span></span><br><span class="line">      <span class="comment">// and property &quot;done: false&quot; at start</span></span><br><span class="line">      .should(<span class="string">&#x27;deep.include&#x27;</span>, todo)</span><br><span class="line">      .and(<span class="function"><span class="params">todo</span> =&gt;</span> &#123;</span><br><span class="line">        expect(todo).to.have.property(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">        expect(todo).to.have.property(<span class="string">&#x27;done&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The Command Log shows each network spy and Ajax call. We can combine multiple network calls, and can even create hybrid UI + network tests.</p><p><img src="../images/rn-todo/network-test.png" alt="Cypress network test again the backend"></p><p><strong>Tip:</strong> for better API tests using Cypress, see <a href="https://www.cypress.io/blog/2017/11/07/add-gui-to-your-e2e-api-tests/">Add GUI to your E2E API tests</a> and use <a href="https://github.com/bahmutov/cy-api">bahmutov/cy-api</a> plugin.</p><h2><span id="component-testing">Component testing</span></h2><p>Since I have created component testing for React a few years ago, it became part of <a href="https://on.cypress.io/component-testing">Cypress core</a>. I have yet to figure out how to use Metro / Expo web bundler to serve individual React Native components during tests. Stay tuned.</p><h2><span id="help-wanted">Help wanted</span></h2><p>Do you want to help me write and test similar React Native applications at <a href="https://www.mercari.com/">Mercari US</a>? We need every technologist, from the web to the backend, to micro-services, to quality assurance, machine learning, AI, and other buzzwords. All positions are listed at <a href="https://www.mercari.com/careers/">https://www.mercari.com/careers/</a> and are remote in United States and Japan, and I guarantee a healthy professional environment with solid benefits and a huge career potential. If you ping me, I promise to answer your questions and do a referral. <strong>Career tip:</strong> read the blog posts <a href="/blog/help-me-say-yes/" title="Help Me Say Yes">Help Me Say Yes</a> and <a href="/blog/dont-help-me-say-no/" title="Don&#39;t help me say No">Don&#39;t help me say No</a> before applying.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;introduction&quot;&gt;Introduction&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Recently I have read a nice guide to writing unit and integration tests using Jest fo
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="a11y" scheme="https://glebbahmutov.com/blog/tags/a11y/"/>
    
      <category term="react native" scheme="https://glebbahmutov.com/blog/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>Stubbing The Non-configurable</title>
    <link href="https://glebbahmutov.com/blog/stubbing-the-non-configurable/"/>
    <id>https://glebbahmutov.com/blog/stubbing-the-non-configurable/</id>
    <published>2021-06-18T04:00:00.000Z</published>
    <updated>2021-06-18T21:26:09.254Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I have shown how to verify that a React Native application in <a href="https://github.com/bahmutov/expo-cypress-examples">bahmutov/expo-cypress-examples</a> opens the help URL when the user clicks on the help link. The application used the following code:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> WebBrowser <span class="keyword">from</span> <span class="string">&#x27;expo-web-browser&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleHelpPress</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  WebBrowser.openBrowserAsync(</span><br><span class="line">    <span class="string">&#x27;https://docs.expo.io/...&#x27;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The application was tested while running in the browser, served by the Expo tool. I guessed that in the browser, the second window is opened using <code>window.open</code> called somewhere inside the <code>expo-web-browser</code> module. Thus I could prevent the second browser window from opening using the test code below:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;opens the help link in the browser&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">win</span> =&gt;</span> &#123;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;open&#x27;</span>).as(<span class="string">&#x27;open&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  cy.contains(<span class="string">&#x27;[data-testid=help]&#x27;</span>, <span class="string">&#x27;Tap here&#x27;</span>).click()</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">&#x27;https://docs.expo.io/...&#x27;</span></span><br><span class="line">  cy.get(<span class="string">&#x27;@open&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnceWith&#x27;</span>, url, <span class="string">&#x27;_blank&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test works and confirms the application calling the <code>window.open</code> with expected arguments.</p><p><img src="../images/stub-non-conf/window-open.png" alt="Application calls window.open"></p><p>You can see me write the above test in the video <a href="https://youtu.be/MFGQB0nQ2J0">Testing WebBrowser.openBrowserAsync</a>. Except the title is wrong - we are not confirming that the method <code>WebBrowser.openBrowserAsync</code> is called, right? We are confirming <code>window.open</code> is called. Why can&#39;t we directly confirm the <code>WebBrowser.openBrowserAsync</code> method call?</p><h2><span id="stubbing-webbrowseropenbrowserasync-does-not-work">Stubbing WebBrowser.openBrowserAsync - does not work</span></h2><p>Let&#39;s try stubbing the web browser method directly. We can expose the imported <code>WebBrowser</code> object from the application, and the test code can access it.</p><figure class="highlight ts"><figcaption><span>components/EditScreenInfo.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> WebBrowser <span class="keyword">from</span> <span class="string">&#x27;expo-web-browser&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.Cypress) &#123;</span><br><span class="line">  <span class="comment">// application is running inside Cypress test</span></span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  <span class="built_in">window</span>.WebBrowser = WebBrowser</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleHelpPress</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  WebBrowser.openBrowserAsync(</span><br><span class="line">    <span class="string">&#x27;https://docs.expo.io/...&#x27;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From the test we can access the <code>window.WebBrowser.openBrowserAsync</code> method before clicking the link.</p><figure class="highlight ts"><figcaption><span>cypress/integration/spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;calls openBrowserAsync&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;WebBrowser&#x27;</span>).then(<span class="function"><span class="params">WebBrowser</span> =&gt;</span> &#123;</span><br><span class="line">      cy.stub(WebBrowser, <span class="string">&#x27;openBrowserAsync&#x27;</span>).as(<span class="string">&#x27;open&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  cy.contains(<span class="string">&#x27;[data-testid=help]&#x27;</span>, <span class="string">&#x27;Tap here&#x27;</span>).click()</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">&#x27;https://docs.expo.io/...&#x27;</span></span><br><span class="line">  cy.get(<span class="string">&#x27;@open&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnceWith&#x27;</span>, url)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/stub-non-conf/stub-async.png" alt="Stub was not called"></p><p>We can see the second browser window open - so our stub did NOT work. Let&#39;s look at the property we are trying to stub.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  .its(<span class="string">&#x27;WebBrowser&#x27;</span>).then(<span class="function"><span class="params">WebBrowser</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(WebBrowser, <span class="string">&#x27;openBrowserAsync&#x27;</span>))</span><br><span class="line">    cy.stub(WebBrowser, <span class="string">&#x27;openBrowserAsync&#x27;</span>).as(<span class="string">&#x27;open&#x27;</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>When the test runs, open the browser DevTools console, which shows:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;set: undefined, enumerable: true, configurable: false, get: ƒ&#125;</span><br></pre></td></tr></table></figure><p>The property <code>openBrowserAsync</code> cannot be overwritten by the <code>cy.stub</code> method unfortunately. We will need to modify the application code to make this property stubbable.</p><h2><span id="stub-the-wrapper-method">Stub the wrapper method</span></h2><p>We can solve our problem by creating an intermediate object with stubbable methods.</p><figure class="highlight ts"><figcaption><span>cypress/integration/spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> _WebBrowser <span class="keyword">from</span> <span class="string">&#x27;expo-web-browser&#x27;</span>;</span><br><span class="line"><span class="comment">// wrapper that allows stubbing methods</span></span><br><span class="line"><span class="comment">// unlike the expo-web-browser import</span></span><br><span class="line"><span class="keyword">const</span> WebBrowser = &#123; ..._WebBrowser &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.Cypress) &#123;</span><br><span class="line">  <span class="comment">// application is running inside Cypress test</span></span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  <span class="built_in">window</span>.WebBrowser = WebBrowser</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The wrapper <code>WebBrowser</code> that spreads the methods from the imported <code>expo-web-browser</code> module is the key. Let&#39;s run the test again.</p><p><img src="../images/stub-non-conf/wrap.png" alt="The wrapper was stubbed and tested"></p><p>Beautiful.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently I have shown how to verify that a React Native application in &lt;a href=&quot;https://github.com/bahmutov/expo-cypress-examples&quot;&gt;bahmut
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="react native" scheme="https://glebbahmutov.com/blog/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>The Complete Guide to Testing React Native App Using Cypress</title>
    <link href="https://glebbahmutov.com/blog/testing-react-native-app-using-cypress/"/>
    <id>https://glebbahmutov.com/blog/testing-react-native-app-using-cypress/</id>
    <published>2021-06-17T04:00:00.000Z</published>
    <updated>2021-06-21T21:14:53.890Z</updated>
    
    <content type="html"><![CDATA[<p>If your company is evaluating using the <a href="https://reactnative.dev/">React Native</a> technology for developing its native mobile application, you are probably wondering how to write and run the tests. The <a href="https://reactnative.dev/docs/testing-overview">React Native testing docs</a> really only focus on unit testing using Jest running in Node. You cannot see what the application is doing, and if something goes wrong, good luck debugging it.</p><p>For E2E testing, the docs suggest using <a href="https://github.com/wix/detox/">Detox</a> or <a href="http://appium.io/">Appium</a> test runners. These runners require the application to be built before running the tests 🐢. The situation is dire. After inspecting the list of open source React Native apps at <a href="https://github.com/ReactNativeNews/React-Native-Apps">ReactNativeNews/React-Native-Apps</a> I could not find any meaningful tests in great majority of them!</p><p>In this blog post I will explain how to run end-to-end tests against the <em>web form</em> of the React Native application using <a href="https://www.cypress.io/">Cypress.io</a> test runner. After all, you are probably developing the application by using the web form output, loading the app in the browser locally and working against <code>localhost:xxxx</code>. By running Cypress tests, you will see your full web application exercised in the browser, and if all tests pass, then you should build the native apps, and probably run some sanity native mobile tests.</p><blockquote class="pullquote"><p>🤨 But will this kind of testing find all the bugs? I think running end-to-end tests against your application while still in its web form would find most of the errors, such as logical mistakes, unexpected responses from the server, missing styles, etc. If you find a bug that <em>cannot</em> be detected by testing the React Native app in its web form, let me know.</p></blockquote><p>Most of the sections in this post are covered by short videos in my <a href="https://www.youtube.com/watch?v=m0dAL83rnRc&amp;list=PLP9o9QNnQuAZ3xPxrPx1cgFj2GvY1-vq3">Testing React Native Application Using Cypress</a> video playlist. Some of the videos are embedded in the relevant sections of the post.</p><!-- toc --><ul><li><a href="#the-initial-application">The initial application</a></li><li><a href="#the-first-cypress-test">The first Cypress test</a></li><li><a href="#continuous-integration">Continuous integration</a></li><li><a href="#network-control">Network control</a></li><li><a href="#test-the-loading-indicator">Test the loading indicator</a></li><li><a href="#stubbing-network-call">Stubbing network call</a></li><li><a href="#code-coverage">Code coverage</a></li><li><a href="#what-else">What else?</a></li><li><a href="#help-wanted">Help wanted</a></li><li><a href="#see-also">See also</a><ul><li><a href="#blog-posts">Blog posts</a></li><li><a href="#resources">Resources</a></li><li><a href="#react-native-web">react-native-web</a></li><li><a href="#adding-expo-to-react-native-projects">Adding expo to react-native projects</a></li><li><a href="#expo-camera">Expo camera</a></li><li><a href="#code-examples">Code examples</a></li></ul></li></ul><!-- tocstop --><p><strong>Note:</strong> I think the text below gives a good idea of what testing using Cypress is like. If you want an introduction to Cypress, check out one of my <a href="https://slides.com/bahmutov/decks/cypress-introduction">Cypress introduction</a> or the official <a href="https://on.cypress.io/intro">Cypress introduction doc</a>.</p><h2><span id="the-initial-application">The initial application</span></h2><p>To create the application and run it locally, I used <a href="https://expo.io/">Expo</a>.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -g expo-cli</span><br><span class="line">$ expo --version</span><br><span class="line">4.5.2</span><br></pre></td></tr></table></figure><p>Let&#39;s scaffold a new blank &quot;Hello world&quot; project</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ expo init my-react-native-project</span><br></pre></td></tr></table></figure><p>The created application has NPM script commands set up to start the application in the web and native forms.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;expo start&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;android&quot;</span>: <span class="string">&quot;expo start --android&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;ios&quot;</span>: <span class="string">&quot;expo start --ios&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;web&quot;</span>: <span class="string">&quot;expo start --web&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eject&quot;</span>: <span class="string">&quot;expo eject&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>🧭 You can find the source code at <a href="https://github.com/bahmutov/my-react-native-project">bahmutov/my-react-native-project</a></p></blockquote><p>The application&#39;s main (and only) source file is the <code>App.js</code> showing the greeting message:</p><figure class="highlight js"><figcaption><span>App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; StatusBar &#125; <span class="keyword">from</span> <span class="string">&#x27;expo-status-bar&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; StyleSheet, Text, View &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">      &lt;Text&gt;Open up App.js to start working on your app!&lt;/Text&gt;</span><br><span class="line">      &lt;StatusBar style=<span class="string">&quot;auto&quot;</span> /&gt;</span><br><span class="line">    &lt;/View&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    backgroundColor: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    justifyContent: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Looks like a typical React application, doesn&#39;t it? Start the application with <code>npm run web</code> and open the <code>localhost:19006</code> in the local browser. It is a normal web page bundled by Expo using Babel and bringing components from <a href="https://github.com/facebook/react-native#readme">react-native</a> library.</p><p><img src="../images/react-native/app.png" alt="React Native application running in the browser"></p><p>Great, let&#39;s write our first test.</p><h2><span id="the-first-cypress-test">The first Cypress test</span></h2><p><strong>Video:</strong> you can watch me write the first test in the video <a href="https://www.youtube.com/watch?v=m0dAL83rnRc">Testing React Native project using Cypress</a> embedded below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/m0dAL83rnRc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>First, we need to install Cypress</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress</span><br><span class="line">+ cypress@7.5.0</span><br></pre></td></tr></table></figure><p>Next, I will scaffold a bare-bones Cypress project using the <a href="https://github.com/bahmutov/cly">@bahmutov/cly</a> utility. Alternatively, you can open Cypress using <code>npx cypress open</code> command to scaffold the <code>cypress.json</code> file and <code>cypress</code> folder.</p><p>Let&#39;s put our Expo local URL into <code>cypress.json</code> file so our tests know what to load by default.</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;fixturesFolder&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;supportFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;pluginsFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;http://localhost:19006&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s write our first test - let&#39;s assert the text we saw on the page is visible.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;works&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;Open up App.js to start working on your app!&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> the <code>reference types</code> line gives a hint to your code editor to load the type definition for the global <code>cy</code> object, so you have intelligent code completion when hovering over Cypress commands.</p><p>Open Cypress by using <code>npx cypress open</code> while Expo is running the application locally. Click on the &quot;spec.js&quot; file. The test confirms the React Native application shows the expected text.</p><p><img src="../images/react-native/first-test.png" alt="The first test for our React Native App"></p><p><strong>Tip:</strong> you can better simulate the realistic mobile device resolution by setting explicit <code>viewportWidth</code> and <code>viewportHeight</code> configuration options in the <code>cypress.json</code> file.</p><p><strong>Pro tip:</strong> use utility <a href="https://github.com/bahmutov/start-server-and-test">start-server-and-test</a> to run Expo and open Cypress with a single command. The utility will even close Expo when Cypress finishes and exits.</p><h2><span id="continuous-integration">Continuous integration</span></h2><p><strong>Video:</strong> you can watch me run tests on CI in the video <a href="https://www.youtube.com/watch?v=nZnnqX6nMdI">Run Cypress React Native Tests Using GitHub Actions</a> embedded below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/nZnnqX6nMdI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>To run E2E tests on CI, we have <a href="https://on.cypress.io/ci">lots of options</a>. Because I already have the project on GitHub, I will use <a href="/blog/trying-github-actions/" title="GH Actions">GH Actions</a> to run its tests. Here is my workflow file to run the tests on each commit and pull request.</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">End-to-end</span> <span class="string">tests</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>, <span class="string">pull_request</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">cypress-run:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Install NPM dependencies, cache them correctly</span></span><br><span class="line">      <span class="comment"># and run all Cypress tests</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">web</span></span><br><span class="line">          <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:19006&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>Note:</strong> the script <code>npm run web</code> requires Expo CLI installed on the machine. I simply added the <code>expo</code> as a dev dependency to my project.</p><p>From now on, I will try to keep the status checks green to make sure the project always works.</p><p><img src="../images/react-native/ci.png" alt="Successful test run on GitHub Actions"></p><h2><span id="network-control">Network control</span></h2><p><strong>Video:</strong> you can watch me write the network test in the video <a href="https://www.youtube.com/watch?v=ChzzKbpXl9w">Test an Ajax Call From React Native App Using Cypress</a> embedded below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/ChzzKbpXl9w" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Let&#39;s replace our &quot;Hello World&quot; application with an app that fetches the data from the server and displays the list of users.</p><figure class="highlight js"><figcaption><span>App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ActivityIndicator, FlatList, Text, View &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [isLoading, setLoading] = useState(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = useState([]);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    fetch(<span class="string">&#x27;https://jsonplaceholder.cypress.io/users&#x27;</span>)</span><br><span class="line">      .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">      .then(<span class="function">(<span class="params">json</span>) =&gt;</span> setData(json))</span><br><span class="line">      .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="built_in">console</span>.error(error))</span><br><span class="line">      .finally(<span class="function">() =&gt;</span> setLoading(<span class="literal">false</span>));</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;View style=&#123;&#123; <span class="attr">flex</span>: <span class="number">1</span>, <span class="attr">padding</span>: <span class="number">24</span> &#125;&#125;&gt;</span><br><span class="line">      &#123;isLoading ? <span class="xml"><span class="tag">&lt;<span class="name">ActivityIndicator</span>/&gt;</span></span> : (</span><br><span class="line">        &lt;FlatList</span><br><span class="line">          accessibilityLabel=<span class="string">&quot;users&quot;</span></span><br><span class="line">          data=&#123;data&#125;</span><br><span class="line">          keyExtractor=&#123;<span class="function">(<span class="params">&#123; id &#125;, index</span>) =&gt;</span> <span class="built_in">String</span>(id)&#125;</span><br><span class="line">          renderItem=&#123;<span class="function">(<span class="params">&#123; item &#125;</span>) =&gt;</span> (</span><br><span class="line">            &lt;Text testID=<span class="string">&quot;user&quot;</span> accessibilityLabel=<span class="string">&quot;user&quot;</span>&gt;&#123;item.name&#125;, &#123;item.email&#125;&lt;/Text&gt;</span><br><span class="line">          )&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/View&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>The application uses <code>fetch</code> browser API method to make the call. Does the application work? We need to confirm it from our test. I will use the powerful <a href="https://on.cypress.io/intercept">cy.intercept</a> command to spy on the network call. When the call returns, the test can grab the response and confirm the number of users displayed equals the number of users returned.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;loads list of users&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;/users&#x27;</span>).as(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.wait(<span class="string">&#x27;@users&#x27;</span>).its(<span class="string">&#x27;response.body&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.an&#x27;</span>, <span class="string">&#x27;Array&#x27;</span>)</span><br><span class="line">    .and(<span class="string">&#x27;have.length.gt&#x27;</span>, <span class="number">5</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">users</span> =&gt;</span> &#123;</span><br><span class="line">      cy.get(<span class="string">&#x27;[data-testid=user]&#x27;</span>)</span><br><span class="line">        .should(<span class="string">&#x27;have.length&#x27;</span>, users.length)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> I have added <code>testID=&quot;user&quot; accessibilityLabel=&quot;user&quot;</code> props to the <code>&lt;Text&gt;</code> component. These props are rendered as <code>data-testid</code> and <code>aria-label</code> in the web output, which allows the test runner to select the right elements.</p><p><img src="../images/react-native/ajax.png" alt="Confirmed the app fetches and shows the users"></p><h2><span id="test-the-loading-indicator">Test the loading indicator</span></h2><p><strong>Video:</strong> you can watch me write test for the loading indicator in the video <a href="https://www.youtube.com/watch?v=7YoHLJ69ijA">Testing The Loading Indicator by Slowing Down The Request</a> embedded below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/7YoHLJ69ijA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>While the application is loading, there is a brief (well, its depends on the network and server speed) appearance by the loading indicator. The indicator is defined by the application:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;isLoading ? <span class="xml"><span class="tag">&lt;<span class="name">ActivityIndicator</span> <span class="attr">testID</span>=<span class="string">&quot;loading&quot;</span>/&gt;</span></span> : ...&#125;</span><br></pre></td></tr></table></figure><p>Can we verify the loading indicator really shows up and disappears? We can slow down the response by using a <code>cy.intercept</code> request handler that returns a promise.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows loading indicator&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// slow down the response by 1 second</span></span><br><span class="line">  <span class="comment">// https://on.cypress.io/intercept</span></span><br><span class="line">  cy.intercept(<span class="string">&#x27;/users&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// use bundled Bluebird library</span></span><br><span class="line">    <span class="comment">// which has utility method .delay</span></span><br><span class="line">    <span class="comment">// https://on.cypress.io/promise</span></span><br><span class="line">    <span class="keyword">return</span> Cypress.Promise.delay(<span class="number">1000</span>).then(<span class="function">() =&gt;</span> req.continue())</span><br><span class="line">  &#125;).as(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-testid=loading]&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-testid=loading]&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">  cy.wait(<span class="string">&#x27;@users&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/react-native/loading.gif" alt="Testing the loading indicator"></p><p><strong>Tip:</strong> be careful when using negative assertions like <code>.should(&#39;not.exist&#39;)</code> - they can pass for a wrong reason! Read my blog post <a href="/blog/negative-assertions/" title="Be Careful With Negative Assertions">Be Careful With Negative Assertions</a>.</p><h2><span id="stubbing-network-call">Stubbing network call</span></h2><p><strong>Video:</strong> you can watch me stub the network call from the test in the video <a href="https://www.youtube.com/watch?v=3YfgZnlPSNo">Stub Ajax Network Call From The Application Using cy.intercept and Fixture File</a> embedded below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/3YfgZnlPSNo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Sometimes we want to write a front-end test while the back-end is still being developed, or is unavailable. Using <a href="https://on.cypress.io/intercept">cy.intercept</a> and fixtures we can easily <a href="https://on.cypress.io/network-requests">control the network</a>.</p><p>I will save the network response from the server into a JSON file in the Cypress fixture folder</p><figure class="highlight json"><figcaption><span>cypress/fixtures/users.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Leanne Graham&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;Bret&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;email&quot;</span>: <span class="string">&quot;Sincere@april.biz&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Ervin Howell&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;Antonette&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;email&quot;</span>: <span class="string">&quot;Shanna@melissa.tv&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Clementine Bauch&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;Samantha&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;email&quot;</span>: <span class="string">&quot;Nathan@yesenia.net&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>From the test, we can stub the network call by specifying the fixture file as the response.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows mock data&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;/users&#x27;</span>, &#123; <span class="attr">fixture</span>: <span class="string">&#x27;users.json&#x27;</span> &#125;).as(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-testid=user]&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test above fully controls the data, thus it can make very precise assertions, like the number of users shown by the app.</p><p><img src="../images/react-native/stub.png" alt="Test that uses network stub"></p><p><strong>Tip:</strong> by using a network stub we can simplify our loading indicator test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows loading indicator (mock)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;/users&#x27;</span>, &#123;</span><br><span class="line">    fixture: <span class="string">&#x27;users.json&#x27;</span>, <span class="attr">delay</span>: <span class="number">1000</span></span><br><span class="line">  &#125;).as(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-testid=loading]&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-testid=loading]&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-testid=user]&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/react-native/delay-stub.gif" alt="Delayed stub response to test the loading indicator"></p><p>Beautiful.</p><h2><span id="code-coverage">Code coverage</span></h2><p><strong>Video:</strong> you can watch me achieve 100% code coverage through end-to-end tests in the video <a href="https://www.youtube.com/watch?v=Yaxi26X2wyg">Adding Code Coverage To React Native Tests</a> embedded below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/Yaxi26X2wyg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>We can write a lot of tests, but did we cover all major application features? Are there parts of the code still not covered by the tests? Are there edge cases that remain hidden from the tests, ready to strike? Let&#39;s make sure our tests are complete by collecting the code coverage information during our tests.</p><p>Good news: end-to-end tests are extremely effective at covering a lot of code really quickly.</p><p>To generate the code coverage reports, I will follow the <a href="https://on.cypress.io/code-coverage">Cypress code coverage guide</a>. We need to instrument the application source code with the statement, line, branch, and function counters, luckily there is a Babel plugin for this.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D babel-plugin-istanbul</span><br><span class="line">+ babel-plugin-istanbul@6.0.0</span><br></pre></td></tr></table></figure><p>Now let&#39;s update the Babel config file to insert the above plugin into the Expo&#39;s code transformation pipeline.</p><figure class="highlight js"><figcaption><span>babel.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">api</span>) </span>&#123;</span><br><span class="line">  api.cache(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    presets: [<span class="string">&#x27;babel-preset-expo&#x27;</span>],</span><br><span class="line">    plugins: [<span class="string">&#x27;istanbul&#x27;</span>]</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> you can conditionally load the code instrumentation plugin only during end-to-end testing.</p><figure class="highlight js"><figcaption><span>babel.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">api</span>) </span>&#123;</span><br><span class="line">  api.cache(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    presets: [<span class="string">&#x27;babel-preset-expo&#x27;</span>],</span><br><span class="line">    <span class="comment">// only instrument the application when</span></span><br><span class="line">    <span class="comment">// the environment variable TEST is set</span></span><br><span class="line">    plugins: process.env.TEST ? [<span class="string">&#x27;istanbul&#x27;</span>] : []</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>You can verify the code coverage is working by opening the browser&#39;s DevTools and checking the <code>window.__coverage__</code> property.</p><p><img src="../images/react-native/coverage-object.png" alt="The application code has been instrumented"></p><p>Now let&#39;s generate the code coverage reports after the tests finish. To do this, install the <a href="https://github.com/cypress-io/code-coverage">Cypress code coverage plugin</a>.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D @cypress/code-coverage</span><br><span class="line">+ @cypress/code-coverage@3.9.6</span><br></pre></td></tr></table></figure><p>To use the plugin during the tests, we need to use <a href="https://on.cypress.io/writing-and-organizing-tests#Support-file">Cypress support</a> and <a href="https://on.cypress.io/writing-and-organizing-tests#Plugin-file">plugin</a> files.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@cypress/code-coverage/support&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;@cypress/code-coverage/task&#x27;</span>)(on, config)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// add other tasks to be registered here</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// IMPORTANT to return the config object</span></span><br><span class="line">  <span class="comment">// with the any changed environment variables</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s start the tests. We will see additional log messages from the code coverage commands.</p><p><img src="../images/react-native/coverage-log.png" alt="The normal messages from the code coverage plugin"></p><p>After the tests finish, you can find the coverage results in several formats in the folder &quot;coverage&quot;.</p><p><strong>Tip:</strong> ignore the intermediate code coverage results and the generated folder</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git ignore .nyc_output/ coverage/</span><br><span class="line">Adding pattern(s) to: .gitignore</span><br><span class="line">... adding &#x27;.nyc_output/&#x27;</span><br><span class="line">... adding &#x27;coverage/&#x27;</span><br></pre></td></tr></table></figure><p>Load the static HTML report in your browser with <code>open coverage/lcov-report/index.html</code>. It shows the single source file covered at 90% by our tests.</p><p><img src="../images/react-native/coverage-report.png" alt="The coverage summary"></p><p>Drill into the file report and see the statements NOT covered by our tests marked in red:</p><p><img src="../images/react-native/coverage-file-report.png" alt="The file coverage report shows lines covered and missed"></p><p>Looks like our tests missed an important application behavior - handling the error response from the server. Good thing the code coverage told us about it. Let&#39;s write a test that simulates a network error during the application&#39;s Ajax request.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;handles network error&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;/users&#x27;</span>, &#123; <span class="attr">forceNetworkError</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  <span class="comment">// observe the application&#x27;s behavior</span></span><br><span class="line">  <span class="comment">// in our case, the app simply logs the error</span></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.spy(win.console, <span class="string">&#x27;error&#x27;</span>).as(<span class="string">&#x27;logError&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.get(<span class="string">&#x27;@logError&#x27;</span>).should(<span class="string">&#x27;have.been.called&#x27;</span>)</span><br><span class="line">  <span class="comment">// confirm the loading indicator goes away</span></span><br><span class="line">  cy.get(<span class="string">&#x27;[data-testid=loading]&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>When all tests run, the code coverage shows 100% coverage.</p><p><img src="../images/react-native/coverage-full.png" alt="The tests cover the entire application"></p><p>Just remember, the full code coverage is easy to achieve using Cypress tests, but it does not guarantee the application has zero bugs or does what the user needs.</p><p><strong>See also:</strong> my other <a href="../tags/code-coverage/">code coverage posts</a> and <a href="https://www.cypress.io/blog/2021/01/22/webcast-recording-ship-safer-code-with-cypress-and-codecov/">Cypress Codecov webinar</a>.</p><h2><span id="what-else">What else?</span></h2><p>If you are worried about visual regressions in your application, these Cypress tests can implement <a href="https://on.cypress.io/visual-testing">visual testing</a> using open-source or commercial plugins.</p><p>You can make sure the edge cases are covered by adding API tests as needed (probably guided by the code coverage reports).</p><p>Finally, I will be looking at using the <a href="https://on.cypress.io/component-testing">Cypress component testing</a> together with React Native libraries to perform the component testing in isolation.</p><blockquote class="pullquote"><p>🧭 You can find the source code at <a href="https://github.com/bahmutov/my-react-native-project">bahmutov/my-react-native-project</a></p></blockquote><h2><span id="help-wanted">Help wanted</span></h2><p>Do you want to help me write and test similar React Native applications at <a href="https://www.mercari.com/">Mercari US</a>? We need every technologist, from the web to the backend, to micro-services, to quality assurance, machine learning, AI, and other buzzwords. All positions are listed at <a href="https://www.mercari.com/careers/">https://www.mercari.com/careers/</a> and are remote in United States and Japan, and I guarantee a healthy professional environment with solid benefits and a huge career potential. If you ping me, I promise to answer your questions and do a referral. <strong>Career tip:</strong> read the blog posts <a href="/blog/help-me-say-yes/" title="Help Me Say Yes">Help Me Say Yes</a> and <a href="/blog/dont-help-me-say-no/" title="Don&#39;t help me say No">Don&#39;t help me say No</a> before applying.</p><h2><span id="see-also">See also</span></h2><h3><span id="blog-posts">Blog posts</span></h3><ul><li><a href="/blog/testing-rn-todo-app/" title="Testing React Native Todo Application Using Cypress">Testing React Native Todo Application Using Cypress</a></li></ul><h3><span id="resources">Resources</span></h3><p>The only other resource on testing React Native apps using Cypress I could find was the article <a href="https://justinnoel.dev/2019/12/27/e2e-testing-of-react-native-apps-using-cypress/">E2E Testing of React Native Apps using Cypress</a> by the most awesome <a href="https://justinnoel.dev/author/justin/">Justin Noel</a>.</p><h3><span id="react-native-web">react-native-web</span></h3><p>I have also looked at adding Cypress tests to RN project that uses <a href="https://necolas.github.io/react-native-web/">react-native-web</a> to run in the browser. Find the code and linked videos at <a href="https://github.com/bahmutov/react-native-web-example">bahmutov/react-native-web-example</a>.</p><h3><span id="adding-expo-to-react-native-projects">Adding expo to react-native projects</span></h3><p>You can add Expo to an existing react-native project, see <a href="https://github.com/bahmutov/react-native-to-expo">bahmutov/react-native-to-expo</a> repo. Then you can start using Cypress to run E2E tests.</p><h3><span id="expo-camera">Expo camera</span></h3><p>I have experimented with mocking <a href="https://docs.expo.io/versions/latest/sdk/camera/">Expo Camera</a> control in <a href="https://github.com/bahmutov/expo-camera-test">bahmutov/expo-camera-test</a>. Currently, it seems we can mock native methods when needed.</p><h3><span id="code-examples">Code examples</span></h3><p>For more source code examples, check out GitHub topic <a href="https://github.com/topics/cypress-react-native-example">cypress-react-native-example</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If your company is evaluating using the &lt;a href=&quot;https://reactnative.dev/&quot;&gt;React Native&lt;/a&gt; technology for developing its native mobile a
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="react native" scheme="https://glebbahmutov.com/blog/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>Run Two Cypress Test Runners At The Same Time</title>
    <link href="https://glebbahmutov.com/blog/run-two-cypress-runners/"/>
    <id>https://glebbahmutov.com/blog/run-two-cypress-runners/</id>
    <published>2021-06-12T04:00:00.000Z</published>
    <updated>2021-06-28T13:28:34.138Z</updated>
    
    <content type="html"><![CDATA[<p>Please start by reading the blog post <a href="/blog/test-socketio-chat-using-cypress/" title="Test a Socket.io Chat App using Cypress">Test a Socket.io Chat App using Cypress</a>. In this blog post we will run two Cypress test runners concurrently without any synchronization between them to test a real-time chat application.</p><p><img src="../images/two-cy/chat2.png" alt="Two Cypress test runners chatting with each other"></p><h2><span id="separate-specs">Separate specs</span></h2><p>First, we want to give each Cypress test runner its own configuration and the spec to run. While the first Cypress test runner executes the spec file <code>cypress/pair/first-user.js</code>, the second Cypress test runner should execute the spec file <code>cypress/pair/second-user.js</code>.</p><figure class="highlight js"><figcaption><span>cypress/pair/first-user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// this test behaves as the first user to join the chat</span></span><br><span class="line">it(<span class="string">&#x27;chats with the second user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">&#x27;First&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> secondName = <span class="string">&#x27;Second&#x27;</span></span><br><span class="line"></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(name)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// make sure the greeting message is shown</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;name&#125;</span> join the chat..`</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// at some point, the second user enters the chat and posts a message</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, <span class="string">&#x27;Good to see you&#x27;</span>)</span><br><span class="line">    .contains(<span class="string">&#x27;strong&#x27;</span>, secondName)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// reply to the second user</span></span><br><span class="line">  cy.get(<span class="string">&#x27;#txt&#x27;</span>).type(<span class="string">&#x27;Glad to be here&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, <span class="string">&#x27;Glad to be here&#x27;</span>)</span><br><span class="line">    .contains(<span class="string">&#x27;strong&#x27;</span>, name)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The second user&#39;s spec sends the opposite message:</p><figure class="highlight js"><figcaption><span>cypress/pair/second-user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// this test behaves as the second user to join the chat</span></span><br><span class="line">it(<span class="string">&#x27;chats with the first user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">&#x27;Second&#x27;</span></span><br><span class="line">  <span class="comment">// we are chatting with the first user</span></span><br><span class="line">  <span class="keyword">const</span> firstName = <span class="string">&#x27;First&#x27;</span></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(name)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// make sure the greeting message is shown</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;name&#125;</span> join the chat..`</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;#txt&#x27;</span>).type(<span class="string">&#x27;Good to see you&#123;enter&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// a message from the first user arrives</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, <span class="string">&#x27;Glad to be here&#x27;</span>)</span><br><span class="line">    .contains(<span class="string">&#x27;strong&#x27;</span>, firstName)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="the-configuration-files">The configuration files</span></h2><p>To precisely control the test runners, each instance will have its own configuration file. The first test runner will use <code>cy-first-user.json</code> file.</p><figure class="highlight json"><figcaption><span>cy-first-user.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;fixturesFolder&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;supportFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;pluginsFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;http://localhost:8080&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;integrationFolder&quot;</span>: <span class="string">&quot;cypress/pair&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;testFiles&quot;</span>: <span class="string">&quot;**/first-user.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;viewportWidth&quot;</span>: <span class="number">400</span>,</span><br><span class="line">  <span class="attr">&quot;viewportHeight&quot;</span>: <span class="number">400</span>,</span><br><span class="line">  <span class="attr">&quot;defaultCommandTimeout&quot;</span>: <span class="number">15000</span>,</span><br><span class="line">  <span class="attr">&quot;videosFolder&quot;</span>: <span class="string">&quot;cypress/videos-pair/first&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;screenshotsFolder&quot;</span>: <span class="string">&quot;cypress/screenshots-pair/first&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;$schema&quot;</span>: <span class="string">&quot;https://on.cypress.io/cypress.schema.json&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The property <code>$schema</code> allows the modern code editors to apply <a href="/blog/json-schema-for-the-win/" title="custom JSON schema">custom JSON schema</a> to the configuration file and show intelligent code popups for the fields.</p><p>The second configuration file is almost identical.</p><figure class="highlight json"><figcaption><span>cy-second-user.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;fixturesFolder&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;supportFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;pluginsFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;http://localhost:8080&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;integrationFolder&quot;</span>: <span class="string">&quot;cypress/pair&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;testFiles&quot;</span>: <span class="string">&quot;**/second-user.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;viewportWidth&quot;</span>: <span class="number">400</span>,</span><br><span class="line">  <span class="attr">&quot;viewportHeight&quot;</span>: <span class="number">400</span>,</span><br><span class="line">  <span class="attr">&quot;defaultCommandTimeout&quot;</span>: <span class="number">15000</span>,</span><br><span class="line">  <span class="attr">&quot;videosFolder&quot;</span>: <span class="string">&quot;cypress/videos-pair/second&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;screenshotsFolder&quot;</span>: <span class="string">&quot;cypress/screenshots-pair/second&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;$schema&quot;</span>: <span class="string">&quot;https://on.cypress.io/cypress.schema.json&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>While running two Cypress instances, we are not using any plugins or custom commands, thus we disable the fixtures, the support files, and the plugins file.</li><li>We use a custom integration folder to separate the two concurrent specs from any other any other individual specs. We also set the explicit single test file for each runner.</li><li>We increase the default command timeout because it might take a while to start the second test runner.</li><li>We use separate folders and videos to avoid each test runner clobbering the common folder on start.</li></ol><blockquote class="pullquote"><p><strong>Tip:</strong> we could have used <a href="https://github.com/bahmutov/cypress-extends">cypress-extends</a> plugin to reuse the common configuration data, but I prefer to be explicit in these examples for clarity.</p></blockquote><p>Now we can manually start the application, open the first Cypress instance with <code>npx cypress open --config-file cy-first-user.json</code>, then open the second Cypress instance with <code>npx cypress open --config-file cy-second-user.json</code> command. The tests pass:</p><p><img src="../images/two-cy/tests.png" alt="The first and the second tests"></p><h2><span id="running-concurrently">Running concurrently</span></h2><p>To execute the two test runners together, we can install NPM module <a href="https://github.com/kimmobrunfeldt/concurrently#readme">concurrently</a></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D concurrently</span><br><span class="line">+ concurrently@6.2.0</span><br></pre></td></tr></table></figure><p>Let&#39;s define common scripts in the <a href="https://github.com/bahmutov/cypress-socketio-chat/blob/main/package.json">package.json</a> file</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;node .&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cy:first&quot;</span>: <span class="string">&quot;cypress run --config-file cy-first-user.json&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cy:second&quot;</span>: <span class="string">&quot;cypress run --config-file cy-second-user.json&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;chat&quot;</span>: <span class="string">&quot;concurrently npm:cy:first npm:cy:second&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Whenever we need to run the tests, we start the application and call <code>npm run chat</code>. The <code>concurrently</code> module shows the output from each instance prefixed by the command&#39;s name:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$ npm start &amp;</span><br><span class="line">$ npm run chat</span><br><span class="line"></span><br><span class="line">&gt; cypress-socketio-chat@1.0.0 chat /Users/gleb/git/cypress-socketio-chat</span><br><span class="line">&gt; concurrently npm:cy:first npm:cy:second</span><br><span class="line"></span><br><span class="line">[cy:first]</span><br><span class="line">[cy:first] &gt; cypress-socketio-chat@1.0.0 cy:first /Users/gleb/git/cypress-socketio-chat</span><br><span class="line">[cy:first] &gt; cypress run --config-file cy-first-user.json</span><br><span class="line">[cy:first]</span><br><span class="line">[cy:second]</span><br><span class="line">[cy:second] &gt; cypress-socketio-chat@1.0.0 cy:second /Users/gleb/git/cypress-socketio-chat</span><br><span class="line">[cy:second] &gt; cypress run --config-file cy-second-user.json</span><br><span class="line">[cy:second]</span><br><span class="line">[cy:second]</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[cy:first]</span><br><span class="line">[cy:first]</span><br><span class="line">[cy:second]        Spec                                              Tests  Passing  Failing  Pending  Skipped</span><br><span class="line">[cy:second]   ┌────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">[cy:second]   │ ✔  second-user.js                           00:01        1        1        -        -        - │</span><br><span class="line">[cy:second]   └────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line">[cy:second]     ✔  All specs passed!                        00:01        1        1        -        -        -</span><br><span class="line">[cy:second]</span><br><span class="line">[cy:first]        Spec                                              Tests  Passing  Failing  Pending  Skipped</span><br><span class="line">[cy:first]   ┌────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">[cy:first]   │ ✔  first-user.js                            00:01        1        1        -        -        - │</span><br><span class="line">[cy:first]   └────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line">[cy:first]     ✔  All specs passed!                        00:01        1        1        -        -        -</span><br><span class="line">[cy:first]</span><br><span class="line">[cy:first] npm run cy:first exited with code 0</span><br><span class="line">[cy:second] npm run cy:second exited with code 0</span><br></pre></td></tr></table></figure><p>We can watch the video saved by each test runner. We can even run the E2E tests on CI. I am using GitHub Actions, first running all E2E tests, then running the two Cypress instances:</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">code</span> <span class="string">🛎</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># install dependencies, start the app,</span></span><br><span class="line"><span class="comment"># and run E2E tests using Cypress GitHub action</span></span><br><span class="line"><span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:8080&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># run two Cypress instances at the same time</span></span><br><span class="line"><span class="comment"># so they truly chat with each other</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="number">2</span> <span class="string">Cypresses</span> <span class="string">🧪</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="comment"># we already have installed everything</span></span><br><span class="line">    <span class="attr">install:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># the application is running already</span></span><br><span class="line">    <span class="comment"># from the previous &quot;start&quot; command</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">chat</span></span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> sometimes starting two Cypress instances creates a race condition while starting the X11 server. A more robust approach would start a separate XServer, then start two Cypress runners.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/test-socketio-chat-using-cypress/" title="Test a Socket.io Chat App using Cypress">Test a Socket.io Chat App using Cypress</a></li><li><a href="/blog/sync-two-cypress-runners/" title="Sync Two Cypress Runners via Checkpoints">Sync Two Cypress Runners via Checkpoints</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Please start by reading the blog post &lt;a href=&quot;/blog/test-socketio-chat-using-cypress/&quot; title=&quot;Test a Socket.io Chat App using Cypress&quot;&gt;T
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress vs Other Test Runners</title>
    <link href="https://glebbahmutov.com/blog/cypress-vs-other-test-runners/"/>
    <id>https://glebbahmutov.com/blog/cypress-vs-other-test-runners/</id>
    <published>2021-06-10T04:00:00.000Z</published>
    <updated>2021-07-03T14:26:36.195Z</updated>
    
    <content type="html"><![CDATA[<p>Note: the diagram in this blog post is similar to the diagram used by <a href="https://github.com/rainerhahnekamp">Rainer Hahnekamp</a> in his presentation <a href="https://www.rainerhahnekamp.com/en/angular-e2e-testing-protractor-is-dead-long-live-cypress/">Angular &amp; Cypress</a>.</p><p>The browser automation end-to-end (E2E) test runners are very different in their architecture. I think they can broadly be categorized in three categories depending on how they communicate and control the browser and the application under the test.</p><p><img src="../images/protocols/protocols1.png" alt="End-to-end test runners and how they control the browser"></p><ol><li><p>WebDriver protocol is a HTTP JSON protocol that sends the commands from the test runner to the browser, see <a href="https://webdriver.io/docs/automationProtocols/">1</a>. The most important part that makes it different from Cypress is that it is a &quot;wire protocol as a way for out-of-process programs to remotely instruct the behavior of web browsers.&quot; Thus the test is running outside of the application running in the browser. Most browsers implement this protocol, thus the test runners using this protocol can provide the widest cross-browser testing.</p></li><li><p>The DevTools protocol like Chrome debugger protocol (CDP) uses WebSocket connection to communicate from the test runner to the browser. The browser can expose a lot more via CDP, but this protocol is driven by Chrome and is partially implemented by Firefox. Again, the test runner runs in the separate process from the browser.</p></li><li><p>JavaScript loaded in the same browser tab as the application, and running in the same event loop. The tests and the app share the same process and domain, thus the test can directly access the DOM, the application&#39;s objects, and the browser APIs. By sharing the event loop, the test and the app &quot;take turns&quot;: when the test code is running, the application is paused. When the application is running, the test code is waiting. This guarantees that the application does not change between the test steps; when the test has located an element, that element cannot suddenly disappear right before the test clicks on it.</p></li></ol><p>Cypress loads its test code in the test iframe, while the application is running in another iframe in the same browser tab. This gives the test code direct access to the application and most of the browser APIs the application can use.</p><p><img src="../images/protocols/proxy.png" alt="Cypress test code controls the application directly from the same browser tab"></p><p>For example, the spec code can stub the <code>navigator</code> object to <a href="/blog/stub-navigator-api/" title="Mock the battery level">Mock the battery level</a> during test:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;calls navigator.getBattery&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> mockBatteryInfo = &#123;</span><br><span class="line">    level: <span class="number">0.75</span>,</span><br><span class="line">    charging: <span class="literal">true</span>,</span><br><span class="line">    chargingTime: <span class="number">1800</span>, <span class="comment">// seconds</span></span><br><span class="line">    dischargingTime: <span class="literal">Infinity</span>,</span><br><span class="line">    addEventListener: <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    onBeforeLoad (win) &#123;</span><br><span class="line">      <span class="keyword">delete</span> win.navigator.battery</span><br><span class="line">      <span class="comment">// we can create Cypress stub and check</span></span><br><span class="line">      <span class="comment">// that is is really being called by the application code</span></span><br><span class="line">      win.navigator.getBattery = cy</span><br><span class="line">        .stub()</span><br><span class="line">        .resolves(mockBatteryInfo)</span><br><span class="line">        .as(<span class="string">&#x27;getBattery&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.contains(<span class="string">&#x27;.battery-percentage&#x27;</span>, <span class="string">&#x27;75%&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  <span class="comment">// ensure our stub has been called by the application</span></span><br><span class="line">  cy.get(<span class="string">&#x27;@getBattery&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>When the test runs, the mocked methods are invoked by the application.</p><p><img src="../images/battery/get-battery2.png" alt="Mocking browser APIs from the test"></p><h2><span id="current-trends">Current trends</span></h2><p>I believe (and I am trying not to run afoul of my own rule <a href="../common-documentation-mistakes-and-how-to-avoid-them/#do-not-compare-yourself-to-other-tools">Do not compare yourself to other tools</a>) that currently Selenium and WebDriver.io are trying to go beyond JSON HTTP to using a bidirectional WebSocket protocol similar to CDP.</p><p>On the other hand, Playwright team is hard at work patching the Firefox and WebKit to allow CDP to work with all major browsers.</p><p>Finally, Cypress has CDP support built-in already. Yup, it is there - this is how Cypress tells the browser to visit an URL or how Cypress sets cookies from the test. These actions cannot be done from the &quot;regular&quot; JavaScript code and require a privileged access to work. You too can use CDP from Cypress tests, see the <a href="/blog/cypress-automation/" title="Cypress Automation">Cypress Automation</a> blog post. Note: we still need to expose <a href="https://github.com/cypress-io/cypress/issues/7942">listening to CDP events</a> for full feature support.</p><p>Taking it all together, the current state of the browser automation protocols is:</p><p><img src="../images/protocols/current.png" alt="Current state of browser automation from E2E test runners"></p><p>Happy testing!</p><h2><span id="see-also">See also</span></h2><p>I thought this blog post is pretty thorough and surveys all e2e test runners pretty well <a href="https://ekremkurt1907.medium.com/which-automation-tool-is-the-best-selenium-cypress-webdriverio-testcafe-playwright-c56c6f22df1f">Which Automation Tool is the Best: Selenium Web Driver| Cypress | WebdriverIO | TestCafe | Playwright</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Note: the diagram in this blog post is similar to the diagram used by &lt;a href=&quot;https://github.com/rainerhahnekamp&quot;&gt;Rainer Hahnekamp&lt;/a&gt; i
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Test a Socket.io Chat App using Cypress</title>
    <link href="https://glebbahmutov.com/blog/test-socketio-chat-using-cypress/"/>
    <id>https://glebbahmutov.com/blog/test-socketio-chat-using-cypress/</id>
    <published>2021-06-09T04:00:00.000Z</published>
    <updated>2021-06-28T13:28:05.864Z</updated>
    
    <content type="html"><![CDATA[<p>This is the first blog post showing how to test a <a href="https://socket.io/">Socket.io</a> real-time chat using the <a href="https://www.cypress.io/">Cypress.io</a> test runner. Subscribe to the <a href="../atom.xml">Atom RSS feed</a> and follow <a href="https://twitter.com/bahmutov">@bahmutov</a> to learn when the new parts are published.</p><!-- toc --><ul><li><a href="#the-app">The app</a></li><li><a href="#the-first-test">The first test</a></li><li><a href="#use-a-random-user-name">Use a random user name</a></li><li><a href="#sending-events-from-the-test">Sending events from the test</a></li><li><a href="#use-socketio-from-cypress">Use Socket.io from Cypress</a></li><li><a href="#verify-message-received-by-the-second-user">Verify message received by the second user</a></li><li><a href="#test-user-leaving-the-chat">Test user leaving the chat</a></li><li><a href="#alternative-connect-to-the-socketio-server-from-the-spec-file">Alternative: connect to the Socket.io server from the spec file</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><h2><span id="the-app">The app</span></h2><p>As the example app, I used the chat app from <a href="https://github.com/dkhd/node-group-chat">dkhd/node-group-chat</a> repo, as described in <a href="https://itnext.io/build-a-group-chat-app-in-30-lines-using-node-js-15bfe7a2417b">Build A Group-Chat App in 30 Lines Using Node.js</a> blog post. The app allows you to open multiple chat browser windows and exchange group messages.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br><span class="line"></span><br><span class="line">&gt; cypress-socketio-chat@1.0.0 start &#x2F;Users&#x2F;gleb&#x2F;git&#x2F;cypress-socketio-chat</span><br><span class="line">&gt; node .</span><br><span class="line"></span><br><span class="line">listening on *:8080</span><br><span class="line">new connection</span><br><span class="line">set username Joe</span><br><span class="line">new connection</span><br><span class="line">set username Ann</span><br><span class="line">&gt; Joe: Hi there, Ann</span><br><span class="line">&gt; Ann: Good to see you, Joe</span><br></pre></td></tr></table></figure><p><img src="../images/chat-intro/chat-two.png" alt="Two users chatting"></p><p>The server is relaying the messages from the users, the front end code is using event subscriptions to display new messages.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../socket.io/socket.io.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;messages&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">id</span>=<span class="string">&quot;chatForm&quot;</span>&gt;</span></span><br><span class="line">    &lt;input</span><br><span class="line">      id=&quot;txt&quot;</span><br><span class="line">      autocomplete=&quot;off&quot;</span><br><span class="line">      autofocus=&quot;on&quot;</span><br><span class="line">      placeholder=&quot;type your message here...&quot;</span><br><span class="line">    /&gt;<span class="tag">&lt;<span class="name">button</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> socket = io.connect(<span class="string">&#x27;http://localhost:8080&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="comment">// submit text message without reload/refresh the page</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;form&#x27;</span>).submit(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      e.preventDefault() <span class="comment">// prevents page reloading</span></span></span><br><span class="line"><span class="javascript">      socket.emit(<span class="string">&#x27;chat_message&#x27;</span>, $(<span class="string">&#x27;#txt&#x27;</span>).val())</span></span><br><span class="line"><span class="javascript">      $(<span class="string">&#x27;#txt&#x27;</span>).val(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    socket.on(<span class="string">&#x27;chat_message&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span></span></span><br><span class="line"><span class="javascript">      $(<span class="string">&#x27;#messages&#x27;</span>).append($(<span class="string">&#x27;&lt;li&gt;&#x27;</span>).html(msg)),</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="javascript">    socket.on(<span class="string">&#x27;is_online&#x27;</span>, <span class="function">(<span class="params">username</span>) =&gt;</span></span></span><br><span class="line"><span class="javascript">      $(<span class="string">&#x27;#messages&#x27;</span>).append($(<span class="string">&#x27;&lt;li&gt;&#x27;</span>).html(username)),</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// ask username</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> username = prompt(<span class="string">&#x27;Please tell me your name&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    socket.emit(<span class="string">&#x27;username&#x27;</span>, username)</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Note:</strong> you can find the source code for the app, and the tests in the repo <a href="https://github.com/bahmutov/cypress-socketio-chat">bahmutov/cypress-socketio-chat</a>.</p><h2><span id="the-first-test">The first test</span></h2><p>Even if there is a single user, the chat application is showing every message. Thus our first test can confirm the submitted messages appear.</p><figure class="highlight js"><figcaption><span>cypress/integration/first-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;shows the message&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// when the application asks for the name</span></span><br><span class="line">      <span class="comment">// return &quot;Cy&quot; using https://on.cypress.io/stub</span></span><br><span class="line">      cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(<span class="string">&#x27;Cy&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.get(<span class="string">&#x27;#txt&#x27;</span>).type(<span class="string">&#x27;Hello there&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, <span class="string">&#x27;Hello there&#x27;</span>).contains(<span class="string">&#x27;strong&#x27;</span>, <span class="string">&#x27;Cy&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> to start the server and open Cypress when the <code>localhost:8080</code> responds I use <a href="https://github.com/bahmutov/start-server-and-test">start-server-and-test</a> utility.</p><p><img src="../images/chat-intro/first-test.png" alt="First test passing"></p><p>As soon as I have the first Cypress test passing, I configure the <a href="https://on.cypress.io/ci">continuous integration</a> service to test every commit. In this repo, I will be using <a href="https://github.com/cypress-io/github-action">Cypress GitHub Action</a> to run the tests, see <a href="https://github.com/bahmutov/cypress-socketio-chat/blob/main/.github/workflows/ci.yml">.github/workflows/ci.yml</a> file:</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">code</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># install dependencies, start the app,</span></span><br><span class="line">      <span class="comment"># and run E2E tests using Cypress GitHub action</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">wait:</span> <span class="string">&#x27;http://localhost:8080&#x27;</span></span><br></pre></td></tr></table></figure><p>You can find the CI runs at <a href="https://github.com/bahmutov/cypress-socketio-chat/actions">bahmutov/cypress-socketio-chat/actions</a>.</p><p><img src="../images/chat-intro/runs.png" alt="Test runs on CI using GitHub Actions"></p><h2><span id="use-a-random-user-name">Use a random user name</span></h2><p>We are working towards testing the full chat, thus we will have multiple users. To avoid every test typing the same <code>Cy</code> name, let&#39;s create the user names randomly using the bundled <a href="https://on.cypress.io/_">Lodash</a> library.</p><figure class="highlight js"><figcaption><span>cypress/integration/random-name-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;chats&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">`Cy_<span class="subst">$&#123;Cypress._.random(<span class="number">1000</span>)&#125;</span>`</span></span><br><span class="line">  <span class="comment">// we can make text bold using Markdown &quot;**&quot;</span></span><br><span class="line">  cy.log(<span class="string">`User **<span class="subst">$&#123;name&#125;</span>**`</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(name)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.get(<span class="string">&#x27;#txt&#x27;</span>).type(<span class="string">&#x27;Hello there&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, <span class="string">&#x27;Hello there&#x27;</span>).contains(<span class="string">&#x27;strong&#x27;</span>, name)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/chat-intro/random.png" alt="Using a randomly generates user name"></p><blockquote class="pullquote"><p>🌍 Notice the name <code>Cy_350</code> in the command log. By coincidence <a href="https://350.org/">350.org</a> is a climate organization fighting to bring us back to 350 parts per million (ppm) of carbon dioxide gas (CO2) in the atmosphere - which is the safe limit. Currently we are at <a href="https://research.noaa.gov/article/ArtMID/587/ArticleID/2764/Coronavirus-response-barely-slows-rising-carbon-dioxide">420 ppm</a> - a level of this greenhouse planet-warming gas we had 4 million years ago, when the average temperatures were 3C / 7F higher, and the sea level were higher by 26m / 70 feet. Plan your future with this in mind.</p></blockquote><h2><span id="sending-events-from-the-test">Sending events from the test</span></h2><p>We need to see what happens when some other user joins the chat and sends a message. Because this communication happens over WebSockets, we cannot simply use <a href="https://on.cypress.io/intercept">cy.intercept</a>, at least not in v7. But let&#39;s see what happens <em>immediately</em> after a new message arrives via a socket channel:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">socket.on(<span class="string">&#x27;chat_message&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span></span><br><span class="line">  $(<span class="string">&#x27;#messages&#x27;</span>).append($(<span class="string">&#x27;&lt;li&gt;&#x27;</span>).html(msg)),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">socket.on(<span class="string">&#x27;is_online&#x27;</span>, <span class="function">(<span class="params">username</span>) =&gt;</span></span><br><span class="line">  $(<span class="string">&#x27;#messages&#x27;</span>).append($(<span class="string">&#x27;&lt;li&gt;&#x27;</span>).html(username)),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>We want to trigger those events from the test. The simplest way is to create an object abstraction between the <code>socket</code> and the rest of the code.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> socket = io.connect(<span class="string">&#x27;http://localhost:8080&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clientActions = &#123;</span><br><span class="line">  <span class="function"><span class="title">onChatMessage</span>(<span class="params">msg</span>)</span> &#123;</span><br><span class="line">    $(<span class="string">&#x27;#messages&#x27;</span>).append($(<span class="string">&#x27;&lt;li&gt;&#x27;</span>).html(msg))</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">isOnline</span>(<span class="params">username</span>)</span> &#123;</span><br><span class="line">    $(<span class="string">&#x27;#messages&#x27;</span>).append($(<span class="string">&#x27;&lt;li&gt;&#x27;</span>).html(username))</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">socket.on(<span class="string">&#x27;chat_message&#x27;</span>, clientActions.onChatMessage)</span><br><span class="line">socket.on(<span class="string">&#x27;is_online&#x27;</span>, clientActions.isOnline)</span><br></pre></td></tr></table></figure><p>The application works, the same, but now we can expose the <code>clientActions</code> object during end-to-end tests.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.Cypress) &#123;</span><br><span class="line">  <span class="built_in">window</span>.clientActions = clientActions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is how we can use it from the test to test what happens when another user joins the chat and posts a message. We are not delivering the messages via the socket connection, instead we trigger them <em>right</em> after.</p><figure class="highlight js"><figcaption><span>cypress/integration/client-api-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows status for 2nd user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">`Cy_<span class="subst">$&#123;Cypress._.random(<span class="number">1000</span>)&#125;</span>`</span></span><br><span class="line">  cy.log(<span class="string">`User **<span class="subst">$&#123;name&#125;</span>**`</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(name)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;#txt&#x27;</span>).type(<span class="string">&#x27;Hello there&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, <span class="string">&#x27;Hello there&#x27;</span>)</span><br><span class="line">    .contains(<span class="string">&#x27;strong&#x27;</span>, name)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      cy.log(<span class="string">&#x27;**second user**&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// pretend to send a message from another user</span></span><br><span class="line">  cy.window()</span><br><span class="line">    .its(<span class="string">&#x27;clientActions&#x27;</span>)</span><br><span class="line">    .invoke(<span class="string">&#x27;isOnline&#x27;</span>, <span class="string">&#x27;👻 &lt;i&gt;Ghost is testing&lt;/i&gt;&#x27;</span>)</span><br><span class="line">  cy.window()</span><br><span class="line">    .its(<span class="string">&#x27;clientActions&#x27;</span>)</span><br><span class="line">    .invoke(<span class="string">&#x27;onChatMessage&#x27;</span>, <span class="string">&#x27;&lt;strong&gt;Ghost&lt;/strong&gt;: Boo&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, <span class="string">&#x27;Boo&#x27;</span>).contains(<span class="string">&#x27;strong&#x27;</span>, <span class="string">&#x27;Ghost&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/chat-intro/client-api-spec.png" alt="Testing messages from another user"></p><p>We can refactor the spec code and save the <code>clientActions</code> reference as an <a href="https://on.cypress.io/as">alias</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pretend to send a message from another user</span></span><br><span class="line">cy.window().its(<span class="string">&#x27;clientActions&#x27;</span>).as(<span class="string">&#x27;client&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;@client&#x27;</span>).invoke(<span class="string">&#x27;isOnline&#x27;</span>, <span class="string">&#x27;👻 &lt;i&gt;Ghost is testing&lt;/i&gt;&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;@client&#x27;</span>).invoke(<span class="string">&#x27;onChatMessage&#x27;</span>, <span class="string">&#x27;&lt;strong&gt;Ghost&lt;/strong&gt;: Boo&#x27;</span>)</span><br><span class="line">cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, <span class="string">&#x27;Boo&#x27;</span>).contains(<span class="string">&#x27;strong&#x27;</span>, <span class="string">&#x27;Ghost&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> the above approach is what I call <a href="/blog/realworld-app-action/" title="app actions">app actions</a>.</p><h2><span id="use-socketio-from-cypress">Use Socket.io from Cypress</span></h2><p>The above approach has an advantage - it does not require the backend to run. We can simply use <code>clientActions</code> without a server to exercise our web page as needed. But we really won&#39;t have any confidence in the server running correctly. We won&#39;t have confidence in our WebSocket communication channel working either. Let&#39;s truly &quot;drive&quot; the conversation by opening a second connection to the server and &quot;chatting&quot; with our web user.</p><p>First, let&#39;s install the <code>socket.io-client</code> NPM module</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D socket.io-client</span><br><span class="line">+socket.io-client@4.1.2</span><br></pre></td></tr></table></figure><p>Now in Cypress plugin file <a href="https://github.com/bahmutov/cypress-socketio-chat/blob/main/cypress/plugins/index.js">cypress/plugins/index.js</a> we will add an optional socket.io client logic to be controlled using the <a href="https://on.cypress.io/task">cy.task</a> command.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Socket.io client to allow Cypress itself</span></span><br><span class="line"><span class="comment">// to connect from the plugin file to the chat app</span></span><br><span class="line"><span class="comment">// to play the role of another user</span></span><br><span class="line"><span class="comment">// https://socket.io/docs/v4/client-initialization/</span></span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">&#x27;socket.io-client&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type <span class="type">&#123;Cypress.PluginConfig&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// eslint-disable-next-line no-unused-vars</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// `on` is used to hook into various events Cypress emits</span></span><br><span class="line">  <span class="comment">// `config` is the resolved Cypress config</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// connection to the chat server</span></span><br><span class="line">  <span class="keyword">let</span> socket</span><br><span class="line"></span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">connect</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;Cypress is connecting to socket server under name %s&#x27;</span>, name)</span><br><span class="line">      socket = io(<span class="string">&#x27;http://localhost:8080&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      socket.emit(<span class="string">&#x27;username&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The test can call the task and confirm the web UI receives the new user message</p><figure class="highlight js"><figcaption><span>cypress/integration/socket-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;sees the 2nd user join&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// the browser is the 1st user</span></span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">`Cy_<span class="subst">$&#123;Cypress._.random(<span class="number">1000</span>)&#125;</span>`</span></span><br><span class="line">  cy.log(<span class="string">`User **<span class="subst">$&#123;name&#125;</span>**`</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(name)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// make sure the greeting message is shown</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;name&#125;</span> join the chat..`</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// connect to the server using 2nd user</span></span><br><span class="line">  <span class="keyword">const</span> secondName = <span class="string">&#x27;Ghost&#x27;</span></span><br><span class="line">  cy.task(<span class="string">&#x27;connect&#x27;</span>, secondName)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;secondName&#125;</span> join the chat..`</span>).should(</span><br><span class="line">    <span class="string">&#x27;be.visible&#x27;</span>,</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes, our web page really sees the users joining the running Socket.io server.</p><p><img src="../images/chat-intro/join.png" alt="Seeing the second user join"></p><p>Let&#39;s send a message from the second user and confirm the web page receives it. We can add another task to the plugin file:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// task in cypress/plugins/index.js file</span></span><br><span class="line"><span class="function"><span class="title">say</span>(<span class="params">message</span>)</span> &#123;</span><br><span class="line">  socket.emit(<span class="string">&#x27;chat_message&#x27;</span>, message)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>The test can send the message using the 2nd user (via <code>cy.task</code>) and verify it shows up in the web page</p><figure class="highlight js"><figcaption><span>cypress/integration/socket-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;sees messages from the 2nd user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// the browser is the 1st user</span></span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">`Cy_<span class="subst">$&#123;Cypress._.random(<span class="number">1000</span>)&#125;</span>`</span></span><br><span class="line">  cy.log(<span class="string">`User **<span class="subst">$&#123;name&#125;</span>**`</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(name)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> secondName = <span class="string">&#x27;Ghost&#x27;</span></span><br><span class="line">  cy.task(<span class="string">&#x27;connect&#x27;</span>, secondName)</span><br><span class="line">  <span class="keyword">const</span> message = <span class="string">&#x27;hello from 2nd user&#x27;</span></span><br><span class="line">  cy.task(<span class="string">&#x27;say&#x27;</span>, message)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, message)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes - but it shows the typical distributed system behavior; it is hard to guarantee that messages are delivered in the expected order.</p><p><img src="../images/chat-intro/order.png" alt="Unexpected order of messages"></p><p>We really want to ensure the first user joins before sending messages from the 2nd user, let&#39;s add assertions.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js file</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// make sure the greeting message is shown</span></span><br><span class="line">cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;name&#125;</span> join the chat..`</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> secondName = <span class="string">&#x27;Ghost&#x27;</span></span><br><span class="line">cy.task(<span class="string">&#x27;connect&#x27;</span>, secondName)</span><br><span class="line">cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;secondName&#125;</span> join the chat..`</span>)</span><br><span class="line">  .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> message = <span class="string">&#x27;hello from 2nd user&#x27;</span></span><br><span class="line">cy.task(<span class="string">&#x27;say&#x27;</span>, message)</span><br><span class="line">cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, message)</span><br></pre></td></tr></table></figure><p>Now the test behaves as expected</p><p><img src="../images/chat-intro/right-order.png" alt="Additional commands ensure the expected order of events"></p><p>We have verified that web page shows the messages sent to the Socket.io server from other users.</p><h2><span id="verify-message-received-by-the-second-user">Verify message received by the second user</span></h2><p>Let&#39;s verify the messages sent by the web page reach the other users connected to the Socket.io server. We will store the last received message in the plugin file and will add fetching it via <code>cy.task</code>. This is similar to checking the last received email I have described in the blog post <a href="https://www.cypress.io/blog/2021/05/24/full-testing-of-html-emails-using-ethereal-accounts/">Full Testing of HTML Emails using SendGrid and Ethereal Accounts</a>.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js file</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// connection to the chat server</span></span><br><span class="line"><span class="keyword">let</span> socket</span><br><span class="line"><span class="keyword">let</span> lastMessage</span><br><span class="line"></span><br><span class="line">on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="title">connect</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Cypress is connecting to socket server under name %s&#x27;</span>, name)</span><br><span class="line">    socket = io(<span class="string">&#x27;http://localhost:8080&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    socket.emit(<span class="string">&#x27;username&#x27;</span>, name)</span><br><span class="line">    socket.on(<span class="string">&#x27;chat_message&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> (lastMessage = msg))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">say</span>(<span class="params">message</span>)</span> &#123;</span><br><span class="line">    socket.emit(<span class="string">&#x27;chat_message&#x27;</span>, message)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">getLastMessage</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// cy.task cannot return undefined value</span></span><br><span class="line">    <span class="keyword">return</span> lastMessage || <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test sends the message using the web page UI and then fetches it for the second user.</p><figure class="highlight js"><figcaption><span>cypress/integration/socket-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;verifies messages received&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// the browser is the 1st user</span></span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">`Cy_<span class="subst">$&#123;Cypress._.random(<span class="number">1000</span>)&#125;</span>`</span></span><br><span class="line">  cy.log(<span class="string">`User **<span class="subst">$&#123;name&#125;</span>**`</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(name)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// make sure the greeting message is shown</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;name&#125;</span> join the chat..`</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> secondName = <span class="string">&#x27;Ghost&#x27;</span></span><br><span class="line">  cy.task(<span class="string">&#x27;connect&#x27;</span>, secondName)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;secondName&#125;</span> join the chat..`</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// send the message from the first user</span></span><br><span class="line">  <span class="comment">// and use a random code to guarantee we truly receive our message</span></span><br><span class="line">  <span class="keyword">const</span> message = <span class="string">`Hello there <span class="subst">$&#123;Cypress._.random(<span class="number">10000</span>)&#125;</span>`</span></span><br><span class="line">  cy.get(<span class="string">&#x27;#txt&#x27;</span>).type(message)</span><br><span class="line">  cy.get(<span class="string">&#x27;form&#x27;</span>).submit()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// verify the web page shows the message</span></span><br><span class="line">  <span class="comment">// this ensures we can ask the 2nd user for its last message</span></span><br><span class="line">  <span class="comment">// and it should already be there</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, message).contains(<span class="string">&#x27;strong&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line">  cy.task(<span class="string">&#x27;getLastMessage&#x27;</span>)</span><br><span class="line">    <span class="comment">// note that the message includes the sending user</span></span><br><span class="line">    <span class="comment">// and the message itself</span></span><br><span class="line">    .should(<span class="string">&#x27;include&#x27;</span>, name)</span><br><span class="line">    .and(<span class="string">&#x27;include&#x27;</span>, message)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/chat-intro/last-message.gif" alt="Verifying the message is received"></p><p><strong>Tip:</strong> you can poll the plugin process for the last message using <a href="https://github.com/bahmutov/cypress-recurse">cypress-recurse</a> plugin.</p><h2><span id="test-user-leaving-the-chat">Test user leaving the chat</span></h2><p>Finally, let&#39;s confirm the web page shows the users leaving the chat. In the plugin file, let&#39;s add another task:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// task in cypress/plugins/index.js file</span></span><br><span class="line"><span class="function"><span class="title">disconnect</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  socket.disconnect()</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The test can verify the messages shown by the web page.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> secondName = <span class="string">&#x27;Ghost&#x27;</span></span><br><span class="line">cy.task(<span class="string">&#x27;connect&#x27;</span>, secondName)</span><br><span class="line">cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;secondName&#125;</span> join the chat..`</span>)</span><br><span class="line">  .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"><span class="comment">// the 2nd user is leaving</span></span><br><span class="line">cy.task(<span class="string">&#x27;disconnect&#x27;</span>)</span><br><span class="line">cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;secondName&#125;</span> left the chat..`</span>)</span><br><span class="line">  .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Beautiful.</p><p><img src="../images/chat-intro/left.png" alt="The user has left the chat test"></p><blockquote class="pullquote"><p>🧭 You can find the source code for the app, and the tests in the repo <a href="https://github.com/bahmutov/cypress-socketio-chat">bahmutov/cypress-socketio-chat</a>.</p></blockquote><h2><span id="alternative-connect-to-the-socketio-server-from-the-spec-file">Alternative: connect to the Socket.io server from the spec file</span></h2><p>You can connect to the Socket.io server from the plugin file. You could also connect to the server straight from the spec file. Here is a complete test that simulates the second user via separate chat connection. The first user works through the page, while the second user works through the chat messages.</p><figure class="highlight js"><figcaption><span>cypress/integration/socket-from-browser-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">&#x27;socket.io-client&#x27;</span>)</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Open 2nd socket connection&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;sees the 2nd user join&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// the browser is the 1st user</span></span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">`Cy_<span class="subst">$&#123;Cypress._.random(<span class="number">1000</span>)&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">    cy.log(<span class="string">`User **<span class="subst">$&#123;name&#125;</span>**`</span>)</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">      <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">        cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(name)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// make sure the greeting message is shown</span></span><br><span class="line">    cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;name&#125;</span> join the chat..`</span>)</span><br><span class="line">      .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">      .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// and now connect to the server using 2nd user</span></span><br><span class="line">        <span class="comment">// by opening a new Socket connection from the same browser window</span></span><br><span class="line">        <span class="keyword">const</span> secondName = <span class="string">&#x27;Ghost&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> socket = io.connect(<span class="string">&#x27;http://localhost:8080&#x27;</span>)</span><br><span class="line">        socket.emit(<span class="string">&#x27;username&#x27;</span>, secondName)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// keep track of the last message sent by the server</span></span><br><span class="line">        <span class="keyword">let</span> lastMessage</span><br><span class="line">        socket.on(<span class="string">&#x27;chat_message&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> (lastMessage = msg))</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the page shows that the second user has joined the chat</span></span><br><span class="line">        cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;secondName&#125;</span> join the chat..`</span>).should(</span><br><span class="line">          <span class="string">&#x27;be.visible&#x27;</span>,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the second user can send a message and the page shows it</span></span><br><span class="line">        <span class="keyword">const</span> message = <span class="string">&#x27;hello from 2nd user&#x27;</span></span><br><span class="line">        socket.emit(<span class="string">&#x27;chat_message&#x27;</span>, message)</span><br><span class="line">        cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, message)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// when the first user sends the message from the page</span></span><br><span class="line">        <span class="comment">// the second user receives it via socket</span></span><br><span class="line">        <span class="keyword">const</span> greeting = <span class="string">`Hello there <span class="subst">$&#123;Cypress._.random(<span class="number">10000</span>)&#125;</span>`</span></span><br><span class="line">        cy.get(<span class="string">&#x27;#txt&#x27;</span>).type(greeting)</span><br><span class="line">        cy.get(<span class="string">&#x27;form&#x27;</span>).submit()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// verify the web page shows the message</span></span><br><span class="line">        <span class="comment">// this ensures we can ask the 2nd user for its last message</span></span><br><span class="line">        <span class="comment">// and it should already be there</span></span><br><span class="line">        cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, greeting).contains(<span class="string">&#x27;strong&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// place the assertions in a should callback</span></span><br><span class="line">        <span class="comment">// to retry them, maybe there is a delay in delivery</span></span><br><span class="line">        cy.should(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// using &quot;include&quot; assertion since the server adds HTML markup</span></span><br><span class="line">          expect(lastMessage, <span class="string">&#x27;last message for 2nd user&#x27;</span>).to.include(greeting)</span><br><span class="line">          expect(lastMessage, <span class="string">&#x27;has the sender&#x27;</span>).to.include(name)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        cy.log(<span class="string">&#x27;**second user leaves**&#x27;</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          socket.disconnect()</span><br><span class="line">        &#125;)</span><br><span class="line">        cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;secondName&#125;</span> left the chat..`</span>).should(</span><br><span class="line">          <span class="string">&#x27;be.visible&#x27;</span>,</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test behaves as expected.</p><p><img src="../images/chat-intro/browser-spec.gif" alt="The 2nd user is a separate socket connection from the same browser"></p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/run-two-cypress-runners/" title="Run Two Cypress Test Runners At The Same Time">Run Two Cypress Test Runners At The Same Time</a></li><li><a href="/blog/sync-two-cypress-runners/" title="Sync Two Cypress Runners via Checkpoints">Sync Two Cypress Runners via Checkpoints</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is the first blog post showing how to test a &lt;a href=&quot;https://socket.io/&quot;&gt;Socket.io&lt;/a&gt; real-time chat using the &lt;a href=&quot;https://ww
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress Automation</title>
    <link href="https://glebbahmutov.com/blog/cypress-automation/"/>
    <id>https://glebbahmutov.com/blog/cypress-automation/</id>
    <published>2021-06-02T04:00:00.000Z</published>
    <updated>2021-06-29T12:36:38.584Z</updated>
    
    <content type="html"><![CDATA[<p>When Cypress controls a Chromium browser, it has an open remote interface connection between Cypress and the browser. Typically, Cypress uses it to visit the site and perform special operations like setting cookies, or setting the file downloads folder. In this blog post I will show how to use <code>Cypress.automation</code> command to set the browser permission and to take native screenshot images.</p><!-- toc --><ul><li><a href="#set-the-browser-permission">Set the browser permission</a></li><li><a href="#saving-native-screenshots">Saving native screenshots</a></li><li><a href="#printing-pdf-of-the-page">Printing PDF of the page</a></li><li><a href="#limitation">Limitation</a></li><li><a href="#update-1-printing-the-current-permission">Update 1: printing the current permission</a></li></ul><!-- tocstop --><h2><span id="set-the-browser-permission">Set the browser permission</span></h2><p>This code example comes from the recipe in the <a href="https://github.com/cypress-io/cypress-example-recipes">cypress-example-recipes</a> repo.</p><p>If we want to access the clipboard from the test, the browser asks the user for permission. The test can always query the current permission</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;can be queried in Chrome&#x27;</span>, &#123; <span class="attr">browser</span>: <span class="string">&#x27;chrome&#x27;</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;index.html&#x27;</span>) <span class="comment">// yields the window object</span></span><br><span class="line">    .its(<span class="string">&#x27;navigator.permissions&#x27;</span>)</span><br><span class="line">    <span class="comment">// permission names taken from</span></span><br><span class="line">    <span class="comment">// https://w3c.github.io/permissions/#enumdef-permissionname</span></span><br><span class="line">    .invoke(<span class="string">&#x27;query&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;clipboard-read&#x27;</span> &#125;)</span><br><span class="line">    <span class="comment">// by default it is &quot;prompt&quot; which shows a popup asking</span></span><br><span class="line">    <span class="comment">// the user if the site can have access to the clipboard</span></span><br><span class="line">    <span class="comment">// if the user allows, then next time it will be &quot;granted&quot;</span></span><br><span class="line">    <span class="comment">// If the user denies access to the clipboard, on the next</span></span><br><span class="line">    <span class="comment">// run the state will be &quot;denied&quot;</span></span><br><span class="line">    .its(<span class="string">&#x27;state&#x27;</span>).should(<span class="string">&#x27;be.oneOf&#x27;</span>, [<span class="string">&#x27;prompt&#x27;</span>, <span class="string">&#x27;granted&#x27;</span>, <span class="string">&#x27;denied&#x27;</span>])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If we look at the <a href="https://chromedevtools.github.io/devtools-protocol/">Chrome Debugger Protocol</a>, we can see that there is a way to call a command to set the permission using <a href="https://chromedevtools.github.io/devtools-protocol/tot/Browser/#method-setPermission">Browser.setPermission</a> command. By granting the test runner the permission, the browser skips showing the &quot;should this site have access to the clipboard?&quot; user prompt.</p><p><img src="../images/automation/set-permission.png" alt="Browser.setPermission command"></p><p>To call this command from the Cypress test, use <code>Cypress.automation</code> command:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// only the Chrome CDP is supported</span></span><br><span class="line"><span class="comment">// thus the first argument is always &quot;remote:debugger:protocol&quot;</span></span><br><span class="line">Cypress.automation(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>, &#123;</span><br><span class="line">  command: <span class="string">&#x27;Browser.grantPermissions&#x27;</span>,</span><br><span class="line">  params: &#123;</span><br><span class="line">    permissions: [<span class="string">&#x27;clipboardReadWrite&#x27;</span>, <span class="string">&#x27;clipboardSanitizedWrite&#x27;</span>],</span><br><span class="line">    <span class="comment">// make the permission tighter by allowing the current origin only</span></span><br><span class="line">    <span class="comment">// like &quot;http://localhost:56978&quot;</span></span><br><span class="line">    origin: <span class="built_in">window</span>.location.origin,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The promise-returning <code>Cypress.automation</code> command is very low-level, thus it is NOT automatically inserted into the Cypress test command chain. To make the test &quot;wait&quot; for the promise to resolve, use the <a href="https://on.cypress.io/wrap">cy.wrap</a> command:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cy.wrap(Cypress.automation(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>, &#123;</span><br><span class="line">  command: <span class="string">&#x27;Browser.grantPermissions&#x27;</span>,</span><br><span class="line">  params: &#123;</span><br><span class="line">    permissions: [<span class="string">&#x27;clipboardReadWrite&#x27;</span>, <span class="string">&#x27;clipboardSanitizedWrite&#x27;</span>],</span><br><span class="line">    <span class="comment">// make the permission tighter by allowing the current origin only</span></span><br><span class="line">    <span class="comment">// like &quot;http://localhost:56978&quot;</span></span><br><span class="line">    origin: <span class="built_in">window</span>.location.origin,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> if you want to run the automation command <em>after</em> other Cypress commands, make sure to return the the <code>Cypress.automation(...)</code> promise from the <code>.then</code> callback; we will see such example in the next section.</p><p>You can watch setting the browser permission in this video below:</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/SExmed1dCL4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="saving-native-screenshots">Saving native screenshots</span></h2><p>This example comes from the <a href="https://github.com/bahmutov/monalego">bahmutov/monalego</a> repo.</p><p>If you want to save the application page without any visual artifacts introduced by <a href="https://on.cypress.io/screenshot">cy.screenshot</a> command, you can use the <a href="https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-captureScreenshot">Page.captureScreenshot</a> CDP command.</p><p><img src="../images/automation/page-screenshot.png" alt="Page.captureScreenshot command"></p><p>Let&#39;s say we want to capture the screenshot after a two second delay. We place the <code>Cypress.automation</code> inside a <a href="https://on.cypress.io/then">.then</a> callback after the <a href="https://on.cypress.io/wait">cy.wait</a> command. The callback automatically waits for the returned promise to resolve.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;/smile&#x27;</span>)</span><br><span class="line">  .wait(<span class="number">2000</span>)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.log(<span class="string">&#x27;Page.captureScreenshot&#x27;</span>)</span><br><span class="line">    <span class="comment">// https://chromedevtools.github.io/devtools-protocol/</span></span><br><span class="line">    <span class="comment">// https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-captureScreenshot</span></span><br><span class="line">    <span class="keyword">return</span> Cypress.automation(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>, &#123;</span><br><span class="line">      command: <span class="string">&#x27;Page.captureScreenshot&#x27;</span>,</span><br><span class="line">      params: &#123;</span><br><span class="line">        format: <span class="string">&#x27;png&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>The CDP documentation says the method returns an object with <code>data</code> property that is base64-encoded PNG image. We can grab this property and use <a href="https://on.cypress.io/writefile">cy.writeFile</a> command to save the image.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;/smile&#x27;</span>)</span><br><span class="line">  .wait(<span class="number">2000</span>)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.log(<span class="string">&#x27;Page.captureScreenshot&#x27;</span>)</span><br><span class="line">    <span class="comment">// https://chromedevtools.github.io/devtools-protocol/</span></span><br><span class="line">    <span class="comment">// https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-captureScreenshot</span></span><br><span class="line">    <span class="keyword">return</span> Cypress.automation(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>, &#123;</span><br><span class="line">      command: <span class="string">&#x27;Page.captureScreenshot&#x27;</span>,</span><br><span class="line">      params: &#123;</span><br><span class="line">        format: <span class="string">&#x27;png&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .its(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">base64</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.writeFile(<span class="string">&#x27;test-smile.png&#x27;</span>, base64, <span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>The test runs and saves and image like this one:</p><p><img src="../images/automation/test-smile.png" alt="Saved screenshot PNG image"></p><p>If you want to capture only a portion of the page, grab the bounding box of an element and pass it as a parameter.</p><!--## Printing PDF of the pageThis example comes from the [bahmutov/cypress-grep-example](https://github.com/bahmutov/cypress-grep-example) repo.--><h2><span id="limitation">Limitation</span></h2><p>As of Cypress v7, you can only execute a CDP automation command, not to subscribe to the browser events. If you need to subscribe, you would need to open your own remote interface connection, just like <a href="https://github.com/flotwig/cypress-log-to-output">cypress-log-to-output</a> does.</p><p>Yet, despite of this limitation right now, think what having an automation command in Cypress means - everyone that Puppeteer can do, Cypress can do too - it is the same Chrome Debugger Protocol connection after all! You want real click events? You want hover? You want a tab? No problem, see <a href="https://github.com/dmtrKovalenko/cypress-real-events">cypress-real-events</a> for example.</p><h2><span id="update-1-printing-the-current-permission">Update 1: printing the current permission</span></h2><p>Recently a user asked me why the browser permission stays unchanged even after <code>Cypress.automation</code> call. Here is the picture of the problem from the <a href="https://twitter.com/chinchang457/status/1409849412524777479">tweet</a>:</p><p><img src="../images/automation/wrong-log.jpeg" alt="The printed updated permission ... is the same as the old one"></p><p>Do you see the problem? The <code>cy.wrap(...)</code> will correctly set the permission <em>asynchronously</em>. Meanwhile before and after we have <code>cy.log(Notification.permission)</code> calls that are passing their <em>current</em> argument by value. Imagine the permission value is <code>prompt</code> at the start. Then after the test runs through the commands and schedules them to run, the arguments to the <code>cy.log</code> calls in <em>both cases</em> will be <code>prompt</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Cypress commands scheduled to execute</span><br><span class="line"># with their parameters</span><br><span class="line">CY.LOG &quot;prompt&quot;</span><br><span class="line">CY.WRAP Promise from Cypress.automation</span><br><span class="line"># Promise has started running, since they are eager</span><br><span class="line">CY.LOG &quot;prompt&quot;</span><br></pre></td></tr></table></figure><p>Thus to correctly print the updated permission, we need to call <code>cy.log</code> <em>after</em> the <code>Cypress.automation</code> has finished its execution and the <code>Notification.permission</code> has a new value.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">cy.log(Notification.permission)</span><br><span class="line">cy.wrap(</span><br><span class="line">  Cypress.automation(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>, &#123;</span><br><span class="line">    command: <span class="string">&#x27;Browser.grantPermission&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line">).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// the permission has been changed</span></span><br><span class="line">  cy.log(Notification.permission)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>In fact, the above code has a race condition in the first <code>cy.log</code> vs <code>Cypress.automation</code> promise. The promise to grant the browser permission starts running <em>as soon as</em> it is created. Thus commands before <code>cy.wrap</code> could get the updated permission! I would rewrite the above code to be safer and to call <code>Cypress.automation</code> only <em>after</em> the first <code>cy.log</code> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">cy.log(Notification.permission)</span><br><span class="line">  .then(</span><br><span class="line">    Cypress.automation(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>, &#123;</span><br><span class="line">      command: <span class="string">&#x27;Browser.grantPermission&#x27;</span>,</span><br><span class="line">      ...</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">  ).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// the permission has been changed</span></span><br><span class="line">    cy.log(Notification.permission)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Since the <a href="https://on.cypress.io/then">cy.then</a> command is chained after the <code>cy.log</code> command, the <code>.then</code> creates the Promise and waits for the returned promise from <code>Cypress.automation</code> to complete. This even eliminates the need for <code>cy.wrap</code> command.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;When Cypress controls a Chromium browser, it has an open remote interface connection between Cypress and the browser. Typically, Cypress 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Common Documentation Mistakes and How to Avoid Them</title>
    <link href="https://glebbahmutov.com/blog/common-documentation-mistakes-and-how-to-avoid-them/"/>
    <id>https://glebbahmutov.com/blog/common-documentation-mistakes-and-how-to-avoid-them/</id>
    <published>2021-05-28T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.250Z</updated>
    
    <content type="html"><![CDATA[<p>Writing docs is hard and takes effort. Luckily, describing something is still easier than making that something. We at Cypress put a lot of effort into <a href="https://www.cypress.io/blog/2017/07/05/10-ways-we-improved-our-docs/">improving our documentation</a> which is really appreciated by our users. In this blog post, I want to list things we tried to avoid, because they <em>hurt the documentation</em> in my opinion.</p><!-- toc --><ul><li><a href="#the-marketing-copy">The marketing copy</a></li><li><a href="#the-documentation-guides">The documentation guides</a></li><li><a href="#the-reference-pages">The reference pages</a></li><li><a href="#the-tutorials">The tutorials</a></li><li><a href="#the-blog-posts">The blog posts</a></li><li><a href="#the-conference-talks-and-presentations">The conference talks and presentations</a></li><li><a href="#common-obstacles-to-good-documentation">Common obstacles to good documentation</a></li><li><a href="#tips">Tips</a></li><li><a href="#do-not-compare-yourself-to-other-tools">Do not compare yourself to other tools</a></li><li><a href="#recap">Recap</a></li></ul><!-- tocstop --><p>Most of these things are also covered in <a href="https://slides.com/bahmutov/test-driven-documentation">my presentation</a> for CityJS 2021 titled &quot;TDD: Test-Driven Documentation&quot;. You can flip through the slides below:</p><center><iframe src="https://slides.com/bahmutov/test-driven-documentation/embed?style=light" width="720" height="500" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></center><h2><span id="the-marketing-copy">The marketing copy</span></h2><p>Marketing copy is everything you have on your static site and the introductory pages - things that describe your tool to the first time visitor. The marketing copy often suffers from what is jokingly described as:</p><blockquote><p>Selling the drills and not the holes</p></blockquote><p>Imagine you are making electric drills and selling them at a hardware store. People come to buy a drill, but they really do not need or want <em>your</em> drill. They need a hole! Thus you should describe how your tool makes the right hole for that customer.</p><p>Cypress&#39; marketing static site at <a href="https://www.cypress.io/">www.cypress.io</a> avoids the trap of selling the drills pretty well. It does not describe itself as &quot;A cross-platform e2e test runner.&quot; for example. Instead we talk about the user problems we solve: &quot;Fast, easy and reliable testing for anything that runs in a browser.&quot;</p><h2><span id="the-documentation-guides">The documentation guides</span></h2><p>Often your documentation contains a longer guide like <a href="https://on.cypress.io/ci">running Cypress on CI</a> or <a href="https://on.cypress.io/visual-testing">using Cypress for Visual Testing</a>. If you do not explain to the user <em>why</em> they would benefit from reading such a long document, <em>what</em> they would learn, then the users are likely skip it.</p><blockquote><p>Do not start the long page with &quot;step 1: ...&quot;</p></blockquote><p>Instead, list what the user is about to learn. Here is how <a href="https://on.cypress.io/command-line">Cypress Command Line Guide</a> starts:</p><p><img src="../images/doc-mistakes/command-line.png" alt="Cypress Command Line Guide starts with &quot;What you will learn&quot; section"></p><p>A related mistake when writing longer guides is to skip the prerequisites. Clearly state what you assume the user knows before starting the reading journey: &quot;This guide assumes you know X and have Y and Z&quot;.</p><h2><span id="the-reference-pages">The reference pages</span></h2><p>Reference pages explains particular methods or classes your documentation provides. A typical example would be Cypress <a href="https://on.cypress/check">cy.check()</a> or <a href="https://on.cypress/click">cy.click()</a> command pages:</p><p><img src="../images/doc-mistakes/check.png" alt="Cypress cy.check command reference page"></p><p>I often see the reference pages underwhelming due to:</p><ol><li>Lack of examples</li><li>Examples out of date</li><li>Examples are all &quot;foo&quot; and &quot;bar&quot;</li><li>Non-uniform page structure</li><li>Missing command history</li><li>Not linking to larger guides and tutorials</li></ol><p>If your reference page is longer than a few paragraphs, make sure every subsection includes an anchor link the user can copy and share.</p><p><img src="../images/doc-mistakes/anchor.png" alt="Every section of the page includes an obvious anchor link"></p><h2><span id="the-tutorials">The tutorials</span></h2><p>A tutorial is a step-by-step guide teaching the user how to solve a very particular problem. Again, we are not selling a drill, we are teaching the user how to drill a hole in a specific situation. Common problems to avoid:</p><ol><li>Tutorials are out of date</li><li>Missing source code</li><li>Missing CI</li><li>Expectations not stated</li></ol><p>I always try to explicitly state the software versions used, and to have an evergreen example repo linked from for the tutorial. The repo must have a configured continuous integration service to run the tests and keep the <a href="/blog/keep-examples-up-to-date/" title="dependencies up to date">dependencies up to date</a>.</p><h2><span id="the-blog-posts">The blog posts</span></h2><p>I like to blog, a huge surprise, right? Well, when you write a blog post, make sure that:</p><blockquote><p>The blog post has the published date</p></blockquote><p>Really, this is my number one question when reading a blog post - is this still relevant? This blog post has a date at the top. Cypress blog posts have the date at the top AND in their URLs</p><p><img src="../images/doc-mistakes/blog-date.png" alt="Make it obvious when the blog post was published"></p><p>Please include the software versions used during writing of the blog. Sometimes I will include it at the start of the writing.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In this blog post I am using Cypress v6.5.0.</span><br></pre></td></tr></table></figure><p>A useful tip is to include the code block with the install command and dependency versions</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D cypress</span></span><br><span class="line">+ cypress@6.4.0</span><br></pre></td></tr></table></figure><p>Or show the <code>package.json</code> file if it is small, like the blog post <a href="/blog/reveal-vite/" title="Presentations with Reveal.js and Vite">Presentations with Reveal.js and Vite</a> does:</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;reveal-vite&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;vite&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;vite build&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;serve&quot;</span>: <span class="string">&quot;vite preview&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;reveal.js&quot;</span>: <span class="string">&quot;4.1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vite&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="the-conference-talks-and-presentations">The conference talks and presentations</span></h2><p>When giving a talk you can only show the highlights and a very limited amount of text on the slide. Please, include any relevant links and put them on the slide to allow viewers to browse if they are interested in that topic. Do not wait until the very last slide - include the links where they are relevant!</p><p>Here is my &quot;Installing Cypress&quot; slide from the recent <a href="https://slides.com/bahmutov/commited-intro-to-cypress">Introduction to Cypress</a> presentation. Notice the links to the Cypress repository and the introduction guide.</p><p><img src="../images/doc-mistakes/links.png" alt="Every slide should include relevant links"></p><p>Here is the next slide showing a typical Cypress test. The slide includes the link to the Cypress API commands, so someone just browsing can immediately take a look.</p><p><img src="../images/doc-mistakes/api-link.png" alt="Linking to the Cypress API"></p><p>Make the links obvious, make them actual HREFs (so the user can click, no need to copy and paste), and do not split the links across the multiple lines.</p><p><strong>Tip:</strong> for more information about links, slides, and effective presentations, read my post <a href="/blog/better-slide-format/" title="Better slide format">Better slide format</a></p><p>Conference talks require a lot of preparation. I myself suffer from a common mistake: after the presentation is over, I forget to link it from our documentation site. All this effort - and the users never see it! So please, link the presentation from the relevant parts of the documentation.</p><h2><span id="common-obstacles-to-good-documentation">Common obstacles to good documentation</span></h2><ul><li>private documentation repository; no outside user can contribute even a small fix!</li><li>diffuse responsibility for maintaining the docs</li><li>hard to maintain due to technical stack</li></ul><p>Remember - it is easier to write documentation describing what you already have solved, than to solve it! Without good docs, the users will not discover your awesome software, will not understand its brilliance, and will not use it.</p><h2><span id="tips">Tips</span></h2><ol><li>Let people learn more. At the end of every doc, include links to the related topics.</li></ol><p><img src="../images/doc-mistakes/learn-more1.png" alt="Links to the related commands"></p><p>If the user read through the long guide, link them to particular tutorials and talks</p><p><img src="../images/doc-mistakes/learn-more2.png" alt="Links to the related tutorials and blog posts"></p><ol start="2"><li>Implement good documentation search</li></ol><p>See my presentations <a href="https://slides.com/bahmutov/find-me-if-you-can">Find Me If You Can</a> and <a href="https://slides.com/bahmutov/testing-docs">Testing Your Documentation Search</a> for details.</p><ol start="3"><li>Include links to the tools in the source comments</li></ol><p>I often put the link to the GitHub repo right into the source comment. Users often copy the entire code fragment including the comment. The comment is then useful to everyone reading the code. For example, the GitHub Actions workflow file includes the link to the action&#39;s repo:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install dependencies, start the app,</span></span><br><span class="line"><span class="comment"># and run E2E tests using Cypress GitHub action</span></span><br><span class="line"><span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">wait:</span> <span class="string">&#x27;http://localhost:8080&#x27;</span></span><br></pre></td></tr></table></figure><h2><span id="do-not-compare-yourself-to-other-tools">Do not compare yourself to other tools</span></h2><p>Ughh this will be controversial.</p><p>I do not think you should have a table comparing your tool to the competitors&#39; tools. Again, the users care about drilling the holes, not comparing drills. Show the users how your tool helps them. But more importantly, you are subjective and won&#39;t be impartial when describing other tools. If you have a table saying the competitor&#39;s tool does the thing X, you won&#39;t hear the end of &quot;you looked at version A of the tool, the version B does it!&quot; or &quot;you did not know how to do thing X correctly&quot;, or similar things. At best, such lists will become a constant source of complaints. At worst, they will make you look mean, unfair, and even ignorant.</p><p>Here is an example from Testim&#39;s <a href="https://help.testim.io/docs/why-not-cypress">Why not Cypress</a> documentation page:</p><p><img src="../images/doc-mistakes/why-not-cypress.png" alt="Testim.io: why not Cypress"></p><p>Where to even begin here? You got us, Testim! We wrote Cypress in High Elvish language invented by J.R.R. Tolkien, good catch. Of course, the above paragraph would be very surprising to anyone who has seen or tried Cypress. Or opened the browser DevTools and used breakpoints or <code>debugger</code> keyword to step through the code. So by writing this one paragraph, Testim just destroyed any credibility with the readers, and for what?! I don&#39;t get it.</p><p>On a personal level, the above paragraph even hurts for another reason. Cypress is built on top of <a href="http://bluebirdjs.com/docs/getting-started.html">Blurbird</a> promise library - we love its API, speed, features. It is even bundled under <a href="https://on.cypress.io/promise">Cypress.Promise</a>, that&#39;s how much we love this library! One of the core maintainers of <a href="https://github.com/petkaantonov/bluebird/graphs/contributors">Bluebird</a> is Benjamin Gruenbaum who is now ... working at Testim. The FUD about promises and asynchronous actions from someone who should have known better is just weird, in my opinion.</p><p>Ok. So when the users <strong>do</strong> need to know the differences between the tools, how do you answer them? Here is the trick: you send them comparisons written by other users. Written by someone who can appear impartial and objective - someone you have not paid to write those reviews. Of course, no one forces you to send every review. You can pick the ones that make you look good, and you consider fair.</p><p>Whenever anyone asks me about other tools, I stress that our &quot;competitor&quot; are NOT other testing tools, but people who do not write tests. You can see such answer in my presentation <a href="https://slides.com/bahmutov/reactive-conf">End-to-end testing is hard - but it doesn&#39;t have to be</a>, which you can watch on <a href="https://www.youtube.com/watch?v=swpz0H0u13k">YouTube</a>. The relevant slide is at the end and below:</p><p><img src="../images/doc-mistakes/cypress-vs-x.png" alt="We want everyone to write end-to-end tests"></p><h2><span id="recap">Recap</span></h2><blockquote><p>Remember: when the user is struggling with your software, you cannot be there for them 99.9% of the time. But you know what can be helping the users every second and minute of the day? Your great documentation!</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Writing docs is hard and takes effort. Luckily, describing something is still easier than making that something. We at Cypress put a lot 
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="advice" scheme="https://glebbahmutov.com/blog/tags/advice/"/>
    
      <category term="documentation" scheme="https://glebbahmutov.com/blog/tags/documentation/"/>
    
  </entry>
  
  <entry>
    <title>Burning Tests with cypress-grep</title>
    <link href="https://glebbahmutov.com/blog/burning-tests/"/>
    <id>https://glebbahmutov.com/blog/burning-tests/</id>
    <published>2021-05-18T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.238Z</updated>
    
    <content type="html"><![CDATA[<p>Recently a project of mine <a href="https://github.com/bahmutov/cypress-grep-example">bahmutov/cypress-grep-example</a> showed two flaky tests.</p><p><img src="/blog/images/burn/flaky-tests.png" alt="Cypress Dashboard showing two flaky tests"></p><p>Are the tests really showing a problem with the application? Or are the tests themselves unreliable? Would these tests show failures if we run them 100 times in a row?</p><p>This is where the <a href="https://github.com/bahmutov/cypress-grep">cypress-grep</a> plugin comes in very handy. Just <a href="https://github.com/bahmutov/cypress-grep#install-and-use">instal it</a> and add to the support file</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D cypress-grep</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add to cypress/support/index.js</span></span><br><span class="line"><span class="comment">// load and register the grep feature</span></span><br><span class="line"><span class="comment">// https://github.com/bahmutov/cypress-grep</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;cypress-grep&#x27;</span>)()</span><br></pre></td></tr></table></figure><p>We have the project with multiple spec files. The first flaky test &quot;should cancel edits on escape&quot; is located in spec file editing-spec.js. Let&#39;s run this test by itself 10 times.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx cypress run --spec cypress/integration/editing-spec.js \</span></span><br><span class="line"><span class="bash">  --env grep=<span class="string">&quot;should cancel edits on escape&quot;</span>,burn=10</span></span><br><span class="line">cypress-grep: tests with &quot;should cancel edits on escape&quot; in their names</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>The spec runs and the test we are grepping by title text &quot;should cancel edits on escape&quot; is repeated 10 times. The other tests are all pending.</p><p><img src="/blog/images/burn/burn.png" alt="Burning the selected test"></p><p>So there is definitely something wrong with this test or the application. We can grab any screenshot - they all show the same failure: the first letter is missing from the title.</p><p><img src="/blog/images/burn/fail.png" alt="The missing letter"></p><p>Often the application is not ready to receive the <code>cy.type</code> command while still loading. In our case, this seems unlikely - after all, the failure happens in the 3rd todo item, not at the very first item. Maybe something is wrong with typing the characters? Or editing them? Let&#39;s make sure the 3 todo items created before each test are typed correctly.</p><figure class="highlight js"><figcaption><span>cypress/integration/editing-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.createDefaultTodos().as(<span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We are using a custom command <code>cy.createDefaultTodos</code> to enter the 3 todo items. We can add assertions checking the input field values right there.</p><figure class="highlight js"><figcaption><span>cypress/support/commands.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Cypress.Commands.add(<span class="string">&#x27;createDefaultTodos&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  cy.get(<span class="string">&#x27;.new-todo&#x27;</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    .type(<span class="string">`<span class="subst">$&#123;TODO_ITEM_ONE&#125;</span>&#123;enter&#125;`</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    .type(<span class="string">`<span class="subst">$&#123;TODO_ITEM_TWO&#125;</span>&#123;enter&#125;`</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    .type(<span class="string">`<span class="subst">$&#123;TODO_ITEM_THREE&#125;</span>&#123;enter&#125;`</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">    .and(<span class="function">(<span class="params">$listItems</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// check the text in each list item</span></span><br><span class="line">      expect($listItems[<span class="number">0</span>], <span class="string">&#x27;first item&#x27;</span>).to.have.text(TODO_ITEM_ONE)</span><br><span class="line">      expect($listItems[<span class="number">1</span>], <span class="string">&#x27;second item&#x27;</span>).to.have.text(TODO_ITEM_TWO)</span><br><span class="line">      expect($listItems[<span class="number">2</span>], <span class="string">&#x27;third item&#x27;</span>).to.have.text(TODO_ITEM_THREE)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And let&#39;s burn the test again.</p><p><img src="/blog/images/burn/first-letter.png" alt="The first letter was missing on creation"></p><p>The problem seems to be in typing the initial text, not in editing it afterwards. Cypress types pretty quickly, much faster than a normal human being. Maybe the application cannot keep up for some reason? Let&#39;s add a delay of 20ms after each character.</p><figure class="highlight js"><figcaption><span>cypress/support/commands.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> opts = &#123; <span class="attr">log</span>: <span class="literal">false</span>, <span class="attr">delay</span>: <span class="number">20</span> &#125;</span><br><span class="line">cy.get(<span class="string">&#x27;.new-todo&#x27;</span>, opts)</span><br><span class="line">  .type(<span class="string">`<span class="subst">$&#123;TODO_ITEM_ONE&#125;</span>&#123;enter&#125;`</span>, opts)</span><br><span class="line">  .type(<span class="string">`<span class="subst">$&#123;TODO_ITEM_TWO&#125;</span>&#123;enter&#125;`</span>, opts)</span><br><span class="line">  .type(<span class="string">`<span class="subst">$&#123;TODO_ITEM_THREE&#125;</span>&#123;enter&#125;`</span>, opts)</span><br></pre></td></tr></table></figure><p>Time to burn it to find out if we have fixed it.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">... --env grep&#x3D;&quot;should cancel edits on escape&quot;,burn&#x3D;100</span><br></pre></td></tr></table></figure><p>The tests seem to be stable. 100 tests pass.</p><p><img src="/blog/images/burn/delay.png" alt="Burning tests with delay"></p><p>Now we can decide if we want to move on, or keep digging into the application&#39;s code to find why the first letter is lost sometimes. There is one other way. We have slowed down every test that creates the default todo items by 400-500ms. Is this a good trade-off to make 1 or 2 tests stable?</p><p>Or is the <a href="https://docs.cypress.io/guides/guides/test-retries">test retries</a> a better answer? In this instance I would prefer to get to the bottom of the problem and not use the test retries.</p><h2><span id="bonus-video">Bonus: video</span></h2><p>See how I am burning a test in this short video below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/kB2uyJ2W41I" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently a project of mine &lt;a href=&quot;https://github.com/bahmutov/cypress-grep-example&quot;&gt;bahmutov/cypress-grep-example&lt;/a&gt; showed two flaky 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Make Example Code Copy Pastable</title>
    <link href="https://glebbahmutov.com/blog/make-example-code-copy-pastable/"/>
    <id>https://glebbahmutov.com/blog/make-example-code-copy-pastable/</id>
    <published>2021-05-13T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.306Z</updated>
    
    <content type="html"><![CDATA[<p>People joke that a senior software engineer is someone who knows how to Google and copy / paste examples from StackOverflow. I agree :) That&#39;s why I spend so much time making my blog posts and code searchable. Check out these talks I gave where I discuss how to make good code examples and put them right in front of the users:</p><ul><li><a href="https://slides.com/bahmutov/find-me-if-you-can">Find Me If You Can</a></li><li><a href="https://slides.com/bahmutov/testing-docs">Testing Your Documentation Search</a></li><li><a href="https://slides.com/bahmutov/test-driven-documentation">TDD: Test-Driven Documentation</a></li><li><a href="https://slides.com/bahmutov/tests-are-docs">Using End-to-End Tests as Documentation</a></li></ul><p>Even GitHub now understands that copy and paste of code is super important. They have added a button to <em>every</em> code block to copy its content with a single click.</p><p><img src="/blog/images/copy-paste/github-copy.gif" alt="Copying code block from GitHub.com"></p><p>In this blog post I will list my tips for making <em>your</em> code examples easier to find and use.</p><h2><span id="put-the-full-example">Put the full example</span></h2><p>Even if you are showing a particular step of the process, try to put the complete code example on the page. For example, in <a href="https://github.com/cypress-io/github-action">cypress-io/github-action</a> every code example is the complete GitHub workflow file:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">End-to-end</span> <span class="string">tests</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">cypress-run:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="comment"># Install NPM dependencies, cache them correctly</span></span><br><span class="line">      <span class="comment"># and run all Cypress tests</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br></pre></td></tr></table></figure><p>I use the complete file especially for the &quot;hello world&quot; examples, because if the user is interested in such example, they probably do not have a GitHub workflow file yet. By providing the full file source code, I make it simple for someone to start right without going to the GitHub documentation to see how to write a workflow YML file, then come back to insert my <code>cypress-io/github-action@v2</code> step there.</p><h2><span id="show-the-filename">Show the filename</span></h2><p>Add a comment showing the source filename where the snippet should go to avoid confusion. Here is how I write code examples for <a href="https://github.com/bahmutov/cypress-grep">cypress-grep</a> - I show the destination filenames as comments.</p><p><img src="/blog/images/copy-paste/filenames.png" alt="The code blocks with source filename comments"></p><h2><span id="over-explain-the-code-blocks">Over-explain the code blocks</span></h2><p>Put yourself into the user&#39;s shoes and over-explain everything in the code example. The users, if they copy your code would lose all context, right? Thus you need to generously add the code comments, hoping the would be included in the pasted code. Any user reading the code later should understand what is going on from those comments.</p><p>Here is a typical example from <a href="https://github.com/bahmutov/cypress-examples">cypress-examples</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  <span class="comment">// an assertion ensures we have elements</span></span><br><span class="line">  <span class="comment">// before starting filtering</span></span><br><span class="line">  .should(<span class="string">&#x27;have.length.gt&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">$els</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> $filtered = $els.filter(<span class="function">(<span class="params">k, el</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// if the found element is inside &lt;UL&gt; element</span></span><br><span class="line">      <span class="comment">// then reject it by returning false</span></span><br><span class="line">      <span class="keyword">const</span> $ul = Cypress.$(el).closest(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> $ul.length === <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $filtered</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// finds only the elements outside the &lt;UL&gt; element</span></span><br><span class="line">  .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">  <span class="comment">// check by confirming the class on each found element</span></span><br><span class="line">  .and(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;target&#x27;</span>)</span><br></pre></td></tr></table></figure><p>That&#39;s a lot of comments :)</p><h2><span id="scrape-the-code-comments">Scrape the code comments</span></h2><p>If you are generating the static site showing the code examples, make sure you are scraping the code comments too. This will ensure your effort commenting and explaining is going to help user when they search your documentation.</p><p><img src="/blog/images/copy-paste/scrape-code-comments.png" alt="The search scraper config includes the selector for code comments"></p><p>You can try the search yourself at <a href="https://glebbahmutov.com/cypress-examples">glebbahmutov.com/cypress-examples</a> - it is pretty good!</p><p>See my presentation <a href="https://slides.com/bahmutov/find-me-if-you-can">Find Me If You Can</a> for full details.</p><h2><span id="add-a-comment-with-the-source-link">Add a comment with the source link</span></h2><p>When showing how to install or use your library, if you expect the block to be copied and pasted, add a comment with the source link. The users will keep the URL I bet, and all people looking at that code in the future will know where to go to find out more.</p><p>The installation snippet for <code>cypress-grep</code> utility is a good example.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cypress/support/index.js</span></span><br><span class="line"><span class="comment">// load and register the grep feature</span></span><br><span class="line"><span class="comment">// https://github.com/bahmutov/cypress-grep</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;cypress-grep&#x27;</span>)()</span><br></pre></td></tr></table></figure><h2><span id="test-the-examples">Test the examples</span></h2><p>And add a link to the test or full application containing the code example. You do not want to have incorrect code examples in your documentation. You can test your code blocks, see <a href="/blog/answer-cypress-question/" title="How I Answer a Cypress Question">How I Answer a Cypress Question</a>, or link the code block to the full test or application. For example, the complex sample workflow showing how to record Cypress tests has a link underneath pointing at the full workflow that is executed on each commit and thus is correct.</p><p><img src="/blog/images/copy-paste/link.png" alt="Link the code block to the test or tested application"></p><h2><span id="related-posts">Related posts</span></h2><ul><li><a href="/blog/good-examples/" title="Good examples">Good examples</a></li><li><a href="/blog/keep-examples-up-to-date/" title="Keep Examples Up To Date">Keep Examples Up To Date</a></li><li><a href="/blog/cypress-fiddle/" title="Run End-to-end Tests from Markdown Files">Run End-to-end Tests from Markdown Files</a></li><li>other blog posts tagged <a href="../tags/documentation">documentation</a></li><li>my <a href="https://slides.com/bahmutov/decks/documentation">documentation presentations</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;People joke that a senior software engineer is someone who knows how to Google and copy / paste examples from StackOverflow. I agree :) T
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="advice" scheme="https://glebbahmutov.com/blog/tags/advice/"/>
    
      <category term="documentation" scheme="https://glebbahmutov.com/blog/tags/documentation/"/>
    
  </entry>
  
  <entry>
    <title>Git Tips And Tricks</title>
    <link href="https://glebbahmutov.com/blog/git-tips-and-tricks/"/>
    <id>https://glebbahmutov.com/blog/git-tips-and-tricks/</id>
    <published>2021-05-04T04:00:00.000Z</published>
    <updated>2021-07-03T13:50:00.661Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="show-local-and-remote-branches">Show local and remote branches</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br><span class="line">git branch -r</span><br></pre></td></tr></table></figure><h2><span id="see-branches-sorted-by-the-last-commit">See branches sorted by the last commit</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --sort&#x3D;-committerdate</span><br></pre></td></tr></table></figure><p>Note: some git commands require installing globally NPM module <a href="https://github.com/so-fancy/diff-so-fancy#readme">diff-so-fancy</a>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g diff-so-fancy</span><br></pre></td></tr></table></figure><h2><span id="see-the-diffs-with-the-log">See the diffs with the log</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log -p</span><br></pre></td></tr></table></figure><h2><span id="get-the-file-from-another-branch">Get the file from another branch</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branch name&gt; &lt;filename&gt;</span><br><span class="line"># even from another commit</span><br><span class="line">git checkout &lt;sha&gt; &lt;filename&gt;</span><br></pre></td></tr></table></figure><h2><span id="checkout-previous-branch">Checkout previous branch</span></h2><p>Just like <code>cd -</code> goes to the previous working directory, <code>git checkout -</code> goes to the previously checkout branch.</p><h2><span id="git-cli-commands">Git CLI commands</span></h2><p>I use <a href="https://github.com/tj/git-extras">git-extras</a> to perform all my Git commands from the terminal.</p><h2><span id="see-more">See more</span></h2><p>Read my other <a href="../tags/git">Git blog posts</a>, starting with <a href="/blog/git-aliases/" title="Git aliases">Git aliases</a>.</p><h2><span id="related-posts">Related posts</span></h2><ul><li><a href="/blog/npm-tips-and-tricks/" title="NPM Tips and Tricks">NPM Tips and Tricks</a></li><li><a href="/blog/git-tips-and-tricks/" title="Git Tips And Tricks">Git Tips And Tricks</a></li><li><a href="/blog/large-web-app-development/" title="Large Web App Development">Large Web App Development</a></li><li><a href="/blog/cypress-tips-and-tricks/" title="Cypress Tips and Tricks">Cypress Tips and Tricks</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;show-local-and-remote-branches&quot;&gt;Show local and remote branches&lt;/span&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="git" scheme="https://glebbahmutov.com/blog/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>In Support of the Cambridge Green New Deal Zoning Petition</title>
    <link href="https://glebbahmutov.com/blog/in-support-of-cambridge-new-green-deal/"/>
    <id>https://glebbahmutov.com/blog/in-support-of-cambridge-new-green-deal/</id>
    <published>2021-05-01T04:00:00.000Z</published>
    <updated>2021-06-23T13:26:54.570Z</updated>
    
    <content type="html"><![CDATA[<p>This is an email I have sent to Cambridge City Council in May 2021 in suport of the . You too can read and support the GND zoning proposal at <a href="https://www.cambridgegnd.org/">https://www.cambridgegnd.org/</a>.</p><p>Dear Cambridge City Council members,</p><p>I am writing to strongly express my support for the Green New Deal Zoning Petition as described at <a href="https://www.cambridgegnd.org/">https://www.cambridgegnd.org/</a>. The climate crisis is here, it is affecting everyone, and we must act quickly. The commercial real estate we got in our city emits a lot of greenhouse gases, and thus should be taxed to minimize this harm. I especially like how the money collected from the pollution is going to be used to lower the carbon emissions in the rest of Cambridge. If we are all in the same boat, let&#39;s all plug the holes in it before we sink.</p><p>Thank you,Gleb Bahmutov, PhD</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is an email I have sent to Cambridge City Council in May 2021 in suport of the . You too can read and support the GND zoning proposa
      
    
    </summary>
    
      <category term="climate" scheme="https://glebbahmutov.com/blog/categories/climate/"/>
    
    
      <category term="climate" scheme="https://glebbahmutov.com/blog/tags/climate/"/>
    
  </entry>
  
  <entry>
    <title>NPM Tips and Tricks</title>
    <link href="https://glebbahmutov.com/blog/npm-tips-and-tricks/"/>
    <id>https://glebbahmutov.com/blog/npm-tips-and-tricks/</id>
    <published>2021-04-30T04:00:00.000Z</published>
    <updated>2021-07-20T14:44:04.332Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#install-and-test">Install and test</a></li><li><a href="#see-available-script-commands">See available script commands</a></li><li><a href="#run-the-command-in-a-different-folder">Run the command in a different folder</a></li><li><a href="#keep-npm-dependencies-up-to-date">Keep NPM dependencies up-to-date</a></li><li><a href="#control-the-npm-cache">Control the NPM cache</a></li><li><a href="#generate-random-string">Generate random string</a></li><li><a href="#see-npm-environment-variables">See NPM environment variables</a></li><li><a href="#open-npm-package-homepage-in-the-browser">Open NPM package homepage in the browser</a></li><li><a href="#delete-files">Delete files</a></li><li><a href="#run-npx-command-from-specific-package">Run NPX command from specific package</a></li><li><a href="#run-different-npm-scripts-depending-on-the-platform">Run different NPM scripts depending on the platform</a></li><li><a href="#extra-tools">Extra tools</a></li><li><a href="#my-npm-blog-posts">My NPM blog posts</a></li><li><a href="#related-posts">Related posts</a></li></ul><!-- tocstop --><h2><span id="install-and-test">Install and test</span></h2><p>You can install NPM dependencies and run tests with a single command:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm it</span><br><span class="line"># is equivalent to</span><br><span class="line">$ npm install</span><br><span class="line">$ npm test</span><br></pre></td></tr></table></figure><p>If you use the <code>package-lock.json</code> file:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm cit</span><br><span class="line"># is equivalent to</span><br><span class="line">$ npm ci</span><br><span class="line">$ npm test</span><br></pre></td></tr></table></figure><h2><span id="see-available-script-commands">See available script commands</span></h2><p>If the <code>package.json</code> has &quot;scripts&quot; commands like these</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lint&quot;</span>: <span class="string">&quot;...&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can list them all using</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm run</span></span><br></pre></td></tr></table></figure><h2><span id="run-the-command-in-a-different-folder">Run the command in a different folder</span></h2><p>You can use the option <code>--prefix &lt;path/to/folder&gt;</code> to run NPM command in a particular folder. It works like a cross-platform <code>cd &lt;path/to/folder&gt;; npm ...</code> combination.</p><p>Let&#39;s say we are in a larger project, and the server we want to launch is in its own subfolder</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app/</span><br><span class="line">  package.json      # top-level project (optional)</span><br><span class="line">  sub/</span><br><span class="line">    folder/</span><br><span class="line">      package.json</span><br><span class="line">      index.js</span><br></pre></td></tr></table></figure><p>Let&#39;s say the <code>sub/folder/package.json</code> has a &quot;start&quot; script</p><figure class="highlight json"><figcaption><span>sub/folder/package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;node .&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then we can install the dependencies and launch the app in the <code>sub/folder</code> all from the root <code>app/</code> folder:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app/ $ npm --prefix sub/folder install</span><br><span class="line">app/ $ npm --prefix sub/folder start</span><br><span class="line">...</span><br><span class="line"># after each command, the current directory is still app/</span><br><span class="line">app/ $</span><br></pre></td></tr></table></figure><h2><span id="keep-npm-dependencies-up-to-date">Keep NPM dependencies up-to-date</span></h2><ul><li>using an external service like my favorite Renovate is my preferred way of keeping NPM dependencies up-to-date, read <a href="../tags/renovate/">my Renovate blog posts</a></li><li>using local tool <a href="https://github.com/bahmutov/next-update">next-update</a> gives you stats and runs the tests when upgrading each module to ensure the update does not break the project</li></ul><h2><span id="control-the-npm-cache">Control the NPM cache</span></h2><p>By default NPM downloads the modules to install into <code>~/.npm</code> folder (and a similar user folder on Windows). You can change the cache folder using an environment variable <code>npm_config_cache</code>. You can also change it at run-time by providing <code>--cache &lt;path/to/folder&gt;</code> argument:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># install NPM dependencies using a local folder &quot;.npm&quot; to</span><br><span class="line"># cache, prefer already found modules from the cache</span><br><span class="line">$ npm i --cache .npm --prefer-offline</span><br></pre></td></tr></table></figure><h2><span id="generate-random-string">Generate random string</span></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node -p <span class="string">&#x27;crypto.randomBytes(4).toString(&quot;hex&quot;)&#x27;</span></span></span><br><span class="line">657bfb6c</span><br></pre></td></tr></table></figure><p>Pseudo-random using `Math.random()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.random().toString().slice(<span class="number">2</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2><span id="see-npm-environment-variables">See NPM environment variables</span></h2><p>When NPM command like <code>npm run ...</code> executes, it puts all NPM config values into the <code>process.env</code> object. To see all variables set, use</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm run env</span></span><br></pre></td></tr></table></figure><p>There will be variables prefixed with <code>npm_config_</code>, <code>npm_package_scripts_</code>, <code>npm_config_global_</code>, etc.</p><h2><span id="open-npm-package-homepage-in-the-browser">Open NPM package homepage in the browser</span></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm home &lt;npm package name&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> example</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm home cypress</span></span><br></pre></td></tr></table></figure><h2><span id="delete-files">Delete files</span></h2><p>To delete files the same way, no matter the operating system, use <a href="https://github.com/sindresorhus/del-cli">del-cli</a> as I show in <a href="https://github.com/bahmutov/test-del-cli">bahmutov/test-del-cli</a> repo. For example, using NPX you could do:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx del-cli <span class="string">&#x27;cypress/screenshots/*&#x27;</span></span></span><br></pre></td></tr></table></figure><p>Make sure to pass the wildcards using quotes to let the <code>del-cli</code> find the files.</p><p>Note: if there are no files matching the pattern, <code>del-cli</code> exits with code 0</p><h2><span id="run-npx-command-from-specific-package">Run NPX command from specific package</span></h2><p>Use the NPM package and find the alias inside:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npx available-versions cypress-grep</span><br><span class="line">npx: installed 261 in 10.531s</span><br><span class="line">cypress-grep from git+https://github.com/bahmutov/cypress-grep.git</span><br><span class="line">...</span><br><span class="line">prints list of published versions for package &quot;cypress-grep&quot;</span><br></pre></td></tr></table></figure><p>Specify the package name and the alias name to run:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># npx -p &lt;package name&gt; &lt;bin alias name&gt; &lt;arguments...&gt;</span><br><span class="line">$ npx -p dependency-version-badge update-badge cypress</span><br></pre></td></tr></table></figure><h2><span id="run-different-npm-scripts-depending-on-the-platform">Run different NPM scripts depending on the platform</span></h2><p>It is very annoying to have cross-OS differences, so the package <a href="https://github.com/charlesguse/run-script-os">run-script-os</a> nicely helps with that. Example of doing a different <code>test</code> command:</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;run-script-os&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test:win32&quot;</span>: <span class="string">&quot;echo &#x27;del whatever you want in Windows 32/64&#x27;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test:darwin:linux&quot;</span>: <span class="string">&quot;echo &#x27;You can combine OS tags and rm all the things!&#x27;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test:default&quot;</span>: <span class="string">&quot;echo &#x27;This will run on any platform that does not have its own script&#x27;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The user only needs to execute <code>npm test</code> and an appropriate script will run depending on the platform.</p><h2><span id="extra-tools">Extra tools</span></h2><p>Here are some useful tools I use every day:</p><ul><li><a href="https://github.com/bahmutov/npm-quick-run">npm-quick-run</a> lets you run NPM scripts without typing the full script name.</li><li><a href="https://github.com/bahmutov/available-versions">available-versions</a> fetches the new versions for the given NPM package name and shows them in a nice console table.</li><li><a href="https://github.com/bahmutov/as-a">as-a</a> runs a given command, including NPM scripts with additional settings from the secrets file injected as environment variables.</li><li><a href="https://github.com/bahmutov/bin-up">bin-up</a> Finds an installed tool in node_modules/.bin folders from current up to the git root.</li><li><a href="https://github.com/bahmutov/npm-install">bahmutov/npm-install</a> is my GitHub action for simple NPM installs (with caching) when using <a href="/blog/trying-github-actions/" title="GitHub Actions">GitHub Actions</a>.</li></ul><h2><span id="my-npm-blog-posts">My NPM blog posts</span></h2><ul><li><a href="/blog/organize-npm-scripts/" title="How I Organize my NPM Scripts">How I Organize my NPM Scripts</a></li><li><a href="/blog/do-not-let-npm-cache-snowball/" title="Do Not Let NPM Cache Snowball on CI">Do Not Let NPM Cache Snowball on CI</a></li><li><a href="/blog/subfolders-as-dependencies/" title="Subfolders as Dependencies">Subfolders as Dependencies</a></li><li><a href="/blog/do-not-use-node-env-for-staging/" title="Do not use NODE_ENV for staging">Do not use NODE_ENV for staging</a></li><li><a href="/blog/how-i-publish-to-npm/" title="How I publish to NPM">How I publish to NPM</a></li><li><a href="/blog/shell-variables-in-npm-scripts/" title="Shell variables in NPM scripts">Shell variables in NPM scripts</a></li><li><a href="/blog/smaller-published-NPM-modules/" title="Smaller published NPM modules">Smaller published NPM modules</a></li></ul><h2><span id="related-posts">Related posts</span></h2><ul><li><a href="/blog/npm-tips-and-tricks/" title="NPM Tips and Tricks">NPM Tips and Tricks</a></li><li><a href="/blog/git-tips-and-tricks/" title="Git Tips And Tricks">Git Tips And Tricks</a></li><li><a href="/blog/large-web-app-development/" title="Large Web App Development">Large Web App Development</a></li><li><a href="/blog/cypress-tips-and-tricks/" title="Cypress Tips and Tricks">Cypress Tips and Tricks</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#install-and-test&quot;&gt;Install and test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#see-available-script-commands&quot;&gt;See available scrip
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="nodejs" scheme="https://glebbahmutov.com/blog/tags/nodejs/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>How I Answer a Cypress Question</title>
    <link href="https://glebbahmutov.com/blog/answer-cypress-question/"/>
    <id>https://glebbahmutov.com/blog/answer-cypress-question/</id>
    <published>2021-04-24T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.229Z</updated>
    
    <content type="html"><![CDATA[<p>I read and answer the user Cypress questions in the Cypress <a href="https://on.cypress.io/chat">chat</a> a lot. Answering just a single specific question does not scale - every answer should be a change in our documentation so that all future users that come with the same question can find the answer themselves. This blog post describes how I do this very quickly.</p><h2><span id="the-question">The question</span></h2><p>Here is a typical question from the chat:</p><p><img src="/blog/images/answer/question.png" alt="The user is trying to assert that multiple elements are invisible"></p><p>Hmm. I do not remember asserting if multiple elements are invisible. I remember asserting that multiple elements <em>are</em> visible. Maybe Cypress has something broken? Maybe the negative visibility assertion does not handle multiple elements? Negative assertions <a href="/blog/negative-assertions/" title="can be tricky">can be tricky</a>, and checking visibility is <a href="/blog/debug-visibility/" title="complicated">complicated</a>.</p><h2><span id="the-markdown-test">The Markdown test</span></h2><p>I need to test this myself. I open the <a href="https://github.com/bahmutov/cypress-examples">cypress-examples</a> project in my code editor and launch Cypress. This project uses <a href="https://github.com/bahmutov/cypress-markdown-preprocessor">cypress-markdown-preprocessor</a> to use Markdown files as spec. I can surrounds the example HTML markup and the Cypress test commands code blocks with &quot;fiddle&quot; HTML comments - and this region becomes a test.</p><p><img src="/blog/images/answer/fiddle1.png" alt="The example application markup block"></p><p>The test commands can be even split across several JS code blocks with inserted explanations.</p><p><img src="/blog/images/answer/fiddle2.png" alt="The Cypress test commands to run against the example markup"></p><p>The Cypress runs the above test by mounting the HTML block as a live mini web application and then running the commands against it.</p><p><img src="/blog/images/answer/multiple.gif" alt="Cypress correctly retries the assertions until the elements are hidden"></p><p>So our negative visibility assertion works correctly in the situations with multiple elements.</p><h2><span id="the-documentation">The documentation</span></h2><p>Our test was embedded right inside the Markdown file. This file can be converted into the static HTML page. In the cypress-examples projects, we use Vuepress to convert MD to HTML. You can find the commit <a href="https://github.com/bahmutov/cypress-examples/commit/b588b6e9225c2436f9621de5d3c3ba97f4e319bb">b588b</a> in the repository. The commit was tested again as Markdown and as JavaScript against the converted HTML static pages.</p><p><img src="/blog/images/answer/ci.png" alt="The GitHub Actions workflow tests all documentation examples"></p><p>The entire workflow runs very quickly, thanks to <a href="/blog/parallel-cypress-tests-gh-action/" title="running all tests in parallel">running all tests in parallel</a>. After all tests pass, the static pages are deployed.</p><p><img src="/blog/images/answer/doc-page.gif" alt="The Markdown page converted to HTML and deployed"></p><p>You can see the latest version of this page at <a href="https://glebbahmutov.com/cypress-examples/commands/assertions.html">https://glebbahmutov.com/cypress-examples/commands/assertions.html</a> or go to the Cypress version-specific page at <a href="https://glebbahmutov.com/cypress-examples/7.1.0/commands/assertions.html">https://glebbahmutov.com/cypress-examples/7.1.0/commands/assertions.html</a>.</p><p>Once the page is deployed, we can send the anchor link to the example to the user who asked the question.</p><p><img src="/blog/images/answer/answer.png" alt="Answering the user question with the link to the example"></p><blockquote class="pullquote"><p>📺 I have recently delivered a presentation about using the user Markdown documentation as tests. You can watch the presentation <a href="https://youtu.be/H9VqsTZ9NME">here</a> and browse the slides at <a href="https://slides.com/bahmutov/tests-are-docs">slides.com/bahmutov/tests-are-docs</a>.</p></blockquote><h2><span id="search">Search</span></h2><p>After the successful deployment, the example pages are scraped, see the workflow file <a href="https://github.com/bahmutov/cypress-examples/blob/master/.github/workflows/deployed.yml">.github/workflows/deployed.yml</a>.</p><p><img src="/blog/images/answer/scrape-workflow.png" alt="The scrape workflow runs after each successful deployment"></p><p>From now on, any user can quickly discover an example of checking if multiple elements are invisible by searching using the Algolia search widget.</p><p><img src="/blog/images/answer/search.png" alt="The search finds our new example"></p><p>You can learn more about scraping the technical documentation from my presentations <a href="https://slides.com/bahmutov/testing-docs">Testing Your Documentation Search</a> and <a href="https://slides.com/bahmutov/find-me-if-you-can">Find Me If You Can</a> and from the blog post <a href="/blog/scrape-static-site-with-algolia/" title="Scrape Static Site with Algolia">Scrape Static Site with Algolia</a>.</p><p>To &quot;quote&quot; the &quot;Find My If You Can&quot; presentation, I strongly believe that the users should find the answers to their questions via the search. If the answer does not exist in documentation, then:</p><p><img src="/blog/images/answer/add.png" alt="Answer the user question with the link"></p><h2><span id="video">Video</span></h2><p>You can see the entire process in this 10 minute screen recording below. In this video, I answer the question &quot;how to get and confirm attributes from multiple elements?&quot;:</p><center>  <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/Cj1g_PWZJF8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Yes, it only takes a few minutes to create another <em>tested</em> example that is deployed only in a few minutes after all tests still pass!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I read and answer the user Cypress questions in the Cypress &lt;a href=&quot;https://on.cypress.io/chat&quot;&gt;chat&lt;/a&gt; a lot. Answering just a single 
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Scraping the List of Presentation Slides</title>
    <link href="https://glebbahmutov.com/blog/scrape-list-of-slides/"/>
    <id>https://glebbahmutov.com/blog/scrape-list-of-slides/</id>
    <published>2021-04-23T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.344Z</updated>
    
    <content type="html"><![CDATA[<p>I love using slides.com to give my presentations, that&#39;s why you can see 150 of my public slide decks at <a href="https://slides.com/bahmutov">slides.com/bahmutov</a>. Lately I am experiencing a huge problem: when someone is asking me a question, or I need to explain a topic, often I know that I gave a presentation that has the right content. But how do I find it? How do I find the right slide?</p><p>It is becoming an issue, so let&#39;s see what we can do. I have used documentation scraping very <a href="/blog/scrape-static-site-with-algolia/" title="successfully before">successfully before</a>, so I know if I can feed the text contents of the slide decks to Algolia for example, I could quickly find the answers. But unfortunately, Slides.com <a href="https://slides.com/developers">does not expose</a> the API to grab the slide text and URLs directly. Thus I need to scrape my slide decks myself. Let&#39;s do this!</p><!-- toc --><ul><li><a href="#the-list-of-decks-markup">The list of decks markup</a></li><li><a href="#getting-slide-elements-from-the-test">Getting slide elements from the test</a></li><li><a href="#use-aliases">Use aliases</a></li><li><a href="#save-deck-information-into-a-file">Save deck information into a file</a></li><li><a href="#scraper-the-list-periodically">Scraper the list periodically</a></li><li><a href="#discussion">Discussion</a></li></ul><!-- tocstop --><blockquote class="pullquote"><p>🎁 You can find the source code for this blog post in the <a href="https://github.com/bahmutov/scrape-slides">bahmutov/scrape-slides</a> repository.</p></blockquote><h2><span id="the-list-of-decks-markup">The list of decks markup</span></h2><p>First, we need to grab the list of all my public decks from &quot;slides.com/bahmutov&quot;. The list of decks has very nice CSS classes, and by inspecting and trying them in the DevTools console we can find the right one <code>&#39;.decks.visible .deck.public&#39;</code>:</p><p><img src="/blog/images/scrape-slides/select-public-decks.png" alt="We can select all public decks with a CSS selector"></p><p>This selector returns 126 public decks. Can we grab the main properties of every deck from the DOM element, like the presentation&#39;s description, URL, etc? Yes! If you look at the properties of the DOM elements found, then you can locate the <code>dataset</code> property with everything I am interested in:</p><p><img src="/blog/images/scrape-slides/dataset.png" alt="Presentation properties are stored in the dataset object"></p><h2><span id="getting-slide-elements-from-the-test">Getting slide elements from the test</span></h2><p>Let&#39;s get the deck information using Cypress. Our configuration file is very bare-bones right now: we only use the <code>baseUrl</code> to directly visit the site</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;fixturesFolder&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;supportFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;pluginsFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;https://slides.com/bahmutov&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Our first test grabs the decks using the selector we found:</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line">describe(<span class="string">&#x27;Bahmutov slides&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;has decks&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">// there are a log of slide decks</span></span><br><span class="line">    cy.get(<span class="string">&#x27;.decks.visible .deck.public&#x27;</span>).should(<span class="string">&#x27;have.length.gt&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes.</p><p><img src="/blog/images/scrape-slides/test-decks.png" alt="Decks are found during the test"></p><p>Can we get the <code>dataset</code> property, let&#39;s say from the first presentation? Yes, by invoking the <code>prop</code> method of the jQuery wrapper returned by the <a href="https://on.cypress.io/get">cy.get</a> command. Let&#39;s run just the second test:</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line">describe(<span class="string">&#x27;Bahmutov slides&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;has decks&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">// there are a log of slide decks</span></span><br><span class="line">    cy.get(<span class="string">&#x27;.decks.visible .deck.public&#x27;</span>).should(<span class="string">&#x27;have.length.gt&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it.only(<span class="string">&#x27;has deck dataset&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// there are a log of slide decks</span></span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">// there are a log of slide decks</span></span><br><span class="line">    cy.get(<span class="string">&#x27;.decks.visible .deck.public&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.length.gt&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">      .first()</span><br><span class="line">      .invoke(<span class="string">&#x27;prop&#x27;</span>, <span class="string">&#x27;dataset&#x27;</span>)</span><br><span class="line">      .then(<span class="function">(<span class="params">props</span>) =&gt;</span> cy.log(<span class="built_in">JSON</span>.stringify(props)))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/scrape-slides/get-dataset.png" alt="The dataset from the first deck element"></p><p>We are only interested in some properties from the dataset, let&#39;s pick them using the bundled Lodash library.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Picks only immutable (mostly) properties from the deck, like</span></span><br><span class="line"><span class="comment"> * when it was created (as UTC string), description, etc.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;object&#125;</span> <span class="variable">dataset</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="variable">object</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> pickDeckProperties = <span class="function">(<span class="params">dataset</span>) =&gt;</span></span><br><span class="line">  Cypress._.pick(dataset, [</span><br><span class="line">    <span class="string">&#x27;createdAt&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;slug&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;url&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;visibility&#x27;</span>,</span><br><span class="line">  ])</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Bahmutov slides&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;has decks&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">// there are a log of slide decks</span></span><br><span class="line">    cy.get(<span class="string">&#x27;.decks.visible .deck.public&#x27;</span>).should(<span class="string">&#x27;have.length.gt&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it.only(<span class="string">&#x27;has deck dataset&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">// there are a log of slide decks</span></span><br><span class="line">    cy.get(<span class="string">&#x27;.decks.visible .deck.public&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.length.gt&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">      .first()</span><br><span class="line">      .invoke(<span class="string">&#x27;prop&#x27;</span>, <span class="string">&#x27;dataset&#x27;</span>)</span><br><span class="line">      .then(pickDeckProperties)</span><br><span class="line">      .then(<span class="function">(<span class="params">props</span>) =&gt;</span> cy.log(<span class="built_in">JSON</span>.stringify(props)))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Beautiful.</p><h2><span id="use-aliases">Use aliases</span></h2><p>Let&#39;s take a second to refactor our spec file. Every test needs the page, every test needs the list of presentation DOM elements. We can visit the page before each test, or even once using <code>before</code> hook and have all tests work after that:</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Picks only immutable (mostly) properties from the deck, like</span></span><br><span class="line"><span class="comment"> * when it was created (as UTC string), description, etc.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;object&#125;</span> <span class="variable">dataset</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="variable">object</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> pickDeckProperties = <span class="function">(<span class="params">dataset</span>) =&gt;</span></span><br><span class="line">  Cypress._.pick(dataset, [</span><br><span class="line">    <span class="string">&#x27;createdAt&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;slug&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;url&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;visibility&#x27;</span>,</span><br><span class="line">  ])</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Bahmutov slides&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;has decks&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// there are a log of slide decks</span></span><br><span class="line">    cy.get(<span class="string">&#x27;.decks.visible .deck.public&#x27;</span>).should(<span class="string">&#x27;have.length.gt&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;has deck dataset&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// there are a log of slide decks</span></span><br><span class="line">    cy.get(<span class="string">&#x27;.decks.visible .deck.public&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.length.gt&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">      .first()</span><br><span class="line">      .invoke(<span class="string">&#x27;prop&#x27;</span>, <span class="string">&#x27;dataset&#x27;</span>)</span><br><span class="line">      .then(pickDeckProperties)</span><br><span class="line">      .then(<span class="function">(<span class="params">props</span>) =&gt;</span> cy.log(<span class="built_in">JSON</span>.stringify(props)))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hmm, every test starts with getting the list of deck elements. Can we move the <code>cy.get</code> command to be with <code>cy.visit</code> and save the result into <a href="https://on.cypress.io/as">an alias</a>?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 🔥 THIS WILL NOT WORK, JUST A DEMO</span></span><br><span class="line">before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// there are a log of slide decks</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.decks.visible .deck.public&#x27;</span>).as(<span class="string">&#x27;decks&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;has decks&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">&#x27;@decks&#x27;</span>).should(<span class="string">&#x27;have.length.gt&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;has deck dataset&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">&#x27;@decks&#x27;</span>)</span><br><span class="line">    .first()</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Unfortunately the above code DOES NOT WORK because aliases are reset before each test, see the <a href="https://on.cypress.io/variables-and-aliases">Variables and Aliases</a> guide for details. Instead we can visit the page once, and then save the alias before each test by using both <code>before</code> and <code>beforeEach</code> hooks:</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;Bahmutov slides&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// there are a log of slide decks</span></span><br><span class="line">    cy.get(<span class="string">&#x27;.decks.visible .deck.public&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.length.gt&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">      .as(<span class="string">&#x27;decks&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;has decks&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.get(<span class="string">&#x27;@decks&#x27;</span>).should(<span class="string">&#x27;have.length.gt&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;has deck dataset&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.get(<span class="string">&#x27;@decks&#x27;</span>)</span><br><span class="line">      .first()</span><br><span class="line">      ...</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="save-deck-information-into-a-file">Save deck information into a file</span></h2><p>Now let&#39;s grab the dataset property from each found deck element, and then save the result into a JSON file. I will omit the first two test we have already written, this is the test to write the file using <a href="https://on.cypress.io/writefile">cy.writeFile</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Picks only immutable (mostly) properties from the deck, like</span></span><br><span class="line"><span class="comment"> * when it was created (as UTC string), description, etc.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;object&#125;</span> <span class="variable">dataset</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="variable">object</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> pickDeckProperties = <span class="function">(<span class="params">dataset</span>) =&gt;</span></span><br><span class="line">  Cypress._.pick(dataset, [</span><br><span class="line">    <span class="string">&#x27;createdAt&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;slug&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;url&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;visibility&#x27;</span>,</span><br><span class="line">  ])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getDeckProperties = <span class="function">(<span class="params">deck$</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> dataset = deck$.prop(<span class="string">&#x27;dataset&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> pickDeckProperties(dataset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Bahmutov slides&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// grab all decks before each test because the aliases</span></span><br><span class="line">  <span class="comment">// are reset before every test</span></span><br><span class="line">  beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// there are a log of slide decks</span></span><br><span class="line">    cy.get(<span class="string">&#x27;.decks.visible .deck.public&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.length.gt&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">      .as(<span class="string">&#x27;decks&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;saves all deck props&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> decks = []</span><br><span class="line">    cy.get(<span class="string">&#x27;@decks&#x27;</span>)</span><br><span class="line">      .each(<span class="function">(<span class="params">deck$</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> deckProps = getDeckProperties(deck$)</span><br><span class="line">        decks.push(deckProps)</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        cy.writeFile(<span class="string">&#x27;decks.json&#x27;</span>, decks)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Notice how we iterate over the DOM elements, saving the extracted and cleaned up dataset objects in an array to be saved later. The saved file <a href="https://github.com/bahmutov/scrape-slides/blob/main/decks.json">decks.json</a> can be found at the root of the project:</p><figure class="highlight json"><figcaption><span>decks.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;createdAt&quot;</span>: <span class="string">&quot;2021-04-09 19:31:53 UTC&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;In this presentation, Gleb will show how every commit and every pull request can run the full set of realistic end-to-end tests, ensuring the web application is going to work for the user. He will look at the modern CI setup, benefits of clean data environments, and parallelization speed-ups. Anyone looking to learn how awesome the modern automated testing pipeline can be would benefit from this presentation. Presented at BrightTALK 2021&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;slug&quot;</span>: <span class="string">&quot;no-excuses&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;/bahmutov/no-excuses&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;bahmutov&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;visibility&quot;</span>: <span class="string">&quot;all&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;createdAt&quot;</span>: <span class="string">&quot;2021-04-01 17:19:27 UTC&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot; Keeping the documentation up-to-date with the web application is hard. The screenshots and the videos showing the user how to perform some task quickly fall out of sync with the latest design and logic changes. In this presentation, I will show how to use end-to-end tests to generate the documentation. By keeping the tests in sync with the application, and by running them on every commit, we will update the documentation, ensuring our users never get confused by the obsolete docs. Presented at TestingStage 2021, video at https://youtu.be/H9VqsTZ9NME&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;slug&quot;</span>: <span class="string">&quot;tests-are-docs&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;/bahmutov/tests-are-docs&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;bahmutov&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;visibility&quot;</span>: <span class="string">&quot;all&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Super.</p><h2><span id="scraper-the-list-periodically">Scraper the list periodically</span></h2><p>Before we get into the presentation text search, we need to make sure we can run our list scraping operation periodically. Since our <code>decks.json</code> file can be checked into the source control, let&#39;s use GitHub Actions to run our Cypress tests - because the GH Actions have very nice access to the repo and push any changed files back to the repo, see my blog post <a href="/blog/trying-github-actions/" title="Trying GitHub Actions">Trying GitHub Actions</a> for details.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">scrape</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;0 3 * * *&#x27;</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">cypress-run:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="comment"># pass the Dashboard record key as an environment variable</span></span><br><span class="line">          <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CYPRESS_RECORD_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># pass GitHub token to allow accurately detecting</span></span><br><span class="line">          <span class="comment"># a build vs a re-run build</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># if the decks.json file has been updated by the test</span></span><br><span class="line">      <span class="comment"># commit and push it to the repo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Commit</span> <span class="string">deck.json</span> <span class="string">if</span> <span class="string">changed</span> <span class="string">💾</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">stefanzweifel/git-auto-commit-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">commit_message:</span> <span class="string">Updated</span> <span class="string">decks.json</span> <span class="string">file</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line">          <span class="attr">file_pattern:</span> <span class="string">&#x27;decks.json&#x27;</span></span><br></pre></td></tr></table></figure><p>Now every night the <code>decks.json</code> will be recreated - and if it changed, then the updated file will be pushed back into the repository.</p><h2><span id="discussion">Discussion</span></h2><p>This is just the start, we are scraping the list of presentations as the first step to scraping each presentation&#39;s content. By using Cypress to scrape we can see what the algorithm does at each step. If something fails during scraping, we can inspect the screenshots and videos to determine what has changed. Follow this blog to read the future blog posts where we will look at each presentation and how to scrape its content.</p><p>For more information, see these blog posts and presentations</p><ul><li>presentation <a href="https://slides.com/bahmutov/test-driven-documentation">Test-Driven Documentation</a></li><li>presentation <a href="https://slides.com/bahmutov/testing-docs">Testing Your Documentation Search</a></li><li>presentation <a href="https://slides.com/bahmutov/find-me-if-you-can">Find Me If You Can</a></li><li>blog post <a href="/blog/scrape-static-site-with-algolia/" title="Scrape Static Site with Algolia">Scrape Static Site with Algolia</a></li><li>blog post <a href="/blog/custom-search-for-my-projects-and-blog-posts/" title="Search across my blog posts and github projects">Search across my blog posts and github projects</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I love using slides.com to give my presentations, that&amp;#39;s why you can see 150 of my public slide decks at &lt;a href=&quot;https://slides.com/
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="presentation" scheme="https://glebbahmutov.com/blog/tags/presentation/"/>
    
  </entry>
  
  <entry>
    <title>Cypress request and cookies</title>
    <link href="https://glebbahmutov.com/blog/cypress-request-and-cookies/"/>
    <id>https://glebbahmutov.com/blog/cypress-request-and-cookies/</id>
    <published>2021-04-21T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.259Z</updated>
    
    <content type="html"><![CDATA[<p>While running the Cypress tests you can make requests to the backend with full set of the page&#39;s cookies using the <a href="https://on.cypress.io/request">cy.request</a> command. You can also add more cookies and other request headers using <code>cy.request</code> options. If you need to make an HTTP request <em>without</em> default cookies, use the <code>window.fetch</code> or the <a href="https://on.cypress.io/task">cy.task</a> command.</p><!-- toc --><ul><li><a href="#page-cookies">Page cookies</a></li><li><a href="#http-request">HTTP request</a></li><li><a href="#http-request-with-extra-cookies">HTTP request with extra cookies</a></li><li><a href="#windowfetch">window.fetch</a></li><li><a href="#windowfetch-without-cookies">window.fetch without cookies</a></li><li><a href="#request-from-node">Request from Node</a></li></ul><!-- tocstop --><blockquote class="pullquote"><p>🎁 You can find the source code for this blog post in the <a href="https://github.com/cypress-io/cypress-example-recipes#server-communication">Server communication</a> recipes.</p></blockquote><h2><span id="page-cookies">Page cookies</span></h2><p>When Cypress visits the page using <a href="https://on.cypress.io/visit">cy.visit</a> command, any cookies sent by the server via the response header <code>Set-Cookie</code> are set in the browser. For example, if the server sends the index page like this:</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (req.url === <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">  res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)</span><br><span class="line">  res.setHeader(<span class="string">&#x27;Set-Cookie&#x27;</span>, <span class="string">&#x27;mycookie=testcookie&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> send(res, <span class="number">200</span>, <span class="string">&#x27;&lt;body&gt;&lt;h1&gt;Hi there&lt;/h1&gt;&lt;/body&gt;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/blog/images/request/set-cookie.png" alt="The HTML document sets the browser cookie using the response header"></p><p>The Cypress test can confirm the cookies was set using the <a href="https://on.cypress.io/getcookie">cy.getCookie</a> command:</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// enables intelligent code completion for Cypress commands</span></span><br><span class="line"><span class="comment">// https://on.cypress.io/intelligent-code-completion</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Making requests&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;sets the test cookie&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.getCookie(<span class="string">&#x27;mycookie&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">        name: <span class="string">&#x27;mycookie&#x27;</span>,</span><br><span class="line">        value: <span class="string">&#x27;testcookie&#x27;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes.</p><p><img src="/blog/images/request/get-cookie.png" alt="The yielded cookie object includes our expected properties"></p><p>Note that the full cookie object includes other properties, but we are not interested in them for this test.</p><h2><span id="http-request">HTTP request</span></h2><p>Let&#39;s say we want to make an HTTP call from the test to the backend as if the application made the call. The request should include the cookies from the page. We can use the <a href="https://on.cypress.io/request">cy.request</a> command.</p><p>First, let&#39;s add an API endpoint to our server to simply print the request cookies and return them back as a JSON object.</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (req.url === <span class="string">&#x27;/print-cookies&#x27;</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;=== all cookies 🍪 ===&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(req.cookies)</span><br><span class="line">  <span class="keyword">return</span> send(res, <span class="number">200</span>, req.cookies || &#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> I am using <a href="https://github.com/vercel/micro#readme">micro</a> to handle the requests on the server, and <a href="https://github.com/Zakjholt/micro-cookie#readme">micro-cookie</a> to parse the incoming cookies.</p><p>Let&#39;s write a Cypress test to confirm the <code>cy.request</code> by default includes the cookies set by visiting the index page itself.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;sends the cookie when using cy.request&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://on.cypress.io/request</span></span><br><span class="line">  <span class="comment">// the endpoint /print-cookies returns the sent cookies</span></span><br><span class="line">  <span class="comment">// back to use so we can validate</span></span><br><span class="line">  cy.request(<span class="string">&#x27;/print-cookies&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;deep.equal&#x27;</span>, &#123; <span class="attr">mycookie</span>: <span class="string">&#x27;testcookie&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/request/request.png" alt="The cy.request includes the page cookies"></p><h2><span id="http-request-with-extra-cookies">HTTP request with extra cookies</span></h2><p>What if we want to include additional cookies or headers when making the request? Sure!</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;sends additional cookies via cy.request headers&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://on.cypress.io/request</span></span><br><span class="line">  <span class="comment">// can add more headers and cookies</span></span><br><span class="line">  cy.request(&#123;</span><br><span class="line">    url: <span class="string">&#x27;/print-cookies&#x27;</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;cookieA=valueA; cookieB=valueB&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">    .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    <span class="comment">// the cookies sent to the server are the combination</span></span><br><span class="line">    <span class="comment">// of the cookies set by the page via cy.visit</span></span><br><span class="line">    <span class="comment">// and the cookies we sent via the Cookie header</span></span><br><span class="line">    .should(<span class="string">&#x27;deep.equal&#x27;</span>, &#123;</span><br><span class="line">      mycookie: <span class="string">&#x27;testcookie&#x27;</span>,</span><br><span class="line">      cookieA: <span class="string">&#x27;valueA&#x27;</span>,</span><br><span class="line">      cookieB: <span class="string">&#x27;valueB&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/request/extra-cookies.png" alt="Adding more cookies when calling cy.request"></p><p>If you want to include additional headers, like <code>Bearer</code> when makig the request, add more headers.</p><h2><span id="windowfetch">window.fetch</span></h2><p>We can use <code>fetch</code> function to make the request with the page cookies; the usual browser cross-original restrictions apply (that&#39;s why <code>cy.request</code> is so useful, as it bypasses those)</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;fetch makes request with page cookies&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// by wrapping the Promise returned by the &quot;fetch&quot; function</span></span><br><span class="line">  <span class="comment">// we place it into the Cypress command chain</span></span><br><span class="line">  cy.wrap(fetch(<span class="string">&#x27;/print-cookies&#x27;</span>))</span><br><span class="line">    <span class="comment">// to get the JSON from the response object</span></span><br><span class="line">    <span class="comment">// need to call res.json()</span></span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> do not use cy.invoke as it can be retried</span></span><br><span class="line">    <span class="comment">// and the response cannot have res.json() called more than once</span></span><br><span class="line">    .then(<span class="function"><span class="params">r</span> =&gt;</span> r.json())</span><br><span class="line">    .should(<span class="string">&#x27;deep.equal&#x27;</span>, &#123;</span><br><span class="line">      mycookie: <span class="string">&#x27;testcookie&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/request/fetch-cookies.png" alt="Using fetch sends page cookies"></p><h2><span id="windowfetch-without-cookies">window.fetch without cookies</span></h2><p>You can omit sending page cookies, even to the same origin.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;fetch without page cookies&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.wrap(fetch(<span class="string">&#x27;/print-cookies&#x27;</span>, &#123; <span class="attr">credentials</span>: <span class="string">&#x27;omit&#x27;</span> &#125;))</span><br><span class="line">    .then(<span class="function"><span class="params">r</span> =&gt;</span> r.json())</span><br><span class="line">    <span class="comment">// no cookies were sent with the fetch request</span></span><br><span class="line">    .should(<span class="string">&#x27;deep.equal&#x27;</span>, &#123;&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/request/omit-cookies.png" alt="Omit cookies when sending the fetch request"></p><h2><span id="request-from-node">Request from Node</span></h2><p>If you want to make some other HTTP request without any restrictions, you can make it from the Node environment - by using the plugin file. Let&#39;s use the popular module <a href="https://github.com/sindresorhus/got#api">got</a> to make the requests. In the plugin file:</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="keyword">const</span> got = <span class="built_in">require</span>(<span class="string">&#x27;got&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type <span class="type">&#123;Cypress.PluginConfig&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// eslint-disable-next-line no-unused-vars</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">httpRequest</span>(<span class="params">params</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;making the HTTP request:&#x27;</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(params)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// use the &quot;got&quot; module to make HTTP requests</span></span><br><span class="line">      <span class="comment">// https://github.com/sindresorhus/got#readme</span></span><br><span class="line">      <span class="keyword">return</span> got(params).then(<span class="function"><span class="params">r</span> =&gt;</span> r.body)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Our test simply passes the explicit cookies via the header we want to send.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;request from Node&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// makes HTTP request using the &quot;got&quot; module</span></span><br><span class="line">  <span class="comment">// https://github.com/sindresorhus/got#api</span></span><br><span class="line">  cy.task(<span class="string">&#x27;httpRequest&#x27;</span>, &#123;</span><br><span class="line">    url: Cypress.config(<span class="string">&#x27;baseUrl&#x27;</span>) + <span class="string">&#x27;/print-cookies&#x27;</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;cookieA=valueA; cookieB=valueB&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    responseType: <span class="string">&#x27;json&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">    <span class="comment">// only the explicit cookies are included</span></span><br><span class="line">    <span class="comment">// in the request, no page cookies</span></span><br><span class="line">    .should(<span class="string">&#x27;deep.equal&#x27;</span>, &#123;</span><br><span class="line">      cookieA: <span class="string">&#x27;valueA&#x27;</span>,</span><br><span class="line">      cookieB: <span class="string">&#x27;valueB&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes - and only sends the explicit cookies we sent when making the <a href="https://on.cypress.io/task">cy.task</a> call. In the screenshot below I show the terminal from the Cypress process that prints the <code>console.log</code> statements from the plugin file.</p><p><img src="/blog/images/request/got-cookies.png" alt="The plugin file making the request"></p><p>As the above tests show you have a choice of methods to use to make HTTP requests from Cypress tests. You can make calls using <code>cy.request</code> or <code>window.fetch</code> if you need the page cookies, with <code>cy.request</code> being more powerful, since it is not CORS-limited. If you need to make an absolutely arbitrary HTTP request without sending the page cookies, you can make your own call from the plugin file.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;While running the Cypress tests you can make requests to the backend with full set of the page&amp;#39;s cookies using the &lt;a href=&quot;https://o
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Testing Mongo with Cypress</title>
    <link href="https://glebbahmutov.com/blog/testing-mongo-with-cypress/"/>
    <id>https://glebbahmutov.com/blog/testing-mongo-with-cypress/</id>
    <published>2021-04-20T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.368Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine your web application is using MongoDB to store its data. How would you take advantage of it during Cypress tests? This blog post shows how to clear the data from a local Mongo database before each test by connecting to the DB directly from the Cypress plugin file.</p><h2><span id="the-setup">The setup</span></h2><p>My &quot;application&quot; is very simply - it is a single API endpoint that collects pizza information. You can post new pizza names plus ingredients and get the full list.</p><figure class="highlight js"><figcaption><span>server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; connect &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./db&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.use(bodyParser.json()) <span class="comment">// for parsing application/json</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> db</span><br><span class="line"><span class="keyword">let</span> pizzas</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/pizza&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;getting pizza list&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!pizzas) &#123;</span><br><span class="line">    pizzas = db.collection(<span class="string">&#x27;pizzas&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> cursor = pizzas.find()</span><br><span class="line">  <span class="keyword">const</span> count = <span class="keyword">await</span> cursor.count()</span><br><span class="line">  <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;No pizzas found!&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> res.json([])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Found %d&#x27;</span>, count)</span><br><span class="line">  <span class="keyword">const</span> list = <span class="keyword">await</span> cursor.toArray()</span><br><span class="line">  res.json(list)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/pizza&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;POST pizza&#x27;</span>, req.body)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!pizzas) &#123;</span><br><span class="line">    pizzas = db.collection(<span class="string">&#x27;pizzas&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> pizzas.insertOne(req.body)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;inserted %s&#x27;</span>, result.insertedId)</span><br><span class="line">  res.json(&#123; <span class="attr">_id</span>: result.insertedId &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">initServer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  db = <span class="keyword">await</span> connect()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> PORT = process.env.PORT || <span class="number">8080</span></span><br><span class="line">  app.listen(PORT, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Server listening on port <span class="subst">$&#123;PORT&#125;</span>...`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// TODO implement disconnect on quit signal</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">initServer().catch(<span class="built_in">console</span>.dir)</span><br></pre></td></tr></table></figure><p>The Mongo connection is made in the file <code>db.js</code> shown below:</p><figure class="highlight js"><figcaption><span>db.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; MongoClient &#125; = <span class="built_in">require</span>(<span class="string">&#x27;mongodb&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> uri = process.env.MONGO_URI</span><br><span class="line"><span class="keyword">if</span> (!uri) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Missing MONGO_URI&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> MongoClient(uri)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Connect the client to the server</span></span><br><span class="line">  <span class="keyword">await</span> client.connect()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> client.db(<span class="string">&#x27;foods&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">disconnect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Ensures that the client will close when you finish/error</span></span><br><span class="line">  <span class="keyword">await</span> client.close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123; connect, disconnect &#125;</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>🎁 You can find the source code at <a href="https://github.com/bahmutov/cypress-example-mongodb">bahmutov/cypress-example-mongodb</a>.</p></blockquote><p>Notice that we connect to the Mongo instance using the single connection string from the <code>MONGO_URI</code> environment variable.</p><h2><span id="run-mongo-locally">Run Mongo locally</span></h2><p>The simplest way to run Mongo instance locally is by using Docker container, read <a href="https://www.code4it.dev/blog/run-mongodb-on-docker">this post</a>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker pull mongo</span><br><span class="line">docker run -d --name mongo-on-docker \</span><br><span class="line">  -p 27017:27017 \</span><br><span class="line">  -e MONGO_INITDB_ROOT_USERNAME=mongoadmin \</span><br><span class="line">  -e MONGO_INITDB_ROOT_PASSWORD=secret \</span><br><span class="line">  mongo</span><br></pre></td></tr></table></figure><p>The above command starts a new container called <code>mongo-on-docker</code> using the pulled image <code>mongo</code>. The container will expose the port 27017 (Mongo&#39;s default port for connection). We also pass the admin user name and password we want to use.</p><p>The user name and the password then can be used to create the connection string environment variable:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MONGO_URI&#x3D;mongodb:&#x2F;&#x2F;mongoadmin:secret@localhost:27017&#x2F;?authSource&#x3D;admin</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> to stop and remove the container later use the following commands:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop mongo-on-docker</span><br><span class="line">docker rm mongo-on-docker</span><br></pre></td></tr></table></figure><h2><span id="start-the-server">Start the server</span></h2><p>After starting the Mongo DB instance, we can start the server. We can pass the <code>MONGO_URI</code> inline</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> MONGO_URI=mongodb://mongoadmin:secret@localhost:27017/?authSource=admin \</span></span><br><span class="line"><span class="bash">    node ./server</span></span><br></pre></td></tr></table></figure><p>A better idea is to use <a href="http://github.com/bahmutov/as-a">as-a</a> to keep the secret environment variable outside the repository and easily inject them when running the commands. Thus I place the <code>MONGO_URI</code> into <code>~/.as-a/.as-a.ini</code> file</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mongo-example]</span></span><br><span class="line"><span class="attr">MONGO_URI</span>=mongodb://mongoadmin:secret@localhost:<span class="number">27017</span>/?authSource=admin</span><br></pre></td></tr></table></figure><p>and start the server like this after installing <code>as-a</code> globally</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -g as-a</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> as-a mongo-example node ./server</span></span><br><span class="line"></span><br><span class="line">Server listening on port 8080...</span><br></pre></td></tr></table></figure><p>Super, we can hit the server endpoint <code>/pizza</code> from the command line to check:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl http://localhost:8080/pizza</span></span><br><span class="line">[]</span><br></pre></td></tr></table></figure><h2><span id="the-first-api-test">The first API test</span></h2><p>Let&#39;s write Cypress <a href="https://www.cypress.io/blog/2017/11/07/add-gui-to-your-e2e-api-tests/">API test</a> using <a href="https://on.cypress.io/request">cy.request</a> command.</p><p>We will always hit the local URL, so let&#39;s place it into the <code>baseUrl</code> setting in the configuration file <code>cypress.json</code>:</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;fixturesFolder&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;supportFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;http://localhost:8080&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Pizzas&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;shows an empty list initially&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// https://on.cypress.io/request</span></span><br><span class="line">    cy.request(<span class="string">&#x27;/pizza&#x27;</span>).its(<span class="string">&#x27;body&#x27;</span>).should(<span class="string">&#x27;deep.equal&#x27;</span>, [])</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/mongo/first-mongo-test.png" alt="The first passing API test"></p><p>Let&#39;s write a test that adds a pizza and verifies it is returned.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Pizzas&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;shows an empty list initially&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// https://on.cypress.io/request</span></span><br><span class="line">    cy.request(<span class="string">&#x27;/pizza&#x27;</span>).its(<span class="string">&#x27;body&#x27;</span>).should(<span class="string">&#x27;deep.equal&#x27;</span>, [])</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;adds pizzas&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/pizza&#x27;</span>, &#123;</span><br><span class="line">      name: <span class="string">&#x27;Margherita&#x27;</span>,</span><br><span class="line">      ingredients: [<span class="string">&#x27;tomatoes&#x27;</span>, <span class="string">&#x27;mozzarella&#x27;</span>],</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.request(<span class="string">&#x27;/pizza&#x27;</span>)</span><br><span class="line">      .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">      .its(<span class="number">0</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Margherita&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The tests pass. One advantage of using Cypress to work with API tests is that you can inspect every request to see what was returned. For example, by clicking on the <code>cy.request</code> in the second test we can see the full list of returned objects.</p><p><img src="/blog/images/mongo/pizzas.png" alt="Inspecting the objects returned from the backend"></p><p><strong>Tip:</strong> did you notice that during the API tests the application&#39;s iframe stays empty? You can pipe the request information there, see the <a href="https://github.com/bahmutov/cy-api">cy-api project</a>.</p><h2><span id="clear-the-collection">Clear the collection</span></h2><p>If we re-run the tests again, our tests fail.</p><p><img src="/blog/images/mongo/fail.png" alt="Failing tests"></p><p>Of course, we have never cleared the collection of objects before the tests, so the database keeps them around. How should we clear the collection, if the API does not expose the clear method?</p><p>By connecting to the Mongo database directly from the Cypress test runner and clearing it using a <a href="https://on.cypress.io/task">cy.task</a> command. Let&#39;s add the following code to the plugin file:</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; connect &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../../db&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (on, config) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> db = <span class="keyword">await</span> connect()</span><br><span class="line">  <span class="keyword">const</span> pizzas = db.collection(<span class="string">&#x27;pizzas&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">clearPizzas</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;clear pizzas&#x27;</span>)</span><br><span class="line">      <span class="keyword">await</span> pizzas.remove(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> Cypress v6+ comes with Node v12+ built-in, thus we can use all the modern ES6 syntax like <code>async / await</code> sugar to write asynchronous code.</p><p>From the spec file, we should all the <code>clearPizzas</code> task before the tests start.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;Pizzas&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.task(<span class="string">&#x27;clearPizzas&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Because Cypress needs to connect to the Mongo instance (just like the server.js), we start it by passing the <code>MONGO_URI</code> environment variable. The plugin file runs in Node, requires the <code>db.js</code> file, which uses that environment variable to connect.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> as-a mongo-example npx cypress open</span></span><br></pre></td></tr></table></figure><p>We can now write more tests, if we want to</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Pizzas&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.task(<span class="string">&#x27;clearPizzas&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;shows an empty list initially&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// https://on.cypress.io/request</span></span><br><span class="line">    cy.request(<span class="string">&#x27;/pizza&#x27;</span>).its(<span class="string">&#x27;body&#x27;</span>).should(<span class="string">&#x27;deep.equal&#x27;</span>, [])</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;adds pizzas&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/pizza&#x27;</span>, &#123;</span><br><span class="line">      name: <span class="string">&#x27;Margherita&#x27;</span>,</span><br><span class="line">      ingredients: [<span class="string">&#x27;tomatoes&#x27;</span>, <span class="string">&#x27;mozzarella&#x27;</span>],</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.request(<span class="string">&#x27;/pizza&#x27;</span>)</span><br><span class="line">      .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">      .its(<span class="number">0</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Margherita&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// bad practice: assume this test runs after the previous test</span></span><br><span class="line">  it(<span class="string">&#x27;adds vegan pizza&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/pizza&#x27;</span>, &#123;</span><br><span class="line">      name: <span class="string">&#x27;Vegan&#x27;</span>,</span><br><span class="line">      ingredients: [<span class="string">&#x27;Roma tomatoes&#x27;</span>, <span class="string">&#x27;bell peppers&#x27;</span>],</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.request(<span class="string">&#x27;/pizza&#x27;</span>)</span><br><span class="line">      .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">      .its(<span class="number">1</span>)</span><br><span class="line">      <span class="comment">// ignore &quot;_id&quot; property</span></span><br><span class="line">      .should(<span class="string">&#x27;include.keys&#x27;</span>, [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;ingredients&#x27;</span>])</span><br><span class="line">      .and(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">        name: <span class="string">&#x27;Vegan&#x27;</span>,</span><br><span class="line">        ingredients: [<span class="string">&#x27;Roma tomatoes&#x27;</span>, <span class="string">&#x27;bell peppers&#x27;</span>],</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>And they all pass</p><p><img src="/blog/images/mongo/all.png" alt="Passing tests"></p><h2><span id="testing-on-ci">Testing on CI</span></h2><p>I will run the same tests on CircleCI using the <a href="https://github.com/cypress-io/circleci-orb">Cypress Orb</a>. To run MongoDB we can use a <a href="https://circleci.com/docs/2.0/databases/">service container</a> that spins the second Docker container linked to the first one (where our server and tests execute) automatically. See the <a href="https://github.com/cypress-io/circleci-orb/blob/master/docs/recipes.md">Cypress recipes</a> for more examples.</p><figure class="highlight yml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"><span class="comment"># using service containers on CircleCI</span></span><br><span class="line"><span class="comment"># https://circleci.com/docs/2.0/databases/</span></span><br><span class="line"><span class="attr">executors:</span></span><br><span class="line">  <span class="attr">with-mongo:</span></span><br><span class="line">    <span class="attr">docker:</span></span><br><span class="line">      <span class="comment"># image used to install source code,</span></span><br><span class="line">      <span class="comment"># run our server and run Cypress tests</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">cypress/base:14.16.0</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">          <span class="attr">MONGO_URI:</span> <span class="string">mongodb://$MONGO_USERNAME:$MONGO_PASSWORD@localhost:27017/?authSource=admin</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># image used to run Mongo in a separate container</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">mongo:4.4.5</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">          <span class="attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="string">$MONGO_USERNAME</span></span><br><span class="line">          <span class="attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="string">$MONGO_PASSWORD</span></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">executor:</span> <span class="string">with-mongo</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="comment"># no need to save the workspace after this job</span></span><br><span class="line">          <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>In the CircleCI project&#39;s page set the environment variables <code>MONGO_USERNAME</code> and <code>MONGO_PASSWORD</code> to use during testing. The Circle YML file forms the <code>MONGO_URI</code> environment variable to use in the server and Cypress to connect from those user name and password values.</p><p><img src="/blog/images/mongo/circle-settings.png" alt="Set the picked Mongo username and password as environment variables"></p><p>Push a new commit to the repository to trigger the build. The build should pass.</p><p><img src="/blog/images/mongo/cypress-run.png" alt="Successful Cypress test run"></p><p>You can drill down to see the individual test steps performed by the orb. For example, you can see the log output from the Mongo container running during the entire test job.</p><p><img src="/blog/images/mongo/mongo-log.png" alt="Log output from the Mongo service container"></p><p>And you can see the output from the server and from Cypress tests. Clearing the collection, adding new pizzas, all that delicious jazz.</p><p><img src="/blog/images/mongo/test-log.png" alt="Log output from the server and Cypress"></p><p>Happy testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine your web application is using MongoDB to store its data. How would you take advantage of it during Cypress tests? This blog post 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="circle" scheme="https://glebbahmutov.com/blog/tags/circle/"/>
    
      <category term="db" scheme="https://glebbahmutov.com/blog/tags/db/"/>
    
  </entry>
  
  <entry>
    <title>Writing Tests Progress</title>
    <link href="https://glebbahmutov.com/blog/writing-tests-progress/"/>
    <id>https://glebbahmutov.com/blog/writing-tests-progress/</id>
    <published>2021-04-19T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.393Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine you have a web application, and you need to write the end-to-end tests. The project never had them, so you are starting from scratch. How would you approach it? Here is what I would do to test a <a href="https://todomvc.com/">TodoMVC web application</a> using Cypress.</p><p><strong>Note:</strong> I strongly recommend reading the blog post <a href="/blog/cypress-test-statuses/" title="Cypress Test Statuses">Cypress Test Statuses</a> first, as it explains the difference between <em>pending</em> and <em>skipped</em> test statuses.</p><!-- toc --><ul><li><a href="#start">Start</a></li><li><a href="#the-first-test">The first test</a></li><li><a href="#the-feature-tests">The feature tests</a></li><li><a href="#the-smoke-test">The smoke test</a></li><li><a href="#placeholder-tests">Placeholder tests</a></li><li><a href="#start-recording">Start recording</a></li><li><a href="#write-tests">Write tests</a></li><li><a href="#bonus-1-split-into-the-separate-specs">Bonus 1: split into the separate specs</a></li><li><a href="#wish-show-the-test-breakdown-over-time">Wish: show the test breakdown over time</a></li></ul><!-- tocstop --><p>This post was motivated by the &quot;Cypress &amp; Ansible&quot; webinar with John Hill. You can watch the webinar <a href="https://www.youtube.com/watch?v=fwdXOynDD0Q">here</a> and flip through the <a href="https://cypress.slides.com/cypress-io/cypress-and-ansible">slides</a>. John has pointed out how they write the test plan before writing tests, and how tracking the implemented / pending tests is hard when you assume the tests themselves are the truth. This blog post tries to show one solution to this problem.</p><h2><span id="start">Start</span></h2><blockquote class="pullquote"><p>📦 You can find the application and the tests from this blog post at <a href="https://github.com/bahmutov/cypress-example-test-status">bahmutov/cypress-example-test-status</a> repository.</p></blockquote><p>First, I would install <a href="https://github.com/cypress-io/cypress">Cypress</a> and <a href="https://github.com/bahmutov/start-server-and-test">start-server-and-test</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D cypress start-server-and-test</span></span><br><span class="line">+ cypress@7.1.0</span><br><span class="line">+ start-server-and-test@1.12.1</span><br></pre></td></tr></table></figure><p>Then I would define NPM scripts to start the server and open Cypress as I work on the tests locally.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;http-server -p 8888 -c-1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start:ci&quot;</span>: <span class="string">&quot;http-server -p 8888 -c-1 --silent&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;cypress open&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;start-test start:ci 8888&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> see my blog post <a href="/blog/organize-npm-scripts/" title="How I Organize my NPM Scripts">How I Organize my NPM Scripts</a> to learn how I typically organize the NPM scripts in my projects.</p><p>When working with the tests I just fire up <code>npm run dev</code> to start the server (without its verbose logging), and once the server is ready, open Cypress test runner.</p><h2><span id="the-first-test">The first test</span></h2><p>At first, I want to have a sanity test that makes sure the main feature of the application works. This test ensures right away the application is usable to most users.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;TodoMVC&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;adds 2 todos&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;.new-todo&#x27;</span>).type(<span class="string">&#x27;learn testing&#123;enter&#125;&#x27;</span>).type(<span class="string">&#x27;be cool&#123;enter&#125;&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Great, the test passes locally.</p><p><img src="/blog/images/tests-progress/first-test.png" alt="The first test adds new todos"></p><p>When we have a single E2E test running locally, we want to immediately start running the tests on CI. I will use <a href="/blog/trying-github-actions/" title="GitHub Actions">GitHub Actions</a> to run these tests. The workflow file uses the <a href="https://github.com/cypress-io/github-action">Cypress GitHub Action</a> to install dependencies, start the server, and run the tests.</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">cypress-run:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">E2E</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">&quot;npm run start:ci&quot;</span></span><br><span class="line">          <span class="attr">wait-on:</span> <span class="string">&quot;http://localhost:8888&quot;</span></span><br></pre></td></tr></table></figure><p>The tests now pass on every commit.</p><p><img src="/blog/images/tests-progress/ci.png" alt="The tests passing on GitHub Actions CI"></p><h2><span id="the-feature-tests">The feature tests</span></h2><p>Now let&#39;s think about all the features our application has. The user should be able to:</p><ul><li>add new todos</li><li>edit the existing todos</li><li>complete a todo</li><li>remove the completed todo status</li><li>filter todos by the status</li><li>delete all completes todos</li></ul><p>We can extend the above list, filling the list, grouping every related little detail by the main feature. After a while we derive about 20-30 feature &quot;lists&quot; or user stories that capture everything our application can do - and this list naturally maps to an end-to-end test. Let&#39;s write the final list describing the application and its features:</p><ul><li>TodoMVC app<ul><li>on start<ul><li>sets the focus on the todo input field</li></ul></li><li>without todos<ul><li>hides any filters and actions</li></ul></li><li>new todo<ul><li>allows to add new todos</li><li>clears the input field when adding</li><li>adds new items to the bottom of the list</li><li>trims text input</li><li>shows the filters and actions after adding a todo</li></ul></li><li>completing all todos<ul><li>can mark all todos as completed</li><li>can remove completed status for all todos</li><li>updates the state when changing one todo</li></ul></li><li>one todo<ul><li>can be completed</li><li>can remove completed status</li><li>can be edited</li></ul></li><li>editing todos<ul><li>hides other controls</li><li>saves edit on blur</li><li>trims entered text</li><li>removes todo if text is empty</li><li>cancels edit on escape</li></ul></li><li>counter<ul><li>shows the current number of todos</li></ul></li><li>clear completed todos<ul><li>shows the right text</li><li>should remove completed todos</li><li>is hidden if there are no completed todos</li></ul></li><li>persistence<ul><li>saves the todos data and state</li></ul></li><li>routing<ul><li>goes to the active items view</li><li>respects the browser back button</li><li>goes to the completed items view</li><li>goes to the display all items view</li><li>highlights the current view</li></ul></li></ul></li></ul><p>Wow, it is a long list. We don&#39;t have to discover all the features of the application to test, we can iterate and add more features as we think of them. But how do keep track of the currently tested features vs tests still to write? How do our tests stay in sync with the application features? How do we see the test coverage over time to make sure we are filling the gaps?</p><h2><span id="the-smoke-test">The smoke test</span></h2><p>Here is what I advise to do first: move the very first sanity test we already have into its own smoke spec file.</p><figure class="highlight js"><figcaption><span>cypress/integration/smoke-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;TodoMVC&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;adds 2 todos&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;.new-todo&#x27;</span>).type(<span class="string">&#x27;learn testing&#123;enter&#125;&#x27;</span>).type(<span class="string">&#x27;be cool&#123;enter&#125;&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above smoke spec can be run any time we want to quickly confirm the app is correct. We can even run it by itself whenever we need to:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx cypress run --spec cypress/integration/smoke-spec.js</span></span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> read the blog post <a href="https://www.cypress.io/blog/2019/12/06/use-meaningful-smoke-tests/">Use meaningful smoke tests</a> for more details; you can even run the same smoke test in multiple resolutions to ensure the site works on mobile screens and on desktops.</p><h2><span id="placeholder-tests">Placeholder tests</span></h2><p>Currently we have a smoke spec and an empty &quot;main&quot; spec file. Take the above text list of feature stories, copy it and paste it into the Cypress integration spec file. Of course, the text is not JavaScript, so our code editor will start showing all red.</p><p><img src="/blog/images/test-status/copy-list.png" alt="The initial pasted list of features to test"></p><p>Make the top levels of the list into <code>describe</code> and <code>context</code> callbacks. Make the &quot;leaves&quot; items into the tests <em>without</em> test bodies. Just the test with a title argument like this <code>it(&#39;title...&#39;)</code>. This is a valid spec file!</p><p><img src="/blog/images/tests-progress/placeholder-tests.png" alt="Created placeholder tests from the feature list"></p><p>If you open this spec in Cypress, all 28 tests are shown as pending.</p><p><img src="/blog/images/tests-progress/pending-tests.png" alt="All tests have status &quot;Pending&quot;"></p><p>If you execute this spec in the headless mode using <code>cypress run</code> it shows the breakdown of tests by status:</p><p><img src="/blog/images/tests-progress/pending-run.png" alt="Test status breakdown after the run"></p><p>Nice - we plan to write a lot of tests to thoroughly test the application.</p><h2><span id="start-recording">Start recording</span></h2><p>We start with 28 placeholder tests, and now let&#39;s fill in the test bodies. We can incrementally test the most important features, and every pull request would drive down the number of pending tests and drive up the number of passing tests. You can use the &quot;depth first&quot; strategy where you write all the related tests for each context, or the &quot;breadth first&quot; strategy to write a few simple tests for each context first, before testing the edge cases.</p><p>Let&#39;s knock off a few simple tests in some contexts.</p><p>Before I start doing this, I will start recording the tests on <a href="https://on.cypress.io/dashboard-introduction">Cypress Dashboard</a>. You do NOT have to do this, of course. You can simply look at the number of pending tests at any time to see the test writing progress, or store the test artifacts yourself. Cypress Dashboard just makes it so much easier, and so much more visible when you work as a team.</p><p><img src="/blog/images/tests-progress/record.png" alt="Setting up the project to record on Cypress Dashboard"></p><p>We can pass the created <a href="https://on.cypress.io/projects#Record-key">Cypress record key</a> as GH secret when running the Cypress GitHub Action</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  - name: Run E2E tests 🧪</span><br><span class="line">    uses: cypress-io/github-action@v2</span><br><span class="line">    with:</span><br><span class="line">      start: &#x27;npm run start:ci&#x27;</span><br><span class="line">      wait-on: &#x27;http://localhost:8888&#x27;</span><br><span class="line"><span class="addition">+     record: true</span></span><br><span class="line"><span class="addition">+   env:</span></span><br><span class="line"><span class="addition">+     CYPRESS_RECORD_KEY: $&#123;&#123; secrets.CYPRESS_RECORD_KEY &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>You can find the Cypress Dashboard for the example project <a href="https://github.com/bahmutov/cypress-example-test-status">bahmutov/cypress-example-test-status</a> at <a href="https://dashboard.cypress.io/projects/9g2jiu">dashboard.cypress.io/projects/9g2jiu</a>.</p><p>After the first GH Actions execution the Dashboard shows the passing and pending tests. That&#39;s our start baseline.</p><p><img src="/blog/images/tests-progress/record.png" alt="Setting up the project to record on Cypress Dashboard"></p><p>I think it is important to make these numbers as prominent and easily tracked as possible, as the team&#39;s goal is to implement all the pending tests.</p><p>I will always enable the <a href="https://on.cypress.io/github-integration">Cypress GitHub Integration</a> for this repository. The integration will post the latest test counts for each pull request.</p><p><img src="/blog/images/tests-progress/enable-gh-integration.png" alt="Enable Cypress GitHub Integration for the repository"></p><h2><span id="write-tests">Write tests</span></h2><p>Let&#39;s open a pull request with a few end-to-end tests implementations. We implement a few tests and watch them pass locally.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;TodoMVC app&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  context(<span class="string">&#x27;on start&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    it(<span class="string">&#x27;sets the focus on the todo input field&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      cy.focused().should(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;new-todo&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  context(<span class="string">&#x27;without todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    it(<span class="string">&#x27;hides any filters and actions&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">      cy.get(<span class="string">&#x27;.main&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">      cy.get(<span class="string">&#x27;.footer&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  context(<span class="string">&#x27;new todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    it(<span class="string">&#x27;allows to add new todos&#x27;</span>)</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/tests-progress/first-tests.png" alt="First two tests implemented"></p><p>We can probably move <code>cy.visit(&#39;/&#39;)</code> into <code>beforeEach</code> hook, since every test probably needs to visit the site first.</p><p>When we open the <a href="https://github.com/bahmutov/cypress-example-test-status/pull/1">first pull request</a> the Cypress GH Integration application posts a comment with the test numbers. Good start - 3 tests are passing (1 smoke test plus two regular tests) and 26 pending tests to be implemented. I wish the PR comment had the &quot;delta&quot; numbers - how many tests were added / passing / pending compared to the main branch.</p><p><img src="/blog/images/tests-progress/pr-comment.png" alt="Pull request comment by the Cypress GH app"></p><p>The tests pass, so let&#39;s merge the pull request.</p><p>As we <a href="https://github.com/bahmutov/cypress-example-test-status/pull/2">write more tests</a>, we can refactor the existing test code, creating utility functions.</p><figure class="highlight js"><figcaption><span>cypress/integration/utils.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> TODO_ITEM_ONE = <span class="string">&#x27;buy some cheese&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> TODO_ITEM_TWO = <span class="string">&#x27;feed the cat&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> TODO_ITEM_THREE = <span class="string">&#x27;book a doctors appointment&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createDefaultTodos = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// do not log any commands inside this utility function</span></span><br><span class="line">  <span class="keyword">const</span> options = &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;</span><br><span class="line">  cy.get(<span class="string">&#x27;.new-todo&#x27;</span>, options)</span><br><span class="line">    .type(<span class="string">`<span class="subst">$&#123;TODO_ITEM_ONE&#125;</span>&#123;enter&#125;`</span>, options)</span><br><span class="line">    .type(<span class="string">`<span class="subst">$&#123;TODO_ITEM_TWO&#125;</span>&#123;enter&#125;`</span>, options)</span><br><span class="line">    .type(<span class="string">`<span class="subst">$&#123;TODO_ITEM_THREE&#125;</span>&#123;enter&#125;`</span>, options)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>, options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can use the <code>createDefaultTodos</code> function to quickly get a few Todo items to test the app features other than adding the new todos.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;adds new items to the bottom of the list&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// this is an example of a custom command</span></span><br><span class="line">  <span class="comment">// defined in cypress/support/commands.js</span></span><br><span class="line">  createDefaultTodos().as(<span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// even though the text content is split across</span></span><br><span class="line">  <span class="comment">// multiple &lt;span&gt; and &lt;strong&gt; elements</span></span><br><span class="line">  <span class="comment">// `cy.contains` can verify this correctly</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.todo-count&#x27;</span>).contains(<span class="string">&#x27;3 items left&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;@todos&#x27;</span>).eq(<span class="number">0</span>).find(<span class="string">&#x27;label&#x27;</span>).should(<span class="string">&#x27;contain&#x27;</span>, TODO_ITEM_ONE)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;@todos&#x27;</span>).eq(<span class="number">1</span>).find(<span class="string">&#x27;label&#x27;</span>).should(<span class="string">&#x27;contain&#x27;</span>, TODO_ITEM_TWO)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;@todos&#x27;</span>)</span><br><span class="line">    .eq(<span class="number">2</span>)</span><br><span class="line">    .find(<span class="string">&#x27;label&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;contain&#x27;</span>, TODO_ITEM_THREE)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Then we can implement the &quot;complete all&quot; suite of tests, providing the test bodies for these pending tests:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">context(<span class="string">&#x27;completing all todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;can mark all todos as completed&#x27;</span>)</span><br><span class="line">  it(<span class="string">&#x27;can remove completed status for all todos&#x27;</span>)</span><br><span class="line">  it(<span class="string">&#x27;updates the state when changing one todo&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You can see the pull request <a href="https://github.com/bahmutov/cypress-example-test-status/pull/3">#3</a> that drives the number pf pending tests down to 20.</p><p>The next pull request <a href="https://github.com/bahmutov/cypress-example-test-status/pull/4">#4</a> implements completing the single todo tests</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">context(<span class="string">&#x27;one todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;can be completed&#x27;</span>)</span><br><span class="line">  it(<span class="string">&#x27;can remove completed status&#x27;</span>)</span><br><span class="line">  it(<span class="string">&#x27;can be edited&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>What we expect to see in the long term is the number of pending tests going down, and the number of passing tests going up.</p><p><img src="/blog/images/tests-progress/runs-numbers.gif" alt="Pending vs passing test numbers in the Dashboard list"></p><p>When the number of pending tests hits zero we know we have implemented all the tests planned.</p><p><img src="/blog/images/tests-progress/reach-zero.png" alt="All tests are passing, there are no pending tests to write"></p><h2><span id="bonus-1-split-into-the-separate-specs">Bonus 1: split into the separate specs</span></h2><p>Once we have a lot of tests in a single spec file, it becomes unwieldy. We can move the test suites into separate spec files; potentially this will speed the test run if we want to run the specs in parallel. Read the blog post <a href="/blog/parallel-cypress-tests-gh-action/" title="Split Long GitHub Action Workflow Into Parallel Cypress Jobs">Split Long GitHub Action Workflow Into Parallel Cypress Jobs</a> for details.</p><p>Our current integration specs folder can look like this:</p><p><img src="/blog/images/tests-progress/split-specs.png" alt="Split all tests into separate spec files"></p><p>I have left only a few smaller tests in the <code>spec.js</code> file.</p><p>Because the <code>utils.js</code> file contains the utility functions like <code>createDefaultTodos</code> and no tests of its own, we can hide it from the Cypress test runner using the <code>ignoreTestFiles</code> list in the config file</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;http://localhost:8888&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;fixturesFolder&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;pluginsFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;ignoreTestFiles&quot;</span>: [<span class="string">&quot;utils.js&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;projectId&quot;</span>: <span class="string">&quot;9g2jiu&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When splitting a single spec into multiple, I recommend setting the <a href="https://on.cypress.io/github-integration">Cypress GitHub Integration</a> to display a single status check per spec file. Then every PR has detailed information for every spec file.</p><p><img src="/blog/images/tests-progress/per-spec.png" alt="Cypress reports test stats per spec file"></p><h2><span id="wish-show-the-test-breakdown-over-time">Wish: show the test breakdown over time</span></h2><p>I really would like to see the number of pending tests vs passing tests over time, probably per branch. Today I can look at the column of test numbers for the <code>main</code> branch to kind of see it.</p><p><img src="/blog/images/tests-progress/latest-runs.png" alt="Number of pending tests goes to zero over time"></p><p>But I would love to see it explicitly over time / over commits.</p><p><img src="/blog/images/tests-progress/test-counts-bar-chart.png" alt="Test counts going over time with each run"></p><p>Hope the above analytics helps the project execute its testing strategy better.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine you have a web application, and you need to write the end-to-end tests. The project never had them, so you are starting from scra
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress Test Statuses</title>
    <link href="https://glebbahmutov.com/blog/cypress-test-statuses/"/>
    <id>https://glebbahmutov.com/blog/cypress-test-statuses/</id>
    <published>2021-04-17T04:00:00.000Z</published>
    <updated>2021-06-15T13:13:30.260Z</updated>
    
    <content type="html"><![CDATA[<p>After the Cypress spec completes every test has one of the 4 statuses: passing, failing, pending, or skipped. Let&#39;s look into each status.</p><h2><span id="passing">Passing</span></h2><p>Passing tests are the best, aren&#39;t they? The have successfully completed all their commands, never failing any assertions. Our smoke test below is a passing test:</p><p><img src="/blog/images/test-status/passing-test.png" alt="Passing test"></p><p>Note that a test can pass after several <a href="https://docs.cypress.io/guides/guides/test-retries">test retries</a>. In that case the Command Log shows the attempts, but ultimately the entire test has finished successfully.</p><h2><span id="failing">Failing</span></h2><p>Good news - the failing test has found a problem. Could be much worse - it could be a user hitting this bug.</p><p><img src="/blog/images/test-status/failing-test.png" alt="The test failed because there are two items and not 100"></p><p>After the test fails, use the screenshot and the video to find the problem and fix it.</p><h2><span id="pending-tests">Pending tests</span></h2><p>The placeholder tests we have written were marked <em>pending</em>. They did not execute because the user did not want them to run - the user did not write them. Slightly confusingly, if the user does not want an existing test to run, they can use the <code>it.skip</code> or <code>xit</code> syntax to skip the test or a block of tests. Cypress marks all these tests <em>pending</em>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;TodoMVC&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;is not written yet&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  it.skip(<span class="string">&#x27;adds 2 todos&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;.new-todo&#x27;</span>).type(<span class="string">&#x27;learn testing&#123;enter&#125;&#x27;</span>).type(<span class="string">&#x27;be cool&#123;enter&#125;&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  xit(<span class="string">&#x27;another test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    expect(<span class="literal">false</span>).to.true</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>All 3 tests above are marked <em>pending</em> when Cypress finishes running the spec file.</p><p><img src="/blog/images/test-status/different-pending.png" alt="Different ways to get a pending test"></p><p>So remember - if you (the test writer) knowingly skip a test using one of the above three ways, Cypress counts it as a <em>pending</em> test. The result will be known in the future when you enable the test again.</p><p>The status and the name &quot;pending&quot; comes from Mocha.js test engine that Cypress uses internally. See the <a href="https://mochajs.org/#pending-tests">pending tests</a> section of the Mocha&#39;s documentation captured below.</p><p><img src="/blog/images/test-status/mocha-pending.png" alt="The definition of the pending test from Mocha"></p><h2><span id="skipped-tests">Skipped tests</span></h2><p>The last test status is for tests that the user <em>meant</em> to run, but these tests were skipped due to some run-time error. For example, imagine a group of tests sharing the same <code>beforeEach</code> hook. The hook executes the common commands. For example, we could visit the page in the <code>beforeEach</code> hook because every test needs to start at the page.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;TodoMVC&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;hides footer initially&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.get(<span class="string">&#x27;.filters&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;adds 2 todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.get(<span class="string">&#x27;.new-todo&#x27;</span>).type(<span class="string">&#x27;learn testing&#123;enter&#125;&#x27;</span>).type(<span class="string">&#x27;be cool&#123;enter&#125;&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If the <code>beforeEach</code> hook completes and both tests finish, two tests are passing.</p><p><img src="/blog/images/test-status/two-passing.png" alt="Two passing tests"></p><p>But what happens if a command inside the <code>beforeEach</code> hook fails? For example, let&#39;s pretend we want to visit a non-existent page <code>/hmm</code> instead of the <code>/</code>. If we change our <code>beforeEach</code> to fail:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/hmm&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>When Cypres starts executing the first test, the <code>beforeEach</code> hook fails. Now the first test is marked &quot;failing&quot;. BUT if the <code>beforeEach</code> hook failed once, why would we execute it <em>again</em> before the second test? It would just fail the same way! So Cypress <em>skips</em> the remaining tests in that block, because they would also fail for sure due to the bad <code>beforeEach</code> hook.</p><p><img src="/blog/images/test-status/1-skipped.png" alt="One failed test and the rest of tests were skipped"></p><p>If we collapse the test commands, we can see the empty box marking the skipped test &quot;adds 2 todos&quot;.</p><p><img src="/blog/images/test-status/skipped.png" alt="Skipped test"></p><p>The tests that were meant to be executed, but were skipped due to some run-time problem are marked &quot;skipped&quot; by Cypress.</p><p>The same situation happens if instead of the <code>beforeEach</code> hook, the <code>before</code> hook fails.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;TodoMVC&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/hmm&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;hides footer initially&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.get(<span class="string">&#x27;.filters&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;adds 2 todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.get(<span class="string">&#x27;.new-todo&#x27;</span>).type(<span class="string">&#x27;learn testing&#123;enter&#125;&#x27;</span>).type(<span class="string">&#x27;be cool&#123;enter&#125;&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The Cypress Test Runner fails the first test (the one that really executes the <code>before</code> hook), and skips the rest of the scheduled tests.</p><p><img src="/blog/images/test-status/before-skip.png" alt="The rest of the tests are skipped when the before hook fails"></p><p>Hope this explanation clarifies the Cypress test statuses.</p><h2><span id="bonus-track-the-test-statuses-over-time">Bonus: track the test statuses over time</span></h2><p>I have described in the blog post <a href="/blog/writing-tests-progress/" title="Writing Tests Progress">Writing Tests Progress</a> how to start testing the project by writing a lot of pending tests and then fill the tests with actual implementations.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;After the Cypress spec completes every test has one of the 4 statuses: passing, failing, pending, or skipped. Let&amp;#39;s look into each st
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
</feed>
