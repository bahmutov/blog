<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Better world by better software</title>
  
  <subtitle>Gleb Bahmutov PhD</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://glebbahmutov.com/blog/"/>
  <updated>2022-11-22T02:26:22.804Z</updated>
  <id>https://glebbahmutov.com/blog/</id>
  
  <author>
    <name>Gleb Bahmutov</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spy On Clipboard Copy Method Call</title>
    <link href="https://glebbahmutov.com/blog/spy-on-clipboard-copy/"/>
    <id>https://glebbahmutov.com/blog/spy-on-clipboard-copy/</id>
    <published>2022-11-22T05:00:00.000Z</published>
    <updated>2022-11-22T02:26:22.804Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s take an example application that copies some text to the system clipboard when the user clicks a button.</p><p><img src="../images/spy-on-clipboard-copy/copy-button.png" alt="Copy items to the clipboard button"></p><blockquote class="pullquote"><p>üéÅ You can find the source code for this blog post in the repo <a href="https://github.com/bahmutov/test-api-example">bahmutov&#x2F;test-api-example</a>.</p></blockquote><p>The application code for that button formats the string and calls the <code>clipboard.writeText</code> browser API method.</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">copyTodos</span>(<span class="params">&#123; state &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> markdown =</span><br><span class="line">    state.<span class="property">todos</span></span><br><span class="line">      .<span class="title function_">map</span>(<span class="function">(<span class="params">todo</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> mark = todo.<span class="property">completed</span> ? <span class="string">&#x27;x&#x27;</span> : <span class="string">&#x27; &#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">`- [<span class="subst">$&#123;mark&#125;</span>] <span class="subst">$&#123;todo.title&#125;</span>`</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">  <span class="keyword">await</span> navigator.<span class="property">clipboard</span>.<span class="title function_">writeText</span>(markdown)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>clipboard.writeText</code> is a security-restricted method. To prevent malicious JavaScript from stealing your information, sending a synthetic &quot;Click&quot; event to the button for example fails if the browser window does not have focus (meaning the user did not click it).</p><p><img src="../images/spy-on-clipboard-copy/no-click.png" alt="Synthetic click event fails"></p><p>Calling the <code>clipboard.writeText</code> method is the problem. We can stub it from a Cypress test using the included <a href="https://on.cypress.io/stub">cy.stub</a> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">window</span>()</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;navigator.clipboard&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">clipboard</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">stub</span>(clipboard, <span class="string">&#x27;writeText&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;writeText&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;[title=&quot;Copy todos to clipboard&quot;]&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;@writeText&#x27;</span>).<span class="title function_">should</span>(</span><br><span class="line">  <span class="string">&#x27;have.been.calledOnceWith&#x27;</span>,</span><br><span class="line">  <span class="title class_">Cypress</span>.<span class="property">sinon</span>.<span class="property">match</span>.<span class="property">string</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Now the test runs correctly in all situations.</p><p><img src="../images/spy-on-clipboard-copy/stubbed.png" alt="Stubbed clipboard.writeText method"></p><p>By checking if the <code>clipboard.writeText</code> method was really called, our test can catch any drastic changes to the application.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html">Stubs, spies, and clock examples</a></li><li>My course <a href="https://cypress.tips/courses/cypress-plugins">Cypress Plugins</a> shows how to click the &quot;Copy to clipboard&quot; button using a native click event by using the <a href="https://github.com/dmtrKovalenko/cypress-real-events">cypress-real-events</a> plugin.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s take an example application that copies some text to the system clipboard when the user clicks a button.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../im
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Spy On window.postMessage Calls</title>
    <link href="https://glebbahmutov.com/blog/spy-on-postmessage/"/>
    <id>https://glebbahmutov.com/blog/spy-on-postmessage/</id>
    <published>2022-11-16T05:00:00.000Z</published>
    <updated>2022-11-22T02:16:08.981Z</updated>
    
    <content type="html"><![CDATA[<p>Cypress test runs in the browser in an iframe next to the application&#39;s iframe. This makes it extremely simple to spy, stub, and subscribe to the events sent to the application&#39;s <code>window</code> object by other windows or by workers via <code>window.postMessage</code> method calls.</p><h2><span id="spy-on-the-method-calls">Spy on the method calls</span></h2><p>The simplest way to confirm some code calls <code>window.postMessage</code> is by spying on this method using the <a href="https://on.cypress.io/spy">cy.spy</a> command. You just need the reference to the <code>window</code> object and the method&#39;s name &quot;postMessage&quot; and let the included <a href="https://sinonjs.org/">Sinon</a> library do the rest. Let&#39;s say this is the application&#39;s code:</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">postMessage</span>(<span class="string">&#x27;one&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">postMessage</span>(<span class="string">&#x27;two&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>üéÅ You can find the source code and the tests shown in the blog post in the repo <a href="https://github.com/bahmutov/cypress-post-message">bahmutov&#x2F;cypress-post-message</a>.</p></blockquote><p>Let&#39;s spy on those calls and confirm they were made. We need to register the spy before any of the application&#39;s own code runs, otherwise we might lose calls. We can use <a href="https://on.cypress.io/visit">cy.visit</a> command&#39;s <code>onBeforeLoad</code> callback to register our spy before the actual page loads.</p><figure class="highlight js"><figcaption><span>cypress/e2e/spec.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;listens to the window.postMessage events&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;index.html&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">onBeforeLoad</span>(<span class="params">win</span>) &#123;</span><br><span class="line">      cy.<span class="title function_">spy</span>(win, <span class="string">&#x27;postMessage&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;postMessage&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@postMessage&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledTwice&#x27;</span>)</span><br><span class="line">    .<span class="title function_">and</span>(<span class="string">&#x27;have.been.calledWithExactly&#x27;</span>, <span class="string">&#x27;one&#x27;</span>)</span><br><span class="line">    .<span class="title function_">and</span>(<span class="string">&#x27;have.been.calledWithExactly&#x27;</span>, <span class="string">&#x27;two&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The <code>cy.get(&#39;@postMessage&#39;).should(&#39;have.been.calledTwice&#39;)</code> command and assertion combination retries until the application code really makes two calls.</p><p><img src="../images/spy-on-postmessage/postmessage.gif" alt="The spy on postMessage test"></p><p><strong>Tip:</strong> you can find a lot of spy and stub assertions in my examples page <a href="https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html">glebbahmutov.com&#x2F;cypress-examples&#x2F;commands&#x2F;spies-stubs-clocks.html</a>.</p><p>You can watch the above test in action and my explanation in the video &quot;Spy On The Window PostMessage Calls&quot; embedded below:</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/l-1Ti4CbXxM" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="listen-to-the-window-events">Listen to the window events</span></h2><p>What if there are several sources of <code>window.postMessage</code> calls? We don&#39;t have to spy on every caller, instead we could simply subscribe to the <code>window</code> events from the test itself and confirm the expected events were delivered. There is one trick we can employ: we can &quot;strip&quot; the actual event object and only keep track of the &quot;event.data&quot; property</p><p><img src="../images/spy-on-postmessage/event.png" alt="The entire event object contains the &quot;data&quot; property we are interested in"></p><p>The caller uses <code>window.postMessage(&#39;one&#39;)</code> while the listener callback gets the entire event object, with <code>data: &quot;one&quot;</code>. We want to keep track of the <code>data</code> property from each event only. In our new app, the parent page includes the child iframe.</p><figure class="highlight html"><figcaption><span>parent.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Parent window<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;child.html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;got message&#x27;</span>, e)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><figcaption><span>child.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Child window<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">postMessage</span>(<span class="string">&#x27;one&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">postMessage</span>(<span class="string">&#x27;two&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Let&#39;s subscribe to the window <code>message</code> events from the spec. We will create a single stub function and we will call that function from the subscription event listener callback.</p><figure class="highlight js"><figcaption><span>cypress/e2e/parent-spec.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;listens to the window.parent.postMessage events&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> postMessageStub = cy.<span class="title function_">stub</span>().<span class="title function_">as</span>(<span class="string">&#x27;postMessage&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;parent.html&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">onBeforeLoad</span>(<span class="params">win</span>) &#123;</span><br><span class="line">      win.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// we are only interested in the argument itself</span></span><br><span class="line">        <span class="title function_">postMessageStub</span>(e.<span class="property">data</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@postMessage&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledTwice&#x27;</span>)</span><br><span class="line">    .<span class="title function_">and</span>(<span class="string">&#x27;have.been.calledWithExactly&#x27;</span>, <span class="string">&#x27;one&#x27;</span>)</span><br><span class="line">    .<span class="title function_">and</span>(<span class="string">&#x27;have.been.calledWithExactly&#x27;</span>, <span class="string">&#x27;two&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Beautiful - the expected calls were delivered, and we only calls our stub function with the arguments like &quot;one&quot; and &quot;two&quot;.</p><p><img src="../images/spy-on-postmessage/parent.png" alt="Subscribed to the message events and called the stub function"></p><p>You can watch this example in action in the video &quot;Subscribe To The Message Events From The Test&quot; below:</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/pzHEXjjfLvE" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>For more examples like these, subscribe to my <a href="https://www.youtube.com/glebbahmutov">YouTube channel</a> and check out the playlist <a href="https://www.youtube.com/playlist?list=PLP9o9QNnQuAYYRpJzDNWpeuOVTwxmIxcI">Cypress Tips &amp; Tricks</a>. <strong>Tip:</strong> you can find videos by searching the descriptions from <a href="https://cypress.tips/search">cypress.tips&#x2F;search</a> page.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html">Stubs, spies, and clock examples</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Cypress test runs in the browser in an iframe next to the application&amp;#39;s iframe. This makes it extremely simple to spy, stub, and subs
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Tips And Tricks For Writing Fast And Maintainable Front-End Tests</title>
    <link href="https://glebbahmutov.com/blog/tips-and-tricks-for-e2e/"/>
    <id>https://glebbahmutov.com/blog/tips-and-tricks-for-e2e/</id>
    <published>2022-11-05T04:00:00.000Z</published>
    <updated>2022-11-05T20:59:05.287Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I had privilege to deliver a presentation to the special 10th year anniversary conference AllThingsOpen in Raleigh, North Carolina. You can find the slides at <a href="https://slides.com/bahmutov/tips-tricks">https://slides.com/bahmutov/tips-tricks</a> and embedded below. In this blog post I will summarize my main speaking points for anyone interested.</p><center><iframe src="https://slides.com/bahmutov/tips-tricks/embed" width="576" height="420" title="Tips & Tricks For Writing Fast And Maintainable Front-End Tests" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></center><p>Once the video recording from my talk comes out, I will link it here.</p><p>I work at <a href="https://www.mercari.com/">Mercari US</a> where I set up the automation group. We take care of writing mostly end-to-end tests using <a href="https://glebbahmutov.com/blog/tags/cypress/">Cypress</a>. We have reached almost 700 full tests which we run several times per day.</p><h2><span id="use-the-browser">Use the browser</span></h2><p>I started the presentation with the following advice</p><blockquote><p>Web app tests should run in the browser</p></blockquote><p>To me this advice seems obvious, yet many people write front-end tests using JSDom emulation running in Node. Running Cypress tests in the browser lets you see the component and the web application the same way the real human user would see it.</p><h2><span id="component-tests">Component tests</span></h2><p>While end-to-end tests are awesome and ensure the entire system works, it is hard to control the application sometimes. Things that make writing deterministic tests difficult are:</p><ul><li>Random data</li><li>External data</li><li>Timers and clocks</li><li>Conditional testing</li><li>Unclear test requirements</li></ul><p>To better isolate and test individual pieces of front-end code, we can write <a href="https://on.cypress.io/component-testing">component tests using Cypress</a>. Here is a typical component test for the Timer component</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Timer</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./Timer&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../App.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SudokuContext</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../context/SudokuContext&#x27;</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Timer&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;sets the clock to the given value&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> timeGameStarted = <span class="title function_">moment</span>().<span class="title function_">subtract</span>(</span><br><span class="line">      <span class="number">900</span>,</span><br><span class="line">      <span class="string">&#x27;seconds&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    cy.<span class="title function_">mount</span>(</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">SudokuContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">timeGameStarted</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">&quot;status&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Timer</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">SudokuContext.Provider</span>&gt;</span></span>,</span><br><span class="line">    )</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;15:00&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Notice how we control the time when the game has started to ensure the Timer shows &quot;15:00&quot; and we check the page using the standard <code>cy.contains(&#39;15:00&#39;)</code> command. One of the strong points of Cypress component testing is that the component runs as a mini-web application. After mounting the component, you interact with the page and confirm the component works as you expect it to work.</p><p>The knowledge we have accumulated writing Cypress end-to-end tests directly helps us write Cypress component tests. But there is more.</p><h2><span id="framework-independent-syntax">Framework-independent syntax</span></h2><p>Cypress component testing mounts the component using framework-specific code. But once <code>cy.mount(component, options)</code> finishes, all commands are pretty much framework-independent. Even the <code>cy.mount</code> itself hides all the framework-specific details.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSX for React</span></span><br><span class="line"><span class="comment">// Object syntax for Vue, Svelte</span></span><br><span class="line"><span class="comment">// Object or template syntax for Angular</span></span><br><span class="line">cy.<span class="title function_">mount</span>(component, options)</span><br><span class="line"><span class="comment">// standard Cypress commands</span></span><br></pre></td></tr></table></figure><p>Thus learning Cypress component once directly benefits any developer; they can test other applications with ease.</p><p><strong>Tip:</strong> For more examples of testing various components from React, Angular, Vue, and Svelte and how the tests look the same, check out my presentation <a href="https://slides.com/bahmutov/test-components-without-fear">Test Angular, React, Vue, Svelte Components Without Fear</a>.</p><h2><span id="picking-the-type-of-the-test">Picking the type of the test</span></h2><p>I have summarized the decision table for the type of the test to write and run using Cypress in the following table. Pick the test depending on <em>what you want to test</em>.</p><h3><span id="unit-test">Unit test</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">expect</span>(<span class="title function_">formatTime</span>(&#123; <span class="attr">seconds</span>: <span class="number">3</span> &#125;)).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&#x27;00:03&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>Small chunks of code like functions and classes</li></ul><h3><span id="component-test">Component test</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./Component&#x27;</span></span><br><span class="line">cy.<span class="title function_">mount</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Component</span> <span class="attr">props</span>=<span class="string">...</span> /&gt;</span></span>)</span><br><span class="line">cy.<span class="title function_">get</span>(...).<span class="title function_">click</span>()</span><br></pre></td></tr></table></figure><ul><li>Front-end React &#x2F; Angular &#x2F; Vue &#x2F; X components</li><li>Easy to test edge conditions</li></ul><h3><span id="end-to-end-test">End-to-end test</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">get</span>(...).<span class="title function_">click</span>()</span><br></pre></td></tr></table></figure><ul><li>Web application</li><li>Easy to test the entire user flow</li></ul><p>At MercariUS we mostly use End-to-end tests and only are exploring the component tests. Thus here are out test numbers by type:</p><table><thead><tr><th>Test type</th><th>Number of front-end tests</th></tr></thead><tbody><tr><td>Unit tests</td><td>346</td></tr><tr><td>Component tests</td><td>WIP</td></tr><tr><td>End-to-end tests</td><td>695</td></tr></tbody></table><p>As you can see, E2E tests dominate our testing strategy</p><h2><span id="the-tests-should-be-fast">The tests should be fast</span></h2><p>To make E2E tests, we can safely bypass the user page UI. We use <a href="/blog/ui-to-api-to-app-actions/" title="API commands to create all the data">API commands to create all the data</a> for the tests, we cache data a lot using <a href="https://github.com/bahmutov/cypress-data-session">cypress-data-session</a>. We strive to keep every E2E test under 3 minutes long. On average, our tests are 1 minute long. Even then, 700 tests would take 12 hours to run if we use one machine.</p><p>The key to running all tests quickly on CI is parallelization. We use <a href="https://github.com/cypress-io/circleci-orb">Cypress CircleCI Orb</a> to configure the number of machines to use during each test run. This is how we can finish all the tests under 30 minutes. Potentially we could finish all the tests in 3 minutes by running them all in parallel if we use a really large number of CI containers.</p><p>When people discuss how fast end-to-end tests are, they focus on running the tests locally. Yet, they really should consider all aspects of writing, running, debugging, and maintaining tests. I have explored this topic in my previous presentation <a href="https://slides.com/bahmutov/pyramid-testjsummit">Testing Pyramid Makes Little Sense (And What We Can Use Instead)</a>.</p><h2><span id="maintainable-tests">Maintainable tests</span></h2><p>The key to maintainable tests is to make sure the tests are understood by someone <em>other than their original author</em>. Thus at MercariUS we go through the test review pull requests, just like we do for the application code itself. We focus on writing readable test code (using the custom commands, utility functions, and types when needed). Here is a typical E2E test, I think you will understand what it is doing just by reading the source code</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">signup</span>(seller)</span><br><span class="line"></span><br><span class="line">cy.<span class="title function_">createListing</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">`Macbook one <span class="subst">$&#123;Cypress._.random(<span class="number">1e10</span>)&#125;</span>`</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&#x27;Seller will delete all items&#x27;</span>,</span><br><span class="line">  <span class="attr">price</span>: <span class="number">198</span>,</span><br><span class="line">&#125;)</span><br><span class="line">cy.<span class="title function_">createListing</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">`Macbook two <span class="subst">$&#123;Cypress._.random(<span class="number">1e10</span>)&#125;</span>`</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&#x27;Seller will delete all items&#x27;</span>,</span><br><span class="line">  <span class="attr">price</span>: <span class="number">199</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">visitBlankPage</span>()</span><br><span class="line">cy.<span class="title function_">loginUserUsingAPI</span>(seller)</span><br><span class="line">cy.<span class="title function_">visitProtectedPage</span>(<span class="string">&#x27;/mypage/listings/active&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">byTestId</span>(<span class="string">&#x27;Filter&#x27;</span>, <span class="string">&#x27;Active&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>).<span class="title function_">and</span>(<span class="string">&#x27;contain&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">byTestId</span>(<span class="string">&#x27;ListingRow&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>).<span class="title function_">and</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2><span id="making-the-errors-actionable">Making the errors actionable</span></h2><p>One of the big time commitments when writing tests is debugging failed tests. The key goal here is to make sure any failed test gives a clear understand of the root cause for its failure. As an example, I give a test where the page did not transition to the target URL after clicking a button. We have modified the test to spy on the network call the application makes when the user clicks the button.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">interceptGraphQL</span>(<span class="string">&#x27;editDraftItemMutation&#x27;</span>) <span class="comment">// added</span></span><br><span class="line">cy.<span class="title function_">byTestId</span>(<span class="string">&#x27;NewListerSidebarSell&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">cy.<span class="title function_">waitGraphQL</span>(<span class="string">&#x27;@editDraftItemMutation&#x27;</span>) <span class="comment">// added</span></span><br></pre></td></tr></table></figure><p>With those two commands added, the test fails with a much more actionable error:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GraphQL call @editDraftItemMutation failed</span><br></pre></td></tr></table></figure><p>Great, the backend team can investigate the source of the failure.</p><p><strong>Tip:</strong> I cover <code>cy.intercept</code> and <code>cy.wait</code> commands and their custom implementation in my <a href="https://cypress.tips/courses/network-testing">Cypress Network Testing Exercises</a> course.</p><h2><span id="notify-the-right-people">Notify the right people</span></h2><p>When the tests run nightly, or every N hours, it is important to make sure the right team is notified when a test fails. We have implemented <a href="/blog/tag-tests/" title="test tagging by feature">test tagging by feature</a> and posting Slack messages tagging the specific team based on the test feature tag using my plugin <a href="https://github.com/bahmutov/cypress-slack-notify">cypress-slack-notify</a>.</p><h2><span id="stub-stable-apis">Stub stable APIs</span></h2><p>I finish the presentation with the advice to stub any calls the component code makes from the browser, rather than trying to stub the internal source code. The internal source code is likely to change, requiring test code changes. But backend APIs are unlikely to change very often, thus a test that stubs an Ajax call is likely to work even if the internals of the component are rewritten. In the end-to-end and component tests we can use <a href="https://on.cypress.io/network-requests">Cypress network control</a> using the <code>cy.intercept</code> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows the top times&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">intercept</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/times/90&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">fixture</span>: <span class="string">&#x27;times.json&#x27;</span>,</span><br><span class="line">  &#125;).<span class="title function_">as</span>(<span class="string">&#x27;scores&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">mount</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Overlay</span> <span class="attr">overlay</span>=<span class="string">&#123;true&#125;</span> <span class="attr">time</span>=<span class="string">&#123;90&#125;</span> /&gt;</span></span>)</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@scores&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.overlay__times li&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.overlay__times li&#x27;</span>, <span class="string">&#x27;01:30&#x27;</span>).<span class="title function_">should</span>(</span><br><span class="line">    <span class="string">&#x27;have.class&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;overlay__current&#x27;</span>,</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>üéì Seriously, my course <a href="https://cypress.tips/courses/network-testing">Cypress Network Testing Exercises</a> covers this type of testing pretty well, you are going to love writing tests like this one.</p></blockquote><h2><span id="conclusions">Conclusions</span></h2><p>Here is my final slide with the main conclusions of the talk</p><ul><li>Write and run tests in the browser<ul><li>End-to-end, component, and unit tests</li></ul></li><li>There are different kinds of speed<ul><li>Writing the tests</li><li>Running the tests</li><li>Debugging the failures</li></ul></li><li>Maintenance is hard<ul><li>Optimize for understanding</li></ul></li></ul><h2><span id="other-mercari-testing-talks">Other Mercari testing talks</span></h2><p>I have described how we do large-scale web testing web at Mercari US. Find the presentations at <a href="https://slides.com/bahmutov/decks/mercari">https://slides.com/bahmutov/decks/mercari</a>.</p><p><img src="../images/mercari-decks.png" alt="Mercari testing presentations"></p><p>With that, <strong>Happy Testing!</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently I had privilege to deliver a presentation to the special 10th year anniversary conference AllThingsOpen in Raleigh, North Caroli
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Mock process.env In Your Cypress React Tests</title>
    <link href="https://glebbahmutov.com/blog/mock-process-env-in-react/"/>
    <id>https://glebbahmutov.com/blog/mock-process-env-in-react/</id>
    <published>2022-10-28T04:00:00.000Z</published>
    <updated>2022-10-28T02:15:31.096Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s take a React application that uses <code>REACT_APP_...</code> values from the <code>.env</code> file in its code base. We can take the app from the blog post &quot;<a href="https://medium.com/how-to-react/using-env-file-in-react-js-b2714235e77e">Using .env file in React js</a>&quot; as an example. It&#39;s <code>.env</code> file has the following variable values:</p><figure class="highlight ini"><figcaption><span>.env</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">REACT_APP_TITLE</span>=How To React</span><br><span class="line"><span class="attr">REACT_APP_DESCRIPTION</span>=Using¬†.env file in React¬†js</span><br><span class="line"><span class="attr">REACT_APP_DEV_MODE</span>=This is a development mode</span><br><span class="line"><span class="attr">REACT_APP_PRO_MODE</span>=This is a production mode</span><br></pre></td></tr></table></figure><p>The <code>App.js</code> component uses these values in its output</p><figure class="highlight jsx"><figcaption><span>src/App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;process.env.REACT_APP_TITLE&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;process.env.REACT_APP_DESCRIPTION&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;process.env.NODE_ENV === &#x27;development&#x27;</span></span><br><span class="line"><span class="language-xml">        ? process.env.REACT_APP_DEV_MODE</span></span><br><span class="line"><span class="language-xml">        : process.env.REACT_APP_PRO_MODE&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure><p>If we start the application locally and visit <code>localhost:3000</code> we see these values on the page</p><p><img src="../images/mock-env/app.png" alt="React application page"></p><p>Nice.</p><h2><span id="text-substitution">Text substitution</span></h2><p>If we inspect the JavaScript bundle created by the <code>react-scripts</code> and served in the browser, we won&#39;t find <code>process.env.REACT_APP_TITLE</code></p><p><img src="../images/mock-env/not-found.png" alt="Variable name is not found"></p><p>Instead, the bundler substitutes the string values right into the source code</p><p><img src="../images/mock-env/bundle.png" alt="Env text used inside the bundle"></p><p>If we print the entire <code>process.env</code> object, it gets substituted into the source bundle</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="property">env</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><img src="../images/mock-env/entire-object.png" alt="The entire process.env object is replaced in the source code"></p><p>This means, we cannot even overwrite a property of the <code>process.env</code> object!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="property">env</span>)</span><br><span class="line">  process.<span class="property">env</span>.<span class="property">REACT_APP_TITLE</span> = <span class="string">&#x27;Hello!&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><img src="../images/mock-env/cannot-override.png" alt="Cannot override the process.env property"></p><p>Hmm, can we dynamically replace those values while running Cypress tests?</p><h2><span id="make-it-testable">Make it testable</span></h2><p>Just like we sometimes add attributes to make our HTML elements easy to find from our tests, we should adjust the source code in the <code>App.js</code> a little to make the <code>process.env</code> possible to overwrite. Here is my trick: check the <code>window.process.env</code> object with fallback to the <code>process.env</code> text. React bundler does not overwrite <code>window.process.env</code> object.</p><figure class="highlight js"><figcaption><span>src/App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> env = &#123; ...process.<span class="property">env</span>, ...<span class="variable language_">window</span>.<span class="property">process</span>?.<span class="property">env</span> &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;env.REACT_APP_TITLE&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;env.REACT_APP_DESCRIPTION&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;env.NODE_ENV === &#x27;development&#x27;</span></span><br><span class="line"><span class="language-xml">        ? env.REACT_APP_DEV_MODE</span></span><br><span class="line"><span class="language-xml">        : env.REACT_APP_PRO_MODE&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure><p>If <code>window.process.env</code> object exists, it overwrites anything in the <code>process.env</code> inserted by the bundler. Thus we can overwrite only the properties we want by setting them on the application&#39;s <code>window</code> object. Here is a typical test example:</p><figure class="highlight js"><figcaption><span>cypress/e2e/spec.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;mocks process.env&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// no mocking</span></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;How To React&#x27;</span>).<span class="title function_">wait</span>(<span class="number">1000</span>)</span><br><span class="line">  <span class="comment">// mocking</span></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">onBeforeLoad</span>(<span class="params">win</span>) &#123;</span><br><span class="line">      win.<span class="property">process</span> = &#123;</span><br><span class="line">        <span class="attr">env</span>: &#123;</span><br><span class="line">          <span class="attr">REACT_APP_TITLE</span>: <span class="string">&#x27;How To Test&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;How To Test&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/mock-env/test-e2e.gif" alt="Mocking a process.env property"></p><h2><span id="mocking-via-network-intercept">Mocking via network intercept</span></h2><p>We can mock the text in the JavaScript bundle in other ways. We can intercept the <code>bundle.js</code> resource loaded by the page. We can find and replace any text strings we want there using <a href="https://on.cypress.io/intercept">cy.intercept</a> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;replaces strings in the JS bundle&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">intercept</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;bundle.js&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// avoid the browser sending 304 cached response</span></span><br><span class="line">    <span class="keyword">delete</span> req.<span class="property">headers</span>[<span class="string">&#x27;if-none-match&#x27;</span>]</span><br><span class="line">    req.<span class="title function_">continue</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      res.<span class="property">body</span> = res.<span class="property">body</span>.<span class="title function_">replaceAll</span>(<span class="string">&#x27;&quot;How To React&quot;&#x27;</span>, <span class="string">&#x27;&quot;How To Test&quot;&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).<span class="title function_">as</span>(<span class="string">&#x27;bundle&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// confirm the server sent the response</span></span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@bundle&#x27;</span>).<span class="title function_">its</span>(<span class="string">&#x27;response.statusCode&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="number">200</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;How To Test&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/mock-env/network.png" alt="Overwriting the string in the JS bundle"></p><p>If React bundler can overwrite <code>process.env.REACT_APP_TITLE</code> with <code>&quot;How To React&quot;</code>, then we can certainly overwrite it with <code>&quot;How To Test&quot;</code>.</p><blockquote class="pullquote"><p>üéì If you want to master Cypress network testing in depth, consider studying my course <a href="https://cypress.tips/courses/network-testing">Cypress Network Testing Exercises</a>.</p></blockquote><h2><span id="component-testing">Component testing</span></h2><p>What about Cypress <a href="https://on.cypress.io/component-testing">Component testing</a>? We cannot use <code>cy.intercept</code> to intercept the bundle loaded by the page during <code>cy.visit(&#39;/&#39;)</code> unfortunately. The bundle is already served by the time the test runs. We can still use the <code>window.process.env</code> trick:</p><figure class="highlight js"><figcaption><span>src/App.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;loads&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">process</span> = &#123;</span><br><span class="line">    <span class="attr">env</span>: &#123;</span><br><span class="line">      <span class="attr">REACT_APP_TITLE</span>: <span class="string">&#x27;How To Component Test&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  cy.<span class="title function_">mount</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="variable language_">window</span>.<span class="property">process</span>.<span class="property">env</span>.<span class="property">REACT_APP_TITLE</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/mock-env/component-test.png" alt="Testing mocking the process.env property from a Cypress component test"></p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/cypress-v10-env/" title="Cypress v10 Environment Variables">Cypress v10 Environment Variables</a></li><li><a href="/blog/cypress-v10-tips/" title="Cypress v10 Tips and Tricks">Cypress v10 Tips and Tricks</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s take a React application that uses &lt;code&gt;REACT_APP_...&lt;/code&gt; values from the &lt;code&gt;.env&lt;/code&gt; file in its code base. We can t
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Playing With DevExtreme Text Input</title>
    <link href="https://glebbahmutov.com/blog/text-input/"/>
    <id>https://glebbahmutov.com/blog/text-input/</id>
    <published>2022-10-27T04:00:00.000Z</published>
    <updated>2022-10-27T12:27:13.704Z</updated>
    
    <content type="html"><![CDATA[<p>Typically a rich web widget UI wraps around <code>&lt;input ...&gt;</code> elements. The library hides the original plain inputs, while showing custom elements and showing formatted text. In this blog post, I will show a typical example from <a href="https://js.devexpress.com/">DevExtreme</a> library.</p><blockquote class="pullquote"><p>üéÅ You can find the source code for this blog post in the repo <a href="https://github.com/bahmutov/cypress-devextreme-example">bahmutov&#x2F;cypress-devextreme-example</a>.</p></blockquote><p>üì∫ Watch the explanation from this blog post in the video &quot;<a href="https://youtu.be/PZ2OsLBts1E">Test Formatted Phone Number Input</a>&quot;.</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/PZ2OsLBts1E" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Let&#39;s load the example page</p><figure class="highlight js"><figcaption><span>cypress/e2e/phone.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;formats the phone number&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;app/index.html&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We want to validate the input entered into the phone field</p><p><img src="../images/text-input/phone.png" alt="How do we test the phone number?"></p><p>Let&#39;s inspect the HTML markup.</p><p><img src="../images/text-input/html.png" alt="The HTML markup"></p><p>We have the hidden phone input element with the &quot;raw&quot; phone number without any formatting. We also have the textbox input element that the user sees on the page and that shows formatted text. Let&#39;s verify the starting phone number - we don&#39;t know it, but we know it is a ten digit number.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;formats the phone number&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;app/index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// starts with a 10 digit number</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=Mobile]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;match&#x27;</span>, <span class="regexp">/^\d&#123;10&#125;$/</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/text-input/initial-number.png" alt="Checking the initial phone number"></p><p>Let&#39;s now find the textbox and enter the new number to see if sets the real form input. We will go from the <code>input[name=Mobile]</code> element to its parent and then find the textbox. We will type the test phone number <code>123 456 7890</code> without spaces. Once we remove the focus from the input textbox field using <a href="https://on.cypress.io/blur">cy.blur</a> it should set the actual input.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;formats the phone number&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;app/index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// starts with a 10 digit number</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=Mobile]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;match&#x27;</span>, <span class="regexp">/^\d&#123;10&#125;$/</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=Mobile]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">parent</span>()</span><br><span class="line">    .<span class="title function_">find</span>(<span class="string">&#x27;input[role=textbox]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">clear</span>()</span><br><span class="line">    .<span class="title function_">type</span>(<span class="string">&#x27;1234567890&#x27;</span>)</span><br><span class="line">    .<span class="title function_">blur</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/text-input/type.png" alt="Type the test phone number"></p><p>Now let&#39;s verify the hidden input; it should have the raw number text. Then we should verify the textbox; it should have the formatted phone number.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;formats the phone number&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;app/index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// starts with a 10 digit number</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=Mobile]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;match&#x27;</span>, <span class="regexp">/^\d&#123;10&#125;$/</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=Mobile]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">parent</span>()</span><br><span class="line">    .<span class="title function_">find</span>(<span class="string">&#x27;input[role=textbox]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">clear</span>()</span><br><span class="line">    .<span class="title function_">type</span>(<span class="string">&#x27;1234567890&#x27;</span>)</span><br><span class="line">    .<span class="title function_">blur</span>()</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=Mobile]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;1234567890&#x27;</span>)</span><br><span class="line">    .<span class="title function_">parent</span>()</span><br><span class="line">    .<span class="title function_">find</span>(<span class="string">&#x27;input[role=textbox]&#x27;</span>)</span><br><span class="line">    <span class="comment">// the text box has formatted phone number</span></span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;+1 (123) 456-7890&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/text-input/phones.png" alt="Two phone inputs"></p><p>And that is how you work with rich web UI widgets in your Cypress tests.</p><p><strong>Tip:</strong> any time you verify text on the page, you should try to make as strict as possible to catch possible regressions. Watch my video <a href="https://www.youtube.com/watch?v=HkXx79JE2nU">Use Stronger Assertions</a> for example.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/cypress-devextreme-example/" title="Cypress DevExtreme Example">Cypress DevExtreme Example</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Typically a rich web widget UI wraps around &lt;code&gt;&amp;lt;input ...&amp;gt;&lt;/code&gt; elements. The library hides the original plain inputs, while s
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress DevExtreme Example</title>
    <link href="https://glebbahmutov.com/blog/cypress-devextreme-example/"/>
    <id>https://glebbahmutov.com/blog/cypress-devextreme-example/</id>
    <published>2022-10-26T04:00:00.000Z</published>
    <updated>2022-10-27T10:30:28.299Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s say that you do not control the HTML markup on the page. Finding the elements becomes difficult. How do you select the elements following <a href="https://on.cypress.io/best-practices#Selecting-Elements">Cypress querying best practices</a>? In this blog post I will show how to interact with <a href="https://js.devexpress.com/">DevExtreme</a> widgets.</p><blockquote class="pullquote"><p>üéÅ You can find the source code for this blog post in the repo <a href="https://github.com/bahmutov/cypress-devextreme-example">bahmutov&#x2F;cypress-devextreme-example</a>.</p></blockquote><p>üì∫ Watch the explanation from this blog post in the video &quot;<a href="https://youtu.be/vxDjcT63mJI">Cypress DevExtreme Example</a>&quot;.</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/vxDjcT63mJI" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>I grabbed a <code>FormsAndMultiPurposeOverview</code> example from DevExtreme gallery. The page includes several input widgets, and I would like to pick a different state using the state list popup.</p><p><img src="../images/cypress-devextreme-example/state.png" alt="I want to pick a different state"></p><p>Let&#39;s inspect the markup and find how we can click that button. Open the browser DevTools and find the State input widget.</p><p><img src="../images/cypress-devextreme-example/markup.png" alt="The state input widget"></p><p>Notice that the actual form value is hidden <code>&lt;input type=&quot;hidden&quot; name=&quot;State&quot; value=&quot;CA&quot;&gt;</code>. Let&#39;s first verify its initial value, finding the element by its <code>name</code> attribute.</p><figure class="highlight js"><figcaption><span>cypress/e2e/spec.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;selects the state&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;app/index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// by default CA state is selected</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=State]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;CA&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-devextreme-example/initial-state.png" alt="The state field is set to California"></p><p><strong>Tip:</strong> you can find lots of finding elements examples at my <a href="https://glebbahmutov.com/cypress-examples/commands/querying.html">cypress-examples querying page</a>.</p><p>Now that we found the state input element, we can find the button to open the state selection popup. The &quot;button&quot; (it is a <code>div</code> element with <code>role=button</code>) shares a common ancestor with the input element, thus we can do the following:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;selects the state&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;app/index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// by default CA state is selected</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=State]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;CA&#x27;</span>)</span><br><span class="line">    .<span class="title function_">parent</span>()</span><br><span class="line">    .<span class="title function_">find</span>(<span class="string">&#x27;[aria-label=Select]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-devextreme-example/open-state.png" alt="Opening the state selection list"></p><p>Great, now let&#39;s see how we can find the states list. Usually such popups are attached to the document body and use absolute positioning to appear next to the widget they are used with.</p><p><img src="../images/cypress-devextreme-example/popup.png" alt="The HTML markup for the states list popup"></p><p>Ughh, nothing terribly specific for our states data - but we can still find this popup.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;selects the state&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;app/index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// by default CA state is selected</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=State]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;CA&#x27;</span>)</span><br><span class="line">    .<span class="title function_">parent</span>()</span><br><span class="line">    .<span class="title function_">find</span>(<span class="string">&#x27;[aria-label=Select]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[role=listbox]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    .<span class="title function_">contains</span>(<span class="string">&#x27;[role=option]&#x27;</span>, <span class="string">&#x27;MA&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>()</span><br></pre></td></tr></table></figure><p>You can see the test working correctly.</p><p><img src="../images/cypress-devextreme-example/ma1.gif" alt="Selecting Massachusetts state from the dropdown"></p><p>It works, but the popup passes way too quickly, and it might be very difficult to see the list when the video is captured on CI. Thus I like slowing down such steps on purpose.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;selects the state&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;app/index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// by default CA state is selected</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=State]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;CA&#x27;</span>)</span><br><span class="line">    .<span class="title function_">parent</span>()</span><br><span class="line">    .<span class="title function_">find</span>(<span class="string">&#x27;[aria-label=Select]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[role=listbox]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    .<span class="title function_">contains</span>(<span class="string">&#x27;[role=option]&#x27;</span>, <span class="string">&#x27;MA&#x27;</span>)</span><br><span class="line">    .<span class="title function_">scrollIntoView</span>()</span><br><span class="line">    .<span class="title function_">wait</span>(<span class="number">1000</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    .<span class="title function_">click</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-devextreme-example/ma2.gif" alt="Scrolling the option into the view before clicking"></p><p>Much better. Finally, we want to confirm that clicking on the popup really changes the <code>&lt;input name=&quot;State&quot;&gt;</code> value.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;selects the state&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;app/index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// by default CA state is selected</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=State]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;CA&#x27;</span>)</span><br><span class="line">    .<span class="title function_">parent</span>()</span><br><span class="line">    .<span class="title function_">find</span>(<span class="string">&#x27;[aria-label=Select]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[role=listbox]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    .<span class="title function_">contains</span>(<span class="string">&#x27;[role=option]&#x27;</span>, <span class="string">&#x27;MA&#x27;</span>)</span><br><span class="line">    .<span class="title function_">scrollIntoView</span>()</span><br><span class="line">    .<span class="title function_">wait</span>(<span class="number">1000</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    .<span class="title function_">click</span>()</span><br><span class="line">  <span class="comment">// the input field now has the value &quot;MA&quot;</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=State]&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;MA&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-devextreme-example/confirm.png" alt="Confirm the state form input has the changed value"></p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/text-input/" title="Playing With DevExtreme Text Input">Playing With DevExtreme Text Input</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s say that you do not control the HTML markup on the page. Finding the elements becomes difficult. How do you select the elements
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Check Redux Store Using cy-spok</title>
    <link href="https://glebbahmutov.com/blog/spok-redux/"/>
    <id>https://glebbahmutov.com/blog/spok-redux/</id>
    <published>2022-10-17T04:00:00.000Z</published>
    <updated>2022-10-17T01:34:59.501Z</updated>
    
    <content type="html"><![CDATA[<p>This blog post shows my two favorite things about Cypress tests:</p><ol><li>Validating complex objects and property types using <a href="https://github.com/bahmutov/cy-spok">cy-spok</a></li><li>Driving the application by dispatching actions directly rather than always going through the UI</li></ol><blockquote class="pullquote"><p>üéÅ You can find the source application used to write this blog post int the repo <a href="https://github.com/bahmutov/todo-react-redux">bahmutov&#x2F;todo-react-redux</a>. You can also find the concepts described in this blog post explained through hands-on exercises in my course <a href="https://cypress.tips/courses/cypress-plugins">Cypress Plugins</a>.</p></blockquote><h2><span id="the-application-and-the-first-test">The application and the first test</span></h2><p>Our application is a TodoMVC where the user can add and delete todo items.</p><p><img src="../images/spok-redux/app.png" alt="TodoMVC application"></p><p>We can write an end-to-end test that adds the todos and checks the page to make sure the expected todos are displayed.</p><figure class="highlight js"><figcaption><span>cypress/e2e/spec.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;adds todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// add a few todos using the application UI</span></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;input[placeholder=&quot;Add new todo here&quot;]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">type</span>(<span class="string">&#x27;Learn Cypress&#123;enter&#125;&#x27;</span>)</span><br><span class="line">    .<span class="title function_">type</span>(<span class="string">&#x27;Learn JavaScript&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  <span class="comment">// confirm the page works</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-cy=todo]&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=&quot;pending-count&quot;]&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/spok-redux/test.png" alt="The first end-to-end test"></p><h2><span id="the-redux-store">The Redux store</span></h2><p>Our application uses the Redux store to keep all its data.</p><figure class="highlight ts"><figcaption><span>src/store/store.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span></span><br><span class="line"><span class="keyword">import</span> todosReducer <span class="keyword">from</span> <span class="string">&#x27;./reducers/todosSlice&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">  <span class="attr">reducer</span>: &#123;</span><br><span class="line">    <span class="attr">todos</span>: todosReducer,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">AppDispatch</span> = <span class="keyword">typeof</span> store.<span class="property">dispatch</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">RootState</span> = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> store.<span class="property">getState</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>src/index.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.scss&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">&#x27;./store/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>What does the store keep inside? Is the data there correct and follows the expected rules as we manipulate the application through the user interface? If we have React DevTools browser extension, we can see the component and find the store, even if we cannot call <code>getState()</code> method to see the actual values (as far as I know)</p><p><img src="../images/spok-redux/devtools.png" alt="Redux store shown using the React DevTools browser extension"></p><p>How can we see what&#39;s inside that data store? By placing it on the <code>window</code> object during Cypress tests:</p><figure class="highlight ts"><figcaption><span>src/store/store.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">Cypress</span>) &#123;</span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">store</span> = store</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> I make the TS types check pass using <code>@ts-ignore</code> comments. You could also extend the global application <code>window</code> type definition as described in <a href="/blog/cypress-js-to-ts/" title="Convert Cypress Specs from JavaScript to TypeScript">Convert Cypress Specs from JavaScript to TypeScript</a> to make the types work.</p><p>You should be able to open the DevTools in the Cypress browser, change the context to &quot;Your project&quot; and access the data directly using <code>window.store.getState()</code> method call.</p><p><img src="../images/spok-redux/store.png" alt="Access the Redux store from DevTools console"></p><p>Great, now let&#39;s check the data in the store.</p><h2><span id="check-the-data-using-cy-spok">Check the data using cy-spok</span></h2><p>Once the test adds two todos, let&#39;s confirm the internal redux data. We will use <a href="https://on.cypress.io/window">cy.window</a>, <a href="https://on.cypress.io/its">cy.its</a>, and <a href="https://on.cypress.io/invoke">cy.invoke</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;adds todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// add a few todos using the application UI</span></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;input[placeholder=&quot;Add new todo here&quot;]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">type</span>(<span class="string">&#x27;Learn Cypress&#123;enter&#125;&#x27;</span>)</span><br><span class="line">    .<span class="title function_">type</span>(<span class="string">&#x27;Learn JavaScript&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  <span class="comment">// confirm the page works</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-cy=todo]&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=&quot;pending-count&quot;]&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// we assume the application sets &quot;window.store&quot;</span></span><br><span class="line">  <span class="comment">// if running inside the Cypress test</span></span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;**check the Redux state**&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">window</span>()</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;store&#x27;</span>)</span><br><span class="line">    .<span class="title function_">invoke</span>(<span class="string">&#x27;getState&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(...)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hmm, what should we write inside the <code>should</code>? We don&#39;t know the random IDs, so we cannot use <code>deep.equal</code> assertion. This is where the <a href="https://github.com/bahmutov/cy-spok">cy-spok</a> shines. It lets us confirm complex data and&#x2F;or types.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spok <span class="keyword">from</span> <span class="string">&#x27;cy-spok&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// we assume the application sets &quot;window.store&quot;</span></span><br><span class="line"><span class="comment">// if running inside the Cypress test</span></span><br><span class="line">cy.<span class="title function_">log</span>(<span class="string">&#x27;**check the Redux state**&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">window</span>()</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;store&#x27;</span>)</span><br><span class="line">  .<span class="title function_">invoke</span>(<span class="string">&#x27;getState&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(</span><br><span class="line">    <span class="title function_">spok</span>(&#123;</span><br><span class="line">      <span class="attr">todos</span>: &#123;</span><br><span class="line">        <span class="attr">data</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">$topic</span>: <span class="string">&#x27;The second todo&#x27;</span>,</span><br><span class="line">            <span class="attr">text</span>: <span class="string">&#x27;Learn JavaScript&#x27;</span>,</span><br><span class="line">            <span class="attr">id</span>: spok.<span class="property">number</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">$topic</span>: <span class="string">&#x27;The first todo&#x27;</span>,</span><br><span class="line">            <span class="attr">text</span>: <span class="string">&#x27;Learn Cypress&#x27;</span>,</span><br><span class="line">            <span class="attr">id</span>: spok.<span class="property">number</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p><img src="../images/spok-redux/spok.png" alt="Check the Redux store using cy-spok"></p><p>The <code>spok(...)</code> functions the actual callback that will be called with the data:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> callback = <span class="title function_">spok</span>(&#123; ... &#125;)</span><br><span class="line">cy.<span class="title function_">window</span>()</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;store&#x27;</span>)</span><br><span class="line">  .<span class="title function_">invoke</span>(<span class="string">&#x27;getState&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(callback)</span><br></pre></td></tr></table></figure><p>Now that we can access the Redux store to check what it contains, what else can we do?</p><h2><span id="drive-application-by-dispatching-actions">Drive application by dispatching actions</span></h2><p>Take a look at <code>Todo</code> component. It calls the <code>removeTodo</code> Redux action when the user clicks the Trash can button.</p><figure class="highlight ts"><figcaption><span>src/components/Todo.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">&#x27;./todo.module.scss&#x27;</span></span><br><span class="line"><span class="keyword">import</span> remove <span class="keyword">from</span> <span class="string">&#x27;../assets/icons/remove.svg&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useAppDispatch &#125; <span class="keyword">from</span> <span class="string">&#x27;../store/hooks&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; removeTodo &#125; <span class="keyword">from</span> <span class="string">&#x27;../store/reducers/todosSlice&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Todo</span>(<span class="params">props: &#123; text: <span class="built_in">string</span>; id: <span class="built_in">number</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useAppDispatch</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">removeHandler</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(<span class="title function_">removeTodo</span>(props.<span class="property">id</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;style.todo&#125;</span> <span class="attr">data-cy</span>=<span class="string">&quot;todo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;props.text&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;remove&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;remove&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;removeHandler&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Todo</span></span><br></pre></td></tr></table></figure><p>Can we call the <code>removeTodo</code> action from the test bypassing the user interface. This is what I call <a href="https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/">App Actions</a> and it is possible because the Cypress spec runs in the same window as the application. We will remove the first todo item using its ID.</p><figure class="highlight js"><figcaption><span>spec.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spok <span class="keyword">from</span> <span class="string">&#x27;cy-spok&#x27;</span></span><br><span class="line"><span class="comment">// import a function from the application code</span></span><br><span class="line"><span class="comment">// to help us construct an action to dispatch</span></span><br><span class="line"><span class="keyword">import</span> &#123; removeTodo &#125; <span class="keyword">from</span> <span class="string">&#x27;../../src/store/reducers/todosSlice&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;adds todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// add a few todos using the application UI</span></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;input[placeholder=&quot;Add new todo here&quot;]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">type</span>(<span class="string">&#x27;Learn Cypress&#123;enter&#125;&#x27;</span>)</span><br><span class="line">    .<span class="title function_">type</span>(<span class="string">&#x27;Learn JavaScript&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  <span class="comment">// confirm the page works</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-cy=todo]&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=&quot;pending-count&quot;]&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// we assume the application sets &quot;window.store&quot;</span></span><br><span class="line">  <span class="comment">// if running inside the Cypress test</span></span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;**check the Redux state**&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">window</span>()</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;store&#x27;</span>)</span><br><span class="line">    .<span class="title function_">invoke</span>(<span class="string">&#x27;getState&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(</span><br><span class="line">      <span class="title function_">spok</span>(&#123;</span><br><span class="line">        <span class="attr">todos</span>: &#123;</span><br><span class="line">          <span class="attr">data</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">$topic</span>: <span class="string">&#x27;The second todo&#x27;</span>,</span><br><span class="line">              <span class="attr">text</span>: <span class="string">&#x27;Learn JavaScript&#x27;</span>,</span><br><span class="line">              <span class="attr">id</span>: spok.<span class="property">number</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">$topic</span>: <span class="string">&#x27;The first todo&#x27;</span>,</span><br><span class="line">              <span class="attr">text</span>: <span class="string">&#x27;Learn Cypress&#x27;</span>,</span><br><span class="line">              <span class="attr">id</span>: spok.<span class="property">number</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// grab the ID of the first todo item</span></span><br><span class="line">    <span class="comment">// grab the Redux store again and dispatch the remove todos action</span></span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;todos.data.0.id&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">window</span>().<span class="title function_">its</span>(<span class="string">&#x27;store&#x27;</span>).<span class="title function_">invoke</span>(<span class="string">&#x27;dispatch&#x27;</span>, <span class="title function_">removeTodo</span>(id))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Once we get the store, we invoke the <code>dispatch</code> method and we even use Redux action <code>removeTodo</code> from the application source to help us construct the argument simpler.</p><p><img src="../images/spok-redux/dispatch.png" alt="Dispatching the Redux action from the test"></p><p>Beautiful. All we need to do is to confirm the application has correctly updated its DOM.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">window</span>()</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;store&#x27;</span>)</span><br><span class="line">  .<span class="title function_">invoke</span>(<span class="string">&#x27;getState&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="title function_">spok</span>(...))</span><br><span class="line">  <span class="comment">// grab the ID of the first todo item</span></span><br><span class="line">  <span class="comment">// grab the Redux store again and dispatch the remove todos action</span></span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;todos.data.0.id&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">window</span>().<span class="title function_">its</span>(<span class="string">&#x27;store&#x27;</span>).<span class="title function_">invoke</span>(<span class="string">&#x27;dispatch&#x27;</span>, <span class="title function_">removeTodo</span>(id))</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// once we remove the first todo, the UI should update</span></span><br><span class="line"><span class="comment">// confirm the UI changes and the single todo remains</span></span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=&quot;pending-count&quot;]&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=todo]&#x27;</span>, <span class="string">&#x27;Learn Cypress&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Next, we can use <code>cy-spok</code> again to check the updated Redux store state:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get the Redux store again and confirm the data in it</span></span><br><span class="line">cy.<span class="title function_">log</span>(<span class="string">&#x27;**redux store**&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">window</span>()</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;store&#x27;</span>)</span><br><span class="line">  .<span class="title function_">invoke</span>(<span class="string">&#x27;getState&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(</span><br><span class="line">    <span class="title function_">spok</span>(&#123;</span><br><span class="line">      <span class="attr">todos</span>: &#123;</span><br><span class="line">        <span class="attr">data</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">$topic</span>: <span class="string">&#x27;The first todo&#x27;</span>,</span><br><span class="line">            <span class="attr">text</span>: <span class="string">&#x27;Learn Cypress&#x27;</span>,</span><br><span class="line">            <span class="attr">id</span>: spok.<span class="property">number</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>Very nice.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/3rd-party/" title="Dealing With 3rd Party Scripts In Cypress Tests">Dealing With 3rd Party Scripts In Cypress Tests</a></li><li><a href="/blog/cypress-and-xstate/" title="Access XState from Cypress Test">Access XState from Cypress Test</a></li><li><a href="/blog/react-app-actions/" title="Control React Applications From Cypress Tests">Control React Applications From Cypress Tests</a></li><li><a href="/blog/realworld-app-action/" title="How to write end-to-end test using app and api actions">How to write end-to-end test using app and api actions</a></li><li><a href="/blog/testing-angular-application-via-app-actions/" title="Testing Angular application via App Actions">Testing Angular application via App Actions</a></li><li><a href="/blog/ui-to-api-to-app-actions/" title="Change E2E Tests From UI To API To App Actions">Change E2E Tests From UI To API To App Actions</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This blog post shows my two favorite things about Cypress tests:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Validating complex objects and property types using &lt;a href
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Split A Test.Bash 2022 Test</title>
    <link href="https://glebbahmutov.com/blog/split-test/"/>
    <id>https://glebbahmutov.com/blog/split-test/</id>
    <published>2022-10-06T04:00:00.000Z</published>
    <updated>2022-10-06T11:45:58.431Z</updated>
    
    <content type="html"><![CDATA[<p>In this blog post I will continue working with my solution to the <a href="https://www.ministryoftesting.com/news/are-you-ready-to-take-the-test-bash-2022-challenges">Test.Bash 2022 UI Automation challenge</a>. I have described and recorded a video of my solution in the blog post <a href="/blog/test-bash-2022-ui-challenge/" title="Solving Test.Bash 2022 UI Challenge With Cypress">Solving Test.Bash 2022 UI Challenge With Cypress</a>. In this blog post, I will try to split the single test into a few shorter isolated tests that show a few tricks I normally employ in my Cypress testing.</p><blockquote class="pullquote"><p>üéÅ You can find the original test and the refactored tests in the repo <a href="https://github.com/bahmutov/test-bash-2022-ui">bahmutov&#x2F;test-bash-2022-ui</a>.</p></blockquote><h2><span id="the-original-test">The original test</span></h2><p>The test as written for the challenge entered the message like a user, then logged into the system as an admin, then viewed the message. So the test did several things together:</p><figure class="highlight js"><figcaption><span>cypress/e2e/spec.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;sends a message successfully&#x27;</span>, &#123; <span class="attr">retries</span>: <span class="number">2</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// enter the random message</span></span><br><span class="line">  <span class="comment">// log in as the admin</span></span><br><span class="line">  <span class="comment">// check the message</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Our tests mostly accessed the elements using the <code>data-testid</code> attributes.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;.row.contact form&#x27;</span>).<span class="title function_">within</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-testid=&quot;ContactName&quot;]&#x27;</span>).<span class="title function_">type</span>(name)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-testid=&quot;ContactEmail&quot;]&#x27;</span>).<span class="title function_">type</span>(email)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-testid=&quot;ContactPhone&quot;]&#x27;</span>).<span class="title function_">type</span>(phone)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-testid=&quot;ContactSubject&quot;]&#x27;</span>).<span class="title function_">type</span>(subject)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-testid=&quot;ContactDescription&quot;]&#x27;</span>).<span class="title function_">type</span>(body)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#submitContact&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The repetition of the data attributes is a little too verbose. Let&#39;s add a <a href="/blog/writing-custom-cypress-command/" title="custom Cypress command">custom Cypress command</a>. Since we are getting an element by its test id, I will call my custom command <code>cy.got</code></p><figure class="highlight js"><figcaption><span>cypress/e2e/split.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cypress</span>.<span class="property">Commands</span>.<span class="title function_">add</span>(<span class="string">&#x27;got&#x27;</span>, <span class="function">(<span class="params">testid</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> cy.<span class="title function_">get</span>(<span class="string">`[data-testid=&quot;<span class="subst">$&#123;testid&#125;</span>&quot;]`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;.row.contact form&#x27;</span>).<span class="title function_">within</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">got</span>(<span class="string">&#x27;ContactName&#x27;</span>).<span class="title function_">type</span>(name)</span><br><span class="line">  cy.<span class="title function_">got</span>(<span class="string">&#x27;ContactEmail&#x27;</span>).<span class="title function_">type</span>(email)</span><br><span class="line">  cy.<span class="title function_">got</span>(<span class="string">&#x27;ContactPhone&#x27;</span>).<span class="title function_">type</span>(phone)</span><br><span class="line">  cy.<span class="title function_">got</span>(<span class="string">&#x27;ContactSubject&#x27;</span>).<span class="title function_">type</span>(subject)</span><br><span class="line">  cy.<span class="title function_">got</span>(<span class="string">&#x27;ContactDescription&#x27;</span>).<span class="title function_">type</span>(description)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#submitContact&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Ok, let the refactoring begin.</p><h2><span id="split-the-test">Split the test</span></h2><p>Our single test is too long - the web application can reset during the test and the might fail. We got around it by using <a href="https://on.cypress.io/test-retries">test retries</a>, but let&#39;s make it better. Let&#39;s test each feature separately: submit a form, log in, view messages. To confirm the user can submit the form, we can enter the form, and observe the network call to ensure the backend accepts the form submission. We can use <a href="https://on.cypress.io/intercept">cy.intercept</a> command to spy on the call.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;sends a message successfully&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">&#x27;Test Cy User&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> email = <span class="string">&#x27;email@email.com&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> phone = <span class="string">&#x27;123-456-7890&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> subject = <span class="string">`Test Cy message <span class="subst">$&#123;Cypress._.random(<span class="number">1e5</span>)&#125;</span>`</span></span><br><span class="line">  <span class="keyword">const</span> description = <span class="title class_">Cypress</span>.<span class="property">_</span>.<span class="title function_">repeat</span>(<span class="string">&#x27;message body &#x27;</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">intercept</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/message/&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;message&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.row.contact form&#x27;</span>).<span class="title function_">within</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">got</span>(<span class="string">&#x27;ContactName&#x27;</span>).<span class="title function_">type</span>(name)</span><br><span class="line">    cy.<span class="title function_">got</span>(<span class="string">&#x27;ContactEmail&#x27;</span>).<span class="title function_">type</span>(email)</span><br><span class="line">    cy.<span class="title function_">got</span>(<span class="string">&#x27;ContactPhone&#x27;</span>).<span class="title function_">type</span>(phone)</span><br><span class="line">    cy.<span class="title function_">got</span>(<span class="string">&#x27;ContactSubject&#x27;</span>).<span class="title function_">type</span>(subject)</span><br><span class="line">    cy.<span class="title function_">got</span>(<span class="string">&#x27;ContactDescription&#x27;</span>).<span class="title function_">type</span>(description)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;#submitContact&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> message = &#123;</span><br><span class="line">    description,</span><br><span class="line">    email,</span><br><span class="line">    name,</span><br><span class="line">    phone,</span><br><span class="line">    subject,</span><br><span class="line">  &#125;</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@message&#x27;</span>).<span class="title function_">its</span>(<span class="string">&#x27;request.body&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, message)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@message&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;response.body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.include&#x27;</span>, message)</span><br><span class="line">    .<span class="title function_">and</span>(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;messageid&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.a&#x27;</span>, <span class="string">&#x27;number&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/split-test/submit.png" alt="Submit the form test"></p><p>We have confirmed the submission using <code>deep.equal</code> assertion, and the response that includes the same form plus the <code>messageid</code>.</p><h2><span id="log-in">Log in</span></h2><p>Now that the form is working, let&#39;s confirm the user can log in both using the UI and using the API (because that is what the UI does)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;can log in using UI&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Axios rejects a promise after checking auth route right away</span></span><br><span class="line">  cy.<span class="title function_">on</span>(<span class="string">&#x27;uncaught:exception&#x27;</span>, <span class="function">() =&gt;</span> <span class="literal">false</span>)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/#/admin&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">got</span>(<span class="string">&#x27;username&#x27;</span>).<span class="title function_">type</span>(<span class="title class_">Cypress</span>.<span class="title function_">env</span>(<span class="string">&#x27;username&#x27;</span>))</span><br><span class="line">  cy.<span class="title function_">got</span>(<span class="string">&#x27;password&#x27;</span>).<span class="title function_">type</span>(<span class="title class_">Cypress</span>.<span class="title function_">env</span>(<span class="string">&#x27;password&#x27;</span>), &#123;</span><br><span class="line">    <span class="attr">log</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">got</span>(<span class="string">&#x27;submit&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;Logout&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.navbar&#x27;</span>, <span class="string">&#x27;B&amp;B Booking Management&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    .<span class="title function_">find</span>(<span class="string">&#x27;a[href=&quot;#/admin/messages&quot;]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">location</span>(<span class="string">&#x27;hash&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;#/admin/messages&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/split-test/login1.png" alt="Log in using the page UI"></p><p>Logging in using the UI works, so now let&#39;s test a faster way that other tests could use - logging in using the API call, just like the login page does. We can use the <a href="https://on.cypress.io/request">cy.request</a> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;can log in using API call&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/auth/login&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="title class_">Cypress</span>.<span class="title function_">env</span>(<span class="string">&#x27;username&#x27;</span>),</span><br><span class="line">    <span class="attr">password</span>: <span class="title class_">Cypress</span>.<span class="title function_">env</span>(<span class="string">&#x27;password&#x27;</span>),</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/#/admin/messages&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;Logout&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>).<span class="title function_">scrollIntoView</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/split-test/login2.png" alt="Almost instant login via cy.request call"></p><p><strong>Tip:</strong> you can cache the browser session cookie to avoid logging in before each test by using <a href="https://github.com/bahmutov/cypress-v10-preserve-cookie">cypress-v10-preserve-cookie</a>, or <a href="https://github.com/bahmutov/cypress-data-session">cypress-data-session</a>, or <a href="https://on.cypress.io/session">cy.session</a>.</p><p>We can refactor the log in into its own custom command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cypress</span>.<span class="property">Commands</span>.<span class="title function_">add</span>(<span class="string">&#x27;login&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/auth/login&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="title class_">Cypress</span>.<span class="title function_">env</span>(<span class="string">&#x27;username&#x27;</span>),</span><br><span class="line">    <span class="attr">password</span>: <span class="title class_">Cypress</span>.<span class="title function_">env</span>(<span class="string">&#x27;password&#x27;</span>),</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Then each test for the admin user can start with:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;can log in using API call&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">login</span>()</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/#/admin/messages&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;Logout&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>).<span class="title function_">scrollIntoView</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="view-messages">View messages</span></h2><p>Now that we can quickly log in, let&#39;s check if the admin user can see the posted messages. We will send a new message using a <code>cy.request</code> command - which is the same network call as the test &quot;sends a message successfully&quot; shows works.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;views the message&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">&#x27;Test Cy User&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> email = <span class="string">&#x27;email@email.com&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> phone = <span class="string">&#x27;123-456-7890&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> subject = <span class="string">`Test Cy message <span class="subst">$&#123;Cypress._.random(<span class="number">1e5</span>)&#125;</span>`</span></span><br><span class="line">  <span class="keyword">const</span> description = <span class="title class_">Cypress</span>.<span class="property">_</span>.<span class="title function_">repeat</span>(<span class="string">&#x27;message body &#x27;</span>, <span class="number">5</span>)</span><br><span class="line">  <span class="keyword">const</span> message = &#123;</span><br><span class="line">    description,</span><br><span class="line">    email,</span><br><span class="line">    name,</span><br><span class="line">    phone,</span><br><span class="line">    subject,</span><br><span class="line">  &#125;</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/message/&#x27;</span>, message).<span class="title function_">its</span>(<span class="string">&#x27;status&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="number">201</span>)</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>After the message has been posted successfully and returned status code 201, we can log in</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">cy.<span class="title function_">request</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/message/&#x27;</span>, message).<span class="title function_">its</span>(<span class="string">&#x27;status&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="number">201</span>)</span><br><span class="line"></span><br><span class="line">cy.<span class="title function_">login</span>()</span><br><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;/#/admin/messages&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/split-test/view1.png" alt="The view message test logs in"></p><p>Let&#39;s find our posted message</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;/#/admin/messages&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;.row.detail&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;have.length.greaterThan&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">  .<span class="title function_">contains</span>(<span class="string">&#x27;.row&#x27;</span>, subject)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;read-false&#x27;</span>)</span><br><span class="line">  .<span class="title function_">click</span>()</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;.message-modal&#x27;</span>, subject)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  .<span class="title function_">and</span>(<span class="string">&#x27;include.text&#x27;</span>, name)</span><br><span class="line">  .<span class="title function_">and</span>(<span class="string">&#x27;include.text&#x27;</span>, phone)</span><br><span class="line">  .<span class="title function_">and</span>(<span class="string">&#x27;include.text&#x27;</span>, email)</span><br><span class="line">  .<span class="title function_">and</span>(<span class="string">&#x27;include.text&#x27;</span>, subject)</span><br><span class="line">  .<span class="title function_">and</span>(<span class="string">&#x27;include.text&#x27;</span>, description)</span><br><span class="line">  .<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Close&#x27;</span>)</span><br><span class="line">  .<span class="title function_">wait</span>(<span class="number">1000</span>) <span class="comment">// just to make the video clear</span></span><br><span class="line">  .<span class="title function_">click</span>()</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;.message-modal&#x27;</span>, subject).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;.row.detail&#x27;</span>, subject)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;read-true&#x27;</span>)</span><br><span class="line">  .<span class="title function_">and</span>(<span class="string">&#x27;not.have.class&#x27;</span>, <span class="string">&#x27;read-false&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/split-test/view-test.gif" alt="The full view message test"></p><p>After this refactoring, each test is short and independent from each other. If we need to add more tests, we can use the existing tests as the starting point.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/ui-to-api-to-app-actions/" title="Change E2E Tests From UI To API To App Actions">Change E2E Tests From UI To API To App Actions</a></li><li><a href="https://cypress.tips/courses/network-testing">Cypress Network Testing Exercises</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this blog post I will continue working with my solution to the &lt;a href=&quot;https://www.ministryoftesting.com/news/are-you-ready-to-take-t
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="tutorial" scheme="https://glebbahmutov.com/blog/tags/tutorial/"/>
    
  </entry>
  
  <entry>
    <title>Solving Test.Bash 2022 UI Challenge With Cypress</title>
    <link href="https://glebbahmutov.com/blog/test-bash-2022-ui-challenge/"/>
    <id>https://glebbahmutov.com/blog/test-bash-2022-ui-challenge/</id>
    <published>2022-10-03T04:00:00.000Z</published>
    <updated>2022-10-03T14:02:21.357Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I have decided to solve the <a href="https://www.ministryoftesting.com/news/are-you-ready-to-take-the-test-bash-2022-challenges">Test.Bash 2022 UI Automation challenge</a>. I need to test a small web application running at <a href="https://automationintesting.online/">https://automationintesting.online/</a>; it is a message form. A user can submit the form, and then the admin can log in and read the message. The total time to solve it is twenty minutes, so let&#39;s go.</p><h2><span id="video">Video</span></h2><p>You can watch the video I submitted to the challenge below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/GjKSzHPyDyo" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="create-a-repo-and-a-local-project">Create a repo and a local project</span></h2><p>I have created a repository for my tests <a href="https://github.com/bahmutov/test-bash-2022-ui">bahmutov&#x2F;test-bash-2022-ui</a>. Locally I have created a new folder with Git and NPM package</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;md&quot;</span> is my <span class="built_in">alias</span> <span class="keyword">for</span> creating folders</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">a combination of <span class="string">&quot;mkdir&quot;</span> and <span class="string">&quot;cd&quot;</span></span></span><br><span class="line">~/git $ md test-bash-2022-ui</span><br><span class="line">~/git/test-bash-2022-ui $ git init</span><br><span class="line">~/git/test-bash-2022-ui $ git remote add origin git@github.com:bahmutov/test-bash-2022-ui.git</span><br><span class="line">~/git/test-bash-2022-ui $ npm init -y</span><br></pre></td></tr></table></figure><p>Let&#39;s <a href="https://on.cypress.io/installation">install Cypress</a> and Prettier, cause I love <a href="/blog/configure-prettier-in-vscode/" title="automatic code formatting">automatic code formatting</a>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">all commands are <span class="keyword">in</span> the <span class="string">&quot;test-bash-2022-ui&quot;</span> folder</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">node -v</span></span><br><span class="line">v16.14.0</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm i -D cypress prettier</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">I copied .prettierrc.json from another project</span></span><br></pre></td></tr></table></figure><p>Open Cypress and scaffold E2E tests</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npx cypress open</span></span><br></pre></td></tr></table></figure><p><img src="../images/test-bash/scaffold.png" alt="Scaffold E2E tests"></p><p>We are going to be testing the application running at &quot;<a href="https://automationintesting.online/&quot;">https://automationintesting.online/&quot;</a>. Let&#39;s put this as <code>baseUrl</code> in our <code>cypress.config.js</code> file.</p><figure class="highlight js"><figcaption><span>cypress.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">e2e</span>: &#123;</span><br><span class="line">    <span class="attr">baseUrl</span>: <span class="string">&#x27;https://automationintesting.online/&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Time to write a test</p><h2><span id="sending-a-message">Sending a message</span></h2><p>If you have never seen a Cypress test, take a look at the <a href="https://on.cypress.io/introduction">Cypress introduction</a>. We visit the base URL, find the message form, and then enter some text into the fields. To make sure we can find our message, I use the Lodash library (bundled with Cypress) to generate a random id to include in the message subject.</p><figure class="highlight js"><figcaption><span>cypress/e2e/send.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;sends a message successfully&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">&#x27;Test Cy User&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> email = <span class="string">&#x27;email@email.com&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> phone = <span class="string">&#x27;123-456-7890&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> subject = <span class="string">`Test Cy message <span class="subst">$&#123;Cypress._.random(<span class="number">1e5</span>)&#125;</span>`</span></span><br><span class="line">  <span class="keyword">const</span> body = <span class="title class_">Cypress</span>.<span class="property">_</span>.<span class="title function_">repeat</span>(<span class="string">&#x27;message body &#x27;</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.row.contact form&#x27;</span>).<span class="title function_">within</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-testid=&quot;ContactName&quot;]&#x27;</span>).<span class="title function_">type</span>(name)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-testid=&quot;ContactEmail&quot;]&#x27;</span>).<span class="title function_">type</span>(email)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-testid=&quot;ContactPhone&quot;]&#x27;</span>).<span class="title function_">type</span>(phone)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-testid=&quot;ContactSubject&quot;]&#x27;</span>).<span class="title function_">type</span>(subject)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-testid=&quot;ContactDescription&quot;]&#x27;</span>).<span class="title function_">type</span>(body)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;#submitContact&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// the form was submitted</span></span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;**checking messages**&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Axios rejects a promise after checking auth route right away</span></span><br><span class="line">  cy.<span class="title function_">on</span>(<span class="string">&#x27;uncaught:exception&#x27;</span>, <span class="function">() =&gt;</span> <span class="literal">false</span>)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/#/admin&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-testid=&quot;username&quot;]&#x27;</span>).<span class="title function_">type</span>(<span class="title class_">Cypress</span>.<span class="title function_">env</span>(<span class="string">&#x27;username&#x27;</span>))</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-testid=&quot;password&quot;]&#x27;</span>).<span class="title function_">type</span>(<span class="title class_">Cypress</span>.<span class="title function_">env</span>(<span class="string">&#x27;password&#x27;</span>), &#123;</span><br><span class="line">    <span class="attr">log</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-testid=&quot;submit&quot;]&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.navbar&#x27;</span>, <span class="string">&#x27;B&amp;B Booking Management&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    .<span class="title function_">find</span>(<span class="string">&#x27;a[href=&quot;#/admin/messages&quot;]&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">location</span>(<span class="string">&#x27;hash&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;#/admin/messages&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.row.detail&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.length.greaterThan&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">    .<span class="title function_">contains</span>(<span class="string">&#x27;.row&#x27;</span>, subject)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;read-false&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.message-modal&#x27;</span>, subject)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    .<span class="title function_">and</span>(<span class="string">&#x27;include.text&#x27;</span>, name)</span><br><span class="line">    .<span class="title function_">and</span>(<span class="string">&#x27;include.text&#x27;</span>, phone)</span><br><span class="line">    .<span class="title function_">and</span>(<span class="string">&#x27;include.text&#x27;</span>, email)</span><br><span class="line">    .<span class="title function_">and</span>(<span class="string">&#x27;include.text&#x27;</span>, subject)</span><br><span class="line">    .<span class="title function_">and</span>(<span class="string">&#x27;include.text&#x27;</span>, body)</span><br><span class="line">    .<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Close&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.message-modal&#x27;</span>, subject).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.row.detail&#x27;</span>, subject)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;read-true&#x27;</span>)</span><br><span class="line">    .<span class="title function_">and</span>(<span class="string">&#x27;not.have.class&#x27;</span>, <span class="string">&#x27;read-false&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test runs pretty quickly, as you can see in this video</p><p><img src="../images/test-bash/send-test.gif" alt="Sending and checking the message test run"></p><p>Of course, it is not a problem - we can always hover over the test steps to see how the application&#39;s DOM looked at that particular moment.</p><p><img src="../images/test-bash/test-step.gif" alt="Time-traveling debugger shows the app at that test step"></p><p><strong>Tip:</strong> the demo application resets itself every 10 minutes. Thus it could potentially reset during the test run, causing the test to fail. To mitigate this, we can turn on Cypress <a href="https://on.cypress.io/test-retries">test retries</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;sends a message successfully&#x27;</span>, &#123; <span class="attr">retries</span>: <span class="number">2</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If the test fails, Cypress will mark it &quot;flaky&quot; and retry it up to 2 more times.</p><p>In the next blog posts, I will explain how to improve this first test to understand any potential test failures better.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/ui-to-api-to-app-actions/" title="Change E2E Tests From UI To API To App Actions">Change E2E Tests From UI To API To App Actions</a></li><li><a href="/blog/dependent-test/" title="Writing Tests That Depend On Other Tests">Writing Tests That Depend On Other Tests</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently I have decided to solve the &lt;a href=&quot;https://www.ministryoftesting.com/news/are-you-ready-to-take-the-test-bash-2022-challenges&quot;
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="tutorial" scheme="https://glebbahmutov.com/blog/tags/tutorial/"/>
    
  </entry>
  
  <entry>
    <title>Run Cypress Tests Using WebKit Browser</title>
    <link href="https://glebbahmutov.com/blog/cypress-webkit/"/>
    <id>https://glebbahmutov.com/blog/cypress-webkit/</id>
    <published>2022-09-27T04:00:00.000Z</published>
    <updated>2022-09-27T11:34:28.940Z</updated>
    
    <content type="html"><![CDATA[<p>This blog post shows how to run Cypress tests using WebKit browser (the browser engine behind Safari) on your local machine and on GitHub Actions Linux CI. We will avoid blindly running all tests across the browsers. Instead I prefer to execute all tests on one browser, and run just some tests on other browsers using <a href="https://github.com/cypress-io/cypress-grep">cypress-grep</a> test tags. For introduction to the Cypress test tags, read the blog post <a href="/blog/tag-tests/" title="How To Tag And Run End-to-End Tests">How To Tag And Run End-to-End Tests</a>.</p><blockquote class="pullquote"><p>üéÅ You can find the source code used for this blog post in the repo <a href="https://github.com/bahmutov/cypress-webkit-example">bahmutov&#x2F;cypress-webkit-example</a>.</p></blockquote><!-- toc --><ul><li><a href="#install-and-use-webkit-browser-with-cypress">Install and use WebKit browser with Cypress</a></li><li><a href="#run-tests-using-webkit-browser-using-github-actions">Run tests using WebKit browser using GitHub Actions</a></li><li><a href="#running-all-tests-using-chrome-and-webkit-and">Running all tests using Chrome and WebKit and ...</a></li><li><a href="#running-tagged-tests-on-webkit">Running tagged tests on WebKit</a></li><li><a href="#run-new-and-changed-specs-in-all-browsers">Run new and changed specs in all browsers</a></li><li><a href="#a-challenge-to-the-readers">A challenge to the readers</a></li><li><a href="#personal-note">Personal note</a></li></ul><!-- tocstop --><h2><span id="install-and-use-webkit-browser-with-cypress">Install and use WebKit browser with Cypress</span></h2><p>Following the <a href="https://www.cypress.io/blog/2022/09/13/cypress-10-8-experimental-run-tests-in-webkit/">Cypress v10.8.0 release announcement</a>, I have decided to check out the experimental WebKit support. I followed the <a href="https://on.cypress.io/launching-browsers">Launching Browsers guide</a> and installed the <code>playwright-webkit</code> dev dependency:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D playwright-webkit</span><br><span class="line">+ playwright-webkit@1.26.0</span><br></pre></td></tr></table></figure><p>In the <code>cypress.config.ts</code> file I enabled the WebKit experiment</p><figure class="highlight ts"><figcaption><span>cypress.config.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">experimentalWebKitSupport</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment">// the rest of the config settings</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Launch Cypress with <code>npx cypress open</code> and I see the WebKit browser in the list of detected browsers on my machine.</p><p><img src="../images/cypress-webkit/webkit.png" alt="WebKit browser shown inside Cypress list of browsers"></p><p>Click on the &quot;Start E2E Testing in WebKit&quot; button and watch the tests fly</p><p><img src="../images/cypress-webkit/webkit-test.png" alt="The spec finished running in WebKit browser"></p><p>Great, the tests run locally, now let&#39;s run them using <a href="/blog/trying-github-actions/" title="GitHub Actions">GitHub Actions</a>.</p><h2><span id="run-tests-using-webkit-browser-using-github-actions">Run tests using WebKit browser using GitHub Actions</span></h2><p>I will use <a href>Cypress GitHub Action</a> to execute tests on CI on Linux machine.</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">tests:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="comment"># Install NPM dependencies, cache them correctly</span></span><br><span class="line">      <span class="comment"># and run all Cypress tests</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># check the spec types</span></span><br><span class="line">          <span class="attr">build:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">lint</span></span><br><span class="line">          <span class="comment"># start the application before running Cypress</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">start-quiet</span></span><br><span class="line">          <span class="attr">browser:</span> <span class="string">webkit</span></span><br></pre></td></tr></table></figure><p>We push the code ... and it fails.</p><p><img src="../images/cypress-webkit/missing-dependencies.png" alt="WebKit browser requires additional Linux libraries to run"></p><p>No worries, to install those Linux libraries we can use the <code>playwright install-deps webkit</code> command. Let&#39;s split our workflow into installing dependencies (OS and NPM), and running Cypress tests.</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">tests:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="comment"># Install NPM dependencies, cache them correctly</span></span><br><span class="line">      <span class="comment"># and run all Cypress tests</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># install WebKit browser dependencies</span></span><br><span class="line">          <span class="attr">build:</span> <span class="string">npx</span> <span class="string">playwright</span> <span class="string">install-deps</span> <span class="string">webkit</span></span><br><span class="line">          <span class="attr">runTests:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># we have already installed everything</span></span><br><span class="line">          <span class="attr">install:</span> <span class="literal">false</span></span><br><span class="line">          <span class="comment"># check the spec types</span></span><br><span class="line">          <span class="attr">build:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">lint</span></span><br><span class="line">          <span class="comment"># start the application before running Cypress</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">start-quiet</span></span><br><span class="line">          <span class="attr">browser:</span> <span class="string">webkit</span></span><br></pre></td></tr></table></figure><p>Nice, the tests are running on CI using WebKit browser</p><p><img src="../images/cypress-webkit/deps.png" alt="The Cypress specs execute on GitHub Actions using WebKit browser"></p><p>But do we want to run all of them using WebKit?</p><p><strong>Tip:</strong> if you are using Windows or Mac machine on CI, you don&#39;t need to install any extra dependencies. For example, to run the same tests on Mac machine, use <code>runs-on: mac-latest</code></p><figure class="highlight yml"><figcaption><span>.github/workflows/ci-mac.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci-mac</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">tests:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">macos-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="comment"># Install NPM dependencies, cache them correctly</span></span><br><span class="line">      <span class="comment"># and run all Cypress tests</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># check the spec types</span></span><br><span class="line">          <span class="attr">build:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">lint</span></span><br><span class="line">          <span class="comment"># start the application before running Cypress</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">start-quiet</span></span><br><span class="line">          <span class="attr">browser:</span> <span class="string">webkit</span></span><br></pre></td></tr></table></figure><h2><span id="running-all-tests-using-chrome-and-webkit-and">Running all tests using Chrome and WebKit and ...</span></h2><p>We can run all our end-to-end tests in each supported browser: Chrome, Electron, Edge, Firefox, WebKit. For example, we can use a separate job for each browser:</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci-all-browsers.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span> <span class="string">all</span> <span class="string">browsers</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">tests-chrome:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="comment"># Install NPM dependencies, cache them correctly</span></span><br><span class="line">      <span class="comment"># and run all Cypress tests</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span> <span class="string">(Chrome)</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># check the spec types</span></span><br><span class="line">          <span class="attr">build:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">lint</span></span><br><span class="line">          <span class="comment"># start the application before running Cypress</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">start-quiet</span></span><br><span class="line">          <span class="attr">browser:</span> <span class="string">chrome</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tests-firefox:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="comment"># Install NPM dependencies, cache them correctly</span></span><br><span class="line">      <span class="comment"># and run all Cypress tests</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span> <span class="string">(Firefox)</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># check the spec types</span></span><br><span class="line">          <span class="attr">build:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">lint</span></span><br><span class="line">          <span class="comment"># start the application before running Cypress</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">start-quiet</span></span><br><span class="line">          <span class="attr">browser:</span> <span class="string">firefox</span></span><br><span class="line">          <span class="comment"># cy.dblclick did not work in headless FF mode</span></span><br><span class="line">          <span class="attr">headed:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tests-webkit:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="comment"># Install NPM dependencies, cache them correctly</span></span><br><span class="line">      <span class="comment"># and run all Cypress tests</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># install WebKit browser dependencies</span></span><br><span class="line">          <span class="attr">build:</span> <span class="string">npx</span> <span class="string">playwright</span> <span class="string">install-deps</span> <span class="string">webkit</span></span><br><span class="line">          <span class="attr">runTests:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span> <span class="string">(WebKit)</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># we have already installed everything</span></span><br><span class="line">          <span class="attr">install:</span> <span class="literal">false</span></span><br><span class="line">          <span class="comment"># check the spec types</span></span><br><span class="line">          <span class="attr">build:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">lint</span></span><br><span class="line">          <span class="comment"># start the application before running Cypress</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">start-quiet</span></span><br><span class="line">          <span class="attr">browser:</span> <span class="string">webkit</span></span><br></pre></td></tr></table></figure><p><img src="../images/cypress-webkit/all-browsers.png" alt="All tests pass on Chrome, Firefox, and WebKit"></p><p>All tests pass, but I am not sure what value we get from running all of them across all browsers for every commit, every pull request. We might instead run all of them on one browser (for example, Electron or Chrome), and run just sanity + custom tagged tests on Firefox and on WebKit.</p><h2><span id="running-tagged-tests-on-webkit">Running tagged tests on WebKit</span></h2><p>In my project I am using <code>cypress-grep</code> plugin to process suite and test tags and pick the tests to run. You can see all tests and tags by using <a href="https://github.com/bahmutov/find-cypress-specs">find-cypress-specs</a> utility:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">$ npx find-cypress-specs --names --tags</span><br><span class="line"></span><br><span class="line">cypress/e2e/adding-spec.ts (8 tests)</span><br><span class="line">‚îî‚îÄ TodoMVC</span><br><span class="line">  ‚îú‚îÄ New Todo [@adding]</span><br><span class="line">  ‚îÇ ‚îú‚îÄ should allow me to add todo items [@regression]</span><br><span class="line">  ‚îÇ ‚îú‚îÄ adds new items using a custom command</span><br><span class="line">  ‚îÇ ‚îú‚îÄ adds items [@sanity, @regression]</span><br><span class="line">  ‚îÇ ‚îú‚îÄ should clear text input field when an item is added [@regression]</span><br><span class="line">  ‚îÇ ‚îú‚îÄ should append new items to the bottom of the list</span><br><span class="line">  ‚îÇ ‚îú‚îÄ should trim text input [@regression]</span><br><span class="line">  ‚îÇ ‚îî‚îÄ should show #main and #footer when items added</span><br><span class="line">  ‚îî‚îÄ Adds items (spy example)</span><br><span class="line">    ‚îî‚îÄ calls inform</span><br><span class="line"></span><br><span class="line">cypress/e2e/cast-alias-spec.ts (1 test)</span><br><span class="line">‚îî‚îÄ casting an aliased value</span><br><span class="line">  ‚îî‚îÄ yields a number</span><br><span class="line"></span><br><span class="line">cypress/e2e/cast-fixture-spec.ts (1 test)</span><br><span class="line">‚îî‚îÄ Use JSON fixture</span><br><span class="line">  ‚îî‚îÄ adds todos following the fixture</span><br><span class="line"></span><br><span class="line">cypress/e2e/cast-task-spec.ts (1 test)</span><br><span class="line">‚îî‚îÄ yield data from cy.task</span><br><span class="line">  ‚îî‚îÄ gets a number</span><br><span class="line"></span><br><span class="line">cypress/e2e/clear-completed-spec.ts (3 tests)</span><br><span class="line">‚îî‚îÄ TodoMVC</span><br><span class="line">  ‚îî‚îÄ Clear completed button [@complete]</span><br><span class="line">    ‚îú‚îÄ should display the correct text</span><br><span class="line">    ‚îú‚îÄ should remove completed items when clicked [@sanity, @regression]</span><br><span class="line">    ‚îî‚îÄ should be hidden when there are no items that are completed [@regression]</span><br><span class="line"></span><br><span class="line">cypress/e2e/complete-all-spec.ts (3 tests)</span><br><span class="line">‚îî‚îÄ TodoMVC</span><br><span class="line">  ‚îî‚îÄ Mark all as completed [@complete]</span><br><span class="line">    ‚îú‚îÄ should allow me to mark all items as completed [@regression]</span><br><span class="line">    ‚îú‚îÄ should allow me to clear the complete state of all items [@sanity, @regression]</span><br><span class="line">    ‚îî‚îÄ complete all checkbox should update state when items are completed / cleared</span><br><span class="line"></span><br><span class="line">cypress/e2e/editing-spec.ts (5 tests)</span><br><span class="line">‚îî‚îÄ TodoMVC</span><br><span class="line">  ‚îî‚îÄ Editing [@editing]</span><br><span class="line">    ‚îú‚îÄ should hide other controls when editing</span><br><span class="line">    ‚îú‚îÄ should save edits on blur [@sanity]</span><br><span class="line">    ‚îú‚îÄ should trim entered text</span><br><span class="line">    ‚îú‚îÄ should remove the item if an empty text string was entered</span><br><span class="line">    ‚îî‚îÄ should cancel edits on escape</span><br><span class="line"></span><br><span class="line">cypress/e2e/fixture-spec.ts (1 test)</span><br><span class="line">‚îî‚îÄ adds todos following the fixture</span><br><span class="line"></span><br><span class="line">cypress/e2e/import-fixture-spec.ts (1 test)</span><br><span class="line">‚îî‚îÄ Import JSON fixture</span><br><span class="line">  ‚îî‚îÄ adds todos following the fixture</span><br><span class="line"></span><br><span class="line">cypress/e2e/item-spec.ts (3 tests)</span><br><span class="line">‚îî‚îÄ TodoMVC</span><br><span class="line">  ‚îî‚îÄ Item [@item]</span><br><span class="line">    ‚îú‚îÄ should allow me to mark items as complete [@sanity, @regression]</span><br><span class="line">    ‚îú‚îÄ should allow me to un-mark items as complete [@regression]</span><br><span class="line">    ‚îî‚îÄ should allow me to edit an item</span><br><span class="line"></span><br><span class="line">cypress/e2e/path-alias-spec.ts (1 test)</span><br><span class="line">‚îî‚îÄ Source path alias</span><br><span class="line">  ‚îî‚îÄ checks the application todos</span><br><span class="line"></span><br><span class="line">cypress/e2e/persistence-spec.ts (1 test)</span><br><span class="line">‚îî‚îÄ TodoMVC</span><br><span class="line">  ‚îî‚îÄ Persistence [@persistence]</span><br><span class="line">    ‚îî‚îÄ should persist its data [@sanity, @regression]</span><br><span class="line"></span><br><span class="line">cypress/e2e/routing-spec.ts (5 tests)</span><br><span class="line">‚îî‚îÄ TodoMVC</span><br><span class="line">  ‚îî‚îÄ Routing [@routing]</span><br><span class="line">    ‚îú‚îÄ should allow me to display active items [@regression]</span><br><span class="line">    ‚îú‚îÄ should respect the back button</span><br><span class="line">    ‚îú‚îÄ should allow me to display completed items [@sanity, @regression]</span><br><span class="line">    ‚îú‚îÄ should allow me to display all items [@regression]</span><br><span class="line">    ‚îî‚îÄ should highlight the currently applied filter</span><br><span class="line"></span><br><span class="line">cypress/e2e/spec.ts (3 tests)</span><br><span class="line">‚îî‚îÄ TodoMVC</span><br><span class="line">  ‚îú‚îÄ When page is initially opened [@regression]</span><br><span class="line">  ‚îÇ ‚îî‚îÄ should focus on the todo input field</span><br><span class="line">  ‚îú‚îÄ No Todos</span><br><span class="line">  ‚îÇ ‚îî‚îÄ should hide #main and #footer [@regression]</span><br><span class="line">  ‚îî‚îÄ Counter</span><br><span class="line">    ‚îî‚îÄ should display the current number of todo items [@sanity, @regression]</span><br><span class="line"></span><br><span class="line">cypress/e2e/using-fixture-spec.ts (1 test)</span><br><span class="line">‚îî‚îÄ Use JSON fixture</span><br><span class="line">  ‚îî‚îÄ adds todos following the fixture</span><br><span class="line"></span><br><span class="line">found 15 specs (38 tests)</span><br><span class="line"></span><br><span class="line">Tag           Tests</span><br><span class="line">------------  -----</span><br><span class="line">@adding       7</span><br><span class="line">@complete     6</span><br><span class="line">@editing      5</span><br><span class="line">@item         3</span><br><span class="line">@persistence  1</span><br><span class="line">@regression   17</span><br><span class="line">@routing      5</span><br><span class="line">@sanity       8</span><br></pre></td></tr></table></figure><p>We tag tests by feature and level (sanity, regression). We can add a new tag for the tests that we would like to run in WebKit browser in addition to the <code>@sanity</code> set of tests. For example, the editing spec might have a test we would like to always check using WebKit:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">context</span>(<span class="string">&#x27;Editing&#x27;</span>, &#123; <span class="attr">tags</span>: <span class="string">&#x27;@editing&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">beforeEach</span>(addDefaultTodos)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(</span><br><span class="line">    <span class="string">&#x27;should hide other controls when editing&#x27;</span>,</span><br><span class="line">    &#123; <span class="attr">tags</span>: <span class="string">&#x27;@webkit&#x27;</span> &#125;,</span><br><span class="line">    <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">allItems</span>()</span><br><span class="line">        .<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">        .<span class="title function_">eq</span>(<span class="number">1</span>)</span><br><span class="line">        .<span class="title function_">as</span>(<span class="string">&#x27;secondTodo&#x27;</span>)</span><br><span class="line">        .<span class="title function_">find</span>(<span class="string">&#x27;label&#x27;</span>)</span><br><span class="line">        .<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">        .<span class="title function_">dblclick</span>()</span><br><span class="line"></span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;@secondTodo&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.be.visible&#x27;</span>)</span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;@secondTodo&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;label&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.be.visible&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should save edits on blur&#x27;</span>, &#123; <span class="attr">tags</span>: <span class="string">&#x27;@sanity&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>To run all tests tagged <code>@sanity</code> plus all tests tagged <code>@webkit</code>, the CLI command could be:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx cypress run --env grepTags=&#x27;@sanity @webkit&#x27;</span><br></pre></td></tr></table></figure><p>Which for the editing spec runs and prints the names of the tests:</p><p><img src="../images/cypress-webkit/two.png" alt="Using test tags, we limited Cypress to run sanity and webkit tests"></p><p>Thus we can only add the test tag <code>@webkit</code> to the features that we found to be problematic or broken in WebKit. We run the sanity set of tests plus <code>@webkit</code> tests using WebKit on CI. Let&#39;s pass the <code>grepTags</code> to Cypress on CI to do so:</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci-tag-browsers.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span> <span class="string">tag</span> <span class="string">browsers</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">tests-all-chrome:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="comment"># Install NPM dependencies, cache them correctly</span></span><br><span class="line">      <span class="comment"># and run all Cypress tests</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span> <span class="string">(Chrome)</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># check the spec types</span></span><br><span class="line">          <span class="attr">build:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">lint</span></span><br><span class="line">          <span class="comment"># start the application before running Cypress</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">start-quiet</span></span><br><span class="line">          <span class="attr">browser:</span> <span class="string">chrome</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tests-sanity-firefox:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="comment"># Install NPM dependencies, cache them correctly</span></span><br><span class="line">      <span class="comment"># and run all Cypress tests</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span> <span class="string">(Firefox)</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># check the spec types</span></span><br><span class="line">          <span class="attr">build:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">lint</span></span><br><span class="line">          <span class="comment"># start the application before running Cypress</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">start-quiet</span></span><br><span class="line">          <span class="attr">browser:</span> <span class="string">firefox</span></span><br><span class="line">          <span class="comment"># cy.dblclick did not work in headless FF mode</span></span><br><span class="line">          <span class="attr">headed:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">grepTags=@sanity</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tests-sanity-plus-webkit:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="comment"># Install NPM dependencies, cache them correctly</span></span><br><span class="line">      <span class="comment"># and run all Cypress tests</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># install WebKit browser dependencies</span></span><br><span class="line">          <span class="attr">build:</span> <span class="string">npx</span> <span class="string">playwright</span> <span class="string">install-deps</span> <span class="string">webkit</span></span><br><span class="line">          <span class="attr">runTests:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span> <span class="string">(WebKit)</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># we have already installed everything</span></span><br><span class="line">          <span class="attr">install:</span> <span class="literal">false</span></span><br><span class="line">          <span class="comment"># check the spec types</span></span><br><span class="line">          <span class="attr">build:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">lint</span></span><br><span class="line">          <span class="comment"># start the application before running Cypress</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">start-quiet</span></span><br><span class="line">          <span class="attr">browser:</span> <span class="string">webkit</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">&#x27;grepTags=@sanity @webkit&#x27;</span></span><br></pre></td></tr></table></figure><p>You can find the finished CI runs at <a href="https://github.com/bahmutov/cypress-webkit-example/actions">bahmutov&#x2F;cypress-webkit-example&#x2F;actions</a>. Notice 38 tests ran in Chrome, 8 tests in Firefox, and 9 tests in WebKit (there are 8 sanity tests and 1 test tagged <code>@webkit</code>):</p><p><img src="../images/cypress-webkit/tagged.png" alt="Run all tests in one browser and target a smaller set of tests in other browsers"></p><h2><span id="run-new-and-changed-specs-in-all-browsers">Run new and changed specs in all browsers</span></h2><p>Running all existing specs in all browsers is wasteful and would not give you much new information. But if you adopt <a href="/blog/faster-ci-feedback/" title="my advice">my advice</a> for running any new and changed Cypress specs multiple times to ensure they are solid, you might want to run them in every browser of interest.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># from the branch &quot;FeatureA&quot;</span><br><span class="line">changedSpecs=$(npx find-cypress-specs --branch main --parent)</span><br><span class="line"># run changed and new specs in default browser</span><br><span class="line">npx cypress run --spec $&#123;changedSpecs&#125;</span><br><span class="line"># run changed and new specs in WebKit</span><br><span class="line">npx cypress run --spec $&#123;changedSpecs&#125; --browser webkit</span><br></pre></td></tr></table></figure><p>You can also run the changed specs in WebKit multiple times using the <code>burn</code> parameter supported by <code>cypress-grep</code>, see <a href="/blog/burning-tests/" title="Burning Tests with cypress-grep">Burning Tests with cypress-grep</a> blog post.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># run changed and new specs 5 times in a row in WebKit</span><br><span class="line">npx cypress run --spec $&#123;changedSpecs&#125; --browser webkit --env burn=5</span><br></pre></td></tr></table></figure><h2><span id="a-challenge-to-the-readers">A challenge to the readers</span></h2><p>I am curious if WebKit support really brings any additional benefits to E2E tests. I doubt that modern browsers are <em>that</em> different when running modern web applications, but who knows. If you find a real issue that was only discovered by running your Cypress tests in WebKit (or Firefox for that matter), let me know, I would like to see it.</p><h2><span id="personal-note">Personal note</span></h2><p>People who scream &quot;WebKit is not Safari, why Cypress calls it Safari browser support!!!&quot; are not worth arguing with. I am sure they all run their web end-to-end tests by controlling a real mobile Safari browser on a real iOS device. I will ignore any pointless tweets or posts on this particular question.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This blog post shows how to run Cypress tests using WebKit browser (the browser engine behind Safari) on your local machine and on GitHub
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Change E2E Tests From UI To API To App Actions</title>
    <link href="https://glebbahmutov.com/blog/ui-to-api-to-app-actions/"/>
    <id>https://glebbahmutov.com/blog/ui-to-api-to-app-actions/</id>
    <published>2022-09-24T04:00:00.000Z</published>
    <updated>2022-09-25T13:13:18.412Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s write a few TodoMVC end-to-end tests. Simple, right? I will start by testing adding a new todo. Because the backend is shared by all tests, and we are not resetting the data, I will use random number to ensure the right todo is created.</p><figure class="highlight ts"><figcaption><span>cypress/e2e/adding.cy.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;adds a new todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// let the application load the data from the server</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;loaded&#x27;</span>)</span><br><span class="line">  <span class="comment">// tip: use the test name + random number to</span></span><br><span class="line">  <span class="comment">// generate unique data</span></span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">`<span class="subst">$&#123;Cypress.currentTest.title&#125;</span> <span class="subst">$&#123;Cypress._.random(<span class="number">1e5</span>)&#125;</span>`</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.new-todo&#x27;</span>).<span class="title function_">type</span>(title + <span class="string">&#x27;&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo&#x27;</span>, title).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  <span class="comment">// confirm the todo is preserved on the server</span></span><br><span class="line">  cy.<span class="title function_">reload</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo&#x27;</span>, title).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/ui-to-api-to-app-actions/add-todo.png" alt="Adding a new todo test"></p><p>Super, the application is adding todo items.</p><blockquote class="pullquote"><p>üéÅ You can find the source code for this blog post in repo <a href="https://github.com/bahmutov/ui-to-api-to-app-actions">bahmutov&#x2F;ui-to-api-to-app-actions</a>.</p></blockquote><h2><span id="completing-items">Completing items</span></h2><p>Let&#39;s write a test to verify we can complete an item. Hmm, we need an item. We don&#39;t want to write a test <a href="/blog/dependent-test/" title="dependent on the previous test">dependent on the previous test</a>, so we copy the &quot;adds a new todo&quot; code into new test.</p><figure class="highlight ts"><figcaption><span>cypress/e2e/complete.cy.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;completes a new todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// let the application load the data from the server</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;loaded&#x27;</span>)</span><br><span class="line">  <span class="comment">// tip: use the test name + random number to</span></span><br><span class="line">  <span class="comment">// generate unique data</span></span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">`<span class="subst">$&#123;Cypress.currentTest.title&#125;</span> <span class="subst">$&#123;Cypress._.random(<span class="number">1e5</span>)&#125;</span>`</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.new-todo&#x27;</span>).<span class="title function_">type</span>(title + <span class="string">&#x27;&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo&#x27;</span>, title).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo&#x27;</span>, title).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes.</p><p><img src="../images/ui-to-api-to-app-actions/completes.png" alt="The test adds and completes a todo"></p><p>Hmm, our two tests have mostly the same code.</p><p><img src="../images/ui-to-api-to-app-actions/comparison.png" alt="The two tests are mostly the same"></p><h2><span id="ui-code-refactoring">UI code refactoring</span></h2><p>At this point, people start refactoring their test code to avoid code duplication. They create utility functions or page objects to interact with the &quot;TodoMVC&quot; page.</p><figure class="highlight ts"><figcaption><span>cypress/e2e/utils.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">TodoPage</span> = &#123;</span><br><span class="line">  <span class="title function_">visit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">// let the application load the data from the server</span></span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;loaded&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">addTodo</span>(<span class="params">title: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;.new-todo&#x27;</span>).<span class="title function_">type</span>(title + <span class="string">&#x27;&#123;enter&#125;&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo&#x27;</span>, title).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">hasTodo</span>(<span class="params">title: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="comment">// return the chainable object</span></span><br><span class="line">    <span class="comment">// to allow adding more assertions</span></span><br><span class="line">    <span class="keyword">return</span> cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo&#x27;</span>, title).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>cypress/e2e/adding.cy.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">TodoPage</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;adds a new todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">TodoPage</span>.<span class="title function_">visit</span>()</span><br><span class="line">  <span class="comment">// tip: use the test name + random number to</span></span><br><span class="line">  <span class="comment">// generate unique data</span></span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">`<span class="subst">$&#123;Cypress.currentTest.title&#125;</span> <span class="subst">$&#123;Cypress._.random(<span class="number">1e5</span>)&#125;</span>`</span></span><br><span class="line">  <span class="title class_">TodoPage</span>.<span class="title function_">addTodo</span>(title)</span><br><span class="line">  <span class="comment">// confirm the todo is preserved on the server</span></span><br><span class="line">  cy.<span class="title function_">reload</span>()</span><br><span class="line">  <span class="title class_">TodoPage</span>.<span class="title function_">hasTodo</span>(title)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>cypress/e2e/complete.cy.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">TodoPage</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;completes a new todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">TodoPage</span>.<span class="title function_">visit</span>()</span><br><span class="line">  <span class="comment">// tip: use the test name + random number to</span></span><br><span class="line">  <span class="comment">// generate unique data</span></span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">`<span class="subst">$&#123;Cypress.currentTest.title&#125;</span> <span class="subst">$&#123;Cypress._.random(<span class="number">1e5</span>)&#125;</span>`</span></span><br><span class="line">  <span class="title class_">TodoPage</span>.<span class="title function_">addTodo</span>(title)</span><br><span class="line">  <span class="title class_">TodoPage</span>.<span class="title function_">hasTodo</span>(title).<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  <span class="title class_">TodoPage</span>.<span class="title function_">hasTodo</span>(title).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We are creating a hierarchy of code to deal with the page instead of addressing the problem directly: we need a Todo item to complete it.</p><h2><span id="use-api">Use API</span></h2><p>Our frontend code is making REST API calls to load and create items. Let&#39;s confirm the calls. At the end of the &quot;adds a new todo&quot; test, let&#39;s spy on the <code>POST /todos</code> network call and confirm the request object the app sends.</p><figure class="highlight ts"><figcaption><span>cypress/e2e/api/adding.cy.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;adds a new todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// let the application load the data from the server</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;loaded&#x27;</span>)</span><br><span class="line">  <span class="comment">// tip: use the test name + random number to</span></span><br><span class="line">  <span class="comment">// generate unique data</span></span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">`<span class="subst">$&#123;Cypress.currentTest.title&#125;</span> <span class="subst">$&#123;Cypress._.random(<span class="number">1e5</span>)&#125;</span>`</span></span><br><span class="line">  <span class="comment">// spy on the API call the app is making to create a todo</span></span><br><span class="line">  cy.<span class="title function_">intercept</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;addTodo&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.new-todo&#x27;</span>).<span class="title function_">type</span>(title + <span class="string">&#x27;&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo&#x27;</span>, title).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  <span class="comment">// confirm the todo is preserved on the server</span></span><br><span class="line">  cy.<span class="title function_">reload</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo&#x27;</span>, title).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  <span class="comment">// confirm the API request</span></span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@addTodo&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;request.body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">      title,</span><br><span class="line">      <span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">and</span>(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/ui-to-api-to-app-actions/api-add.png" alt="The application is making an API call to add a todo"></p><p>Great, we have confirmed the main 2 properties of the API request. We can only confirm the property <code>id</code> exists on the sent object, since it is dynamic and we don&#39;t control its value. Here is how we can start the &quot;completes a new todo&quot; test - we will make the item ourselves by making a similar API call:</p><figure class="highlight ts"><figcaption><span>cypress/e2e/api/complete.cy.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;completes a new todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">String</span>(<span class="title class_">Cypress</span>.<span class="property">_</span>.<span class="title function_">random</span>(<span class="number">1e5</span>))</span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">`<span class="subst">$&#123;Cypress.currentTest.title&#125;</span> <span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>, &#123;</span><br><span class="line">    title,</span><br><span class="line">    <span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">    id,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// let the application load the data from the server</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;loaded&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo&#x27;</span>, title).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo&#x27;</span>, title).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/ui-to-api-to-app-actions/completed.png" alt="The application completes the item created via API call"></p><p>Boom, in a single call we got our item created and ready to be completed. We can then visit the page and interact with the item like a regular user. Let&#39;s write a test to delete an item. We need to create an item, and we again can use the <a href="https://on.cypress.io/request">cy.request</a> command to make the API call ourselves. To confirm the application deletes the item, let&#39;s fetch the items from the server after clicking the delete button.</p><figure class="highlight ts"><figcaption><span>cypress/e2e/api/delete.cy.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;deletes a todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">String</span>(<span class="title class_">Cypress</span>.<span class="property">_</span>.<span class="title function_">random</span>(<span class="number">1e5</span>))</span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">`<span class="subst">$&#123;Cypress.currentTest.title&#125;</span> <span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>, &#123;</span><br><span class="line">    title,</span><br><span class="line">    <span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">    id,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// let the application load the data from the server</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;loaded&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo&#x27;</span>, title)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    .<span class="title function_">find</span>(<span class="string">&#x27;.destroy&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo&#x27;</span>, title).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">expect</span>(<span class="title class_">Cypress</span>.<span class="property">_</span>.<span class="title function_">find</span>(list, &#123; id &#125;), <span class="string">&#x27;item with ID&#x27;</span>).<span class="property">to</span>.<span class="property">be</span>.<span class="property">undefined</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/ui-to-api-to-app-actions/delete-todo.png" alt="The application deletes the item created via API call"></p><p>At Mercari US we run <a href="https://slides.com/bahmutov/lots-of-e2e">a lot of end-to-end tests</a> and we almost exclusively use API calls to create data for the UI tests to use. We use <code>cy.request</code> command to <a href="/blog/request-graphql/" title="make GraphQL calls">make GraphQL calls</a>.</p><h2><span id="app-actions">App actions</span></h2><p>How do we know what API calls to make? We spied on the <code>POST /todos</code> network call and inspected the request body. But the request could be complicated. There could be several requests needed to set up data, and we would be adding more complexity to our tests. On the other hand, our application <em>knows</em> how to make a REST API call to create the new data item - it makes it itself when the user clicks the &quot;Enter&quot; key. Why can&#39;t our tests use the same code to avoid recreating it? After all, we have already confirmed the page UI is working correctly in the test &quot;adds a new todo&quot;, the next test can simply call the code executed when the user clicks the &quot;Enter&quot; key.</p><p>To do this, our application needs to let the test call its &quot;actions&quot;. In my application code I am setting the <code>app</code> variable on the <code>window</code> object when running inside Cypress test:</p><figure class="highlight js"><figcaption><span>todomvc/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">Cypress</span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">app</span> = app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>app</code> object is a Vue instance (but the implementation does not really matter, you can expose methods in any framework). Here is my page markup:</p><figure class="highlight html"><figcaption><span>todomvc/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;new-todo&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">autofocus</span></span></span><br><span class="line"><span class="tag">  <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">placeholder</span>=<span class="string">&quot;What needs to be done?&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">&quot;newTodo&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">input</span>=<span class="string">&quot;setNewTodo&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">keyup.enter</span>=<span class="string">&quot;addTodo&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><p>The page calls &quot;addTodo&quot; method when the user clicks &quot;Enter&quot;. The implementation of this method grabs the passed value and dispatches Vuex actions to create the item to the server and update the internal data store.</p><figure class="highlight js"><figcaption><span>todomvc/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">addTodo</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> e === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;setNewTodo&#x27;</span>, e)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;addTodo&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;clearNewTodo&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// do not allow adding empty todos</span></span><br><span class="line">  <span class="keyword">if</span> (!e.<span class="property">target</span>.<span class="property">value</span>.<span class="title function_">trim</span>()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Cannot add a blank todo&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  e.<span class="property">target</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;addTodo&#x27;</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;clearNewTodo&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ok, do we see this method from the browser? Yes - from the DevTools you can see <code>window.app</code> object with the method <code>addTodo</code></p><p><img src="../images/ui-to-api-to-app-actions/devtools.png" alt="You can access the window.app object from the browser DevTools"></p><p>Anything your application sets as a property of the <code>window</code> object can then be accessed using the <a href="https://on.cypress.io/window">cy.window</a> command. In the test below, we get the app&#39;s window after we visit the page, from the <code>window</code> object we grab the property <code>app</code> using <a href="https://on.cypress.io/its">cy.its</a> command, then invoke the <code>addTodo</code> method using <a href="https://on.cypress.io/invoke">cy.invoke</a> command.</p><figure class="highlight ts"><figcaption><span>cypress/e2e/app-actions/complete.cy.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;completes a new todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// let the application load the data from the server</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;loaded&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">String</span>(<span class="title class_">Cypress</span>.<span class="property">_</span>.<span class="title function_">random</span>(<span class="number">1e5</span>))</span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">`<span class="subst">$&#123;Cypress.currentTest.title&#125;</span> <span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">  <span class="comment">// execute app action from our test</span></span><br><span class="line">  cy.<span class="title function_">window</span>().<span class="title function_">its</span>(<span class="string">&#x27;app&#x27;</span>).<span class="title function_">invoke</span>(<span class="string">&#x27;addTodo&#x27;</span>, title)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo&#x27;</span>, title).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo&#x27;</span>, title).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The application&#39;s code does everything for us: we neither duplicate any logic, nor tie our specs to the implementation details.</p><p><img src="../images/ui-to-api-to-app-actions/app-completes.png" alt="Test uses application code to create a new item"></p><p>Similarly, we can create an item to delete it.</p><figure class="highlight ts"><figcaption><span>cypress/e2e/app-actions/delete.cy.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;deletes a todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// let the application load the data from the server</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;loaded&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">String</span>(<span class="title class_">Cypress</span>.<span class="property">_</span>.<span class="title function_">random</span>(<span class="number">1e5</span>))</span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">`<span class="subst">$&#123;Cypress.currentTest.title&#125;</span> <span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">  <span class="comment">// execute app action from our test</span></span><br><span class="line">  cy.<span class="title function_">window</span>().<span class="title function_">its</span>(<span class="string">&#x27;app&#x27;</span>).<span class="title function_">invoke</span>(<span class="string">&#x27;addTodo&#x27;</span>, title)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo&#x27;</span>, title)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    .<span class="title function_">find</span>(<span class="string">&#x27;.destroy&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo&#x27;</span>, title).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">request</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">expect</span>(<span class="title class_">Cypress</span>.<span class="property">_</span>.<span class="title function_">find</span>(list, &#123; id &#125;), <span class="string">&#x27;item with ID&#x27;</span>).<span class="property">to</span>.<span class="property">be</span>.<span class="property">undefined</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The lines calling the application&#39;s method are the key to the app action principle.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// execute app action from our test</span></span><br><span class="line">cy.<span class="title function_">window</span>().<span class="title function_">its</span>(<span class="string">&#x27;app&#x27;</span>).<span class="title function_">invoke</span>(<span class="string">&#x27;addTodo&#x27;</span>, title)</span><br></pre></td></tr></table></figure><p>If you understand how to apply this concept from Cypress end-to-end and component tests, you will never look back üòâ</p><h2><span id="code-coverage">Code coverage</span></h2><p>You might ask me: aren&#39;t we bypassing the application code when calling app actions? Yes we do - but only in some tests. We still exercise the &quot;normal&quot; application code that adds an item in the spec &quot;adding.cy.ts&quot;. We then bypass it in <em>other</em> specs that test other features. The combined code coverage when you run all specs together would show 100% code coverage.</p><h2><span id="bonus-1-use-cy-spok-with-network-requests">Bonus 1: Use cy-spok with network requests</span></h2><p>When spying on the API calls made by the application, we could only validate some properties of the request object, since the <code>id</code> is a dynamic random string.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// spy on the API call the app is making to create a todo</span></span><br><span class="line">cy.<span class="title function_">intercept</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;addTodo&#x27;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="comment">// confirm the API request</span></span><br><span class="line">cy.<span class="title function_">wait</span>(<span class="string">&#x27;@addTodo&#x27;</span>)</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;request.body&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">    title,</span><br><span class="line">    <span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">and</span>(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;id&#x27;</span>)</span><br></pre></td></tr></table></figure><p>I strongly recommend using <a href="https://github.com/bahmutov/cy-spok">cy-spok</a> plugin to validate complex objects. In our case, the ID is a 10-character string of digits.</p><p><img src="../images/ui-to-api-to-app-actions/id-string.png" alt="The todo item in the network request sent to the backend"></p><p>Let&#39;s validate the entire object.</p><figure class="highlight js"><figcaption><span>cypress/e2e/api/adding-cy-spok.cy.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// spy on the API call the app is making to create a todo</span></span><br><span class="line">cy.<span class="title function_">intercept</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/todos&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;addTodo&#x27;</span>)</span><br><span class="line">...</span><br><span class="line">cy.<span class="title function_">wait</span>(<span class="string">&#x27;@addTodo&#x27;</span>)</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;request.body&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(</span><br><span class="line">    <span class="title function_">spok</span>(&#123;</span><br><span class="line">      title,</span><br><span class="line">      <span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="comment">// id property should match this regular expression</span></span><br><span class="line">      <span class="attr">id</span>: spok.<span class="title function_">test</span>(<span class="regexp">/^\d&#123;10&#125;$/</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>The Command Log shows each property passing its validation</p><p><img src="../images/ui-to-api-to-app-actions/spok.png" alt="Confirming the Todo object using cy-spok"></p><p>For more <code>cy-spok</code> examples read the blog posts <a href="/blog/network-requests-with-cypress/" title="How To Check Network Requests Using Cypress">How To Check Network Requests Using Cypress</a> and <a href="/blog/restart-server/" title="Server Running Inside Cypress Plugin Process">Server Running Inside Cypress Plugin Process</a>.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/">Stop using Page Objects and Start using App Actions</a></li><li><a href="/blog/dependent-test/" title="Writing Tests That Depend On Other Tests">Writing Tests That Depend On Other Tests</a></li><li><a href="/blog/realworld-app-action/" title="How to write end-to-end test using app and api actions">How to write end-to-end test using app and api actions</a></li><li><a href="/blog/testing-angular-application-via-app-actions/" title="Testing Angular application via App Actions">Testing Angular application via App Actions</a></li><li>watch üì∫ <a href="https://www.youtube.com/watch?v=lRo8z2uVJEQ">What Are App Actions?</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s write a few TodoMVC end-to-end tests. Simple, right? I will start by testing adding a new todo. Because the backend is shared b
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Writing Tests That Depend On Other Tests</title>
    <link href="https://glebbahmutov.com/blog/dependent-test/"/>
    <id>https://glebbahmutov.com/blog/dependent-test/</id>
    <published>2022-09-20T04:00:00.000Z</published>
    <updated>2022-09-24T13:11:52.448Z</updated>
    
    <content type="html"><![CDATA[<p>Cypress <a href="https://on.cypress.io/best-practices">Best Practices</a> strongly advocates for keeping the tests independent of each other.</p><p><img src="../images/dependent-tests/anti-pattern.png" alt="Tests should be independent of each other"></p><p>I strongly agree with this advice. We should be able to run each test by itself and run the tests in any order. But sometimes it is simpler to have one test reuse state left by the previous test. In this blog post, I will show I solve this problem in somewhat ok way by using my plugins.</p><h2><span id="the-dependent-tests">The dependent tests</span></h2><p>Let&#39;s start with a spec file with two tests.</p><figure class="highlight js"><figcaption><span>cypress/e2e/spec1.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> projectName</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;creates item A&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;a very long test&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="number">1000</span>)</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;that creates project&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// how do we pass the data created in this test</span></span><br><span class="line">    <span class="comment">// to the next test?</span></span><br><span class="line">    projectName = <span class="string">`my random project <span class="subst">$&#123;Cypress._.random(<span class="number">1e4</span>)&#125;</span>`</span></span><br><span class="line">    cy.<span class="title function_">log</span>(projectName)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// this test MUST run only after the previous test runs</span></span><br><span class="line"><span class="comment">// you cannot run it by itself using &quot;it.only&quot;</span></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;continues working with data created in the previous test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">wrap</span>(projectName, &#123; <span class="attr">timeout</span>: <span class="number">0</span> &#125;).<span class="title function_">should</span>(<span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;project&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>üéÅ You can find the source code for this blog post in the repo <a href="https://github.com/bahmutov/cypress-dependent-test-example">bahmutov&#x2F;cypress-dependent-test-example</a>.</p></blockquote><p>If the tests run together, everything looks good. The second test gets the random piece of data from the first test.</p><p><img src="../images/dependent-tests/spec1.png" alt="The first solution using a local variable"></p><p>What if we want to run the second test by itself? Even after running the tests together, if we change <code>it</code> to <code>it.only</code> the spec reloads and fails - because the entire spec is evaluated again, and the variable definition <code>let projectName</code> is undefined by default.</p><figure class="highlight js"><figcaption><span>cypress/e2e/spec1.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> projectName</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;creates item A&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;a very long test&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="number">1000</span>)</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;that creates project&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// how do we pass the data created in this test</span></span><br><span class="line">    <span class="comment">// to the next test?</span></span><br><span class="line">    projectName = <span class="string">`my random project <span class="subst">$&#123;Cypress._.random(<span class="number">1e4</span>)&#125;</span>`</span></span><br><span class="line">    cy.<span class="title function_">log</span>(projectName)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// this test MUST run only after the previous test runs</span></span><br><span class="line"><span class="comment">// you cannot run it by itself using &quot;it.only&quot;</span></span><br><span class="line">it.<span class="title function_">only</span>(<span class="string">&#x27;continues working with data created in the previous test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">wrap</span>(projectName, &#123; <span class="attr">timeout</span>: <span class="number">0</span> &#125;).<span class="title function_">should</span>(<span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;project&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/dependent-tests/spec1-fails.png" alt="Cannot run the second test by itself"></p><p>How can we &quot;preserve&quot; the value <code>projectName</code>?</p><h2><span id="storing-value-in-cypressenv-object">Storing value in Cypress.env object</span></h2><p>We can try using <code>Cypress.env</code> object to store the <code>projectName</code> value. It does not solve the problem - Cypress v10 resets the <code>Cypress.env()</code> object back to the initial project settings before each spec.</p><figure class="highlight js"><figcaption><span>cypress/e2e/spec1-env.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;creates item A&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;a very long test&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="number">1000</span>)</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;that creates project&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> projectName = <span class="string">`my random project <span class="subst">$&#123;Cypress._.random(<span class="number">1e4</span>)&#125;</span>`</span></span><br><span class="line">    <span class="title class_">Cypress</span>.<span class="title function_">env</span>(<span class="string">&#x27;projectName&#x27;</span>, projectName)</span><br><span class="line">    cy.<span class="title function_">log</span>(projectName)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// this test MUST run only after the previous test runs</span></span><br><span class="line"><span class="comment">// you cannot run it by itself using &quot;it.only&quot;</span></span><br><span class="line">it.<span class="title function_">only</span>(<span class="string">&#x27;continues working with data created in the previous test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> projectName = <span class="title class_">Cypress</span>.<span class="title function_">env</span>(<span class="string">&#x27;projectName&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">wrap</span>(projectName, &#123; <span class="attr">timeout</span>: <span class="number">0</span> &#125;).<span class="title function_">should</span>(<span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;project&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/dependent-tests/spec1-env-fails.png" alt="Values stored in Cypress.env are wiped before the test run"></p><p>We need more permanent storage.</p><h2><span id="using-cypress-plugin-config">Using cypress-plugin-config</span></h2><p>To preserve the values across test re-runs I wrote plugin <a href="https://github.com/bahmutov/cypress-plugin-config">cypress-plugin-config</a>. It stores the values using <code>window.top.cypressPluginConfig</code> object. Cypress resets the iframes inside of the browser window (one is the spec iframe, another one is the application iframe), but the top window stays.</p><figure class="highlight js"><figcaption><span>cypress/e2e/spec2.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  getPluginConfigValue,</span><br><span class="line">  setPluginConfigValue,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-plugin-config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;creates item A&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;a very long test&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="number">1000</span>)</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;that creates project&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// how do we pass the data created in this test</span></span><br><span class="line">    <span class="comment">// to the next test?</span></span><br><span class="line">    <span class="keyword">const</span> projectName = <span class="string">`my random project <span class="subst">$&#123;Cypress._.random(<span class="number">1e4</span>)&#125;</span>`</span></span><br><span class="line">    cy.<span class="title function_">log</span>(projectName)</span><br><span class="line">    <span class="title function_">setPluginConfigValue</span>(<span class="string">&#x27;project name&#x27;</span>, projectName)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;continues working with data created in the previous test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> projectName = <span class="title function_">getPluginConfigValue</span>(<span class="string">&#x27;project name&#x27;</span>)</span><br><span class="line">  <span class="title function_">expect</span>(projectName, <span class="string">&#x27;got project name&#x27;</span>).<span class="property">to</span>.<span class="property">be</span>.<span class="title function_">a</span>(</span><br><span class="line">    <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;project name created by previous test&#x27;</span>,</span><br><span class="line">  )</span><br><span class="line">  cy.<span class="title function_">wrap</span>(projectName, &#123; <span class="attr">timeout</span>: <span class="number">0</span> &#125;).<span class="title function_">should</span>(<span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;project&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let&#39;s say the spec runs both tests. It passes and creates the &quot;project 7373&quot; data item.</p><p><img src="../images/dependent-tests/spec2.png" alt="The first project stores the generated data using cypress-plugin-config"></p><p>Great, now let&#39;s run the second test by itself using <code>it.only</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">it.<span class="title function_">only</span>(<span class="string">&#x27;continues working with data created in the previous test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> projectName = <span class="title function_">getPluginConfigValue</span>(<span class="string">&#x27;project name&#x27;</span>)</span><br><span class="line">  <span class="title function_">expect</span>(projectName, <span class="string">&#x27;got project name&#x27;</span>).<span class="property">to</span>.<span class="property">be</span>.<span class="title function_">a</span>(</span><br><span class="line">    <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;project name created by previous test&#x27;</span>,</span><br><span class="line">  )</span><br><span class="line">  cy.<span class="title function_">wrap</span>(projectName, &#123; <span class="attr">timeout</span>: <span class="number">0</span> &#125;).<span class="title function_">should</span>(<span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;project&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/dependent-tests/spec2-second-test.png" alt="The second test works by itself"></p><p>Great - the second test still runs even after the spec reloads. The piece of data generated by the first test is still there, retrieved by the function <code>getPluginConfigValue</code>.</p><p>Unfortunately, that is not the end of the story. While the data is there when the spec file changes on disk, or if the user clicks the &quot;Rerun tests&quot; button, if we do the hard browser reload using Cmd-R keys, the top window is reloaded, and our data is wiped away too.</p><p><img src="../images/dependent-tests/spec2-hard-reload.gif" alt="The data in the top window is wiped when we do hard reload"></p><p>We need an even more permanent data storage that survives the hard browser reload (or even the browser relaunch)</p><h2><span id="store-data-using-cypress-data-session">Store data using cypress-data-session</span></h2><p>Cypress tests run in the browser. But the initial process that starts the browser runs in Node and the specs can communicate with that process using the <a href="/blog/powerful-cy-task/" title="powerful cy.task">powerful cy.task</a> command. The Node process stays running and can store any data for us, see the video <a href="https://www.youtube.com/watch?v=wJ3VyGEDHA0">Pass Data From One Spec To Another</a> for example. I have implemented storing data on demand in my universal caching plugin <a href="https://github.com/bahmutov/cypress-data-session">cypress-data-session</a>. Here is how we can utilize it to solve our current problem when one test needs to pass some data to another test:</p><figure class="highlight js"><figcaption><span>cypress.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">e2e</span>: &#123;</span><br><span class="line">    <span class="title function_">setupNodeEvents</span>(<span class="params">on, config</span>) &#123;</span><br><span class="line">      <span class="comment">// https://github.com/bahmutov/cypress-data-session</span></span><br><span class="line">      <span class="built_in">require</span>(<span class="string">&#x27;cypress-data-session/src/plugin&#x27;</span>)(on, config)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/e2e/spec3.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-data-session&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;creates item A&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;a very long test&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="number">1000</span>)</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;that creates project&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// how do we pass the data created in this test</span></span><br><span class="line">    <span class="comment">// to the next test?</span></span><br><span class="line">    <span class="keyword">const</span> projectName = <span class="string">`my random project <span class="subst">$&#123;Cypress._.random(<span class="number">1e4</span>)&#125;</span>`</span></span><br><span class="line">    cy.<span class="title function_">log</span>(projectName)</span><br><span class="line">    cy.<span class="title function_">dataSession</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;project name&#x27;</span>,</span><br><span class="line">      <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> projectName</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">shareAcrossSpecs</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// this test after the previous test runs just once</span></span><br><span class="line"><span class="comment">// can run by itself using &quot;it.only&quot;</span></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;continues working with data created in the previous test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">dataSession</span>(<span class="string">&#x27;project name&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">projectName</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(projectName, <span class="string">&#x27;got project name&#x27;</span>).<span class="property">to</span>.<span class="property">be</span>.<span class="title function_">a</span>(</span><br><span class="line">      <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;project name created by previous test&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line">    cy.<span class="title function_">wrap</span>(projectName, &#123; <span class="attr">timeout</span>: <span class="number">0</span> &#125;).<span class="title function_">should</span>(<span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;project&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/dependent-tests/spec4.png" alt="Store data using cypress-data-session plugin"></p><p>Ok, let&#39;s see the second test by itself</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it.<span class="title function_">only</span>(<span class="string">&#x27;continues working with data created in the previous test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">dataSession</span>(<span class="string">&#x27;project name&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">projectName</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(projectName, <span class="string">&#x27;got project name&#x27;</span>).<span class="property">to</span>.<span class="property">be</span>.<span class="title function_">a</span>(</span><br><span class="line">      <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;project name created by previous test&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line">    cy.<span class="title function_">wrap</span>(projectName, &#123; <span class="attr">timeout</span>: <span class="number">0</span> &#125;).<span class="title function_">should</span>(<span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;project&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/dependent-tests/spec4-only.png" alt="The data is retrieved in the exclusive test"></p><p>Ok, let&#39;s do hard browser reload.</p><p><img src="../images/dependent-tests/spec4-hard-reload.gif" alt="The data is retrieved even after hard browser reload"></p><p>Nice - this is it.</p><h2><span id="a-better-way">A better way</span></h2><p>Is there a better way to write this spec to avoid dependency between the tests? Yes, you can even reuse the same data - but each test will create it if necessary:</p><figure class="highlight js"><figcaption><span>cypress/e2e/spec4.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-data-session&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createProjectIfNeeded</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// how do we pass the data created in this test</span></span><br><span class="line">  <span class="comment">// to the next test?</span></span><br><span class="line">  <span class="keyword">const</span> projectName = <span class="string">`my random project <span class="subst">$&#123;Cypress._.random(<span class="number">1e4</span>)&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> cy.<span class="title function_">dataSession</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;project name&#x27;</span>,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> projectName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">shareAcrossSpecs</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;creates item A&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;a very long test&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="number">1000</span>)</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;that creates project&#x27;</span>)</span><br><span class="line">  <span class="title function_">createProjectIfNeeded</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">projectName</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">log</span>(projectName)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// this test after the previous test runs just once</span></span><br><span class="line"><span class="comment">// can run by itself using &quot;it.only&quot;</span></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;continues working with data created in the previous test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">createProjectIfNeeded</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">projectName</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(projectName, <span class="string">&#x27;got project name&#x27;</span>).<span class="property">to</span>.<span class="property">be</span>.<span class="title function_">a</span>(</span><br><span class="line">      <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;project name created by previous test&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line">    cy.<span class="title function_">wrap</span>(projectName, &#123; <span class="attr">timeout</span>: <span class="number">0</span> &#125;).<span class="title function_">should</span>(<span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;project&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>When the tests run together, the project data is created by the first test and reused by the second one</p><p><img src="../images/dependent-tests/final-1.png" alt="The data is shared when the two tests run together"></p><p>If we run the second test exclusively, the same project is fetched from the plugins process automatically.</p><p><img src="../images/dependent-tests/final-2.png" alt="The data is fetched by the second test"></p><p>Finally, if we do hard reload, the data is loaded again from the plugins process.</p><p><img src="../images/dependent-tests/independent.gif" alt="The data survives hard browser reload"></p><p>The two tests are independent from each other, yet the data is cached.</p><h2><span id="see-also">See also</span></h2><p>A better approach to make independent fast tests is described in the post <a href="/blog/ui-to-api-to-app-actions/" title="Change E2E Tests From UI To API To App Actions">Change E2E Tests From UI To API To App Actions</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Cypress &lt;a href=&quot;https://on.cypress.io/best-practices&quot;&gt;Best Practices&lt;/a&gt; strongly advocates for keeping the tests independent of each ot
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress Component Testing vs Angular Test Harness</title>
    <link href="https://glebbahmutov.com/blog/cypress-component-testing-vs-angular-test-harness/"/>
    <id>https://glebbahmutov.com/blog/cypress-component-testing-vs-angular-test-harness/</id>
    <published>2022-09-15T04:00:00.000Z</published>
    <updated>2022-10-25T14:09:40.764Z</updated>
    
    <content type="html"><![CDATA[<p>Yesterday I have attended DevReach Boston conference. I got a chance to sit and listen to <a href="https://twitter.com/AlisaDuncan">Alisa Duncan</a> presentation &quot;<a href="https://componentharnessesftw.alisaduncan.dev/">Angular Component Test Harnesses FTW</a>&quot;. In her presentation Alisa compared Angular component tests using TestBed vs <a href="https://dev.to/this-is-angular/create-a-component-harness-for-your-tests-with-angular-cdk-46bg">TestBed + Test harnesses</a>. For comparison, here is the code for testing the navigation component.</p><p><img src="../images/ng-components/vs.png" alt="Plain TestBed vs Harness plus TestBed tests"></p><blockquote class="pullquote"><p>üéÅ You can find these tests in the repo <a href="https://github.com/bahmutov/component-harness-ftw-code">bahmutov&#x2F;component-harness-ftw-code</a> that I forked from <a href="https://github.com/alisaduncan/component-harness-ftw-code">alisaduncan&#x2F;component-harness-ftw-code</a>.</p></blockquote><p>Ok. Even with the harness, writing component tests is not going to be easy. Yes, the interactions with the component are abstracted away a little into the harness, but it is still <em>a lot</em> of boilerplate code just to get the component mounted. There must be a better way. Luckily, I just came from ng-conf conference, where I taught Cypress testing workshop, including the recently released <a href="https://www.cypress.io/blog/2022/08/15/cypress-10-5-0-introducing-angular-component-testing/">Cypress Angular Component Testing</a>. Can we try writing Cypress Ng component tests? The existing example tests for the Navigation component test the following:</p><ul><li>component mounts</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should create&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(component).<span class="title function_">toBeTruthy</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>component shows Home and Log In by default</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should show \&#x27;HOME\&#x27; and \&#x27;LOG IN\&#x27; when user is not signed in&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  (<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(signinServiceSpy, <span class="string">&#x27;isLoggedIn&#x27;</span>)?.<span class="property">get</span> <span class="keyword">as</span> jasmine.<span class="property">Spy</span>).<span class="property">and</span>.<span class="title function_">returnValue</span>(<span class="literal">false</span>);</span><br><span class="line">  fixture.<span class="title function_">detectChanges</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> buttonEls = <span class="keyword">await</span> loader.<span class="title function_">getAllHarnesses</span>(<span class="title class_">MatButtonHarness</span>);</span><br><span class="line">  <span class="title function_">expect</span>(buttonEls).<span class="title function_">toHaveSize</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> buttonTexts = <span class="keyword">await</span> <span class="title function_">parallel</span>(<span class="function">() =&gt;</span> buttonEls.<span class="title function_">map</span>(<span class="function"><span class="params">btn</span> =&gt;</span> btn.<span class="title function_">getText</span>()));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> expected = [<span class="string">&#x27;HOME&#x27;</span>, <span class="string">&#x27;LOG IN&#x27;</span>];</span><br><span class="line">  <span class="title function_">expect</span>(buttonTexts).<span class="title function_">toEqual</span>(expected);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>component shows three buttons when logged in</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should show \&#x27;HOME\&#x27;, \&#x27;PROFILE\&#x27;, and \&#x27;LOG OUT\&#x27; when user is signed in&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  (<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(signinServiceSpy, <span class="string">&#x27;isLoggedIn&#x27;</span>)?.<span class="property">get</span> <span class="keyword">as</span> jasmine.<span class="property">Spy</span>).<span class="property">and</span>.<span class="title function_">returnValue</span>(<span class="literal">true</span>);</span><br><span class="line">  fixture.<span class="title function_">detectChanges</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> buttonEls = <span class="keyword">await</span> loader.<span class="title function_">getAllHarnesses</span>(<span class="title class_">MatButtonHarness</span>);</span><br><span class="line">  <span class="title function_">expect</span>(buttonEls).<span class="title function_">toHaveSize</span>(<span class="number">3</span>);</span><br><span class="line">  <span class="keyword">const</span> buttonTexts = <span class="keyword">await</span> <span class="title function_">parallel</span>(<span class="function">() =&gt;</span> buttonEls.<span class="title function_">map</span>(<span class="function"><span class="params">btn</span> =&gt;</span> btn.<span class="title function_">getText</span>()));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> expected = [<span class="string">&#x27;HOME&#x27;</span>, <span class="string">&#x27;PROFILE&#x27;</span>, <span class="string">&#x27;LOG OUT&#x27;</span>];</span><br><span class="line">  <span class="title function_">expect</span>(buttonTexts).<span class="title function_">toEqual</span>(expected);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Let&#39;s do it.</p><h2><span id="installation">Installation</span></h2><p>The Angular project is using v14.1.0 which is automatically picked up by Cypress, so there is nothing to install. The config is pretty much the standard</p><figure class="highlight ts"><figcaption><span>cypress.config.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;cypress&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">component</span>: &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">framework</span>: <span class="string">&quot;angular&quot;</span>,</span><br><span class="line">      <span class="attr">bundler</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">specPattern</span>: <span class="string">&quot;**/*.cy.ts&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="../images/ng-components/desktop.png" alt="Cypress E2E and Component Test intro screen"></p><h2><span id="the-first-navigation-test">The first navigation test</span></h2><p>Let&#39;s see if we can mount the component following the <a href="https://docs.cypress.io/guides/component-testing/quickstart-angular">Cypress Angular documentation</a>. Right next to the component we can create a spec file. We will import the component itself and use the <code>cy.mount</code> command to put the component onto the page.</p><figure class="highlight ts"><figcaption><span>src/app/nav/nav.component.cy.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NavComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./nav.component&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;NavComponent&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should create and show the links&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">mount</span>(<span class="title class_">NavComponent</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Click on the new spec file and run the test.</p><p><img src="../images/ng-components/nav-test.png" alt="Cypress component test mounts the navigation component"></p><p>It cannot be this easy, can it?! Let&#39;s confirm the buttons &#x2F; links are visible.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">mount</span>(<span class="title class_">NavComponent</span>)</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;HOME&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;LOG IN&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/ng-components/visible.png" alt="The expected links are visible"></p><p>Notice that once the component is mounted, we can use the standard <a href="https://on.cypress.io/api">Cypress commands</a> to interact with the page. No special commands, abstractions, or adaptors needed.</p><p>Let&#39;s see if our component is working. Let&#39;s see what happens if we click on the &quot;Log in&quot; button. I added <code>.wait(1000)</code> just to make the GIF clearly show each step.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should create and show the links&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">mount</span>(<span class="title class_">NavComponent</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;HOME&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;LOG IN&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>).<span class="title function_">wait</span>(<span class="number">1000</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;HOME&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;PROFILE&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;LOG OUT&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>).<span class="title function_">wait</span>(<span class="number">1000</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;HOME&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;LOG IN&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Our component is working!</p><p><img src="../images/ng-components/nav-full-test.gif" alt="The Nav component is working as expected"></p><h2><span id="spying-on-the-signin-service">Spying on the Signin Service</span></h2><p>Ok, the original tests also confirmed the SigninService worked. Well, they just stubbed it, so not really confirming it. We want to check if the SigninService is receiving the expected calls from the Navigation component when we click on the &quot;Log in&quot; and &quot;Log out&quot; buttons.</p><figure class="highlight ts"><figcaption><span>src/app/nav/nav.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// templates and styles</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">NavComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> signinService: SigninService</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">login</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">signinService</span>.<span class="title function_">login</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">logout</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">signinService</span>.<span class="title function_">logout</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>src/app/signin.service.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  <span class="attr">providedIn</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SigninService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> isLoggedInState = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">get</span> <span class="title function_">isLoggedIn</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isLoggedInState</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">login</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isLoggedInState</span> = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">logout</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isLoggedInState</span> = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s update our test. The <code>NavComponent</code> gets an instance of the service via its props. The test can create an instance and pass it. The <code>cy.mount</code> command has options for that.</p><figure class="highlight ts"><figcaption><span>src/app/nav/nav.component.cy.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NavComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./nav.component&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SigninService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../signin.service&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;NavComponent&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should create and show the links&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> signinService = <span class="keyword">new</span> <span class="title class_">SigninService</span>()</span><br><span class="line">    cy.<span class="title function_">spy</span>(signinService, <span class="string">&#x27;login&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;login&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">spy</span>(signinService, <span class="string">&#x27;logout&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;logout&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">mount</span>(<span class="title class_">NavComponent</span>, &#123;</span><br><span class="line">      <span class="attr">componentProperties</span>: &#123;</span><br><span class="line">        signinService,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;HOME&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;LOG IN&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>).<span class="title function_">wait</span>(<span class="number">1000</span>).<span class="title function_">click</span>()</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;@login&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.been.called&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;HOME&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;PROFILE&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;LOG OUT&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>).<span class="title function_">wait</span>(<span class="number">1000</span>).<span class="title function_">click</span>()</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;@logout&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.been.called&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;HOME&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;LOG IN&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We can see the confirmed calls to the service in the Command Log left column.</p><p><img src="../images/ng-components/spies.png" alt="The full NavComponent test"></p><p>Ughh, this is seriously nice. Let&#39;s compare it to the original TestBed test variants.</p><p><img src="../images/ng-components/nav-tests.png" alt="TestBed vs Cypress component test"></p><h2><span id="email-subscription-component-tests">Email subscription component tests</span></h2><p>Maybe the navigation component is a weird case especially suitable for Cypress component testing. Let&#39;s look at the EmailSubscriptionComponent. The test harness mounts the component and lists a series of imports.</p><figure class="highlight ts"><figcaption><span>src/app/profile/email-subscription.component.with-harness.spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [ <span class="title class_">EmailSubscriptionComponent</span> ],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">NoopAnimationsModule</span>,</span><br><span class="line">    <span class="title class_">FormsModule</span>,</span><br><span class="line">    <span class="title class_">MatFormFieldModule</span>,</span><br><span class="line">    <span class="title class_">MatInputModule</span>,</span><br><span class="line">    <span class="title class_">MatSlideToggleModule</span>,</span><br><span class="line">    <span class="title class_">MatButtonModule</span>,</span><br><span class="line">    <span class="title class_">MatIconModule</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">compileComponents</span>();</span><br></pre></td></tr></table></figure><p>Ok, we can mount the component pretty much in the same way - Cypress component <code>cy.mount</code> for Angular is using the TestBed under the hood!</p><figure class="highlight ts"><figcaption><span>src/app/profile/email-subscription.cy.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;EmailSubscriptionComponent&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;works&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">mount</span>(<span class="title class_">EmailSubscriptionComponent</span>, &#123;</span><br><span class="line">      <span class="attr">imports</span>: [</span><br><span class="line">        <span class="title class_">NoopAnimationsModule</span>,</span><br><span class="line">        <span class="title class_">FormsModule</span>,</span><br><span class="line">        <span class="title class_">MatFormFieldModule</span>,</span><br><span class="line">        <span class="title class_">MatInputModule</span>,</span><br><span class="line">        <span class="title class_">MatSlideToggleModule</span>,</span><br><span class="line">        <span class="title class_">MatButtonModule</span>,</span><br><span class="line">        <span class="title class_">MatIconModule</span>,</span><br><span class="line">      ],</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We can see the component on the page. Hmm, not sure why the &quot;+&quot; icon is showing up as &quot;add&quot; but let&#39;s skip this problem for now.</p><p><img src="../images/ng-components/email.png" alt="Mounted EmailSubscription component"></p><p>Let&#39;s check the slider: it should be disabled until we enter an email.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">mount</span>(<span class="title class_">EmailSubscriptionComponent</span>, &#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">NoopAnimationsModule</span>,</span><br><span class="line">    <span class="title class_">FormsModule</span>,</span><br><span class="line">    <span class="title class_">MatFormFieldModule</span>,</span><br><span class="line">    <span class="title class_">MatInputModule</span>,</span><br><span class="line">    <span class="title class_">MatSlideToggleModule</span>,</span><br><span class="line">    <span class="title class_">MatButtonModule</span>,</span><br><span class="line">    <span class="title class_">MatIconModule</span>,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;input:checkbox[role=switch]&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.disabled&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;input[type=email]&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;email@email.email&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;input:checkbox[role=switch]&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.enabled&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/ng-components/email-enter.gif" alt="Enter an email and the toggle element is enabled"></p><p>Ok, the component also emits the entered email when the user clicks the &quot;add&quot; button. Does this work?</p><figure class="highlight ts"><figcaption><span>src/app/profile/email-subscription.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">EmailSubscriptionComponent</span> &#123;</span><br><span class="line">  <span class="meta">@Output</span>() <span class="attr">emailSubscription</span>: <span class="title class_">EventEmitter</span>&lt;<span class="title class_">EmailSubscription</span>&gt; = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>&lt;<span class="title class_">EmailSubscription</span>&gt;();</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">email</span>: <span class="built_in">string</span>|<span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">public</span> isSubscribed = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">onEmailSubscriptionChange</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">emailSubscription</span>.<span class="title function_">emit</span>(&#123;<span class="attr">email</span>: <span class="variable language_">this</span>.<span class="property">email</span>, <span class="attr">subscribe</span>: <span class="variable language_">this</span>.<span class="property">isSubscribed</span>&#125; <span class="keyword">as</span> <span class="title class_">EmailSubscription</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s see how this component is used in the application. It is used by the Profile component like this:</p><figure class="highlight html"><figcaption><span>src/app/profile/profile.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;my-9 bg-zinc-50 border border-slate-400 rounded-lg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-email-subscription</span> (<span class="attr">emailSubscription</span>)=<span class="string">&quot;onEmailSubscription($event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-email-subscription</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Ok, let&#39;s do the same thing. Instead of mounting the component instance, we will mount a template snippet</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;works&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;my-9 bg-zinc-50 border border-slate-400 rounded-lg&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;app-email-subscription (emailSubscription)=&quot;onEmailSubscription($event)&quot;&gt;&lt;/app-email-subscription&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  cy.<span class="title function_">mount</span>(template, &#123;</span><br><span class="line">    <span class="attr">declarations</span>: [<span class="title class_">EmailSubscriptionComponent</span>],</span><br><span class="line">    <span class="attr">imports</span>: [</span><br><span class="line">      <span class="title class_">NoopAnimationsModule</span>,</span><br><span class="line">      <span class="title class_">FormsModule</span>,</span><br><span class="line">      <span class="title class_">MatFormFieldModule</span>,</span><br><span class="line">      <span class="title class_">MatInputModule</span>,</span><br><span class="line">      <span class="title class_">MatSlideToggleModule</span>,</span><br><span class="line">      <span class="title class_">MatButtonModule</span>,</span><br><span class="line">      <span class="title class_">MatIconModule</span>,</span><br><span class="line">    ],</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;input:checkbox[role=switch]&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.disabled&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;input[type=email]&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;email@email.email&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;input:checkbox[role=switch]&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.enabled&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/ng-components/mount-template.png" alt="Mount template with the component"></p><p>But we still need to pass a function stub as <code>(emailSubscription)=&quot;onEmailSubscription($event)&quot;</code> for the component to call when the test clicks the &quot;Add&quot; button.</p><figure class="highlight ts"><figcaption><span>src/app/profile/email-subscription.cy.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">mount</span>(template, &#123;</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">EmailSubscriptionComponent</span>],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">NoopAnimationsModule</span>,</span><br><span class="line">    <span class="title class_">FormsModule</span>,</span><br><span class="line">    <span class="title class_">MatFormFieldModule</span>,</span><br><span class="line">    <span class="title class_">MatInputModule</span>,</span><br><span class="line">    <span class="title class_">MatSlideToggleModule</span>,</span><br><span class="line">    <span class="title class_">MatButtonModule</span>,</span><br><span class="line">    <span class="title class_">MatIconModule</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">componentProperties</span>: &#123;</span><br><span class="line">    <span class="attr">onEmailSubscription</span>: cy.<span class="title function_">stub</span>().<span class="title function_">as</span>(<span class="string">&#x27;onEmailSubscription&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> email = <span class="string">&#x27;email@email.email&#x27;</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;input:checkbox[role=switch]&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.disabled&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;input[type=email]&#x27;</span>).<span class="title function_">type</span>(email)</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;input:checkbox[role=switch]&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.enabled&#x27;</span>)</span><br><span class="line"><span class="comment">// needs a better selector</span></span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;add_box&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;@onEmailSubscription&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.calledOnceWithExactly&#x27;</span>, &#123;</span><br><span class="line">  email,</span><br><span class="line">  <span class="attr">subscribe</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We use <a href="https://on.cypress.io/stub">cy.stub</a> to create and pass a Sinon.js stub function as a prop to the component. After clicking on the Add button we confirm that stub was called with expected arguments.</p><p><img src="../images/ng-components/add.png" alt="The email subscribe prop was called correctly"></p><p>Let&#39;s compare this test to the original TestBed vs TestBed + test harness specs.</p><p><img src="../images/ng-components/email-tests.png" alt="The three tests checking the EmailSubscription component"></p><p>I know which one I like.</p><h2><span id="add-comment-component-test">Add comment component test</span></h2><p>Let&#39;s confirm the <code>AddCommentComponent</code> test works. First, the happy path test</p><figure class="highlight ts"><figcaption><span>src/app/shared/comment/add-comment.cy.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AddCommentComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./add-comment.component&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FormsModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;AddCommentComponent&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;submits a comment&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;app-add-comment (comment)=&quot;onCommented($event)&quot;&gt;&lt;/app-add-comment&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">    cy.<span class="title function_">mount</span>(template, &#123;</span><br><span class="line">      <span class="attr">declarations</span>: [<span class="title class_">AddCommentComponent</span>],</span><br><span class="line">      <span class="attr">imports</span>: [<span class="title class_">FormsModule</span>],</span><br><span class="line">      <span class="attr">componentProperties</span>: &#123;</span><br><span class="line">        <span class="attr">onCommented</span>: cy.<span class="title function_">stub</span>().<span class="title function_">as</span>(<span class="string">&#x27;onCommented&#x27;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;input[type=text]&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Add&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.disabled&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> comment = <span class="string">&#x27;TEST TEST&#x27;</span></span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;input[type=text]&#x27;</span>).<span class="title function_">type</span>(comment)</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Add&#x27;</span>)</span><br><span class="line">      <span class="comment">// cy.click only works if the button is no longer disabled</span></span><br><span class="line">      .<span class="title function_">click</span>()</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;@onCommented&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.calledOnceWithExactly&#x27;</span>, comment)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/ng-components/add-comment1.png" alt="The comment is added"></p><p>Next, the edge case - the user should not be able to add a comment with just space characters. Let&#39;s copy &#x2F; paste our previous test</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;does not allow empty comments&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;app-add-comment (comment)=&quot;onCommented($event)&quot;&gt;&lt;/app-add-comment&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  cy.<span class="title function_">mount</span>(template, &#123;</span><br><span class="line">    <span class="attr">declarations</span>: [<span class="title class_">AddCommentComponent</span>],</span><br><span class="line">    <span class="attr">imports</span>: [<span class="title class_">FormsModule</span>],</span><br><span class="line">    <span class="attr">componentProperties</span>: &#123;</span><br><span class="line">      <span class="attr">onCommented</span>: cy.<span class="title function_">stub</span>().<span class="title function_">as</span>(<span class="string">&#x27;onCommented&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> comment = <span class="string">&#x27;    &#x27;</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;input[type=text]&#x27;</span>).<span class="title function_">type</span>(comment)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Add&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@onCommented&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.calledOnceWithExactly&#x27;</span>, comment)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hmm, the test happily passes, the component simply accepts the comments with just spaces. It does not throw any errors.</p><p><img src="../images/ng-components/empty-comment.png" alt="An empty comment is added"></p><p>Hmm, the test harness example shows the following unhappy path test:</p><figure class="highlight ts"><figcaption><span>src/app/shared/comment/testing/add-comment-harness.spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should throw when an invalid comment is added&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> el = <span class="keyword">await</span> loader.<span class="title function_">getHarness</span>(<span class="title class_">AddCommentHarness</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">expectAsync</span>(el.<span class="title function_">setComment</span>(<span class="string">&#x27;     &#x27;</span>)).<span class="title function_">toBeRejectedWithError</span>(<span class="string">&#x27;Comment is invalid&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Where and how does it get &quot;Comment is invalid&quot; error? If we do a text search in the project, we find the custom component harness file</p><figure class="highlight ts"><figcaption><span>src/app/shared/comment/testing/add-comment-harness.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> <span class="title function_">setComment</span>(<span class="attr">comment</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (comment.<span class="title function_">trim</span>() === <span class="string">&#x27;&#x27;</span>) <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&#x27;Comment is invalid&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> input = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">_commentInput</span>();</span><br><span class="line">  <span class="keyword">await</span> input.<span class="title function_">clear</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> input.<span class="title function_">sendKeys</span>(comment);</span><br><span class="line">  <span class="keyword">await</span> input.<span class="title function_">setInputValue</span>(comment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So it is NOT the production component code checking if the comment is all blank spaces. It is our test code... Hmm. This is my argument against using PageObject in general. By adding logic here, we suddenly created a problem and unexpected behavior that is NOT part of the application. Keep it simple. If you use PageObjects, use them for simple consistent access to the page, and not for places to hide the bugs.</p><p>Ok, let&#39;s refactor our spec a little.</p><figure class="highlight ts"><figcaption><span>src/app/shared/comment/add-comment.cy.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AddCommentComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./add-comment.component&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FormsModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;AddCommentComponent&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;app-add-comment (comment)=&quot;onCommented($event)&quot;&gt;&lt;/app-add-comment&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">    cy.<span class="title function_">mount</span>(template, &#123;</span><br><span class="line">      <span class="attr">declarations</span>: [<span class="title class_">AddCommentComponent</span>],</span><br><span class="line">      <span class="attr">imports</span>: [<span class="title class_">FormsModule</span>],</span><br><span class="line">      <span class="attr">componentProperties</span>: &#123;</span><br><span class="line">        <span class="attr">onCommented</span>: cy.<span class="title function_">stub</span>().<span class="title function_">as</span>(<span class="string">&#x27;onCommented&#x27;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;submits a comment&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;input[type=text]&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Add&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.disabled&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> comment = <span class="string">&#x27;TEST TEST&#x27;</span></span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;input[type=text]&#x27;</span>).<span class="title function_">type</span>(comment)</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Add&#x27;</span>)</span><br><span class="line">      <span class="comment">// cy.click only works if the button is no longer disabled</span></span><br><span class="line">      .<span class="title function_">click</span>()</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;@onCommented&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.calledOnceWithExactly&#x27;</span>, comment)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;does not allow empty comments&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> comment = <span class="string">&#x27;    &#x27;</span></span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;input[type=text]&#x27;</span>).<span class="title function_">type</span>(comment)</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Add&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;@onCommented&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.calledOnceWithExactly&#x27;</span>, comment)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let&#39;s compare the code with the test harness variant (including the custom component test harness).</p><p><img src="../images/ng-components/add-comment-tests.png" alt="Test harness tests vs Cypress component tests for AddComment component"></p><p>Happy component testing!</p><blockquote class="pullquote"><p>üéì You can find a lot of component testing examples for different frameworks from Cypress team in the repo <a href="https://github.com/cypress-io/cypress-component-testing-examples">cypress-io&#x2F;cypress-component-testing-examples</a>.</p></blockquote><h2><span id="update-1-testing-input-component">Update 1: testing Input component</span></h2><p>One of the components uses the <code>@Input</code> to get an object from the outer component.</p><figure class="highlight ts"><figcaption><span>src/app/dramas/drama.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">Input</span>, <span class="title class_">OnInit</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Drama</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../models/dramas&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DramaComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>() <span class="keyword">public</span> drama!: <span class="title class_">Drama</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">  <span class="title function_">ngOnInit</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s write a test for it - let&#39;s mount a list of dramas</p><figure class="highlight ts"><figcaption><span>src/app/dramas/drama.component.cy.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DramaService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./../drama.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DramaComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./drama.component&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Drama</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../models/dramas&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dramaService = <span class="keyword">new</span> <span class="title class_">DramaService</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="attr">dramas</span>: <span class="title class_">Drama</span>[] = dramaService.<span class="title function_">getDramas</span>()</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows list of dramas&#x27;</span>, &#123; <span class="attr">viewportHeight</span>: <span class="number">1000</span>, <span class="attr">viewportWidth</span>: <span class="number">600</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> template =</span><br><span class="line">    <span class="string">&#x27;&lt;app-drama *ngFor=&quot;let d of dramas&quot; [drama]=&quot;d&quot;&gt;&lt;/app-drama&gt;&#x27;</span></span><br><span class="line">  cy.<span class="title function_">mount</span>(template, &#123;</span><br><span class="line">    <span class="attr">declarations</span>: [<span class="title class_">DramaComponent</span>],</span><br><span class="line">    <span class="attr">componentProperties</span>: &#123;</span><br><span class="line">      <span class="attr">dramas</span>: dramas,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The list shows up</p><p><img src="../images/ng-components/list-dramas.png" alt="Testing a list of dramas"></p><p>Or we can test a single Drama component and pass a single component property &quot;drama&quot;</p><figure class="highlight ts"><figcaption><span>src/app/dramas/drama.component.cy.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DramaService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./../drama.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DramaComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./drama.component&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Drama</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../models/dramas&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dramaService = <span class="keyword">new</span> <span class="title class_">DramaService</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="attr">dramas</span>: <span class="title class_">Drama</span>[] = dramaService.<span class="title function_">getDramas</span>()</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows one drama&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">mount</span>(<span class="title class_">DramaComponent</span>, &#123;</span><br><span class="line">    <span class="attr">componentProperties</span>: &#123;</span><br><span class="line">      <span class="attr">drama</span>: dramas[<span class="number">0</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/ng-components/one-drama.png" alt="Testing a single Drama component"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Yesterday I have attended DevReach Boston conference. I got a chance to sit and listen to &lt;a href=&quot;https://twitter.com/AlisaDuncan&quot;&gt;Alisa
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="angular" scheme="https://glebbahmutov.com/blog/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>Conditional Commands For Cypress</title>
    <link href="https://glebbahmutov.com/blog/cypress-if/"/>
    <id>https://glebbahmutov.com/blog/cypress-if/</id>
    <published>2022-09-06T04:00:00.000Z</published>
    <updated>2022-09-07T00:20:34.235Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s say you are visiting a page and sometimes the &quot;agree to the terms &amp; conditions&quot; checkbox is already checked. If the checkbox is unchecked, the Submit button is disabled. Here is a typical markup and application code:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;agreed&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>I agree to the terms &amp; conditions.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">disabled</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;agreed&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;submit&#x27;</span>).<span class="property">disabled</span> = !e.<span class="property">target</span>.<span class="property">checked</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">random</span>() &lt; <span class="number">0.5</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// in 50% of the cases, the checkbox is checked</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// in other cases, the checkbox is unchecked</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;agreed&#x27;</span>).<span class="property">checked</span> = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;submit&#x27;</span>).<span class="property">disabled</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>You are trying to write the test code to click the Submit button. If you assume the checkbox is checked, the code is this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;submits the terms forms&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;cypress/terms.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;button#submit&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Ughh, if the checkbox is clear, the test fails, because the <a href="https://on.cypress.io/click">cy.click</a> command refuses to click the disabled button by default.</p><p><img src="../images/cypress-if/fails1.png" alt="The button is disabled if the checkbox is unchecked"></p><p>Ok, fine. Let&#39;s check the &quot;agree&quot; checkbox using the <a href="https://on.cypress.io/click">cy.click</a> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;submits the terms forms&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;cypress/terms.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#agreed&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;button#submit&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-if/fails2.png" alt="The click flips the already checked agreed box and fails the test"></p><p>If we inspect the &quot;CLICK&quot; command DOM snapshot, we see the &quot;Agreed&quot; checkbox was already checked, and our click flipped it to unchecked state.</p><p><img src="../images/cypress-if/flip.png" alt="The click flipped the already checked input box"></p><h2><span id="conditional-logic-using-cythen">Conditional logic using cy.then</span></h2><p>We need a way to click the input box IF it is unchecked. One solution is to grab the input element and check ourselves using the <a href="https://on.cypress.io/then">cy.then</a> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;submits the terms forms&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;cypress/terms.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#agreed&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">$input</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ($input.<span class="title function_">is</span>(<span class="string">&#x27;:checked&#x27;</span>)) &#123;</span><br><span class="line">      cy.<span class="title function_">log</span>(<span class="string">&#x27;The user already agreed&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cy.<span class="title function_">wrap</span>($input).<span class="title function_">click</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;button#submit&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-if/jquery-if-else.png" alt="If / else logic depending on the element inside cy.then callback"></p><p>Ughh, the code is less clear. It requires knowing the jQuery selectors and commands, and using the <a href="https://on.cypress.io/wrap">cy.wrap</a> command to get th element back into a Cypress chain and use <code>.click()</code> command.</p><p><strong>Tip:</strong> for more examples of writing conditional commands, see my <a href="https://glebbahmutov.com/cypress-examples">Cypress examples site</a>.</p><h2><span id="conditional-logic-using-cypress-if">Conditional logic using cypress-if</span></h2><p>Instead of writing <code>.then</code> callbacks, you could use my <a href="https://github.com/bahmutov/cypress-if">cypress-if</a> plugin. This plugin lets you write <code>if / else</code> commands right inside a chain of commands without using  <code>cy.then</code> and <code>cy.wrap</code>. If you need an introduction to the plugin, watch this video below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/TVwU0OvrVUA" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Let&#39;s install the plugin as a dev dependency and simplify our test</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm i -D cypress-if</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or install the plugin using Yarn</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn add -D cypress-if</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-if&#x27;</span></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;submits the terms forms&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;cypress/terms.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#agreed&#x27;</span>)</span><br><span class="line">    .<span class="title function_">if</span>(<span class="string">&#x27;not.checked&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>()                         <span class="comment">// IF path</span></span><br><span class="line">    .<span class="title function_">else</span>()</span><br><span class="line">    .<span class="title function_">log</span>(<span class="string">&#x27;The user already agreed&#x27;</span>)  <span class="comment">// ELSE path</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;button#submit&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The child commands <code>.if()</code> and <code>.else()</code> come from the <code>cypress-if</code> plugin. You can use any Cypress assertion as the <code>.if(assertion)</code> condition; by default it is element existence. If the input button is unchecked, the test takes the &quot;IF&quot; path and skips the &quot;ELSE&quot; portion of the command chain:</p><p><img src="../images/cypress-if/if-path.png" alt="The input element was unchecked, the test clicked on it"></p><p>In other test runs, the input element was checked already, and the test took the &quot;ELSE&quot; portion, skipping the <code>.click()</code> command:</p><p><img src="../images/cypress-if/else-path.png" alt="The input element was checked already, the test logged a message but did not click"></p><p>You can have multiple commands in the &quot;IF&quot; and &quot;ELSE&quot; portions, you can use <code>cy.then</code>, <code>cy.within</code> commands, etc. See the plugin&#39;s README for more examples of writing conditional command chains.</p><blockquote class="pullquote"><p>üéì I have recorded several lessons showing the <code>cypress-if</code> plugin in action via hands-on exercises, check out my course <a href="https://cypress.tips/courses/cypress-plugins">Cypress Plugins</a>. There is even a free lesson about <code>cypres-if</code> specifically!</p></blockquote><h2><span id="warning-not-every-situation-requires-conditional-commands">Warning: not every situation requires conditional commands</span></h2><p>In our situation the best solution is to use the <a href="https://on.cypress.io/check">cy.check</a> command. This command does nothing if the checkbox is already checked!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;submits the terms forms&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;cypress/terms.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#agreed&#x27;</span>)</span><br><span class="line">    <span class="comment">// check the input box</span></span><br><span class="line">    <span class="comment">// if it is not checked already</span></span><br><span class="line">    <span class="comment">// https://on.cypress.io/check</span></span><br><span class="line">    .<span class="title function_">check</span>()</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;button#submit&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>For a similar lesson on using the built-in Cypress commands instead of conditional testing, see the free lesson &quot;Lesson d4: How to avoid conditional test logic&quot; in my course <a href="https://cypress.tips/courses/cypress-plugins">Cypress Plugins</a>. Deterministic tests are the best, use the conditional test commands only if you really cannot control the application in any other way.</p><h2><span id="bonus-1-conditional-type-into-the-input-field">Bonus 1: conditional type into the input field</span></h2><p>Sometimes, the test starts typing into the input element before the element is ready to process the input events. For example, this input element clears itself at the start and sometimes loses the first letters.</p><p><img src="../images/cypress-if/lost-letter.gif" alt="The input element loses the first entered character"></p><p>Using <code>cypress-if</code> we can clear the input element and type the word again.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;#name&#x27;</span>)</span><br><span class="line">  .<span class="title function_">type</span>(<span class="string">&#x27;Cypress&#x27;</span>, &#123; <span class="attr">delay</span>: <span class="number">20</span> &#125;)</span><br><span class="line">  .<span class="title function_">if</span>(<span class="string">&#x27;not.have.value&#x27;</span>, <span class="string">&#x27;Cypress&#x27;</span>)</span><br><span class="line">  .<span class="title function_">clear</span>()</span><br><span class="line">  .<span class="title function_">type</span>(<span class="string">&#x27;Cypress&#x27;</span>)</span><br><span class="line">  .<span class="title function_">else</span>()</span><br><span class="line">  .<span class="title function_">log</span>(<span class="string">&#x27;Input has expected value&#x27;</span>)</span><br><span class="line">  .<span class="title function_">finally</span>()</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;Cypress&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-if/repeat.gif" alt="The command repeats the cy.type command if the input element has the wrong value"></p><p>What if the input element again loses part of the entered text? You could probably look at the application design, or use the <a href="https://github.com/bahmutov/cypress-recurse">cypress-recurse</a> plugin that repeats Cypress commands until a certain condition is met.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s say you are visiting a page and sometimes the &amp;quot;agree to the terms &amp;amp; conditions&amp;quot; checkbox is already checked. If t
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Caching Cypress On CircleCI</title>
    <link href="https://glebbahmutov.com/blog/cypress-circleci-subfolders/"/>
    <id>https://glebbahmutov.com/blog/cypress-circleci-subfolders/</id>
    <published>2022-08-20T04:00:00.000Z</published>
    <updated>2022-09-07T20:35:28.987Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine a situation where you have a monorepo with the web application and the Cypress tests living in their separate subfolders. You might want to keep the tests slightly separate to avoid clashing dependencies and typings. In the example repo <a href="https://github.com/bahmutov/todo-app-subfolders">bahmutov&#x2F;todo-app-subfolders</a> I have put the frontend, the api, and the Cypress tests in their own 3 subfolders</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">repo/</span><br><span class="line">  api/</span><br><span class="line">    REST API running on port 3000</span><br><span class="line">    - package.json</span><br><span class="line">    - package-lock.json</span><br><span class="line">  frontend/</span><br><span class="line">    static site running on port 5555</span><br><span class="line">    - package.json</span><br><span class="line">    - package-lock.json</span><br><span class="line">  e2e/</span><br><span class="line">    Cypress tests for localhost:5555</span><br><span class="line">    - package.json</span><br><span class="line">    - package-lock.json</span><br><span class="line"></span><br><span class="line">  root has its own package.json</span><br><span class="line">  with basic scripts and Prettier</span><br><span class="line">  - package.json</span><br><span class="line">  - package-lock.json</span><br></pre></td></tr></table></figure><p>We need to run <code>npm install</code> in each subfolder when running locally. To test the app, we need to start the api, start the frontend, and then open Cypress. <strong>Tip:</strong> the project uses <a href="https://github.com/bahmutov/start-server-and-test">start-server-and-test</a> utility to do it all with a single <code>npm run dev</code> command.</p><p>How do we install the dependencies and run the tests on CircleCI? Normally, I would use <a href="https://github.com/cypress-io/circleci-orb">Cypress CircleCI Orb</a>, but in this case, it is simpler to do the caching on our own, since everything resides in different subfolders. Fear not, we can write a config file without a problem.</p><blockquote class="pullquote"><p>üéÅ If you want to see the completed config file, visit the <a href="https://github.com/bahmutov/todo-app-subfolders">bahmutov&#x2F;todo-app-subfolders</a> and check out its <a href="https://github.com/bahmutov/todo-app-subfolders/blob/main/.circleci/config.yml">.circleci&#x2F;config.yml</a> file.</p></blockquote><p><strong>Note:</strong> if Cypress folder is outside the frontend application folder, it might be hard to set up the <a href="https://on.cypress.io/component-testing">component testing</a>, as Cypress won&#39;t be able to find the webpack &#x2F; application settings to bundle the tests correctly. In my example, I only use the end-to-end tests, so that is not a concern.</p><h2><span id="install-the-dependencies">Install the dependencies</span></h2><p>First, things first. We need to install the dependencies in each subfolder. Let&#39;s write a simple &quot;install&quot; job</p><figure class="highlight yml"><figcaption><span>.circleci/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://circleci.com/docs/2.0/executor-intro/</span></span><br><span class="line"><span class="attr">executors:</span></span><br><span class="line">  <span class="attr">ci-image:</span></span><br><span class="line">    <span class="attr">docker:</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/cypress-docker-images</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">cypress/base:16.14.2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">commands:</span></span><br><span class="line">  <span class="attr">list-files:</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">List</span> <span class="string">files</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            echo &quot;current folder $(pwd)&quot;</span></span><br><span class="line"><span class="string">            echo &quot;&quot;</span></span><br><span class="line"><span class="string">            echo &quot;current folder contents&quot;</span></span><br><span class="line"><span class="string">            ls -l</span></span><br><span class="line"><span class="string">            echo &quot;&quot;</span></span><br><span class="line"><span class="string">            echo &quot;api folder&quot;</span></span><br><span class="line"><span class="string">            ls -l api</span></span><br><span class="line"><span class="string">            echo &quot;&quot;</span></span><br><span class="line"><span class="string">            echo &quot;frontend folder&quot;</span></span><br><span class="line"><span class="string">            ls -l frontend</span></span><br><span class="line"><span class="string">            echo &quot;&quot;</span></span><br><span class="line"><span class="string">            echo &quot;e2e folder&quot;</span></span><br><span class="line"><span class="string">            ls -l e2e</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">install-cypress:</span></span><br><span class="line">    <span class="attr">executor:</span> <span class="string">ci-image</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">checkout</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list-files</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Install</span> <span class="string">API</span> <span class="string">dependencies</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">npm</span> <span class="string">ci</span></span><br><span class="line">          <span class="attr">working_directory:</span> <span class="string">api</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Install</span> <span class="string">frontend</span> <span class="string">dependencies</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">npm</span> <span class="string">ci</span></span><br><span class="line">          <span class="attr">working_directory:</span> <span class="string">frontend</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Install</span> <span class="string">E2E</span> <span class="string">dependencies</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">npm</span> <span class="string">ci</span></span><br><span class="line">          <span class="attr">working_directory:</span> <span class="string">e2e</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Check</span> <span class="string">Cypress</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">npx</span> <span class="string">cypress</span> <span class="string">verify</span></span><br><span class="line">          <span class="attr">working_directory:</span> <span class="string">e2e</span></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line">  <span class="attr">build-and-test:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">install-cypress</span></span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> I love printing the local files using my custom <code>list-files</code> command, since you never know for sure how a workspace or a cache is restored and what files you get. In our case, it looks correct after checking out the files from the repo:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">current folder /root/project</span><br><span class="line"></span><br><span class="line">current folder contents</span><br><span class="line">total 40</span><br><span class="line">-rw-r--r-- 1 root root    96 Aug 19 19:57 README.md</span><br><span class="line">drwxr-xr-x 4 root root   129 Aug 19 19:57 api</span><br><span class="line">drwxr-xr-x 3 root root   112 Aug 19 19:57 e2e</span><br><span class="line">drwxr-xr-x 3 root root    65 Aug 19 19:57 frontend</span><br><span class="line">-rw-r--r-- 1 root root 31689 Aug 19 19:57 package-lock.json</span><br><span class="line">-rw-r--r-- 1 root root   587 Aug 19 19:57 package.json</span><br><span class="line"></span><br><span class="line">api folder</span><br><span class="line">total 128</span><br><span class="line">-rw-r--r-- 1 root root    434 Aug 19 19:57 README.md</span><br><span class="line">-rw-r--r-- 1 root root     18 Aug 19 19:57 data.json</span><br><span class="line">drwxr-xr-x 2 root root     23 Aug 19 19:57 img</span><br><span class="line">-rw-r--r-- 1 root root 117455 Aug 19 19:57 package-lock.json</span><br><span class="line">-rw-r--r-- 1 root root    962 Aug 19 19:57 package.json</span><br><span class="line">drwxr-xr-x 2 root root     31 Aug 19 19:57 scripts</span><br><span class="line"></span><br><span class="line">frontend folder</span><br><span class="line">total 68</span><br><span class="line">-rw-r--r-- 1 root root 64596 Aug 19 19:57 package-lock.json</span><br><span class="line">-rw-r--r-- 1 root root   349 Aug 19 19:57 package.json</span><br><span class="line">drwxr-xr-x 3 root root    72 Aug 19 19:57 public</span><br><span class="line"></span><br><span class="line">e2e folder</span><br><span class="line">total 128</span><br><span class="line">drwxr-xr-x 3 root root     17 Aug 19 19:57 cypress</span><br><span class="line">-rw-r--r-- 1 root root    250 Aug 19 19:57 cypress.config.js</span><br><span class="line">-rw-r--r-- 1 root root     90 Aug 19 19:57 jsconfig.json</span><br><span class="line">-rw-r--r-- 1 root root 118740 Aug 19 19:57 package-lock.json</span><br><span class="line">-rw-r--r-- 1 root root    305 Aug 19 19:57 package.json</span><br></pre></td></tr></table></figure><p>The job runs through its commands and installs the dependencies one by one.</p><p><img src="../images/cypress-circleci-subfolders/install.png" alt="Installing all dependencies one by one on CI"></p><p>Nice, it works. If we print the files again, we will see <code>api/node_modules</code>, <code>frontend/node_modules</code>, and <code>e2e/node_modules</code> folders. Running the next CI workflow has a problem; it has to reinstall everything from scratch, making it slow. Can we speed things up? What folders should we cache and restore to avoid reinstalling? Every time we run the <code>npm ci</code> command, it removes the local <code>node_modules</code> folder. Thus we cannot cache <code>api/node_modules</code>, <code>frontend/node_modules</code>, etc. We need to cache the downloaded NPM modules stored by default in the <code>~/.npm</code> folder. Plus we need to <a href="https://on.cypress.io/caching">cache Cypress binary</a>, which normally is in the <code>~/.cache/Cypress</code> folder.</p><p><strong>Tip:</strong> you can see where Cypress keeps its downloaded binary files using the <a href="https://on.cypress.io/command-line#cypress-cache-command"><code>npx cypress cache path</code></a> command. For example, on a Mac laptop:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npx cypress cache path</span><br><span class="line">/Users/glebbahmutov/Library/Caches/Cypress</span><br></pre></td></tr></table></figure><p><strong>Tip 2:</strong> you can show the basic Cypress information after installing it using the <a href="https://on.cypress.io/command-line#cypress-info"><code>npx cypress info</code></a>:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">info</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">npx</span> <span class="string">cypress</span> <span class="string">info</span></span><br><span class="line">    <span class="attr">working_directory:</span> <span class="string">e2e</span></span><br></pre></td></tr></table></figure><p><img src="../images/cypress-circleci-subfolders/info.png" alt="Printing Cypress information on CircleCI using the cypress info command"></p><p>The <code>npx cypress info</code> shows that Cypress binaries are cached inside <code>/root/.cache/Cypress</code> folder, which is the user home folder that can be accessed via <code>~/.cache/Cypress</code> in general. We need to cache this folder to skip re-downloading the Cypress binary file on each test flow run.</p><p>Thus we will cache the following folders:</p><ul><li><code>~/.npm</code> where NPM downloads modules during <code>npm i</code> and <code>npm ci</code> command before placing them into <code>node_modules</code></li><li><code>~/.cache/Cypress</code> where Cypress downloads and stores its binary file</li></ul><p><strong>Tip:</strong> if we are using Yarn, we could simply cache <code>~/.cache/yarn</code> and <code>~/.cache/Cypress</code> folders, or even <code>~/.cache</code>.</p><p>We will throw away the cached files if any of our lock files change.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">install-cypress:</span></span><br><span class="line">  <span class="attr">executor:</span> <span class="string">ci-image</span></span><br><span class="line">  <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">checkout</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">list-files</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">restore_cache:</span></span><br><span class="line">        <span class="attr">keys:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">deps-v1-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">&quot;api/package-lock.json&quot;</span> <span class="string">&#125;&#125;-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">&quot;e2e/package-lock.json&quot;</span> <span class="string">&#125;&#125;-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">&quot;frontend/package-lock.json&quot;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="comment"># a separate cache for Cypress binary</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">restore_cache:</span></span><br><span class="line">        <span class="attr">keys:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">cypress-v2-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">&quot;e2e/package-lock.json&quot;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">Install</span> <span class="string">API</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">npm</span> <span class="string">ci</span></span><br><span class="line">        <span class="attr">working_directory:</span> <span class="string">api</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">Install</span> <span class="string">frontend</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">npm</span> <span class="string">ci</span></span><br><span class="line">        <span class="attr">working_directory:</span> <span class="string">frontend</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">Install</span> <span class="string">E2E</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">npm</span> <span class="string">ci</span></span><br><span class="line">        <span class="attr">working_directory:</span> <span class="string">e2e</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">Check</span> <span class="string">Cypress</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">npx</span> <span class="string">cypress</span> <span class="string">verify</span></span><br><span class="line">        <span class="attr">working_directory:</span> <span class="string">e2e</span></span><br><span class="line">    <span class="comment"># save the downloaded NPM modules</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">save_cache:</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">deps-v1-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">&quot;api/package-lock.json&quot;</span> <span class="string">&#125;&#125;-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">&quot;e2e/package-lock.json&quot;</span> <span class="string">&#125;&#125;-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">&quot;frontend/package-lock.json&quot;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">~/.npm</span></span><br><span class="line">    <span class="comment"># save the installed Cypress binary</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">save_cache:</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">cypress-v2-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">&quot;e2e/package-lock.json&quot;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">~/.cache/Cypress</span></span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> you might want to split single NPM cache into 3 separate ones for each project. This way if one of the lock files changes, then no need to create a new cache. But in practice, that is not that important.</p><h2><span id="pass-the-installed-files">Pass the installed files</span></h2><p>Great, we have one CI job that installs the dependencies very quickly, because it restores the dependencies very quickly unless the package lock files have changed. How about running Cypress tests?</p><p>We could have run the end-to-end tests right there in the <code>install-cypress</code> job:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install-cypress job</span></span><br><span class="line"><span class="comment"># after saving the caches</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Start</span> <span class="string">API</span> <span class="string">üé¨</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">working_directory:</span> <span class="string">api</span></span><br><span class="line">    <span class="attr">background:</span> <span class="literal">true</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Start</span> <span class="string">frontend</span> <span class="string">üé¨</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">working_directory:</span> <span class="string">frontend</span></span><br><span class="line">    <span class="attr">background:</span> <span class="literal">true</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">üöÄ</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">npx</span> <span class="string">cypress</span> <span class="string">run</span></span><br><span class="line">    <span class="attr">working_directory:</span> <span class="string">e2e</span></span><br></pre></td></tr></table></figure><p>But as the number of tests grows, it makes more sense to run the tests in parallel using several test jobs. Those jobs should grab all files installed by the <code>install-cypress</code> job. Here is where we need to play a trick and combine <a href="https://circleci.com/blog/persisting-data-in-workflows-when-to-use-caching-artifacts-and-workspaces/">CircleCI workspaces with restoring a cache</a>. Let&#39;s revisit the end of the install-cypress job and extend it with <a href="https://circleci.com/docs/workspaces">persist_to_workspace</a> CircleCI command:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install-cypress job</span></span><br><span class="line"><span class="comment"># after saving the caches</span></span><br><span class="line"><span class="comment"># pass all the files (including the local node_modules)</span></span><br><span class="line"><span class="comment"># to the next job in the workflow</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">persist_to_workspace:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">paths:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><p>Any job that requires the <code>install-cypress</code> job will get its workspace, which is all files from the project&#39;s repo. The command <code>persist_to_workspace</code> runs inside the current project working directory <code>/root/project</code> and saves <em>all</em> repo files plus the installed <code>node_modules</code> subfolders already present. It won&#39;t save any outside files like <code>~/.cache/Cypress</code> though, so keep this in mind when restoring (attaching) the workspace in the job</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">test-cypress:</span></span><br><span class="line">  <span class="attr">executor:</span> <span class="string">ci-image</span></span><br><span class="line">  <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">attach_workspace:</span></span><br><span class="line">        <span class="attr">at:</span> <span class="string">&#x27;.&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">list-files</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">restore_cache:</span></span><br><span class="line">        <span class="attr">keys:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">cypress-v2-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">&quot;e2e/package-lock.json&quot;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">Check</span> <span class="string">Cypress</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">npx</span> <span class="string">cypress</span> <span class="string">verify</span></span><br><span class="line">        <span class="attr">working_directory:</span> <span class="string">e2e</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">Start</span> <span class="string">API</span> <span class="string">üé¨</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">        <span class="attr">working_directory:</span> <span class="string">api</span></span><br><span class="line">        <span class="attr">background:</span> <span class="literal">true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">Start</span> <span class="string">frontend</span> <span class="string">üé¨</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">        <span class="attr">working_directory:</span> <span class="string">frontend</span></span><br><span class="line">        <span class="attr">background:</span> <span class="literal">true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">üöÄ</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">npx</span> <span class="string">cypress</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">working_directory:</span> <span class="string">e2e</span></span><br><span class="line"></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line">  <span class="attr">build-and-test:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">install-cypress</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">test-cypress:</span></span><br><span class="line">          <span class="attr">requires:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">install-cypress</span></span><br></pre></td></tr></table></figure><p><img src="../images/cypress-circleci-subfolders/workflow.png" alt="CircleCI workflow with install and test jobs"></p><p>We are passing all <code>/root/project</code> files by attaching the previously saved workspace using the <code>attach_workspace</code> command. This restores the files in the <code>/root/project</code> folder (notice we don&#39;t have to use the <code>checkout</code> command at all)</p><p><img src="../images/cypress-circleci-subfolders/attached-workspace.png" alt="The workspace already includes installed NPM dependencies"></p><p>Then we restore the Cypress binary cache folder <code>~/.cache/Cypress</code> and we are good to go - all dependencies are there. The entire workspace and how it passes files from one job to another can be seen in the diagram below</p><p><img src="../images/cypress-circleci-subfolders/files.png" alt="How the files are passes from the install to the test job"></p><p>We start both services as background processes, run the tests, and CircleCI shuts down the running background processes when the job finishes.</p><p><img src="../images/cypress-circleci-subfolders/run-tests.png" alt="CircleCI completes the test-cypress job"></p><p><strong>Note:</strong> the command <code>persist_to_workspace</code> can only pass <em>local</em> files, and our <code>~/.cache</code> folder is outside. We could install Cypress in a different local subfolder using <code>CYPRESS_CACHE_FOLDER</code>, see <a href="https://on.cypress.io/caching">Cypress caching guide</a>. Then we could skip the <code>restore_cache</code> command.</p><h2><span id="parallel-testing">Parallel testing</span></h2><p>Ok, all is going well. Until we get more tests, and suddenly a single test job running the tests one after another takes too long.</p><p><img src="../images/cypress-circleci-subfolders/parallel1.png" alt="The workflow takes 13 minutes because of the tests"></p><p><img src="../images/cypress-circleci-subfolders/parallel2.png" alt="Each test file takes about 3 minutes and we have 4 of them"></p><p>We need to turn on <a href="https://on.cypress.io/parallelization">Cypress spec parallelization</a>, thus running specs in parallel in different test containers. No problem.</p><ul><li>start recording the tests on Cypress dashboard by creating a new project from Cypress Test Runner</li></ul><p><img src="../images/cypress-circleci-subfolders/record-project.png" alt="Create a new project for recording our tests"></p><ul><li>set the record key as CircleCI environment variable <code>CYPRESS_RECORD_KEY</code></li></ul><p><img src="../images/cypress-circleci-subfolders/set-record-key.png" alt="Keep the record key a secret on CircleCI"></p><ul><li>use N CircleCI test containers in parallel and run the tests in parallel</li></ul><figure class="highlight yml"><figcaption><span>.circleci/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">test-cypress:</span></span><br><span class="line">  <span class="attr">executor:</span> <span class="string">ci-image</span></span><br><span class="line">  <span class="attr">parallelism:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">attach_workspace:</span></span><br><span class="line">        <span class="attr">at:</span> <span class="string">&#x27;.&#x27;</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">üöÄ</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">npx</span> <span class="string">cypress</span> <span class="string">run</span> <span class="string">--record</span> <span class="string">--parallel</span></span><br><span class="line">        <span class="attr">working_directory:</span> <span class="string">e2e</span></span><br></pre></td></tr></table></figure><p>That&#39;s it - you only need the <code>parallelism</code> parameter and pass the <code>cypress run --record --parallel</code> arguments, and Cypress does the rest. Let&#39;s look at the new timings.</p><p><img src="../images/cypress-circleci-subfolders/parallel-time1.png" alt="The workflow duration dropped from 14 to 4 and a half minutes"></p><p><img src="../images/cypress-circleci-subfolders/parallel-time2.png" alt="CircleCI ran 5 test jobs in parallel"></p><p>Each test job grabbed the workspace created by the single install job and quickly restored the Cypress binary from cache. Then the tests were split by the Cypress Dashboard across the machines that joined the test run.</p><p><img src="../images/cypress-circleci-subfolders/dashboard.png" alt="All tests were executed in parallel"></p><p><strong>Note:</strong> CircleCI has tested using 5 jobs in parallel, but the Cypress Dashboard is showing specs split across 4 machines. Yup, by the time the 5th machine has started, the specs have already been allocated and the last machine had nothing to do, so it has finished quickly.</p><p><img src="../images/cypress-circleci-subfolders/finished1.png" alt="5 CircleCI machines executed the tests in parallel in test-cypress job"></p><p><img src="../images/cypress-circleci-subfolders/finished2.png" alt="The last machine joined late and had nothing to test"></p><h2><span id="bonus-1-wait-for-the-site-before-starting-the-tests">Bonus 1: Wait for the site before starting the tests</span></h2><p>Sometimes our frontend takes a while to start. We want to wait and check for the site to be up before running the tests. I always use the utility <a href="https://github.com/jeffbski/wait-on#readme">wait-on</a> for this (and sometimes I combine starting the server with waiting for it to start using <a href="https://github.com/bahmutov/start-server-and-test">start-server-and-test</a> CLI module). Let&#39;s add the <code>wait-on</code> as a dev dependency to the frontend package</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm i -D wait-on</span></span><br><span class="line">+ wait-on@6.0.1</span><br></pre></td></tr></table></figure><p>I will add a script to wait for the local port 5555 to respond to HTTP GET requests (by default <code>wait-on</code> sends <code>HTTP HEAD</code> command, which many bundlers ignore)</p><figure class="highlight json"><figcaption><span>frontend/package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;serve -p 5555 public&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;wait-for-app&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wait-on http-get://localhost:5555 --log --timeout 60000&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>On CircleCI we will run the <code>wait-for-app</code> command after starting the server but before running Cypress tests</p><figure class="highlight yml"><figcaption><span>.circleci/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Start</span> <span class="string">API</span> <span class="string">üé¨</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">working_directory:</span> <span class="string">api</span></span><br><span class="line">    <span class="attr">background:</span> <span class="literal">true</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Start</span> <span class="string">frontend</span> <span class="string">üé¨</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">npm</span> <span class="string">start</span> <span class="string">--</span> <span class="string">--no-clipboard</span></span><br><span class="line">    <span class="attr">working_directory:</span> <span class="string">frontend</span></span><br><span class="line">    <span class="attr">background:</span> <span class="literal">true</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Wait</span> <span class="string">for</span> <span class="string">frontend</span> <span class="string">‚è≥</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">wait-for-app</span></span><br><span class="line">    <span class="attr">working_directory:</span> <span class="string">frontend</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">üöÄ</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">npx</span> <span class="string">cypress</span> <span class="string">run</span> <span class="string">--record</span> <span class="string">--parallel</span></span><br><span class="line">    <span class="attr">working_directory:</span> <span class="string">e2e</span></span><br></pre></td></tr></table></figure><p>That&#39;s it - even if the server takes up to a minute to start responding to the external requests, it is ok. End-to-end tests will run only after the web app starts.</p><h2><span id="see-also">See also</span></h2><ul><li>the final <a href="https://github.com/bahmutov/todo-app-subfolders/blob/main/.circleci/config.yml">.circleci&#x2F;config.yml</a> in the repo <a href="https://github.com/bahmutov/todo-app-subfolders">bahmutov&#x2F;todo-app-subfolders</a></li><li>my other <a href="../tags/circle">blog posts about CircleCI</a></li><li><a href="/blog/do-not-let-cypress-cache-snowball/" title="Do Not Let Cypress Cache Snowball on CI">Do Not Let Cypress Cache Snowball on CI</a></li><li><a href="/blog/circle-ram-disk/" title="Start CircleCI Machines Faster by Using RAM Disk">Start CircleCI Machines Faster by Using RAM Disk</a></li><li><a href="/blog/split-spec/" title="Make Cypress Run Faster by Splitting Specs">Make Cypress Run Faster by Splitting Specs</a></li><li><a href="/blog/testing-timezones/" title="Testing Time Zones in Parallel">Testing Time Zones in Parallel</a></li><li><a href="https://on.cypress.io/ci">Cypress CI guide</a></li></ul><h2><span id="bonus-1-set-cypress-dashboard-tag-for-the-main-branch">Bonus 1: set Cypress Dashboard tag for the main branch</span></h2><p>Let&#39;s say we want to tag the test runs on Cypress Dashboard but only the ones made from the <code>main</code> branch. We can write a conditional command when running the tests</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">üöÄ</span></span><br><span class="line">    <span class="comment"># if the current branch is &quot;main&quot;,</span></span><br><span class="line">    <span class="comment"># tag this Cypress Dashboard recording with &quot;main&quot;</span></span><br><span class="line">    <span class="comment"># otherwise do not add any tags</span></span><br><span class="line">    <span class="comment"># https://circleci.com/docs/env-vars#built-in-environment-variables</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      if [ &quot;$&#123;CIRCLE_BRANCH&#125;&quot; == &quot;main&quot; ]; then</span></span><br><span class="line"><span class="string">        npx cypress run --record --parallel --tag &quot;main&quot;</span></span><br><span class="line"><span class="string">      else</span></span><br><span class="line"><span class="string">        npx cypress run --record --parallel</span></span><br><span class="line"><span class="string">      fi</span></span><br><span class="line"><span class="string"></span>    <span class="attr">working_directory:</span> <span class="string">e2e</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine a situation where you have a monorepo with the web application and the Cypress tests living in their separate subfolders. You mig
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="circle" scheme="https://glebbahmutov.com/blog/tags/circle/"/>
    
  </entry>
  
  <entry>
    <title>You Should Test More Using APIs</title>
    <link href="https://glebbahmutov.com/blog/test-using-apis/"/>
    <id>https://glebbahmutov.com/blog/test-using-apis/</id>
    <published>2022-08-15T04:00:00.000Z</published>
    <updated>2022-08-15T11:24:17.204Z</updated>
    
    <content type="html"><![CDATA[<p>If you are always using the page UI during end-to-end tests, your tests might be slower than needed. If such test fails, it might not tell you much about the root cause of the error. In this blog post, I will show a particular example of how to improve such tests using our <a href="https://www.mercari.com/">Mercari US</a> online marketplace tests as an example.</p><blockquote class="pullquote"><p>üéÅ This blog post uses an example application from the repo <a href="https://github.com/bahmutov/fastify-example">bahmutov&#x2F;fastify-example</a> and tests to write in <a href="https://github.com/bahmutov/fastify-example-tests">bahmutov&#x2F;fastify-example-tests</a>, see the &quot;bonus33.js&quot; spec file. These exercises and their solutions constitute the &quot;Bonus 33&quot; lesson in my <a href="https://cypress.tips/courses/network-testing">Cypress Network Testing Exercises</a> advanced course. Purchase the full course if you are interested in improving your understanding of advanced Cypress testing topics.</p></blockquote><h2><span id="the-application">The application</span></h2><p>Imagine a typical situation (at least for us at Mercari US):</p><ol><li>the user enters a new item via the web form</li><li>the new item is added to the internal database. It might take a few seconds to prepare the item&#39;s page</li><li>the new item&#39;s page is then scraped by the 3rd party search service. It might take up to a minute for the search results to include the new item.</li></ol><p>Here are the screenshots showing the stages of the user journey.</p><p><img src="../images/test-using-apis/item1.png" alt="The user enters the item details"></p><p><img src="../images/test-using-apis/item2.png" alt="The user submits the form"></p><p><img src="../images/test-using-apis/item3.png" alt="The system adds the item page. It can take up to a minute for the page to be ready"></p><p><img src="../images/test-using-apis/item4.png" alt="The user can try searching for the item. In this case, the item has not been scraped yet"></p><p><img src="../images/test-using-apis/item5.png" alt="The item has been scraped and is returned as the search result"></p><p>Here is diagram of what happens to the item as it is added</p><p><img src="../images/test-using-apis/fig1.png" alt="The added item makes its way through the services before the user can find it"></p><p>How would you write the search test to confirm that the new items are scraped correctly? Would you add the item, wait several minutes, and then use the search page? The static wait would have to be long enough to guarantee that even if the 3rd party services are at their slowest rate, by the time you search, the item has been scraped already. Alternatively, let&#39;s add the item, and then retry the search. If the item is not found, not big deal - we will wait N seconds, then try again. But what if the search returns nothing? Where is the problem? Was the item NOT added to our database? Was the item NOT scraped? A good test points at the root cause when it fails. Thus we will solve the same problem one more time by &quot;tracing&quot; the item&#39;s progress via cy.request calls.</p><h2><span id="beforeeach-hook">beforeEach hook</span></h2><p>Each test enters a new item using the following <code>beforeEach</code> hook</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEach</span>(<span class="keyword">function</span> <span class="title function_">enterItem</span>(<span class="params"></span>) &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/items.html&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">`Item <span class="subst">$&#123;Cypress._.random(<span class="number">1e6</span>)&#125;</span>`</span></span><br><span class="line">  <span class="keyword">const</span> price = <span class="title class_">Cypress</span>.<span class="property">_</span>.<span class="title function_">random</span>(<span class="number">1e3</span>)</span><br><span class="line">  <span class="comment">// save the item name under an alias</span></span><br><span class="line">  cy.<span class="title function_">wrap</span>(name).<span class="title function_">as</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">  <span class="comment">// save the price under an alias</span></span><br><span class="line">  cy.<span class="title function_">wrap</span>(price).<span class="title function_">as</span>(<span class="string">&#x27;price&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#item-name&#x27;</span>).<span class="title function_">type</span>(name)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#price&#x27;</span>).<span class="title function_">type</span>(<span class="title class_">String</span>(price))</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[value=Submit]&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">location</span>(<span class="string">&#x27;pathname&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/add-item&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;h3&#x27;</span>, name)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let&#39;s see how we can write the test itself to confirm the number is scraped and can be found by the user.</p><h2><span id="solution-1-static-wait">Solution 1: static wait</span></h2><p>Let&#39;s use only the user interface to test how the new item can be added.</p><p><img src="../images/test-using-apis/fig2.png" alt="Cypress test can enter the item, then find it using the item search page"></p><p>If it can take up to one minute for the item to be added to the database, and up to another minute for the search service to scrape it, then we can simply wait 2 minutes.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;adds a new item and then finds it (static wait)&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// wait for the item to be added to the database (one minute)</span></span><br><span class="line">  <span class="comment">// plus for the search service to scrape it (another minute)</span></span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="number">120_000</span>)</span><br><span class="line">  <span class="comment">// find the item</span></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/find-item.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#item-text&#x27;</span>).<span class="title function_">type</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;#output&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    .<span class="title function_">contains</span>(<span class="string">&#x27;.price&#x27;</span>, <span class="variable language_">this</span>.<span class="property">price</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/test-using-apis/slow.png" alt="The test finds the item after waiting 2 minutes"></p><p>In the <code>fastify-example</code> server logs I can see the following messages while the test is running</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adding item request &#123; name: &#x27;Item 625873&#x27;, price: 533 &#125;</span><br><span class="line">will add &#123; name: &#x27;Item 625873&#x27;, price: 533 &#125; to the database after 36 seconds</span><br><span class="line">...</span><br><span class="line">adding the item &#123; name: &#x27;Item 625873&#x27;, price: 533 &#125; to the database</span><br><span class="line">will scrape the item &#123; name: &#x27;Item 625873&#x27;, price: 533 &#125; after 31 seconds so it can be found</span><br></pre></td></tr></table></figure><p>On average, adding the new item to the database takes 30 seconds, and scraping it takes on average 30 seconds. One minute is the worst case scenario, thus our test spent unnecessarily waiting an entire minute...</p><h2><span id="solution-2-retry-the-search">Solution 2: retry the search</span></h2><p>Let&#39;s add the item and immediately go to the search page. We can try finding the item, and if it is not yet ready, we can try again after some delay. I will use the <a href="https://github.com/bahmutov/cypress-recurse">cypress-recurse</a> plugin to retry Cypress commands until a condition becomes true.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">it.<span class="title function_">only</span>(<span class="string">&#x27;adds a new item and then finds it (retries the search)&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/find-item.html&#x27;</span>)</span><br><span class="line">  <span class="title function_">recurse</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;#item-text&#x27;</span>).<span class="title function_">clear</span>().<span class="title function_">blur</span>()</span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;#item-text&#x27;</span>).<span class="title function_">type</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;&#123;enter&#125;&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> cy</span><br><span class="line">        .<span class="title function_">contains</span>(<span class="string">&#x27;#output&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">        .<span class="title function_">should</span>(<span class="title class_">Cypress</span>.<span class="property">_</span>.<span class="property">noop</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">$el</span>) =&gt;</span> $el.<span class="property">length</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">log</span>: <span class="string">&#x27;found the item&#x27;</span>,</span><br><span class="line">      <span class="attr">delay</span>: <span class="number">10_000</span>,</span><br><span class="line">      <span class="attr">timeout</span>: <span class="number">120_000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  )</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;#output&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    .<span class="title function_">contains</span>(<span class="string">&#x27;.price&#x27;</span>, <span class="variable language_">this</span>.<span class="property">price</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/test-using-apis/solution2.png" alt="The test retried the item search until it found the new item"></p><p>The server logs for this test show the following numbers:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adding item request &#123; name: &#x27;Item 740551&#x27;, price: 561 &#125;</span><br><span class="line">will add &#123; name: &#x27;Item 740551&#x27;, price: 561 &#125; to the database after 40 seconds</span><br><span class="line">...</span><br><span class="line">adding the item &#123; name: &#x27;Item 740551&#x27;, price: 561 &#125; to the database</span><br><span class="line">will scrape the item &#123; name: &#x27;Item 740551&#x27;, price: 561 &#125; after 29 seconds so it can be found</span><br></pre></td></tr></table></figure><p>The item was ready to be found after 70 seconds, and the test took 75 seconds, not bad!</p><h2><span id="solution-3-pinging-apis-to-trace-the-item39s-progress">Solution 3: pinging APIs to trace the item&#39;s progress</span></h2><p>The previous test is ok, yet it has a flaw. If the test fails, we have no idea <em>why</em> the item has not been found. Was it NOT added to our internal database? Was it NOT scraped correctly?</p><p><img src="../images/test-using-apis/fig3.png" alt="The test that fails at the end does not tell us which service failed"></p><p>Instead of retrying the search through the user interface, let&#39;s us poll the APIs to trace the item added to the database, and then ping the search API to check when the item has been scraped. Once we know the item has been scraped successfully, we can go to the search page and find it.</p><p><img src="../images/test-using-apis/fig4.png" alt="The test can ping the API for each service to confirm it has processed the item successfully"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;adds a new item and then finds it (retries the API calls)&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;**call the API until the item is returned**&#x27;</span>)</span><br><span class="line">  <span class="title function_">recurse</span>(</span><br><span class="line">    <span class="function">() =&gt;</span></span><br><span class="line">      cy.<span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/items/&#x27;</span> + <span class="built_in">encodeURIComponent</span>(<span class="variable language_">this</span>.<span class="property">name</span>),</span><br><span class="line">        <span class="attr">failOnStatusCode</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">    <span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="property">isOkStatusCode</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">log</span>: <span class="string">&#x27;‚úÖ item is in our database&#x27;</span>,</span><br><span class="line">      <span class="attr">delay</span>: <span class="number">10_000</span>,</span><br><span class="line">      <span class="attr">timeout</span>: <span class="number">60_000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  )</span><br><span class="line">  <span class="comment">// call the search API until it finds the item</span></span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;**call the search API**&#x27;</span>)</span><br><span class="line">  <span class="title function_">recurse</span>(</span><br><span class="line">    <span class="function">() =&gt;</span></span><br><span class="line">      cy.<span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/find-item/&#x27;</span> + <span class="built_in">encodeURIComponent</span>(<span class="variable language_">this</span>.<span class="property">name</span>),</span><br><span class="line">        <span class="attr">failOnStatusCode</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">    <span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="property">isOkStatusCode</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">log</span>: <span class="string">&#x27;‚úÖ item has been scraped&#x27;</span>,</span><br><span class="line">      <span class="attr">delay</span>: <span class="number">10_000</span>,</span><br><span class="line">      <span class="attr">timeout</span>: <span class="number">60_000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;**use the UI to find the scraped item**&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/find-item.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;#item-text&#x27;</span>).<span class="title function_">type</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  <span class="comment">// the item _must_ be found now</span></span><br><span class="line">  <span class="comment">// https://on.cypress.io/contains</span></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;#output&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    .<span class="title function_">contains</span>(<span class="string">&#x27;.price&#x27;</span>, <span class="variable language_">this</span>.<span class="property">price</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>This solution confirms the item is added to our internal application database by pinging the item&#39;s page (or some other API endpoint). Then it pings the search service to check when the item has been scraped. Only after we know the search service returns it, we visit the page and use the UI to confirm the search feature is working.</p><p><img src="../images/test-using-apis/solution3.png" alt="Test test using API calls to confirm each step of the item processing"></p><p>The server logs show that this aligns with our operations</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adding item request &#123; name: &#x27;Item 905905&#x27;, price: 682 &#125;</span><br><span class="line">will add &#123; name: &#x27;Item 905905&#x27;, price: 682 &#125; to the database after 35 seconds</span><br><span class="line">...</span><br><span class="line">adding the item &#123; name: &#x27;Item 905905&#x27;, price: 682 &#125; to the database</span><br><span class="line">will scrape the item &#123; name: &#x27;Item 905905&#x27;, price: 682 &#125; after 23 seconds so it can be found</span><br></pre></td></tr></table></figure><p>If the test had failed, we would know precisely which of the 3 parts was not working: the item addition, the search scraping, or the search UI.</p><p>If we run all three tests together using <code>cypress run</code>, we can see that test timing improvements.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">‚úì adds a new item and then finds it (static wait) (122050ms)</span><br><span class="line">‚úì adds a new item and then finds it (retries the search) (64312ms)</span><br><span class="line">‚úì adds a new item and then finds it (retries the API calls) (42017ms)</span><br><span class="line"></span><br><span class="line">3 passing (4m)</span><br></pre></td></tr></table></figure><p>The 3rd test faster than the 2nd in this particular run, but on average, it should take almost the same time. The 3rd solution has a big advantage other the other two solutions: if the test fails, it would immediately point at the culprit service.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="https://github.com/bahmutov/cy-api">@bahmutov&#x2F;cy-api plugin</a></li><li><a href="/blog/api-testing-with-sever-logs/" title="Black box API testing with server logs">Black box API testing with server logs</a></li><li><a href="/blog/cypress-request-and-cookies/" title="Cypress request and cookies">Cypress request and cookies</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you are always using the page UI during end-to-end tests, your tests might be slower than needed. If such test fails, it might not tel
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Test PDFs By Converting Them To HTML</title>
    <link href="https://glebbahmutov.com/blog/cypress-pdf/"/>
    <id>https://glebbahmutov.com/blog/cypress-pdf/</id>
    <published>2022-08-11T04:00:00.000Z</published>
    <updated>2022-08-10T20:59:53.653Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s take Filip Hric&#39;s <a href="https://filiphric.com/testing-pdf-file-with-cypress">Testing a PDF file with Cypress</a> and see if we can play with it a little. In his example, Filip downloads a PDF and reads it as text using <a href="https://gitlab.com/autokent/pdf-parse">pdf-parse</a> NPM utility. Then test then checks if the PDF text contains a sentence we expect it to have.</p><figure class="highlight ts"><figcaption><span>cypress/e2e/final.cy.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;downloads a simple PDF file&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;simple.pdf&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  <span class="comment">// wait for the file to be downloaded</span></span><br><span class="line">  cy.<span class="title function_">readFile</span>(<span class="string">&#x27;cypress/downloads/simple.pdf&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">task</span>(<span class="string">&#x27;readPdf&#x27;</span>, <span class="string">&#x27;cypress/downloads/simple.pdf&#x27;</span>)</span><br><span class="line">    <span class="comment">// yields the text from the PDF file</span></span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;contain&#x27;</span>, <span class="string">&#x27;Hello darkness my old friend&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-pdf/d1.png" alt="The PDF download and text confirmation test"></p><p>The <code>cy.task</code> calls the method defined in the <code>cypress.config.ts</code> file that calls the Node code to parse the PDF file already on disk</p><figure class="highlight ts"><figcaption><span>cypress.config.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> &#123; readPdf &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress/scripts/readPdf&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">e2e</span>: &#123;</span><br><span class="line">    <span class="attr">supportFile</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="title function_">setupNodeEvents</span>(<span class="params"></span></span><br><span class="line"><span class="params">      on: Cypress.PluginEvents,</span></span><br><span class="line"><span class="params">      config: Cypress.PluginConfigOptions,</span></span><br><span class="line"><span class="params">    </span>) &#123;</span><br><span class="line">      <span class="title function_">on</span>(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">        readPdf,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">baseUrl</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">    <span class="attr">trashAssetsBeforeRuns</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>cypress/scripts/readPdf.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> pdf = <span class="built_in">require</span>(<span class="string">&#x27;pdf-parse&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">readPdf</span> = (<span class="params">pathToPdf: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> pdfPath = path.<span class="title function_">resolve</span>(pathToPdf)</span><br><span class="line">    <span class="keyword">let</span> dataBuffer = fs.<span class="title function_">readFileSync</span>(pdfPath)</span><br><span class="line">    <span class="title function_">pdf</span>(dataBuffer).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">&#123; text &#125;</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(text)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>üéÅ I forked Filip&#39;s repo <a href="https://github.com/filiphric/testing-pdf-with-cypress">filiphric&#x2F;testing-pdf-with-cypress</a> into mine <a href="https://github.com/bahmutov/testing-pdf-with-cypress">bahmutov&#x2F;testing-pdf-with-cypress</a>. In this blog post I show my versions and tweaks to the original specs.</p></blockquote><h2><span id="pdf-to-html">PDF to HTML</span></h2><p>But what if we could <em>see</em> the PDF file? What if we could load PDF into the browser and then query it using &quot;normal&quot; Cypress commands like <code>cy.contains</code>, <code>cy.get</code>, etc? Wouldn&#39;t that be cool? We would see the PDF contents right in the screenshots and videos taken during the <code>cypress run</code>.</p><p>Let&#39;s do this!</p><p>Let&#39;s install <a href="https://github.com/shebinleo/pdf2html#readme">pdf2html</a> and call it via a task to get HTML of the PDF</p><figure class="highlight ts"><figcaption><span>cypress.config.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> &#123; readPdf &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress/scripts/readPdf&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123; promisify &#125; = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> pdf2html = <span class="built_in">require</span>(<span class="string">&#x27;pdf2html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> toHtml = <span class="title function_">promisify</span>(pdf2html.<span class="property">html</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">e2e</span>: &#123;</span><br><span class="line">    <span class="attr">supportFile</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="title function_">setupNodeEvents</span>(<span class="params"></span></span><br><span class="line"><span class="params">      on: Cypress.PluginEvents,</span></span><br><span class="line"><span class="params">      config: Cypress.PluginConfigOptions,</span></span><br><span class="line"><span class="params">    </span>) &#123;</span><br><span class="line">      <span class="title function_">on</span>(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">        readPdf,</span><br><span class="line">        toHtml,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">baseUrl</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">    <span class="attr">trashAssetsBeforeRuns</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Instead of the <code>readPdf</code> task, let&#39;s call <code>toHtml</code> task which should yield the PDF converted into HTML string</p><figure class="highlight ts"><figcaption><span>cypress/e2e/final.cy.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;converts downloaded PDF to HTML&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;simple.pdf&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// wait for the file to be downloaded</span></span><br><span class="line">  cy.<span class="title function_">readFile</span>(<span class="string">&#x27;cypress/downloads/simple.pdf&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">task</span>(<span class="string">&#x27;toHtml&#x27;</span>, <span class="string">&#x27;cypress/downloads/simple.pdf&#x27;</span>)</span><br><span class="line">    <span class="comment">// yields the HTML from the PDF file</span></span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;contain&#x27;</span>, <span class="string">&#x27;Hello darkness my old friend&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Ok, it works</p><p><img src="../images/cypress-pdf/d2.png" alt="The downloaded PDF was converted to HTML string"></p><p>Ughh, I don&#39;t like that long HTML string in the Cypress Command Log, even if the assertion is green. Is there any place better to drop the HTML in?</p><h2><span id="write-html-to-the-document">Write HTML to the document</span></h2><p>Just like I have done in my <a href="https://slides.com/bahmutov/email-testing">Full End-to-End Testing for Your HTML Email Workflows</a> presentation and the blog post <a href="https://www.cypress.io/blog/2021/05/11/testing-html-emails-using-cypress/">Testing HTML Emails using Cypress</a>, let&#39;s write the produced HTML string into the <code>document</code> object - then the browser will show it.</p><figure class="highlight ts"><figcaption><span>cypress/e2e/final.cy.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;converts downloaded PDF to HTML&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;simple.pdf&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// wait for the file to be downloaded</span></span><br><span class="line">  cy.<span class="title function_">readFile</span>(<span class="string">&#x27;cypress/downloads/simple.pdf&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">task</span>(<span class="string">&#x27;toHtml&#x27;</span>, <span class="string">&#x27;cypress/downloads/simple.pdf&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">html</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">document</span>(&#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;).<span class="title function_">invoke</span>(&#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;, <span class="string">&#x27;write&#x27;</span>, html)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Hello darkness my old friend&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-pdf/simple-pdf.gif" alt="The test converts PDF to HTML and writes it into the browser before testing its content"></p><p>Notice how we are using <code>cy.contains</code> command to confirm the downloaded &quot;simple.pdf&quot; file has the text we are looking for?</p><p><strong>Tip:</strong> if you want to see a small PDF better, change the viewport after writing the HTML string with <code>cy.viewport</code> command</p><h2><span id="complex-pdf">Complex PDF</span></h2><p>Let&#39;s click the &quot;complex.pdf&quot; and confirm its contents</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;tests the complex pdf&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;complex.pdf&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// wait for the file to be downloaded</span></span><br><span class="line">  cy.<span class="title function_">readFile</span>(<span class="string">&#x27;cypress/downloads/complex.pdf&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">task</span>(<span class="string">&#x27;toHtml&#x27;</span>, <span class="string">&#x27;cypress/downloads/complex.pdf&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">html</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">document</span>(&#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;).<span class="title function_">invoke</span>(&#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;, <span class="string">&#x27;write&#x27;</span>, html)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Total ‚Ç¨9 504,00&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-pdf/d3.png" alt="Testing the complex PDF contents"></p><p>Hmm, I promised to be able to see the PDF file and test it using Cypress commands, I haven&#39;t promised to make it pretty.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s take Filip Hric&amp;#39;s &lt;a href=&quot;https://filiphric.com/testing-pdf-file-with-cypress&quot;&gt;Testing a PDF file with Cypress&lt;/a&gt; and see
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Adding Dark Theme to Cypress.Tips Site</title>
    <link href="https://glebbahmutov.com/blog/dark-cypress-tips/"/>
    <id>https://glebbahmutov.com/blog/dark-cypress-tips/</id>
    <published>2022-08-01T04:00:00.000Z</published>
    <updated>2022-08-02T02:43:33.272Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I got an email thanking me for the work I have done for the Cypress community. The email also asked why I haven&#39;t added a dark color theme at my site <a href="https://cypress.tips/">cypress.tips</a> where I keep my <a href="https://cypress.tips/courses">courses</a>, <a href="https://cypress.tips/search">my search</a>, etc. Let&#39;s do this. I will define a second color theme using CSS variables, will use a React component to save and load the current color theme, and will write a Cypress end-to-end test to verify it all works together.</p><h2><span id="previous-work">Previous work</span></h2><p>I have already shown how to write Cypress tests for a React dark theme toggle component &quot;DarkMode&quot;. You can see the app and the tests in the repo <a href="https://github.com/bahmutov/react-dark-mode">bahmutov&#x2F;react-dark-mode</a>. See the tests in the short video I have recorded below:</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/VdyZonBAeLw" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Let&#39;s apply this component to my Next.js React application.</p><h2><span id="css-variables">CSS variables</span></h2><p>The first thing we want to do is to make sure all colors are defined using CSS variables. In my case, the default is the light color theme, the alternative will be using attribute selector &quot;data-theme&#x3D;dark&quot;. We define the text color, the background color, the link colors, and maybe a few other colors.</p><figure class="highlight css"><figcaption><span>globals.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="comment">/** light theme colors **/</span></span><br><span class="line">  <span class="attr">--color-back</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attr">--color-front</span>: <span class="number">#444</span>;</span><br><span class="line">  <span class="attr">--color-headings</span>: <span class="number">#222</span>;</span><br><span class="line">  <span class="attr">--color-link</span>: blue;</span><br><span class="line">  <span class="attr">--color-link-visited</span>: <span class="number">#0070f3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** dark theme colors **/</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="attr">--color-front</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attr">--color-back</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attr">--color-headings</span>: <span class="number">#29c15b</span>;</span><br><span class="line">  <span class="attr">--color-link</span>: <span class="number">#7acbe6</span>;</span><br><span class="line">  <span class="attr">--color-link-visited</span>: <span class="number">#7acbe6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using these variable names, we define actual CSS properties. For example, the body of the document needs the text color and the background colors.</p><figure class="highlight css"><figcaption><span>globals.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--color-front);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--color-back);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I am using CSS modules to give styles to my React components. For example, the Card components need to change their color on hover. Again, we use the root CSS variable names to make the current theme apply:</p><figure class="highlight css"><figcaption><span>Home.module.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.card</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.card</span><span class="selector-pseudo">:focus</span>,</span><br><span class="line"><span class="selector-class">.card</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--color-link);</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="built_in">var</span>(--color-link);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>While creating the color, I set the data attribute on the custom Next Document component to see it immediately</p><figure class="highlight jsx"><figcaption><span>_document.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Document</span>, &#123; <span class="title class_">Html</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next/document&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">MyDocument</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Document</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Html</span> <span class="attr">data-theme</span>=<span class="string">&quot;dark&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ...</span></span><br><span class="line"><span class="language-xml">    )</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><p>The page looks nice.</p><p><img src="../images/dark-cypress-tips/dark-theme.png" alt="The home page with dark theme colors"></p><p>I ran through the pages to make sure all components, like Footer use the color variables instead of local hard-coded colors.</p><h2><span id="other-css-tweaks">Other CSS tweaks</span></h2><p>I left the course thumbnail image as they were using the white backgrounds. The dark color theme showed the lack of margin between the course description and the thumbnail image.</p><p><img src="../images/dark-cypress-tips/needs-margin.png" alt="The thumbnail image needs left margin"></p><p>I have added a right margin to the text paragraph.</p><h2><span id="the-toggle-component">The toggle component</span></h2><p>Now let&#39;s copy the React DarkMode component from the repo <a href="https://github.com/alexeagleson/react-dark-mode">alexeagleson&#x2F;react-dark-mode</a>. It checks the <code>localStorage</code> to see if the user has previously selected a color them, with the fallback to the system theme preference.</p><figure class="highlight js"><figcaption><span>components/DarkMode.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./DarkMode.module.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DarkMode</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [theme, setTheme] = <span class="title function_">useState</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">window</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> storedTheme = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;theme&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> prefersDark =</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">matchMedia</span> &amp;&amp;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">matchMedia</span>(<span class="string">&#x27;(prefers-color-scheme: dark)&#x27;</span>).<span class="property">matches</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> defaultDark =</span><br><span class="line">        storedTheme === <span class="string">&#x27;dark&#x27;</span> || (storedTheme === <span class="literal">null</span> &amp;&amp; prefersDark)</span><br><span class="line">      <span class="keyword">return</span> defaultDark ? <span class="string">&#x27;dark&#x27;</span> : <span class="string">&#x27;light&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;light&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">window</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;theme&#x27;</span>, theme)</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-theme&#x27;</span>, theme)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [theme])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">toggleTheme</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;toggleTheme&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">checked</span>) &#123;</span><br><span class="line">      <span class="title function_">setTheme</span>(<span class="string">&#x27;dark&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">setTheme</span>(<span class="string">&#x27;light&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles[</span>&#x27;<span class="attr">toggle-theme-wrapper</span>&#x27;]&#125; <span class="attr">data-cy</span>=<span class="string">&quot;DarkMode&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>‚òÄÔ∏è<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">className</span>=<span class="string">&#123;styles[</span>&#x27;<span class="attr">toggle-theme</span>&#x27;]&#125; <span class="attr">htmlFor</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">id</span>=<span class="string">&quot;checkbox&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          // <span class="attr">NEW</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;toggleTheme&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">defaultChecked</span>=<span class="string">&#123;theme</span> === <span class="string">&#x27;dark&#x27;</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">styles.slider</span>&#125; $&#123;<span class="attr">styles.round</span>&#125;`&#125;&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>üåí<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DarkMode</span></span><br></pre></td></tr></table></figure><p>We have a little bit of styling for the component, and then insert it on the top page</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">DarkMode</span> <span class="keyword">from</span> <span class="string">&#x27;../components/DarkMode&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">DarkMode</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      ...</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we have the component that flips the &quot;data-&quot; attribute on the document to change the CSS variables and toggle the colors</p><p><img src="../images/dark-cypress-tips/dark-mode-toggle.gif" alt="Toggle the dark and light themes"></p><h2><span id="adding-cypress-tests">Adding Cypress tests</span></h2><p>Since I have extensively tested this component in the repo <a href="https://github.com/bahmutov/react-dark-mode">bahmutov&#x2F;react-dark-mode</a> I will write just one test to make sure the toggle changes the document&#39;s data attribute</p><figure class="highlight js"><figcaption><span>cypress/integration/dark-mode.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Dark mode toggle&#x27;</span>, &#123; <span class="attr">scrollBehavior</span>: <span class="string">&#x27;center&#x27;</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;changes the theme attribute&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">// Cypress clears the local storage</span></span><br><span class="line">    <span class="comment">// so the initial theme is &quot;light&quot;</span></span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;html&#x27;</span>)</span><br><span class="line">      .<span class="title function_">should</span>(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;data-theme&#x27;</span>, <span class="string">&#x27;light&#x27;</span>)</span><br><span class="line">      <span class="comment">// for test clarity</span></span><br><span class="line">      .<span class="title function_">wait</span>(<span class="number">1000</span>)</span><br><span class="line">    <span class="comment">// tip: take a screenshot to record on Cypress Dashboard</span></span><br><span class="line">    <span class="comment">// even without using visual testing, the image will remain</span></span><br><span class="line">    <span class="comment">// a good reminder what what the page looks in the light color theme</span></span><br><span class="line">    cy.<span class="title function_">screenshot</span>(<span class="string">&#x27;light&#x27;</span>, &#123; <span class="attr">overwrite</span>: <span class="literal">true</span>, <span class="attr">capture</span>: <span class="string">&#x27;runner&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-cy=DarkMode]&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;label&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;html&#x27;</span>)</span><br><span class="line">      .<span class="title function_">should</span>(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;data-theme&#x27;</span>, <span class="string">&#x27;dark&#x27;</span>)</span><br><span class="line">      <span class="comment">// for test clarity</span></span><br><span class="line">      .<span class="title function_">wait</span>(<span class="number">1000</span>)</span><br><span class="line">    cy.<span class="title function_">screenshot</span>(<span class="string">&#x27;dark&#x27;</span>, &#123; <span class="attr">overwrite</span>: <span class="literal">true</span>, <span class="attr">capture</span>: <span class="string">&#x27;runner&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line">    cy.<span class="title function_">reload</span>()</span><br><span class="line">    cy.<span class="title function_">log</span>(<span class="string">&#x27;**color theme remains dark**&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;html&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;data-theme&#x27;</span>, <span class="string">&#x27;dark&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-cy=DarkMode]&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;input:checkbox&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.checked&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">screenshot</span>(<span class="string">&#x27;dark-after-reload&#x27;</span>, &#123; <span class="attr">overwrite</span>: <span class="literal">true</span>, <span class="attr">capture</span>: <span class="string">&#x27;runner&#x27;</span> &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/dark-cypress-tips/dark-mode-test.gif" alt="Testing the Dark Mode toggle component"></p><p>You can find the final site at <a href="https://cypress.tips/">cypress.tips</a>. I should probably add the Dark Mode toggle to all pages, not just the home page.</p><h2><span id="client-side-rendering">Client-side rendering</span></h2><p>Next.js framework that I am using can render the pages on the server and then re-hydrate on the client (in the browser). Our DarkMode toggle component only makes sense when running in the browser. I looked up in <a href="https://stackoverflow.com/questions/58293542/next-js-warning-expected-server-html-to-contain-a-matching-a-in-div-how-to">this StackOverflow answer</a> how to dynamically render a component on the client-side.</p><figure class="highlight js"><figcaption><span>components/DarkModeToggle.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the actual DarkMode component</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>components/ClientOnly.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ClientOnly</span> = (<span class="params">&#123; children, ...delegated &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [hasMounted, setHasMounted] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setHasMounted</span>(<span class="literal">true</span>)</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!hasMounted) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> &#123;<span class="attr">...delegated</span>&#125;&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ClientOnly</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>components/DarkMode.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ClientOnly</span> <span class="keyword">from</span> <span class="string">&#x27;./ClientOnly&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">DarkModeToggle</span> <span class="keyword">from</span> <span class="string">&#x27;./DarkModeToggle&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// wrap the actual toggle in a component</span></span><br><span class="line"><span class="comment">// that only renders it if running in the browser</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DarkMode</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ClientOnly</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">DarkModeToggle</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ClientOnly</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DarkMode</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>pages/search.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">DarkMode</span> <span class="keyword">from</span> <span class="string">&#x27;../components/DarkMode.js&#x27;</span></span><br><span class="line">render &lt;<span class="title class_">DarkMode</span> /&gt;</span><br></pre></td></tr></table></figure><h2><span id="aria-label">Aria label</span></h2><p>I have added the toggle Aria labels for a11y. I made them explain what the toggle will do when clicked.</p><figure class="highlight js"><figcaption><span>components/DarkModeToggle.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> label = theme === <span class="string">&#x27;dark&#x27;</span> ? <span class="string">&#x27;Activate light mode&#x27;</span> : <span class="string">&#x27;Activate dark mode&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles[</span>&#x27;<span class="attr">toggle-theme-wrapper</span>&#x27;]&#125; <span class="attr">data-cy</span>=<span class="string">&quot;DarkMode&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>‚òÄÔ∏è<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">label</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">className</span>=<span class="string">&#123;styles[</span>&#x27;<span class="attr">toggle-theme</span>&#x27;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">htmlFor</span>=<span class="string">&quot;checkbox&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">title</span>=<span class="string">&#123;label&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">id</span>=<span class="string">&quot;checkbox&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">aria-label</span>=<span class="string">&#123;label&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;toggleTheme&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">defaultChecked</span>=<span class="string">&#123;theme</span> === <span class="string">&#x27;dark&#x27;</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">styles.slider</span>&#125; $&#123;<span class="attr">styles.round</span>&#125;`&#125;&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>üåí<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>The test uses the aria labels instead of <code>input:checkbox</code>, for example</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-cy=DarkMode]&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  .<span class="title function_">find</span>(<span class="string">&#x27;input[aria-label=&quot;Activate dark mode&quot;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-cy=DarkMode]&#x27;</span>)</span><br><span class="line">  .<span class="title function_">find</span>(<span class="string">&#x27;label&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;Activate dark mode&#x27;</span>)</span><br><span class="line">  .<span class="title function_">click</span>()</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;html&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;data-theme&#x27;</span>, <span class="string">&#x27;dark&#x27;</span>)</span><br><span class="line">  <span class="comment">// for test clarity</span></span><br><span class="line">  .<span class="title function_">wait</span>(<span class="number">1000</span>)</span><br><span class="line">cy.<span class="title function_">screenshot</span>(<span class="string">&#x27;dark&#x27;</span>, &#123; <span class="attr">overwrite</span>: <span class="literal">true</span>, <span class="attr">capture</span>: <span class="string">&#x27;runner&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><h2><span id="see-also">See also</span></h2><ul><li>You can emulate the system <code>prefers-color-scheme</code> when running Cypress tests, read the blog post <a href="/blog/cypress-emulate-media/" title="Emulate Media In Cypress Tests">Emulate Media In Cypress Tests</a>.</li><li>Read the blog post <a href="https://www.cypress.io/blog/2020/03/17/how-to-test-an-application-that-changes-css-variable/">How to Test an Application that Changes a CSS Variable</a></li><li><a href="/blog/css-animations/" title="How Cypress Freezes CSS Animations And You Can Too">How Cypress Freezes CSS Animations And You Can Too</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently I got an email thanking me for the work I have done for the Cypress community. The email also asked why I haven&amp;#39;t added a da
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="tutorial" scheme="https://glebbahmutov.com/blog/tags/tutorial/"/>
    
  </entry>
  
  <entry>
    <title>Emulate Media In Cypress Tests</title>
    <link href="https://glebbahmutov.com/blog/cypress-emulate-media/"/>
    <id>https://glebbahmutov.com/blog/cypress-emulate-media/</id>
    <published>2022-07-23T04:00:00.000Z</published>
    <updated>2022-07-23T11:58:56.407Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="the-application">The application</span></h2><p>Let&#39;s say our application has different styles depending on the media and the user&#39;s current <code>prefers-color-scheme</code> setting. In my example, the HTML page is normally uses the black text on the white background. If the user has <code>prefers-color-scheme: dark</code> setting, the page uses cyan on black colors to show the text.</p><blockquote class="pullquote"><p>üéÅ You can find the source code for this blog post in the repo <a href="https://github.com/bahmutov/cypress-emulate-media">bahmutov&#x2F;cypress-emulate-media</a>.</p></blockquote><figure class="highlight html"><figcaption><span>public/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>cypress-emulate-media<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./style.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">      Lorem ipsum dolor sit amet, ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><figcaption><span>public/style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2rem</span> <span class="number">4rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* default color theme */</span></span><br><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">prefers-color-scheme</span>: dark) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#d0d</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">prefers-color-scheme</span>: light) &#123;</span><br><span class="line">  <span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/emulate/light.png" alt="The page shown in the browser that prefers the light color scheme"></p><h2><span id="emulate-color-scheme-using-the-chrome-devtools">Emulate color scheme using the Chrome DevTools</span></h2><p>The simplest way to see how the page looks with the <code>prefers-color-scheme: dark</code> is to open the browser DevTools (I am using Chrome), and run the command &quot;Emulate CSS prefers-color-scheme ...&quot;</p><p><img src="../images/emulate/emulate.png" alt="Pick the DevTools command to emulate the dark color theme"></p><p>The page switches to use its dark media CSS styles</p><p><img src="../images/emulate/dark.png" alt="The page shown in the browser that prefers the dark color scheme"></p><p>How do we control the CSS media from a Cypress test?</p><h2><span id="devtools-automation">DevTools automation</span></h2><p>Cypress has a built-in DevTools automation channel as I described in the <a href="/blog/cypress-automation/" title="Cypress Automation">Cypress Automation</a> blog post. If you know that it is possible to execute a command from the DevTools, then you can find the actual command using the <a href="https://chromedevtools.github.io/devtools-protocol">Chrome Debugger Protocol site</a>. I have found the <code>Emulation</code> commands that has what we need.</p><p><img src="../images/emulate/emulation.png" alt="The Emulation DevTools protocol commands"></p><p><img src="../images/emulate/set-media.png" alt="Emulation.setEmulatedMedia command"></p><p>Let&#39;s use it in our test</p><figure class="highlight js"><figcaption><span>cypress/e2e/dark.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;prefers the dark color scheme&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">wrap</span>(</span><br><span class="line">    <span class="title class_">Cypress</span>.<span class="title function_">automation</span>(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">command</span>: <span class="string">&#x27;Emulation.setEmulatedMedia&#x27;</span>,</span><br><span class="line">      <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">media</span>: <span class="string">&#x27;page&#x27;</span>,</span><br><span class="line">        <span class="attr">features</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;prefers-color-scheme&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="string">&#x27;dark&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Success!</p><p><img src="../images/emulate/dark.cy.png" alt="The Cypress web test running using the dark color preference"></p><p><strong>Tip:</strong> I use <code>cy.wrap(...)</code> around the Promise-returning <code>Cypress.automation</code> call to make all other Cypress commands like <code>cy.visit</code> wait until the <code>Emulation.setEmulatedMedia</code> command has finished. See my <a href="https://glebbahmutov.com/cypress-examples/commands/misc.html"><code>cy.wrap</code> examples</a>.</p><h2><span id="confirm-the-applied-css">Confirm the applied CSS</span></h2><p>Let&#39;s make sure the actual dark background color is used by the page. We can grab the DOM element and ask the <code>window</code> object to give us the computed CSS property.</p><figure class="highlight js"><figcaption><span>cypress/e2e/dark.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;prefers the dark color scheme&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">wrap</span>(</span><br><span class="line">    <span class="title class_">Cypress</span>.<span class="title function_">automation</span>(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">command</span>: <span class="string">&#x27;Emulation.setEmulatedMedia&#x27;</span>,</span><br><span class="line">      <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">media</span>: <span class="string">&#x27;page&#x27;</span>,</span><br><span class="line">        <span class="attr">features</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;prefers-color-scheme&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="string">&#x27;dark&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.text&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">$el</span>) =&gt;</span> <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>($el[<span class="number">0</span>]).<span class="property">backgroundColor</span>)</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;rgb(0, 0, 0)&#x27;</span>) <span class="comment">// black color!</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The <code>.then(($el) =&gt; window.getComputedStyle($el[0]).backgroundColor)</code> code is a little unwieldy. Let&#39;s make a utility function to get us the computed style by name.</p><figure class="highlight js"><figcaption><span>cypress/e2e/utils.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// use Lodash _.camelCase to support both &quot;backgroundColor&quot; and &quot;background-color&quot;</span></span><br><span class="line"><span class="keyword">const</span> &#123; camelCase &#125; = <span class="title class_">Cypress</span>.<span class="property">_</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getComputedProperty</span> = (<span class="params">property</span>) =&gt; <span class="function">(<span class="params">$el</span>) =&gt;</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>($el[<span class="number">0</span>])[<span class="title function_">camelCase</span>(property)]</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/e2e/dark.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getComputedProperty &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;prefers the dark color scheme&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">wrap</span>(</span><br><span class="line">    <span class="title class_">Cypress</span>.<span class="title function_">automation</span>(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">command</span>: <span class="string">&#x27;Emulation.setEmulatedMedia&#x27;</span>,</span><br><span class="line">      <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">media</span>: <span class="string">&#x27;page&#x27;</span>,</span><br><span class="line">        <span class="attr">features</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;prefers-color-scheme&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="string">&#x27;dark&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.text&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="title function_">getComputedProperty</span>(<span class="string">&#x27;background-color&#x27;</span>))</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;rgb(0, 0, 0)&#x27;</span>) <span class="comment">// black color!</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Nice.</p><h2><span id="confirm-the-light-color-scheme">Confirm the light color scheme</span></h2><p>Let&#39;s have a spec that explicitly sets the light color theme preference and verifies the colors.</p><figure class="highlight js"><figcaption><span>cypress/e2e/light.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getComputedProperty &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;uses the light color scheme&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">wrap</span>(</span><br><span class="line">    <span class="title class_">Cypress</span>.<span class="title function_">automation</span>(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">command</span>: <span class="string">&#x27;Emulation.setEmulatedMedia&#x27;</span>,</span><br><span class="line">      <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">media</span>: <span class="string">&#x27;page&#x27;</span>,</span><br><span class="line">        <span class="attr">features</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;prefers-color-scheme&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="string">&#x27;light&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.text&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="title function_">getComputedProperty</span>(<span class="string">&#x27;background-color&#x27;</span>))</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;rgb(255, 255, 255)&#x27;</span>) <span class="comment">// white!</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.text&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="title function_">getComputedProperty</span>(<span class="string">&#x27;color&#x27;</span>))</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;rgb(85, 85, 85)&#x27;</span>) <span class="comment">// #333!</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/emulate/light-test.png" alt="The Cypress web test running using the light color preference"></p><h2><span id="warning">Warning</span></h2><p>Once you change the page media preferences, it stays that way. The Cypress Time-Traveling Debugger does NOT restore the media preferences when you hover over the command DOM snapshots. Thus if you have different tests in the same spec file, or switch the media preferences in the same test, it will not show the correct CSS styles when you inspect the commands.</p><figure class="highlight js"><figcaption><span>cypress/e2e/light-and-dark.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getComputedProperty &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;uses the light color scheme then the dark&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">wrap</span>(</span><br><span class="line">    <span class="title class_">Cypress</span>.<span class="title function_">automation</span>(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">command</span>: <span class="string">&#x27;Emulation.setEmulatedMedia&#x27;</span>,</span><br><span class="line">      <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">media</span>: <span class="string">&#x27;page&#x27;</span>,</span><br><span class="line">        <span class="attr">features</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;prefers-color-scheme&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="string">&#x27;light&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.text&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="title function_">getComputedProperty</span>(<span class="string">&#x27;background-color&#x27;</span>))</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;rgb(255, 255, 255)&#x27;</span>) <span class="comment">// white!</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.text&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="title function_">getComputedProperty</span>(<span class="string">&#x27;color&#x27;</span>))</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;rgb(85, 85, 85)&#x27;</span>) <span class="comment">// #333!</span></span><br><span class="line">    .<span class="title function_">wait</span>(<span class="number">1000</span>) <span class="comment">// for demo</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span></span><br><span class="line">      <span class="title class_">Cypress</span>.<span class="title function_">automation</span>(<span class="string">&#x27;remote:debugger:protocol&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">command</span>: <span class="string">&#x27;Emulation.setEmulatedMedia&#x27;</span>,</span><br><span class="line">        <span class="attr">params</span>: &#123;</span><br><span class="line">          <span class="attr">media</span>: <span class="string">&#x27;page&#x27;</span>,</span><br><span class="line">          <span class="attr">features</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;prefers-color-scheme&#x27;</span>,</span><br><span class="line">              <span class="attr">value</span>: <span class="string">&#x27;dark&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">    )</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.text&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="title function_">getComputedProperty</span>(<span class="string">&#x27;background-color&#x27;</span>))</span><br><span class="line">    .<span class="title function_">then</span>(cy.<span class="property">log</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;rgb(0, 0, 0)&#x27;</span>) <span class="comment">// black color!</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes. But when I hover over the commands, the page CSS Media preference is not restored, and thus I see the last dark color them CSS.</p><p><img src="../images/emulate/no-dom.gif" alt="The Cypress time-traveling debugger still uses the last media CSS"></p><p>So just watch out for that.</p><h2><span id="use-cypress-cdp">Use cypress-cdp</span></h2><p>You can simply Cypress automation commands and avoid the extra <code>cy.wrap</code> and <code>cy.then(() =&gt; Cypress.automation(...))</code> code by using my plugin <a href="https://github.com/bahmutov/cypress-cdp">cypress-cdp</a>. I will show how to use <code>cy.CDP</code> to emulate the color theme preference in my <a href="https://cypress.tips/courses/cypress-plugins">Cypress Plugins course</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;the-application&quot;&gt;The application&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Let&amp;#39;s say our application has different styles depending on the media and t
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Convert Cypress Specs from JavaScript to TypeScript</title>
    <link href="https://glebbahmutov.com/blog/cypress-js-to-ts/"/>
    <id>https://glebbahmutov.com/blog/cypress-js-to-ts/</id>
    <published>2022-07-19T04:00:00.000Z</published>
    <updated>2022-09-26T14:33:52.193Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s say you have a project with Cypress end-to-end tests. You might be thinking of converting the specs from JavaScript to TypeScript language. This blog post describes how I have converted one such project in my repo <a href="https://github.com/bahmutov/test-todomvc-using-app-actions">bahmutov&#x2F;test-todomvc-using-app-actions</a>.</p><!-- toc --><ul><li><a href="#step-1-decide-why-you-want-to-convert">Step 1: Decide why you want to convert</a></li><li><a href="#step-2-configure-the-intelligent-code-completion">Step 2: Configure the intelligent code completion</a></li><li><a href="#step-3-use-jsconfig-file">Step 3: use jsconfig file</a></li><li><a href="#step-4-use-jsdoc-comments-to-give-types">Step 4: use JSDoc comments to give types</a></li><li><a href="#step-5-start-checking-types">Step 5: start checking types</a></li><li><a href="#step-6-check-types-using-typescript">Step 6: Check types using TypeScript</a></li><li><a href="#step-7-check-types-on-ci">Step 7: Check types on CI</a></li><li><a href="#step-8-extend-the-globals-types">Step 8: Extend the globals types</a></li><li><a href="#step-9-turn-the-screws">Step 9: Turn the screws</a></li><li><a href="#step-10-move-specs-to-typescript">Step 10: Move specs to TypeScript</a></li><li><a href="#step-11-fix-the-ts-lint-errors">Step 11: Fix the TS lint errors</a></li><li><a href="#step-12-use-json-fixtures">Step 12: Use JSON fixtures</a><ul><li><a href="#cast-data-after-loading-using-cyfixture-command">Cast data after loading using cy.fixture command</a></li><li><a href="#import-json-fixtures-and-cast-the-type">Import JSON fixtures and cast the type</a></li><li><a href="#cast-yielded-value-from-cyfixture">Cast yielded value from cy.fixture</a></li><li><a href="#cast-cytask-value">Cast cy.task value</a></li><li><a href="#cast-aliased-value">Cast aliased value</a></li></ul></li><li><a href="#step-13-move-to-cypressconfigts-file">Step 13: Move to cypress.config.ts file</a></li><li><a href="#step-14-define-custom-commands">Step 14: Define custom commands</a></li><li><a href="#step-15-use-shared-ts-code-via-path-aliases">Step 15: use shared TS code via path aliases</a></li><li><a href="#my-thoughts">My thoughts</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><!-- VSCode color theme used to create the screenshots is "Material minimal dark" --><h2><span id="step-1-decide-why-you-want-to-convert">Step 1: Decide why you want to convert</span></h2><p>The most important step is to decide <em>what</em> benefits you are seeking from the conversion. Does the team use TS to code and is used to its static types? Do you want to see the intelligent code completion when coding Cypress tests? Do you want to share code and types between the application and the tests? Do you plan to check the static types in the spec files on CI? During pre-commit hook?</p><p>Conversion might take some time and effort, so it is better be worth it. I mostly use just JavaScript Cypress specs together with <a href="https://slides.com/bahmutov/ts-without-ts">JSDoc types</a> for simplicity. But I definitely see why someone might want to use TS to code the E2E tests. Luckily, it is not &quot;either &#x2F; or&quot; proposition. You can bring the static types into your Cypress project gradually and immediately enjoy some of the static typing benefits. Then you can progress through the rest of the code at your own pace.</p><h2><span id="step-2-configure-the-intelligent-code-completion">Step 2: Configure the intelligent code completion</span></h2><p>The first benefit of static types in Cypress specs is the intelligent code completion (IntelliSense) that pops up when you type Cypress <code>cy.*</code> commands, like <code>cy.visit</code>, etc. Without IntelliSense, when you hover over the <code>cy.visit</code> command, all you see is &quot;any&quot;. Your code editor cannot help you write this or any other Cypress command (pun intended)</p><p><img src="../images/cypress-js-to-ts/no-intellisense.png" alt="No IntelliSense for you, Cypress globals"></p><p>You can read the <a href="https://on.cypress.io/intellisense">Cypress IntelliSense guide</a> on how to set it up. In most modern code editors, I recommend starting with a special comment that tells the code editor to load TypeScript definitions for the global objects <code>cy</code> and <code>Cypress</code>.</p><figure class="highlight js"><figcaption><span>cypress/e2e/adding-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br></pre></td></tr></table></figure><p>Voila - the code editor goes to <code>node_modules/cypress/package.json</code> file, finds the <code>&quot;types&quot;: &quot;types&quot;</code> property, and loads the TypeScript file <code>node_modules/cypress/types/index.d.ts</code> file that describes what <code>Cypress</code> and &#96;cy are. Boom, your editor is helping you:</p><p><img src="../images/cypress-js-to-ts/intellisense.png" alt="My VSCode gives me help every time I type a Cypress command or assertion"></p><h2><span id="step-3-use-jsconfig-file">Step 3: use jsconfig file</span></h2><p>Instead of adding the <code>reference types</code> comment to each JavaScript spec, we could use a <code>jsconfig.json</code> file at the root of our project. At least in VSCode editor this file can tell which types to load for all files.</p><figure class="highlight json"><figcaption><span>jsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;cypress&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;cypress/**/*.js&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Each Cypress JS spec file now automatically knows the <code>cy</code>, <code>Cypress</code>, etc.</p><p>You can watch me explaining the <code>jsconfig.json</code> file in the video <a href="https://www.youtube.com/watch?v=XIaA8k7TOA4">Load Global Cypress Types In VSCode Using jsconfig.json File</a> below:</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/XIaA8k7TOA4" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>I also explain using <code>jsconfig.json</code> file to load Cypress and 3rd party plugin types in my course <a href="https://cypress.tips/courses/cypress-plugins">Cypress Plugins</a>.</p><h2><span id="step-4-use-jsdoc-comments-to-give-types">Step 4: use JSDoc comments to give types</span></h2><p>While coding our specs in JavaScript we use local variables, Cypress commands, etc. The code editor does not know the types of the variables we use. For example, the <code>title</code> variable in the below spec shows up as <code>any</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> title</span><br><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">title</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> &#123;</span><br><span class="line">  title = t</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-js-to-ts/title-any.png" alt="VSCode shows the title variable having type any"></p><p>We can keep the specs in JavaScript and add a <a href="https://docs.joshuatz.com/cheatsheets/js/jsdoc/">JSDoc type comment</a> to tell our code editor what we intend for it to be.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type</span> string */</span></span><br><span class="line"><span class="keyword">let</span> title</span><br><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">title</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> &#123;</span><br><span class="line">  title = t</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-js-to-ts/title-string.png" alt="VSCode shows the title variable having type any"></p><p>Ok, looks good. I use JSDoc types a lot, and I must admit they become cumbersome at some point. Even forcing a variable to be of a certain type is non-trivial and looks plain ugly. For example, to tell the code editor that <code>something</code> is really a string we need to cast it through an <code>unknown</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">any</span>&#125; */</span></span><br><span class="line"><span class="keyword">let</span> something;</span><br><span class="line"><span class="comment">// success is a string</span></span><br><span class="line"><span class="keyword">const</span> success = <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">string</span>&#125; */</span> (<span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">unknown</span>&#125; */</span> (something))</span><br></pre></td></tr></table></figure><p>Ughh.</p><h2><span id="step-5-start-checking-types">Step 5: start checking types</span></h2><p>Once your code editor &quot;knows&quot; the Cypress types, you can start checking them as you edit the files by adding <code>// @ts-check</code> directive. Let&#39;s say we pretend the <code>title</code> variable is a number, while the <a href="https://on.cypress.io/title">cy.title</a> command yields a string.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type</span> number */</span></span><br><span class="line"><span class="keyword">let</span> title</span><br><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">title</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> &#123;</span><br><span class="line">  title = t</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>VSCode by default does NOT warn us about the type mismatch.</p><p><img src="../images/cypress-js-to-ts/no-warn.png" alt="Even with types, the code editor does not warn us about string to number assignment"></p><p>To tell the code editor to warn us on type mismatch, we can add a special comment <code>// @ts-check</code> to our JavaScript files. The comment must come before any regular code.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// @ts-check</span><br><span class="line">// any imports</span><br><span class="line">/** @type number */</span><br><span class="line">let title</span><br><span class="line">cy.visit(&#x27;/&#x27;)</span><br><span class="line">cy.title().then((t) =&gt; &#123;</span><br><span class="line">  title = t &lt;=== a type error</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-js-to-ts/warn.png" alt="VSCode shows that we have a type error"></p><h2><span id="step-6-check-types-using-typescript">Step 6: Check types using TypeScript</span></h2><p>If we are checking the types while the code editor is running, let&#39;s check it from the command line and from the CI. Let&#39;s install TypeScript compiler</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D typescript</span><br><span class="line">+ typescript@4.7.4</span><br></pre></td></tr></table></figure><p>Add the <code>lint</code> command to the <code>package.json</code> file</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc --noEmit --pretty --allowJs cypress/**/*.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Let&#39;s run the <code>lint</code> step from the command line to find any mistakes with <code>npm run lint</code></p><p><img src="../images/cypress-js-to-ts/lint.png" alt="Linting JavaScript specs from the command line using TypeScript compiler"></p><p><strong>Tip:</strong> only the JS files with <code>// @ts-check</code> comment are checked, thus you can introduce type checking gradually into your project.</p><h2><span id="step-7-check-types-on-ci">Step 7: Check types on CI</span></h2><p>Let&#39;s run the types lint step and the sanity tests on CI using <a href="https://github.com/cypress-io/github-action">Cypress GitHub Action</a></p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">tests:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="comment"># Install NPM dependencies, cache them correctly</span></span><br><span class="line">      <span class="comment"># and run all Cypress tests</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># check the spec types</span></span><br><span class="line">          <span class="attr">build:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">lint</span></span><br><span class="line">          <span class="comment"># start the application before running Cypress</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="comment"># pass the grep tag to run only some tests</span></span><br><span class="line">          <span class="comment"># https://github.com/cypress-io/cypress-grep</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">grepTags=@sanity</span></span><br></pre></td></tr></table></figure><p>The CI service catches types mismatch in our specs</p><p><img src="../images/cypress-js-to-ts/ci.png" alt="Checking types before running the tests on GitHub Actions"></p><h2><span id="step-8-extend-the-globals-types">Step 8: Extend the globals types</span></h2><p>If your Cypress project is using any custom commands, like <code>cy.addTodo</code> or extends the <code>window</code> object by storing and passing custom properties, you might need to extend the global types to pass the types checks. For adding types for custom commands, see my blog post <a href="/blog/writing-custom-cypress-command/" title="Writing a Custom Cypress Command">Writing a Custom Cypress Command</a>. In our project, the application sets the <code>window.model</code> property when running inside a Cypress test.</p><figure class="highlight js"><figcaption><span>src/app.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> model = <span class="keyword">new</span> app.<span class="title class_">TodoModel</span>(<span class="string">&#x27;react-todos&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">Cypress</span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">model</span> = model</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This allows the test to grab the <code>window.model</code> and use the application&#39;s code to quickly execute application actions, giving it <a href="https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/">superpowers</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// spy on model.inform method called by the app</span></span><br><span class="line"><span class="comment">// when adding todos</span></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;calls inform&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">window</span>()</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;model&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;be.an&#x27;</span>, <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">model</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">spy</span>(model, <span class="string">&#x27;inform&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;inform&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="title function_">addDefaultTodos</span>()</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@inform&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>To make sure our types &quot;know&quot; what the <code>cy.window().its(&#39;model&#39;)</code> yields, we need to extends the <code>window</code> type definition. We can create a file <code>cypress/e2e/model.d.ts</code> that just describes the new types</p><figure class="highlight ts"><figcaption><span>cypress/e2e/model.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Describes the TodoMVC model instance.</span></span><br><span class="line"><span class="comment">// Ideally it would come from the application,</span></span><br><span class="line"><span class="comment">// but in our example app does not have types,</span></span><br><span class="line"><span class="comment">// so we write method signatures ourselves.</span></span><br><span class="line"><span class="comment">// From out app actions we only use a couple of methods.</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">TodoModel</span> &#123;</span><br><span class="line">  <span class="attr">todos</span>: <span class="built_in">unknown</span>[]</span><br><span class="line">  <span class="title function_">addTodo</span>(...<span class="attr">todos</span>: <span class="built_in">string</span>[])</span><br><span class="line">  <span class="title function_">toggle</span>(<span class="attr">item</span>: <span class="built_in">unknown</span>)</span><br><span class="line">  <span class="title function_">inform</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// During tests there we set &quot;window.model&quot; property</span></span><br><span class="line"><span class="comment">// now cy.window() returns Window instance with</span></span><br><span class="line"><span class="comment">// the &quot;model&quot; property that has TodoModel interface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Window</span> &#123;</span><br><span class="line">  <span class="attr">model</span>: <span class="title class_">TodoModel</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To use this file during code editor&#39;s type checks include it in the list of files in the <code>jsconfig.json</code> file</p><figure class="highlight json"><figcaption><span>jsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;cypress&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;cypress/**/*.js&quot;</span><span class="punctuation">,</span> <span class="string">&quot;cypress/e2e/model.d.ts&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="../images/cypress-js-to-ts/model.png" alt="window.model now has the correct type"></p><h2><span id="step-9-turn-the-screws">Step 9: Turn the screws</span></h2><p>Now that we have some initial types and are linting them, let&#39;s make the types stricter. For the code editor, you can turn the strict type checks using the <code>jsconfig.json</code> file</p><figure class="highlight js"><figcaption><span>jsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;types&quot;</span>: [<span class="string">&quot;cypress&quot;</span>],</span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;include&quot;</span>: [<span class="string">&quot;cypress/**/*.js&quot;</span>, <span class="string">&quot;cypress/e2e/model.d.ts&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> if you see too many errors, turn the <code>strict</code> option off and instead turn the checks like <code>noImplicitAny</code>, etc one by one.</p><p>For linting types from the command line, add the option to the NPM script command</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc --noEmit --pretty --allowJs --strict cypress/**/*.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="../images/cypress-js-to-ts/lint-strict.png" alt="Linting the types using strict setting"></p><p>Some of the errors are easy to fix. For example, the <code>clickFilter</code> function just needs the <code>@param</code> type in its existing JSDoc comment. If we add <code>@param &#123;string&#125; name</code> the TS error goes away.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Little utility function to click on a given filter on the page.</span></span><br><span class="line"><span class="comment"> * We are testing routing links, so these tests go through the DOM.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">name</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clickFilter</span> = (<span class="params">name</span>) =&gt; cy.<span class="title function_">get</span>(<span class="string">&#x27;.filters&#x27;</span>).<span class="title function_">contains</span>(name).<span class="title function_">click</span>()</span><br></pre></td></tr></table></figure><p>Similarly, we can add parameter types to the page object methods</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">todo</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">createTodo</span>(<span class="params">todo</span>) &#123;</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;.new-todo&#x27;</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;).<span class="title function_">type</span>(<span class="string">`<span class="subst">$&#123;todo&#125;</span>&#123;enter&#125;`</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; k Index of the todo to toggle</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">toggle</span>(<span class="params">k</span>) &#123;</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list li&#x27;</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;).<span class="title function_">eq</span>(k).<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>).<span class="title function_">check</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TypeScript compiler is even smart enough to figure out the runtime type checks. For example, for optional <code>k</code> parameter, the <code>if</code> branch cannot have undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns either all todo items on the page,</span></span><br><span class="line"><span class="comment"> * or just a given one (zero index)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number|undefined</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_">todos</span>(<span class="params">k</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (k !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="comment">// k can only be a number here</span></span><br><span class="line">    <span class="keyword">return</span> cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list li&#x27;</span>).<span class="title function_">eq</span>(k)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list li&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Finally, for anything complicated, but working in reality, I just ignore the error using the <code>@ts-ignore</code> directive.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">addTodos</span> = (<span class="params">...todos</span>) =&gt; &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>You can ignore specific errors instead of ignoring all possible TS errors in the next line using TS error codes like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-ignore TS6133</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>If the spec file has too many TS errors to be fixed right away, you can tell the TS compiler to ignore it completely using the <code>// @ts-nocheck</code> comment at the top:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO fix the types later</span></span><br><span class="line"><span class="comment">// @ts-nocheck</span></span><br></pre></td></tr></table></figure><h2><span id="step-10-move-specs-to-typescript">Step 10: Move specs to TypeScript</span></h2><ol><li>Add the <code>.ts</code> files to the E2E spec pattern in the <code>cypress.config.js</code> file</li></ol><figure class="highlight js"><figcaption><span>cypress.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">e2e</span>: &#123;</span><br><span class="line">    <span class="attr">baseUrl</span>: <span class="string">&#x27;http://localhost:8888&#x27;</span>,</span><br><span class="line">    <span class="attr">excludeSpecPattern</span>: [<span class="string">&#x27;*.page.js&#x27;</span>, <span class="string">&#x27;utils.js&#x27;</span>, <span class="string">&#x27;*.d.ts&#x27;</span>],</span><br><span class="line">    <span class="attr">specPattern</span>: <span class="string">&#x27;cypress/e2e/**/*spec.&#123;js,ts&#125;&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>Take a spec and change its file extension to <code>.ts</code>. For example, I have renamed <code>adding-spec.js</code> to <code>adding-spec.ts</code></li></ol><p><img src="../images/cypress-js-to-ts/ts-spec.png" alt="TypeScript spec file"></p><ol start="3"><li>Add the TS files to the list of included files in <code>jsconfig.json</code></li></ol><figure class="highlight json"><figcaption><span>jsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;cypress&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;cypress/**/*.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;cypress/e2e/model.d.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;cypress/e2e/*spec.ts&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>Click on the TS spec file. You should see an error message ü§Ø</li></ol><p><img src="../images/cypress-js-to-ts/ts-error.png" alt="Trying to run the renamed TS spec leads to an error"></p><ol start="5"><li>Rename the file <code>jsconfig.json</code> to <code>tsconfig.json</code> and add the options to allow JavaScript and do not emit JS</li></ol><figure class="highlight json"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;cypress&quot;</span><span class="punctuation">,</span> <span class="string">&quot;cypress-grep&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noEmit&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;cypress/e2e/model.d.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;cypress/e2e/*spec.ts&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;cypress/e2e/adding-spec.ts&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Note:</strong> I could not make the <code>tsconfig.json</code> work without listing at least one spec in its <code>files</code> list. Weird.</p><p>Now we can type anything in our spec files using &quot;normal&quot; TypScript, which is very convenient</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">title</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> &#123;</span><br><span class="line">  title = t</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You can remove some of the JSDoc typings and use &quot;normal&quot; argument variable declarations</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Little utility function to click on a given filter on the page.</span></span><br><span class="line"><span class="comment"> * We are testing routing links, so these tests go through the DOM.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clickFilter</span> = (<span class="params">name: <span class="built_in">string</span></span>) =&gt;</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.filters&#x27;</span>).<span class="title function_">contains</span>(name).<span class="title function_">click</span>()</span><br></pre></td></tr></table></figure><p>You can now move more and more spec files to TypeScript and ensure they all have sound types.</p><h2><span id="step-11-fix-the-ts-lint-errors">Step 11: Fix the TS lint errors</span></h2><p>Once the specs move to TypeScript, you can adjust the lint command in the <code>package.json</code> file</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc --noEmit --pretty&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>The command becomes stricter, as TypeScript now validates using only the settings specified in the <code>tsconfig.json</code> which seems to be stricter than using the <code>jsconfig.json</code> file.</p><p><img src="../images/cypress-js-to-ts/more-ts-lint.png" alt="More types errors discovered"></p><p>We can fix the top three errors by declaring the method return types in the <code>model.d.ts</code> file</p><figure class="highlight ts"><figcaption><span>model.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">TodoModel</span> &#123;</span><br><span class="line">  <span class="attr">todos</span>: <span class="built_in">unknown</span>[]</span><br><span class="line">  <span class="title function_">addTodo</span>(...<span class="attr">todos</span>: <span class="built_in">string</span>[]): <span class="built_in">void</span></span><br><span class="line">  <span class="title function_">toggle</span>(<span class="attr">item</span>: <span class="built_in">unknown</span>): <span class="built_in">void</span></span><br><span class="line">  <span class="title function_">inform</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s fix the 3rd party cryptic errors like these ones</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">node_modules/cypress/types/bluebird/index.d.ts:795:32 - error TS2304: Cannot find name &#x27;IterableIterator&#x27;.</span><br><span class="line"></span><br><span class="line">795       generatorFunction: () =&gt; IterableIterator&lt;any&gt;,</span><br><span class="line">                                   ~~~~~~~~~~~~~~~~</span><br><span class="line"></span><br><span class="line">node_modules/cypress/types/chai/index.d.ts:850:49 - error TS2304: Cannot find name &#x27;ReadonlySet&#x27;.</span><br><span class="line"></span><br><span class="line">850         include&lt;T&gt;(haystack: ReadonlyArray&lt;T&gt; | ReadonlySet&lt;T&gt; | ReadonlyMap&lt;any, T&gt;, needle: T, message?: string): void;</span><br></pre></td></tr></table></figure><p>Let&#39;s tell our TS compiler that the spec is meant to run in the browser that supports modern JavaScript and has DOM APIs. We add the <code>lib</code> list to the <code>compilerOptions</code> object:</p><figure class="highlight json"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;cypress&quot;</span><span class="punctuation">,</span> <span class="string">&quot;cypress-grep&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;DOM&quot;</span><span class="punctuation">,</span> <span class="string">&quot;ES2015&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noEmit&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;cypress/e2e/*.ts&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;cypress/e2e/adding-spec.ts&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm run lint</span><br><span class="line"></span><br><span class="line">&gt; test-todomvc-using-app-actions@1.0.0 lint</span><br><span class="line">&gt; tsc --noEmit --pretty</span><br></pre></td></tr></table></figure><p>No more errors</p><h2><span id="step-12-use-json-fixtures">Step 12: Use JSON fixtures</span></h2><blockquote class="pullquote"><p>üì∫ I have recorded a short video showing how to cast the <code>cy.fixture</code> JSON value, watch it at <a href="https://youtu.be/54311sOqeLg">Work With Cypress JSON Fixtures Using TypeScript</a>.</p></blockquote><h3><span id="cast-data-after-loading-using-cyfixture-command">Cast data after loading using cy.fixture command</span></h3><p>Let&#39;s say we are using the JSON fixtures to put into the application. Our JSON file has an object with the list of todos.</p><figure class="highlight json"><figcaption><span>cypress/fixtures/todos.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;todos&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Write code&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;completed&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Pass the tests&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;completed&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>We can import the fixture file and grab its <code>todos</code> property.</p><figure class="highlight js"><figcaption><span>cypress/e2e/using-fixture-spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Use JSON fixture&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;adds todos following the fixture&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">fixture</span>(<span class="string">&#x27;todos.json&#x27;</span>)</span><br><span class="line">      .<span class="title function_">its</span>(<span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">      .<span class="title function_">should</span>(<span class="string">&#x27;be.an&#x27;</span>, <span class="string">&#x27;array&#x27;</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">todos</span>) =&gt;</span> &#123;</span><br><span class="line">        todos.<span class="title function_">forEach</span>(<span class="function">(<span class="params">todo, k</span>) =&gt;</span> &#123;</span><br><span class="line">          cy.<span class="title function_">get</span>(<span class="string">&#x27;input.new-todo&#x27;</span>).<span class="title function_">type</span>(todo.<span class="property">title</span> + <span class="string">&#x27;&#123;enter&#125;&#x27;</span>)</span><br><span class="line">          cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list li&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, k + <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">if</span> (todo.<span class="property">completed</span>) &#123;</span><br><span class="line">            cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list li&#x27;</span>).<span class="title function_">last</span>().<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">            cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list li&#x27;</span>).<span class="title function_">last</span>().<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Unfortunately, <code>cy.fixture</code> yields <code>Cypress.Chainable&lt;any&gt;</code>, which means the <code>todos</code> argument has <code>any</code> type.</p><p><img src="../images/cypress-js-to-ts/fixture1.png" alt="Data loaded using cy.fixture has type any"></p><p>We can fix the callback function by adding an explicit type to the argument. I will add an interface <code>Todo</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cy.<span class="title function_">fixture</span>(<span class="string">&#x27;todos.json&#x27;</span>)</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;be.an&#x27;</span>, <span class="string">&#x27;array&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">todos: Todo[]</span>) =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-js-to-ts/fixture2.png" alt="Adding type to the data loaded by the cy.fixture command"></p><p>We can move such common types to the <code>model.d.ts</code> and export what is necessary:</p><figure class="highlight ts"><figcaption><span>cypress/e2e/model.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>cypress/e2e/using-fixture-spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Todo</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./model&#x27;</span></span><br></pre></td></tr></table></figure><h3><span id="import-json-fixtures-and-cast-the-type">Import JSON fixtures and cast the type</span></h3><p>If our fixture data is static JSON, we could simply import the data in our specs. We need to allow TypeScript to resolve JSON files</p><figure class="highlight json"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>If we import the data into the TS spec, it gets whatever the type the compiler can infer. Thus I like creating another variable to cast the imported object.</p><figure class="highlight ts"><figcaption><span>cypress/e2e/import-fixture-spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Todo</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./model&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; todos &#125; <span class="keyword">from</span> <span class="string">&#x27;../fixtures/todos.json&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">initialTodos</span>: <span class="title class_">Todo</span>[] = todos</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Import JSON fixture&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;adds todos following the fixture&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    initialTodos.<span class="title function_">forEach</span>(<span class="function">(<span class="params">todo, k</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;input.new-todo&#x27;</span>).<span class="title function_">type</span>(todo.<span class="property">title</span> + <span class="string">&#x27;&#123;enter&#125;&#x27;</span>)</span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list li&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, k + <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">if</span> (todo.<span class="property">completed</span>) &#123;</span><br><span class="line">        cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list li&#x27;</span>).<span class="title function_">last</span>().<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">        cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list li&#x27;</span>).<span class="title function_">last</span>().<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3><span id="cast-yielded-value-from-cyfixture">Cast yielded value from cy.fixture</span></h3><p>In the code fragment below, we yield <code>any</code> from the <code>cy.fixture</code> command to the <code>cy.its</code> command, which yields <code>any</code> to the <code>.then()</code> callback. We know what <code>cy.fixture</code> loads, let&#39;s tell the compiler that. We know the JSON file has an object with &quot;todos&quot; property, and its value is a list of Todos. Let&#39;s tell the compiler that using the expression <code>cy.fixture&lt;&#123; todos: Todo[] &#125;&gt;</code>:</p><figure class="highlight ts"><figcaption><span>cypress/e2e/cast-fixture-spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Todo</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./model&#x27;</span></span><br><span class="line">cy.<span class="property">fixture</span>&lt;&#123; <span class="attr">todos</span>: <span class="title class_">Todo</span>[] &#125;&gt;(<span class="string">&#x27;todos.json&#x27;</span>)</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;todos&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;be.an&#x27;</span>, <span class="string">&#x27;array&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">todos</span>) =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>If you inspect the commands after <code>cy.fixture</code>, you can see that <code>cy.its</code> for example yields the list of Todo objects, since it already &quot;knows&quot; the correct type of its subject. Nice.</p><p><img src="../images/cypress-js-to-ts/cast-fixture.png" alt="Adding type to the value yielded by the cy.fixture command makes the entire command chain correct"></p><h3><span id="cast-cytask-value">Cast cy.task value</span></h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this particular cy.task yields a number</span></span><br><span class="line">cy.<span class="property">task</span>&lt;<span class="built_in">number</span>&gt;(<span class="string">&#x27;getNumber&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(n).<span class="property">to</span>.<span class="property">be</span>.<span class="title function_">a</span>(<span class="string">&#x27;number&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3><span id="cast-aliased-value">Cast aliased value</span></h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this particular alias keeps a number</span></span><br><span class="line">cy.<span class="title function_">wrap</span>(<span class="number">42</span>).<span class="title function_">as</span>(<span class="string">&#x27;magic&#x27;</span>)</span><br><span class="line">cy.<span class="property">get</span>&lt;<span class="built_in">number</span>&gt;(<span class="string">&#x27;@magic&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(n).<span class="property">to</span>.<span class="property">be</span>.<span class="title function_">a</span>(<span class="string">&#x27;number&#x27;</span>).<span class="property">and</span>.<span class="property">to</span>.<span class="title function_">equal</span>(<span class="number">42</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="step-13-move-to-cypressconfigts-file">Step 13: Move to cypress.config.ts file</span></h2><p>By default, I use <code>cypress.config.js</code> to configure the Cypress project. Let&#39;s move this file to TypeScript. We can now use <code>import</code> and <code>export</code> keywords, but TS complains about unknown top-level properties.</p><p><img src="../images/cypress-js-to-ts/ts-config.png" alt="TypeScript catches unknown config properties"></p><p>We should move those properties (used by the plugin <a href="https://github.com/bahmutov/cypress-watch-and-reload">cypress-watch-and-reload</a>) to <code>e2e.env</code> object</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">e2e</span>: &#123;</span><br><span class="line">    <span class="attr">env</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;cypress-watch-and-reload&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">watch</span>: <span class="string">&#x27;js/*&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You might get an error &quot;[ERR_UNKNOWN_FILE_EXTENSION] Unknown file extension .ts&quot; when you open Cypress for the first time.</p><p><img src="../images/cypress-js-to-ts/config-load-error.png" alt="Cypress fails to load the cypress.config.ts file"></p><p>I found the simplest solution is to add <code>type: module</code> to your <code>package.json</code> file.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2><span id="step-14-define-custom-commands">Step 14: Define custom commands</span></h2><p>Let&#39;s say in our specs we use <a href="https://on.cypress.io/custom-commands">custom Cypress commands</a> like <code>cy.addTodo</code> defined in the Cypress E2E support file</p><figure class="highlight ts"><figcaption><span>cypress/support/e2e.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cypress</span>.<span class="property">Commands</span>.<span class="title function_">add</span>(<span class="string">&#x27;addTodo&#x27;</span>, <span class="function">(<span class="params">text: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.new-todo&#x27;</span>).<span class="title function_">type</span>(text + <span class="string">&#x27;&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  <span class="comment">// check when the new todo appears in the list</span></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;.todo-list li&#x27;</span>, text)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We can declare the type for the custom command in the <code>index.d.ts</code> file</p><figure class="highlight ts"><figcaption><span>cypress/e2e/index.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// extend Cypress &quot;cy&quot; global object interface with</span></span><br><span class="line"><span class="comment">// our custom commands defined in E2E support file</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> <span class="title class_">Cypress</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">Chainable</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Enters a new todo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment">     *  cy.addTodo(&#x27;Write more tests&#x27;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">addTodo</span>(<span class="attr">text</span>: <span class="built_in">string</span>): <span class="built_in">void</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we can use custom commands in our specs without a problem</p><figure class="highlight ts"><figcaption><span>cypress/e2e/adding-spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;adds new items using a custom command&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">addTodo</span>(<span class="variable constant_">TODO_ITEM_ONE</span>)</span><br><span class="line">  <span class="title function_">allItems</span>().<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">find</span>(<span class="string">&#x27;label&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;contain&#x27;</span>, <span class="variable constant_">TODO_ITEM_ONE</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="step-15-use-shared-ts-code-via-path-aliases">Step 15: use shared TS code via path aliases</span></h2><p>As I covered in <a href="/blog/using-ts-aliases-in-cypress-tests/" title="Using TypeScript aliases in Cypress tests">Using TypeScript aliases in Cypress tests</a>, we can conveniently import source code from our application into our TS specs using path aliases.</p><figure class="highlight ts"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@src/*&quot;</span>: [<span class="string">&quot;./js/*&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So we are pointing <code>@src/...</code> prefix at the <code>js</code> folder. Now let&#39;s import a type from our application&#39;s source code and use it in our spec file</p><figure class="highlight ts"><figcaption><span>cypress/e2e/path-alias-spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Todo</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@src/Todo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Source path alias&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;checks the application todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;.new-todo&#x27;</span>)</span><br><span class="line">      .<span class="title function_">type</span>(<span class="string">&#x27;one&#123;enter&#125;&#x27;</span>)</span><br><span class="line">      .<span class="title function_">type</span>(<span class="string">&#x27;two&#123;enter&#125;&#x27;</span>)</span><br><span class="line">      .<span class="title function_">type</span>(<span class="string">&#x27;three&#123;enter&#125;&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">window</span>()</span><br><span class="line">      .<span class="title function_">its</span>(<span class="string">&#x27;model.todos&#x27;</span>)</span><br><span class="line">      .<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">todos: Todo[]</span>) =&gt;</span> &#123;</span><br><span class="line">        todos.<span class="title function_">forEach</span>(<span class="function">(<span class="params">todo</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// each todo has id which is an uuid</span></span><br><span class="line">          <span class="title function_">expect</span>(todo).<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">property</span>(<span class="string">&#x27;id&#x27;</span>).<span class="property">and</span>.<span class="property">to</span>.<span class="property">be</span>.<span class="title function_">a</span>(<span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-js-to-ts/path-alias.png" alt="Using Todo type from application source code in our specs"></p><p><a href="https://github.com/muratkeremozcan/react-cypress-ts-template/blob/main/cypress/tsconfig.json">Tip from Murat Ozcan</a> - use path aliases to quickly import Cypress JSON fixtures</p><figure class="highlight json"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@src/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./js/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@support/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;support/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@fixtures/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;fixtures/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2><span id="my-thoughts">My thoughts</span></h2><p>At my Mercari US we are currently at Step 8. We use JavaScript + a few TypeScript definition files for our custom commands. We lint all spec files on CI and keep the lint step green. We probably should move to full TypeScript, as our fixtures and mock object become hard to type using JSDoc.</p><h2><span id="see-also">See also</span></h2><ul><li>my old blog post <a href="/blog/use-typescript-with-cypress/" title="Use TypeScript With Cypress">Use TypeScript With Cypress</a></li><li><a href="/blog/trying-typescript/" title="Trying TypeScript">Trying TypeScript</a></li><li>Cypress <a href="https://on.cypress.io/typescript">TypeScript docs</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s say you have a project with Cypress end-to-end tests. You might be thinking of converting the specs from JavaScript to TypeScri
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="typescript" scheme="https://glebbahmutov.com/blog/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>Cypress Cannot Add Out-Of-Band Commands</title>
    <link href="https://glebbahmutov.com/blog/cypress-out-of-band/"/>
    <id>https://glebbahmutov.com/blog/cypress-out-of-band/</id>
    <published>2022-07-15T04:00:00.000Z</published>
    <updated>2022-07-15T14:47:27.750Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="single-chain-of-commands">Single chain of commands</span></h2><p>Cypress test acts like a human user interacting with the web page. A human cannot click two buttons at once - the user can only do one action at a time. Thus the test runner always runs a single command at a time. A command has to fully finish before the next command starts. All commands are queued up at the start of the test, and then execute one by one.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;selector&#x27;</span>) <span class="comment">// first command</span></span><br><span class="line">  .<span class="title function_">find</span>(<span class="string">&#x27;another selector&#x27;</span>) <span class="comment">// second</span></span><br><span class="line">  .<span class="title function_">click</span>() <span class="comment">// third</span></span><br></pre></td></tr></table></figure><p>At the start of the test all commands are &quot;read&quot; and added to the queue</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Queue of commands</span><br><span class="line">1. GET &quot;selector&quot;</span><br><span class="line">2. - FIND &quot;another selector&quot;</span><br><span class="line">3. - CLICK</span><br></pre></td></tr></table></figure><p>Then the test starts running, reading the commands one by one from the queue and executing them.</p><blockquote class="pullquote"><p>üëÄ You can see the queue by using the plugin <a href="https://github.com/bahmutov/cypress-command-chain">cypress-command-chain</a>, read the blog post <a href="/blog/visualize-cypress-command-queue/" title="Visualize Cypress Command Queue">Visualize Cypress Command Queue</a>.</p></blockquote><h2><span id="dynamic-command-chain">Dynamic command chain</span></h2><p>A command can add other Cypress commands by inserting them into the command chain. For example, here is a <a href="https://on.cypress.io/conditional-testing">conditional test</a> that clicks on the element IF it finds the parent element:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;selector&#x27;</span>)</span><br><span class="line">  <span class="comment">// disable the built-in &quot;should exist&quot; assertion</span></span><br><span class="line">  .<span class="title function_">should</span>(<span class="title class_">Cypress</span>.<span class="property">_</span>.<span class="property">noop</span>)</span><br><span class="line">  .<span class="title function_">then</span>($el =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> ($el.<span class="property">length</span>) &#123;</span><br><span class="line">    cy.<span class="title function_">log</span>(<span class="string">&#x27;Found the element&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">wrap</span>($el)</span><br><span class="line">      .<span class="title function_">find</span>(<span class="string">&#x27;another selector&#x27;</span>)</span><br><span class="line">      .<span class="title function_">click</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Here is the command chain of known commands at the start of the test:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Queue of commands</span><br><span class="line">1. GET &quot;selector&quot;</span><br><span class="line">2. - THEN callback</span><br></pre></td></tr></table></figure><p>That&#39;s it. Cypress does not know what is inside the callback function yet. The test starts running, executes the <code>GET &quot;selector&quot;</code> command, and passes the jQuery object (which could be empty) to the &quot;THEN callback&quot; command. Cypress then adds new commands depending on the <code>if ($el.length)</code> condition. If there are no elements, it simply finishes the callback, completes the <code>THEN callback</code> commands and finishes the test. But if there is an element there, Cypress queues up the new commands:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Updated queue of commands</span><br><span class="line">1. GET &quot;selector&quot;   | done</span><br><span class="line">2. - THEN callback  | running</span><br><span class="line">3. LOG &quot;Found ...&quot;</span><br><span class="line">4. WRAP $el</span><br><span class="line">5. - FIND &quot;another selector&quot;</span><br><span class="line">6. - CLICK</span><br></pre></td></tr></table></figure><p>Cypress completes the &quot;THEN callback&quot; command and moves on to the next command in the queue &quot;LOG Found ...&quot;, etc.</p><h2><span id="out-of-band-commands">Out-of-band commands</span></h2><p>Cypress commands like &quot;THEN callback&quot; can add new commands to the queue. What about if some other test code tries to add a new command? For example, what if we do the following</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">wait</span>(<span class="number">10_000</span>) <span class="comment">// sleep 10 seconds</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;New command!&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">5_000</span>)</span><br></pre></td></tr></table></figure><p>You will get an error, Cypress does not know where this command is meant to join the queue.</p><p><img src="../images/out-of-band/out-of-band-error.png" alt="Cypress throws an error when trying to add an out-of-band command"></p><p>The same can happen when you try to add new commands from <code>Cypress.on</code> or <code>cy.intercept(..., req =&gt; ...)</code> callbacks.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">intercept</span>(<span class="string">&#x27;/ajax&#x27;</span>, <span class="function"><span class="params">req</span> =&gt;</span> &#123;</span><br><span class="line">  req.<span class="title function_">continue</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// üö® not going to work</span></span><br><span class="line">    cy.<span class="title function_">log</span>(<span class="string">&#x27;got response!&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Nope, the callback <code>res =&gt; &#123; ... &#125;</code> happens while some <em>other</em> Cypress command is running and it cannot insert the <code>cy.log</code> correctly.</p><h2><span id="use-the-cythen-command-instead">Use the <code>cy.then</code> command instead</span></h2><p>Instead of using <code>setTimeout...</code> you can use <a href="https://on.cypress.io/then">cy.then</a> to add or insert new Cypress commands into the queue.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">log</span>(<span class="string">&#x27;first&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// insert more commands</span></span><br><span class="line">  <span class="comment">// before the &quot;LOG third&quot; command</span></span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;second&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">cy.<span class="title function_">log</span>(<span class="string">&#x27;third&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/out-of-band/insert.png" alt="The new log command was inserted between two existing commands"></p><p>Adding new Cypress commands from <code>cy.then</code> is super useful for <a href="https://glebbahmutov.com/cypress-examples/recipes/conditional-testing.html">conditional testing</a> and <a href="https://github.com/bahmutov/cypress-recurse">recursive tests</a>.</p><h2><span id="add-your-own-queue">Add your own queue</span></h2><p>You can even store all the data for the commands you want to run and then schedule them for later using the <code>cy.then</code> command. For example, if you want to print the network data from the server, instead of trying to use <code>cy.log(...)</code> from the <code>cy.intercept</code> callback, store the response data and then print it later:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">intercept</span>(<span class="string">&#x27;/ajax&#x27;</span>, <span class="function"><span class="params">req</span> =&gt;</span> &#123;</span><br><span class="line">  req.<span class="title function_">continue</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// üö® not going to work</span></span><br><span class="line">    cy.<span class="title function_">log</span>(<span class="string">&#x27;got response!&#x27;</span>, res.<span class="property">body</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ‚úÖ store the responses to be printed later</span></span><br><span class="line"><span class="keyword">const</span> responses = []</span><br><span class="line">cy.<span class="title function_">intercept</span>(<span class="string">&#x27;/ajax&#x27;</span>, <span class="function"><span class="params">req</span> =&gt;</span> &#123;</span><br><span class="line">  req.<span class="title function_">continue</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    responses.<span class="title function_">push</span>(res.<span class="property">body</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// test commands</span></span><br><span class="line"><span class="comment">// now ensure there are some responses</span></span><br><span class="line"><span class="comment">// and print them</span></span><br><span class="line">cy.<span class="title function_">wrap</span>(responses).<span class="title function_">should</span>(<span class="string">&#x27;not.be.empty&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    responses.<span class="title function_">forEach</span>(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">      cy.<span class="title function_">log</span>(<span class="string">&#x27;got response!&#x27;</span>, r)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// if we want to print more responses later</span></span><br><span class="line">    responses.<span class="property">length</span> = <span class="number">0</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Hope it helps.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;single-chain-of-commands&quot;&gt;Single chain of commands&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Cypress test acts like a human user interacting with the web 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Component Code Coverage in Cypress v10</title>
    <link href="https://glebbahmutov.com/blog/component-code-coverage/"/>
    <id>https://glebbahmutov.com/blog/component-code-coverage/</id>
    <published>2022-07-07T04:00:00.000Z</published>
    <updated>2022-07-07T17:55:07.972Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s say you are enjoying the <a href="https://on.cypress.io/component-testing">Cypress component testing</a>, but wondering how to get the code coverage information from the component tests? Back in my days of <a href="/blog/my-vision-for-component-tests/" title="cypress-react-unit-test">cypress-react-unit-test</a> the code coverage was built-in... But now it requires adding it in. Luckily it is not very hard. Let me show you how to get the component testing code coverage report for a small example application.</p><blockquote class="pullquote"><p>üéÅ You can find the complete source code at <a href="https://github.com/bahmutov/stub-react-import">bahmutov&#x2F;stub-react-import</a>, specifically in the <a href="https://github.com/bahmutov/stub-react-import/pull/1/files">pull request #1</a>.</p></blockquote><h2><span id="instrument-the-source-files">Instrument the source files</span></h2><p>To collect the code coverage information, we need to instrument the application. When the component tests execute, the counters will be updated, and we will know which source statements were covered by the tests. To insert the counters into the source code, we add the <a href="https://github.com/istanbuljs/babel-plugin-istanbul#readme">babel-plugin-istanbul</a> into our Babel transpile step.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D babel-plugin-istanbul</span><br><span class="line">+ babel-plugin-istanbul@6.1.1</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">component</span>: &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">framework</span>: <span class="string">&#x27;create-react-app&#x27;</span>,</span><br><span class="line">      <span class="attr">bundler</span>: <span class="string">&#x27;webpack&#x27;</span>,</span><br><span class="line">      <span class="attr">webpackConfig</span>: &#123;</span><br><span class="line">        <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">        <span class="attr">devtool</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">module</span>: &#123;</span><br><span class="line">          <span class="attr">rules</span>: [</span><br><span class="line">            <span class="comment">// application and Cypress files are bundled like React components</span></span><br><span class="line">            <span class="comment">// and instrumented using the babel-plugin-istanbul</span></span><br><span class="line">            <span class="comment">// (we will filter the code coverage for non-application files later)</span></span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">              <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">              <span class="attr">use</span>: &#123;</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                  <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>, <span class="string">&#x27;@babel/preset-react&#x27;</span>],</span><br><span class="line">                  <span class="attr">plugins</span>: [</span><br><span class="line">                    <span class="comment">// we could optionally insert this plugin</span></span><br><span class="line">                    <span class="comment">// only if the code coverage flag is on</span></span><br><span class="line">                    <span class="string">&#x27;istanbul&#x27;</span>,</span><br><span class="line">                  ],</span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If you execute the component tests now, you can find the <code>window.__coverage__</code> object that has the counters for each transpiled source file, which includes the application source files and the spec files.</p><p><img src="../images/component-code-coverage/instrumented.png" alt="The component source files were instrumented"></p><p>At the end of the test run, we want to generate the code coverage report based on the <code>window.__coverage__</code> object.</p><h2><span id="the-code-coverage-report">The code coverage report</span></h2><p>To generate the code coverage reports in different formats, including the human-readable HTML format, let&#39;s use my plugin <a href="https://github.com/bahmutov/cypress-code-coverage">@bahmutov&#x2F;cypress-code-coverage</a>.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D @bahmutov/cypress-code-coverage</span><br><span class="line">+ @bahmutov/cypress-code-coverage@1.3.1</span><br></pre></td></tr></table></figure><p>This plugin needs to be included in the <code>cypress.config.js</code> file and in the component support file.</p><figure class="highlight js"><figcaption><span>cypress.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">component</span>: &#123;</span><br><span class="line">    <span class="title function_">setupNodeEvents</span>(<span class="params">on, config</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setupNodeEvents for components&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// https://github.com/bahmutov/cypress-code-coverage</span></span><br><span class="line">      <span class="built_in">require</span>(<span class="string">&#x27;@bahmutov/cypress-code-coverage/plugin&#x27;</span>)(on, config)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> config</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="comment">// our Webpack setup</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/support/component.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/bahmutov/cypress-code-coverage</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@bahmutov/cypress-code-coverage/support&#x27;</span></span><br></pre></td></tr></table></figure><p>Great, let&#39;s see what we get now. We can see the messages from the code coverage reporting plugin. There are no warnings, so it seems, it is working.</p><p><img src="../images/component-code-coverage/messages.png" alt="The code coverage plugin is working"></p><p><strong>Note:</strong> the <code>@bahmutov/cypress-code-coverage</code> plugin is a fork of <a href="https://github.com/cypress-io/code-coverage">@cypress&#x2F;code-coverage</a> plugin I have written a while ago. I prefer using my fork, since I have fixed some problems there.</p><p>After the test finishes, we can find the generated code coverage reports in the folder <code>coverage</code>. Let&#39;s open the HTML report</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ open coverage/lcov-report/index.html</span><br></pre></td></tr></table></figure><p><img src="../images/component-code-coverage/report1.png" alt="The HTML code coverage summary"></p><p>Hmm, the report includes our test folder <code>cypress/support</code>. What about the <code>src</code> folder?</p><p><img src="../images/component-code-coverage/report2.png" alt="The code coverage includes the test files"></p><p>We have a problem. We have files we do not want in the final report, and it is also missing some of the files we do want there. For example, the final report should tell us that the file <code>src/index.js</code> has NOT been covered by the component test (since we have not loaded it)</p><p><img src="../images/component-code-coverage/src.png" alt="The source files in our src folder"></p><h2><span id="include-and-exclude-files">Include and exclude files</span></h2><p>We want our code coverage report to skip the Cypress&#39; own spec files, and include the application&#39;s source files. Under the hood, the <code>@bahmutov/cypress-code-coverage</code> plugin is using <a href="https://istanbul.js.org/">nyc</a> CLI utility to produce the reports. We can control the source files included in the report by adding the <code>nyc</code> object of settings to the <code>package.json</code> file.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;nyc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;all&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;excludeAfterRemap&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/**/*.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;cypress/**/*.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;src/**/*.cy.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;src/**/*.test.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;src/setupTests.js&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> restart Cypress completely after changing the <code>nyc</code> settings, since we want to reload the <code>package.json</code> file to make the changes take effect. Let&#39;s look at our report now:</p><p><img src="../images/component-code-coverage/report3.png" alt="The code coverage report after excluding the specs and extra files"></p><p>Nice - the folder <code>cypress</code> is gone, and the only files we got the code coverage for are the real source files in the <code>src</code> folder. The component <code>App.js</code> has been tested by the <code>App.cy.js</code> component test at 100%. The <code>Location.js</code> has been mostly skipped - because we are stubbing its export for the test, read the blog post <a href="/blog/stub-react-import/" title="Stub an import from a Cypress v10 component test">Stub an import from a Cypress v10 component test</a>.</p><p><img src="../images/component-code-coverage/report4.png" alt="The code coverage report for the source file Location.js"></p><p>Finally, the source file <code>index.js</code> has zero code coverage, because the component test never loaded it. We can either add another component test, or test the <code>index.js</code> using an end-to-end test.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s say you are enjoying the &lt;a href=&quot;https://on.cypress.io/component-testing&quot;&gt;Cypress component testing&lt;/a&gt;, but wondering how to 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="code coverage" scheme="https://glebbahmutov.com/blog/tags/code-coverage/"/>
    
  </entry>
  
  <entry>
    <title>Periodically Update A Branch</title>
    <link href="https://glebbahmutov.com/blog/update-branch/"/>
    <id>https://glebbahmutov.com/blog/update-branch/</id>
    <published>2022-07-06T04:00:00.000Z</published>
    <updated>2022-07-07T16:35:23.054Z</updated>
    
    <content type="html"><![CDATA[<p>Imaging you have a repo with default branch <code>main</code> and another branch <code>X</code>. You want to have <code>X</code> always up-to-date, maybe it is deployed to the staging environment nightly. Here is how to update the branch <code>X</code> automatically using a GitHub Action.</p><blockquote class="pullquote"><p>üéÅ This example is available at <a href="https://github.com/bahmutov/self-update-branch">bahmutov&#x2F;self-update-branch</a>.</p></blockquote><h2><span id="github-action">GitHub Action</span></h2><p>I am using a GH Action workflow to update the branch <code>X</code> nightly or when manually triggered. See the file <a href="https://github.com/bahmutov/self-update-branch/blob/main/.github/workflows/update-branch.yml">update-branch.yml</a></p><figure class="highlight yml"><figcaption><span>.github/workflows/update-branch.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://glebbahmutov.com/blog/trying-github-actions/</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">update-branch</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># update the branch X every night</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;0 3 * * *&#x27;</span></span><br><span class="line">  <span class="comment"># or update the branch X manually</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">update:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">üõé</span></span><br><span class="line">        <span class="comment"># https://github.com/actions/checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># check out all branches</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line">          <span class="comment"># use a personal access token to commit</span></span><br><span class="line">          <span class="comment"># the merged code and trigger CI actions</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GH_PAT</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Update</span> <span class="string">Git</span> <span class="string">branch</span> <span class="string">X</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git config user.name &quot;Update branch&quot;</span></span><br><span class="line"><span class="string">          git config user.email github-actions@github.com</span></span><br><span class="line"><span class="string">          git checkout X</span></span><br><span class="line"><span class="string">          git merge main --no-edit -m &quot;Merged main branch on $(date +%F)&quot;</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Push</span> <span class="string">the</span> <span class="string">updated</span> <span class="string">branch</span> <span class="string">X</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">git</span> <span class="string">push</span> <span class="string">origin</span> <span class="string">X</span></span><br></pre></td></tr></table></figure><p>I need to use the GitHub <a href="https://github.com/settings/tokens">personal access token</a> in order for the update commit to trigger other CI services.</p><h2><span id="example">Example</span></h2><p>You can find a pull request <a href="https://github.com/bahmutov/self-update-branch/pull/1">#1</a> that automatically gets the new updates from the <code>main</code> branch. A merged commit into the branch <code>X</code> triggers the CI runs. In the screenshot below, the merge commit triggers another GitHub workflow <code>test-branch-x</code> and a CircleCI workflow.</p><p><img src="../images/update-branch/pr.png" alt="The pull request from the branch X updated automatically"></p><h2><span id="see-also">See also</span></h2><p>One use case for keeping a branch evergreen using the approach described in this blog post is deploying an instrumented version of the application for testing to collect the code coverage information. Read the blog post <a href="/blog/code-coverage-for-nextjs-app/" title="Code Coverage For Nextjs Application">Code Coverage For Nextjs Application</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imaging you have a repo with default branch &lt;code&gt;main&lt;/code&gt; and another branch &lt;code&gt;X&lt;/code&gt;. You want to have &lt;code&gt;X&lt;/code&gt; always u
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
      <category term="git" scheme="https://glebbahmutov.com/blog/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Stub an import from a Cypress v10 component test</title>
    <link href="https://glebbahmutov.com/blog/stub-react-import/"/>
    <id>https://glebbahmutov.com/blog/stub-react-import/</id>
    <published>2022-07-05T04:00:00.000Z</published>
    <updated>2022-07-07T17:54:01.686Z</updated>
    
    <content type="html"><![CDATA[<p>A user has recently asked in the <a href="https://on.cypress.io/discord">Cypress Discord channel</a> how to write a component test for a component that executes the following code <code>window.location.host.split(&quot;.&quot;)</code>. Grabbing the <code>window.location</code> is a side-effect and is generally unavailable from a component test. It would work great in an end-to-end test, of course, but we need to make it work right now.</p><p><img src="../images/stub-react-import/question.png" alt="How to handle the window.location access from the component"></p><p>Any time you have a piece of code that gives you problems, move it into its own function or source file and stub it from the Cypress test to bypass the problem. Of course, you want to stub the smallest piece of your code to make sure you still test the most of it, see the blog post <a href="/blog/stub-form-that-opens-2nd-tab/" title="Stub The Form That Opens The Second Browser Tab">Stub The Form That Opens The Second Browser Tab</a> that shows it nicely. Let&#39;s see how the same principle could work for a React component test.</p><p>I have started the a new React application using the <code>create-react-app</code> to scaffold it.</p><blockquote class="pullquote"><p>üéÅ You can find the complete source code at <a href="https://github.com/bahmutov/stub-react-import">bahmutov&#x2F;stub-react-import</a>.</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-react-app stub-react-import</span><br><span class="line">$ cd stub-react-import</span><br></pre></td></tr></table></figure><p>I installed Cypress and Prettier</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress prettier</span><br><span class="line">+ cypress@10.3.0</span><br><span class="line">+ prettier@2.7.1</span><br></pre></td></tr></table></figure><p>I love using <a href="/blog/configure-prettier-in-vscode/" title="Prettier to format my code">Prettier to format my code</a>. Let&#39;s configure the <a href="https://on.cypress.io/component-testing">Cypress component testing</a>.</p><p><img src="../images/stub-react-import/configure.png" alt="Cypress detects the framework used to bundle the application code"></p><p>Cypress wizard suggests the following <a href="https://github.com/bahmutov/stub-react-import/blob/main/cypress.config.js">cypress.config.js</a> file</p><figure class="highlight js"><figcaption><span>cypress.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">component</span>: &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">framework</span>: <span class="string">&#x27;create-react-app&#x27;</span>,</span><br><span class="line">      <span class="attr">bundler</span>: <span class="string">&#x27;webpack&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="the-component">The component</span></h2><p>Let&#39;s put have our <code>App.js</code> show the host and the path</p><figure class="highlight js"><figcaption><span>src/App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;./logo.svg&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; hostname, pathname &#125; = <span class="variable language_">window</span>.<span class="property">location</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">header</span> <span class="attr">className</span>=<span class="string">&quot;App-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;logo&#125;</span> <span class="attr">className</span>=<span class="string">&quot;App-logo&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;logo&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">data-cy</span>=<span class="string">&quot;location&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;hostname&#125; &#123;pathname&#125;&#123;&#x27; &#x27;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure><h2><span id="end-to-end-test">End-to-end test</span></h2><p>First, let&#39;s confirm the component is showing the expected host and path when running in an end-to-end test. Our test is simple:</p><figure class="highlight js"><figcaption><span>cypress/e2e/spec.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows the host and path&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=location]&#x27;</span>, <span class="string">&#x27;localhost /&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/stub-react-import/e2e.png" alt="The end-to-end test confirms the app is showing the right host and path"></p><h2><span id="component-test">Component test</span></h2><p>Nice, let&#39;s take a look at our component. Without any changes to the source code, our component test could be</p><figure class="highlight js"><figcaption><span>src/App.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows the location host and path&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">mount</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/stub-react-import/c1.png" alt="The component test has its test window location"></p><p>Ughh, the component runs in the test window, thus it shows the spec&#39;s pathname. Can we simply <a href>stub the <code>window.location</code></a>? Not really, we cannot redefine the <code>window.location</code> property, it is pretty locked down in the browser for security reasons.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows the location host and path&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// try stubbing the window.location.hostname property</span></span><br><span class="line">  cy.<span class="title function_">stub</span>(<span class="variable language_">window</span>.<span class="property">location</span>, <span class="string">&#x27;hostname&#x27;</span>).<span class="title function_">value</span>(<span class="string">&#x27;localhost&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">mount</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/stub-react-import/stub.png" alt="The browser does not allow stubbing the location properties"></p><h2><span id="move-the-side-effect">Move the side effect</span></h2><p>Let&#39;s start by moving the problematic code that accesses the <code>window.location</code> object to its own source file.</p><figure class="highlight js"><figcaption><span>src/Location.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getLocation</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; hostname, pathname &#125; = <span class="variable language_">window</span>.<span class="property">location</span></span><br><span class="line">  <span class="keyword">return</span> &#123; hostname, pathname &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>App.js</code> imports the <code>getLocation</code> function and calls it to get the <code>window.location</code> properties.</p><figure class="highlight js"><figcaption><span>src/App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getLocation &#125; <span class="keyword">from</span> <span class="string">&#x27;./Location&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; hostname, pathname &#125; = <span class="title function_">getLocation</span>()</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="stub-the-import">Stub the import</span></h2><p>Now we need to add one more plugin <code>@babel/plugin-transform-modules-commonjs</code> to our development dependencies for our tests to work</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D @babel/plugin-transform-modules-commonjs</span><br><span class="line">+ @babel/plugin-transform-modules-commonjs@7.18.6</span><br></pre></td></tr></table></figure><p>We have relied on the default Webpack settings found in the repository to bundle each component during Cypress component tests. Now we need to insert the <code>@babel/plugin-transform-modules-commonjs</code> into the transpiling pipeline. Thus I will expand the <a href="https://github.com/bahmutov/stub-react-import/blob/main/cypress.config.js">cypress.config.js</a> file to pass the full Webpack config</p><figure class="highlight js"><figcaption><span>cypress.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">component</span>: &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">framework</span>: <span class="string">&#x27;create-react-app&#x27;</span>,</span><br><span class="line">      <span class="attr">bundler</span>: <span class="string">&#x27;webpack&#x27;</span>,</span><br><span class="line">      <span class="attr">webpackConfig</span>: &#123;</span><br><span class="line">        <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">        <span class="attr">devtool</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">module</span>: &#123;</span><br><span class="line">          <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">test</span>: <span class="regexp">/\.?js$/</span>,</span><br><span class="line">              <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">              <span class="attr">use</span>: &#123;</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                  <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>, <span class="string">&#x27;@babel/preset-react&#x27;</span>],</span><br><span class="line">                  <span class="attr">plugins</span>: [</span><br><span class="line">                    [</span><br><span class="line">                      <span class="string">&#x27;@babel/plugin-transform-modules-commonjs&#x27;</span>,</span><br><span class="line">                      &#123; <span class="attr">loose</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">                    ],</span><br><span class="line">                  ],</span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// e2e config</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The plugin&#39;s <code>loose: true</code> option makes all imports accessible from other files, thus a spec file can stub an import and the stub will be used in the source files. If you run the component test again, nothing should change. But now let&#39;s modify our component test and stub the <code>getLocation</code> import</p><figure class="highlight js"><figcaption><span>src/App.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">Location</span> <span class="keyword">from</span> <span class="string">&#x27;./Location&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows the location host and path&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">stub</span>(<span class="title class_">Location</span>, <span class="string">&#x27;getLocation&#x27;</span>).<span class="title function_">returns</span>(&#123;</span><br><span class="line">    <span class="attr">hostname</span>: <span class="string">&#x27;cy-test&#x27;</span>,</span><br><span class="line">    <span class="attr">pathname</span>: <span class="string">&#x27;/App&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">mount</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=location]&#x27;</span>, <span class="string">&#x27;cy-test /App&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/stub-react-import/stub-get-location.png" alt="The component test stubs the import getLocation"></p><p>We can make the test stricter by confirming our <code>getLocation</code> stub was used and the test has not passed accidentally.</p><figure class="highlight js"><figcaption><span>src/App.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">Location</span> <span class="keyword">from</span> <span class="string">&#x27;./Location&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows the location host and path&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">stub</span>(<span class="title class_">Location</span>, <span class="string">&#x27;getLocation&#x27;</span>)</span><br><span class="line">    .<span class="title function_">returns</span>(&#123;</span><br><span class="line">      <span class="attr">hostname</span>: <span class="string">&#x27;cy-test&#x27;</span>,</span><br><span class="line">      <span class="attr">pathname</span>: <span class="string">&#x27;/App&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">as</span>(<span class="string">&#x27;getLocation&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">mount</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;[data-cy=location]&#x27;</span>, <span class="string">&#x27;cy-test /App&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@getLocation&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/stub-react-import/confirm.png" alt="The test confirms the import stub was called by the component"></p><p>Happy stubbing!</p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/component-code-coverage/" title="Component Code Coverage in Cypress v10">Component Code Coverage in Cypress v10</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;A user has recently asked in the &lt;a href=&quot;https://on.cypress.io/discord&quot;&gt;Cypress Discord channel&lt;/a&gt; how to write a component test for a 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Stub The Form That Opens The Second Browser Tab</title>
    <link href="https://glebbahmutov.com/blog/stub-form-that-opens-2nd-tab/"/>
    <id>https://glebbahmutov.com/blog/stub-form-that-opens-2nd-tab/</id>
    <published>2022-07-01T04:00:00.000Z</published>
    <updated>2022-07-13T13:35:40.598Z</updated>
    
    <content type="html"><![CDATA[<p>A user complained that a small Cypress test opens a new browser window and Cypress cannot continue with its test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;opens 2nd browser window&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;Open&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/stub-form/second.png" alt="The test opens the second browser window"></p><p>The user has provided a reproducible example, so great job! I have marked the important steps in the code that we will stub from our Cypress spec file.</p><p><img src="../images/stub-form/code.png" alt="The application code"></p><p>Let&#39;s prevent the application from opening the second browser widow.</p><blockquote class="pullquote"><p>üéÅ You can find the source code and the spec files in the repo <a href="https://github.com/bahmutov/cypress-form-opens-second-tab-example">bahmutov&#x2F;cypress-form-opens-second-tab-example</a>.</p></blockquote><h2><span id="remove-the-onclick-attribute">Remove the onclick attribute</span></h2><p>The simplest solution to prevent the application code from running is to remove the <code>onclick</code> attribute marked with <strong>&quot;1&quot;</strong> in the code screenshot above. The application is using this attribute to call the JavaScript function, so by removing it we avoid opening the second browser window.</p><figure class="highlight js"><figcaption><span>cypress/e2e/1-remove-onlick.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;removes the onclick attribute&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the application opens the 2nd tab in response</span></span><br><span class="line">  <span class="comment">// to the click handler set via &quot;onclick=...&quot; attribute</span></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;Open&#x27;</span>)</span><br><span class="line">    <span class="comment">// confirm the A element has the &quot;onclick&quot; attribute</span></span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;onclick&#x27;</span>)</span><br><span class="line">  <span class="comment">// disable the behavior by removing the &quot;onclick&quot; attribute</span></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;Open&#x27;</span>).<span class="title function_">invoke</span>(<span class="string">&#x27;attr&#x27;</span>, <span class="string">&#x27;onclick&#x27;</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  <span class="comment">// confirm we remain on the home screen</span></span><br><span class="line">  cy.<span class="title function_">location</span>(<span class="string">&#x27;pathname&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/stub-form/test1.png" alt="The test stops the code execution by removing the onclick attribute"></p><p>The test simply does nothing - it does not execute any of the application&#39;s code, which is probably not what we want. We want the test to run as much code as possible! The shown approach also would not work if the application attached the click event listener using <code>addEventListener</code> instead of using the element&#39;s attribute.</p><p>My rating of the above solution <strong>1 out of 10 stars</strong>.</p><h2><span id="stub-the-internal-application-code">Stub the internal application code</span></h2><p>The click calls the application code that calls <em>another</em> application function by using the <code>window.openNew</code> call. This is marked <strong>&quot;2&quot;</strong> in the code screenshot above:</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">openNewTab</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">openNew</span>(&#123;</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;test_blank&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;submitted.html&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By calling the &quot;openNew&quot; as a window&#39;s property, the application allows Cypress to easily spy &#x2F; stub the application&#39;s call.</p><figure class="highlight js"><figcaption><span>cypress/e2e/2-stub-openNew.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;passes&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the application internally calls</span></span><br><span class="line">  <span class="comment">// the &quot;window.openNew&quot; method</span></span><br><span class="line">  <span class="comment">// we can stub it using the cy.stub command</span></span><br><span class="line">  cy.<span class="title function_">window</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">stub</span>(win, <span class="string">&#x27;openNew&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;openNew&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;Open&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  <span class="comment">// and confirm the stub was called as expected</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@openNew&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;firstCall.args.0&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">target</span>: <span class="string">&#x27;test_blank&#x27;</span>,</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;submitted.html&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/stub-form/test2.png" alt="The test confirms the application calls the internal code correctly after a click"></p><p>Using this approach we can confirm the user interface and the application code are working correctly. We can let the app&#39;s code run all the way to the &quot;edge&quot; and stub the low-level method use to make the final call that opens the second browser window. Thus I rate this powerful approach <strong>6 out of 10 stars</strong>.</p><p><strong>Tip:</strong> see more <code>cy.stub</code> and related code examples at my <a href="https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html">Stubs, spies, and clocks examples page</a>.</p><h2><span id="stub-the-form-submit-method">Stub the form submit method</span></h2><p>In the previous test, we have stubbed the application&#39;s method <code>window.openNew</code>. We can also stub pretty much any browser API. For example, our application is preparing a form to submit. Then it calls the <code>form.submit()</code> method, marked <strong>&quot;3&quot;</strong> in the code snapshot:</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">openNew</span>(<span class="params">option</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">  form.<span class="property">target</span> = option.<span class="property">target</span> || <span class="string">&#x27;_blank&#x27;</span></span><br><span class="line">  form.<span class="property">action</span> = option.<span class="property">url</span></span><br><span class="line">  form.<span class="property">method</span> = <span class="string">&#x27;GET&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// send some additional information</span></span><br><span class="line">  <span class="keyword">const</span> name = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">  name.<span class="title function_">setAttribute</span>(<span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">  name.<span class="title function_">setAttribute</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;firstName&#x27;</span>)</span><br><span class="line">  name.<span class="title function_">setAttribute</span>(<span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;Joe&#x27;</span>)</span><br><span class="line">  form.<span class="title function_">appendChild</span>(name)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(form)</span><br><span class="line">  form.<span class="title function_">submit</span>() <span class="comment">// 3</span></span><br><span class="line">  $(form).<span class="title function_">remove</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The problem is the last call <code>form.submit()</code> - it submits the form to the server. We are interested in the form preparation, but don&#39;t want it to actually be submitted. Thus let&#39;s stub the <code>form.submit</code> method.</p><figure class="highlight js"><figcaption><span>cypress/e2e/3-stub-form-submit.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;passes&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the application will create the form</span></span><br><span class="line">  <span class="comment">// and call its submit method. Let&#x27;s</span></span><br><span class="line">  <span class="comment">// stub the form.submit() to prevent</span></span><br><span class="line">  cy.<span class="title function_">document</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">doc</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> create = doc.<span class="property">createElement</span>.<span class="title function_">bind</span>(doc)</span><br><span class="line">    <span class="keyword">const</span> stub = cy.<span class="title function_">stub</span>(doc, <span class="string">&#x27;createElement&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// all calls should still go to the original method</span></span><br><span class="line">    stub.<span class="title function_">callThrough</span>()</span><br><span class="line">    <span class="comment">// if the app is calling document.createElement(&quot;form&quot;)</span></span><br><span class="line">    <span class="comment">// then call our own method that created the form element</span></span><br><span class="line">    <span class="comment">// but stubs its &quot;submit()&quot; method</span></span><br><span class="line">    stub.<span class="title function_">withArgs</span>(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">callsFake</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> form = <span class="title function_">create</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">      cy.<span class="title function_">stub</span>(form, <span class="string">&#x27;submit&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;submit&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> form</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;Open&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@submit&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">  <span class="comment">// you could confirm the form&#x27;s attributes and input elements</span></span><br><span class="line">  <span class="comment">// by getting them from the &quot;@submit&quot; stub instance</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test has a lot of comments explaining what we are trying to do: we want to keep using the <code>document.createElement</code> method, but if the application&#39;s code calls <code>document.createElement(&#39;form&#39;)</code> then we return the form instance with the stubbed <code>submit</code> method. Thus the application&#39;s code does everything, only the final browser <code>submit</code> call goes to our stub instance.</p><p><img src="../images/stub-form/test3.png" alt="The test stubs the final form submit method"></p><p>Cypress tests run in the browser, thus the same <code>cy.spy</code> and <code>cy.stub</code> methods work on the browser&#39;s own APIs like <code>document.createElement</code>. By letting the application code run all the way to the last <code>form.submit()</code> the test is almost end-to-end. Thus I rate this test <strong>8 out of 10 stars</strong>.</p><h2><span id="stub-the-form-target-property">Stub the form target property</span></h2><p>Why does our form open the second browser window? Because the form has the <code>target: test_blank</code> property, marked in the code snapshot with <strong>&quot;4&quot;</strong>.</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">openNewTab</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">openNew</span>(&#123;</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;test_blank&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;submitted.html&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">openNew</span>(<span class="params">option</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">  form.<span class="property">target</span> = option.<span class="property">target</span> || <span class="string">&#x27;_blank&#x27;</span> <span class="comment">// &quot;4&quot;</span></span><br><span class="line">  form.<span class="property">action</span> = option.<span class="property">url</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Just like <code>&lt;a target=&quot;...&quot;&gt;</code> elements, the form can be loaded in the current browser tab by using the <code>target: _self</code> value. Let&#39;s adjust our spec to stub the form&#39;s <code>target</code> property and set it always to <code>_self</code>.</p><figure class="highlight js"><figcaption><span>cypress/e2e/4-stub-form-target.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;passes&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// before clicking on the link, stub the Document.createElement</span></span><br><span class="line">  <span class="comment">// and if the user is trying to create a new form, stub its</span></span><br><span class="line">  <span class="comment">// property &quot;target&quot; to not allow opening new tabs; always have it at &quot;_self&quot;</span></span><br><span class="line">  cy.<span class="title function_">document</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">doc</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> create = doc.<span class="property">createElement</span>.<span class="title function_">bind</span>(doc)</span><br><span class="line">    cy.<span class="title function_">stub</span>(doc, <span class="string">&#x27;createElement&#x27;</span>).<span class="title function_">callsFake</span>(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (name === <span class="string">&#x27;form&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> form = <span class="title function_">create</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">        cy.<span class="title function_">stub</span>(form, <span class="string">&#x27;target&#x27;</span>).<span class="title function_">value</span>(<span class="string">&#x27;_self&#x27;</span>)</span><br><span class="line">        <span class="comment">// Also spy on the instance method &quot;submit&quot;</span></span><br><span class="line">        <span class="comment">// so that later we can validate the submitted form</span></span><br><span class="line">        cy.<span class="title function_">spy</span>(form, <span class="string">&#x27;submit&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;submit&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> form</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">create</span>(name)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// spy on the network call to submit the form</span></span><br><span class="line">  cy.<span class="title function_">intercept</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">pathname</span>: <span class="string">&#x27;submitted.html&#x27;</span>,</span><br><span class="line">  &#125;).<span class="title function_">as</span>(<span class="string">&#x27;submitted&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// click on the link and confirm the form</span></span><br><span class="line">  <span class="comment">// has loaded in the current tab</span></span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;Open&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">  cy.<span class="title function_">contains</span>(<span class="string">&#x27;Thank you&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// verify the network call to submit the form</span></span><br><span class="line">  <span class="comment">// has the expected URL search parameters</span></span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="string">&#x27;@submitted&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;request.url&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> parsed = <span class="keyword">new</span> <span class="title function_">URL</span>(url)</span><br><span class="line">      <span class="keyword">return</span> parsed.<span class="property">searchParams</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// the form submits the field &quot;firstName=Joe&quot;</span></span><br><span class="line">    .<span class="title function_">invoke</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;firstName&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;Joe&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// grab the form&#x27;s submit call</span></span><br><span class="line">  <span class="comment">// to get back to the form and its input elements</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@submit&#x27;</span>)</span><br><span class="line">    .<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">    .<span class="title function_">its</span>(<span class="string">&#x27;firstCall.thisValue.elements&#x27;</span>)</span><br><span class="line">    <span class="comment">// the form&#x27;s HTML elements include every input element</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">elements</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// we can validate the form&#x27;s first name input element</span></span><br><span class="line">      <span class="comment">// has the expected value set by the application&#x27; code</span></span><br><span class="line">      <span class="title function_">expect</span>(elements.<span class="title function_">namedItem</span>(<span class="string">&#x27;firstName&#x27;</span>), <span class="string">&#x27;first name&#x27;</span>).<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">value</span>(<span class="string">&#x27;Joe&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The form is loaded in the same browser tab as the current page, and we can continue working with the form, as if we switched to the second tab.</p><p><img src="../images/stub-form/test4.png" alt="The test stubs the final form submit method"></p><p>The above test has many things going for it:</p><ul><li>it lets the form be submitted to the backend, and it verifies the submitted URL parameters by using <a href="https://on.cypress.io/intercept">cy.intercept</a> command and the browser&#39;s own <code>URL</code> API.</li><li>it verifies the form element and its input elements by getting them from the <code>submit</code> spy</li></ul><p>I rate the above test <strong>9 out of 10 stars</strong>.</p><p>If only Cypress could <a href="https://github.com/cypress-io/cypress/issues/6251">control two tabs</a>, then the test would earn <strong>10 ‚≠êÔ∏è</strong>.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/cypress-second-tab/" title="Deal with Second Tab in Cypress">Deal with Second Tab in Cypress</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;A user complained that a small Cypress test opens a new browser window and Cypress cannot continue with its test.&lt;/p&gt;
&lt;figure class=&quot;high
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Sinon Edge Cases</title>
    <link href="https://glebbahmutov.com/blog/sinon-edge/"/>
    <id>https://glebbahmutov.com/blog/sinon-edge/</id>
    <published>2022-06-30T04:00:00.000Z</published>
    <updated>2022-06-30T11:22:48.322Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://sinonjs.org/">Sinon.js</a> is my favorite JavaScript library for spying and stubbing object methods. This blog post describes a few seldomly used stub features that I always have to look up. These examples come from my <a href="https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html">Cypress examples page</a>.</p><h2><span id="callthrough">callThrough</span></h2><p>Imagine we want to stub a method, and return a value for the specific argument, but let the original method be called for all other arguments. We can use the <code>callThrough</code> feature.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> greeter = &#123;</span><br><span class="line">  <span class="title function_">greet</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stub = cy.<span class="title function_">stub</span>(greeter, <span class="string">&#x27;greet&#x27;</span>)</span><br><span class="line"><span class="comment">// all non-matched calls should call the real method</span></span><br><span class="line">stub.<span class="title function_">callThrough</span>()</span><br><span class="line"><span class="comment">// all calls with a string argument should get &quot;Hi&quot;</span></span><br><span class="line">stub.<span class="title function_">withArgs</span>(<span class="title class_">Cypress</span>.<span class="property">sinon</span>.<span class="property">match</span>.<span class="property">string</span>).<span class="title function_">returns</span>(<span class="string">&#x27;Hi&#x27;</span>)</span><br><span class="line"><span class="comment">// call the &quot;greet&quot; method</span></span><br><span class="line"><span class="title function_">expect</span>(greeter.<span class="title function_">greet</span>(<span class="string">&#x27;World&#x27;</span>)).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&#x27;Hi&#x27;</span>)</span><br><span class="line"><span class="title function_">expect</span>(greeter.<span class="title function_">greet</span>(<span class="number">42</span>)).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&#x27;Hello, 42!&#x27;</span>)</span><br></pre></td></tr></table></figure><h2><span id="callsfake">callsFake</span></h2><p>To have the absolute power over the stub, I sometimes use the &#96;callsFake Sinon feature to redirect the method calls to my own function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Joe&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cy.<span class="title function_">stub</span>(person, <span class="string">&#x27;getName&#x27;</span>).<span class="title function_">callsFake</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// call the real person.getName() using the wrappedMethod</span></span><br><span class="line">    person.<span class="property">getName</span></span><br><span class="line">      .<span class="title function_">wrappedMethod</span>()</span><br><span class="line">      <span class="comment">// but then reverse the returned string</span></span><br><span class="line">      .<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      .<span class="title function_">reverse</span>()</span><br><span class="line">      .<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">expect</span>(person.<span class="title function_">getName</span>()).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&#x27;eoJ&#x27;</span>)</span><br></pre></td></tr></table></figure><p>It allows me to programmatically decide what to do with the call. In my repo <a href="https://github.com/bahmutov/cypress-form-opens-second-tab-example">cypress-form-opens-second-tab-example</a> I am stubbing the <code>document.createElement</code> calls when the argument is <code>form</code>, but let the original method be called for all other elements.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> create = doc.<span class="property">createElement</span>.<span class="title function_">bind</span>(doc)</span><br><span class="line">cy.<span class="title function_">stub</span>(doc, <span class="string">&#x27;createElement&#x27;</span>).<span class="title function_">callsFake</span>(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">&#x27;form&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> form = <span class="title function_">create</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">stub</span>(form, <span class="string">&#x27;target&#x27;</span>).<span class="title function_">value</span>(<span class="string">&#x27;_self&#x27;</span>)</span><br><span class="line">    <span class="comment">// Also spy on the instance method &quot;submit&quot;</span></span><br><span class="line">    <span class="comment">// so that later we can validate the submitted form</span></span><br><span class="line">    cy.<span class="title function_">spy</span>(form, <span class="string">&#x27;submit&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;submit&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> form</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">create</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="value">value</span></h2><p>You can stub an object&#39;s property using the <code>value</code> keyword. For example, to prevent anyone from setting the <code>target</code> property in the above <code>&lt;form&gt;</code> example, I used the following syntax:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">stub</span>(form, <span class="string">&#x27;target&#x27;</span>).<span class="title function_">value</span>(<span class="string">&#x27;_self&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The application code can do the following:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">form.<span class="property">target</span> = <span class="string">&#x27;test_blank&#x27;</span></span><br></pre></td></tr></table></figure><p>Yet, the form element will always submit in the current browser window, because the <code>form.target</code> will always remain <code>_self</code>.</p><h2><span id="resethistory">resetHistory</span></h2><p>Sinon spies&#x2F;stubs keep the history of their calls. We can reset the history whenever we want</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test subject</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="title function_">birthday</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> += <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// spy on the subject&#x27;s method</span></span><br><span class="line">cy.<span class="title function_">spy</span>(person, <span class="string">&#x27;birthday&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;birthday&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">wrap</span>(person)</span><br><span class="line">  .<span class="title function_">its</span>(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// the application calls the method twice</span></span><br><span class="line">    person.<span class="title function_">birthday</span>()</span><br><span class="line">    person.<span class="title function_">birthday</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// verify the spy recorded two calls</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;@birthday&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledTwice&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;@birthday&#x27;</span>).<span class="title function_">its</span>(<span class="string">&#x27;callCount&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// reset the spy&#x27;s history</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;@birthday&#x27;</span>).<span class="title function_">invoke</span>(<span class="string">&#x27;resetHistory&#x27;</span>)</span><br><span class="line"><span class="comment">// the spy call count and the history have been cleared</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;@birthday&#x27;</span>).<span class="title function_">its</span>(<span class="string">&#x27;callCount&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;@birthday&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.have.been.called&#x27;</span>)</span><br></pre></td></tr></table></figure><h2><span id="restore">restore</span></h2><p>When you no longer want to use the stub, call <code>.restore()</code> method on the stub</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Joe&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">expect</span>(person.<span class="title function_">getName</span>(), <span class="string">&#x27;true name&#x27;</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&#x27;Joe&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">stub</span>(person, <span class="string">&#x27;getName&#x27;</span>).<span class="title function_">returns</span>(<span class="string">&#x27;Cliff&#x27;</span>)</span><br><span class="line"><span class="title function_">expect</span>(person.<span class="title function_">getName</span>(), <span class="string">&#x27;mock name&#x27;</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&#x27;Cliff&#x27;</span>)</span><br><span class="line"><span class="comment">// restore the original method</span></span><br><span class="line">person.<span class="property">getName</span>.<span class="title function_">restore</span>()</span><br><span class="line"><span class="title function_">expect</span>(person.<span class="title function_">getName</span>(), <span class="string">&#x27;restored name&#x27;</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&#x27;Joe&#x27;</span>)</span><br></pre></td></tr></table></figure><p>If use have a Cypress alias, you can also invoke the <code>restore</code> method:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Joe&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">expect</span>(person.<span class="title function_">getName</span>(), <span class="string">&#x27;true name&#x27;</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&#x27;Joe&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">stub</span>(person, <span class="string">&#x27;getName&#x27;</span>).<span class="title function_">returns</span>(<span class="string">&#x27;Cliff&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;getName&#x27;</span>)</span><br><span class="line"><span class="title function_">expect</span>(person.<span class="title function_">getName</span>(), <span class="string">&#x27;mock name&#x27;</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&#x27;Cliff&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;@getName&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">  .<span class="title function_">invoke</span>(<span class="string">&#x27;restore&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(person.<span class="title function_">getName</span>(), <span class="string">&#x27;restored name&#x27;</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&#x27;Joe&#x27;</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2><span id="learn-more">Learn more</span></h2><ul><li><a href="/blog/lock-down-sinon-stub/" title="Lock Down Sinon Stub">Lock Down Sinon Stub</a></li><li><a href="/blog/mocha-and-sinon/" title="How to set up Mocha with Sinon.js">How to set up Mocha with Sinon.js</a></li><li><a href="/blog/spying-on-methods/" title="Spying on methods">Spying on methods</a></li><li><a href="https://on.cypress.io/stub">cy.stub</a>, <a href="https://on.cypress.io/spy">cy.spy</a> commands</li><li><a href="https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html">Stubs, spies, and clock examples</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://sinonjs.org/&quot;&gt;Sinon.js&lt;/a&gt; is my favorite JavaScript library for spying and stubbing object methods. This blog post desc
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress v10 Environment Variables</title>
    <link href="https://glebbahmutov.com/blog/cypress-v10-env/"/>
    <id>https://glebbahmutov.com/blog/cypress-v10-env/</id>
    <published>2022-06-28T04:00:00.000Z</published>
    <updated>2022-10-04T22:47:35.489Z</updated>
    
    <content type="html"><![CDATA[<p>Cypress tests have two different sets of values: the config values and the user values. The config values are controlling the test runner itself: the spec pattern, the viewport resolution, even the <code>baseUrl</code> is the config value (which is why you need to set it using the config block, see the video <a href="https://www.youtube.com/watch?v=f5UaXuAc52c&feature=youtu.be">How to correctly use the baseUrl to visit a site in Cypress</a>). The user values are everything else: the username and the password to enter into the site under the test, the API key to use with the <code>cy.request</code> command, the item name to search for. These values are called in Cypress-speak &quot;env values&quot; and you can access them using the <a href="https://on.cypress.io/env">Cypress.env</a> command.</p><p>Cypress v10 has merged the plugins file with the <code>cypress.json</code> file into a single <code>cypress.config.js</code> file. By adding the <a href="https://on.cypress.io/component-testing">component testing</a> into the mix, the config file is confusing: where should we add our user values? Should they go into the top-level <code>env</code> object? Or be under the <code>e2e</code> property? What if we put them into both places? And how can we control these values using the <code>setupNodeEvents</code> callback? Let&#39;s start playing with the source code in <a href="https://github.com/bahmutov/cypress-env-v10-example">bahmutov&#x2F;cypress-env-v10-example</a> repo:</p><figure class="highlight js"><figcaption><span>cypress.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="comment">// our project does not use fixture files</span></span><br><span class="line">  <span class="attr">fixturesFolder</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="comment">// user values block 1</span></span><br><span class="line">    <span class="attr">level</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">e2e</span>: &#123;</span><br><span class="line">    <span class="comment">// our project does not need the support file</span></span><br><span class="line">    <span class="attr">supportFile</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">env</span>: &#123;</span><br><span class="line">      <span class="comment">// user values block 2</span></span><br><span class="line">      <span class="attr">level</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">e2e</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setupNodeEvents</span>(<span class="params">on, config</span>) &#123;</span><br><span class="line">      <span class="comment">// can we control the &quot;env&quot; object here?</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>So what do we see for the above configuration? Launch the Test Runner and look at the &quot;Settings&quot; tab right under the &quot;Specs&quot; tab. Look at the &quot;Project Settings&quot;. Scroll down to the &quot;Resolved configuration&quot;, which is a large object. We see <em>only the environment variables from the e2e block</em>. The top level config object is meant <em>only</em> for the test runner&#39;s own configuration properties.</p><p><img src="../images/v10-env/env1.png" alt="The resolved Cypress env object"></p><p>So here is our first find: no root level <code>env</code> block.</p><p><img src="../images/v10-env/block.png" alt="You should place the env object in the e2e object"></p><h2><span id="custom-logic">Custom logic</span></h2><p>What about the <code>setupNodeEvents</code> callback? What can it do for our user values? Notice that it gets the <code>config</code> passed as the second argument. Let&#39;s print the <code>config.env</code> to the terminal.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setupNodeEvents(on, config) &#123;</span><br><span class="line">  // can we control the &quot;env&quot; object here?</span><br><span class="line">  console.log(config.env)</span><br><span class="line">&#125;,</span><br><span class="line">// prints</span><br><span class="line">&#123; level: 2, e2e: true &#125;</span><br></pre></td></tr></table></figure><p>Great, so whatever you see in the resolved project settings is also passed into the <code>setupNodeEvents</code> callback. But there is more: you can <em>change</em> the <code>config.env</code> object in that callback. You can remove &#x2F; change &#x2F; add new values to that object! Just remember to <strong>return the updated config object</strong> from the <code>setupNodeEvents</code> callback (I forget to return it regularly, and then curse myself hours later when I notice the mistake).</p><p>The <code>cypress.config.js</code> file runs from a Node (Electron) Cypress process, thus it can access your local environment, unlike the spec or support files that run in the browser. Thus we can access the process environment variables, or read local files, etc. For example, let&#39;s say we want to pass the username and the password to our tests. We could use the process environment variables to do this securely:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ USERNAME=Joe PASSWORD=Smart12345 npx cypress open</span><br></pre></td></tr></table></figure><p>Here is what we could do in our <code>cypress.config.js</code> file to use the <code>USERNAME</code> and the <code>PASSWORD</code> values</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setupNodeEvents</span>(<span class="params">on, config</span>) &#123;</span><br><span class="line">  <span class="comment">// set any additional user values</span></span><br><span class="line">  config.<span class="property">env</span>.<span class="property">registered</span> = <span class="literal">true</span></span><br><span class="line">  config.<span class="property">env</span>.<span class="property">user</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: process.<span class="property">env</span>.<span class="property">USERNAME</span>,</span><br><span class="line">    <span class="attr">password</span>: process.<span class="property">env</span>.<span class="property">PASSWORD</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// REMEMBER TO RETURN THE CHANGED CONFIG OBJECT</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>Open the Test Runner with <code>USERNAME=Joe PASSWORD=Smart12345 npx cypress open</code> command and see the resolved config; it now includes the <code>e2e.env</code> object plus the values added by the <code>setupNodeEvents</code> callback</p><p><img src="../images/v10-env/combined.png" alt="The resolved env object with inserted values"></p><blockquote class="pullquote"><p>üí° Windows OS has its own syntax for <a href="https://www.howtogeek.com/789660/how-to-use-windows-cmd-environment-variables/">setting the process environment variables</a>. No matter what your operating system is, I recommend using <a href="https://github.com/bahmutov/as-a">as-a</a> to inject such values.</p></blockquote><h2><span id="read-json-file">Read JSON file</span></h2><p>Since <code>cypress.config.js</code> file is JavaScript, you can code up reading JSON file (or any other type of file) and add those values to the <code>config.env</code> object to be returned from <code>setupNodeEvents</code> function:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; readFileSync &#125; = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="title function_">setupNodeEvents</span>(<span class="params">on, config</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> text = <span class="title function_">readFileSync</span>(<span class="string">&#x27;./settings.json&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> values = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(text)</span><br><span class="line">  config.<span class="property">env</span> = &#123;</span><br><span class="line">    ...values</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// REMEMBER TO RETURN THE CHANGED CONFIG OBJECT</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> you can even control the JSON file to load by passing it via <code>--env &lt;name&gt;</code> parameter</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; readFileSync &#125; = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="title function_">setupNodeEvents</span>(<span class="params">on, config</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> envName = config.<span class="property">env</span>.<span class="property">name</span></span><br><span class="line">  <span class="keyword">const</span> text = <span class="title function_">readFileSync</span>(<span class="string">`./<span class="subst">$&#123;envName&#125;</span>.json`</span>)</span><br><span class="line">  <span class="keyword">const</span> values = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(text)</span><br><span class="line">  config.<span class="property">env</span> = &#123;</span><br><span class="line">    ...values</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// REMEMBER TO RETURN THE CHANGED CONFIG OBJECT</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>You can read the environment values for <code>QA</code> environment from <code>qa.json</code> file by using <code>cypress run --env name=qa</code></p><h2><span id="cypress-prefix">Cypress prefix</span></h2><p>Instead of reading the <code>process.env</code> values in the <code>setupNodeEvents</code> callback, we can let Cypress automatically read these values. Cypress is nice enough to automatically read any process environment values that start with the <code>CYPRESS_</code> prefix, and if the name does not match any built-in config values, it is added to the <code>env</code> object automatically. Let&#39;s remove our custom logic from the <code>cypress.config.js</code> file</p><figure class="highlight js"><figcaption><span>cypress.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// go back to printing the parsed `config.env` object</span></span><br><span class="line"><span class="title function_">setupNodeEvents</span>(<span class="params">on, config</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(config.<span class="property">env</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We could have achieved the same <code>env</code> object by opening Cypress with the following process environment variables</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ CYPRESS_registered=true \</span><br><span class="line">  CYPRESS_user=&#x27;&#123;&quot;name&quot;:&quot;Joe&quot;,&quot;password&quot;:&quot;Smart12345&quot;&#125;&#x27; \</span><br><span class="line">  npx cypress open</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  level: 2,</span><br><span class="line">  e2e: true,</span><br><span class="line">  user: &#123; name: &#x27;Joe&#x27;, password: &#x27;Smart12345&#x27; &#125;,</span><br><span class="line">  registered: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cypress automatically parses such variables, making sure they have the right type, and any JSON stringified objects are parsed into the JS objects.</p><h2><span id="set-env-variable-from-the-plugin">Set env variable from the plugin</span></h2><p>Some of the plugins like <a href="https://github.com/bahmutov/cypress-code-coverage">@bahmutov&#x2F;code-coverage</a> use the <code>config.env</code> object to set the variable to let the browser code know the plugin has been registered:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plugin code</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">registerPluginX</span>(<span class="params">on, config</span>) &#123;</span><br><span class="line">  <span class="comment">// init the plugin Node code</span></span><br><span class="line">  config.<span class="property">env</span>.<span class="property">registeredX</span> = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// your Cypress config file</span></span><br><span class="line"><span class="title function_">setupNodeEvents</span>(<span class="params">on, config</span>) &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;cypress-plugin-x&#x27;</span>)(on, config)</span><br><span class="line">  <span class="comment">// IMPORTANT: return the config</span></span><br><span class="line">  <span class="comment">// with the &quot;env&quot; object changed by the plugin</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="recommended-reading">Recommended reading</span></h2><ul><li><a href="/blog/keep-passwords-secret-in-e2e-tests/" title="Keep passwords secret in E2E tests">Keep passwords secret in E2E tests</a></li><li><a href="/blog/secrets-to-env/" title="Set All Cypress Env Values Using A Single GitHub Actions Secret">Set All Cypress Env Values Using A Single GitHub Actions Secret</a></li><li><a href="https://on.cypress.io/environment-variables">Cypress environment variables documentation</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Cypress tests have two different sets of values: the config values and the user values. The config values are controlling the test runner
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress v10 Tips and Tricks</title>
    <link href="https://glebbahmutov.com/blog/cypress-v10-tips/"/>
    <id>https://glebbahmutov.com/blog/cypress-v10-tips/</id>
    <published>2022-06-21T04:00:00.000Z</published>
    <updated>2022-09-22T16:57:06.398Z</updated>
    
    <content type="html"><![CDATA[<p>This blog post collects my tips for using Cypress v10+ which is a large step after the previous versions of Cypress. I plan to add more tips to this blog post as I use v10 more. See my post <a href="/blog/cypress-tips-and-tricks/" title="Cypress Tips and Tricks">Cypress Tips and Tricks</a> for more content; most of it still applies to Cypress v10+ tests.</p><!-- toc --><ul><li><a href="#learn-cypress-v10-fundamentals">Learn Cypress v10 Fundamentals</a></li><li><a href="#register-the-plugins">Register the plugins</a></li><li><a href="#launch-the-test-runner-in-the-desired-mode">Launch the test runner in the desired mode</a></li><li><a href="#quickly-change-the-testing-type">Quickly change the testing type</a></li><li><a href="#run-all-specs">Run all specs</a></li><li><a href="#run-e2e-and-component-tests-on-ci">Run E2E and component tests on CI</a></li><li><a href="#check-the-mode-from-the-config-file">Check the mode from the config file</a></li><li><a href="#set-the-user-values-using-the-env-block">Set the user values using the env block</a></li><li><a href="#overwrite-cylog-to-print-to-the-terminal">Overwrite <code>cy.log</code> to print to the terminal</a></li><li><a href="#stub-an-es6-import">Stub an ES6 import</a></li><li><a href="#collect-the-component-code-coverage">Collect the component code coverage</a></li><li><a href="#slow-down-cypress-tests">Slow down Cypress tests</a></li><li><a href="#migrate-your-angular-tests-from-protractor">Migrate your Angular tests from Protractor</a></li><li><a href="#access-the-file-system">Access the file system</a></li><li><a href="#run-specs-in-a-different-order">Run specs in a different order</a></li></ul><!-- tocstop --><h2><span id="learn-cypress-v10-fundamentals">Learn Cypress v10 Fundamentals</span></h2><p>The best way to start learning E2E and component testing in Cypress v10 is to go through my FREE course &quot;Cypress version 10 Fundamentals&quot; hosted by <a href="https://www.blazemeter.com/university">BlazeMeter University</a>.</p><ul><li>go to the BlazeMeter University <a href="https://university.blazemeter.com/">Login screen</a></li><li>create a free account and log in</li><li>find my course by name &quot;Cypress ...&quot; and enroll</li></ul><p><img src="../images/cypress-v10-tips/blazemeter.png" alt="Cypress v10 Fundamentals course"></p><p><strong>Tip:</strong> after learning the Cypress fundamentals, continue learning by taking my courses <a href="https://cypress.tips/courses/network-testing">Cypress Network Testing Exercises</a> and <a href="https://cypress.tips/courses/cypress-plugins">Cypress Plugins</a>.</p><h2><span id="register-the-plugins">Register the plugins</span></h2><p>Cypress v10+ has merged the <code>cypress.json</code> and the <code>cypress/plugins/index.js</code> files into a single <code>cypress.config.js</code> file. The plugins that you have registered before now should be registered in the <code>e2e / setupNodeEvents</code> method. For example, the <a href="https://github.com/bahmutov/cypress-high-resolution">cypress-high-resolution</a> used to be registered like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cypress/plugins/index.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://github.com/bahmutov/cypress-high-resolution</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;cypress-high-resolution&#x27;</span>)(on, config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In Cypress v10 it should be registered as</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cypress.config.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">e2e</span>: &#123;</span><br><span class="line">    <span class="title function_">setupNodeEvents</span>(<span class="params">on, config</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">&#x27;./cypress/plugins/index.js&#x27;</span>)(on, config)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> the Cypress migration wizard moves the plugins file automatically and it worked pretty well for me.</p><p><img src="../images/cypress-v10-tips/migration.png" alt="The migration wizard moving the plugins file to the config file"></p><h2><span id="launch-the-test-runner-in-the-desired-mode">Launch the test runner in the desired mode</span></h2><p>When using <code>cypress open</code> command, we have to pick the testing type and then pick the browser before we can click on the spec to run. This requires extra clicks just to get to the desired list of specs. You can shorten the process via command line arguments (which you can always look up using <code>cypress open --help</code>), for example to open e2e tests using the Electron browser:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cypress open --e2e --browser electron</span><br></pre></td></tr></table></figure><p>If you want to start component testing using the Chrome browser:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cypress open --component --browser chrome</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> you can still use <a href="https://github.com/bahmutov/start-server-and-test">start-server-and-test</a> to launch the application server when doing e2e testing. For example, here are my NPM scripts from the <code>package.json</code> file</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts start&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eject&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts eject&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;start-test 3000 cy:e2e&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;e2e&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cypress open --e2e --browser electron&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;comp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cypress open --component --browser electron&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>If I want to run just the component tests, I use <code>npm run comp</code> command. If I plan to run the E2E tests, I use <code>npm run dev</code> script which starts the application and opens Cypress in the E2E testing mode.</p><h2><span id="quickly-change-the-testing-type">Quickly change the testing type</span></h2><p>When running the tests, you can quickly switch from E2E to Component testing and back. Click on the test type icon in the top left corner.</p><p><img src="../images/cypress-v10-tips/icon.png" alt="Click on the testing type icon"></p><p>This brings the testing type modal dialog where you can switch to E2E testing</p><p><img src="../images/cypress-v10-tips/pick.png" alt="Pick the other testing type"></p><h2><span id="run-all-specs">Run all specs</span></h2><p>Cypress v10 has removed the &quot;Run all specs&quot; button. To learn how to get around it, read my blog post <a href="/blog/run-all-specs-cypress-v10/" title="Run All Specs in Cypress v10">Run All Specs in Cypress v10</a>.</p><h2><span id="run-e2e-and-component-tests-on-ci">Run E2E and component tests on CI</span></h2><p>If you are using the <a href="https://github.com/cypress-io/github-action">Cypress GitHub Action</a>, you need to upgrade to v4 to correctly install the dependencies and run the tests. For example, if you plan to run the component tests before running e2e tests (because it is faster), then do the following in your GitHub workflow</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">E2E</span> <span class="string">tests</span> <span class="string">üß™</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v4</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="comment"># to run component tests we need to use &quot;component: true&quot;</span></span><br><span class="line">    <span class="attr">component:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">Component</span> <span class="string">tests</span> <span class="string">üß™</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v4</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="comment"># we have already installed everything</span></span><br><span class="line">    <span class="attr">install:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># start the application before running</span></span><br><span class="line">    <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br></pre></td></tr></table></figure><p>Similarly, if you use <a href="https://github.com/cypress-io/circleci-orb">Cypress CircleCI Orb</a>, you would need to use v2</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@2</span></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="comment"># check out the code, install the dependencies</span></span><br><span class="line">      <span class="comment"># and run just the component tests</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">component:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2><span id="check-the-mode-from-the-config-file">Check the mode from the config file</span></h2><p>If you are trying to decide if the user is running cypress using the <code>cypress open</code> or the <code>cypress run</code> command, you can look at the <code>config.isTextTerminal</code> property. It is set to true during the <code>run</code> non-interactive mode.</p><figure class="highlight js"><figcaption><span>cypress.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">e2e</span>: &#123;</span><br><span class="line">    <span class="title function_">setupNodeEvents</span>(<span class="params">on, config</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (config.<span class="property">isTextTerminal</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;cypress run!)</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure><h2><span id="set-the-user-values-using-the-env-block">Set the user values using the env block</span></h2><p>Read the blog post <a href="/blog/cypress-v10-env/" title="Cypress v10 Environment Variables">Cypress v10 Environment Variables</a>.</p><h2><span id="overwrite-cylog-to-print-to-the-terminal">Overwrite <code>cy.log</code> to print to the terminal</span></h2><p>You can overwrite the <code>cy.log</code> command to print the message both to the Command Log and to the terminal. See the code in the <a href="https://github.com/bahmutov/cypress-log-to-term">bahmutov&#x2F;cypress-log-to-term</a> repo.</p><figure class="highlight js"><figcaption><span>spec.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cypress</span>.<span class="property">Commands</span>.<span class="title function_">overwrite</span>(<span class="string">&#x27;log&#x27;</span>, <span class="function">(<span class="params">log, message, ...args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// print the to Cypress Command Log</span></span><br><span class="line">  <span class="comment">// to preserve the existing functionality</span></span><br><span class="line">  <span class="title function_">log</span>(message, ...args)</span><br><span class="line">  <span class="comment">// send the formatted message down to the Node</span></span><br><span class="line">  <span class="comment">// callback in the cypress.config.js to be printed to the terminal</span></span><br><span class="line">  cy.<span class="title function_">task</span>(<span class="string">&#x27;print&#x27;</span>, [message, ...args].<span class="title function_">join</span>(<span class="string">&#x27;, &#x27;</span>), &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;prints log messages&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setupNodeEvents</span>(<span class="params">on, config</span>) &#123;</span><br><span class="line">  <span class="title function_">on</span>(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">print</span>(<span class="params">s</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="../images/cypress-v10-tips/log.png" alt="Logs the messages to the Command Log and the terminal"></p><h2><span id="stub-an-es6-import">Stub an ES6 import</span></h2><p>Read the blog post <a href="/blog/stub-react-import/" title="Stub an import from a Cypress v10 component test">Stub an import from a Cypress v10 component test</a>.</p><h2><span id="collect-the-component-code-coverage">Collect the component code coverage</span></h2><p>Read the blog post <a href="/blog/component-code-coverage/" title="Component Code Coverage in Cypress v10">Component Code Coverage in Cypress v10</a>.</p><h2><span id="slow-down-cypress-tests">Slow down Cypress tests</span></h2><p>This tip works both with Cypress v9 and v10. You can slow down each Cypress command by X milliseconds using my plugin <a href="https://github.com/bahmutov/cypress-slow-down">cypress-slow-down</a>. Watch the video below:</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/lxx-_nAkQo8" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="migrate-your-angular-tests-from-protractor">Migrate your Angular tests from Protractor</span></h2><p>Use the <a href="https://migrator.cypress.io/">migrator.cypress.io</a> tool from Cypress team.</p><p><img src="../images/cypress-v10-tips/migrator.png" alt="Migrating an example Protractor test to Cypress"></p><h2><span id="access-the-file-system">Access the file system</span></h2><p>Cypress tests run in the browser, thus they cannot access the file system directly. You have two main choices</p><ul><li>Use Cypress commands like <a href="https://on.cypress.io/readfile">cy.readFile</a> and <a href="https://on.cypress.io/writefile">cy.writeFile</a></li><li>Write the code that accesses the file system in the plugins &#x2F; cypress config file and call it via <a href="https://on.cypress.io/task">cy.task</a>, read the blog post <a href="/blog/powerful-cy-task/" title="Incredibly Powerful cy.task">Incredibly Powerful cy.task</a></li></ul><h2><span id="run-specs-in-a-different-order">Run specs in a different order</span></h2><p>By default, Cypress runs the specs in the order it finds them on disk. You can adjust this order by specifying your own spec pattern.</p><figure class="highlight js"><figcaption><span>cypress.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setupNodeEvents</span>(<span class="params">on, config</span>) &#123;</span><br><span class="line">  config.<span class="property">specPattern</span> = [</span><br><span class="line">    <span class="string">&#x27;cypress/e2e/spec2.cy.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cypress/e2e/spec3.cy.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cypress/e2e/spec1.cy.js&#x27;</span>,</span><br><span class="line">  ]</span><br><span class="line">  <span class="comment">// IMPORTANT: need to return the changed config</span></span><br><span class="line">  <span class="comment">// so Cypress knows about your changes</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>See the repo <a href="https://github.com/bahmutov/cypress-spec-order-example">bahmutov&#x2F;cypress-spec-order-example</a> and the video <a href="https://youtu.be/pA2C0q1mgnA">Run Cypress Specs In The Order You Want</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This blog post collects my tips for using Cypress v10+ which is a large step after the previous versions of Cypress. I plan to add more t
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Test App From Another Repo</title>
    <link href="https://glebbahmutov.com/blog/test-app/"/>
    <id>https://glebbahmutov.com/blog/test-app/</id>
    <published>2022-06-11T04:00:00.000Z</published>
    <updated>2022-06-11T11:16:26.554Z</updated>
    
    <content type="html"><![CDATA[<p>I have created <a href="https://cypress.tips/courses">Cypress Network Testing Course</a> with 90+ test exercises for anyone who wants to learn <a href="https://on.cypress.io/intercept">cy.intercept</a>, <a href="https://on.cypress.io/request">cy.request</a>, and other Cypress commands. The starting exercise specs are in the repo <a href="https://github.com/bahmutov/fastify-example-tests">bahmutov&#x2F;fastify-example-tests</a>. Each exercise is a test to be filled out by the user, something like this:</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;shows the fruit returned by the server&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// spy on the network call the application makes</span></span><br><span class="line">  <span class="comment">// tip: use https://on.cypress.io/intercept</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// visit the page</span></span><br><span class="line">  <span class="comment">// https://on.cypress.io/visit</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// wait for the app to make the network call</span></span><br><span class="line">  <span class="comment">// (there might be a delay)</span></span><br><span class="line">  <span class="comment">// https://on.cypress.io/wait</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// from the network call, get the response body</span></span><br><span class="line">  <span class="comment">// and the name of the fruit and confirm</span></span><br><span class="line">  <span class="comment">// the fruit is shown on the page</span></span><br><span class="line">  <span class="comment">// https://on.cypress.io/its</span></span><br><span class="line">  <span class="comment">// https://on.cypress.io/then</span></span><br><span class="line">  <span class="comment">// https://on.cypress.io/contains</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Each lesson has a video showing how I implement the above starting code until it really does what the comments say. To make sure all answers are correct I have another repository with answers to each lesson. That repo <a href="https://github.com/bahmutov/fastify-example-answers">bahmutov&#x2F;fastify-example-answers</a> is private, of course. I don&#39;t want everyone to just look at the answer and say &quot;Yeah, this is how I would write this test&quot;. How do I know the answers are correct, especially as I upgrade Cypress version?</p><p><img src="../images/test-app/tweet.png" alt="Test answers work when upgrading from Cypress v9 to v10"></p><p>I run them against the application using <code>cypress run</code>, of course! The test application lives in the repo <a href="https://github.com/bahmutov/fastify-example">bahmutov&#x2F;fastify-example</a>, luckily it is easy to check out both repos using <a href="/blog/trying-github-actions/" title="GitHub Actions">GitHub Actions</a>. Here is my workflow file from <code>fastify-example-answers</code> repo that checks out both repos, installs the app&#39;s dependencies, starts the application in the background, and runs all Cypress tests.</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">this</span> <span class="string">repo</span> <span class="string">üõé</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">the</span> <span class="string">application</span> <span class="string">repo</span> <span class="string">üõé</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">bahmutov/fastify-example</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">app</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">app</span> <span class="string">dependencies</span> <span class="string">üì¶</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">bahmutov/npm-install@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">working-directory:</span> <span class="string">app</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Start</span> <span class="string">the</span> <span class="string">application</span> <span class="string">üé¨</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          cd app</span></span><br><span class="line"><span class="string">          npm run start &amp;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">üß™</span></span><br><span class="line">        <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v3</span></span><br></pre></td></tr></table></figure><p>Every time I push a commit to <code>fastify-example-answers</code>, it is tested by the CI. The current status is shown in the README badge.</p><p><img src="../images/test-app/badges.png" alt="The GitHub Actions workflow status badge"></p><p><strong>Bonus:</strong> the Cypress version badge is created by my own little utility <a href="https://github.com/bahmutov/dependency-version-badge">dependency-version-badge</a>. Here is the GitHub Actions workflow that periodically updates it and pushes the changed README.md file if needed.</p><figure class="highlight yml"><figcaption><span>.github/workflows/badges.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">badges</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="comment"># update README badge only if the README file changes</span></span><br><span class="line">    <span class="comment"># or if the package.json file changes, or this file changes</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">README.md</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">package.json</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.github/workflows/badges.yml</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="comment"># update badges every night</span></span><br><span class="line">    <span class="comment"># because we have a few badges that are linked</span></span><br><span class="line">    <span class="comment"># to the external repositories</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;0 5 * * *&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">badges:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Badges</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">üõé</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Update</span> <span class="string">version</span> <span class="string">badges</span> <span class="string">üè∑</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npx</span> <span class="string">-p</span> <span class="string">dependency-version-badge</span> <span class="string">update-badge</span> <span class="string">cypress</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Commit</span> <span class="string">any</span> <span class="string">changed</span> <span class="string">files</span> <span class="string">üíæ</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">stefanzweifel/git-auto-commit-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">commit_message:</span> <span class="string">Updated</span> <span class="string">badges</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line">          <span class="attr">file_pattern:</span> <span class="string">README.md</span></span><br></pre></td></tr></table></figure><p>Read the blog post <a href="/blog/keep-examples-up-to-date/" title="Keep Examples Up To Date">Keep Examples Up To Date</a> to learn more about dependencies and version badges.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have created &lt;a href=&quot;https://cypress.tips/courses&quot;&gt;Cypress Network Testing Course&lt;/a&gt; with 90+ test exercises for anyone who wants to 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Run All Specs in Cypress v10</title>
    <link href="https://glebbahmutov.com/blog/run-all-specs-cypress-v10/"/>
    <id>https://glebbahmutov.com/blog/run-all-specs-cypress-v10/</id>
    <published>2022-06-04T04:00:00.000Z</published>
    <updated>2022-06-11T10:50:51.265Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Note:</strong> Cypress v10 has removed the &quot;Run all&quot; specs button because of its technical limitations, see the <a href="/blog/run-all-specs/" title="Be careful when running all specs together">Be careful when running all specs together</a> blog post. You can voice your feedback by commenting on the issue <a href="https://github.com/cypress-io/cypress/discussions/21628">#21628</a>. This blog post explains my workaround for running all specs together (or some specs only).</p><p><strong>Video:</strong> if you would rather watch the explanation, I have recorded the video &quot;<a href="https://youtu.be/z56rRoh0z_c">How To Run All Specs In Cypress v10</a>&quot; below, part of my <a href="https://www.youtube.com/playlist?list=PLP9o9QNnQuAYYRpJzDNWpeuOVTwxmIxcI">Cypress Tips &amp; Tricks Playlist</a>.</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/z56rRoh0z_c" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Let&#39;s say I have 3 End-to-End spec files. I can run each spec by clicking on it.</p><p><img src="../images/run-all/one-spec.png" alt="Running one spec at a time using Cypress v10"></p><p>Ok, so how do I run <em>all 3 specs together</em>? Hmm. That is a conundrum.</p><p>Here is what you do. Create a new e2e spec that just imports all other specs.</p><figure class="highlight js"><figcaption><span>cypress/e2e/all.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./clock.cy&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./play.cy&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./spec.cy&#x27;</span></span><br></pre></td></tr></table></figure><p>Click on the &quot;all.cy.js&quot; spec in Cypress and voil√† - you got all your specs running together, just like the good old days.</p><p><img src="../images/run-all/all.png" alt="Running all specs together"></p><p>Want to run just the test files &quot;spec.cy.js&quot; and &quot;clock.cy.js&quot; together? Comment out the &quot;play.cy&quot; import</p><figure class="highlight js"><figcaption><span>cypress/e2e/all.cy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./clock.cy&#x27;</span></span><br><span class="line"><span class="comment">// import &#x27;./play.cy&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./spec.cy&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="../images/run-all/two.png" alt="Skipping the play.cy.js spec file"></p><h2><span id="continuous-integration">Continuous integration</span></h2><p>What about the CI? We don&#39;t want to run all specs individually AND run them again by hitting the <code>all.cy.js</code> spec file on CI? You can <em>exclude</em> the <code>all.cy.js</code> when running the tests on CI</p><figure class="highlight js"><figcaption><span>cypress.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">e2e</span>: &#123;</span><br><span class="line">    <span class="attr">baseUrl</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">    <span class="attr">excludeSpecPattern</span>: process.<span class="property">env</span>.<span class="property">CI</span> ? [<span class="string">&#x27;cypress/e2e/all.cy.js&#x27;</span>] : [],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">component</span>: &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">framework</span>: <span class="string">&#x27;create-react-app&#x27;</span>,</span><br><span class="line">      <span class="attr">bundler</span>: <span class="string">&#x27;webpack&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If we run the tests locally using <code>cypress run</code> we see 4 specs included</p><p><img src="../images/run-all/local.png" alt="All specs are included by default"></p><p>But when we simulate the Continuous Integration server by setting the <code>CI=1</code> environment variable we see the <code>all.cy.js</code> spec file skipped, so only the real test files run.</p><p><img src="../images/run-all/ci.png" alt="The all.cy.js spec file skilled on CI"></p><p>Happy Cypress v10 testing</p><p><strong>PS:</strong> it would be nice to know in the <code>cypress.config.js</code> file if we are running using the <code>cypress open</code> or <code>cypress run</code> mode.</p><h2><span id="update-1-skip-the-allcyjs-spec-when-using-the-cypress-run-command">Update 1: skip the all.cy.js spec when using the cypress run command</span></h2><p>I have recorded <a href="https://www.youtube.com/watch?v=butlgoP4SzI">a video</a> showing how to automatically ignore the <code>all.cy.js</code> spec when using the <code>cypress run</code> command. Hint: we will use the <code>config.isTextTerminal</code> property to determine if Cypress is running using <code>cypress run</code> or <code>cypress open</code> mode.</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/butlgoP4SzI" title="YouTube video player" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>In short, you can return changed config options from the <code>setupNodeEvents</code> method. To determine the <code>run</code> mode you can look at the <code>config.isTextTerminal</code> property.</p><figure class="highlight js"><figcaption><span>cypress.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">projectId</span>: <span class="string">&#x27;1qsjjk&#x27;</span>,</span><br><span class="line">  <span class="attr">e2e</span>: &#123;</span><br><span class="line">    <span class="attr">baseUrl</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">    <span class="title function_">setupNodeEvents</span>(<span class="params">on, config</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (config.<span class="property">isTextTerminal</span>) &#123;</span><br><span class="line">        <span class="comment">// skip the all.cy.js spec in &quot;cypress run&quot; mode</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">excludeSpecPattern</span>: [<span class="string">&#x27;cypress/e2e/all.cy.js&#x27;</span>],</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Cypress v10 has removed the &amp;quot;Run all&amp;quot; specs button because of its technical limitations, see the &lt;a href
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
</feed>
