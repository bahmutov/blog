<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Better world by better software</title>
  
  <subtitle>Gleb Bahmutov PhD</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://glebbahmutov.com/blog/"/>
  <updated>2021-10-06T01:26:27.217Z</updated>
  <id>https://glebbahmutov.com/blog/</id>
  
  <author>
    <name>Gleb Bahmutov</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Get Faster Feedback From Your Cypress Tests Running On CircleCI</title>
    <link href="https://glebbahmutov.com/blog/faster-ci-feedback-on-circleci/"/>
    <id>https://glebbahmutov.com/blog/faster-ci-feedback-on-circleci/</id>
    <published>2021-10-05T04:00:00.000Z</published>
    <updated>2021-10-06T01:26:27.217Z</updated>
    
    <content type="html"><![CDATA[<p>Nobody likes slow tests. Pushing a pull request commit and waiting for 30 minutes for the CI to work through all the specs, just to find out your changed spec has failed ... is bad. In this blog post, I will show how to run only the new and changed Cypress.io specs first. This blog post shows it using CircleCI workflows. A similar approach could be used with any CI provider. In fact, in my previous post <a href="/blog/faster-ci-feedback/" title="Get Faster Feedback From Your Cypress Tests Running On GitHub Actions">Get Faster Feedback From Your Cypress Tests Running On GitHub Actions</a> I have described how to achieve the same using GitHub Actions.</p><blockquote class="pullquote"><p>üéÅ You can find the source code for this blog post in the repo <a href="https://github.com/bahmutov/chat.io">bahmutov/chat.io</a></p></blockquote><h2><span id="the-initial-workflow">The initial workflow</span></h2><p>Typically, we check out the source code, install NPM dependencies, start the application and run all tests using <a href="https://github.com/cypress-io/circleci-orb">Cypress CircleCI Orb</a>. For out application, we also need MongoDB and Redis services, and we can start them up using Docker images.</p><figure class="highlight yml"><figcaption><span>.circleci/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="comment"># https://github.com/cypress-io/circleci-orb</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">executors:</span></span><br><span class="line">  <span class="attr">with-services:</span></span><br><span class="line">    <span class="comment"># to run MongoDB and Redis on CircleCI, follow the instructions</span></span><br><span class="line">    <span class="comment"># https://glebbahmutov.com/blog/testing-mongo-with-cypress/</span></span><br><span class="line">    <span class="attr">docker:</span></span><br><span class="line">      <span class="comment"># image used to install source code,</span></span><br><span class="line">      <span class="comment"># run our server and run Cypress tests</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">cypress/base:14.16.0</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">          <span class="comment"># for connecting to the Mongo and Redis services</span></span><br><span class="line">          <span class="attr">MONGODB:</span> <span class="string">mongodb://root:rootPass1234@localhost:27017/</span></span><br><span class="line">          <span class="attr">SESSION_SECRET:</span> <span class="string">SoMeSeCrEtStrInG</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># image used to run Mongo in a separate container</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">mongo:4.4.5</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">          <span class="attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="string">rootPass1234</span></span><br><span class="line">      <span class="comment"># image for running Redis</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">redis:alpine</span></span><br><span class="line"></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Run</span> <span class="string">all</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">executor:</span> <span class="string">with-services</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">          <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">&#x27;All Circle Tests&#x27;</span></span><br><span class="line">          <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2><span id="parallelization">Parallelization</span></h2><p>Great start. What if we want to run tests faster? We can split them across N containers, each executing some specs through <a href="https://on.cypress.io/parallelization">Cypress parallelization</a>. Read the blog post <a href="/blog/parallel-or-not/" title="Parallel or not">Parallel or not</a> for more examples, but in general we will have one job to install dependencies and pass them to the test jobs via workspace.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="comment"># https://github.com/cypress-io/circleci-orb</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">executors:</span></span><br><span class="line">  <span class="attr">with-services:</span></span><br><span class="line">    <span class="comment"># to run MongoDB and Redis on CircleCI, follow the instructions</span></span><br><span class="line">    <span class="comment"># https://glebbahmutov.com/blog/testing-mongo-with-cypress/</span></span><br><span class="line">    <span class="attr">docker:</span></span><br><span class="line">      <span class="comment"># image used to install source code,</span></span><br><span class="line">      <span class="comment"># run our server and run Cypress tests</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">cypress/base:14.16.0</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">          <span class="comment"># for connecting to the Mongo and Redis services</span></span><br><span class="line">          <span class="attr">MONGODB:</span> <span class="string">mongodb://root:rootPass1234@localhost:27017/</span></span><br><span class="line">          <span class="attr">SESSION_SECRET:</span> <span class="string">SoMeSeCrEtStrInG</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># image used to run Mongo in a separate container</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">mongo:4.4.5</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">          <span class="attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="string">rootPass1234</span></span><br><span class="line">      <span class="comment"># image for running Redis</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">redis:alpine</span></span><br><span class="line"></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="comment"># every testing job needs to install dependencies and Cypress</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/install:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Install</span></span><br><span class="line">          <span class="comment"># to install dependencies, we do not need other services</span></span><br><span class="line">          <span class="comment"># so let&#x27;s use the executor close to what the tests will use</span></span><br><span class="line">          <span class="comment"># https://github.com/cypress-io/circleci-orb/blob/master/docs/executors.md</span></span><br><span class="line">          <span class="attr">executor:</span> <span class="string">cypress/base-14</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Run</span> <span class="string">all</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">executor:</span> <span class="string">with-services</span></span><br><span class="line">          <span class="attr">requires:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Install</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">          <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment"># split all specs across 4 machines</span></span><br><span class="line">          <span class="comment"># https://on.cypress.io/parallelization</span></span><br><span class="line">          <span class="attr">parallel:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">parallelism:</span> <span class="number">4</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">&#x27;All Circle Tests&#x27;</span></span><br><span class="line">          <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> you can run tests even faster by using CircleCI RAM disk feature, read the blog post <a href="/blog/circle-ram-disk/" title="Start CircleCI Machines Faster by Using RAM Disk">Start CircleCI Machines Faster by Using RAM Disk</a>.</p><h2><span id="run-changed-specs-first">Run changed specs first</span></h2><p>But what if we want to open a pull request with changed / added Cypress specs and run them first? That way we find out if our changes are correct very quickly. We still will run all the tests to ensure nothing else is broken, of course.</p><p>Here is how we can do this: we will define a middle job between the install and &quot;Run all tests&quot; jobs. This middle job will only run the changed Cypress specs on pull requests. If the job is running for regular commits, the job will halt itself, skipping right to the &quot;Run all tests&quot; job. Here is the definition for the job:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># run only the changed Cypress tests if any</span></span><br><span class="line"><span class="comment"># and only if we are running in a pull request</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Run</span> <span class="string">changed</span> <span class="string">Cypress</span> <span class="string">tests</span></span><br><span class="line">    <span class="attr">executor:</span> <span class="string">with-services</span></span><br><span class="line">    <span class="attr">requires:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Install</span></span><br><span class="line">    <span class="attr">post-checkout:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Stop</span> <span class="string">if</span> <span class="string">not</span> <span class="string">a</span> <span class="string">pull</span> <span class="string">request</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">if</span> [ <span class="string">-z</span> <span class="string">&quot;$CIRCLE_PULL_REQUEST&quot;</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">              <span class="string">echo</span> <span class="string">&quot;Not a pull request, exiting...&quot;</span></span><br><span class="line">              <span class="string">circleci-agent</span> <span class="string">step</span> <span class="string">halt</span></span><br><span class="line">            <span class="string">fi</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Stop</span> <span class="string">if</span> <span class="literal">no</span> <span class="string">changed</span> <span class="string">specs</span></span><br><span class="line">          <span class="comment"># also stop if there are too many changed specs</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">git</span> <span class="string">diff</span> <span class="string">--name-only</span> <span class="string">origin/main</span></span><br><span class="line">            <span class="comment"># make sure to NOT fail if there are no changed specs</span></span><br><span class="line">            <span class="string">n=$(git</span> <span class="string">diff</span> <span class="string">--name-only</span> <span class="string">origin/main</span> <span class="string">|</span> &#123; <span class="string">grep</span> <span class="string">cypress/integration</span> <span class="string">||</span> <span class="literal">true</span><span class="string">;</span> &#125; <span class="string">|</span> <span class="string">wc</span> <span class="string">-l</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-d</span> <span class="string">&#x27; &#x27;</span><span class="string">)</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;number of added or changed Cypress specs $&#123;n&#125;&quot;</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="string">if</span> [ <span class="string">$</span>&#123;<span class="string">n</span>&#125; <span class="string">-lt</span> <span class="number">1</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">              <span class="string">echo</span> <span class="string">&quot;No Cypress specs changed, exiting...&quot;</span></span><br><span class="line">              <span class="string">circleci-agent</span> <span class="string">step</span> <span class="string">halt</span></span><br><span class="line">            <span class="string">fi</span></span><br><span class="line"></span><br><span class="line">            <span class="string">if</span> [ <span class="string">$</span>&#123;<span class="string">n</span>&#125; <span class="string">-gt</span> <span class="number">4</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">              <span class="string">echo</span> <span class="string">&quot;Too many Cypress specs changed, will run them all in the next job...&quot;</span></span><br><span class="line">              <span class="string">circleci-agent</span> <span class="string">step</span> <span class="string">halt</span></span><br><span class="line">            <span class="string">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># to &quot;trick&quot; the Orb into NOT installing again</span></span><br><span class="line">    <span class="comment"># (the dependencies were installed in the Install job)</span></span><br><span class="line">    <span class="comment"># we use the dummy &quot;install-command&quot;</span></span><br><span class="line">    <span class="attr">install-command:</span> <span class="string">echo</span> <span class="string">Already</span> <span class="string">installed</span></span><br><span class="line">    <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">    <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">git</span> <span class="string">diff</span> <span class="string">--name-only</span> <span class="string">origin/main</span></span><br><span class="line">      <span class="comment"># by now we know there are changed Cypress specs</span></span><br><span class="line">      <span class="comment"># so we know grep command will not fail</span></span><br><span class="line">      <span class="string">specs=$(git</span> <span class="string">diff</span> <span class="string">--name-only</span> <span class="string">origin/main</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">cypress/integration</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">&#x27;\n&#x27;</span> <span class="string">&#x27;,&#x27;</span><span class="string">)</span></span><br><span class="line">      <span class="string">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="string">echo</span> <span class="string">&quot;Changed and added Cypress specs&quot;</span></span><br><span class="line">      <span class="string">echo</span> <span class="string">$&#123;specs&#125;</span></span><br><span class="line">      <span class="string">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># we have to form the Cypress run command ourselves</span></span><br><span class="line">    <span class="string">npx</span> <span class="string">cypress</span> <span class="string">run</span> <span class="string">--record</span> <span class="string">--group</span> <span class="string">&quot;1. Changed specs&quot;</span> <span class="string">--spec</span> <span class="string">$&#123;specs&#125;</span></span><br></pre></td></tr></table></figure><p>Let me explain the individual parts of the above job definition.</p><h3><span id="install">Install</span></h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Run</span> <span class="string">changed</span> <span class="string">Cypress</span> <span class="string">tests</span></span><br><span class="line"><span class="attr">executor:</span> <span class="string">with-services</span></span><br><span class="line"><span class="attr">requires:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Install</span></span><br></pre></td></tr></table></figure><p>The modified specs job uses the installed dependencies from the workspace created by the &quot;Install&quot; job, just like &quot;Run all specs&quot; job.</p><h3><span id="only-run-on-pull-requests">Only run on pull requests</span></h3><p>Each <code>cypress/run</code> can execute steps after the checkout step (even if we are using the workspace from the &quot;Install&quot; job and do not check out the code again). In our case, we want to skip the job if this is not a pull request:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post-checkout:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">Stop</span> <span class="string">if</span> <span class="string">not</span> <span class="string">a</span> <span class="string">pull</span> <span class="string">request</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">if</span> [ <span class="string">-z</span> <span class="string">&quot;$CIRCLE_PULL_REQUEST&quot;</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;Not a pull request, exiting...&quot;</span></span><br><span class="line">          <span class="string">circleci-agent</span> <span class="string">step</span> <span class="string">halt</span></span><br><span class="line">        <span class="string">fi</span></span><br></pre></td></tr></table></figure><p>CircleCI has many built-in environment variables, you can see them in each job by expanding the step.</p><p><img src="../images/faster-ci-feedback-circle/variables.gif" alt="Built-in CircleCI environment variables"></p><h3><span id="count-changes-cypress-specs">Count changes Cypress specs</span></h3><p>Next we want to find all changed Cypress specs (modified or added). We can use the <code>git diff --name-only origin/main</code> command to list <em>all</em> changed files in the current branch vs the default branch &quot;main&quot;. The output is a single filename per line, something like</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># let&#39;s say we only have two modified files</span><br><span class="line">$ git diff --name-only origin&#x2F;main</span><br><span class="line">cypress&#x2F;integration&#x2F;a.js</span><br><span class="line">README.md</span><br></pre></td></tr></table></figure><p>Next, we can pipe the output through Unix utility commands to count the number of lines.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># grep filters non-Cypress filenames</span><br><span class="line"># we need to use &quot;|| true;&quot; to ignore exit code 1 from grep if there are no specs</span><br><span class="line"># wc -l counts each spec (one per line)</span><br><span class="line"># tr -d &#39; &#39; removes all white space characters that &quot;wc&quot; outputs</span><br><span class="line">n&#x3D;$(git diff --name-only origin&#x2F;main | &#123; grep cypress&#x2F;integration || true; &#125; | wc -l | tr -d &#39; &#39;)</span><br></pre></td></tr></table></figure><p>The variable <code>n</code> will have a number greater or equal to zero - that&#39;s the number of changed specs in the current pull request. We can skip the remaining job commands if the number is zero. We also can skip running the changed specs if a lot of specs have changed - it would be more efficient to run all specs using parallelization in this case.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;number of added or changed Cypress specs <span class="variable">$&#123;n&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;n&#125;</span> -lt 1 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;No Cypress specs changed, exiting...&quot;</span></span><br><span class="line">  circleci-agent step halt</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;n&#125;</span> -gt 4 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Too many Cypress specs changed, will run them all in the next job...&quot;</span></span><br><span class="line">  circleci-agent step halt</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3><span id="run-changed-specs">Run changed specs</span></h3><p>Now that we know we have a small number of changed Cypress specs, let&#39;s run them.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># to &quot;trick&quot; the Orb into NOT installing again</span></span><br><span class="line"><span class="comment"># (the dependencies were installed in the Install job)</span></span><br><span class="line"><span class="comment"># we use the dummy &quot;install-command&quot;</span></span><br><span class="line"><span class="attr">install-command:</span> <span class="string">echo</span> <span class="string">Already</span> <span class="string">installed</span></span><br><span class="line"><span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line"><span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line"><span class="attr">no-workspace:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">command:</span> <span class="string">|</span></span><br><span class="line">  <span class="string">git</span> <span class="string">diff</span> <span class="string">--name-only</span> <span class="string">origin/main</span></span><br><span class="line">  <span class="comment"># by now we know there are changed Cypress specs</span></span><br><span class="line">  <span class="comment"># so we know grep command will not fail</span></span><br><span class="line">  <span class="string">specs=$(git</span> <span class="string">diff</span> <span class="string">--name-only</span> <span class="string">origin/main</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">cypress/integration</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">&#x27;\n&#x27;</span> <span class="string">&#x27;,&#x27;</span><span class="string">)</span></span><br><span class="line">  <span class="string">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="string">echo</span> <span class="string">&quot;Changed and added Cypress specs&quot;</span></span><br><span class="line">  <span class="string">echo</span> <span class="string">$&#123;specs&#125;</span></span><br><span class="line">  <span class="string">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># we have to form the Cypress run command ourselves</span></span><br><span class="line">  <span class="string">npx</span> <span class="string">cypress</span> <span class="string">run</span> <span class="string">--record</span> <span class="string">--group</span> <span class="string">&quot;1. Changed specs&quot;</span> <span class="string">--spec</span> <span class="string">$&#123;specs&#125;</span></span><br></pre></td></tr></table></figure><p>We skip the NPM install step using <code>install-command: ...</code> parameter. All dependencies have been installed already. We do need to start the application and wait for it to respond before running Cypress. We get the specs filenames and join them into a single string using Unix commands:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># tr &#39;\n&#39; &#39;,&#39; converts multiple lines into a single comma-separated string</span><br><span class="line">specs&#x3D;$(git diff --name-only origin&#x2F;main | grep cypress&#x2F;integration | tr &#39;\n&#39; &#39;,&#39;)</span><br></pre></td></tr></table></figure><p>We already know there are Cypress specs, thus no need to ignore the <code>grep</code> exit code using <code>|| true;</code> syntax. The output before running the tests will be something like:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Changed and added Cypress specs</span><br><span class="line">cypress/integration/data-across-specs/creates-room.js,</span><br><span class="line">number of added or changed Cypress specs 1</span><br></pre></td></tr></table></figure><p>Finally, we need to form the <code>cypress run</code> command ourselves, since we need to pass the changed specs using the <code>--spec</code> command line argument.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx cypress run --record --group <span class="string">&quot;1. Changed specs&quot;</span> --spec <span class="variable">$&#123;specs&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> I give indices to the group names like <code>--group &quot;1. Changed specs&quot;</code> and <code>group: &#39;2. All Circle Tests&#39;</code> because we are recording the test results on Cypress Dashboard. By prefixing the group names with numbers, the Dashboard run lists them in the expected order. You can see the recordings yourself at <a href="https://dashboard.cypress.io/projects/f1j79r">this public project</a></p><p><img src="../images/faster-ci-feedback-circle/order.png" alt="Changed specs before all specs"></p><h2><span id="results">Results</span></h2><p>You can find the complete CircleCI config file <a href="https://github.com/bahmutov/chat.io/blob/main/.circleci/config.yml">here</a> and see the CircleCI runs <a href="https://app.circleci.com/pipelines/github/bahmutov/chat.io">here</a>. When there are no changed Cypress specs, the middle job finishes quickly</p><p><img src="../images/faster-ci-feedback-circle/no-changes.png" alt="Pull request without changed specs"></p><p>But when there is at least one changed Cypress spec, it gets to run first, providing very fast feedback to the team</p><p><img src="../images/faster-ci-feedback-circle/has-changed.png" alt="Tested changed specs first"></p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/faster-ci-feedback/" title="Get Faster Feedback From Your Cypress Tests Running On GitHub Actions">Get Faster Feedback From Your Cypress Tests Running On GitHub Actions</a></li></ul><h2><span id="update-1-support-plugin-and-utils-files">Update 1: support, plugin and utils files</span></h2><p>A pull request can modify other non-spec files inside the <code>cypress</code> folder, which will be included because they might match the <code>grep</code> filter. It is fine - Cypress still filters the <code>--spec ...</code> list using its <code>testFiles</code> and <code>ignoreTestFiles</code> <a href="https://on.cypress.io/configuration">configuration patterns</a>.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># changed files</span><br><span class="line">cypress/integration/cannot-find-room.js</span><br><span class="line">cypress/integration/data-across-specs/utils.js</span><br><span class="line"></span><br><span class="line">number of added or changed Cypress specs 2</span><br><span class="line"># Cypress command output</span><br><span class="line"></span><br><span class="line">  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê</span><br><span class="line">  ‚îÇ Cypress:    8.5.0                                                                              ‚îÇ</span><br><span class="line">  ‚îÇ Browser:    Electron 91 (headless)                                                             ‚îÇ</span><br><span class="line">  ‚îÇ Specs:      1 found (cannot-find-room.js)                                                      ‚îÇ</span><br><span class="line">  ‚îÇ Searched:   cypress/integration/cannot-find-room.js, cypress/integration/data-across-specs/uti ‚îÇ</span><br><span class="line">  ‚îÇ             ls.js,                                                                             ‚îÇ</span><br><span class="line">  ‚îÇ Params:     Tag: false, Group: 1. Changed specs, Parallel: false                               ‚îÇ</span><br><span class="line">  ‚îÇ Run URL:    https://dashboard.cypress.io/projects/f1j79r/runs/151                              ‚îÇ</span><br><span class="line">  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò</span><br></pre></td></tr></table></figure><p>Notice that Cypress found one spec only, ignoring the <code>utils.js</code> file because it is ignored by the <code>cypress.json</code> file setting <code>&quot;ignoreTestFiles&quot;: [&quot;utils.js&quot;, &quot;README.md&quot;]</code>.</p><h2><span id="update-2-circleci-config-syntax">Update 2: CircleCI config syntax</span></h2><p>The CircleCI config file syntax can be intimidating. Luckily, you can check if the file is correct by running the <a href="https://circleci.com/docs/2.0/local-cli/">CircleCI CLI utility</a> locally to verify the file syntax.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> circleci config validate .circleci/config.yml</span></span><br><span class="line">Config file at .circleci/config.yml is valid.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Nobody likes slow tests. Pushing a pull request commit and waiting for 30 minutes for the CI to work through all the specs, just to find 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="circle" scheme="https://glebbahmutov.com/blog/tags/circle/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>Get Faster Feedback From Your Cypress Tests Running On GitHub Actions</title>
    <link href="https://glebbahmutov.com/blog/faster-ci-feedback/"/>
    <id>https://glebbahmutov.com/blog/faster-ci-feedback/</id>
    <published>2021-10-04T04:00:00.000Z</published>
    <updated>2021-10-05T12:53:40.244Z</updated>
    
    <content type="html"><![CDATA[<p>As your project grows, the end-to-end tests take longer and longer to finish. You open a pull request and ... wait for 10-20 minutes for the tests to finish. Then you search the Cypress Dashboard to find the spec with the modified test, just to see if it has failed or passed. All this time, you are thinking to yourself - why can&#39;t Cypress run the <em>modified</em> specs first? While there is no built-in way in Cypress as of October 2021, it is not hard to implement it yourself. In this blog post, I will show how to run new and changed Cypress.io specs first if you are using GitHub Actions. Similar approach could be used with any CI provider, like <a href="/blog/faster-ci-feedback-on-circleci/" title="CircleCI">CircleCI</a>.</p><blockquote class="pullquote"><p>üéÅ You can find the source code for this blog post in the repo <a href="https://github.com/bahmutov/chat.io">bahmutov/chat.io</a></p></blockquote><h2><span id="the-initial-workflow">The initial workflow</span></h2><p>At first, our GitHub workflow file checks out the source code and runs tests using <a href="https://github.com/cypress-io/github-action">Cypress GH Action</a> I have written:</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>, <span class="string">pull_request</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">code</span> <span class="string">üõé</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># run utility services in the background</span></span><br><span class="line">      <span class="comment"># using docker-compose (see docker-compose.yml file)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">docker-compose</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">docker-compose</span> <span class="string">up</span> <span class="string">-d</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># install and cache dependencies, start the server</span></span><br><span class="line">      <span class="comment"># and run all Cypress.io tests</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">tests</span> <span class="string">üß™</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">          <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="comment"># for recording test results and videos to Cypress Dashboard</span></span><br><span class="line">          <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;secrets.CYPRESS_RECORD_KEY&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>The above workflow runs on every commit and on every pull request. We still want to run all the tests for every commit pushed to the <code>main</code> branch. But for the pull requests, we want to run the modified specs first before running all tests. Thus I modify the above <code>ci</code> workflow to only run on commits pushed to the main branch.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="comment"># run all tests on the main branch</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="comment"># rest of the workflow</span></span><br></pre></td></tr></table></figure><p>You can find this workflow in <a href="https://github.com/bahmutov/chat.io/blob/main/.github/workflows/ci.yml">.github/workflows/ci.yml</a>. This workflow is tied to the README badge, showing the current test status of the project:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">![ci</span> <span class="string">status</span>][<span class="string">ci</span> <span class="string">image</span>]<span class="string">][ci</span> <span class="string">url]</span></span><br><span class="line"></span><br><span class="line">[<span class="string">ci</span> <span class="string">image</span>]<span class="string">:</span> <span class="string">https://github.com/bahmutov/chat.io/workflows/ci/badge.svg?branch=main</span></span><br><span class="line">[<span class="string">ci</span> <span class="string">url</span>]<span class="string">:</span> <span class="string">https://github.com/bahmutov/chat.io/actions</span></span><br></pre></td></tr></table></figure><h2><span id="the-pull-request-workflow">The pull request workflow</span></h2><p>I will use a separate workflow file for CI steps to run for the pull requests. You can find the finished workflow file at <a href="https://github.com/bahmutov/chat.io/blob/main/.github/workflows/pr.yml">.github/workflows/pr.yml</a>. Let&#39;s start by cloning the <code>ci.yml</code> and just modifying the <code>on</code> trigger.</p><figure class="highlight yml"><figcaption><span>.github/workflows/pr.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">pr</span></span><br><span class="line"><span class="comment"># on pull request, determine changed or added Cypress specs</span></span><br><span class="line"><span class="comment"># if there are any (but not too many), run them first</span></span><br><span class="line"><span class="comment"># then run all Cypress specs</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">pull_request</span>]</span><br></pre></td></tr></table></figure><p>First, we will need to check out the source code. Because we want to determine the files changed between the PR branch and the default <code>main</code> branch, we need to fetch this information. Thus I will use the parameter <code>fetch-depth: 0</code> with <a href="https://github.com/actions/checkout">actions/checkout</a> action:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/actions/checkout</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">main</span> <span class="string">branch</span> <span class="string">üõé</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="comment"># need to fetch info about all branches</span></span><br><span class="line">    <span class="comment"># to determine the changed spec files</span></span><br><span class="line">    <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>Here is how we can find all changed (added and modified) files between the current branch and the <code>main</code> branch</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">List</span> <span class="string">changed</span> <span class="string">files</span> <span class="string">üóÇ</span></span><br><span class="line">  <span class="comment"># should we get the branch names from the PR?</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">git</span> <span class="string">diff</span> <span class="string">--name-only</span> <span class="string">origin/main</span></span><br></pre></td></tr></table></figure><p>For example, I have started a new branch <code>example-branch</code> and modified the spec <code>rooms.js</code> and added a new spec <code></code></p><p><img src="../images/faster-ci-feedback/status.png" alt="Git local status"></p><p>Let&#39;s commit and push this branch to the remote origin.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;new spec and small tweaks&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push -u</span></span><br></pre></td></tr></table></figure><p>Even when working locally, we can see the changed files between the current branch <code>example-branch</code> and the <code>main</code> one.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git diff --name-only origin/main</span><br><span class="line">cypress/integration/register-using-task2.js</span><br><span class="line">cypress/integration/rooms.js</span><br></pre></td></tr></table></figure><p>The pull request might have other modified files besides the Cypress specs. For example, I will touch the README file too. Here is how we can filter the specs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git diff --name-only origin/main</span></span><br><span class="line">README.md</span><br><span class="line">cypress/integration/register-using-task2.js</span><br><span class="line">cypress/integration/rooms.js</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff --name-only origin/main | grep cypress/integration</span></span><br><span class="line">cypress/integration/register-using-task2.js</span><br><span class="line">cypress/integration/rooms.js</span><br></pre></td></tr></table></figure><p>Super. Later we will need to know the number of modified specs - we can use <code>wc -l</code> to count the lines with the modified Cypress specs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git diff --name-only origin/main | grep cypress/integration | wc -l</span></span><br><span class="line">       2</span><br></pre></td></tr></table></figure><p>Ughh, why is there whitespace around <code>2</code>, let&#39;s trim it</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git diff --name-only origin/main | grep cypress/integration | wc -l | tr -d <span class="string">&#x27; &#x27;</span></span></span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>Now that we know the number of changed specs, let&#39;s also join them into a single string to be passed to the <code>cypress run --spec ...</code> parameter.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git diff --name-only origin/main | grep cypress/integration | tr <span class="string">&#x27;\n&#x27;</span> <span class="string">&#x27;,&#x27;</span></span></span><br><span class="line">cypress/integration/register-using-task2.js,cypress/integration/rooms.js,</span><br></pre></td></tr></table></figure><p>Super. We can compute the number and the spec parameter in the workflow, and even hide the details from other specs by using the <code>output</code> parameters.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">List</span> <span class="string">changed</span> <span class="string">files</span> <span class="string">üóÇ</span></span><br><span class="line">  <span class="comment"># should we get the branch names from the PR?</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">git</span> <span class="string">diff</span> <span class="string">--name-only</span> <span class="string">origin/main</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">List</span> <span class="string">changed</span> <span class="string">specs</span> <span class="string">‚ú®</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">list-changed-specs</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">n=$(git</span> <span class="string">diff</span> <span class="string">--name-only</span> <span class="string">origin/main</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">cypress/integration</span> <span class="string">|</span> <span class="string">wc</span> <span class="string">-l</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-d</span> <span class="string">&#x27; &#x27;</span><span class="string">)</span></span><br><span class="line">    <span class="string">specs=$(git</span> <span class="string">diff</span> <span class="string">--name-only</span> <span class="string">origin/main</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">cypress/integration</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">&#x27;\n&#x27;</span> <span class="string">&#x27;,&#x27;</span><span class="string">)</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;Changed and added Cypress specs&quot;</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">$&#123;specs&#125;</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;number of added or changed Cypress specs $&#123;n&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># output the number of specs and the specs list</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;::set-output name=specsN::$&#123;n&#125;&quot;</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;::set-output name=specs::$&#123;specs&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>Other workflow steps can access the number of changed specs using <code>$&#123;&#123; steps.list-changed-specs.outputs.specsN &#125;&#125;</code> expression syntax. Let&#39;s set up two test jobs - the first one will run if there are changed specs, but not more than 5. If there are lots of modified specs, it makes sense to simply run all of them.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">changed</span> <span class="string">Cypress</span> <span class="string">specs</span> <span class="string">first</span> <span class="string">üå≤</span></span><br><span class="line">  <span class="comment"># it makes sense to run changed specs only if there are a few</span></span><br><span class="line">  <span class="comment"># otherwise just run all specs in the next step</span></span><br><span class="line">  <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.list-changed-specs.outputs.specsN</span> <span class="string">&gt;</span> <span class="number">0</span> <span class="string">&amp;&amp;</span> <span class="string">steps.list-changed-specs.outputs.specsN</span> <span class="string">&lt;</span> <span class="number">5</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">    <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">&#x27;1. Changed specs&#x27;</span></span><br><span class="line">    <span class="attr">spec:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.list-changed-specs.outputs.specs</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="comment"># for recording test results and videos to Cypress Dashboard</span></span><br><span class="line">    <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;secrets.CYPRESS_RECORD_KEY&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if the changed / added Cypress tests passed</span></span><br><span class="line"><span class="comment"># run all Cypress tests to confirm the app is working</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">All</span> <span class="string">Cypress</span> <span class="string">tests</span> <span class="string">üß™</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="comment"># hmm, is the application running?</span></span><br><span class="line">    <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">    <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">&#x27;2. All Cypress tests&#x27;</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="comment"># for recording test results and videos to Cypress Dashboard</span></span><br><span class="line">    <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;secrets.CYPRESS_RECORD_KEY&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>We have two problems in the above workflow:</p><ul><li>we install the NPM dependencies twice (potentially)</li><li>we are trying to run the application using <code>npm start</code> twice (potentially)</li></ul><p>Thus we can optimize the workflow by installing the dependencies just once, and starting the application before running any Cypress tests.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install dependencies</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span> <span class="string">üì¶</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="comment"># just perform install</span></span><br><span class="line">    <span class="attr">runTests:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Start</span> <span class="string">the</span> <span class="string">app</span> <span class="string">üèÅ</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">npm</span> <span class="string">start</span> <span class="string">&amp;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">changed</span> <span class="string">Cypress</span> <span class="string">specs</span> <span class="string">first</span> <span class="string">üå≤</span></span><br><span class="line">  <span class="comment"># it makes sense to run changed specs only if there are a few</span></span><br><span class="line">  <span class="comment"># otherwise just run all specs in the next step</span></span><br><span class="line">  <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.list-changed-specs.outputs.specsN</span> <span class="string">&gt;</span> <span class="number">0</span> <span class="string">&amp;&amp;</span> <span class="string">steps.list-changed-specs.outputs.specsN</span> <span class="string">&lt;</span> <span class="number">5</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="comment"># we have already installed all dependencies above</span></span><br><span class="line">    <span class="attr">install:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># the server is running already, but just wait for it</span></span><br><span class="line">    <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">    <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">&#x27;1. Changed specs&#x27;</span></span><br><span class="line">    <span class="attr">spec:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.list-changed-specs.outputs.specs</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="comment"># for recording test results and videos to Cypress Dashboard</span></span><br><span class="line">    <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;secrets.CYPRESS_RECORD_KEY&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">All</span> <span class="string">Cypress</span> <span class="string">tests</span> <span class="string">üß™</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="comment"># we have already installed all dependencies above</span></span><br><span class="line">    <span class="attr">install:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">    <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">&#x27;2. All Cypress tests&#x27;</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="comment"># for recording test results and videos to Cypress Dashboard</span></span><br><span class="line">    <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;secrets.CYPRESS_RECORD_KEY&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>Tip: Cypress GH Action can do a lot, find all examples in the <a href="https://github.com/cypress-io/github-action">cypress-io/github-action</a> repo.</p><h2><span id="in-action">In action</span></h2><p>Let&#39;s see how the above workflow performs. I have opened the pull request <a href="https://github.com/bahmutov/chat.io/pull/12">#12</a>.</p><p>The GH workflow shows the steps, and that the modified specs task was executed</p><p><img src="../images/faster-ci-feedback/workflow.png" alt="GitHub workflow"></p><p>The <code>list-changed-spec</code> step has calculated the two changed Cypress test files correctly</p><p><img src="../images/faster-ci-feedback/changed.png" alt="The changed Cypress specs"></p><p>The changed tests have finished successfully, while all tests have failed in an unrelated spec <code>group-chat.js</code>. Notice how fast the modified specs have finished vs waiting for all the tests: 30 seconds vs 5 minutes.</p><p><img src="../images/faster-ci-feedback/run.png" alt="The recorded Dashboard run"></p><p>The <code>group-chat.js</code> shows the test fails to log in the first user <code>A</code></p><p><img src="../images/faster-ci-feedback/group-chat.png" alt="The failed test screenshot"></p><p>Let&#39;s modify the <code>group-chat.js</code> - something goes wrong there, let&#39;s change the user name to be a <code>userA</code> instead of just <code>A</code>. Once I push the commit with the username change, the 3 changes specs run:</p><p><img src="../images/faster-ci-feedback/fixed.png" alt="The three modified specs ran first"></p><p>Our fix has solved the problem, and all the Cypress specs have passed. We are good to merge.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/faster-ci-feedback-on-circleci/" title="Get Faster Feedback From Your Cypress Tests Running On CircleCI">Get Faster Feedback From Your Cypress Tests Running On CircleCI</a></li><li><a href="/blog/trying-github-actions/" title="Trying GitHub Actions">Trying GitHub Actions</a></li><li><a href="/blog/parallel-cypress-tests-gh-action/" title="Split Long GitHub Action Workflow Into Parallel Cypress Jobs">Split Long GitHub Action Workflow Into Parallel Cypress Jobs</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;As your project grows, the end-to-end tests take longer and longer to finish. You open a pull request and ... wait for 10-20 minutes for 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Make GraphQL Calls From Cypress Tests</title>
    <link href="https://glebbahmutov.com/blog/request-graphql/"/>
    <id>https://glebbahmutov.com/blog/request-graphql/</id>
    <published>2021-10-01T04:00:00.000Z</published>
    <updated>2021-10-01T16:26:56.327Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="pullquote"><p>üß≠ Find the source code for this blog post in the repository <a href="https://github.com/bahmutov/todo-graphql-example">bahmutov/todo-graphql-example</a></p></blockquote><!-- toc --><ul><li><a href="#fetch-all-todos">Fetch all todos</a></li><li><a href="#use-application-client">Use application client</a></li><li><a href="#add-an-item">Add an item</a></li><li><a href="#share-graphql-client">Share GraphQL client</a><ul><li><a href="#aliases">Aliases</a></li></ul></li><li><a href="#delete-all-todos">Delete all todos</a></li></ul><!-- tocstop --><h2><span id="fetch-all-todos">Fetch all todos</span></h2><p>First, let&#39;s see how our Cypress tests can fetch all todo items. This allows us to confirm what the application is showing for example. Let&#39;s fetch the items using the <a href="https://on.cypress.io/request">cy.request</a> command.</p><figure class="highlight js"><figcaption><span>cypress/integration/request-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;fetches all items&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.request(&#123;</span><br><span class="line">    method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;http://localhost:3000/&#x27;</span>,</span><br><span class="line">    body: &#123;</span><br><span class="line">      operationName: <span class="string">&#x27;allTodos&#x27;</span>,</span><br><span class="line">      query: <span class="string">`</span></span><br><span class="line"><span class="string">        query allTodos &#123;</span></span><br><span class="line"><span class="string">          allTodos &#123;</span></span><br><span class="line"><span class="string">            id,</span></span><br><span class="line"><span class="string">            title,</span></span><br><span class="line"><span class="string">            completed</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      `</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Tip: if you are not sure about the <code>body</code> object, look at the network calls the application is making, and copy the GraphQL query from there.</p><p><img src="../images/request-graphql/all-todos.png" alt="Request list of todos"></p><p>From the response object we can get the list of todos and confirm their number and other details.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.request(&#123; ... &#125;)</span><br><span class="line">  .its(<span class="string">&#x27;body.data.allTodos&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>Note, if you do not know the precise number of items, but there should be &gt;= 0 items use <code>.gte</code> assertion</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.request(&#123; ... &#125;)</span><br><span class="line">  .its(<span class="string">&#x27;body.data.allTodos&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.length.gte&#x27;</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2><span id="use-application-client">Use application client</span></h2><p>Instead of using <code>cy.request</code> directly, we can fetch the items using the same GraphQL client the application is using! Just make sure to set the &quot;cache&quot; to false to avoid race conditions between the application and the test runner&#39;s client&#39;s memory caches.</p><p>Let&#39;s say this is the source file with the GraphQL client exported</p><figure class="highlight js"><figcaption><span>src/graphql-client.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// imports and init code</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> client = <span class="keyword">new</span> ApolloClient(&#123;</span><br><span class="line">  link: concat(operationNameLink, httpLink),</span><br><span class="line">  fetchOptions: &#123;</span><br><span class="line">    mode: <span class="string">&#x27;no-cors&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  cache: <span class="keyword">new</span> InMemoryCache(),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Then we can create an instance of the GraphQL client by importing it from the spec file. Note: this creates a separate client instance from the application&#39;s GraphQL client instance.</p><figure class="highlight js"><figcaption><span>cypress/integration/request-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; gql &#125; <span class="keyword">from</span> <span class="string">&#x27;@apollo/client&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; client &#125; <span class="keyword">from</span> <span class="string">&#x27;../../src/graphql-client&#x27;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;fetches all items using application client&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// make a GraphQL query using the app&#x27;s client</span></span><br><span class="line">  <span class="comment">// https://www.apollographql.com/docs/react/data/queries/</span></span><br><span class="line">  <span class="keyword">const</span> query = gql<span class="string">`</span></span><br><span class="line"><span class="string">    query allTodos &#123;</span></span><br><span class="line"><span class="string">      allTodos &#123;</span></span><br><span class="line"><span class="string">        id</span></span><br><span class="line"><span class="string">        title</span></span><br><span class="line"><span class="string">        completed</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// use https://on.cypress.io/wrap to let the Cypress test</span></span><br><span class="line">  <span class="comment">// wait for the promise returned by the &quot;client.query&quot; to resolve</span></span><br><span class="line">  cy.wrap(</span><br><span class="line">    client.query(&#123;</span><br><span class="line">      query,</span><br><span class="line">      <span class="comment">// it is important to AVOID any caching here</span></span><br><span class="line">      <span class="comment">// and fetch the current server data</span></span><br><span class="line">      fetchPolicy: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  )</span><br><span class="line">    .its(<span class="string">&#x27;data.allTodos&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes</p><p><img src="../images/request-graphql/client.png" alt="Request the list of todos using the loaded GraphQL client"></p><h2><span id="add-an-item">Add an item</span></h2><p>Using the GraphQL client and even sharing the queries between the application and the specs is very convenient. For example, let&#39;s create an item and then confirm it is visible in the application.</p><figure class="highlight js"><figcaption><span>cypress/integration/request-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; gql &#125; <span class="keyword">from</span> <span class="string">&#x27;@apollo/client&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; client &#125; <span class="keyword">from</span> <span class="string">&#x27;../../src/graphql-client&#x27;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;creates one item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> random = Cypress._.random(<span class="number">1e5</span>)</span><br><span class="line">  <span class="keyword">const</span> title = <span class="string">`test <span class="subst">$&#123;random&#125;</span>`</span></span><br><span class="line">  cy.log(<span class="string">`Adding item <span class="subst">$&#123;title&#125;</span>`</span>)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> query = gql<span class="string">`</span></span><br><span class="line"><span class="string">        mutation AddTodo($title: String!) &#123;</span></span><br><span class="line"><span class="string">          createTodo(title: $title, completed: false) &#123;</span></span><br><span class="line"><span class="string">            id</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      `</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// by returning the promise returned by the &quot;client.query&quot;</span></span><br><span class="line">      <span class="comment">// call from the .then callback, we force the test to wait</span></span><br><span class="line">      <span class="comment">// and yield the result to the next Cypress command or assertion</span></span><br><span class="line">      <span class="keyword">return</span> client.query(&#123;</span><br><span class="line">        query,</span><br><span class="line">        variables: &#123;</span><br><span class="line">          title,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// it is important to AVOID any caching here</span></span><br><span class="line">        <span class="comment">// and fetch the current server data</span></span><br><span class="line">        fetchPolicy: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// use zero timeout to avoid &quot;cy.its&quot; retrying</span></span><br><span class="line">    <span class="comment">// since the response object is NOT going to change</span></span><br><span class="line">    .its(<span class="string">&#x27;data.createTodo&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">0</span> &#125;)</span><br><span class="line">    .should(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;id&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the item we have created should be shown in the list</span></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;.todo&#x27;</span>, title)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/request-graphql/created.png" alt="Created an item using GraphQL mutation"></p><h2><span id="share-graphql-client">Share GraphQL client</span></h2><p>If the spec file imports the GraphQL client from the application&#39;s source file, it creates <em>its own instance</em> separate from the GraphQL client created by the application in its iframe. This has some advantages, for example, the test above could execute the GraphQL mutation even before the <code>cy.visit</code> command loaded the application. But if you want to share the GraphQL client between the application and the spec, there is a way:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> client = <span class="keyword">new</span> ApolloClient(&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.Cypress) &#123;</span><br><span class="line">  <span class="built_in">window</span>.graphqlClient = client</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We set the client reference created by the application as a property of the <code>window</code> object. From the spec, we can grab this property and use it to spy and stub client method calls. Here is a typical test that:</p><ol><li>Visits the page. The application creates a GraphQL client object and sets it as <code>window.graphqlClient</code> value.</li><li>The command <code>cy.visit</code> yields the application&#39; window object. Thus we can directly retry until we get the client&#39;s reference using <code>cy.visit(&#39;/&#39;).should(&#39;have.property&#39;, &#39;graphqlClient&#39;)</code> assertion.</li><li>Once we have an object reference, we can use <a href="https://on.cypress.io/spy">cy.spy</a> and <a href="https://on.cypress.io/stub">cy.stub</a> to observe / stub the calls the application is making.</li></ol><figure class="highlight js"><figcaption><span>cypress/integration/spy-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;adds a todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// set up the spy on &quot;client.mutate&quot; method</span></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;graphqlClient&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.spy(client, <span class="string">&#x27;mutate&#x27;</span>).as(<span class="string">&#x27;mutate&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// have the application make the call by using the UI</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.new-todo&#x27;</span>).type(<span class="string">&#x27;Test!!!!&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  <span class="comment">// confirm the call has happened with expected variables</span></span><br><span class="line">  cy.get(<span class="string">&#x27;@mutate&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;firstCall.args.0.variables&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">      title: <span class="string">&#x27;Test!!!!&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    .and(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/request-graphql/spy1.png" alt="Spy on the client.mutate method call"></p><h3><span id="aliases">Aliases</span></h3><p><strong>Tip:</strong> we gave our spy an alias &quot;mutate&quot; using the <a href="https://on.cypress.io/as">cy.as</a> command. We can get these aliases using the test context &quot;this[alias name]&quot; syntax <em>after</em> the <code>.as(name)</code> command has finished. Cypress forces all commands to run one by one, thus we can use the &quot;this[alias name]&quot; syntax by making the access from a <code>.then(function () &#123; ... &#125;)</code>  callback function following the <code>.as</code> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;adds a todo (alias)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// set up the spy on &quot;client.mutate&quot; method</span></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;graphqlClient&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// once the &quot;.as&quot; command finishes</span></span><br><span class="line">      <span class="comment">// we can access the spy using the &quot;this.mutate&quot; property</span></span><br><span class="line">      cy.spy(client, <span class="string">&#x27;mutate&#x27;</span>).as(<span class="string">&#x27;mutate&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// have the application make the call by using the UI</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.new-todo&#x27;</span>)</span><br><span class="line">    .type(<span class="string">&#x27;Test!!!!&#123;enter&#125;&#x27;</span>)</span><br><span class="line">    <span class="comment">// note the &quot;function () &#123; ... &#125;&quot; syntax is used to</span></span><br><span class="line">    <span class="comment">// make sure the &quot;this&quot; points at the test context object</span></span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// confirm the call has happened with expected variables</span></span><br><span class="line">      <span class="comment">// by now the client.mutate has been called,</span></span><br><span class="line">      <span class="comment">// and the alias has been set (no retries for here)</span></span><br><span class="line">      expect(<span class="built_in">this</span>.mutate).to.have.been.calledOnce</span><br><span class="line">      expect(<span class="built_in">this</span>.mutate.firstCall.args[<span class="number">0</span>].variables)</span><br><span class="line">        .to.deep.include(&#123;</span><br><span class="line">          title: <span class="string">&#x27;Test!!!!&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        .and.to.have.property(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Since the <code>expect(this.mutate).to.have.been.calledOnce</code> does not <a href="https://on.cypress.io/retry-ability">retry</a> make sure to use it only <em>after</em> the client call has been made for sure.</p><p><img src="../images/request-graphql/spy2.png" alt="Use test context to access the aliased spy"></p><h2><span id="delete-all-todos">Delete all todos</span></h2><p>A very common problem for an end-to-end test is to clear the existing data before the test. Imagine you have a GraphQL endpoint, and you could get all Todo items? How would you go about deleting them? If you do not have a mutation &quot;delete all X&quot;, then you need to delete each item one by one.</p><p>Here is how to do this: first let&#39;s write a reusable method and place it in the <a href="https://github.com/bahmutov/todo-graphql-example/blob/master/cypress/integration/utils.js">utils.js</a> file.</p><figure class="highlight js"><figcaption><span>cypress/integration/utils.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; gql &#125; <span class="keyword">from</span> <span class="string">&#x27;@apollo/client&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; client &#125; <span class="keyword">from</span> <span class="string">&#x27;../../src/graphql-client&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// fetches all todo items, grabs their IDs, and deletes them</span></span><br><span class="line">  cy.log(<span class="string">&#x27;**deleteAll**&#x27;</span>)</span><br><span class="line">    .then(<span class="function">() =&gt;</span></span><br><span class="line">      client.query(&#123;</span><br><span class="line">        <span class="comment">// it is important to AVOID any caching here</span></span><br><span class="line">        <span class="comment">// and fetch the current server data</span></span><br><span class="line">        fetchPolicy: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        query: gql<span class="string">`</span></span><br><span class="line"><span class="string">          query getAllTodos &#123;</span></span><br><span class="line"><span class="string">            allTodos &#123;</span></span><br><span class="line"><span class="string">              id</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">    )</span><br><span class="line">    .its(<span class="string">&#x27;data.allTodos&#x27;</span>)</span><br><span class="line">    <span class="comment">// from each item, grab just the property &quot;id&quot;</span></span><br><span class="line">    .then(<span class="function">(<span class="params">items</span>) =&gt;</span> Cypress._.map(items, <span class="string">&#x27;id&#x27;</span>))</span><br><span class="line">    .then(<span class="function">(<span class="params">ids</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!ids.length) &#123;</span><br><span class="line">        cy.log(<span class="string">&#x27;Nothing to delete&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      cy.log(<span class="string">`Found **<span class="subst">$&#123;ids.length&#125;</span>** todos`</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// delete all items one by one</span></span><br><span class="line">      ids.forEach(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> mutation = gql<span class="string">`</span></span><br><span class="line"><span class="string">            mutation deleteTodo &#123;</span></span><br><span class="line"><span class="string">              removeTodo(id: &quot;<span class="subst">$&#123;id&#125;</span>&quot;) &#123;</span></span><br><span class="line"><span class="string">                id</span></span><br><span class="line"><span class="string">              &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          `</span></span><br><span class="line">        cy.log(<span class="string">`deleting item id:**<span class="subst">$&#123;id&#125;</span>**`</span>).then(</span><br><span class="line">          () =&gt;</span><br><span class="line">            client.mutate(&#123;</span><br><span class="line">              mutation,</span><br><span class="line">            &#125;),</span><br><span class="line">          &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can use this method before each test, or whenever we want:</p><figure class="highlight js"><figcaption><span>cypress/integration/delete-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="keyword">import</span> &#123; deleteAll &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Delete items&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  beforeEach(deleteAll)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;deletes all items by making GraphQL calls&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.intercept(&#123;</span><br><span class="line">      method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">      url: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        <span class="string">&#x27;x-gql-operation-name&#x27;</span>: <span class="string">&#x27;allTodos&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;).as(<span class="string">&#x27;allTodos&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.wait(<span class="string">&#x27;@allTodos&#x27;</span>).its(<span class="string">&#x27;response.body.data.allTodos&#x27;</span>).should(<span class="string">&#x27;be.empty&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/request-graphql/delete-all.gif" alt="Deleting each item one by one"></p><p>You can see deleting all items using GraphQL calls in this video below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/l7E7K7x7V8g" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Happy testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;pullquote&quot;&gt;&lt;p&gt;üß≠ Find the source code for this blog post in the repository &lt;a href=&quot;https://github.com/bahmutov/todo-grap
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="graphql" scheme="https://glebbahmutov.com/blog/tags/graphql/"/>
    
  </entry>
  
  <entry>
    <title>Dynamic Tests From Cypress Fixture</title>
    <link href="https://glebbahmutov.com/blog/dynamic-tests-from-fixture/"/>
    <id>https://glebbahmutov.com/blog/dynamic-tests-from-fixture/</id>
    <published>2021-09-27T04:00:00.000Z</published>
    <updated>2021-09-27T16:14:05.585Z</updated>
    
    <content type="html"><![CDATA[<p>Often, you need to run the same test with different data. For example, one might want to test how the backend API handles creating an item for multiple items with different parameters. We could write a separate test for each item.</p><blockquote class="pullquote"><p>üîé You can find the source code for this blog post in <a href="https://github.com/bahmutov/todo-graphql-example">bahmutov/todo-graphql-example</a> repo.</p></blockquote><h2><span id="hard-coded-data">Hard-coded data</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;Creates each item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;creates 1&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.request(&#123;</span><br><span class="line">      body: &#123;</span><br><span class="line">        title: <span class="string">&#x27;use GraphQL&#x27;</span>,</span><br><span class="line">        completed: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.contains(<span class="string">&#x27;.todo&#x27;</span>, <span class="string">&#x27;use GraphQL&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;creates 2&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.request(&#123;</span><br><span class="line">      body: &#123;</span><br><span class="line">        title: <span class="string">&#x27;write React frontend&#x27;</span>,</span><br><span class="line">        completed: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.contains(<span class="string">&#x27;.todo&#x27;</span>, <span class="string">&#x27;write React frontend&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;creates 3&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.request(&#123;</span><br><span class="line">      body: &#123;</span><br><span class="line">        title: <span class="string">&#x27;nice&#x27;</span>,</span><br><span class="line">        completed: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.contains(<span class="string">&#x27;.todo&#x27;</span>, <span class="string">&#x27;nice&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="fixture-data">Fixture data</span></h2><p>The separate tests have a lot of repetitive code, and we are not even checking if the item is marked completed on the page! We could the items in the JSON file to be loaded and used in a single test.</p><figure class="highlight json"><figcaption><span>cypress/fixtures/three.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;allTodos&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;use GraphQL&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;completed&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;__typename&quot;</span>: <span class="string">&quot;Todo&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;write React frontend&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;completed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;__typename&quot;</span>: <span class="string">&quot;Todo&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;21&quot;</span>, <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;nice&quot;</span>, <span class="attr">&quot;completed&quot;</span>: <span class="literal">true</span>, <span class="attr">&quot;__typename&quot;</span>: <span class="string">&quot;Todo&quot;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can load the fixture file using <a href="https://on.cypress.io/fixture">cy.fixture</a> command. Then we can iterate over the items, all in a single test.</p><figure class="highlight js"><figcaption><span>cypress/integration/dynamic-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;in a single test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.fixture(<span class="string">&#x27;three.json&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;data.allTodos&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</span><br><span class="line">      list.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// clear all existing items</span></span><br><span class="line">        deleteAll()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// create the item using a network call</span></span><br><span class="line">        cy.request(&#123;</span><br><span class="line">          method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">          url: <span class="string">&#x27;http://localhost:3000/&#x27;</span>,</span><br><span class="line">          body: &#123;</span><br><span class="line">            operationName: <span class="string">&#x27;AddTodo&#x27;</span>,</span><br><span class="line">            query: <span class="string">`</span></span><br><span class="line"><span class="string">            mutation AddTodo($title: String!, $completed: Boolean!) &#123;</span></span><br><span class="line"><span class="string">              createTodo(title: $title, completed: $completed) &#123;</span></span><br><span class="line"><span class="string">                id</span></span><br><span class="line"><span class="string">              &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          `</span>,</span><br><span class="line">            variables: &#123;</span><br><span class="line">              title: item.title,</span><br><span class="line">              completed: item.completed,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// visit the page and check the item is present</span></span><br><span class="line">        cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> classAssertion = item.completed</span><br><span class="line">          ? <span class="string">&#x27;have.class&#x27;</span></span><br><span class="line">          : <span class="string">&#x27;not.have.class&#x27;</span></span><br><span class="line">        cy.contains(<span class="string">&#x27;.todo&#x27;</span>, item.title).should(classAssertion, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test is a little cumbersome to read, and if a single request goes wrong, the test stops without trying to testing other items from the list. We would like to have a separate test for each item instead.</p><h2><span id="separate-tests">Separate tests</span></h2><figure class="highlight js"><figcaption><span>cypress/integration/dynamic-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;Creates each item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> items</span><br><span class="line">  <span class="comment">// DOES NOT WORK, CANNOT ADD NEW TESTS</span></span><br><span class="line">  <span class="comment">// AFTER THE RUN HAS STARTED</span></span><br><span class="line">  before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.fixture(<span class="string">&#x27;three.json&#x27;</span>).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      items = data.data.allTodos</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// hmm, how do we create a test for each item?</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If we load the list <em>dynamically</em> using <a href="https://on.cypress.io/fixture">cy.fixture</a> command, then the tests are already running, and it is too late to add new tests. Thus we need to load the fixture <em>before</em> any tests execute. We can import the JSON file instead of using <code>cy.fixture</code> - that way the bundler will load the JSON file into the spec and the loaded data will be available to define tests.</p><figure class="highlight js"><figcaption><span>cypress/integration/dynamic-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import the fixture with the data for new tests</span></span><br><span class="line"><span class="keyword">import</span> &#123; data &#125; <span class="keyword">from</span> <span class="string">&#x27;../fixtures/three.json&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; deleteAll &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Creates each item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  beforeEach(deleteAll)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create a test for each item imported from the fixture</span></span><br><span class="line">  data.allTodos.forEach(<span class="function">(<span class="params">item, k</span>) =&gt;</span> &#123;</span><br><span class="line">    it(<span class="string">`creates item <span class="subst">$&#123;k + <span class="number">1</span>&#125;</span>`</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// create the item using a network call</span></span><br><span class="line">      cy.request(&#123;</span><br><span class="line">        method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        url: <span class="string">&#x27;http://localhost:3000/&#x27;</span>,</span><br><span class="line">        body: &#123;</span><br><span class="line">          operationName: <span class="string">&#x27;AddTodo&#x27;</span>,</span><br><span class="line">          query: <span class="string">`</span></span><br><span class="line"><span class="string">              mutation AddTodo($title: String!, $completed: Boolean!) &#123;</span></span><br><span class="line"><span class="string">                createTodo(title: $title, completed: $completed) &#123;</span></span><br><span class="line"><span class="string">                  id</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">              &#125;</span></span><br><span class="line"><span class="string">            `</span>,</span><br><span class="line">          variables: &#123;</span><br><span class="line">            title: item.title,</span><br><span class="line">            completed: item.completed,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// visit the page and check the item is present</span></span><br><span class="line">      cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> classAssertion = item.completed ? <span class="string">&#x27;have.class&#x27;</span> : <span class="string">&#x27;not.have.class&#x27;</span></span><br><span class="line">      cy.contains(<span class="string">&#x27;.todo&#x27;</span>, item.title).should(classAssertion, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above approach creates a separate test for each item imported from the fixture. It is equivalent to having the items as a &quot;static&quot; list present in the spec file itself:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [&#123;</span><br><span class="line">  title: <span class="string">&#x27;first test&#x27;</span>,</span><br><span class="line">  completed: <span class="literal">false</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  title: <span class="string">&#x27;second test&#x27;</span>,</span><br><span class="line">  completed: <span class="literal">true</span></span><br><span class="line">&#125;]</span><br><span class="line">list.forEach(<span class="function">(<span class="params">item, k</span>) =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">`creates item <span class="subst">$&#123;k + <span class="number">1</span>&#125;</span>`</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// use the item</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>But I like having the data in a fixture file to clearly separate the test logic from the test data.</p><h2><span id="video">Video</span></h2><p>I have recorded a short video explaining the above approach, see it below</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/EXVwvJrUGJ8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/import-cypress-fixtures/" title="Import Cypress fixtures">Import Cypress fixtures</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Often, you need to run the same test with different data. For example, one might want to test how the backend API handles creating an ite
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>What I Do After A Conference</title>
    <link href="https://glebbahmutov.com/blog/what-i-do-after-a-conference/"/>
    <id>https://glebbahmutov.com/blog/what-i-do-after-a-conference/</id>
    <published>2021-09-14T04:00:00.000Z</published>
    <updated>2021-09-14T13:52:59.212Z</updated>
    
    <content type="html"><![CDATA[<p>Here are the steps I take to ensure that each technical talk I deliver at a meetup, an online event, or at a conference brings me benefits long after the rounds of applause are over.</p><ol><li>A day or two before the conference I make my slide deck public. I use <a href="https://slides.com/bahmutov">slides.com/bahmutov</a> to create my presentations, and making the URL public allows me to quickly practice by flipping through the slides without the hassle of signing into my account.</li><li>I place the public presentation URL on my first / introduction slide to allow the audience to follow along during the talk. Sometimes my slides are code-heavy and one might prefer looking over them up close rather that just seeing them on the stage screen.</li></ol><p><img src="../images/after-conf/intro-slide.png" alt="My first slide shows the presentation URL"></p><ol start="3"><li>I always include the conference logo and name somewhere at the first and last slides. I take these images from the conference sites :) Someone scanning my slide decks should immediately see that the speaker has spoken at a variety of technical events.</li></ol><p><img src="../images/after-conf/logos.png" alt="First slides include the event logo"></p><p><strong>Tip:</strong> the position of the logo on the slides depends on the event format. For online events, I typically reserve the bottom right corner for my video feed. This <a href="https://www.youtube.com/watch?v=PIxaFbMBez0">ReactConf Finland</a> video shows a typical example.</p><p><img src="../images/after-conf/reactconf.png" alt="Do not put any info into the corner with the video feed"></p><p>For more tips about the slide formatting, see my blog post <a href="/blog/better-slide-format/" title="Better slide format">Better slide format</a>.</p><ol start="4"><li>Immediately after the conference I tweet / post the link to the slides and thank the audience for attending my talk. Here is an example tweet from a recent event</li></ol><p><img src="../images/after-conf/thankyou.png" alt="A tweet after the conference with the link to the presentation"></p><p>Do not forget to tag the conference so other people attending the event can find it.</p><ol start="5"><li>Once the video of your talk comes out (these days it happens very quickly), make sure to add the link to the talk&#39;s description and the slides. Here is my ReactConf Finland talk again: the link to the video is both on the slide and in the talk&#39;s description.</li></ol><p><img src="../images/after-conf/video.png" alt="Link to the video of the talk from the slides"></p><p><strong>Tip:</strong> always include the conference name and year in the talk&#39;s description so people know if the talk is recent. Something like &quot;Presented at ReactConf Finland 2021&quot;.</p><ol start="6"><li>If the video description does not include the link to the slides, add your own comment.</li></ol><p><img src="../images/after-conf/link-to-slides.png" alt="Link to the slides from the video"></p><ol start="7"><li>If your talk is based on the blog post (most of my talks start as one or multiple blog posts), definitely link and even embed the talk into the blog post. Make sure the presentation slides are also linked and even embedded like shown below from the blog post <a href="/blog/testing-react-native-app-using-cypress/" title="The Complete Guide to Testing React Native App Using Cypress">The Complete Guide to Testing React Native App Using Cypress</a>.</li></ol><p><img src="../images/after-conf/from-blog.png" alt="Link to the slides and video from the blog posts"></p><p>Sometimes I want to read about a topic, other times I want to watch someone explain it to me. And sometimes I simply want a summary and that&#39;s what the slide deck is for. So by linking all three formats to each other you cover every potential member of your audience.</p><ol start="8"><li>A day or two after the event, email a &quot;thank you&quot; to the organizers who have invited you. They might have taken a gamble inviting you, or you might not be even their first choice. But it is very very stressful to organize a conference, and they did it, and we never thank them enough for it. Tweet your &quot;thank you&quot; publicly, tag their company for more impact.</li></ol><h2><span id="final-thoughts">Final thoughts</span></h2><p>By making each resource link to the others, you make yourself discoverable. With time, these links will pay off. Someone will find your blog posts, then watch a linked video, will share the link with co-workers. They will jump to your other presentations, maybe even to your other blog posts. You can observe it yourself. Count the number of people seated in the audience during your talk. Was it 10? 100? 1000? Now go back to the video of your talk, or to the slides - if there is a counter, that number will be 10x that! Your audience is both the people present at the talk, and the online audience that finds and watches your talk later. Make it simple to find your work.</p><p>Here are some counters from a few physical events I did in 2019. None of these events had more than 50 people present at my presentation. Yet over 2 years, each slide deck was viewed by more than 1000 people. There is a long tail to every public presentation!</p><p><img src="../images/after-conf/counters.png" alt="Number of viewers for a few of my online presentation slide decks"></p><p>Finally, the physical conferences (even the online events!) are all about networking. Yes, you are making a presentation, but that takes such a small portion of your time; spend the rest talking to as many people as you can. You always find interesting, charming, wise people at every event you get a chance to speak at. Enjoy this time.</p><h2><span id="thank-you">Thank you</span></h2><p>This blog post was created based on the discussion with <a href="https://twitter.com/AtilaFassina">Atila Fassina</a> and <a href="https://twitter.com/giltayar">Gil Tayar</a> who are amazing people.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Here are the steps I take to ensure that each technical talk I deliver at a meetup, an online event, or at a conference brings me benefit
      
    
    </summary>
    
      <category term="people" scheme="https://glebbahmutov.com/blog/categories/people/"/>
    
    
      <category term="presentation" scheme="https://glebbahmutov.com/blog/tags/presentation/"/>
    
  </entry>
  
  <entry>
    <title>Test Plain Or Markdown File Using Cypress</title>
    <link href="https://glebbahmutov.com/blog/test-plain-or-markdown-file/"/>
    <id>https://glebbahmutov.com/blog/test-plain-or-markdown-file/</id>
    <published>2021-09-09T04:00:00.000Z</published>
    <updated>2021-09-09T05:54:54.947Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s imagine a web server that also returns a plain text file. We are already testing the web pages using Cypress test runner, so how can we request and validate the plain text file? What if the returned file is in Markdown format? Let&#39;s learn.</p><blockquote class="pullquote"><p>üéÅ You can find the source code for the application and the Cypress tests in the repo <a href="https://github.com/bahmutov/check-text-file-example">bahmutov/check-text-file-example</a>.</p></blockquote><h2><span id="requesting-the-file">Requesting the file</span></h2><p>To download the file we can use the <a href="https://on.cypress.io/request">cy.request</a> command.</p><figure class="highlight js"><figcaption><span>spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;receives the right text file&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// request the text file using &quot;baseUrl + /text-file&quot; endpoint</span></span><br><span class="line">  cy.request(<span class="string">&#x27;/text-file&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>There is no page in the browser, but we can still see the server&#39;s response by clicking on the &quot;REQUEST&quot; command. The response is dumped in the DevTools Console.</p><p><img src="../images/text-file/file.png" alt="File response"></p><p>We can save the response as a file using the <a href="https://on.cypress.io/writefile">cy.writeFile</a> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;receives the right text file&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// request the text file using &quot;baseUrl + /text-file&quot; endpoint</span></span><br><span class="line">  cy.request(<span class="string">&#x27;/text-file&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// cy.writeFile automatically creates the output folder</span></span><br><span class="line">      cy.writeFile(<span class="string">&#x27;output/file.txt&#x27;</span>, text)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/text-file/save.png" alt="Write file to disk"></p><p><strong>Tip:</strong> store the downloaded file as a test artifact on your CI to be able to debug the testing step.</p><h2><span id="compare-the-file-text">Compare the file text</span></h2><p>We can compare the response text with the expected string. We can put the expected string inline into the spec file, or store it as a file in the repository, which we can read using the <a href="https://on.cypress.io/readfile">cy.readFile</a> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;receives the right text file&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// request the text file using &quot;baseUrl + /text-file&quot; endpoint</span></span><br><span class="line">  cy.request(<span class="string">&#x27;/text-file&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// cy.writeFile automatically creates the output folder</span></span><br><span class="line">      cy.writeFile(<span class="string">&#x27;output/file.txt&#x27;</span>, text)</span><br><span class="line"></span><br><span class="line">      cy.readFile(<span class="string">&#x27;expected/file.txt&#x27;</span>).then(<span class="function">(<span class="params">expectedText</span>) =&gt;</span> &#123;</span><br><span class="line">        expect(text).to.equal(expectedText)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/text-file/compare.png" alt="Compare the result to the file from the disk"></p><p>You can also check the file text for specific string or against a regular expression.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;receives the right text file&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// request the text file using &quot;baseUrl + /text-file&quot; endpoint</span></span><br><span class="line">  cy.request(<span class="string">&#x27;/text-file&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// cy.writeFile automatically creates the output folder</span></span><br><span class="line">      cy.writeFile(<span class="string">&#x27;output/file.txt&#x27;</span>, text)</span><br><span class="line"></span><br><span class="line">      cy.readFile(<span class="string">&#x27;expected/file.txt&#x27;</span>).then(<span class="function">(<span class="params">expectedText</span>) =&gt;</span> &#123;</span><br><span class="line">        expect(text).to.equal(expectedText)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      expect(text).to.include(<span class="string">&#x27;This is a file&#x27;</span>)</span><br><span class="line">      expect(text).to.match(<span class="regexp">/a plain/i</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/text-file/expect.png" alt="Checking the text using assertions"></p><p><strong>Tip:</strong> Cypress includes a large number of <a href="https://glebbahmutov.com/cypress-examples/commands/assertions.html">assertions</a> thanks to the bundled Chai library.</p><h2><span id="show-the-file">Show the file</span></h2><p>One thing we are not using during this test is the application iframe itself - it is empty because we are not visiting the site. We cannot use the <a href="https://on.cypress.io/visit">cy.visit</a> command because the returned content type is NOT <code>text/html</code>. Thus we need to write the contents into the document ourselves.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;visits the text file&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.request(<span class="string">&#x27;/text-file&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.document().invoke(<span class="string">&#x27;write&#x27;</span>, text)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> you can clear the application iframe before writing the new content by visiting the blank page, see the blog post <a href="/blog/cypress-tips-and-tricks/" title="Cypress Tips and Tricks">Cypress Tips and Tricks</a>.</p><p><img src="../images/text-file/write.png" alt="The plain text written into the application iframe"></p><p>The text does not look right - because it does not show the newlines correctly. Let&#39;s wrap the text in a <code>&lt;pre&gt;</code> element.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;visits the text file&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.request(<span class="string">&#x27;/text-file&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.document().invoke(<span class="string">&#x27;write&#x27;</span>, <span class="string">&#x27;&lt;pre&gt;&#x27;</span> + text + <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/text-file/wrap.png" alt="Preformatted text"></p><p>Much better.</p><p>Now we can use the other Cypress commands like <a href="https://on.cypress.io/contains">cy.contains</a> to assert the text.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;visits the text file&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.request(<span class="string">&#x27;/text-file&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.document().invoke(<span class="string">&#x27;write&#x27;</span>, <span class="string">&#x27;&lt;pre&gt;&#x27;</span> + text + <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  cy.contains(<span class="string">&#x27;This is a file&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/text-file/contains.png" alt="Using the cy.contains command"></p><h2><span id="markdown-files">Markdown files</span></h2><p>What if we receive a plain text Markdown file? We can render it using the <code>&lt;pre&gt;</code> element.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;visits the Markdown file&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.request(<span class="string">&#x27;/markdown-file&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.document().invoke(<span class="string">&#x27;write&#x27;</span>, <span class="string">&#x27;&lt;pre&gt;&#x27;</span> + text + <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  cy.contains(<span class="string">&#x27;- one&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;- two&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;- three&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/text-file/md1.png" alt="Checking the contents of the Markdown file"></p><p>Markdown file has structure. We can convert Markdown into HTML using a 3rd party library instead of using the <code>&lt;pre&gt;</code> element when writing the document. Then the test could use the CSS selectors to query the contents better.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mdToHtml = <span class="built_in">require</span>(<span class="string">&#x27;nano-markdown&#x27;</span>)</span><br><span class="line">it(<span class="string">&#x27;converts the Markdown file&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.request(<span class="string">&#x27;/markdown-file&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    .then(mdToHtml)</span><br><span class="line">    .then(<span class="function">(<span class="params">html</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.document().invoke(<span class="string">&#x27;write&#x27;</span>, html)</span><br><span class="line">    &#125;)</span><br><span class="line">  cy.contains(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Example Topic&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">    .and(<span class="function">(<span class="params">$list</span>) =&gt;</span> &#123;</span><br><span class="line">      expect($list[<span class="number">0</span>]).to.contain(<span class="string">&#x27;one&#x27;</span>)</span><br><span class="line">      expect($list[<span class="number">1</span>]).to.contain(<span class="string">&#x27;two&#x27;</span>)</span><br><span class="line">      expect($list[<span class="number">2</span>]).to.contain(<span class="string">&#x27;three&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The HTML document from the converted Markdown text certainly looks nice.</p><p><img src="../images/text-file/md2.png" alt="Markdown file converted to HTML and shown in the app iframe"></p><h2><span id="running-all-tests">Running all tests</span></h2><p>When running all tests together, the <code>document.write(...)</code> command keeps appending to the same document.</p><p><img src="../images/text-file/all-tests.png" alt="Output of running all tests in the spec file"></p><p>You can clear the document before writing HTML using the <code>document.open()</code> method</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function">(<span class="params">html</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.document().invoke(<span class="string">&#x27;open&#x27;</span>)</span><br><span class="line">  cy.document().invoke(<span class="string">&#x27;write&#x27;</span>, html)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We can open the document before each test</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.document().invoke(<span class="string">&#x27;open&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Alternatively, we could visit the blank page to clear the document before each test. See this tip in the blog post <a href="/blog/visit-blank-page-between-tests/" title="Visit The Blank Page Between Cypress Tests">Visit The Blank Page Between Cypress Tests</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s imagine a web server that also returns a plain text file. We are already testing the web pages using Cypress test runner, so ho
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Skip Cypress Install On CI</title>
    <link href="https://glebbahmutov.com/blog/skip-cypress-install-on-ci/"/>
    <id>https://glebbahmutov.com/blog/skip-cypress-install-on-ci/</id>
    <published>2021-09-04T04:00:00.000Z</published>
    <updated>2021-09-06T08:30:59.523Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s say you want to introduce Cypress End-to-End tests in your company. You probably already have a repository with lots of tests, and the CI build script is ... complicated. Can you add Cypress without modifying lots of installation and caching steps in the CI config file? Can you avoid your coworkers&#39; anger?</p><p>Sure. At first, you can get away with <em>not installing</em> Cypress on CI. You can still run your initial tests (that are probably going to be simple) using a <a href="https://github.com/cypress-io/cypress-docker-images">cypress/included</a> Docker image with Cypress pre-installed.</p><p>Let&#39;s take an example application in <a href="https://github.com/bahmutov/todomvc-vercel">bahmutov/todomvc-vercel</a>. It is deployed to Vercel platform, and runs just the linting step using the GitHub Actions <a href="https://github.com/bahmutov/todomvc-vercel/blob/main/.github/workflows/lint.yml">lint.yml</a> workflow.</p><figure class="highlight yml"><figcaption><span>.github/workflows/lint.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">lint</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">lint:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="comment"># https://github.com/bahmutov/npm-install</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">bahmutov/npm-install@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Lint</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">lint</span></span><br></pre></td></tr></table></figure><p>Let&#39;s add Cypress NPM dependency.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D cypress</span></span><br></pre></td></tr></table></figure><p>We can write a few tests, like this sanity <a href="https://github.com/bahmutov/todomvc-vercel/blob/main/cypress/integration/spec.js">spec.js</a></p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;works&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// application starts with 3 todos</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=new-todo]&#x27;</span>).type(<span class="string">&#x27;Add tests!&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">    .eq(<span class="number">3</span>)</span><br><span class="line">    .should(<span class="string">&#x27;include.text&#x27;</span>, <span class="string">&#x27;Add tests!&#x27;</span>)</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let&#39;s see what happens next:</p><ul><li>the coworkers all get a Cypress binary on their machines the next time they run <code>npm install</code> or <code>yarn install</code>. This binary is stored in the central folder on their machine, thus it is downloaded and unzipped once per Cypress version. It is 1-2 minute process, but that is acceptable.</li><li>the continuous integration server will install the Cypress binary on every workflow execution, to avoid this you need to configure <a href="https://on.cypress.io/caching">Cypress caching</a>. If you have a complicated CI workflow, this will be complicated.</li></ul><p>We can take a middle path: we can use Cypress to run our tests without installing it on the CI during the NPM installation. Let&#39;s keep our lint workflow and just stop it from downloading the Cypress binary - since it is not going to run any Cypress tests.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">  <span class="comment"># https://github.com/bahmutov/npm-install</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">bahmutov/npm-install@v1</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="comment"># avoid downloading and unzipping Cypress binary</span></span><br><span class="line">    <span class="comment"># which saves time - we do not plan to run Cypress tests</span></span><br><span class="line">    <span class="comment"># in this lint workflow, see</span></span><br><span class="line">    <span class="comment"># https://on.cypress.io/installing</span></span><br><span class="line">    <span class="attr">CYPRESS_INSTALL_BINARY:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>By setting the environment variable <code>CYPRESS_INSTALL_BINARY: 0</code> during the NPM installation step, we can skip the Cypress binary download. All our complicated workflows stay (almost) the same, and the caching during those workflows never sees any delays.</p><p>Let&#39;s move to the next task: we do want to run our Cypress tests after the deploy. Here is the simplest trick I know of: use <code>cypress/included:x.y.z</code> Docker image, check out the source code to bring the specs to the local container, and call <code>cypress run</code> to execute all tests. For example, after Vercel deploys the application, it triggers the GitHub deploy event. If the deploy is successful, we can grab the deployed URL and run Cypress tests against it.</p><figure class="highlight yml"><figcaption><span>.github/workflows/deploy.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">deployment_status</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">tests-after-deploy:</span></span><br><span class="line">    <span class="comment"># only runs this job on successful deploy</span></span><br><span class="line">    <span class="comment"># https://glebbahmutov.com/blog/develop-preview-test/</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">github.event.deployment_status.state</span> <span class="string">==</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="comment"># Use a Docker image with Cypress installed globally</span></span><br><span class="line">    <span class="comment"># https://github.com/cypress-io/github-action#docker-image</span></span><br><span class="line">    <span class="comment"># https://github.com/cypress-io/cypress-docker-images</span></span><br><span class="line">    <span class="attr">container:</span> <span class="string">cypress/included:8.3.1</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># see if there is GITHUB_REF</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">GITHUB_REF</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;GITHUB_REF is $&#123;GITHUB_REF&#125;&quot;</span></span><br><span class="line">      <span class="comment"># to compute the branch name for the deployed commit</span></span><br><span class="line">      <span class="comment"># need to grab the repo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Notice that we do not install any dependencies in this job</span></span><br><span class="line">      <span class="comment"># Our Cypress tests do not use any plugins, so we just</span></span><br><span class="line">      <span class="comment"># need to invoke the global Cypress from the Docker image</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;Vercel unique deployment URL is $<span class="template-variable">&#123;&#123; github.event.deployment_status.target_url &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;Deployed commit $<span class="template-variable">&#123;&#123; github.sha &#125;&#125;</span>&quot;</span></span><br><span class="line">          <span class="string">export</span> <span class="string">BRANCH_NAME=$(git</span> <span class="string">show</span> <span class="string">-s</span> <span class="string">--pretty=%D</span> <span class="string">HEAD</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-s</span> <span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;\n&#x27;</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">&#x27;s/^ //&#x27;</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">-e</span> <span class="string">&#x27;origin/&#x27;</span> <span class="string">|</span> <span class="string">head</span> <span class="number">-1</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">&#x27;s/\origin\///g&#x27;</span><span class="string">)</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;Deployed branch $&#123;BRANCH_NAME&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="string">export</span> <span class="string">CYPRESS_baseUrl=$&#123;&#123;</span> <span class="string">github.event.deployment_status.target_url</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="string">cypress</span> <span class="string">run</span></span><br></pre></td></tr></table></figure><p>You can see the tests running at <a href="https://github.com/bahmutov/todomvc-vercel/actions">bahmutov/todomvc-vercel/actions</a>.</p><p><img src="../images/skip-cypress-install-on-ci/included.png" alt="Running tests using cypress/included image"></p><p>The <code>cypress/included:x.y.z</code> container has the Chrome browser installed. You can see what is inside using the <code>cypress info</code> command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># show the info about the browsers</span></span><br><span class="line"><span class="comment"># already installed in the Docker image</span></span><br><span class="line">cypress info</span><br><span class="line"><span class="comment"># one can use CYPRESS_ environment variables</span></span><br><span class="line"><span class="comment"># or --config ... arguments to configure Cypress values</span></span><br><span class="line"><span class="comment"># https://on.cypress.io/configuration</span></span><br><span class="line">cypress run --config baseUrl=<span class="variable">$&#123;&#123; github.event.deployment_status.target_url &#125;</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/skip-cypress-install-on-ci/info.png" alt="cypress info command output when running using cypress/included Docker image"></p><p>Nice - notice how fast the image executes, since nothing needs to be installed. On your CI, make sure to cache <code>cypress/included:x.y.z</code> images to avoid pulling them from Docker Hub on each run.</p><h2><span id="bonus-installing-just-cypress-plugins">Bonus: installing just Cypress plugins</span></h2><p>After a while, you might add some Cypress plugins to your testing pipeline. Thus you would need to install them before running tests in the <code>cypress/included</code> container. Just list the plugins to install explicitly.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if we did not _any_ Cypress plugins, we could skip the</span></span><br><span class="line"><span class="comment"># NPM install step completely. As we are using the &quot;cypress-grep&quot;</span></span><br><span class="line"><span class="comment"># plugin, we need to install it. But we do not need to install</span></span><br><span class="line"><span class="comment"># the heavy modules like Cypress itself</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Cypress</span> <span class="string">plugins</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">npm</span> <span class="string">i</span> <span class="string">-D</span> <span class="string">cypress-grep</span></span><br></pre></td></tr></table></figure><p>See the pull request <a href="https://github.com/bahmutov/todomvc-vercel/pull/1">#1</a>. Of course, at this point you might set up NPM module caching <em>just</em> for the plugins.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s say you want to introduce Cypress End-to-End tests in your company. You probably already have a repository with lots of tests, 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
      <category term="vercel" scheme="https://glebbahmutov.com/blog/tags/vercel/"/>
    
  </entry>
  
  <entry>
    <title>How To Verify Phone Number During Tests Part 2</title>
    <link href="https://glebbahmutov.com/blog/verify-phone-part-two/"/>
    <id>https://glebbahmutov.com/blog/verify-phone-part-two/</id>
    <published>2021-08-31T04:00:00.000Z</published>
    <updated>2021-09-13T13:03:36.771Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s continue looking at a web application that makes the users sign up using a phone number. We have covered the test phone prefix in the previous blog post <a href="/blog/verify-phone-part-one/" title="How To Verify Phone Number During Tests Part 1">How To Verify Phone Number During Tests Part 1</a>. In this blog post, I intend to show how the test runner can directly access the MySQL database to look up the user&#39;s record, rather than relying on the application&#39;s API to expose it.</p><blockquote class="pullquote"><p>üéÅ You can find the full source code in the repo <a href="https://github.com/bahmutov/verify-code-example">bahmutov/verify-code-example</a>.</p></blockquote><h2><span id="the-application">The application</span></h2><p>To install all NPM dependencies to run the application we execute the command</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure><p>The above command also automatically installs the dependencies in the <code>api</code> subfolder via <code>postinstall</code> script in the <code>package.json</code> file</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;postinstall&quot;</span>: <span class="string">&quot;npm install --prefix api&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The database connection is made from the <code>api</code> folder via <code>mysql</code> module as I will show in the later sections.</p><h2><span id="the-user-id">The user id</span></h2><p>When a new user is added to the table, it gets assigned a user id. Later on, if we want to look up the user&#39;s record, we need to know this value in the test. We can see the user ID returned by the API call in the DevTools Network tab below</p><p><img src="../images/verify-part-2/user-id.png" alt="The Ajax call returns the user ID"></p><p><strong>Aside:</strong> the app is showing this user id as you can see below the input elements, but that&#39;s just to make the demo simpler to understand. Usually the item&#39;s ID is not exposed by the UI.</p><p>We can grab the returned user ID using the <a href="https://on.cypress.io/intercept">cy.intercept</a> command by spying on the API call that creates the user. Here is the test that prints the returned ID to the console.</p><figure class="highlight js"><figcaption><span>cypress/integration/user-id.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Lodash library is bundled with Cypress</span></span><br><span class="line"><span class="keyword">const</span> &#123; _ &#125; = Cypress;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;returns user id&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">`test-<span class="subst">$&#123;_.random(<span class="number">1e4</span>)&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> email = <span class="string">`<span class="subst">$&#123;username&#125;</span>@example.com`</span>;</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;[name=username]&#x27;</span>).type(username);</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=email]&#x27;</span>).type(email);</span><br><span class="line">  cy.intercept(<span class="string">&#x27;/signup.json&#x27;</span>).as(<span class="string">&#x27;signup&#x27;</span>);</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sign up&#x27;</span>).click();</span><br><span class="line">  cy.wait(<span class="string">&#x27;@signup&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;response.body&#x27;</span>)</span><br><span class="line">    <span class="comment">// the assertion &quot;have.property&quot; yields its value</span></span><br><span class="line">    .should(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;userId&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">userId</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;New user id %s&#x27;</span>, userId);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="../images/verify-part-2/spy.png" alt="The API returns the created user ID"></p><p>Now we need to use this ID to look up the user information in the database.</p><h2><span id="mysql-database-connection">MySQL database connection</span></h2><p>The Cypress test runs in the browser, but we want to connect to the MySQL database, which is only possible from outside the browser. Luckily, Cypress includes the plugin file that runs in its own Node process on the host machine. The plugin process can connect to the database, and communicate the results back to the browser when called using the <a href="https://on.cypress.io/task">cy.task</a> command.</p><p>Here is our <code>cypress/plugins/index.js</code> file. It will read the database connection information from the process environment variables that Node applications automatically have in the <code>process.env</code> object, see <a href="https://nodejs.org/api/process.html#process_process_env">Node API documentation</a>.</p><p><strong>Tip:</strong> read <a href="https://www.twilio.com/blog/2017/08/working-with-environment-variables-in-node-js.html">Working with Environment Variables in Node.js</a> to learn how to work with the environment variables.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-check</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="comment">// mysql dependency is installed in the API subfolder</span></span><br><span class="line"><span class="comment">// thus Cypress plugin file has to reach into that folder</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;../../api/node_modules/mysql&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// this function runs in Node at the start of the project</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">on, config</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// read the environment variables defined on the host machine</span></span><br><span class="line">  <span class="comment">// Node.js allows one to look up all variables defined in the environment</span></span><br><span class="line">  <span class="comment">// and then access them using process.env.&lt;VARIABLE_NAME&gt;</span></span><br><span class="line">  <span class="comment">// https://nodejs.org/api/process.html#process_process_env</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// in our system we assume that the database is running</span></span><br><span class="line">  <span class="comment">// at the host URL &quot;DB_HOST&quot;, and we can connect to it using</span></span><br><span class="line">  <span class="comment">// &quot;DB_USER&quot;, &quot;DB_PASSWORD&quot; environment values</span></span><br><span class="line">  <span class="comment">// The database name comes from the &quot;DB_NAME&quot; variable.</span></span><br><span class="line">  <span class="keyword">const</span> host = process.env.DB_HOST;</span><br><span class="line">  <span class="keyword">const</span> user = process.env.DB_USER;</span><br><span class="line">  <span class="keyword">const</span> database = process.env.DB_NAME;</span><br><span class="line">  <span class="keyword">const</span> password = process.env.DB_PASSWORD;</span><br><span class="line">  <span class="comment">// if the config variables are not set</span></span><br><span class="line">  <span class="comment">// throw an error and stop the application</span></span><br><span class="line">  <span class="keyword">if</span> (!host || !user || !database || !password) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;DB variables are not set&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">getUser</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> connection = mysql.createConnection(&#123;</span><br><span class="line">        host,</span><br><span class="line">        user,</span><br><span class="line">        password,</span><br><span class="line">        database</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      connection.connect();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> theUser = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        connection.query(</span><br><span class="line">          &#123;</span><br><span class="line">            sql: <span class="string">&#x27;SELECT * FROM users WHERE user_id = ?&#x27;</span>,</span><br><span class="line">            values: [id]</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (error) &#123;</span><br><span class="line">              <span class="built_in">console</span>.error(error);</span><br><span class="line">              <span class="keyword">return</span> reject(error);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!results.length) &#123;</span><br><span class="line">              <span class="built_in">console</span>.error(<span class="string">&#x27;Could not find user with username %s&#x27;</span>, id);</span><br><span class="line">              <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Unknown user <span class="subst">$&#123;id&#125;</span>`</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(results);</span><br><span class="line">            <span class="comment">// return all fields except for ID</span></span><br><span class="line">            <span class="comment">// also convert the isPhoneVerified to boolean</span></span><br><span class="line">            resolve(&#123;</span><br><span class="line">              ...results[<span class="number">0</span>],</span><br><span class="line">              isPhoneVerified: results[<span class="number">0</span>].isPhoneVerified === <span class="number">1</span>,</span><br><span class="line">              user_id: <span class="literal">undefined</span></span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      connection.end();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> theUser;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>It looks so much like the regular Node code - because it is. The spec can now call <code>cy.task(&#39;getUser&#39;, ...)</code> to fetch the user information. We can print the yielded object in the console.</p><p><img src="../images/verify-part-2/get-user.png" alt="Getting the user record from the database via cy.task"></p><p><strong>Note:</strong> the <code>mysql</code> NPM module is used and installed by the <code>package.json</code> file inside the <code>api</code> folder. Thus our Cypress plugin Node file requires it using the relative path <code>require(&#39;../../api/node_modules/mysql&#39;)</code>.</p><h3><span id="gotcha-es6-modules">Gotcha: ES6 modules</span></h3><p>By default, the web project uses ES6 modules by setting <code>type: module</code> in its <a href="https://github.com/bahmutov/verify-code-example/blob/main/package.json">package.json</a>. If we simply try to load the Cypress plugin file, it fails:</p><p><img src="../images/verify-part-2/needs-module.png" alt="Cypress fails to load its own plugin file"></p><p>To solve this, I added a dummy <a href="https://github.com/bahmutov/verify-code-example/blob/main/cypress/package.json">package.json</a> to the <code>cypress</code> subfolder. This file points back at the CommonJS resolution when Cypress loads its own files.</p><figure class="highlight json"><figcaption><span>cypress/package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;cypress-tests&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;commonjs&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="gotcha-native-database-driver-code">Gotcha: Native database driver code</span></h3><p>Sometimes when loading a database module, Cypress might need to load the native code. Since you might install dependencies using one version of Node (let&#39;s say Node 10), while Cypress comes with its own built-in Node used by default to load the plugin file, the native code install is incompatible. You can check the Node version bundled with Cypress using the <a href="https://on.cypress.io/command-line#cypress-version">cypress version</a> command:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npx cypress version</span><br><span class="line">Cypress package version: 8.3.1</span><br><span class="line">Cypress binary version: 8.3.1</span><br><span class="line">Electron version: 13.2.0</span><br><span class="line">Bundled Node version: 14.16.0</span><br></pre></td></tr></table></figure><p>Here is the tip if the native database driver does not load: tell Cypress to use the <a href="https://on.cypress.io/configuration">system Node version</a> by using the <code>cypress.json</code> file.</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;nodeVersion&quot;</span>: <span class="string">&quot;system&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="re-using-the-api-code">Re-using the API code</span></h2><p>The above plugin file code looks very much like the API code used to access the database. I suggest re-using part of the production code to create the database connection from the plugin file.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-check</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="keyword">const</span> &#123; makeConnection &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../../api/src/db.config&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">on, config</span>) </span>&#123;</span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">getUser</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> connection = makeConnection();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> theUser = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        connection.query(</span><br><span class="line">          &#123;</span><br><span class="line">            sql: <span class="string">&#x27;SELECT * FROM users WHERE user_id = ?&#x27;</span>,</span><br><span class="line">            values: [id]</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (error) &#123;</span><br><span class="line">              <span class="built_in">console</span>.error(error);</span><br><span class="line">              <span class="keyword">return</span> reject(error);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!results.length) &#123;</span><br><span class="line">              <span class="built_in">console</span>.error(<span class="string">&#x27;Could not find user with username %s&#x27;</span>, id);</span><br><span class="line">              <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Unknown user <span class="subst">$&#123;id&#125;</span>`</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(results);</span><br><span class="line">            <span class="comment">// return all fields except for ID</span></span><br><span class="line">            <span class="comment">// also convert the isPhoneVerified to boolean</span></span><br><span class="line">            resolve(&#123;</span><br><span class="line">              ...results[<span class="number">0</span>],</span><br><span class="line">              isPhoneVerified: results[<span class="number">0</span>].isPhoneVerified === <span class="number">1</span>,</span><br><span class="line">              user_id: <span class="literal">undefined</span></span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      connection.end();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> theUser;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Even better is to move the SQL query into the production code - it might be useful there, and just call the API code from the plugin file. Let&#39;s put the DB access into the <code>api/src/db.user.js</code> next to the other database queries.</p><figure class="highlight js"><figcaption><span>api/src/db.user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-check</span></span><br><span class="line"><span class="keyword">const</span> &#123; makeConnection &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./db.config&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> connection = makeConnection();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> theUser = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    connection.query(</span><br><span class="line">      &#123;</span><br><span class="line">        sql: <span class="string">&#x27;SELECT * FROM users WHERE user_id = ?&#x27;</span>,</span><br><span class="line">        values: [id]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params">error, results</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">          <span class="built_in">console</span>.error(error);</span><br><span class="line">          <span class="keyword">return</span> reject(error);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!results.length) &#123;</span><br><span class="line">          <span class="built_in">console</span>.error(<span class="string">&#x27;Could not find user with username %s&#x27;</span>, id);</span><br><span class="line">          <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Unknown user <span class="subst">$&#123;id&#125;</span>`</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(results);</span><br><span class="line">        <span class="comment">// return all fields except for ID</span></span><br><span class="line">        <span class="comment">// also convert the isPhoneVerified to boolean</span></span><br><span class="line">        resolve(&#123;</span><br><span class="line">          ...results[<span class="number">0</span>],</span><br><span class="line">          isPhoneVerified: results[<span class="number">0</span>].isPhoneVerified === <span class="number">1</span>,</span><br><span class="line">          user_id: <span class="literal">undefined</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  connection.end();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> theUser;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>From the Cypress plugin file, simply call the exported asynchronous function.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-check</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="keyword">const</span> getDbUser = <span class="built_in">require</span>(<span class="string">&#x27;../../api/src/db.user&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">on, config</span>) </span>&#123;</span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">getUser</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> user = <span class="keyword">await</span> getDbUser(id);</span><br><span class="line">      <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Beautiful.</p><h2><span id="looking-up-the-phone-verification-code">Looking up the phone verification code</span></h2><p>Finally, if we can look up the user info via <code>cy.task</code> + DB query, we do not need to use much of the special test phone code we wrote before. We can still prevent the SMS send for the phones that start with the test prefix. But now we can use randomly generated codes for such numbers too!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sendSms = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  process.env.TEST_PHONE_NUMBER_PREFIX &amp;&amp;</span><br><span class="line">  phoneNumber.startsWith(process.env.TEST_PHONE_NUMBER_PREFIX)</span><br><span class="line">) &#123;</span><br><span class="line">  sendSms = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> phoneConfirmationCode = <span class="built_in">String</span>(<span class="built_in">Math</span>.random()).slice(<span class="number">2</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure><p>After creating the user, we can look the code by querying the MySQL database using the task. Here is the complete test.</p><figure class="highlight js"><figcaption><span>cypress/integration/query-db.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; getTestPhoneNumber &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lodash library is bundled with Cypress</span></span><br><span class="line"><span class="keyword">const</span> &#123; _ &#125; = Cypress;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;queries code from DB&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">`test-<span class="subst">$&#123;_.random(<span class="number">1e4</span>)&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> email = <span class="string">`<span class="subst">$&#123;username&#125;</span>@example.com`</span>;</span><br><span class="line">  <span class="comment">// we will find the user id later</span></span><br><span class="line">  <span class="keyword">let</span> userId;</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;[name=username]&#x27;</span>).type(username);</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=email]&#x27;</span>).type(email);</span><br><span class="line">  cy.intercept(<span class="string">&#x27;/signup.json&#x27;</span>).as(<span class="string">&#x27;signup&#x27;</span>);</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sign up&#x27;</span>).click();</span><br><span class="line">  cy.wait(<span class="string">&#x27;@signup&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;response.body&#x27;</span>)</span><br><span class="line">    <span class="comment">// the assertion &quot;have.property&quot; yields its value</span></span><br><span class="line">    .should(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;userId&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      userId = id;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> phoneNumber = getTestPhoneNumber();</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=phone]&#x27;</span>).type(<span class="string">`<span class="subst">$&#123;phoneNumber&#125;</span>&#123;enter&#125;`</span>, &#123; <span class="attr">delay</span>: <span class="number">75</span> &#125;);</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=code]&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// now we can query the database to find out the confirmation code</span></span><br><span class="line">      <span class="comment">// need to use .then closure to make sure the userId is defined</span></span><br><span class="line">      cy.task(<span class="string">&#x27;getUser&#x27;</span>, userId)</span><br><span class="line">        .should(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;phoneConfirmationCode&#x27;</span>)</span><br><span class="line">        .then(<span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line">          cy.log(<span class="string">`code: **<span class="subst">$&#123;code&#125;</span>**`</span>);</span><br><span class="line">          cy.get(<span class="string">&#x27;[name=code]&#x27;</span>).type(code + <span class="string">&#x27;&#123;enter&#125;&#x27;</span>, &#123; <span class="attr">delay</span>: <span class="number">75</span> &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// at the end of all the previous commands</span></span><br><span class="line">  <span class="comment">// the phone number should have been verified</span></span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=PhoneVerified]&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="../images/verify-part-2/verified.gif" alt="Verified the user by looking up the code from the database"></p><p>Nice!</p><h2><span id="final-thoughts">Final thoughts</span></h2><p>I think the best practices for accessing the database from Cypress tests are:</p><ul><li>try avoiding the code duplication by re-using as much of the existing production code as possible</li><li>limit the number of shortcuts taken via DB lookups or modifications; use them to bypass 3rd party services that cannot be automated otherwise (like receiving an SMS message).</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s continue looking at a web application that makes the users sign up using a phone number. We have covered the test phone prefix 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="db" scheme="https://glebbahmutov.com/blog/tags/db/"/>
    
  </entry>
  
  <entry>
    <title>How To Verify Phone Number During Tests Part 1</title>
    <link href="https://glebbahmutov.com/blog/verify-phone-part-one/"/>
    <id>https://glebbahmutov.com/blog/verify-phone-part-one/</id>
    <published>2021-08-30T04:00:00.000Z</published>
    <updated>2021-09-04T19:45:23.592Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s take a look at a typical web application that makes the users sign up using a phone number. We want to verify the user via a phone number to avoid bots and spam accounts. We can ask for the user&#39;s phone number during the sign-up step, then send an SMS code, and then the user should enter that code. If the code matches the one we have sent, the phone has been verified.</p><blockquote class="pullquote"><p>üéÅ You can find the full source code in the repo <a href="https://github.com/bahmutov/verify-code-example">bahmutov/verify-code-example</a>.</p></blockquote><h2><span id="the-users-database-table">The users database table</span></h2><p>I used a hosted MySQL database to store all users in a table. Here is the SQL definition for the <code>users</code> table.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users(</span><br><span class="line">  user_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  username <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  email <span class="type">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  phone <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">  phoneConfirmationCode <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">  isPhoneVerified <span class="type">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="literal">FALSE</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(user_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Notice the <code>phone</code>, <code>phoneConfirmationCode</code>, and <code>isPhoneVerified</code> columns are optional.</p><h2><span id="fake-username-and-email">Fake username and email</span></h2><p>We can generate a random fake username and email during the end-to-end test. We could use a library or just get random strings using the Lodash <a href="https://lodash.com/docs#random">_.random</a> method. Our test starts with entering these inputs.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Lodash library is bundled with Cypress</span></span><br><span class="line"><span class="keyword">const</span> &#123; _ &#125; = Cypress;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;fails with the wrong code&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">`test-<span class="subst">$&#123;_.random(<span class="number">1e4</span>)&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> email = <span class="string">`<span class="subst">$&#123;username&#125;</span>@example.com`</span>;</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;[name=username]&#x27;</span>).type(username);</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=email]&#x27;</span>).type(email);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/verify-part-1/enter-username.gif" alt="The test enters generated username and email"></p><p>Next we can click the &quot;Sign up&quot; button to create a new user record in the database. The message is relayed to the API:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">posting new user: &#123; username: &#x27;test-8773&#x27;, email: &#x27;test-8773@example.com&#x27; &#125;</span><br><span class="line"></span><br><span class="line">‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî</span><br><span class="line"></span><br><span class="line">&gt; #2 POST /signup</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  username: &quot;test-8773&quot;,</span><br><span class="line">  email: &quot;test-8773@example.com&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">posting new user: &#123; username: &#x27;test-8773&#x27;, email: &#x27;test-8773@example.com&#x27; &#125;</span><br><span class="line">New user id: 52</span><br><span class="line">&lt; #2 200 [+473ms]</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  userId: 52</span><br><span class="line">&#125;</span><br><span class="line">POST /signup.json 200 497.528 ms - -</span><br></pre></td></tr></table></figure><p>The relevant part of the code inserts the new record.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;posting new user:&#x27;</span>, body);</span><br><span class="line"><span class="keyword">const</span> userId = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  connection.query(<span class="string">&#x27;INSERT INTO users SET ?&#x27;</span>, body, <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(error);</span><br><span class="line">      <span class="keyword">return</span> reject(error);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;New user id: %s&#x27;</span>, results.insertId);</span><br><span class="line">    resolve(results.insertId);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  connection.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  userId</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>We have a new user without a phone number yet. The user provides a phone number on the next step of the sign up process.</p><h2><span id="adding-the-phone-number">Adding the phone number</span></h2><p>We can enter a test number from the test. For now, let&#39;s use a hardcoded number from a non-existent area <a href="https://www.areacodehelp.com/where/area_code_555.shtml">code 555</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;[name=phone]&#x27;</span>)</span><br><span class="line">  <span class="comment">// add 1 second delay to show the number</span></span><br><span class="line">  <span class="comment">// in the video</span></span><br><span class="line">  .wait(<span class="number">1000</span>)</span><br><span class="line">  .type(<span class="string">&#x27;555-123-4060&#123;enter&#125;&#x27;</span>, &#123; <span class="attr">delay</span>: <span class="number">75</span> &#125;);</span><br></pre></td></tr></table></figure><p><img src="../images/verify-part-1/phone.gif" alt="The test sends the phone number for the user"></p><p>The phone number is sent with the user id to the backend API.</p><h2><span id="the-verification-code">The verification code</span></h2><p>Our API generates a random verification code. The code is sent to the given phone number via a 3rd party service (let&#39;s pretend), and the code is saved into the user&#39;s record.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> phoneConfirmationCode = <span class="built_in">String</span>(<span class="built_in">Math</span>.random()).slice(<span class="number">2</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// save the random phone verification code</span></span><br><span class="line"><span class="comment">// and &quot;send&quot; the phone verification code via SMS</span></span><br><span class="line"><span class="comment">// (in this demo we are NOT sending the verification code via SMS)</span></span><br><span class="line"><span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  connection.query(</span><br><span class="line">    &#123;</span><br><span class="line">      sql: <span class="string">`</span></span><br><span class="line"><span class="string">        UPDATE users</span></span><br><span class="line"><span class="string">        SET phone = ?, phoneConfirmationCode = ?, isPhoneVerified = false</span></span><br><span class="line"><span class="string">        WHERE user_id = ?</span></span><br><span class="line"><span class="string">      `</span>,</span><br><span class="line">      values: [phoneNumber, phoneConfirmationCode, userId]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(error);</span><br><span class="line">        <span class="keyword">return</span> reject(error);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;for user %s set phone %s&#x27;</span>, userId, phoneNumber);</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">&#x27;The phone confirmation code with this phone is %s&#x27;</span>,</span><br><span class="line">        phoneConfirmationCode</span><br><span class="line">      );</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// use 3rd party SMS service</span></span><br><span class="line"><span class="keyword">await</span> sendSMS(phoneNumber, phoneConfirmationCode);</span><br></pre></td></tr></table></figure><p>We could also add a timestamp, etc, to make the phone verification stronger. But for the demo purposes, the code above is enough.</p><h2><span id="confirming-the-code">Confirming the code</span></h2><p>The web UI is waiting for the user to enter the SMS code. Once the code is entered, it is compared to the code in the user&#39;s record. If they match, the user is confirmed.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// look up the code verification from the database</span></span><br><span class="line"><span class="keyword">const</span> expected = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  connection.query(</span><br><span class="line">    &#123;</span><br><span class="line">      sql: <span class="string">&#x27;SELECT phone,phoneConfirmationCode FROM users WHERE user_id = ?&#x27;</span>,</span><br><span class="line">      values: [userId]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(error);</span><br><span class="line">        <span class="keyword">return</span> reject(error);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> expected = results[<span class="number">0</span>];</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">&#x27;user %s expected phone %s confirmation %s&#x27;</span>,</span><br><span class="line">        userId,</span><br><span class="line">        expected.phone,</span><br><span class="line">        expected.phoneConfirmationCode</span><br><span class="line">      );</span><br><span class="line">      resolve(&#123;</span><br><span class="line">        phone: expected.phone,</span><br><span class="line">        phoneConfirmationCode: expected.phoneConfirmationCode</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (expected.phone !== phoneNumber) &#123;</span><br><span class="line">  <span class="keyword">const</span> error = <span class="string">&#x27;Phone number does not match&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">`Error: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">  connection.end();</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    error</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (expected.phoneConfirmationCode !== code) &#123;</span><br><span class="line">  <span class="keyword">const</span> error = <span class="string">&#x27;Wrong confirmation code&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">`Error: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">  connection.end();</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    error</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// user phone number is confirmed üéâ</span></span><br><span class="line"><span class="comment">// update the user - the phone number is confirmed</span></span><br><span class="line"><span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  connection.query(</span><br><span class="line">    &#123;</span><br><span class="line">      sql: <span class="string">`</span></span><br><span class="line"><span class="string">        UPDATE users</span></span><br><span class="line"><span class="string">        SET isPhoneVerified = true, phoneConfirmationCode = NULL</span></span><br><span class="line"><span class="string">        WHERE user_id = ?</span></span><br><span class="line"><span class="string">      `</span>,</span><br><span class="line">      values: [userId]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>We also check the database for any other user with the same phone number - we must remove the verified flag, since the phone number now belongs to another user.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// any existing user with the same phone number should</span></span><br><span class="line"><span class="comment">// lose their phone verified status</span></span><br><span class="line"><span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  connection.query(</span><br><span class="line">    &#123;</span><br><span class="line">      sql: <span class="string">`</span></span><br><span class="line"><span class="string">        UPDATE users</span></span><br><span class="line"><span class="string">        SET phoneConfirmationCode = NULL, isPhoneVerified = false</span></span><br><span class="line"><span class="string">        WHERE phone = ? AND isPhoneVerified = true</span></span><br><span class="line"><span class="string">      `</span>,</span><br><span class="line">      values: [phoneNumber]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(error);</span><br><span class="line">        <span class="keyword">return</span> reject(error);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;removed phone %s for any existing users&#x27;</span>, phoneNumber);</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Let&#39;s look at how we can write end-to-end tests that have to register new users and confirm the phone numbers.</p><h2><span id="send-the-wrong-code">Send the wrong code</span></h2><p>Our test has no idea what the phone confirmation code is. Thus it can simply confirm the wrong code generates an error message that is shown to the user.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Lodash library is bundled with Cypress</span></span><br><span class="line"><span class="keyword">const</span> &#123; _ &#125; = Cypress;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;shows an error message for wrong code&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">`test-<span class="subst">$&#123;_.random(<span class="number">1e4</span>)&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> email = <span class="string">`<span class="subst">$&#123;username&#125;</span>@example.com`</span>;</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;[name=username]&#x27;</span>).type(username);</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=email]&#x27;</span>).type(email);</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sign up&#x27;</span>).click();</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;[name=phone]&#x27;</span>).type(<span class="string">&#x27;555-123-4060&#123;enter&#125;&#x27;</span>, &#123; <span class="attr">delay</span>: <span class="number">75</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// use a wrong code on purpose</span></span><br><span class="line">  cy.get(<span class="string">&#x27;[name=code]&#x27;</span>).type(<span class="string">&#x27;0000&#x27;</span>, &#123; <span class="attr">delay</span>: <span class="number">75</span> &#125;);</span><br><span class="line">  cy.get(<span class="string">&#x27;button&#x27;</span>).click();</span><br><span class="line">  cy.contains(<span class="string">&#x27;.error-message&#x27;</span>, <span class="string">&#x27;Wrong confirmation code&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="../images/verify-part-1/wrong-code.gif" alt="The wrong verification code leads to an error message"></p><p>Great, the wrong code is rejected, but how do we really verify the user during the test?</p><h2><span id="use-a-special-test-number">Use a special test number</span></h2><p>Let&#39;s add a custom logic for allowing users with a special test numbers in. For example, we could specific via an environment variable <code>TEST_PHONE_NUMBER</code>. If this number arrives, we know this is an E2E test user, and thus skip sending the confirmation number via SMS. We also save a pre-determined code in the database.</p><figure class="highlight js"><figcaption><span>api/src/phone.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; userId, phoneNumber &#125; = <span class="keyword">await</span> json(req);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;adding phone %s for user %d&#x27;</span>, phoneNumber, userId);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> phoneConfirmationCode;</span><br><span class="line"><span class="keyword">const</span> specialTestNumber = process.env.TEST_PHONE_NUMBER;</span><br><span class="line"><span class="keyword">if</span> (specialTestNumber &amp;&amp; phoneNumber === specialTestNumber) &#123;</span><br><span class="line">  <span class="comment">// the test user! use the same code and do not send it</span></span><br><span class="line">  <span class="comment">// just store in the database</span></span><br><span class="line">  phoneConfirmationCode = <span class="string">&#x27;4467&#x27;</span>;</span><br><span class="line">  <span class="comment">// do not send this code via SMS service</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// generate a random code, send it via SMS to the phone number</span></span><br><span class="line">  phoneConfirmationCode = <span class="built_in">String</span>(<span class="built_in">Math</span>.random()).slice(<span class="number">2</span>, <span class="number">6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The spec can hard-code the phone number and the code, or read it using <a href="https://on.cypress.io/env">Cypress.env</a> method. See my blog post <a href="/blog/keep-passwords-secret-in-e2e-tests/" title="Keep passwords secret in E2E tests">Keep passwords secret in E2E tests</a> how to do so. In my case, I just put the numbers into the spec file.</p><figure class="highlight js"><figcaption><span>cypress/integration/test-number.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;confirms the test phone number&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">`test-<span class="subst">$&#123;_.random(<span class="number">1e4</span>)&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> email = <span class="string">`<span class="subst">$&#123;username&#125;</span>@example.com`</span>;</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;[name=username]&#x27;</span>).type(username);</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=email]&#x27;</span>).type(email);</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sign up&#x27;</span>).click();</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;[name=phone]&#x27;</span>).type(<span class="string">&#x27;555-909-0909&#123;enter&#125;&#x27;</span>, &#123; <span class="attr">delay</span>: <span class="number">75</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// when using the special phone number above</span></span><br><span class="line">  <span class="comment">// we can validate it using this code</span></span><br><span class="line">  cy.get(<span class="string">&#x27;[name=code]&#x27;</span>).type(<span class="string">&#x27;4467&#x27;</span>, &#123; <span class="attr">delay</span>: <span class="number">75</span> &#125;);</span><br><span class="line">  cy.get(<span class="string">&#x27;button&#x27;</span>).click();</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=PhoneVerified]&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="../images/verify-part-1/test-number.gif" alt="Using a special test phone number with its constant code"></p><h2><span id="use-alternative-use-test-number-prefix">Use alternative: use test number prefix</span></h2><p>Using a single special phone number leads to the problems down the line. Because a single user at a time can have the test phone number and have it verified, one test can kick out another test in the middle of the run. We will see a test that verifies this is happening later. Thus as an alternative, I suggest using not the exact test phone number, but a test phone <em>prefix</em>. Any number that starts with the test phone <em>prefix</em> should be considered the test user, and could be verified using the same hard-coded test code (or some other similar scheme).</p><p>If we used <code>TEST_PHONE_NUMBER=555-909-0909</code> before, we can chop off the last two digits to produce 100 test numbers. If we pick the test number randomly, the chance of collision is minimal. If the collisions still happen, we can chop off the last three digits to have a 1000 test phone numbers. We could also enable <a href="https://on.cypress.io/test-retries">test retries</a> to re-run the failed test and get through a temporary set back.</p><figure class="highlight js"><figcaption><span>api/src/phone.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> phoneConfirmationCode;</span><br><span class="line"><span class="keyword">if</span> (process.env.TEST_PHONE_NUMBER &amp;&amp; phoneNumber === process.env.TEST_PHONE_NUMBER) &#123;</span><br><span class="line">  <span class="comment">// the test user! use the same code and do not send it</span></span><br><span class="line">  <span class="comment">// just store in the database</span></span><br><span class="line">  phoneConfirmationCode = <span class="string">&#x27;4467&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">  process.env.TEST_PHONE_NUMBER_PREFIX &amp;&amp;</span><br><span class="line">  phoneNumber.startsWith(process.env.TEST_PHONE_NUMBER_PREFIX)</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="comment">// the test user that uses the phone number prefix</span></span><br><span class="line">  <span class="comment">// to allow multiple test phone numbers</span></span><br><span class="line">  phoneConfirmationCode = <span class="string">&#x27;4467&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// generate a random code, send it via SMS to the phone number</span></span><br><span class="line">  phoneConfirmationCode = <span class="built_in">String</span>(<span class="built_in">Math</span>.random()).slice(<span class="number">2</span>, <span class="number">6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The above code supports both methods just for clarity. It assumes that the environment variables are set like</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TEST_PHONE_NUMBER&#x3D;555-909-0909</span><br><span class="line">TEST_PHONE_NUMBER_PREFIX&#x3D;555-909-09</span><br></pre></td></tr></table></figure><p>Here is a test that draws a random number using <a href="https://lodash.com/docs/4.17.15#random">_.random</a> and <a href="https://lodash.com/docs/4.17.15#padStart">_.padStart</a> methods.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pick a random phone number that starts with the</span></span><br><span class="line"><span class="comment">// give prefix by adding two random digits to it.</span></span><br><span class="line"><span class="keyword">const</span> testNumberPrefix = <span class="string">&#x27;555-909-09&#x27;</span>;</span><br><span class="line"><span class="comment">// using _.random with _.padStart to make sure</span></span><br><span class="line"><span class="comment">// any shorter number is padded with leading zeroes</span></span><br><span class="line"><span class="keyword">const</span> phoneNumber = testNumberPrefix + _.padStart(_.random(<span class="number">0</span>, <span class="number">100</span>), <span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">cy.get(<span class="string">&#x27;[name=phone]&#x27;</span>).type(<span class="string">`<span class="subst">$&#123;phoneNumber&#125;</span>&#123;enter&#125;`</span>, &#123; <span class="attr">delay</span>: <span class="number">75</span> &#125;);</span><br></pre></td></tr></table></figure><p>The test passes with a random number.</p><p><img src="../images/verify-part-1/random-phone.gif" alt="Using a randomly drawn test phone number from a range of numbers"></p><p><strong>Tip:</strong> it is a good idea to move test phone number generation into a utility method to be imported into any spec that needs to verify the user&#39;s phone.</p><h2><span id="looking-up-the-user">Looking up the user</span></h2><p>What if our API has a method to look up the user by the username? Maybe we could expose such API endpoint during testing and protect it using some kind of header or API key. This method could return the phone verification code and status.</p><figure class="highlight js"><figcaption><span>api/src/user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; params &#125; = match(req, <span class="string">&#x27;/users/:username&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;looking up user %s&#x27;</span>, params.username);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  connection.query(</span><br><span class="line">    &#123;</span><br><span class="line">      sql: <span class="string">&#x27;SELECT * FROM users WHERE username = ?&#x27;</span>,</span><br><span class="line">      values: [params.username]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(error);</span><br><span class="line">        <span class="keyword">return</span> reject(error);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!results.length) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">&#x27;Could not find user with username %s&#x27;</span>, params.username);</span><br><span class="line">        <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Unknown user&#x27;</span>));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(results);</span><br><span class="line">      <span class="comment">// return all fields except for ID</span></span><br><span class="line">      <span class="comment">// also convert the isPhoneVerified to boolean</span></span><br><span class="line">      resolve(&#123;</span><br><span class="line">        ...results[<span class="number">0</span>],</span><br><span class="line">        isPhoneVerified: results[<span class="number">0</span>].isPhoneVerified === <span class="number">1</span>,</span><br><span class="line">        user_id: <span class="literal">undefined</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Our test could fetch the user information after each action to confirm the backend is updating the fields correctly. We can use the built-in <a href="https://on.cypress.io/request">cy.request</a> command:</p><figure class="highlight js"><figcaption><span>cypress/integration/look-up-user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; getTestPhoneNumber &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lodash library is bundled with Cypress</span></span><br><span class="line"><span class="keyword">const</span> &#123; _ &#125; = Cypress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getUserInfo = <span class="function">(<span class="params">username</span>) =&gt;</span></span><br><span class="line">  <span class="comment">// use the API url to request the user info</span></span><br><span class="line">  <span class="comment">// https://on.cypress.io/request</span></span><br><span class="line">  cy.request(<span class="string">`http://localhost:4343/users/<span class="subst">$&#123;username&#125;</span>`</span>).its(<span class="string">&#x27;body&#x27;</span>);</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;looks up the user via API call&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> username = <span class="string">`test-<span class="subst">$&#123;_.random(<span class="number">1e4</span>)&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> email = <span class="string">`<span class="subst">$&#123;username&#125;</span>@example.com`</span>;</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;[name=username]&#x27;</span>).type(username);</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=email]&#x27;</span>).type(email);</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sign up&#x27;</span>).click();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// important: wait for the next page to load</span></span><br><span class="line">  <span class="comment">// to know for sure the API call has finished</span></span><br><span class="line">  cy.get(<span class="string">&#x27;[name=phone]&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// find the user information and confirm the user has</span></span><br><span class="line">  <span class="comment">// no phone and no confirmation code</span></span><br><span class="line">  getUserInfo(username).should(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">    username,</span><br><span class="line">    email,</span><br><span class="line">    phone: <span class="literal">null</span>,</span><br><span class="line">    phoneConfirmationCode: <span class="literal">null</span>,</span><br><span class="line">    isPhoneVerified: <span class="literal">false</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> phoneNumber = getTestPhoneNumber();</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=phone]&#x27;</span>).type(<span class="string">`<span class="subst">$&#123;phoneNumber&#125;</span>&#123;enter&#125;`</span>, &#123; <span class="attr">delay</span>: <span class="number">75</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// again, wait for the next page to load before checking the API</span></span><br><span class="line">  cy.get(<span class="string">&#x27;[name=code]&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the user should have the random code and phone number set</span></span><br><span class="line">  getUserInfo(username)</span><br><span class="line">    .should(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">      username,</span><br><span class="line">      email,</span><br><span class="line">      phone: phoneNumber,</span><br><span class="line">      isPhoneVerified: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// confirm the code is a string of 4 digits</span></span><br><span class="line">    .its(<span class="string">&#x27;phoneConfirmationCode&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;match&#x27;</span>, <span class="regexp">/^\d&#123;4&#125;$/</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// let&#x27;s use the fetched code to verify the phone number</span></span><br><span class="line">      cy.get(<span class="string">&#x27;[name=code]&#x27;</span>).type(code, &#123; <span class="attr">delay</span>: <span class="number">75</span> &#125;);</span><br><span class="line">      cy.get(<span class="string">&#x27;button&#x27;</span>).click();</span><br><span class="line">      cy.get(<span class="string">&#x27;[data-cy=PhoneVerified]&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      getUserInfo(username).should(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">        username,</span><br><span class="line">        email,</span><br><span class="line">        phone: phoneNumber,</span><br><span class="line">        isPhoneVerified: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// phone confirmation code is reset to null</span></span><br><span class="line">        phoneConfirmationCode: <span class="literal">null</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="../images/verify-part-1/verify-user.gif" alt="Looking up the user object during the test to confirm the updates"></p><p><strong>Tip:</strong> to confirm multiple properties inside an object, I suggest using <a href="https://github.com/bahmutov/cy-spok">cy-spok</a>. It supports exact matches and properties using a very intuitive syntax and produces good output in the Cypress Command Log column.</p><h2><span id="testing-the-number-transfer">Testing the number transfer</span></h2><p>In our application, if the user has verified the number, then any other user who has previously had this number verified, loses that status. Let&#39;s confirm this via testing.</p><figure class="highlight js"><figcaption><span>cypress/integration/loses-confirmation.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; getTestPhoneNumber, getUserInfo &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lodash library is bundled with Cypress</span></span><br><span class="line"><span class="keyword">const</span> &#123; _ &#125; = Cypress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> signup = <span class="function">(<span class="params">username, email, phoneNumber</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=username]&#x27;</span>).type(username);</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=email]&#x27;</span>).type(email);</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Sign up&#x27;</span>).click();</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=phone]&#x27;</span>).type(<span class="string">`<span class="subst">$&#123;phoneNumber&#125;</span>&#123;enter&#125;`</span>, &#123; <span class="attr">delay</span>: <span class="number">75</span> &#125;);</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=code]&#x27;</span>).type(<span class="string">&#x27;4467&#x27;</span>, &#123; <span class="attr">delay</span>: <span class="number">75</span> &#125;);</span><br><span class="line">  cy.get(<span class="string">&#x27;button&#x27;</span>).click();</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=PhoneVerified]&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;loses phone confirmation&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> firstUser = <span class="string">`test-first-<span class="subst">$&#123;_.random(<span class="number">1e4</span>)&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> firstEmail = <span class="string">`<span class="subst">$&#123;firstUser&#125;</span>@example.com`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> secondUser = <span class="string">`test-second-<span class="subst">$&#123;_.random(<span class="number">1e4</span>)&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> secondEmail = <span class="string">`<span class="subst">$&#123;secondUser&#125;</span>@example.com`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> phoneNumber = getTestPhoneNumber();</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;**first user**&#x27;</span>);</span><br><span class="line">  signup(firstUser, firstEmail, phoneNumber);</span><br><span class="line">  getUserInfo(firstUser).should(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">    phone: phoneNumber,</span><br><span class="line">    isPhoneVerified: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line">  cy.log(<span class="string">&#x27;**second user**&#x27;</span>);</span><br><span class="line">  signup(secondUser, secondEmail, phoneNumber);</span><br><span class="line">  getUserInfo(secondUser).should(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">    phone: phoneNumber,</span><br><span class="line">    isPhoneVerified: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// the first user no longer has verified phone number</span></span><br><span class="line">  getUserInfo(firstUser).should(<span class="string">&#x27;deep.include&#x27;</span>, &#123;</span><br><span class="line">    phone: phoneNumber,</span><br><span class="line">    isPhoneVerified: <span class="literal">false</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The video shows the two users sign up, then the first user loses its phone confirmed value.</p><p><img src="../images/verify-part-1/loses.gif" alt="The first user loses its phone verified status"></p><p>There is nothing in the UI to show for this, because we are using the API response to confirm the change in the user record. Of course, in the real application, the backend would not return the user status this easily. We sometimes need to connect to the database from the test runner and check of ourselves. I plan to describe how to do so in the next blog post, so subscribe now to be notified when it comes out.</p><p><strong>Update:</strong> part two is here; read the blog post <a href="/blog/verify-phone-part-two/" title="How To Verify Phone Number During Tests Part 2">How To Verify Phone Number During Tests Part 2</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s take a look at a typical web application that makes the users sign up using a phone number. We want to verify the user via a ph
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Solving The Element Is Detached From DOM Error In Cypress</title>
    <link href="https://glebbahmutov.com/blog/detached/"/>
    <id>https://glebbahmutov.com/blog/detached/</id>
    <published>2021-08-26T04:00:00.000Z</published>
    <updated>2021-08-26T12:56:28.378Z</updated>
    
    <content type="html"><![CDATA[<p>Many people complain about the dreaded &quot;Element is detached from DOM&quot; error in Cypress, see <a href="https://github.com/cypress-io/cypress/issues/7306">#7306</a>. I have recorded the video showing the problem and the possible solutions below.</p><center><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/CMOjrKoBBwc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p><strong>Tip:</strong> I have described previously this particular scenario in the blog post <a href="https://cypress.io/blog/2020/11/17/when-can-the-test-submit-a-form/">When Can the Test Submit a Form?</a> which is a part of my series of blog posts about <a href="https://cypress.io/blog/tag/flake/">test flake</a>.</p><p>When writing E2E tests, please consider what the application is doing. If the application is still performing an action, tell the test to &quot;wait&quot; for the action to complete. Otherwise the application might suddenly change, breaking the test. The &quot;element is detached from DOM&quot; is a sign of a problem, not the problem itself! There is a variety of ways the test can observe the application and wait for it to be ready. You can observe the DOM itself, the network traffic, listen for events, even reach into the code to spy on method calls.</p><p>A good pattern is to alternate test commands and assertions, relying on the built-in <a href="https://on.cypress.io/retry-ability">retry-ability</a> to wait for the application to finish updating. This way the test never waits longer than necessary.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.click(...) <span class="comment">// command</span></span><br><span class="line"><span class="comment">// application starts doing something</span></span><br><span class="line"><span class="comment">// now the test should wait for the app</span></span><br><span class="line"><span class="comment">// before calling another command</span></span><br><span class="line">cy.get(<span class="string">&#x27;...&#x27;</span>).should(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;ready&#x27;</span>)</span><br><span class="line"><span class="comment">// execute the next test command</span></span><br></pre></td></tr></table></figure><p>And if everything fails, if there is no observable application property to wait for - then add the <code>cy.wait(xxx)</code> command to wait for a second or two. I mean, if it fixes the detached element problem and the test becomes stable, why not?</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Many people complain about the dreaded &amp;quot;Element is detached from DOM&amp;quot; error in Cypress, see &lt;a href=&quot;https://github.com/cypress
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Scrape Slides</title>
    <link href="https://glebbahmutov.com/blog/scrape-slides/"/>
    <id>https://glebbahmutov.com/blog/scrape-slides/</id>
    <published>2021-08-21T04:00:00.000Z</published>
    <updated>2021-08-21T22:10:55.084Z</updated>
    
    <content type="html"><![CDATA[<p>I have a lot of presentations at <a href="https://slides.com/bahmutov">slides.com/bahmutov</a>, and it is difficult to find a specific slide sometimes, even when I know there is one. I was looking for ways to scrape my presentations and send the search records to Algolia for indexing. In this presentation, I will show the scraper I have written for this purpose.</p><!-- toc --><ul><li><a href="#the-presentation">The presentation</a></li><li><a href="#the-slide-format">The slide format</a></li><li><a href="#the-scrape-selectors">The scrape selectors</a></li><li><a href="#browsing-and-scraping-the-slides">Browsing and scraping the slides</a><ul><li><a href="#be-careful-about-the-stack">Be careful about the stack</a></li><li><a href="#scraping-multiple-elements">Scraping multiple elements</a></li></ul></li><li><a href="#filtering-records">Filtering records</a></li><li><a href="#algolia-application">Algolia application</a><ul><li><a href="#object-ids">Object IDs</a></li></ul></li><li><a href="#replacing-objects">Replacing objects</a></li><li><a href="#the-search-page">The search page</a></li><li><a href="#scraping-any-url">Scraping any URL</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><blockquote class="pullquote"><p>üéÅ You can find the source code for this blog post at <a href="https://github.com/bahmutov/scrape-book-quotes">bahmutov/scrape-book-quotes</a>. This blog is necessarily long, since it needs to provide every relevant detail, but the ultimate truth is in the code.</p></blockquote><h2><span id="the-presentation">The presentation</span></h2><p>For this blog post I have created a small presentation <a href="https://slides.com/bahmutov/book-quotes">slides.com/bahmutov/book-quotes</a> with a few slides with famous book quotes. The slides are implemented using <a href="https://revealjs.com/">Reveal.js</a> framework that I <a href="/blog/reveal-vite/" title="like using">like using</a>. Here is the overview of the slides: there is a main horizontal row, and a single column in the middle.</p><p><img src="../images/slides-to-algolia/slides.png" alt="Presentation to be scraped"></p><h2><span id="the-slide-format">The slide format</span></h2><p>When editing Reveal.js slides, you can add text and various headers. Commonly, I use &quot;Heading 1&quot; for each slide&#39;s title.</p><p><img src="../images/slides-to-algolia/edit-slide.png" alt="The slide title is Heading 1"></p><p>The &quot;Heading 1&quot; text becomes the &quot;H1&quot; HTML element. The &quot;Heading 2&quot; becomes &quot;H2&quot; element, and so on. Regular text becomes &quot;P&quot; HTML element. You can see these elements marked in the HTML screenshot below.</p><p><img src="../images/slides-to-algolia/h1.png" alt="Heading 1 becomes the H1 element"></p><p>The slide deck also has an element below the presentation&#39;s title and description.</p><p><img src="../images/slides-to-algolia/deck-info.png" alt="The deck info markup"></p><p>The title and the description could be considered the top-level information in the deck.</p><p>The currently shown slide has the class &quot;present&quot;. We can scrape each slide one by one.</p><h2><span id="the-scrape-selectors">The scrape selectors</span></h2><p>The default <a href="https://docsearch.algolia.com/docs/scraper/">Algolia scraper</a> does not work very well with the highly dynamic Single-Page Application like a Reveal.js presentation. Thus we need to browse the slides, grab the text from the elements, and send the records to Algolia index ourselves.</p><p>In order to scrape each slide, we need to select the <code>h1</code>, <code>h2</code>, <code>p</code> elements. Algolia documents the various text levels in its <a href="https://docsearch.algolia.com/docs/config-file">config documentation</a>. In our case, the selectors I picked are:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lvl0: &quot;.deck-info h1&quot;</span><br><span class="line">lvl1: &quot;.deck-info .description&quot;</span><br><span class="line">lvl2: &quot;.slides .present h1&quot;</span><br><span class="line">lvl3: &quot;.slides .present h2&quot;</span><br><span class="line">lvl4: &quot;.slides .present h3&quot;</span><br><span class="line">content: &quot;.slides .present p, .slides .present blockquote&quot;</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> potentially we could grab all document elements&#39; using the selectors without the <code>.present</code> class and form the individual slide URLs like <code>bahmutov/book-quotes</code>, <code>bahmutov/book-quotes#/1</code>, <code>bahmutov/book-quotes#/2</code>, <code>bahmutov/book-quotes#/2/1</code>, etc. ourselves. But I would think really browsing the slides is more fun, isn&#39;t it?</p><h2><span id="browsing-and-scraping-the-slides">Browsing and scraping the slides</span></h2><p>To load the presentation, browse the slides, and scrape the HTML elements, I will use <a href="https://www.cypress.io">Cypress.io</a> test runner. To go through each slide, I am using <a href="https://github.com/bahmutov/cypress-recurse">cypress-recurse</a> plugin. See the <a href="https://youtu.be/oq2P1wtIZYY">video</a> below to learn how the test goes through the slides.</p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/oq2P1wtIZYY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>While browsing, let&#39;s extract the matching elements from the slide and save them in an array to be uploaded to the Algolia index later. Here is the initial code</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; recurse &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-recurse&#x27;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;scrapes&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> records = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> scrape = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cy.document().then(<span class="function">(<span class="params">doc</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> url = doc.location.href</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> lvl0El = doc.querySelector(<span class="string">&#x27;.deck-info h1&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> lvl0 = lvl0El ? lvl0El.innerText : <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> lvl1El = doc.querySelector(<span class="string">&#x27;.deck-info .description&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> lvl1 = lvl1El ? lvl1El.innerText : <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> lvl2El = doc.querySelector(<span class="string">&#x27;.slides .present h1&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> lvl2 = lvl2El ? lvl2El.innerText : <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> lvl3El = doc.querySelector(<span class="string">&#x27;.slides .present h2&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> lvl3 = lvl3El ? lvl3El.innerText : <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> lvl4El = doc.querySelector(<span class="string">&#x27;.slides .present h3&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> lvl4 = lvl4El ? lvl4El.innerText : <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> consider ALL elements, not just the first one</span></span><br><span class="line">      <span class="keyword">const</span> textEl = doc.querySelector(</span><br><span class="line">        <span class="string">&#x27;.slides .present p, .slides .present blockquote&#x27;</span>,</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">const</span> content = textEl ? textEl.innerText : <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> record = &#123; url, lvl0, lvl1, lvl2, lvl3, lvl4, content &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(record)</span><br><span class="line">      records.push(record)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> goVertical = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> recurse(</span><br><span class="line">      () =&gt; scrape().then(<span class="function">() =&gt;</span> cy.get(<span class="string">&#x27;.navigate-down&#x27;</span>)),</span><br><span class="line">      ($button) =&gt; !$button.hasClass(<span class="string">&#x27;enabled&#x27;</span>),</span><br><span class="line">      &#123;</span><br><span class="line">        log: <span class="literal">false</span>,</span><br><span class="line">        delay: <span class="number">1000</span>,</span><br><span class="line">        timeout: <span class="number">200000</span>,</span><br><span class="line">        limit: <span class="number">200</span>,</span><br><span class="line">        <span class="function"><span class="title">post</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">          cy.get(<span class="string">&#x27;.navigate-down&#x27;</span>).click()</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  recurse(</span><br><span class="line">    () =&gt; goVertical().then(<span class="function">() =&gt;</span> cy.get(<span class="string">&#x27;.navigate-right&#x27;</span>)),</span><br><span class="line">    ($button) =&gt; !$button.hasClass(<span class="string">&#x27;enabled&#x27;</span>),</span><br><span class="line">    &#123;</span><br><span class="line">      log: <span class="literal">false</span>,</span><br><span class="line">      delay: <span class="number">1000</span>,</span><br><span class="line">      timeout: <span class="number">200000</span>,</span><br><span class="line">      limit: <span class="number">200</span>,</span><br><span class="line">      <span class="function"><span class="title">post</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        cy.get(<span class="string">&#x27;.navigate-right&#x27;</span>).click()</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The records accumulate in the <code>records</code> list with each slide, as you can see in the DevTools console.</p><p><img src="../images/slides-to-algolia/browsing.gif" alt="Scraping each slide"></p><p>We can save the records as a JSON file to be sent to Algolia next.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// recurse through the slides</span></span><br><span class="line"><span class="keyword">const</span> records = []</span><br><span class="line">recurse(...)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.writeFile(<span class="string">&#x27;records.json&#x27;</span>, records)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>records.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://slides.com/bahmutov/book-quotes/&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl0&quot;</span>: <span class="string">&quot;Book Quotes&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl1&quot;</span>: <span class="string">&quot;A test deck for practicing scraping slides.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl2&quot;</span>: <span class="string">&quot;Anna Karenina&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl3&quot;</span>: <span class="string">&quot;Leo Tolstoy&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl4&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;Happy families are all alike; every unhappy family is unhappy in its own way.&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://slides.com/bahmutov/book-quotes/#/1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl0&quot;</span>: <span class="string">&quot;Book Quotes&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl1&quot;</span>: <span class="string">&quot;A test deck for practicing scraping slides.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl2&quot;</span>: <span class="string">&quot;Moby Dick&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl3&quot;</span>: <span class="string">&quot;Herman Melville&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl4&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;Call me Ishmael.&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3><span id="be-careful-about-the-stack">Be careful about the stack</span></h3><p>Reveal.js decks can have columns of slides. The column is called a <code>stack</code>, and it <em>also</em> has its own &quot;present&quot; class.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;stack present&quot;</span>&gt;</span></span><br><span class="line">  ... previous slides</span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;present&quot;</span>&gt;</span></span><br><span class="line">    the current visible slide</span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  ... future slides</span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Thus to grab the current slide we need to use the class &quot;present&quot;, but without the &quot;stack&quot; class. In CSS this can be expressed as <code>.present:not(.stack)</code> selector. Thus our content selector that pulls the <code>p</code>, <code>blockquote</code>, and <code>li</code> items is:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> contentSelectors = [</span><br><span class="line">  <span class="string">&#x27;.slides .present:not(.stack) p&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;.slides .present:not(.stack) blockquote&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;.slides .present:not(.stack) li&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> selector = contentSelectors.join(<span class="string">&#x27;, &#x27;</span>)</span><br></pre></td></tr></table></figure><h3><span id="scraping-multiple-elements">Scraping multiple elements</span></h3><p>A single slide might have multiple paragraphs, list items, and block quotes which are all separate content items. If the slide has any heading elements, the content items should all share the same &quot;lvl0&quot;, &quot;lvl1&quot;, etc. For example, the next slide produces 4 separate content records, all sharing the &quot;Heading 2&quot; at &quot;lvl3&quot;:</p><p><img src="../images/slides-to-algolia/multiple.png" alt="A slide with 4 records"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://slides.com/bahmutov/book-quotes/#/5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl0&quot;</span>: <span class="string">&quot;Book Quotes&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl1&quot;</span>: <span class="string">&quot;A test deck for practicing scraping slides.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;lvl3&quot;</span>: <span class="string">&quot;A Bullet List&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl4&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;Bullet One&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://slides.com/bahmutov/book-quotes/#/5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl0&quot;</span>: <span class="string">&quot;Book Quotes&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl1&quot;</span>: <span class="string">&quot;A test deck for practicing scraping slides.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;lvl3&quot;</span>: <span class="string">&quot;A Bullet List&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl4&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;Bullet Two&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://slides.com/bahmutov/book-quotes/#/5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl0&quot;</span>: <span class="string">&quot;Book Quotes&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl1&quot;</span>: <span class="string">&quot;A test deck for practicing scraping slides.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;lvl3&quot;</span>: <span class="string">&quot;A Bullet List&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl4&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;Bullet Three&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://slides.com/bahmutov/book-quotes/#/5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl0&quot;</span>: <span class="string">&quot;Book Quotes&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl1&quot;</span>: <span class="string">&quot;A test deck for practicing scraping slides.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl2&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;lvl3&quot;</span>: <span class="string">&quot;A Bullet List&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl4&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;This slide has multiple list items, all should be scraped&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>We can create these records when scraping</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> contentSelectors = [</span><br><span class="line">  <span class="string">&#x27;.slides .present:not(.stack) p&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;.slides .present:not(.stack) blockquote&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;.slides .present:not(.stack) li&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> contentSelector = contentSelectors.join(<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> textEls = <span class="built_in">Array</span>.from(doc.querySelectorAll(contentSelector))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> record = &#123; url, lvl0, lvl1, lvl2, lvl3, lvl4, <span class="attr">content</span>: <span class="literal">null</span> &#125;</span><br><span class="line"><span class="keyword">if</span> (!textEls.length) &#123;</span><br><span class="line">  <span class="keyword">return</span> [record]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> records = textEls.map(<span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> r = &#123;</span><br><span class="line">    ...record,</span><br><span class="line">    content: el.innerText.trim(),</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> r</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>At the end we still have a flat list of individual records to upload. We can output messages for each scraped slide using <a href="https://on.cypress.io/log">cy.log</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scrapeOneSlide()</span><br><span class="line">  .then(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = r[<span class="number">0</span>].url</span><br><span class="line">    cy.log(url)</span><br><span class="line">    cy.log(<span class="string">`**<span class="subst">$&#123;r.length&#125;</span>** record(s)`</span>)</span><br><span class="line">    cy.task(<span class="string">&#x27;print&#x27;</span>, <span class="string">`<span class="subst">$&#123;url&#125;</span>: <span class="subst">$&#123;r.length&#125;</span> record(s)`</span>)</span><br><span class="line">    records.push(...r)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>The recorded video clearly shows the number of text records.</p><p><img src="../images/slides-to-algolia/scraping.gif" alt="Each slide gets scraped"></p><p>Watching Cypress browse the slides to scrape them is a lot of fun.</p><h2><span id="filtering-records">Filtering records</span></h2><p>Some text elements should be ignored. For example, often my slides have my Twitter handle <a href="https://twitter.com/bahmutov">@bahmutov</a> on them, or individual URLs. We want to filter such text elements out.</p><p><img src="../images/slides-to-algolia/filter.png" alt="Records to be filtered include the individual URLs and my Twitter handle"></p><p>We can filter such individual content fields using heuristics: the search records should be longer than 10 letter, should not match a URL regular expression, or match our list of banned words.</p><p>Once scraped we also need to ensure the records do not have duplicates. This can happen when the slide has animation blocks - the common text elements will be the same. Thus we make sure all records are unique by taking all content properties together. For example, the following deck of slides shows the new blocks in each slide.</p><p><img src="../images/slides-to-algolia/open-real-browser.gif" alt="The same slide will be scraped multiple times because its URL changes"></p><p>The above deck will generate the &quot;content: Open real browser&quot; four times. The other fields like &quot;lvl0&quot;, &quot;lvl1&quot;, etc are also going to be exactly the same.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://slides.com/bahmutov/automated-testing/#/3/0/3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl0&quot;</span>: <span class="string">&quot;Automated Testing with Cypress.io&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl1&quot;</span>: <span class="string">&quot;This talk shows how quick and simple it can be to write end-to-end tests for web applications ‚Äì if your testing tools are not fighting you all the time. I will go over writing E2E tests using Cypress.io (https://www.cypress.io/), controlling the network during tests, using visual testing and setting up continuous integration to perform E2E tests on each commit.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl2&quot;</span>: <span class="string">&quot;Web application&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl3&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;lvl4&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;Open real browser&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;objectID&quot;</span>: <span class="string">&quot;https-slides-com-bahmutov-automated-testing-3-0-3-4&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://slides.com/bahmutov/automated-testing/#/3/0/4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl0&quot;</span>: <span class="string">&quot;Automated Testing with Cypress.io&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl1&quot;</span>: <span class="string">&quot;This talk shows how quick and simple it can be to write end-to-end tests for web applications ‚Äì if your testing tools are not fighting you all the time. I will go over writing E2E tests using Cypress.io (https://www.cypress.io/), controlling the network during tests, using visual testing and setting up continuous integration to perform E2E tests on each commit.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl2&quot;</span>: <span class="string">&quot;Web application&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl3&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;lvl4&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;Open real browser&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;objectID&quot;</span>: <span class="string">&quot;https-slides-com-bahmutov-automated-testing-3-0-4-4&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Thus we remove all duplicate records using the text fields concatenated together to check for uniqueness.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> removeDuplicates = <span class="function">(<span class="params">records</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// often when slides have animations, individual blocks</span></span><br><span class="line">  <span class="comment">// come in one by one. This leads to the text elements</span></span><br><span class="line">  <span class="comment">// on the slide being duplicated.</span></span><br><span class="line">  <span class="comment">// thus we check all records for duplicate content</span></span><br><span class="line">  <span class="keyword">return</span> Cypress._.uniqBy(records, <span class="function">(<span class="params">r</span>) =&gt;</span></span><br><span class="line">    [r.content, r.lvl0, r.lvl1, r.lvl2, r.lvl3, r.lvl4].join(<span class="string">&#x27;-&#x27;</span>),</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="algolia-application">Algolia application</span></h2><p>Now let&#39;s send the records to Algolia index. I have created a new Algolia application with a new index &quot;quotes&quot;.</p><p><img src="../images/slides-to-algolia/algolia.png" alt="Algolia application with its new index"></p><p>Each record to be sent to Algolia needs a &quot;type&quot; property. Since our records all have <code>content</code> field filled, they have the type <code>content</code>. Otherwise, the type is the highest level number (if the record has <code>lvl3</code>, but no <code>lvl3</code>, then it has the <code>type: lvl3</code>). To send the records we can use the official <a href="https://www.npmjs.com/package/algoliasearch">algoliasearch</a> NPM module.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D algoliasearch</span></span><br><span class="line">+ algoliasearch@4.10.3</span><br></pre></td></tr></table></figure><p>The script file <a href="https://github.com/bahmutov/scrape-book-quotes/blob/main/send-records.js">send-records.js</a> loads the records, sets the type and replaces the entire index with the new records.</p><figure class="highlight js"><figcaption><span>send-records.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; scrapeToAlgoliaRecord &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./utils&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> records = <span class="built_in">require</span>(<span class="string">&#x27;./records.json&#x27;</span>).map(scrapeToAlgoliaRecord)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(records, <span class="literal">null</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://www.algolia.com/doc/api-client/getting-started</span></span><br><span class="line"><span class="keyword">const</span> algoliasearch = <span class="built_in">require</span>(<span class="string">&#x27;algoliasearch&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// tip: use https://github.com/bahmutov/as-a</span></span><br><span class="line"><span class="comment">// to inject the environment variables when running</span></span><br><span class="line"><span class="keyword">const</span> client = algoliasearch(</span><br><span class="line">  process.env.APPLICATION_ID,</span><br><span class="line">  process.env.ADMIN_API_KEY,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> index = client.initIndex(<span class="string">&#x27;quotes&#x27;</span>)</span><br><span class="line"><span class="comment">// for now replace all records in the index</span></span><br><span class="line">index</span><br><span class="line">  .replaceAllObjects(records, &#123; <span class="attr">autoGenerateObjectIDIfNotExist</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;uploaded %d records&#x27;</span>, records.length)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.error(err))</span><br></pre></td></tr></table></figure><p>The utility function <code>scrapeToAlgoliaRecord</code> moves individual levels into a <code>hierarchy</code> object.</p><figure class="highlight js"><figcaption><span>utils.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Converts a scrape record to an Algolia record</span></span><br><span class="line"><span class="comment"> * ready to be send.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> scrapeToAlgoliaRecord = <span class="function">(<span class="params">record</span>) =&gt;</span> &#123;</span><br><span class="line">  record.hierarchy = &#123;</span><br><span class="line">    lvl0: record.lvl0,</span><br><span class="line">    lvl1: record.lvl1,</span><br><span class="line">    lvl2: record.lvl2,</span><br><span class="line">    lvl3: record.lvl3,</span><br><span class="line">    lvl4: record.lvl4,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (record.content) &#123;</span><br><span class="line">    record.type = <span class="string">&#x27;content&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (record.lvl4) &#123;</span><br><span class="line">      record.type = <span class="string">&#x27;lvl4&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (record.lvl3) &#123;</span><br><span class="line">      record.type = <span class="string">&#x27;lvl3&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (record.lvl2) &#123;</span><br><span class="line">      record.type = <span class="string">&#x27;lvl2&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (record.lvl1) &#123;</span><br><span class="line">      record.type = <span class="string">&#x27;lvl1&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (record.lvl0) &#123;</span><br><span class="line">      record.type = <span class="string">&#x27;lvl0&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// we moved the levels into hierarchy</span></span><br><span class="line">  <span class="keyword">delete</span> record.lvl0</span><br><span class="line">  <span class="keyword">delete</span> record.lvl1</span><br><span class="line">  <span class="keyword">delete</span> record.lvl2</span><br><span class="line">  <span class="keyword">delete</span> record.lvl3</span><br><span class="line">  <span class="keyword">delete</span> record.lvl4</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> record</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123; scrapeToAlgoliaRecord &#125;</span><br></pre></td></tr></table></figure><p>The final record for a slide with just &quot;Heading 1&quot; could be</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>:<span class="string">&quot;https://slides.com/bahmutov/book-quotes/#/5&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;content&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;hierarchy&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;lvl0&quot;</span>:<span class="string">&quot;Book Quotes&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl1&quot;</span>:<span class="string">&quot;A test deck for practicing scraping slides.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl2&quot;</span>:<span class="string">&quot;The End&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl3&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;lvl4&quot;</span>:<span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;lvl2&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The final record with some content could be</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://slides.com/bahmutov/book-quotes/#/3&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;It was a pleasure to burn.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;hierarchy&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;lvl0&quot;</span>: <span class="string">&quot;Book Quotes&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl1&quot;</span>: <span class="string">&quot;A test deck for practicing scraping slides.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl2&quot;</span>: <span class="string">&quot;Fahrenheit 451&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl3&quot;</span>: <span class="string">&quot;Ray Bradbury&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lvl4&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;content&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Once uploaded, the records are searchable from the Algolia UI</p><p><img src="../images/slides-to-algolia/search.gif" alt="Finding quotes from Algolia App Index page"></p><h3><span id="object-ids">Object IDs</span></h3><p>Each object in Algolia&#39;s application should have a <a href="https://www.algolia.com/doc/api-reference/api-methods/add-objects/?client=javascript#method-param-object">unique ID</a>. Currently we let Algolia assign unique ids to each uploaded record. In the future this approach would not scale. For example, we might have need to replace a record for the given slide presentation - thus we would need to delete some of the records first, before adding new ones. Let&#39;s form a unique record ID based on the presentation slug and the slide number.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> slideId = Cypress._.kebabCase(doc.location.href)</span><br><span class="line"><span class="comment">// single record</span></span><br><span class="line"><span class="keyword">const</span> record = &#123;</span><br><span class="line">  url,</span><br><span class="line">  lvl0,</span><br><span class="line">  lvl1,</span><br><span class="line">  lvl2,</span><br><span class="line">  lvl3,</span><br><span class="line">  lvl4,</span><br><span class="line">  content: <span class="literal">null</span>,</span><br><span class="line">  objectID: slideId,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// multiple records: add the index</span></span><br><span class="line"><span class="keyword">const</span> records = textEls.map(<span class="function">(<span class="params">el, k</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> r = &#123;</span><br><span class="line">    ...record,</span><br><span class="line">    content: el.innerText.trim(),</span><br><span class="line">    <span class="comment">// give each record extracted from the slide</span></span><br><span class="line">    <span class="comment">// its own id</span></span><br><span class="line">    objectID: <span class="string">`<span class="subst">$&#123;record.objectID&#125;</span>-<span class="subst">$&#123;k&#125;</span>`</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> r</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Our object IDs will be something like:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;https-slides-com-bahmutov-book-quotes-0&quot;</span><br><span class="line">&quot;https-slides-com-bahmutov-book-quotes-1-0&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2><span id="replacing-objects">Replacing objects</span></h2><p>Currently we are using <code>index.replaceAllObjects</code> which removes all objects in the index before adding the updated records. If we have multiple presentations in the index, each slide deck will remove all previous ones. Thus we cannot blindly remove all records.</p><p>We cannot simply add new records, even when using the unique object IDs because it might leave &quot;orphan&quot; records in the index. Imagine the following scenario:</p><ul><li>we have a long presentation with 100 slides</li><li>we scrape the 100 slides into Algolia application</li><li>we change the presentation removing 99 slides, leaving just a single slide</li><li>we scrape the new presentation with one slide</li></ul><p>Hmm, there are 99 records that are still in the index, leading the user to non-existing URLs.</p><p>This is why I save the scraped objects and created Algolia records as JSON files before sending them to the Algolia index.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> slug</span><br><span class="line"><span class="comment">// derive the presentation slug from the pathname</span></span><br><span class="line">cy.location(<span class="string">&#x27;pathname&#x27;</span>).then(<span class="function">(<span class="params">pathname</span>) =&gt;</span> &#123;</span><br><span class="line">  slug = Cypress._.kebabCase(pathname)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// scrape the slides</span></span><br><span class="line">.then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.writeFile(<span class="string">`<span class="subst">$&#123;outputFolder&#125;</span>/<span class="subst">$&#123;slug&#125;</span>-records.json`</span>, records)</span><br><span class="line">  <span class="keyword">const</span> algoliaObjects = records.map(scrapeToAlgoliaRecord)</span><br><span class="line">  cy.writeFile(<span class="string">`<span class="subst">$&#123;outputFolder&#125;</span>/<span class="subst">$&#123;slug&#125;</span>-algolia-objects.json`</span>, algoliaObjects)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> Cypress command <a href="https://on.cypress.io/writefile">cy.writeFile</a> automatically creates the output folder if one does not exist yet.</p><p>We commit the output JSON files to Git, you can find my scraped files in the folder <a href="https://github.com/bahmutov/scrape-book-quotes/tree/main/scraped">scraped</a>.</p><p>We can do the following &quot;trick&quot; before scraping the site: load the <em>previous</em> Algolia records and remove all objects using their unique <code>objectID</code> from the file. That will clear the records for this particular presentation, and we will add the new records after scraping. See the <a href="https://www.algolia.com/doc/api-reference/api-methods/delete-objects/">Delete objects</a> documentation.</p><p><strong>Alternative method:</strong> when adding the new presentation slides we can use the presentation slug as a tag. Then, before adding the new records, we can use the <a href="https://www.algolia.com/doc/api-reference/api-methods/delete-by/">Delete By</a> method to remove any records related to this presentation.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> algoliaObjects = records.map(scrapeToAlgoliaRecord).map(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// add the same presentation slug to each record</span></span><br><span class="line">  <span class="comment">// this attribute will be very useful for deleting</span></span><br><span class="line">  <span class="comment">// all old records before scraping the presentation again</span></span><br><span class="line">  r._tags = [slug]</span><br><span class="line">  <span class="keyword">return</span> r</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Now we can delete all slides belonging to a specific presentation, see the <a href="https://github.com/bahmutov/scrape-book-quotes/blob/main/delete-records.js">delete-records.js</a> script</p><figure class="highlight js"><figcaption><span>delete-records.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> presentationSlug = <span class="string">&#x27;bahmutov-book-quotes&#x27;</span></span><br><span class="line"></span><br><span class="line">index</span><br><span class="line">  .deleteBy(&#123;</span><br><span class="line">    filters: presentationSlug,</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;deleted records with presentation &quot;%s&quot;&#x27;</span>, presentationSlug)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.error(err))</span><br></pre></td></tr></table></figure><h2><span id="the-search-page">The search page</span></h2><p>Let&#39;s confirm the search works by using a simple HTML page and <a href="https://www.algolia.com/doc/guides/building-search-ui/what-is-instantsearch/js/">InstantSearch.js</a>. You can find the full page at <a href="https://github.com/bahmutov/scrape-book-quotes/blob/main/index.html">index.html</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;searchbox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;hits&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> searchClient = algoliasearch(</span><br><span class="line">  <span class="string">&#x27;MYPSC2284D&#x27;</span>, <span class="comment">// public application ID</span></span><br><span class="line">  <span class="string">&#x27;1d382a9c7cdfa0b2c13664c9a6c75b73&#x27;</span>, <span class="comment">// search-only public API key</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> search = instantsearch(&#123;</span><br><span class="line">  indexName: <span class="string">&#x27;quotes&#x27;</span>,</span><br><span class="line">  searchClient,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">search.addWidgets([</span><br><span class="line">  instantsearch.widgets.searchBox(&#123;</span><br><span class="line">    container: <span class="string">&#x27;#searchbox&#x27;</span>,</span><br><span class="line">    placeholder: <span class="string">&#x27;Search for book quotes&#x27;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  instantsearch.widgets.hits(&#123;</span><br><span class="line">    container: <span class="string">&#x27;#hits&#x27;</span>,</span><br><span class="line">    templates: &#123;</span><br><span class="line">      <span class="function"><span class="title">item</span>(<span class="params">hit</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(hit)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`&lt;p&gt;<span class="subst">$&#123;hit.content&#125;</span> - &lt;a href=&quot;<span class="subst">$&#123;hit.url&#125;</span>&quot;&gt;<span class="subst">$&#123;hit.url&#125;</span>&lt;/p&gt;`</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">search.start()</span><br></pre></td></tr></table></figure><p><img src="../images/slides-to-algolia/search.png" alt="Searching the index for &quot;tale&quot; brings two hits"></p><h2><span id="scraping-any-url">Scraping any URL</span></h2><p>Finally, I have refactored the code to make it portable and be able to scrape any Reveal.js deck by just pointing at it via <code>CYPRESS_baseUrl</code> environment variable and running Cypress headlessly. The scraped records are saved as a JSON file for inspection, and also uploaded to Algolia using the <a href="https://github.com/bahmutov/scrape-book-quotes/blob/main/cypress/plugins/index.js">cypress/plugins/index.js</a> code. We need to run Cypress with Algolia&#39;s app ID and the secret Admin API key to be able to upload the records after scraping.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> CYPRESS_baseUrl=https://slides.com/bahmutov/slides-dark-mode \</span></span><br><span class="line"><span class="bash">  APPLICATION_ID=... ADMIN_API_KEY=...  \</span></span><br><span class="line"><span class="bash">  npx cypress run --spec cypress/integration/spec.js</span></span><br><span class="line">...</span><br><span class="line">removing existing records for bahmutov-slides-dark-mode</span><br><span class="line">adding 6 records</span><br><span class="line">  ‚úì scrapes (5280ms)</span><br></pre></td></tr></table></figure><p>The scraped <a href="https://slides.com/bahmutov/slides-dark-mode">slides.com/bahmutov/slides-dark-mode</a> has been added to the search index.</p><p><img src="../images/slides-to-algolia/scraped-another.png" alt="Scraped another deck"></p><p>We can scrape multiple decks calling Cypress with each URL via its <a href="https://on.cypress.io/module-api">NPM module api</a>. You can find the full code at <a href="https://github.com/bahmutov/scrape-book-quotes/blob/main/scrape-all.js">scrape-all.js</a>.</p><figure class="highlight js"><figcaption><span>scrape-all.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> presentations = [...] <span class="comment">// all presentation URLs</span></span><br><span class="line"><span class="keyword">const</span> cypress = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">scrapePresentations</span>(<span class="params">urls</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!urls.length) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> presentation = urls.shift()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Scraping <span class="subst">$&#123;presentation&#125;</span>`</span>)</span><br><span class="line">  <span class="keyword">await</span> cypress.run(&#123;</span><br><span class="line">    config: &#123;</span><br><span class="line">      baseUrl: presentation,</span><br><span class="line">    &#125;,</span><br><span class="line">    spec: <span class="string">&#x27;cypress/integration/spec.js&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// scrape the rest of the presentations</span></span><br><span class="line">  <span class="keyword">await</span> scrapePresentations(urls)</span><br><span class="line">&#125;</span><br><span class="line">scrapePresentations(presentations).then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;all done&#x27;</span>))</span><br></pre></td></tr></table></figure><p>From now on, whenever we create another presentation and make it public, we should run the scrape job to make the deck searchable. You can see the search across my Cypress presentations tagged <a href="https://slides.com/bahmutov/decks/cypress-introduction">cypress-introduction</a> and <a href="https://slides.com/bahmutov/decks/cypress-io">cypress.io</a> at <a href="https://cypress.tips/search">cypress.tips/search</a> page. Here is a typical search</p><p><img src="../images/slides-to-algolia/search-widget.gif" alt="Searching across the slides"></p><p>Nice!</p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/scrape-list-of-slides/" title="Scraping the List of Presentation Slides">Scraping the List of Presentation Slides</a></li><li><a href="/blog/scrape-static-site-with-algolia/" title="Scrape Static Site with Algolia">Scrape Static Site with Algolia</a></li><li>Search Cypress Algolia documentation index from the terminal <a href="https://github.com/bahmutov/cy-search">cy-search</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have a lot of presentations at &lt;a href=&quot;https://slides.com/bahmutov&quot;&gt;slides.com/bahmutov&lt;/a&gt;, and it is difficult to find a specific sl
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="algolia" scheme="https://glebbahmutov.com/blog/tags/algolia/"/>
    
  </entry>
  
  <entry>
    <title>Code Coverage For Chat App</title>
    <link href="https://glebbahmutov.com/blog/code-coverage-for-chat-tests/"/>
    <id>https://glebbahmutov.com/blog/code-coverage-for-chat-tests/</id>
    <published>2021-08-16T04:00:00.000Z</published>
    <updated>2021-08-16T16:19:39.877Z</updated>
    
    <content type="html"><![CDATA[<p>In several blog posts I have shown how to test a Socket.io chat application using Cypress.io</p><table><thead><tr><th>Title</th><th>Description</th></tr></thead><tbody><tr><td><a href="/blog/test-socketio-chat-using-cypress/" title="Test a Socket.io Chat App using Cypress">Test a Socket.io Chat App using Cypress</a></td><td>Simulates the second user by connecting to the chat server from the plugins file</td></tr><tr><td><a href="/blog/run-two-cypress-runners/" title="Run Two Cypress Test Runners At The Same Time">Run Two Cypress Test Runners At The Same Time</a></td><td>Launches two test runners, giving them separate specs to run</td></tr><tr><td><a href="/blog/sync-two-cypress-runners/" title="Sync Two Cypress Runners via Checkpoints">Sync Two Cypress Runners via Checkpoints</a></td><td>Launches two test runners, which stay in sync by communicating via their own Socket.io server</td></tr></tbody></table><p>In this blog post I will show how to collect code coverage in each case. From the code coverage reports, we will see that using separate test runners to simulate two users is not necessary. The application code is already exercised when using a separate socket connection to simulate the second user. Even a test with 1 user going through the user interface covers 100% of the code, because every message, even own message, goes through the server before being shown.</p><blockquote class="pullquote"><p>üéÅ You can find the source code in the repo <a href="https://github.com/bahmutov/cypress-socketio-chat">bahmutov/cypress-socketio-chat</a>. You can also flip through the slides for the presentation covering this topic at <a href="https://slides.com/bahmutov/e2e-for-chat">slides.com/bahmutov/e2e-for-chat</a>.</p></blockquote><h2><span id="code-instrumentation">Code instrumentation</span></h2><p>The application includes the source code using a script tag</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;scripts/app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>From the server, we can instrument the <code>scripts/app.js</code> source code before sending</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createInstrumenter &#125; = <span class="built_in">require</span>(<span class="string">&#x27;istanbul-lib-instrument&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> instrumenter = createInstrumenter()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/scripts/app.js&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> filename = path.join(__dirname, <span class="string">&#x27;scripts&#x27;</span>, <span class="string">&#x27;app.js&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> src = fs.readFileSync(filename, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> instrumented = instrumenter.instrumentSync(src, filename)</span><br><span class="line">  res.set(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/javascript&#x27;</span>)</span><br><span class="line">  res.send(instrumented)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>To check if the code has been instrumented, inspect the <code>window.__coverage__</code> object from the DevTools console.</p><p><img src="../images/chat-coverage/check-coverage.png" alt="Code coverage object exists"></p><p>We can also instrument the server code using <a href="https://istanbul.js.org/">nyc</a> module following the <a href="https://github.com/cypress-io/code-coverage#instrument-backend-code">Instrument backend code</a> section of the Cypress docs.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D nyc</span></span><br><span class="line">+ nyc@15.1.0</span><br></pre></td></tr></table></figure><p>Change the start server command</p><figure class="highlight diff"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- &quot;start&quot;: &quot;node .&quot;,</span></span><br><span class="line"><span class="addition">+ &quot;start&quot;: &quot;nyc --silent node .&quot;,</span></span><br></pre></td></tr></table></figure><p>And expose the code coverage endpoint</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/cypress-io/code-coverage#instrument-backend-code</span></span><br><span class="line"><span class="comment">/* istanbul ignore next */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">global</span>.__coverage__) &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;@cypress/code-coverage/middleware/express&#x27;</span>)(app)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To ensure the code coverage report always includes the client and the server code, add to the <code>package.json</code> &quot;nyc&quot; options</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;nyc&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;all&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;include&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">      <span class="string">&quot;scripts/*.js&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> if you need to instrument your application code, find an example matching your situation among the examples in the Cypress code coverage plugin <a href="https://github.com/cypress-io/code-coverage">repo</a>.</p><h2><span id="the-first-spec">The first spec</span></h2><p>Our first spec uses a single test runner to send the message to itself.</p><figure class="highlight js"><figcaption><span>cypress/integration/first-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;posts my messages&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://on.cypress.io/visit</span></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// when the application asks for the name</span></span><br><span class="line">      <span class="comment">// return &quot;Cy&quot; using https://on.cypress.io/stub</span></span><br><span class="line">      cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(<span class="string">&#x27;Cy&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// make sure the greeting message is shown</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">&#x27;Cy join the chat..&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// try posting a message</span></span><br><span class="line">  cy.get(<span class="string">&#x27;#txt&#x27;</span>).type(<span class="string">&#x27;Hello there&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, <span class="string">&#x27;Hello there&#x27;</span>).contains(<span class="string">&#x27;strong&#x27;</span>, <span class="string">&#x27;Cy&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The generated HTML report shows full client-side code coverage.</p><p><img src="../images/chat-coverage/first-coverage.png" alt="First spec code coverage report"></p><p>Drill down into the server file to see the two missed lines</p><p><img src="../images/chat-coverage/first-server.png" alt="First spec never disconnects from the server"></p><p>Unfortunately, it is hard to test the user disconnect if our page is the only one present.</p><h2><span id="mock-socket-spec">Mock socket spec</span></h2><p>In another spec we replace the actual socket connection with the Mock Socket object.</p><figure class="highlight js"><figcaption><span>cypress/integration/mock-socket-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> SocketMock <span class="keyword">from</span> <span class="string">&#x27;socket.io-mock&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Mock socket&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// these tests &quot;trick&quot; the application by injecting</span></span><br><span class="line">  <span class="comment">// a mock socket from the test into the application</span></span><br><span class="line">  <span class="comment">// instead of letting the application connect to the real one</span></span><br><span class="line">  <span class="keyword">const</span> socket = <span class="keyword">new</span> SocketMock()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// store info about the client connected from the page</span></span><br><span class="line">  <span class="keyword">let</span> username</span><br><span class="line">  <span class="keyword">let</span> lastMessage</span><br><span class="line">  socket.socketClient.on(<span class="string">&#x27;username&#x27;</span>, <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;user %s connected&#x27;</span>, name)</span><br><span class="line">    username = name</span><br><span class="line">    <span class="comment">// broadcast to everyone, mimicking the index.js server</span></span><br><span class="line">    socket.socketClient.emit(</span><br><span class="line">      <span class="string">&#x27;is_online&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;üîµ &lt;i&gt;&#x27;</span> + username + <span class="string">&#x27; join the chat..&lt;/i&gt;&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  socket.socketClient.on(<span class="string">&#x27;chat_message&#x27;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;user %s says &quot;%s&quot;&#x27;</span>, username, message)</span><br><span class="line">    lastMessage = <span class="string">&#x27;&lt;strong&gt;&#x27;</span> + username + <span class="string">&#x27;&lt;/strong&gt;: &#x27;</span> + message</span><br><span class="line">    socket.socketClient.emit(<span class="string">&#x27;chat_message&#x27;</span>, lastMessage)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;chats&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.intercept(<span class="string">&#x27;/scripts/app.js&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// delete any cache headers to get a fresh response</span></span><br><span class="line">      <span class="keyword">delete</span> req.headers[<span class="string">&#x27;if-none-match&#x27;</span>]</span><br><span class="line">      <span class="keyword">delete</span> req.headers[<span class="string">&#x27;if-modified-since&#x27;</span>]</span><br><span class="line"></span><br><span class="line">      req.continue(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        res.body = res.body.replace(</span><br><span class="line">          <span class="string">&quot;io.connect(&#x27;http://localhost:8080&#x27;)&quot;</span>,</span><br><span class="line">          <span class="string">&#x27;window.testSocket&#x27;</span>,</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;).as(<span class="string">&#x27;appjs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the browser is the 1st user</span></span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">`Cy_<span class="subst">$&#123;Cypress._.random(<span class="number">1000</span>)&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">    cy.log(<span class="string">`User **<span class="subst">$&#123;name&#125;</span>**`</span>)</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">      <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">        win.testSocket = socket</span><br><span class="line">        cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(name)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.wait(<span class="string">&#x27;@appjs&#x27;</span>) <span class="comment">// our code intercept has worked</span></span><br><span class="line">      <span class="comment">// verify we have received the username</span></span><br><span class="line">      <span class="comment">// use .should(callback) to retry</span></span><br><span class="line">      <span class="comment">// until the variable username has been set</span></span><br><span class="line">      .should(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        expect(username, <span class="string">&#x27;username&#x27;</span>).to.equal(name)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// try sending a message via page UI</span></span><br><span class="line">    cy.get(<span class="string">&#x27;#txt&#x27;</span>).type(<span class="string">&#x27;Hello there&#123;enter&#125;&#x27;</span>)</span><br><span class="line">    cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, <span class="string">&#x27;Hello there&#x27;</span>).contains(<span class="string">&#x27;strong&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// verify the mock socket has received the message</span></span><br><span class="line">    cy.should(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      expect(lastMessage, <span class="string">&#x27;the right text&#x27;</span>).to.include(<span class="string">&#x27;Hello there&#x27;</span>)</span><br><span class="line">      expect(lastMessage, <span class="string">&#x27;the sender&#x27;</span>).to.include(name)</span><br><span class="line">    &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// emit message from the test socket</span></span><br><span class="line">      <span class="comment">// to make sure the page shows it</span></span><br><span class="line">      socket.socketClient.emit(</span><br><span class="line">        <span class="string">&#x27;chat_message&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&lt;strong&gt;Cy&lt;/strong&gt;: Mock socket works!&#x27;</span>,</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">      cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, <span class="string">&#x27;Mock socket works&#x27;</span>).contains(<span class="string">&#x27;strong&#x27;</span>, <span class="string">&#x27;Cy&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Because we do not run <em>any</em> socket commands on the server, our server-side coverage drops.</p><p><img src="../images/chat-coverage/mock-coverage.png" alt="Code coverage summary when mocking the Socket"></p><p>The server report shows no socket callbacks have executed.</p><p><img src="../images/chat-coverage/mock-server.png" alt="When mocking the socket client-side, the server is not used"></p><h2><span id="second-user-via-socket-connection">Second user via socket connection</span></h2><p>Let&#39;s run the test that uses the UI page as the first user, while connecting to the server through another socket connection to simulate the 2nd user. For example, we can open that 2nd socket connection from the spec.</p><figure class="highlight js"><figcaption><span>cypress/integration/socket-from-browser-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">&#x27;socket.io-client&#x27;</span>)</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Open 2nd socket connection&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;communicates with 2nd user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// the browser is the 1st user</span></span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">`Cy_<span class="subst">$&#123;Cypress._.random(<span class="number">1000</span>)&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">    cy.log(<span class="string">`User **<span class="subst">$&#123;name&#125;</span>**`</span>)</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">      <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">        cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(name)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// make sure the greeting message is shown</span></span><br><span class="line">    cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;name&#125;</span> join the chat..`</span>)</span><br><span class="line">      .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">      .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// and now connect to the server using 2nd user</span></span><br><span class="line">        <span class="comment">// by opening a new Socket connection from the same browser window</span></span><br><span class="line">        <span class="keyword">const</span> secondName = <span class="string">&#x27;Ghost&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> socket = io.connect(<span class="string">&#x27;http://localhost:8080&#x27;</span>)</span><br><span class="line">        socket.emit(<span class="string">&#x27;username&#x27;</span>, secondName)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// keep track of the last message sent by the server</span></span><br><span class="line">        <span class="keyword">let</span> lastMessage</span><br><span class="line">        socket.on(<span class="string">&#x27;chat_message&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> (lastMessage = msg))</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the page shows that the second user has joined the chat</span></span><br><span class="line">        cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;secondName&#125;</span> join the chat..`</span>).should(</span><br><span class="line">          <span class="string">&#x27;be.visible&#x27;</span>,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the second user can send a message and the page shows it</span></span><br><span class="line">        <span class="keyword">const</span> message = <span class="string">&#x27;hello from 2nd user&#x27;</span></span><br><span class="line">        socket.emit(<span class="string">&#x27;chat_message&#x27;</span>, message)</span><br><span class="line">        cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, message)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// when the first user sends the message from the page</span></span><br><span class="line">        <span class="comment">// the second user receives it via socket</span></span><br><span class="line">        <span class="keyword">const</span> greeting = <span class="string">`Hello there <span class="subst">$&#123;Cypress._.random(<span class="number">10000</span>)&#125;</span>`</span></span><br><span class="line">        cy.get(<span class="string">&#x27;#txt&#x27;</span>).type(greeting)</span><br><span class="line">        cy.get(<span class="string">&#x27;form&#x27;</span>).submit()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// verify the web page shows the message</span></span><br><span class="line">        <span class="comment">// this ensures we can ask the 2nd user for its last message</span></span><br><span class="line">        <span class="comment">// and it should already be there</span></span><br><span class="line">        cy.contains(<span class="string">&#x27;#messages li&#x27;</span>, greeting).contains(<span class="string">&#x27;strong&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// place the assertions in a should callback</span></span><br><span class="line">        <span class="comment">// to retry them, maybe there is a delay in delivery</span></span><br><span class="line">        cy.should(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// using &quot;include&quot; assertion since the server adds HTML markup</span></span><br><span class="line">          expect(lastMessage, <span class="string">&#x27;last message for 2nd user&#x27;</span>).to.include(greeting)</span><br><span class="line">          expect(lastMessage, <span class="string">&#x27;has the sender&#x27;</span>).to.include(name)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        cy.log(<span class="string">&#x27;**second user leaves**&#x27;</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          socket.disconnect()</span><br><span class="line">        &#125;)</span><br><span class="line">        cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;secondName&#125;</span> left the chat..`</span>).should(</span><br><span class="line">          <span class="string">&#x27;be.visible&#x27;</span>,</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Note that this test disconnects the second user and confirms the page shows the right message.</p><p><img src="../images/chat-coverage/second.png" alt="The Cypress test UI"></p><p>The fullstack code coverage achieves 100% for both the client and the server files.</p><p><img src="../images/chat-coverage/second-coverage.png" alt="The code coverage report shows 100% code coverage"></p><p>The server really exercised all Socket commands.</p><p><img src="../images/chat-coverage/second-server.png" alt="The server coverage during the test"></p><h2><span id="run-two-test-runners">Run two test runners</span></h2><p>Now let&#39;s switch to the more complicated way of verifying the chat between two users - by running two test runners. Does it give us any more confidence? Does it cover any more code lines? Well, it would be hard to cover more lines, since we already have reached 100% code coverage!</p><p>We will run two test runners and they will wait for each other using checkpoints. For example, here are the ends of the two spec files where the first user disconnects by going away from the page <code>localhost:8080</code> and the second user confirms it sees the message &quot;First left the chat&quot;</p><figure class="highlight js"><figcaption><span>cypress/pair/first-user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// disconnect from the chat by visiting the blank page</span></span><br><span class="line">cy.window().then(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">  win.location.href = <span class="string">&#x27;about:blank&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">cy.task(<span class="string">&#x27;waitForCheckpoint&#x27;</span>, <span class="string">&#x27;second user saw first user leave&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/pair/second-user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the first user will disconnect now</span></span><br><span class="line">cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;firstName&#125;</span> left the chat..`</span>).should(</span><br><span class="line">  <span class="string">&#x27;be.visible&#x27;</span>,</span><br><span class="line">)</span><br><span class="line">cy.task(<span class="string">&#x27;checkpoint&#x27;</span>, <span class="string">&#x27;second user saw first user leave&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The code coverage stays the same: more lines might be repeated, but no new lines can possible be added to the already full coverage.</p><table><thead><tr><th>Testing approach</th><th>Fullstack code coverage percentage</th></tr></thead><tbody><tr><td>Single spec</td><td>95%</td></tr><tr><td>Mock socket</td><td>75%</td></tr><tr><td>2nd user via socket</td><td>100%</td></tr><tr><td>Run two test runners</td><td>100%</td></tr></tbody></table><p>Happy fullstack testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In several blog posts I have shown how to test a Socket.io chat application using Cypress.io&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Title&lt;/th&gt;
&lt;th&gt;
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Test Video Play Using Cypress</title>
    <link href="https://glebbahmutov.com/blog/test-video-play/"/>
    <id>https://glebbahmutov.com/blog/test-video-play/</id>
    <published>2021-08-13T04:00:00.000Z</published>
    <updated>2021-08-13T18:37:49.773Z</updated>
    
    <content type="html"><![CDATA[<p>If you want to play a video using <code>&lt;video&gt;</code> element, how do you confirm that it is playing? By using its <a href="https://html.spec.whatwg.org/multipage/media.html#playing-the-media-resource">properties</a>.</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">video</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Video<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;test1.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>üéÅ You can find the source code for this blog post in the repo <a href="https://github.com/bahmutov/video-example">bahmutov/video-example</a>. üì∫ You can watch the explanation in the video <a href="https://www.youtube.com/watch?v=w5vZspiCiuQ">Test And Play Video From Cypress</a>.</p></blockquote><p>At the start, the video should be paused. We can confirm it using <a href="https://glebbahmutov.com/cypress-examples/commands/assertions.html">have.prop assertions</a>.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;plays video&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// https://html.spec.whatwg.org/multipage/media.html#playing-the-media-resource</span></span><br><span class="line">  cy.get(<span class="string">&#x27;video&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;paused&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">    .and(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;ended&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/video-example/load.png" alt="Video is paused"></p><p>Let&#39;s play the video. We need to get the <code>video</code> HTML element reference and call <code>play()</code> method.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;video&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;paused&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">  .and(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;ended&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">$video</span>) =&gt;</span> &#123;</span><br><span class="line">    $video[<span class="number">0</span>].play()</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>The video is playing - let&#39;s confirm it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;video&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;paused&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">  .and(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;ended&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">$video</span>) =&gt;</span> &#123;</span><br><span class="line">    $video[<span class="number">0</span>].play()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// once the video starts playing, check props</span></span><br><span class="line">cy.get(<span class="string">&#x27;video&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;paused&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">  .and(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;ended&#x27;</span>, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>Our video is pretty short (it is about 6 seconds long OBS recording). Thus we can use the built-in assertion <a href="https://on.cypress.io/retry-ability">retry-ability</a> to wait until the property <code>ended</code> turns to true.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;plays video&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// https://html.spec.whatwg.org/multipage/media.html#playing-the-media-resource</span></span><br><span class="line">  cy.get(<span class="string">&#x27;video&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;paused&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">    .and(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;ended&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">$video</span>) =&gt;</span> &#123;</span><br><span class="line">      $video[<span class="number">0</span>].play()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// once the video starts playing, check props</span></span><br><span class="line">  cy.get(<span class="string">&#x27;video&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;paused&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">    .and(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;ended&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// wait for the video to finish playing</span></span><br><span class="line">  <span class="comment">// by retrying the assertion</span></span><br><span class="line">  <span class="comment">// I think our video is about 6 seconds long</span></span><br><span class="line">  cy.get(<span class="string">&#x27;video&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">10000</span> &#125;).and(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;ended&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/video-example/test-play.gif" alt="The test plays the video to the end"></p><h2><span id="video-duration">Video duration</span></h2><p>If we know the expected video duration, we can confirm it</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;has known duration&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;video&#x27;</span>).should(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;duration&#x27;</span>, <span class="number">6.8</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If we do not known the video duration, we can assert that it is greater than zero seconds. At first the <code>duration</code> property is NaN, then it becomes defined as the video information loads.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;has some positive duration&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// at first it is NaN, then it becomes a number</span></span><br><span class="line">  cy.get(<span class="string">&#x27;video&#x27;</span>).should(<span class="function">(<span class="params">$video</span>) =&gt;</span> &#123;</span><br><span class="line">    expect($video[<span class="number">0</span>].duration).to.be.gt(<span class="number">0</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/video-example/duration.gif" alt="Confirming the video has the duration number"></p><h2><span id="controlling-the-playing-speed">Controlling the playing speed</span></h2><p>We can change how fast the video is played using the <code>playbackRate</code> property. The test can limit how long it waits for the <code>ended: true</code> assertion.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;plays video at 4x speed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;video&#x27;</span>).then(<span class="function">(<span class="params">$video</span>) =&gt;</span> &#123;</span><br><span class="line">    $video[<span class="number">0</span>].playbackRate = <span class="number">4</span></span><br><span class="line">    $video[<span class="number">0</span>].play()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// wait for the video to finish playing</span></span><br><span class="line">  <span class="comment">// because the video is playing at 4x speed</span></span><br><span class="line">  <span class="comment">// we don&#x27;t have to wait as long</span></span><br><span class="line">  cy.get(<span class="string">&#x27;video&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">2000</span> &#125;).and(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;ended&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/video-example/fast-speed.gif" alt="The test plays the video at 4x speed"></p><p>That was a fast test.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you want to play a video using &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; element, how do you confirm that it is playing? By using its &lt;a href=&quot;https:
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Mock Network When Using Next.js getServerSideProps Call</title>
    <link href="https://glebbahmutov.com/blog/mock-network-from-server/"/>
    <id>https://glebbahmutov.com/blog/mock-network-from-server/</id>
    <published>2021-08-10T04:00:00.000Z</published>
    <updated>2021-08-10T16:14:02.562Z</updated>
    
    <content type="html"><![CDATA[<p>Cypress has a great way to spy or stub network calls the application makes. Just use the <a href="https://on.cypress.io/intercept">cy.intercept</a> command and have the full control over Ajax calls and static resources. But sometimes, the application is making the network calls from the server-side call. For example, a Next.js application might use the <code>getServerSideProps</code> method to retrieve a joke to be shown to the user.</p><figure class="highlight js"><figcaption><span>pages/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./index.module.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HomePage</span>(<span class="params">&#123; joke &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.home&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-cy</span>=<span class="string">&quot;joke&quot;</span> <span class="attr">className</span>=<span class="string">&#123;styles.content&#125;</span>&gt;</span>&#123;joke&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getServerSideProps</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;getServerSideProps&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">&#x27;https://icanhazdadjoke.com/&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(url, &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> res.json()</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      joke: data.joke</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HomePage</span><br></pre></td></tr></table></figure><p>Without any network mocking, the Cypress test can only assert that there is some text on the page.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;fetches a random joke&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=joke]&#x27;</span>).should(<span class="string">&#x27;not.be.empty&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/mock-network-from-server/no-control.png" alt="A random joke is displayed"></p><p>It would be very nice to stub the <code>fetch</code> call used by the <code>getServerSideProps</code> method. Unfortunately, this call is not made from the web application running in the browser; it is made from the server process.</p><blockquote class="pullquote"><p>üéÅ You can find the source code from this blog post in the repo <a href="https://github.com/bahmutov/nock-getServerSideProps">bahmutov/nock-getServerSideProps</a>. You can also watch the explanation in this video <a href="https://youtu.be/33Hq41O0bvU">Stub Network Calls Made by Next.js App in getServerSideProps Method</a>.</p></blockquote><p>What if we had access to the server process so we could install network stubs whenever we needed? We could use <a href="https://github.com/nock/nock">nock</a> library to control the network - the same network used by the Next.js server-side process.</p><p>Here is what we can do - we could run the Next.js server right inside the Cypress plugins process. This process runs in the background, and the test running in the browser can communicate with the process through the <a href="https://on.cypress.io/task">cy.task</a> command. We can start the Next.js application through the <a href="https://nextjs.org/docs/advanced-features/custom-server">custom http server</a> approach.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> next = <span class="built_in">require</span>(<span class="string">&#x27;next&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// start the Next.js server when Cypress starts</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (on, config) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> app = next(&#123; <span class="attr">dev</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  <span class="keyword">const</span> handleNextRequests = app.getRequestHandler()</span><br><span class="line">  <span class="keyword">await</span> app.prepare()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> customServer = <span class="keyword">new</span> http.Server(<span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> handleNextRequests(req, res)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    customServer.listen(<span class="number">3000</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;&gt; Ready on http://localhost:3000&#x27;</span>)</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>ü§î Wait, doesn&#39;t Cypress documentation advise <em>not</em> to start the server from the plugin process? Yes it does, but the documentation cannot <em>stop</em> us. We are like a professional driver on the closed track - we can do whatever we want.</p></blockquote><p>We start the server inside the Cypress process instead of an external process. This only works locally, of course. Let&#39;s add network mocking using <code>nock</code>. We need a way to reset the network mocks (we still want the first test to happen without stubbing), and we need a way to set a specific network mock. We can create tasks for these.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nock = <span class="built_in">require</span>(<span class="string">&#x27;nock&#x27;</span>)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// start the Next.js server when Cypress starts</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (on, config) =&gt; &#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment">// register handlers for cy.task command</span></span><br><span class="line">  <span class="comment">// https://on.cypress.io/task</span></span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">clearNock</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      nock.restore()</span><br><span class="line">      nock.cleanAll()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">nock</span>(<span class="params">&#123; hostname, method, path, statusCode, body &#125;</span>)</span> &#123;</span><br><span class="line">      nock.activate()</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;nock will: %s %s%s respond with %d %o&#x27;</span>,</span><br><span class="line">        method, hostname, path, statusCode, body)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// add one-time network stub like</span></span><br><span class="line">      <span class="comment">// nock(&#x27;https://icanhazdadjoke.com&#x27;).get(&#x27;/&#x27;).reply(200, ...)</span></span><br><span class="line">      method = method.toLowerCase()</span><br><span class="line">      nock(hostname)[method](path).reply(statusCode, body)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s write the spec.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.task(<span class="string">&#x27;clearNock&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;fetches a random joke&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=joke]&#x27;</span>).should(<span class="string">&#x27;not.be.empty&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;getServerSideProps returns mock&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> joke = <span class="string">&#x27;Our wedding was so beautiful, even the cake was in tiers.&#x27;</span></span><br><span class="line">  cy.task(<span class="string">&#x27;nock&#x27;</span>, &#123;</span><br><span class="line">    hostname: <span class="string">&#x27;https://icanhazdadjoke.com&#x27;</span>,</span><br><span class="line">    method: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    statusCode: <span class="number">200</span>,</span><br><span class="line">    body: &#123;</span><br><span class="line">      id: <span class="string">&#x27;NmbFtH69hFd&#x27;</span>,</span><br><span class="line">      joke,</span><br><span class="line">      status: <span class="number">200</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// nock has worked!</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;[data-cy=joke]&#x27;</span>, joke)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The browser shows our joke! The network stub has worked.</p><p><img src="../images/mock-network-from-server/nock.png" alt="The network stub has worked"></p><p>We can check the terminal output to confirm the <code>getServerSideProps</code> got the joke we have set up.</p><p><img src="../images/mock-network-from-server/term.png" alt="The terminal output shows mocking messages"></p><p>Our Cypress test and the Next.js app running inside the plugins process are shown in the diagram below.</p><p><img src="../images/mock-network-from-server/nock-next.png" alt="The server running inside the plugins process with network mocked by the nock library"></p><h2><span id="see-also">See also</span></h2><ul><li>if you can run your Next.js server inside the browser using StackBlitz, then you can stub the network calls from the server using <code>cy.intercept</code> command as the video below shows.</li></ul><center><iframe width="560" height="315" src="https://www.youtube.com/embed/xdVRVhUUgCI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><ul><li>I have described using <code>nock</code> to stub network calls in other blog posts, like <a href="/blog/mock-system-apis/" title="Mock system APIs">Mock system APIs</a> and <a href="/blog/simple-ajax-testing/" title="Simple Ajax testing">Simple Ajax testing</a>.</li><li>we could test the home page component using a component testing approach, read the post <a href="/blog/components-people-test/" title="Components People Test">Components People Test</a></li><li>we could also let the server fetch the real joke without mocking the network, but overwrite it in the page received by the browser, see <a href="/blog/control-nextjs-data-during-tests/" title="Control Next.js Server-Side Data During Cypress Tests">Control Next.js Server-Side Data During Cypress Tests</a>.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Cypress has a great way to spy or stub network calls the application makes. Just use the &lt;a href=&quot;https://on.cypress.io/intercept&quot;&gt;cy.int
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Listen To The Application Events From Cypress Tests</title>
    <link href="https://glebbahmutov.com/blog/listen-to-events/"/>
    <id>https://glebbahmutov.com/blog/listen-to-events/</id>
    <published>2021-08-08T04:00:00.000Z</published>
    <updated>2021-08-08T13:41:18.459Z</updated>
    
    <content type="html"><![CDATA[<p>Often the web application uses events that flow from one part of the application to another. You might need to observe these events from the end-to-end tests to confirm the application sends them. This blog post shows how to receive the custom DOM events and jQuery events. In every case, it is important to set up the listener before the application sends the event.</p><h2><span id="observe-the-dom-event-sent-to-the-document">Observe the DOM event sent to the document</span></h2><blockquote class="pullquote"><p>If you prefer watching the explanation, check out the video <a href="https://www.youtube.com/watch?v=h3O-ZxIItPk">Listen To The Application Dispatching Events To The Document</a>. You can find the source code in the repo <a href="https://github.com/bahmutov/listen-to-custom-event">bahmutov/listen-to-custom-event</a>.</p></blockquote><p>Imagine the application is sending a custom DOM event to the <code>document</code> object</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;sending DOM event loading to the document&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> loadingEvent = <span class="keyword">new</span> CustomEvent(<span class="string">&#x27;loading&#x27;</span>, &#123;</span><br><span class="line">  detail: &#123;</span><br><span class="line">    message: <span class="string">&#x27;Loading...&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.dispatchEvent(loadingEvent)</span><br></pre></td></tr></table></figure><p>We can receive the same event from the Cypress test by subscribing</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;sends an event to the document&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.document().then(<span class="function">(<span class="params">doc</span>) =&gt;</span> &#123;</span><br><span class="line">    doc.addEventListener(<span class="string">&#x27;loading&#x27;</span>, cy.stub().as(<span class="string">&#x27;loading&#x27;</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// on load the app should have sent an event</span></span><br><span class="line">  cy.get(<span class="string">&#x27;@loading&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/listen-to-events/doc.png" alt="Loading event confirmed"></p><p>We are getting the document object using <a href="https://on.cypress.io/document">cy.document</a> just to call its method <code>addEventListener</code>. We can invoke the method right away using the <a href="https://on.cypress.io/invoke">.invoke</a> command. We can also confirm the details in the event object.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;sends an event to the document&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.document().invoke(<span class="string">&#x27;addEventListener&#x27;</span>, <span class="string">&#x27;loading&#x27;</span>, cy.stub().as(<span class="string">&#x27;loading&#x27;</span>))</span><br><span class="line">  <span class="comment">// on load the app should have sent an event</span></span><br><span class="line">  cy.get(<span class="string">&#x27;@loading&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;firstCall.args.0.detail&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;deep.equal&#x27;</span>, &#123;</span><br><span class="line">      message: <span class="string">&#x27;Loading...&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/listen-to-events/doc2.png" alt="Refactored test using cy.invoke"></p><p>In the tests above we still might have a race condition; we call the <code>cy.document()... addEventListener</code> after the <code>cy.visit</code> command. By that time, the application might have fired the event already. The safest way to listen to the event sent at the application&#39;s startup is to register them <em>before</em> the application loads. We cannot simply move <code>addEventListener</code> before <code>cy.visit</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ‚õîÔ∏è INCORRECT, WILL NOT WORK</span></span><br><span class="line">cy.document().invoke(<span class="string">&#x27;addEventListener&#x27;</span>, <span class="string">&#x27;loading&#x27;</span>, cy.stub().as(<span class="string">&#x27;loading&#x27;</span>))</span><br><span class="line">cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/listen-to-events/wrong.png" alt="Cannot use cy.document before cy.visit"></p><p>Every time <code>cy.visit</code> runs, it creates a <em>new</em> document, while our stub was attached to the <em>previous</em> document instance. We really need to listen to the document object created by the <code>cy.visit</code> command. Luckily, there is <code>onBeforeLoad</code> or <a href="https://on.cypress.io/catalog-of-events">&#39;window:before:load&#39;</a> callbacks - they run between creating a new <code>window</code> and <code>document</code> objects, and the application code.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ‚úÖ THE RIGHT WAY TO PREPARE FOR THE EVENT ON LOAD</span></span><br><span class="line">cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">    win.document.addEventListener(<span class="string">&#x27;loading&#x27;</span>, cy.stub().as(<span class="string">&#x27;loading&#x27;</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="observe-the-dom-event-sent-to-an-element">Observe the DOM event sent to an element</span></h2><p>The application might send event to a specific element.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ref = React.createRef()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> onButtonClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;sending DOM event loading to the ref element&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> myEvent = <span class="keyword">new</span> CustomEvent(<span class="string">&#x27;clicked&#x27;</span>, &#123;</span><br><span class="line">    detail: &#123;</span><br><span class="line">      message: <span class="string">&#x27;Button clicked&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  ref.current.dispatchEvent(myEvent)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;input data-cy=<span class="string">&quot;ref&quot;</span> type=<span class="string">&quot;text&quot;</span> ref=&#123;ref&#125; /&gt;</span><br><span class="line">&lt;button onClick=&#123;<span class="function">() =&gt;</span> onButtonClick()&#125;&gt;Send event to the input&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>We can listen to the events sent to the <code>input</code> element by using jQuery <code>on</code> method - because we get the jQuery object from the <a href="https://on.cypress.io/get">cy.get</a> and the <a href="https://on.cypress.io/contains">cy.contains</a> commands.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;sends an event to the ref component&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=ref]&#x27;</span>).invoke(<span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;clicked&#x27;</span>, cy.stub().as(<span class="string">&#x27;clicked&#x27;</span>))</span><br><span class="line">  cy.get(<span class="string">&#x27;button&#x27;</span>).click().click()</span><br><span class="line">  cy.get(<span class="string">&#x27;@clicked&#x27;</span>).should(<span class="string">&#x27;have.been.calledTwice&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/listen-to-events/ref.png" alt="Confirm the events send to the element"></p><p>You can watch the explanation in the video <a href="https://www.youtube.com/watch?v=Uo99lvfZLJQ">Testing DOM Events Sent to ref.current Element By React App</a>.</p><h2><span id="observe-the-jquery-events">Observe the jQuery events</span></h2><p>What if the application is sending custom jQuery events? You can receive these events but you have to be careful: you must use the <em>same jQuery instance</em> that sends them. From the test, you must get the reference to the jQuery instance running inside the application, not the jQuery instance bundled with Cypress under <code>Cypress.$</code> property.</p><blockquote class="pullquote"><p>If you prefer watching the explanation, check out the video <a href="https://www.youtube.com/watch?v=q4bhaXl3pEc">Test The Custom jQuery Events Using Cypress</a>. You can find the source code in the repo <a href="https://github.com/bahmutov/jquery-custom-events-example">bahmutov/jquery-custom-events-example</a>.</p></blockquote><p>Imagine our application is including jQuery on the page</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script</span><br><span class="line">  src=&quot;https://code.jquery.com/jquery-3.6.0.slim.min.js&quot;</span><br><span class="line">  integrity=&quot;sha256-u7e5khyithlIdTpu22PHhENmPcRdFiHRjhAuHcs05RI=&quot;</span><br><span class="line">  crossorigin=&quot;anonymous&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- example https://learn.jquery.com/events/introduction-to-custom-events/ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;room&quot;</span> <span class="attr">id</span>=<span class="string">&quot;kitchen&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Kitchen<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;lightbulb off&quot;</span>&gt;</span>üí°<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;room&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bedroom&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Bedroom<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;lightbulb off&quot;</span>&gt;</span>üí°<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;master_switch&quot;</span>&gt;</span>Master switch<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The application sends <a href="https://learn.jquery.com/events/introduction-to-custom-events/">custom jQuery events</a> in the <code>app.js</code> in response to the user clicks.</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.lightbulb&#x27;</span>)</span><br><span class="line">  .on(<span class="string">&#x27;light:on&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).removeClass(<span class="string">&#x27;off&#x27;</span>).addClass(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .on(<span class="string">&#x27;light:off&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).removeClass(<span class="string">&#x27;on&#x27;</span>).addClass(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#master_switch&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> lightbulbs = $(<span class="string">&#x27;.lightbulb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// trigger custom global event</span></span><br><span class="line">  $(<span class="string">&#x27;body&#x27;</span>).trigger(<span class="string">&#x27;lights:toggle&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check if any lightbulbs are on</span></span><br><span class="line">  <span class="keyword">if</span> (lightbulbs.is(<span class="string">&#x27;.on&#x27;</span>)) &#123;</span><br><span class="line">    lightbulbs.trigger(<span class="string">&#x27;light:off&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    lightbulbs.trigger(<span class="string">&#x27;light:on&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let&#39;s confirm the application triggers events like <code>lights:toggle</code>. We will get the jQuery from the application&#39;s window object, then we can get the document, wrap it in the jQuery object, and register a stub.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;triggers custom event&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  cy.window().then(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.document().then(<span class="function">(<span class="params">doc</span>) =&gt;</span> &#123;</span><br><span class="line">      win.$(doc).on(<span class="string">&#x27;lights:toggle&#x27;</span>, cy.stub().as(<span class="string">&#x27;toggle&#x27;</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;#master_switch&#x27;</span>).click().click().click()</span><br><span class="line">  cy.get(<span class="string">&#x27;@toggle&#x27;</span>).should(<span class="string">&#x27;have.been.calledThrice&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/listen-to-events/lights.png" alt="Receiving custom jQuery events"></p><p>Great, it works. We can simplify the test. The command <a href="https://on.cypress.io/visit">cy.visit</a> yields the <code>window</code> object, thus we do not need to call <code>cy.window</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;index.html&#x27;</span>).then(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.document().then(<span class="function">(<span class="params">doc</span>) =&gt;</span> &#123;</span><br><span class="line">    win.$(doc).on(<span class="string">&#x27;lights:toggle&#x27;</span>, cy.stub().as(<span class="string">&#x27;toggle&#x27;</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We are only interested in the <code>win.$</code> property, thus we can use <a href="https://on.cypress.io/its">.its</a> command to get <a href="https://glebbahmutov.com/cypress-examples/recipes/window-property.html">the window property</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  .its(<span class="string">&#x27;$&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">$</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.document().then(<span class="function">(<span class="params">doc</span>) =&gt;</span> &#123;</span><br><span class="line">      $(doc).on(<span class="string">&#x27;lights:toggle&#x27;</span>, cy.stub().as(<span class="string">&#x27;toggle&#x27;</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>We can also shorten getting the <code>document</code> object just to wrap it in the jQuery function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  .its(<span class="string">&#x27;$&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">$</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.document()</span><br><span class="line">      .then($)</span><br><span class="line">      .then(<span class="function">(<span class="params">$doc</span>) =&gt;</span> &#123;</span><br><span class="line">        $doc.on(<span class="string">&#x27;lights:toggle&#x27;</span>, cy.stub().as(<span class="string">&#x27;toggle&#x27;</span>))</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Finally, we get the <code>$doc</code> object just to invoke a method <code>on</code>. We can use the <a href="https://on.cypress.io/invoke">.invoke</a> command to shorten it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  .its(<span class="string">&#x27;$&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">$</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.document()</span><br><span class="line">      .then($)</span><br><span class="line">      .invoke(<span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;lights:toggle&#x27;</span>, cy.stub().as(<span class="string">&#x27;toggle&#x27;</span>))</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Short and sweet.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/test-pubsub/" title="Control The Application Through PubSub From Cypress">Control The Application Through PubSub From Cypress</a></li><li><a href="/blog/cypress-and-xstate/" title="Access XState from Cypress Test">Access XState from Cypress Test</a></li><li><a href="/blog/cypress-vs-other-test-runners/" title="Cypress vs Other Test Runners">Cypress vs Other Test Runners</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Often the web application uses events that flow from one part of the application to another. You might need to observe these events from 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Control The Application Through PubSub From Cypress</title>
    <link href="https://glebbahmutov.com/blog/test-pubsub/"/>
    <id>https://glebbahmutov.com/blog/test-pubsub/</id>
    <published>2021-08-06T04:00:00.000Z</published>
    <updated>2021-08-06T18:53:05.310Z</updated>
    
    <content type="html"><![CDATA[<p>A user has recently asked me about using Cypress tests not delivering events into the application. The application is using <a href="https://github.com/mroderick/PubSubJS">pubsub-js</a> from the &quot;Publisher&quot; component to publish events. Other components, like the &quot;Subscriber&quot; component can subscribe to PubSub events and then updates the page UI.</p><figure class="highlight text"><figcaption><span>Publisher</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type=&quot;button&quot; @click.prevent=&quot;notifyNavbar&quot; data-cy=&quot;publisherbutton&quot;&gt;</span><br><span class="line"></span><br><span class="line">import PubSub from &quot;pubsub-js&quot;;</span><br><span class="line">function notifyNavbar() &#123;</span><br><span class="line">  console.log(&quot;Sending Notification&quot;);</span><br><span class="line">  PubSub.publish(&#x27;notification-update&#x27;, 1);</span><br><span class="line">  console.log(&quot;Notification Sent&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight text"><figcaption><span>Subscriber</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;span data-cy=&quot;notficationcounter&quot;&gt;&#123;&#123; notificationCount &#125;&#125;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">import PubSub from &#x27;pubsub-js&#x27;;</span><br><span class="line"></span><br><span class="line">const notificationCount = ref(0);</span><br><span class="line"></span><br><span class="line">PubSub.subscribe(</span><br><span class="line">  &#x27;notification-update&#x27;,</span><br><span class="line">  (message: string, data: number) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;notification received.&#x27;);</span><br><span class="line">    console.log(data);</span><br><span class="line">    notificationCount.value += data;</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>The first test works correctly confirming the application is working</p><figure class="highlight js"><figcaption><span>cypress/integration/test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;click the button&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;http://localhost:8080/&#x27;</span>);</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=publisherbutton]&#x27;</span>).click();</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=notficationcounter]&#x27;</span>).contains(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/pubsub/first-test.png" alt="The application is working"></p><p><strong>Tip:</strong> move the <code>http://localhost:8080/</code> URL into the <code>cypress.json</code> file. This will avoid the test reload, watch the video <a href="https://youtu.be/f5UaXuAc52c">How to correctly use the baseUrl to visit a site in Cypress</a>.</p><blockquote class="pullquote"><p>üì∫ If you would rather watch the explanation from this blog post, watch my video <a href="https://youtu.be/Axr1Je9KKB8">How To Use PubSub From Cypress Test To Publish Events To Application</a>.</p></blockquote><h2><span id="the-broken-test">The broken test</span></h2><p>The user has written the second test, trying to publish the tests from the <em>test</em> and then check if the &quot;Subscriber&quot; component is updated.</p><figure class="highlight js"><figcaption><span>cypress/integration/test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">&quot;pubsub-js&quot;</span>;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;publish the event&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;http://localhost:8080/&#x27;</span>)</span><br><span class="line">  PubSub.publish(<span class="string">&#x27;notification-update&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=notficationcounter]&#x27;</span>).contains(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Unfortunately the test fails.</p><p><img src="../images/pubsub/second-test.png" alt="The application does not update after the dispatch"></p><p>The application does not see the updated count - it never receives the &quot;notification-update&quot; event. The reason is that Cypress test file is placed in a separate iframe from the application.</p><p><img src="../images/pubsub/iframes.png" alt="The application and the spec iframes"></p><p>Each iframe has its own JavaScript environment, its own <code>window</code> object, its own ... PubSub instance. It is as if two applications were loaded:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">&quot;pubsub-js&quot;</span>;</span></span><br><span class="line"><span class="javascript">    PubSub.subscribe(<span class="string">&#x27;hey&#x27;</span>, ...)</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">&quot;pubsub-js&quot;</span>;</span></span><br><span class="line"><span class="javascript">    PubSub.publish(<span class="string">&#x27;hey&#x27;</span>, ...)</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>While the code looks similar, the two PubSub instances <em>are completely separate</em>. The events published in one iframe are invisible and never mix with the events published in the second one. Our test file published the event - but on its own PubSub.</p><h2><span id="the-solution">The solution</span></h2><p>We need to access the application&#39;s PubSub instance from the spec file. The simplest way is for the application to share it by adding it as a property to the <code>window</code> object.</p><figure class="highlight js"><figcaption><span>Publisher</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">&quot;pubsub-js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.Cypress) &#123;</span><br><span class="line">  <span class="built_in">window</span>.PubSub = PubSub</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From the spec file we can access the application&#39;s <code>window</code> object using the <a href="https://on.cypress.io/window">cy.window</a> command, and then wait for the property <code>PubSub</code> to exist, see <a href="https://glebbahmutov.com/cypress-examples/recipes/window-property.html">The <code>window.property</code> recipe</a>.</p><figure class="highlight js"><figcaption><span>cypress/integration/test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;publish the event&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;http://localhost:8080/&#x27;</span>)</span><br><span class="line">  cy.window().its(<span class="string">&#x27;PubSub&#x27;</span>).then(<span class="function"><span class="params">PubSub</span> =&gt;</span> &#123;</span><br><span class="line">    PubSub.publish(<span class="string">&#x27;notification-update&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=notficationcounter]&#x27;</span>).contains(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Now the test works correctly.</p><p><img src="../images/pubsub/works.png" alt="The test published the event using the right PubSub"></p><p>We can simplify the above test a little. We need the <code>window</code> instance after the <a href="https://on.cypress.io/visit">cy.visit</a> command. The <code>cy.visit</code> command yields the application&#39;s <code>window</code> object, thus we can directly chain the <code>visit</code> and the <code>its</code> commands.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;publish the event&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;http://localhost:8080/&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;PubSub&#x27;</span>).then(<span class="function"><span class="params">PubSub</span> =&gt;</span> &#123;</span><br><span class="line">      PubSub.publish(<span class="string">&#x27;notification-update&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=notficationcounter]&#x27;</span>).contains(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We can simplify the above test even more. We are getting the <code>PubSub</code> object and then immediate invoke its method <code>publish</code>. We can use the Cypress command <a href="https://on.cypress.io/invoke"><code>.invoke</code></a> for this.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;publish the event&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;http://localhost:8080/&#x27;</span>)</span><br><span class="line">    .its(<span class="string">&#x27;PubSub&#x27;</span>)</span><br><span class="line">    .invoke(<span class="string">&#x27;publish&#x27;</span>, <span class="string">&#x27;notification-update&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=notficationcounter]&#x27;</span>).contains(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The nice thing about Cypress <code>.invoke</code> command: if the method returns a Promise, the command will wait for the promise to resolve before continuing with the next Cypress command.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;A user has recently asked me about using Cypress tests not delivering events into the application. The application is using &lt;a href=&quot;http
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Visit The Blank Page Between Cypress Tests</title>
    <link href="https://glebbahmutov.com/blog/visit-blank-page-between-tests/"/>
    <id>https://glebbahmutov.com/blog/visit-blank-page-between-tests/</id>
    <published>2021-07-31T04:00:00.000Z</published>
    <updated>2021-08-02T19:04:23.640Z</updated>
    
    <content type="html"><![CDATA[<p>When a Cypress test finishes, the web application stays in the browser&#39;s window. This could be confusing if the next test does not immediately start with <code>cy.visit</code>. For example, the JavaScript callbacks from the application visited in the first test are still executing, and could &quot;leak&quot; into the second test. Imagine the application scheduling code to execute after a delay:</p><figure class="highlight js"><figcaption><span>src/App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;rendering app&#x27;</span>)</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;running app code&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>Imagine the test confirming the number of console logs calls. The application is printing a message on start up and when adding a todo. The first test successfully passes</p><figure class="highlight js"><figcaption><span>cypress/integration/log-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;logs message on startup&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.spy(win.console, <span class="string">&#x27;log&#x27;</span>).as(<span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the app has loaded</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;@log&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/between-tests/first-test.png" alt="The first test confirms the &quot;console.log&quot; was called exactly once"></p><p>In the screenshot above notice the second <code>log</code> call. It happens <em>after</em> the test has already finished and thus does not affect our assertion <code>cy.get(&#39;@log&#39;).should(&#39;have.been.calledOnce&#39;)</code>.</p><blockquote class="pullquote"><p>üì∫ If you prefer watching the explanation to reading this blog post, I have recorded the video <a href="https://youtu.be/H04KlMirMYs">Visit The Blank Page Between The Tests</a>.</p></blockquote><p>Let&#39;s add a second test that confirms the <code>console.log</code> is called when adding a new Todo item.</p><figure class="highlight js"><figcaption><span>cypress/integration/log-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;logs message on startup&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.spy(win.console, <span class="string">&#x27;log&#x27;</span>).as(<span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the app has loaded</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;@log&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;logs message when adding a todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// the spies and stubs are reset before each test</span></span><br><span class="line">  <span class="comment">// thus we need to spy on the console again</span></span><br><span class="line">  cy.window()</span><br><span class="line">    .its(<span class="string">&#x27;console&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params"><span class="built_in">console</span></span>) =&gt;</span> &#123;</span><br><span class="line">      cy.spy(<span class="built_in">console</span>, <span class="string">&#x27;log&#x27;</span>).as(<span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the app has loaded</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=new-todo]&#x27;</span>).type(<span class="string">&#x27;hello&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;@log&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The second test fails - there is an extra <code>console.log</code> call that now is included in the second test.</p><p><img src="../images/between-tests/second-test.png" alt="The second test fails due to the callback from the first test"></p><p>In my case, if the application uses a delay of 30ms when calling the <code>setTimeout</code>, the application because flaky - sometimes the tests pass and sometimes they fail.</p><figure class="highlight js"><figcaption><span>src/App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;running app code&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">30</span>) <span class="comment">// flaky value</span></span><br></pre></td></tr></table></figure><p><img src="../images/between-tests/flake.gif" alt="The test can pass or fail randomly"></p><p>I do not have to tell you, how frustrating flaky tests are.</p><blockquote class="pullquote"><p>üìö Read my other blog posts about <a href="https://cypress.io/blog/tag/flake/">flaky tests</a> on Cypress blog.</p></blockquote><p>A similar situation when the app does something unexpected due to the previous test can happen for other reasons. For example, a long-running network requests can finish and unexpectedly update the app. At best, the application&#39;s behavior can be hard to explain. At worst, you can get the dreaded <a href="https://on.cypress.io/error-messages#cy-failed-because-the-element-you-are-chaining-off-of-has-become-detached-or-removed-from-the-dom">this element is detached from the DOM</a> error.</p><h2><span id="solution-visiting-a-blank-page">Solution: visiting a blank page</span></h2><p>A good solution to clearly separate the tests and stop any application callbacks is to visit a &quot;neutral&quot; blank page. Unfortunately, using the <code>cy.visit(&#39;about:blank&#39;)</code> would not work.</p><figure class="highlight js"><figcaption><span>cypress/integration/log-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">afterEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;about:blank&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;logs message on startup&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.spy(win.console, <span class="string">&#x27;log&#x27;</span>).as(<span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the app has loaded</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;@log&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;logs message when adding a todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// the spies and stubs are reset before each test</span></span><br><span class="line">  <span class="comment">// thus we need to spy on the console again</span></span><br><span class="line">  cy.window()</span><br><span class="line">    .its(<span class="string">&#x27;console&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params"><span class="built_in">console</span></span>) =&gt;</span> &#123;</span><br><span class="line">      cy.spy(<span class="built_in">console</span>, <span class="string">&#x27;log&#x27;</span>).as(<span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the app has loaded</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=new-todo]&#x27;</span>).type(<span class="string">&#x27;hello&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;@log&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnce&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Notice the URL in the browser - we did NOT visit the <code>about:blank</code> page, instead we have visited our <code>baseUrl</code> + <code>about:blank</code>!</p><p><img src="../images/between-tests/wrong.png" alt="cy.visit does not work with about:blank address"></p><p>We need another way of visiting the blank page. We can use the <code>window.location = &#39;about:blank&#39;</code> instead. Note: we also need to visit the page in every test.</p><figure class="highlight js"><figcaption><span>cypress/integration/log-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.spy(win.console, <span class="string">&#x27;log&#x27;</span>).as(<span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// the app has loaded</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">afterEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.window().then(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">    win.location.href = <span class="string">&#x27;about:blank&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;logs message on startup&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">&#x27;@log&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnceWithExactly&#x27;</span>, <span class="string">&#x27;rendering app&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;logs message when adding a todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">&#x27;@log&#x27;</span>).invoke(<span class="string">&#x27;resetHistory&#x27;</span>) <span class="comment">// reset the spy</span></span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=new-todo]&#x27;</span>).type(<span class="string">&#x27;hello&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;@log&#x27;</span>).should(<span class="string">&#x27;have.been.calledOnceWithExactly&#x27;</span>, <span class="string">&#x27;added todo&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The passing tests show the expected calls - and nothing else.</p><p><img src="../images/between-tests/location.png" alt="The first test no longer leaks console log calls into the second test"></p><p>The callback from the application is truly canceled. You can confirm it is never executed by looking at the DevTools console. The log message &quot;running app code&quot; is never printed, because the JavaScript VM executing the application code for <code>localhost:3000</code> is stopped.</p><p><img src="../images/between-tests/clear-console.png" alt="The DevTools console never shows the message &quot;running app code&quot; from the app callback"></p><p>Notice the application page is blank - because we visit the blank pages <em>after</em> each test. We could leave the application running and instead visit the blank page before each test. In that case make sure the <code>about:page</code> callback is the very first callback executed for each test. A good idea is to place it into the support file, because that file is always loaded before the spec file loads.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.window().then(<span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">    win.location.href = <span class="string">&#x27;about:blank&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/integration/log-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.spy(win.console, <span class="string">&#x27;log&#x27;</span>).as(<span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// the app has loaded</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Nice.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;When a Cypress test finishes, the web application stays in the browser&amp;#39;s window. This could be confusing if the next test does not im
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Burn Cypress Tests on CircleCI</title>
    <link href="https://glebbahmutov.com/blog/burn-tests-on-circle/"/>
    <id>https://glebbahmutov.com/blog/burn-tests-on-circle/</id>
    <published>2021-07-29T04:00:00.000Z</published>
    <updated>2021-08-03T15:33:01.204Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes you add a new end-to-end test and ask yourself: &quot;Is this test flake-free? Is it reliable?&quot; If a new test is unreliable, you are bound to break other people&#39;s test runs. One way to determine if a test is robust, is to run it multiple times in a row. If the tests are all green, the test is good to go.</p><blockquote class="pullquote"><p>üì∫ If you would rather watch the explanation from this blog post, watch it <a href="https://youtu.be/HxAjSUxr84w">here</a> and subscribe to my <a href="https://youtube.com/glebbahmutov">YouTube channel</a>.</p></blockquote><p>Cypress can run a single test on demand using the <a href="https://github.com/cypress-io/cypress-grep">cypress-grep</a> plugin. For example, from the browser&#39;s DevTools Console we can execute the method <code>Cypress.grep(&lt;name of the test&gt;, null, 10)</code> to run a single test ten times in a row.</p><p><img src="../images/burn-circle/ten.png" alt="Run a single test by title ten times in a row from DevTools Console"></p><p>You can grep the tests to run by title and run them N times in a row using Cypress headless mode. Pass the title and the burn number using <code>--env ...</code> argument. To execute the same test five times in a row:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ npx cypress run --env grep=&#x27;completes second&#x27;,burn=5</span><br><span class="line">cypress-grep: tests with &quot;completes second&quot; in their names</span><br><span class="line">cypress-grep: running filtered tests 5 times</span><br><span class="line">...</span><br><span class="line">  - works</span><br><span class="line">  ‚úì completes second item: burning 1 of 5 (1677ms)</span><br><span class="line">  ‚úì completes second item: burning 2 of 5 (1228ms)</span><br><span class="line">  ‚úì completes second item: burning 3 of 5 (1196ms)</span><br><span class="line">  ‚úì completes second item: burning 4 of 5 (1192ms)</span><br><span class="line">  ‚úì completes second item: burning 5 of 5 (1188ms)</span><br><span class="line"></span><br><span class="line">  5 passing (7s)</span><br><span class="line">  1 pending</span><br></pre></td></tr></table></figure><p>There is another way to pass the environment variables besides <code>--env</code> argument. You can pass the values using the environment variables prefixed with <code>CYPRESS_</code> string. The command below is equivalent to the one above:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ CYPRESS_grep=&#x27;completes second&#x27; CYPRESS_burn=5 npx cypress run</span><br><span class="line">cypress-grep: tests with &quot;completes second&quot; in their names</span><br><span class="line">cypress-grep: running filtered tests 5 times</span><br><span class="line">...</span><br><span class="line">  - works</span><br><span class="line">  ‚úì completes second item: burning 1 of 5 (1677ms)</span><br><span class="line">  ‚úì completes second item: burning 2 of 5 (1228ms)</span><br><span class="line">  ‚úì completes second item: burning 3 of 5 (1196ms)</span><br><span class="line">  ‚úì completes second item: burning 4 of 5 (1192ms)</span><br><span class="line">  ‚úì completes second item: burning 5 of 5 (1188ms)</span><br><span class="line"></span><br><span class="line">  5 passing (7s)</span><br><span class="line">  1 pending</span><br></pre></td></tr></table></figure><p>Sometimes we are not sure if a test is flaky or not when running it on a Continuous Integration (CI) server. If you are using a CircleCI to run Cypress tests, here is the way to be able to grep and burn a single test on demand.</p><blockquote class="pullquote"><p>üéÅ You can find the full source code in the repo <a href="https://github.com/bahmutov/todomvc-tests-circleci">bahmutov/todomvc-tests-circleci</a>.</p></blockquote><p>Take your workflow that uses <a href="https://github.com/cypress-io/circleci-orb">Cypress CircleCI Orb</a>. It has a <code>cypress/run</code> job.</p><figure class="highlight yml"><figcaption><span>.circleci/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># to use orbs, must use version &gt;= 2.1</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="comment"># import Cypress orb by specifying an exact version x.y.z</span></span><br><span class="line">  <span class="comment"># or the latest version 1.x.x using &quot;@1&quot; syntax</span></span><br><span class="line">  <span class="comment"># https://github.com/cypress-io/circleci-orb</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">e2e:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">E2E</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">store_artifacts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>We need to pass parameters to this workflow when launching it. We can use the pipeline parameters for this. Let&#39;s add a top-level section to the file.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="comment"># allow running selected tests once or multiple times</span></span><br><span class="line">  <span class="comment"># using the cypress-grep plugin</span></span><br><span class="line">  <span class="comment"># https://github.com/cypress-io/cypress-grep</span></span><br><span class="line">  <span class="attr">GREP:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">default:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">BURN:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">integer</span></span><br><span class="line">    <span class="attr">default:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>Before the <code>cypress/run</code> launches the Bash shell to execute <code>npx cypress run</code> we need to export the <code>CYPRESS_grep</code> and <code>CYPRESS_burn</code> environment variables. We can use the <code>post-checkout</code> option in the <code>cypress/run</code> job to do so, following the <a href="https://circleci.com/docs/2.0/env-vars/">CircleCI env documentation</a>. We can put the values from the pipeline parameters using a special CircleCI syntax:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">e2e:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">E2E</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">store_artifacts:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">post-checkout:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">Export</span> <span class="string">grep</span> <span class="string">parameters</span> <span class="string">as</span> <span class="string">environment</span> <span class="string">variables</span></span><br><span class="line">                <span class="comment"># Exports GREP and BURN to environment variables</span></span><br><span class="line">                <span class="comment"># CYPRESS_GREP and CYPRESS_BURN</span></span><br><span class="line">                <span class="comment"># that Cypress will read automatically and</span></span><br><span class="line">                <span class="comment"># make available in Cypress.env() as Cypress.env(&#x27;grep&#x27;)</span></span><br><span class="line">                <span class="comment"># and Cypress.env(&#x27;burn&#x27;)</span></span><br><span class="line">                <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line">                  <span class="string">echo</span> <span class="string">&#x27;export CYPRESS_grep=&quot;&lt;&lt; pipeline.parameters.GREP &gt;&gt;&quot;&#x27;</span> <span class="string">&gt;&gt;</span> <span class="string">$BASH_ENV</span></span><br><span class="line">                  <span class="string">echo</span> <span class="string">&#x27;export CYPRESS_burn=&lt;&lt; pipeline.parameters.BURN &gt;&gt;&#x27;</span> <span class="string">&gt;&gt;</span> <span class="string">$BASH_ENV</span></span><br></pre></td></tr></table></figure><p>By default, the grep value is an empty string, thus all tests run once. But if we want to run just the second test to really stress-test it, we can launch the pipeline through the CircleCI web app.</p><p><img src="../images/burn-circle/trigger-pipeline.gif" alt="Launch a pipeline run and provide parameters for cypress-grep"></p><p><strong>Tip:</strong> switch to the desired branch before running the pipeline if needed.</p><p>The pipeline parameters are exported as the environment variables for Cypress to read and pass to the plugin. The test &quot;completes second item&quot; then runs by itself 11 times.</p><p><img src="../images/burn-circle/circle1.png" alt="Cypress receives the pipeline parameters through the environment variables"></p><p><img src="../images/burn-circle/circle2.png" alt="The selected test runs 11 times"></p><h2><span id="alternative-pass-the-environment-variables-as-command-prefix">Alternative: pass the environment variables as command prefix</span></h2><p>Cypress CircleCI Orb allows you to define a command prefix that is concatenated with the full <code>cypress run ...</code> command formed by the orb itself. We can use this method to avoid the variable export step.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">e2e:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">E2E</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">store_artifacts:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment"># set the environment variables before running Cypress</span></span><br><span class="line">          <span class="comment"># you can use &quot;yarn&quot; in place of &quot;npx&quot;</span></span><br><span class="line">          <span class="attr">command-prefix:</span> <span class="string">CYPRESS_grep=&quot;&lt;&lt;</span> <span class="string">pipeline.parameters.GREP</span> <span class="string">&gt;&gt;&quot;</span> <span class="string">CYPRESS_burn=&lt;&lt;</span> <span class="string">pipeline.parameters.BURN</span> <span class="string">&gt;&gt;</span> <span class="string">npx</span></span><br></pre></td></tr></table></figure><h2><span id="best-alternative-use-cypress-orb-env-parameter">Best alternative: use Cypress orb env parameter</span></h2><p>I have added <code>env: ...</code> parameter to Cypress orb, released as v1.29.0 (see <a href="https://github.com/cypress-io/circleci-orb/issues/355">issue #355</a>, PR <a href="https://github.com/cypress-io/circleci-orb/pull/358">#358</a>), so now you can pass the burn parameter very simply.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">e2e:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">E2E</span> <span class="string">tests</span></span><br><span class="line">          <span class="attr">store_artifacts:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">env:</span> <span class="string">grep=&quot;&lt;&lt;</span> <span class="string">pipeline.parameters.GREP</span> <span class="string">&gt;&gt;&quot;,burn=&lt;&lt;</span> <span class="string">pipeline.parameters.BURN</span> <span class="string">&gt;&gt;</span></span><br></pre></td></tr></table></figure><h2><span id="run-a-single-test-once">Run a single test once</span></h2><p>If you only provide the <code>GREP</code> parameter, without <code>BURN</code>, then the selected test(s) will run once. For example, let&#39;s run the test with &quot;works&quot; in the title.</p><p><img src="../images/burn-circle/grep.png" alt="We want to run just the tests with &quot;works&quot; in the title"></p><p>Click the &quot;Run Pipeline&quot; button and observe only the selected test run.</p><p><img src="../images/burn-circle/one-test.png" alt="Only the picked test ran"></p><h2><span id="read-more">Read more</span></h2><ul><li><a href="/blog/burning-tests/" title="Burning Tests with cypress-grep">Burning Tests with cypress-grep</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sometimes you add a new end-to-end test and ask yourself: &amp;quot;Is this test flake-free? Is it reliable?&amp;quot; If a new test is unreliabl
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="circle" scheme="https://glebbahmutov.com/blog/tags/circle/"/>
    
  </entry>
  
  <entry>
    <title>Avoid Cypress Pyramid of Doom</title>
    <link href="https://glebbahmutov.com/blog/avoid-cypress-pyramid-of-doom/"/>
    <id>https://glebbahmutov.com/blog/avoid-cypress-pyramid-of-doom/</id>
    <published>2021-07-28T04:00:00.000Z</published>
    <updated>2021-07-28T02:14:25.758Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine an application with two input fields and a numerical result element. In the test we need to verify that the result is the sum of the inputs.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Calculator<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>a = <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;a&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>b = <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;b&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>a + b = <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>You can find this page and the spec file in the repo <a href="https://github.com/bahmutov/cypress-multiple-aliases">bahmutov/cypress-multiple-aliases</a>.</p><blockquote class="pullquote"><p>üì∫ If you would rather watch the explanation from this blog post, watch it <a href="https://youtu.be/MIIEndCTVxc">here</a> and subscribe to my <a href="https://youtube.com/glebbahmutov">YouTube channel</a>.</p></blockquote><p>If we grab each element, then (pun intended) the test will have a pyramid of callback functions.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;adds numbers&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=a]&#x27;</span>)</span><br><span class="line">    .invoke(<span class="string">&#x27;val&#x27;</span>)</span><br><span class="line">    .then(<span class="built_in">parseInt</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">a</span>) =&gt;</span> &#123;              <span class="comment">// level 1</span></span><br><span class="line">      cy.get(<span class="string">&#x27;[name=b]&#x27;</span>)</span><br><span class="line">        .invoke(<span class="string">&#x27;val&#x27;</span>)</span><br><span class="line">        .then(<span class="built_in">parseInt</span>)</span><br><span class="line">        .then(<span class="function">(<span class="params">b</span>) =&gt;</span> &#123;          <span class="comment">// level 2</span></span><br><span class="line">          cy.get(<span class="string">&#x27;#result&#x27;</span>)</span><br><span class="line">            .invoke(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">            .then(<span class="built_in">parseInt</span>)</span><br><span class="line">            .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123; <span class="comment">// level 3</span></span><br><span class="line">              expect(a + b).to.eq(result)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Can we avoid this? We could store each parsed number in an alias using <a href="https://on.cypress.io/as">.as</a> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;adds numbers via aliases&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=a]&#x27;</span>).invoke(<span class="string">&#x27;val&#x27;</span>).then(<span class="built_in">parseInt</span>).as(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=b]&#x27;</span>).invoke(<span class="string">&#x27;val&#x27;</span>).then(<span class="built_in">parseInt</span>).as(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;#result&#x27;</span>)</span><br><span class="line">    .invoke(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    .then(<span class="built_in">parseInt</span>)</span><br><span class="line">    .as(<span class="string">&#x27;result&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We now need to access all three values at once. If we had just a single value, we could have used <a href="https://on.cypress.io/get">cy.get</a> command. For three values, it would lead back to the pyramid of nested callbacks.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;adds numbers via aliases&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=a]&#x27;</span>).invoke(<span class="string">&#x27;val&#x27;</span>).then(<span class="built_in">parseInt</span>).as(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=b]&#x27;</span>).invoke(<span class="string">&#x27;val&#x27;</span>).then(<span class="built_in">parseInt</span>).as(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;#result&#x27;</span>)</span><br><span class="line">    .invoke(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    .then(<span class="built_in">parseInt</span>)</span><br><span class="line">    .as(<span class="string">&#x27;result&#x27;</span>)</span><br><span class="line">  <span class="comment">// a pyramid again!</span></span><br><span class="line">  cy.get(<span class="string">&#x27;@a&#x27;</span>).then(<span class="function"><span class="params">a</span> =&gt;</span> &#123;                <span class="comment">// level 1</span></span><br><span class="line">    cy.get(<span class="string">&#x27;@b&#x27;</span>).then(<span class="function"><span class="params">b</span> =&gt;</span> &#123;              <span class="comment">// level 2</span></span><br><span class="line">      cy.get(<span class="string">&#x27;@result&#x27;</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;  <span class="comment">// level 3</span></span><br><span class="line">        expect(a + b).to.eq(result)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Instead we can take advantage of the fact that each saved Cypress alias is also added into the test context object. We can access such properties using <code>this.name</code> later on. To make sure we access the <code>a</code>, <code>b</code>, and <code>result</code> properties <em>after</em> they have been set, we chain the access using <code>.then</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;adds numbers via aliases&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;public/index.html&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=a]&#x27;</span>).invoke(<span class="string">&#x27;val&#x27;</span>).then(<span class="built_in">parseInt</span>).as(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[name=b]&#x27;</span>).invoke(<span class="string">&#x27;val&#x27;</span>).then(<span class="built_in">parseInt</span>).as(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;#result&#x27;</span>)</span><br><span class="line">    .invoke(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    .then(<span class="built_in">parseInt</span>)</span><br><span class="line">    .as(<span class="string">&#x27;result&#x27;</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      expect(<span class="built_in">this</span>.a + <span class="built_in">this</span>.b).to.eq(<span class="built_in">this</span>.result)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test is happy.</p><p><img src="../images/avoid-cypress-pyramid-of-doom/test.png" alt="The passing test that uses Cypress aliases to avoid a pyramid of Doom of nested callbacks"></p><h2><span id="use-the-function-syntax">Use the function syntax</span></h2><p>Note that the callback that accesses the properties from the test context object using <code>this.a</code>, <code>this.b</code>, and <code>this.result</code> is a proper function that uses <code>function () &#123; ... &#125;</code> syntax. It cannot be <code>() =&gt; &#123; ... &#125;</code> expression, as such expression would not have the <code>this</code> pointing at the test context object; it would be the global object instead. Thus as a rule of thumb, whenever you use <code>this</code> inside a Cypress test, always have a proper <code>function</code>.</p><h2><span id="see-also">See also</span></h2><p>Read my blog post <a href="/blog/test-closures/" title="Tests, closures and arrow functions">Tests, closures and arrow functions</a> that has a fine Dante reference.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine an application with two input fields and a numerical result element. In the test we need to verify that the result is the sum of 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Control Next.js Server-Side Data During Cypress Tests</title>
    <link href="https://glebbahmutov.com/blog/control-nextjs-data-during-tests/"/>
    <id>https://glebbahmutov.com/blog/control-nextjs-data-during-tests/</id>
    <published>2021-07-17T04:00:00.000Z</published>
    <updated>2021-07-17T12:10:33.873Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#the-default-test">The default test</a></li><li><a href="#using-the-next_data">Using the NEXT_DATA</a></li><li><a href="#modifying-the-next_data">Modifying the NEXT_DATA</a><ul><li><a href="#change-the-next_data-object-when-set">Change the NEXT_DATA object when set</a></li><li><a href="#replace-html">Replace HTML</a></li></ul></li><li><a href="#navigation">Navigation</a></li><li><a href="#related-posts">Related posts</a></li></ul><!-- tocstop --><p>Let&#39;s take a <a href="https://nextjs.org/">Next.js</a> example application that passes data from the server to the client-side through props. You can find my example in the repo <a href="https://github.com/bahmutov/next-state-overwrite-example">bahmutov/next-state-overwrite-example</a>. Here is the home page <a href="https://github.com/bahmutov/next-state-overwrite-example/blob/main/pages/index.js">pages/index.js</a>:</p><figure class="highlight jsx"><figcaption><span>pages/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Head <span class="keyword">from</span> <span class="string">&#x27;next/head&#x27;</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;../styles/Home.module.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getServerSideProps</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> props = &#123;</span><br><span class="line">    experiments: &#123;</span><br><span class="line">      greeting: <span class="string">&#x27;Server-side says hello!&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;server-side props: %o&#x27;</span>, props)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    props,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params">&#123; experiments &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;styles.container&#125;&gt;</span><br><span class="line">      &lt;Head&gt;</span><br><span class="line">        &lt;title&gt;Create Next App&lt;/title&gt;</span><br><span class="line">        &lt;meta name=<span class="string">&quot;description&quot;</span> content=<span class="string">&quot;Generated by create next app&quot;</span> /&gt;</span><br><span class="line">        &lt;link rel=<span class="string">&quot;icon&quot;</span> href=<span class="string">&quot;/favicon.ico&quot;</span> /&gt;</span><br><span class="line">      &lt;/Head&gt;</span><br><span class="line"></span><br><span class="line">      &lt;main className=&#123;styles.main&#125;&gt;</span><br><span class="line">        &lt;h1 className=&#123;styles.title&#125;&gt;Hello there&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">        &lt;p className=&#123;styles.description&#125; data-cy=<span class="string">&quot;greeting&quot;</span>&gt;</span><br><span class="line">          &#123;experiments.greeting || <span class="string">&#x27;Silence&#x27;</span>&#125;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">      &lt;/main&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>getServerSideProps</code> executes server-side, we can see the console log message in the terminal</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wait  - compiling...</span><br><span class="line">event - compiled successfully</span><br><span class="line">server-side props: &#123; experiments: &#123; greeting: &#x27;Server-side says hello!&#x27; &#125; &#125;</span><br></pre></td></tr></table></figure><p>The data is then passed to the client-side through <code>prop</code> to the component where it is used to render the text</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#123;styles.description&#125;</span> <span class="attr">data-cy</span>=<span class="string">&quot;greeting&quot;</span>&gt;</span></span><br><span class="line">  &#123;experiments.greeting || &#x27;Silence&#x27;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can see the result in the browser</p><p><img src="../images/next-data/app.png" alt="The application shows the greeting text"></p><h2><span id="the-default-test">The default test</span></h2><p>We can write a test to confirm the expected message appears on the page.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Next.js app&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;shows the default server-side greeting&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.contains(<span class="string">&#x27;[data-cy=greeting]&#x27;</span>, <span class="string">&#x27;Server-side says hello!&#x27;</span>).should(</span><br><span class="line">      <span class="string">&#x27;be.visible&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test is green</p><p><img src="../images/next-data/the-test.png" alt="The default test"></p><h2><span id="using-the-next_data">Using the NEXT_DATA</span></h2><p>We can avoid hard-coding the expected text. Instead let&#39;s grab the server-side greeting from the page itself. If we look at the source code for the page, we can find the <code>&lt;script id=&quot;__NEXT_DATA__&quot; type=&quot;application/json&quot;&gt;</code> element with the server-side props.</p><p><img src="../images/next-data/props.png" alt="The page source"></p><p>The Next.js code takes that script and parses it into an object <code>window.__NEXT_DATA__</code>.</p><p><img src="../images/next-data/variable.png" alt="The automatically created variable"></p><p>We can access this object from the test to get the expected text.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows the text from the __NEXT_DATA__&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">// visit yields the &quot;window&quot; object</span></span><br><span class="line">    <span class="comment">// and we can get nested property in a single command</span></span><br><span class="line">    .its(<span class="string">&#x27;__NEXT_DATA__.props.pageProps.experiments.greeting&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">greeting</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.contains(<span class="string">&#x27;[data-cy=greeting]&#x27;</span>, greeting).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/next-data/its-greeting.png" alt="Using the greeting from the page props object"></p><h2><span id="modifying-the-next_data">Modifying the NEXT_DATA</span></h2><p>Let&#39;s overwrite the NEXT_DATA before the application uses it. We can do it in two ways.</p><h3><span id="change-the-next_data-object-when-set">Change the NEXT_DATA object when set</span></h3><p>We can intercept the moment when the framework parses the <code>&lt;script id=&quot;__NEXT_DATA__&quot; type=&quot;application/json&quot;&gt;</code> and sets the <code>window.__NEXT_DATA__</code> property. I will use the <code>Object.defineProperty(win, &#39;__NEXT_DATA__&#39; ...)</code> with <code>set</code> and <code>get</code> handlers. The <code>set</code> handler will be called when the framework sets the object. The test can replace the property in the object and the application happily continues from this point.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;removes the text from __NEXT_DATA__&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> greeting = <span class="string">&#x27;Cypress say Yo!&#x27;</span></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    onBeforeLoad: <span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> nextData</span><br><span class="line"></span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(win, <span class="string">&#x27;__NEXT_DATA__&#x27;</span>, &#123;</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">o</span>)</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;setting __NEXT_DATA__&#x27;</span>, o)</span><br><span class="line">          <span class="comment">// here is our change to modify the injected parsed data</span></span><br><span class="line">          o.props.pageProps.experiments.greeting = greeting</span><br><span class="line">          nextData = o</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> nextData</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.contains(<span class="string">&#x27;[data-cy=greeting]&#x27;</span>, greeting).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/next-data/set-greeting.png" alt="Overwrite the greeting property during the test"></p><p>Well, not 100% happily. If we used the prop to set the component&#39;s state, it would be enough. But we are using the greeting server-side to render the initial HTML. If we replace just the property value, the server-side HTML and the client-side HTML versions won&#39;t match. Which is what the React complains about in the DevTools:</p><p><img src="../images/next-data/warning.png" alt="React shows HTML mismatch warning"></p><p>In this case, we need to replace both the page prop and &quot;fix&quot; the server-side HTML the browser receives.</p><h3><span id="replace-html">Replace HTML</span></h3><p>Let&#39;s &quot;fix up&quot; the HTML sent by the server before we replace the greeting inside the NEXT_DATA. Here I put an arrow on the string we need to replace to avoid the warning:</p><p><img src="../images/next-data/html.png" alt="The HTML element we need to update to match the test prop"></p><p>We can use the <a href="https://on.cypress.io/intercept">cy.intercept</a> command for this.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;patches HTML and removes the text from __NEXT_DATA__&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> greeting = <span class="string">&#x27;Cypress say Yo!&#x27;</span></span><br><span class="line">  cy.intercept(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span></span><br><span class="line">    req.continue(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      res.body = res.body.replace(</span><br><span class="line">        <span class="string">&#x27;&gt;Server-side says hello!&lt;/&#x27;</span>,</span><br><span class="line">        <span class="string">`&gt;<span class="subst">$&#123;greeting&#125;</span>&lt;/`</span>,</span><br><span class="line">      )</span><br><span class="line">    &#125;),</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    onBeforeLoad: <span class="function">(<span class="params">win</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> nextData</span><br><span class="line"></span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(win, <span class="string">&#x27;__NEXT_DATA__&#x27;</span>, &#123;</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">o</span>)</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;setting __NEXT_DATA__&#x27;</span>, o)</span><br><span class="line">          <span class="comment">// here is our change to modify the injected parsed data</span></span><br><span class="line">          o.props.pageProps.experiments.greeting = greeting</span><br><span class="line">          nextData = o</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> nextData</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.contains(<span class="string">&#x27;[data-cy=greeting]&#x27;</span>, greeting).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>No more React warnings.</p><p><img src="../images/next-data/no-warning.png" alt="Happy web app with controlled server-side props"></p><h2><span id="navigation">Navigation</span></h2><p>It is not enough to modify the <code>__NEXT_DATA__</code> on the very first page visit. The application might navigate to other pages. For example, let&#39;s add &quot;About&quot; page.</p><figure class="highlight html"><figcaption><span>/pages/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;/about&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span>&gt;</span>About me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The About pages will have its own server-side props</p><figure class="highlight js"><figcaption><span>/pages/about.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Head <span class="keyword">from</span> <span class="string">&#x27;next/head&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;../styles/Home.module.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getServerSideProps</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> props = &#123;</span><br><span class="line">    experiments: &#123;</span><br><span class="line">      greeting: <span class="string">&#x27;About info&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;About server-side props: %o&#x27;</span>, props)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    props,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">About</span>(<span class="params">&#123; experiments &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;styles.container&#125;&gt;</span><br><span class="line">      &lt;Head&gt;</span><br><span class="line">        &lt;title&gt;About&lt;/title&gt;</span><br><span class="line">        &lt;meta name=<span class="string">&quot;description&quot;</span> content=<span class="string">&quot;Generated by create next app&quot;</span> /&gt;</span><br><span class="line">        &lt;link rel=<span class="string">&quot;icon&quot;</span> href=<span class="string">&quot;/favicon.ico&quot;</span> /&gt;</span><br><span class="line">      &lt;/Head&gt;</span><br><span class="line"></span><br><span class="line">      &lt;main className=&#123;styles.main&#125;&gt;</span><br><span class="line">        &lt;h1 className=&#123;styles.title&#125;&gt;About&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">        &lt;p className=&#123;styles.description&#125; data-cy=<span class="string">&quot;greeting&quot;</span>&gt;</span><br><span class="line">          &#123;experiments.greeting || <span class="string">&#x27;Silence&#x27;</span>&#125;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Link href=<span class="string">&quot;/&quot;</span>&gt;</span><br><span class="line">          &lt;a&gt;Home&lt;/a&gt;</span><br><span class="line">        &lt;/Link&gt;</span><br><span class="line">      &lt;/main&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The Next.js framework sends these server-side props through a JSON fetch request to <code>http://localhost:3000/_next/data/development/about.json</code> endpoint.</p><p><img src="../images/next-data/fetch-json.png" alt="The application fetching props for the About page"></p><p>We can spy on this request using <a href="https://on.cypress.io/intercept">cy.intercept</a> command. <strong>Important:</strong> the request comes with the header <code>If-None-Match</code> which controls the caching. In most cases, the server-side JSON object is the same, thus the Next server responds with 304 without data. We need to intercept the actual object during the test, thus we will remove this header to force the server to send the full object. For more examples of <code>cy.intercept</code> command read <a href="/blog/cypress-intercept-problems/" title="Cypress cy.intercept Problems">Cypress cy.intercept Problems</a>.</p><p><img src="../images/next-data/header.png" alt="The request headers used to fetch the server-side props for the About page"></p><p>Let&#39;s intercept and modify the server-side props for the About page.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;modifies __NEXT_DATA__ on navigation&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// let the default greeting show on the home page</span></span><br><span class="line">  <span class="keyword">const</span> defaultGreeting = <span class="string">&#x27;Server-side says hello!&#x27;</span></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;[data-cy=greeting]&#x27;</span>, defaultGreeting).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the About page will make a fetch request to get</span></span><br><span class="line">  <span class="comment">// the server-side props, so we need to be ready</span></span><br><span class="line">  <span class="keyword">const</span> greeting = <span class="string">&#x27;Testing hi&#x27;</span></span><br><span class="line">  cy.intercept(<span class="string">&#x27;_next/data/development/about.json&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// prevent the server from responding with 304</span></span><br><span class="line">    <span class="comment">// without an actual object</span></span><br><span class="line">    <span class="keyword">delete</span> req.headers[<span class="string">&#x27;if-none-match&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> req.continue(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// let&#x27;s use the same test greeting</span></span><br><span class="line">      res.body.pageProps.experiments.greeting = greeting</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.contains(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;About&#x27;</span>).click()</span><br><span class="line">  cy.location(<span class="string">&#x27;pathname&#x27;</span>).should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;/about&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;[data-cy=greeting]&#x27;</span>, greeting).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/next-data/about-test.png" alt="The finished About page test with expected greeting"></p><p>Note: if we go back to the Home page, the framework fetches its page props the same way using the <code>GET development/index.json</code> request.</p><h2><span id="related-posts">Related posts</span></h2><ul><li><a href="/blog/ssr-e2e/" title="End-to-end Testing for Server-Side Rendered Pages">End-to-end Testing for Server-Side Rendered Pages</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#the-default-test&quot;&gt;The default test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#using-the-next_data&quot;&gt;Using the NEXT_DATA&lt;/a&gt;&lt;/li&gt;

      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Test Feature Flags Using Cypress and Flagsmith</title>
    <link href="https://glebbahmutov.com/blog/test-feature-flags/"/>
    <id>https://glebbahmutov.com/blog/test-feature-flags/</id>
    <published>2021-07-16T04:00:00.000Z</published>
    <updated>2021-07-16T15:07:34.315Z</updated>
    
    <content type="html"><![CDATA[<p>This blog post teaches you how to control the feature flags provided by 3rd party services like Flagsmith, LaunchDarkly, Split, etc during end-to-end tests.</p><!-- toc --><ul><li><a href="#the-loading-message">The loading message</a></li><li><a href="#test-application-with-feature-a-turned-off">Test application with Feature A turned OFF</a><ul><li><a href="#stub-the-features-ajax-call">Stub the features Ajax call</a></li><li><a href="#modify-the-response-only">Modify the response only</a></li></ul></li><li><a href="#test-application-with-feature-a-turned-on">Test application with Feature A turned ON</a></li><li><a href="#reusable-function">Reusable function</a></li></ul><!-- tocstop --><p>I have created a small project on <a href="https://flagsmith.com/">Flagsmith.com</a> and added a single feature flag &quot;feature_a&quot;. At first the flag is turned off.</p><p><img src="../images/test-feature-flags/feature_a.png" alt="Feature A toggle on Flagsmith"></p><p>My web application uses the <a href="https://docs.flagsmith.com/clients/javascript">Flagsmith JavaScript SDK</a> to fetch the flags at runtime. Depending on the feature flag presence, the application renders a different message.</p><blockquote class="pullquote"><p>üéÅ You can find the application code and the Cypress tests in the repo <a href="https://github.com/bahmutov/flagsmith-cypress-example">bahmutov/flagsmith-cypress-example</a>.</p></blockquote><p>The <a href="https://github.com/bahmutov/flagsmith-cypress-example/blob/main/public/index.html">index.html</a> loads the Flagsmith library and the application code</p><figure class="highlight html"><figcaption><span>public/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>flagsmith-cypress-example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/flagsmith/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The application code in <a href="https://github.com/bahmutov/flagsmith-cypress-example/blob/main/public/app.js">app.js</a> inserts an element with the text determined by the feature flag.</p><figure class="highlight js"><figcaption><span>public/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// output DIV element</span></span><br><span class="line"><span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">div.setAttribute(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;feature-area&#x27;</span>)</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(div)</span><br><span class="line"></span><br><span class="line">div.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">&#x27;Initializing...&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> shouldShow = flagsmith.hasFeature(<span class="string">&#x27;feature_a&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> label = (shouldShow ? <span class="string">&#x27;Showing&#x27;</span> : <span class="string">&#x27;Not showing&#x27;</span>) + <span class="string">&#x27; feature A&#x27;</span></span><br><span class="line">  div.replaceChild(<span class="built_in">document</span>.createTextNode(label), div.firstChild)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://docs.flagsmith.com/clients/javascript/</span></span><br><span class="line">flagsmith.init(&#123;</span><br><span class="line">  <span class="comment">// comes from the Flagsmith project settings</span></span><br><span class="line">  environmentID: <span class="string">&#x27;gxzgHaQ84gijocUvctHJFb&#x27;</span>,</span><br><span class="line">  onChange: render,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>By default the <code>feature_a</code> is turned off. Thus the application sets the label to &quot;Not showing feature A&quot;.</p><p><img src="../images/test-feature-flags/without-feature.gif" alt="When the Feature A is off"></p><p>If we flip the feature switch and reload the web page, the feature A will be active and the label changes.</p><p><img src="../images/test-feature-flags/with-feature.gif" alt="Activate Feature A"></p><p>Let&#39;s test the web application behavior using Cypress test runner. I want to confirm the following three scenarios:</p><ul><li>the application is showing the loading message while the feature flags are fetched</li><li>the application is working correctly when Feature A is turned OFF during the test</li><li>the application is working correctly when Feature A is turned ON during the test</li></ul><h2><span id="the-loading-message">The loading message</span></h2><p>Let&#39;s load the page from a Cypress test to see what is going on. I will flip the feature A back to &quot;off&quot; in the Flagmisth project. The test in the <a href="https://github.com/bahmutov/flagsmith-cypress-example/blob/main/cypress/integration/spec.js">spec.js</a> uses the <a href="https://on.cypress.io/visit">cy.visit</a> command to load the page.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Flagsmith Cypress example&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;loads the page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Notice the Command Log showing the Ajax call the Flagsmith SDK is making to its API endpoint to fetch the current flags.</p><p><img src="../images/test-feature-flags/ajax.png" alt="Flagsmith SDK is fetching the features"></p><p>Click on that network call to dump its contents in the DevTools console. The server response has all the feature flags in an array.</p><p><img src="../images/test-feature-flags/response.png" alt="The response includes our feature A object"></p><p>In the future tests we can control the response value, but for now let&#39;s just slow the network call to make the loading message visible during the test.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows the loading message&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// slow down the network call by 1 second</span></span><br><span class="line">  cy.intercept(<span class="string">&#x27;/api/v1/flags/&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span></span><br><span class="line">    Cypress.Promise.delay(<span class="number">1000</span>).then(req.continue),</span><br><span class="line">  ).as(<span class="string">&#x27;flags&#x27;</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#feature-area&#x27;</span>, <span class="string">&#x27;Initializing...&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  <span class="comment">// wait for the feature flags Ajax call</span></span><br><span class="line">  cy.wait(<span class="string">&#x27;@flags&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;Initializing...&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test proves the loading message is visible at first, then it goes away.</p><p><img src="../images/test-feature-flags/loading-message.gif" alt="The loading message test"></p><p><strong>Tip:</strong> read the blog post <a href="/blog/negative-assertions/" title="Be Careful With Negative Assertions">Be Careful With Negative Assertions</a> for a detailed essay about testing the loading element.</p><h2><span id="test-application-with-feature-a-turned-off">Test application with Feature A turned OFF</span></h2><h3><span id="stub-the-features-ajax-call">Stub the features Ajax call</span></h3><p>Let&#39;s test how our application behaves without the feature A. We already have the network call response from the Flagsmith API - copy the response object body from the Network tab of the browser&#39;s DevTools.</p><p><img src="../images/test-feature-flags/copy-response.png" alt="Copy the feature flags API call response body from the Network tab"></p><p>Save the text as a JSON file in <a href="https://github.com/bahmutov/flagsmith-cypress-example/blob/main/cypress/fixtures/no-feature-a.json">cypress/fixtures/no-feature-a.json</a>.</p><figure class="highlight json"><figcaption><span>cypress/fixtures/no-feature-a.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">56756</span>,</span><br><span class="line">    <span class="attr">&quot;feature&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="number">10804</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;feature_a&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;created_date&quot;</span>: <span class="string">&quot;2021-07-15T23:38:27.661659Z&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;The first feature&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;initial_value&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">&quot;default_enabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;STANDARD&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;feature_state_value&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;enabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;environment&quot;</span>: <span class="number">9128</span>,</span><br><span class="line">    <span class="attr">&quot;identity&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;feature_segment&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>The test can mock the Ajax call using the above fixture file using the <a href="https://on.cypress.io/intercept">cy.intercept</a> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;does not show feature A&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;/api/v1/flags/&#x27;</span>, &#123; <span class="attr">fixture</span>: <span class="string">&#x27;no-feature-a.json&#x27;</span> &#125;).as(<span class="string">&#x27;flags&#x27;</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.wait(<span class="string">&#x27;@flags&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#feature-area&#x27;</span>, <span class="string">&#x27;Not showing feature A&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/test-feature-flags/stub-no-feature.png" alt="Stub the Flagsmith Ajax call test"></p><h3><span id="modify-the-response-only">Modify the response only</span></h3><p>Stubbing the entire Flagsmith call seems excessive. What if there are a lot of features? Do we have to constantly update the fixture file? We are only interested in the <code>feature_a</code> flag. Let&#39;s spy on the Ajax call to <code>/api/v1/flags/</code> and just modify the response to always have the <code>feature_a</code> OFF.</p><p><strong>Tip:</strong> Cypress bundles <a href="https://on.cypress.io/_">Lodash</a> library as <code>Cypress._</code> so you can use its powerful <a href="https://lodash.com/docs/">utility functions</a> from tests.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;does not show feature A (modify response)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;/api/v1/flags/&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">    req.continue(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      expect(res.body, <span class="string">&#x27;response is a list of features&#x27;</span>).to.be.an(<span class="string">&#x27;array&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> featureA = Cypress._.find(</span><br><span class="line">        res.body,</span><br><span class="line">        (f) =&gt; f.feature.name === <span class="string">&#x27;feature_a&#x27;</span>,</span><br><span class="line">      )</span><br><span class="line">      <span class="comment">// make sure the feature is present</span></span><br><span class="line">      expect(featureA, <span class="string">&#x27;feature_a is present&#x27;</span>).to.be.an(<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">      expect(featureA).to.have.property(<span class="string">&#x27;enabled&#x27;</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">&#x27;changing %s from %s to %s&#x27;</span>,</span><br><span class="line">        featureA.feature.name,</span><br><span class="line">        featureA.enabled,</span><br><span class="line">        <span class="literal">false</span>,</span><br><span class="line">      )</span><br><span class="line">      featureA.enabled = <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).as(<span class="string">&#x27;flags&#x27;</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.wait(<span class="string">&#x27;@flags&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#feature-area&#x27;</span>, <span class="string">&#x27;Not showing feature A&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test uses <code>req.continue((res) =&gt; &#123; ... &#125;)</code> callback to inspect the response from the Flagsmith server and modify the feature flag A. By sprinkling a few assertions there we verify that the flag is still present. The console log message shows that even if we toggle the feature flag for the project, the test still overrides it.</p><p><img src="../images/test-feature-flags/override.png" alt="Override the feature_a flag in the response object"></p><h2><span id="test-application-with-feature-a-turned-on">Test application with Feature A turned ON</span></h2><p>Similar to the previous test, we can verify the application&#39;s behavior when the feature A is turned ON.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows the feature A&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;/api/v1/flags/&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">    req.continue(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      expect(res.body, <span class="string">&#x27;response is a list of features&#x27;</span>).to.be.an(<span class="string">&#x27;array&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> featureA = Cypress._.find(</span><br><span class="line">        res.body,</span><br><span class="line">        (f) =&gt; f.feature.name === <span class="string">&#x27;feature_a&#x27;</span>,</span><br><span class="line">      )</span><br><span class="line">      <span class="comment">// make sure the feature is present</span></span><br><span class="line">      expect(featureA, <span class="string">&#x27;feature_a is present&#x27;</span>).to.be.an(<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">      expect(featureA).to.have.property(<span class="string">&#x27;enabled&#x27;</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">&#x27;changing %s from %s to %s&#x27;</span>,</span><br><span class="line">        featureA.feature.name,</span><br><span class="line">        featureA.enabled,</span><br><span class="line">        <span class="literal">true</span>,</span><br><span class="line">      )</span><br><span class="line">      featureA.enabled = <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).as(<span class="string">&#x27;flags&#x27;</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.wait(<span class="string">&#x27;@flags&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#feature-area&#x27;</span>, <span class="string">&#x27;Showing feature A&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/test-feature-flags/feature-a-on.png" alt="Override the feature_a flag to be true during the test"></p><h2><span id="reusable-function">Reusable function</span></h2><p>Modifying the feature flags can be abstracted into a utility function. For example, we could specify multiple flags to be overwritten, and the utility function will set up a single network intercept with its logic to find and set each feature flag.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> setFeatureFlags = <span class="function">(<span class="params">flags = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  expect(flags).to.be.an(<span class="string">&#x27;object&#x27;</span>).and.not.to.be.empty</span><br><span class="line"></span><br><span class="line">  cy.intercept(<span class="string">&#x27;/api/v1/flags/&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">    req.continue(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      expect(res.body, <span class="string">&#x27;response is a list of features&#x27;</span>).to.be.an(<span class="string">&#x27;array&#x27;</span>)</span><br><span class="line">      Cypress._.forEach(flags, <span class="function">(<span class="params">value, flagName</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> feature = Cypress._.find(</span><br><span class="line">          res.body,</span><br><span class="line">          (f) =&gt; f.feature.name === flagName,</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">// make sure the feature is present</span></span><br><span class="line">        expect(feature, <span class="string">&#x27;feature_a is present&#x27;</span>).to.be.an(<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">        expect(feature).to.have.property(<span class="string">&#x27;enabled&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">          <span class="string">&#x27;changing %s from %s to %s&#x27;</span>,</span><br><span class="line">          feature.feature.name,</span><br><span class="line">          feature.enabled,</span><br><span class="line">          value,</span><br><span class="line">        )</span><br><span class="line">        feature.enabled = value</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).as(<span class="string">&#x27;flags&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;controls the flags&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  setFeatureFlags(&#123; <span class="attr">feature_a</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.wait(<span class="string">&#x27;@flags&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#feature-area&#x27;</span>, <span class="string">&#x27;Showing feature A&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I like add an assertion to verify the function&#39;s arguments like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expect(flags).to.be.an(<span class="string">&#x27;object&#x27;</span>).and.not.to.be.empty</span><br></pre></td></tr></table></figure><p>The above assertion is printed to the Command Log allowing the test run video to reflect what feature flags were set during the test.</p><p><img src="../images/test-feature-flags/reusable.png" alt="Reusable feature flags function"></p><p>Happy Feature Flags Testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This blog post teaches you how to control the feature flags provided by 3rd party services like Flagsmith, LaunchDarkly, Split, etc durin
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Testing React Native Navigation</title>
    <link href="https://glebbahmutov.com/blog/rn-test-for-navigation/"/>
    <id>https://glebbahmutov.com/blog/rn-test-for-navigation/</id>
    <published>2021-07-15T04:00:00.000Z</published>
    <updated>2021-07-15T12:51:41.440Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#the-navigation">The navigation</a></li><li><a href="#the-navigation-tests">The navigation tests</a></li><li><a href="#navigating-back">Navigating back</a></li></ul><!-- tocstop --><p>Let&#39;s take a React Native application that implements the app navigation using <a href="https://reactnavigation.org/">React Navigation</a> packages. Our application first shows a home screen. The user can navigate to the Pokemon List screen, and then to an individual Pokemon card.</p><p><img src="../images/rn-test-for-navigation/navigation.gif" alt="The user is navigating through the Pokemon RN application"></p><p>How do we test the navigation when this React Native application is running through <a href="https://expo.io">Expo</a>? Notice in the above video the URL was not changing at all. Thus we cannot use the typical Cypress commands like <a href="https://on.cypress.io/location">cy.location</a> and <a href="https://on.cypress.io/hash">cy.hash</a> to confirm the screen changes. Instead we need to use the page titles.</p><h2><span id="the-navigation">The navigation</span></h2><p> The Application implements the navigation like this:</p><figure class="highlight js"><figcaption><span>App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;react-native-gesture-handler&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; NavigationContainer &#125; <span class="keyword">from</span> <span class="string">&#x27;@react-navigation/native&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStackNavigator &#125; <span class="keyword">from</span> <span class="string">&#x27;@react-navigation/stack&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Import your screens</span></span><br><span class="line"><span class="keyword">import</span> PokeList <span class="keyword">from</span> <span class="string">&#x27;./components/PokeList&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Pokemon <span class="keyword">from</span> <span class="string">&#x27;./components/Pokemon&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;./components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Stack = createStackNavigator()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;NavigationContainer&gt;</span><br><span class="line">      &lt;Stack.Navigator initialRouteName=<span class="string">&quot;Home&quot;</span>&gt;</span><br><span class="line">        &lt;Stack.Screen name=<span class="string">&quot;Home&quot;</span> component=&#123;Home&#125; /&gt;</span><br><span class="line">        &lt;Stack.Screen name=<span class="string">&quot;PokeList&quot;</span> component=&#123;PokeList&#125; /&gt;</span><br><span class="line">        &lt;Stack.Screen name=<span class="string">&quot;Pokemon&quot;</span> component=&#123;Pokemon&#125; /&gt;</span><br><span class="line">      &lt;/Stack.Navigator&gt;</span><br><span class="line">    &lt;/NavigationContainer&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>üéÅ You can find the application and its tests in the repo <a href="https://github.com/bahmutov/pokemon-api-app">bahmutov/pokemon-api-app</a>. I copied the original code before making it compatible with Expo from the blog post <a href="https://alialhaddad.medium.com/fetching-data-in-react-native-d92fb6876973">Fetching Data in React Native</a>.</p></blockquote><p>The individual Pokemon card component gets its name from the route parameters.</p><figure class="highlight js"><figcaption><span>components/Pokemon/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pokemon</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> navigationOptions = <span class="function">(<span class="params">&#123; route &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">    title: <span class="string">`<span class="subst">$&#123;route.params.name&#125;</span> Info`</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; route &#125; = <span class="built_in">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;Image</span><br><span class="line">          source=&#123;&#123;</span><br><span class="line">            uri: <span class="string">&#x27;https://res.cloudinary.com/aa1997/image/upload/v1535930682/pokeball-image.jpg&#x27;</span>,</span><br><span class="line">          &#125;&#125;</span><br><span class="line">          style=&#123;styles.pokemonImage&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;Text testID=<span class="string">&quot;pokemon-name&quot;</span> style=&#123;styles.nameOfPokemon&#125;&gt;</span><br><span class="line">          &#123;route.params.name&#125;</span><br><span class="line">        &lt;/Text&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Pokemon</span><br></pre></td></tr></table></figure><p>Let&#39;s confirm the navigation works.</p><h2><span id="the-navigation-tests">The navigation tests</span></h2><p>Let&#39;s confirm the application is on the home screen when it loads. We can use the title - which is equal to the <code>name</code> property set by the <code>&lt;Stack.Screen name=&quot;Home&quot; component=&#123;Home&#125; /&gt;</code> element.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Pokemon&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;shows a card&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.title().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;Home&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/rn-test-for-navigation/home-title.png" alt="The home screen test"></p><p>Let&#39;s go to the list screen by clicking the button.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows a card&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.title().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;Home&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;Go to Pokes&#x27;</span>).click()</span><br><span class="line">  cy.title().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;PokeList&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test goes through <em>very</em> quickly, making it hard to see what&#39;s happening.</p><p><img src="../images/rn-test-for-navigation/blink.gif" alt="The test goes to the next screen very very quickly"></p><p>Blink - and you will miss it! Thus I found it useful to add a custom command to slow down the tests where needed.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// using small delays can make the video a lot more useful</span></span><br><span class="line">Cypress.Commands.add(<span class="string">&#x27;delay&#x27;</span>, <span class="function">(<span class="params">ms = <span class="number">500</span></span>) =&gt;</span> &#123;</span><br><span class="line">  cy.wait(ms, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Pokemon&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;shows a card&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.title().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;Home&#x27;</span>).delay()</span><br><span class="line">    cy.contains(<span class="string">&#x27;Go to Pokes&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">    cy.title().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;PokeList&#x27;</span>)</span><br><span class="line">    cy.delay()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/rn-test-for-navigation/delay.gif" alt="The test with delay command"></p><p>A small half-second delay makes the video of the test with screen transitions a lot more useful.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows a card&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.title().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;Home&#x27;</span>).delay()</span><br><span class="line">  cy.contains(<span class="string">&#x27;Go to Pokes&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">  cy.title().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;PokeList&#x27;</span>)</span><br><span class="line">  cy.delay()</span><br><span class="line">  <span class="comment">// the list is fetched from the API</span></span><br><span class="line">  cy.get(<span class="string">&#x27;[data-testid=&quot;poke-card&quot;]&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">    .first()</span><br><span class="line">    .click()</span><br><span class="line"></span><br><span class="line">  cy.title().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;Pokemon&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-testid=pokemon-name]&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>).delay()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test finishes at the individual Pokemon card screen.</p><p><img src="../images/rn-test-for-navigation/card.png" alt="The finished test"></p><h2><span id="navigating-back">Navigating back</span></h2><p>To go back to the Home screen the user would click the &quot;&lt;-&quot; button at the top of the screen. The navigation library inserts the default accessible HTML markup for the button, even adding a label that includes the target screen&#39;s name.</p><p><img src="../images/rn-test-for-navigation/back.png" alt="The Back button markup"></p><p>Let&#39;s extend our test to navigate back to the Home screen. I like adding a log statement to the Command Log for major parts of the test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cy.log(<span class="string">&#x27;**go back to Home screen**&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;[aria-label=&quot;PokeList, back&quot;]&#x27;</span>).click().delay()</span><br><span class="line">cy.title().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;PokeList&#x27;</span>).delay()</span><br><span class="line">cy.get(<span class="string">&#x27;[aria-label=&quot;Home, back&quot;]&#x27;</span>).click()</span><br><span class="line">cy.title().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;Home&#x27;</span>).delay()</span><br></pre></td></tr></table></figure><p>As always, you can use the Command Log to travel back in time, observing the button clicked. Notice the &quot;Before / After&quot; DOM snapshots the Test Runner shows when hovering over the &quot;Click&quot; command.</p><p><img src="../images/rn-test-for-navigation/back-debug.gif" alt="Time-traveling debugger and the Back button"></p><p>Happy React Native testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#the-navigation&quot;&gt;The navigation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-navigation-tests&quot;&gt;The navigation tests&lt;/a&gt;&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="react native" scheme="https://glebbahmutov.com/blog/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>Testing A Web App Using The Keyboard Only</title>
    <link href="https://glebbahmutov.com/blog/test-app-using-the-keyboard/"/>
    <id>https://glebbahmutov.com/blog/test-app-using-the-keyboard/</id>
    <published>2021-07-12T04:00:00.000Z</published>
    <updated>2021-07-12T20:33:43.731Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s take a good TodoMVC example made with accessability features included, as every app should have. One of the aspects we need to confirm in our tests is that the user can fully interact with the app without using a mouse. We need to test every feature using the keyboard, as posts like <a href="https://blog.testlodge.com/keyboard-navigation-accessibility-testing/">Keyboard Navigation Accessibility Testing</a> suggest.</p><!-- toc --><ul><li><a href="#testing">Testing</a></li><li><a href="#completing-items">Completing items</a></li><li><a href="#deleting-the-first-item">Deleting the first item</a></li><li><a href="#editing-an-item">Editing an item</a></li><li><a href="#tab-through-filters">Tab through filters</a></li><li><a href="#test-the-filtered-views">Test the filtered views</a></li><li><a href="#avoiding-clicks">Avoiding clicks</a></li><li><a href="#testing-smaller-features">Testing smaller features</a><ul><li><a href="#cancel-edits">Cancel edits</a></li><li><a href="#clear-completed-todos">Clear completed todos</a></li><li><a href="#toggle-all">Toggle all</a></li></ul></li><li><a href="#publishing-the-site">Publishing the site</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><p>Our example app is at <a href="https://dylanb.github.io/todomvc/">dylanb.github.io/todomvc</a> with the source code available in <a href="https://github.com/dylanb/todomvc">dylanb/todomvc</a> repo. Here is me adding a todo item and then marking it completed using the keyboard keys.</p><p><img src="../images/keyboard-only/add.gif" alt="Adding and completing a todo using the keyboard"></p><p>Every action can be done using the keyboard. Every element of the application can get its focus by pressing the Tab key. We can focus on the previous item by pressing Shift+Tab keys together. In the video below I rotate through the items and the buttons using the keyboard Tab key before going back to the input field.</p><p><img src="../images/keyboard-only/tab.gif" alt="Navigating through the application using Tab and reverse Tab"></p><h2><span id="testing">Testing</span></h2><p>To learn the basics of keyboard testing for web applications, read the <a href="https://webaim.org/techniques/keyboard/">WebAIM: Keyboard Accessibility</a> article.</p><p>Let&#39;s confirm the application does in fact work using the keyboard commands without using the mouse button. To write the tests I will use <a href="https://www.cypress.io">Cypress.io</a> with <a href="https://github.com/dmtrKovalenko/cypress-real-events#readme">cypress-real-events</a> plugin for sending the real &quot;Tab&quot; event to the browser. Tip: read my blog post <a href="/blog/cypress-real-events/" title="Cypress Real Events Plugin">Cypress Real Events Plugin</a> for more information about this awesome plugin.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D cypress cypress-real-events</span></span><br><span class="line">+ cypress-real-events@1.5.0</span><br><span class="line">+ cypress@7.7.0</span><br></pre></td></tr></table></figure><blockquote class="pullquote"><p>üéÅ You can find these tests and the fixed application in the repo <a href="https://github.com/bahmutov/test-todomvc-using-keyboard">bahmutov/test-todomvc-using-keyboard</a>. You can use my version of the application at <a href="https://glebbahmutov.com/test-todomvc-using-keyboard/">https://glebbahmutov.com/test-todomvc-using-keyboard/</a>.</p></blockquote><p>Let&#39;s write a test to make sure we can focus the input field by pressing <code>Tab</code>.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// load intelligent code completion for Cypress and the plugin</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress-real-events&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-real-events/support&#x27;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;works using the keyboard only&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> noLog = &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;What needs to be done?&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    <span class="comment">// for the purpose of the blog post</span></span><br><span class="line">    <span class="comment">// slow down the commands by inserting waits</span></span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the first tab should bring us to the input element</span></span><br><span class="line">  <span class="comment">// but first we must be in the application&#x27;s iframe</span></span><br><span class="line">  cy.get(<span class="string">&#x27;body&#x27;</span>).realClick().realPress(<span class="string">&#x27;Tab&#x27;</span>)</span><br><span class="line">  cy.focused().should(<span class="string">&#x27;have.id&#x27;</span>, <span class="string">&#x27;new-todo&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We are using <code>.realClick()</code> to first focus the test runner on the application, then send <code>.realPress(&#39;Tab&#39;)</code>. The application should set focus on the input field, which we check using the <code>cy.focused().should(&#39;have.id&#39;, &#39;new-todo&#39;)</code> assertion.</p><p><img src="../images/keyboard-only/test1.gif" alt="The first Tab focuses on the input field"></p><p>While the element has focus, let&#39;s confirm its label is visible. Let&#39;s look at the HTML markup.</p><p><img src="../images/keyboard-only/markup.png" alt="The input field label"></p><p>We can add to our test a new command with an explicit visibility assertion.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the first tab should bring us to the input element</span></span><br><span class="line"><span class="comment">// but first we must be in the application&#x27;s iframe</span></span><br><span class="line">cy.get(<span class="string">&#x27;body&#x27;</span>).realClick().realPress(<span class="string">&#x27;Tab&#x27;</span>)</span><br><span class="line">cy.focused().should(<span class="string">&#x27;have.id&#x27;</span>, <span class="string">&#x27;new-todo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// confirm the label is visible</span></span><br><span class="line">cy.contains(<span class="string">&#x27;label[for=new-todo]&#x27;</span>, <span class="string">&#x27;What needs to be done?&#x27;</span>).should(</span><br><span class="line">  <span class="string">&#x27;be.visible&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Note that Cypres time-traveling debugger does not reset the &quot;:focus&quot; when recreating the DOM snapshot. Thus if we go back to the <code>cy.contains</code> command, the DOM snapshot restores the regular element.</p><p><img src="../images/keyboard-only/hover.gif" alt="Going back to the command shows the DOM snapshot without the element&#39;s focus"></p><p>Thus to make the tests more explicit and the elements clearly positioned, let&#39;s add a <a href="https://on.cypress.io/wait">wait</a> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// confirm the label is visible</span></span><br><span class="line">cy.wait(<span class="number">1000</span>, noLog)</span><br><span class="line">cy.contains(<span class="string">&#x27;label[for=new-todo]&#x27;</span>, <span class="string">&#x27;What needs to be done?&#x27;</span>).should(</span><br><span class="line">  <span class="string">&#x27;be.visible&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Let&#39;s add a few Todo items by typing into the focused input field.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.focused().type(<span class="string">&#x27;code app&#123;enter&#125;&#x27;</span>).type(<span class="string">&#x27;ensure a11y&#123;enter&#125;&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">cy.wait(<span class="number">1000</span>, noLog)</span><br></pre></td></tr></table></figure><p><img src="../images/keyboard-only/test2.gif" alt="The test is adding two todo items"></p><p><strong>Note:</strong> I have used the <code>cy.wait(1000, noLog)</code> commands through the test to make sure the videos clearly show the focused elements.</p><h2><span id="completing-items">Completing items</span></h2><p>To complete an item the user needs to focus on the &quot;Complete&quot; item button by pressing the Tab key. We could write a new test or we could continue extending the same &quot;works using the keyboard only&quot; end-to-end test with a log message to clearly identify what the test is doing. Again, for the video I have added 1 second pauses after some test commands.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cy.log(<span class="string">&#x27;**complete the first item**&#x27;</span>)</span><br><span class="line">cy.realPress(<span class="string">&#x27;Tab&#x27;</span>)</span><br><span class="line"><span class="comment">// confirm we are at &quot;complete all&quot; element</span></span><br><span class="line">cy.focused().should(<span class="string">&#x27;have.id&#x27;</span>, <span class="string">&#x27;toggle-all&#x27;</span>).wait(<span class="number">1000</span>, noLog)</span><br><span class="line">cy.realPress(<span class="string">&#x27;Tab&#x27;</span>)</span><br><span class="line"><span class="comment">// confirm we are at the &quot;complete first todo&quot; element</span></span><br><span class="line">cy.focused()</span><br><span class="line">  .should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-labelledby&#x27;</span>, <span class="string">&#x27;todo-0&#x27;</span>)</span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  .click()</span><br><span class="line"><span class="comment">// confirm the todo was completed</span></span><br><span class="line">cy.focused()</span><br><span class="line">  .should(<span class="string">&#x27;be.checked&#x27;</span>)</span><br><span class="line">  .and(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-checked&#x27;</span>, <span class="string">&#x27;true&#x27;</span>)</span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br><span class="line"><span class="comment">// marks the item as completed</span></span><br><span class="line">cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>)</span><br><span class="line">  .first()</span><br><span class="line">  .should(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br></pre></td></tr></table></figure><p><img src="../images/keyboard-only/complete.gif" alt="The test navigates using Tab and completes the first todo"></p><p>Notice how clearly the application shows the focused element using the element outline. Please <a href="http://outlinenone.com/">do not remove the outline</a>.</p><h2><span id="deleting-the-first-item">Deleting the first item</span></h2><p>Let&#39;s navigate to the Delete element and remove the item.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cy.log(<span class="string">&#x27;**delete the first item**&#x27;</span>)</span><br><span class="line">cy.realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// first goes to the item text field</span></span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  .realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// then to the delete button</span></span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br><span class="line"><span class="comment">// we should be on the delete button</span></span><br><span class="line">cy.focused().should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-label&#x27;</span>, <span class="string">&#x27;Delete&#x27;</span>)</span><br><span class="line">cy.focused().should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-describedby&#x27;</span>, <span class="string">&#x27;todo-0&#x27;</span>)</span><br><span class="line">cy.focused().click().wait(<span class="number">1000</span>, noLog)</span><br><span class="line"><span class="comment">// one item should be gone</span></span><br><span class="line">cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>).wait(<span class="number">1000</span>, noLog)</span><br></pre></td></tr></table></figure><p><img src="../images/keyboard-only/delete.gif" alt="The test deletes the first todo"></p><h2><span id="editing-an-item">Editing an item</span></h2><p>After deleting an item, we have two more application features to test. First, let&#39;s edit an item.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">cy.log(<span class="string">&#x27;**edit an item**&#x27;</span>)</span><br><span class="line"><span class="comment">// the focus goes to the next &quot;delete&quot; button</span></span><br><span class="line">cy.focused()</span><br><span class="line">  .should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-label&#x27;</span>, <span class="string">&#x27;Delete&#x27;</span>)</span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  <span class="comment">// now do the tab in the reverse order to get to the edit field</span></span><br><span class="line">  .realPress([<span class="string">&#x27;Shift&#x27;</span>, <span class="string">&#x27;Tab&#x27;</span>])</span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">cy.focused()</span><br><span class="line">  .should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-describedby&#x27;</span>, <span class="string">&#x27;clicktoedit&#x27;</span>)</span><br><span class="line">  .click()</span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br><span class="line"><span class="comment">// retry the focused element until the app</span></span><br><span class="line"><span class="comment">// starts editing the item</span></span><br><span class="line">cy.focused()</span><br><span class="line">  .should(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;edit&#x27;</span>)</span><br><span class="line">  .and(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  <span class="comment">// if we use cy.clear() the element is deleted by the application</span></span><br><span class="line">  <span class="comment">// .clear()</span></span><br><span class="line">  <span class="comment">// thus we clear it differently</span></span><br><span class="line">  .type(<span class="string">&#x27;&#123;selectall&#125;&#123;backspace&#125;&#x27;</span>)</span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  .type(<span class="string">&#x27;confirm by testing&#123;enter&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">cy.contains(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;confirm by testing&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>).wait(<span class="number">1000</span>, noLog)</span><br></pre></td></tr></table></figure><p>The steps show the application changing the text of the todo item.</p><p><img src="../images/keyboard-only/edit.gif" alt="Editing the todo item"></p><h2><span id="tab-through-filters">Tab through filters</span></h2><p>From editing an item, let&#39;s navigate through the filters at the bottom of the page.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cy.log(<span class="string">&#x27;**tab through filters**&#x27;</span>)</span><br><span class="line">cy.realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// at the delete button</span></span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  .realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// at the &quot;All&quot; filter link</span></span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  .realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// at the &quot;Active&quot; filter link</span></span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  .realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// at the &quot;Completed&quot; filter link</span></span><br><span class="line">cy.focused().should(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;nodeName&#x27;</span>, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">cy.focused().should(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;Completed&#x27;</span>).wait(<span class="number">1000</span>, noLog)</span><br></pre></td></tr></table></figure><p><img src="../images/keyboard-only/tab-filters.gif" alt="Navigate through the filters"></p><h2><span id="test-the-filtered-views">Test the filtered views</span></h2><p>Finally, let&#39;s confirm the filtered views work.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cy.focused().should(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;Completed&#x27;</span>).wait(<span class="number">1000</span>, noLog).click()</span><br><span class="line"></span><br><span class="line"><span class="comment">// confirm the &quot;Completed&quot; view shows</span></span><br><span class="line">cy.log(<span class="string">&#x27;**completed items view**&#x27;</span>)</span><br><span class="line">cy.hash().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;#/completed&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">cy.contains(<span class="string">&#x27;#todo-count&#x27;</span>, <span class="string">&#x27;1 item left&#x27;</span>)</span><br><span class="line">cy.focused().should(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;All&#x27;</span>).wait(<span class="number">1000</span>, noLog)</span><br><span class="line"></span><br><span class="line">cy.log(<span class="string">&#x27;**active items view**&#x27;</span>)</span><br><span class="line">cy.realPress(<span class="string">&#x27;Tab&#x27;</span>)</span><br><span class="line">cy.focused().should(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;Active&#x27;</span>).wait(<span class="number">1000</span>, noLog).click()</span><br><span class="line">cy.hash().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;#/active&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// note: after clicking, the filter is highlighted</span></span><br><span class="line"><span class="comment">// but the focus is still on the &quot;All&quot; link</span></span><br><span class="line">cy.focused().should(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;All&#x27;</span>)</span><br><span class="line">cy.contains(<span class="string">&#x27;li[role=presentation] a&#x27;</span>, <span class="string">&#x27;Active&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;selected&#x27;</span>)</span><br><span class="line">  .and(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-checked&#x27;</span>, <span class="string">&#x27;true&#x27;</span>)</span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br></pre></td></tr></table></figure><p>The test correctly navigates through the filtered views</p><p><img src="../images/keyboard-only/active-tab.gif" alt="The tested filtered views"></p><h2><span id="avoiding-clicks">Avoiding clicks</span></h2><p>&quot;Wait!&quot;, you might say. You used the command <a href="https://on.cypress.io/click">.click()</a> in the test - which is a <em>mouse click</em> event. This is a wrong command to use during the keyboard-only test.</p><p>Yes, I should have used the <code>.realPress</code> command only. To avoid accidentally using <code>cy.click()</code> let&#39;s remove this command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cypress.Commands.overwrite(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Cannot use click command during keyboard-only test&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;works using the keyboard only&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Our current test fails.</p><p><img src="../images/keyboard-only/no-click.png" alt="No click command allowed"></p><p>Instead of <code>cy.click</code> we should use <code>cy.realPress(&#39;Space&#39;)</code> or <code>.realPress(&#39;Enter&#39;)</code> command. This is where we find a problem - we cannot edit an existing item using the keyboard only - we need to click the item to start editing it. The application does not listen to the &quot;Enter&quot; key when focused on the existing Todo item.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cy.focused()</span><br><span class="line">  .should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-describedby&#x27;</span>, <span class="string">&#x27;clicktoedit&#x27;</span>)</span><br><span class="line">  .realPress(<span class="string">&#x27;Enter&#x27;</span>)</span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br></pre></td></tr></table></figure><p><img src="../images/keyboard-only/no-edit.png" alt="The application does not let us start editing an item using the keyboard"></p><p>Ok, time to fork the application and do some coding. I have copied the application into <a href="https://github.com/bahmutov/test-todomvc-using-keyboard/tree/main/public">public folder</a> and added a static server and <a href="https://github.com/bahmutov/start-server-and-test">start-server-and-test</a> utility.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D serve start-server-and-test</span></span><br><span class="line">+ serve@12.0.0</span><br><span class="line">+ start-server-and-test@1.12.6</span><br></pre></td></tr></table></figure><p>We need to server the <code>public</code> folder and open Cypress after the port 5000 responds. These are the new NPM package script commands.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;cy:open&quot;</span>: <span class="string">&quot;cypress open&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cy:run&quot;</span>: <span class="string">&quot;cypress run&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;serve public&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;start-test 5000 cy:open&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Normally I would use <code>npm run dev</code> to develop the code locally white testing it, see the post <a href="/blog/organize-npm-scripts/" title="How I Organize my NPM Scripts">How I Organize my NPM Scripts</a>.</p><p>To fix the individual item edit, I added the following code in <a href="https://github.com/bahmutov/test-todomvc-using-keyboard/blob/main/public/js/directives/todoKbd.js">todoKbd.js</a> directive:</p><figure class="highlight js"><figcaption><span>todoKbd.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.on(<span class="string">&#x27;keydown&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (event.keyCode === ENTER_KEY) &#123;</span><br><span class="line">    scope.editTodo(scope.todo)</span><br><span class="line">    scope.$apply()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// the rest of the keyboard handlers</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The full test below now should pass</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// load intelligent code completion for Cypress and the plugin</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress-real-events&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cypress-real-events/support&#x27;</span></span><br><span class="line"></span><br><span class="line">Cypress.Commands.overwrite(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Cannot use click command during keyboard-only test&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;works using the keyboard only&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> noLog = &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;What needs to be done?&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    <span class="comment">// for the purpose of the blog post</span></span><br><span class="line">    <span class="comment">// slow down the commands by inserting waits</span></span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the first tab should bring us to the input element</span></span><br><span class="line">  <span class="comment">// but first we must be in the application&#x27;s iframe</span></span><br><span class="line">  cy.get(<span class="string">&#x27;body&#x27;</span>).realClick().realPress(<span class="string">&#x27;Tab&#x27;</span>)</span><br><span class="line">  cy.focused().should(<span class="string">&#x27;have.id&#x27;</span>, <span class="string">&#x27;new-todo&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// confirm the label is visible</span></span><br><span class="line">  cy.wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  cy.contains(<span class="string">&#x27;label[for=new-todo]&#x27;</span>, <span class="string">&#x27;What needs to be done?&#x27;</span>).should(</span><br><span class="line">    <span class="string">&#x27;be.visible&#x27;</span>,</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  cy.focused().type(<span class="string">&#x27;code app&#123;enter&#125;&#x27;</span>).type(<span class="string">&#x27;ensure a11y&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">  cy.wait(<span class="number">1000</span>, noLog)</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;**complete the first item**&#x27;</span>)</span><br><span class="line">  cy.realPress(<span class="string">&#x27;Tab&#x27;</span>)</span><br><span class="line">  <span class="comment">// confirm we are at &quot;complete all&quot; element</span></span><br><span class="line">  cy.focused().should(<span class="string">&#x27;have.id&#x27;</span>, <span class="string">&#x27;toggle-all&#x27;</span>).wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  cy.realPress(<span class="string">&#x27;Tab&#x27;</span>)</span><br><span class="line">  <span class="comment">// confirm we are at the &quot;complete first todo&quot; element</span></span><br><span class="line">  cy.focused()</span><br><span class="line">    .should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-labelledby&#x27;</span>, <span class="string">&#x27;todo-0&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">    .realPress(<span class="string">&#x27;Space&#x27;</span>)</span><br><span class="line">  <span class="comment">// confirm the todo was completed</span></span><br><span class="line">  cy.focused()</span><br><span class="line">    .should(<span class="string">&#x27;be.checked&#x27;</span>)</span><br><span class="line">    .and(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-checked&#x27;</span>, <span class="string">&#x27;true&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  <span class="comment">// marks the item as completed</span></span><br><span class="line">  cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>)</span><br><span class="line">    .first()</span><br><span class="line">    .should(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;**delete the first item**&#x27;</span>)</span><br><span class="line">  cy.realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// first goes to the item text field</span></span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">    .realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// then to the delete button</span></span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  <span class="comment">// we should be on the delete button</span></span><br><span class="line">  cy.focused().should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-label&#x27;</span>, <span class="string">&#x27;Delete&#x27;</span>)</span><br><span class="line">  cy.focused().should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-describedby&#x27;</span>, <span class="string">&#x27;todo-0&#x27;</span>)</span><br><span class="line">  cy.focused().realPress(<span class="string">&#x27;Space&#x27;</span>).wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  <span class="comment">// one item should be gone</span></span><br><span class="line">  cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>).wait(<span class="number">1000</span>, noLog)</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;**edit an item**&#x27;</span>)</span><br><span class="line">  <span class="comment">// the focus goes to the next &quot;delete&quot; button</span></span><br><span class="line">  cy.focused()</span><br><span class="line">    .should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-label&#x27;</span>, <span class="string">&#x27;Delete&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">    <span class="comment">// now do the tab in the reverse order to get to the edit field</span></span><br><span class="line">    .realPress([<span class="string">&#x27;Shift&#x27;</span>, <span class="string">&#x27;Tab&#x27;</span>])</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  cy.focused()</span><br><span class="line">    .should(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-describedby&#x27;</span>, <span class="string">&#x27;clicktoedit&#x27;</span>)</span><br><span class="line">    .realPress(<span class="string">&#x27;Enter&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  <span class="comment">// retry the focused element until the app</span></span><br><span class="line">  <span class="comment">// starts editing the item</span></span><br><span class="line">  cy.focused()</span><br><span class="line">    .should(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;edit&#x27;</span>)</span><br><span class="line">    .and(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    <span class="comment">// if we use cy.clear() the element is deleted by the application</span></span><br><span class="line">    <span class="comment">// .clear()</span></span><br><span class="line">    <span class="comment">// thus we clear it differently</span></span><br><span class="line">    .type(<span class="string">&#x27;&#123;selectall&#125;&#123;backspace&#125;&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">    .type(<span class="string">&#x27;confirm by testing&#123;enter&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;confirm by testing&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>).wait(<span class="number">1000</span>, noLog)</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;**tab through filters**&#x27;</span>)</span><br><span class="line">  cy.realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// at the delete button</span></span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">    .realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// at the &quot;All&quot; filter link</span></span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">    .realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// at the &quot;Active&quot; filter link</span></span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">    .realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// at the &quot;Completed&quot; filter link</span></span><br><span class="line">  cy.focused().should(<span class="string">&#x27;have.prop&#x27;</span>, <span class="string">&#x27;nodeName&#x27;</span>, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">  cy.focused()</span><br><span class="line">    .should(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;Completed&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">    .realPress(<span class="string">&#x27;Enter&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// confirm the &quot;Completed&quot; view shows</span></span><br><span class="line">  cy.log(<span class="string">&#x27;**completed items view**&#x27;</span>)</span><br><span class="line">  cy.hash().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;#/completed&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;#todo-count&#x27;</span>, <span class="string">&#x27;1 item left&#x27;</span>)</span><br><span class="line">  cy.focused().should(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;All&#x27;</span>).wait(<span class="number">1000</span>, noLog)</span><br><span class="line"></span><br><span class="line">  cy.log(<span class="string">&#x27;**active items view**&#x27;</span>)</span><br><span class="line">  cy.realPress(<span class="string">&#x27;Tab&#x27;</span>)</span><br><span class="line">  cy.focused()</span><br><span class="line">    .should(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;Active&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">    .realPress(<span class="string">&#x27;Enter&#x27;</span>)</span><br><span class="line">  cy.hash().should(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;#/active&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="comment">// note: after clicking, the filter is highlighted</span></span><br><span class="line">  <span class="comment">// but the focus is still on the &quot;All&quot; link</span></span><br><span class="line">  cy.focused().should(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;All&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;li[role=presentation] a&#x27;</span>, <span class="string">&#x27;Active&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;selected&#x27;</span>)</span><br><span class="line">    .and(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-checked&#x27;</span>, <span class="string">&#x27;true&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/keyboard-only/pass.png" alt="The full keyboard-only test passes"></p><h2><span id="testing-smaller-features">Testing smaller features</span></h2><p>When we are done with the longer test, I like to see if there are smaller application features that need to be tested. Usually I suggest using <a href="../tags/code-coverage/">code coverage as a guide</a> to finding the missed features. In our case, the application has no built step, so using the code coverage is tricky. Let&#39;s simply look at the code to find what features the application has but we are not testing yet.</p><h3><span id="cancel-edits">Cancel edits</span></h3><p>The application code has the following fragment:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (event.keyCode === ESCAPE_KEY) &#123;</span><br><span class="line">  scope.revertEdits(scope.todo)</span><br><span class="line">  focus = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When we are editing an existing item in the list, if we press the Escape key, the edits should be reverted. Let&#39;s test it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;cancels edit on escape&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;What needs to be done?&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    <span class="comment">// for the purpose of the blog post</span></span><br><span class="line">    <span class="comment">// slow down the commands by inserting waits</span></span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the first tab should bring us to the input element</span></span><br><span class="line">  <span class="comment">// but first we must be in the application&#x27;s iframe</span></span><br><span class="line">  cy.get(<span class="string">&#x27;body&#x27;</span>).realClick().realPress(<span class="string">&#x27;Tab&#x27;</span>)</span><br><span class="line">  cy.focused()</span><br><span class="line">    .should(<span class="string">&#x27;have.id&#x27;</span>, <span class="string">&#x27;new-todo&#x27;</span>)</span><br><span class="line">    .type(<span class="string">&#x27;first&#123;enter&#125;&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  cy.realPress(<span class="string">&#x27;Tab&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">    .realPress(<span class="string">&#x27;Tab&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">    .realPress(<span class="string">&#x27;Tab&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">    <span class="comment">// let&#x27;s start editing</span></span><br><span class="line">    .realPress(<span class="string">&#x27;Enter&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  cy.focused().should(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;first&#x27;</span>).type(<span class="string">&#x27; todo&#x27;</span>)</span><br><span class="line">  cy.focused().should(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;first todo&#x27;</span>).wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  <span class="comment">// now Escape, use cy.type because cypress-real-events does not implement Escape yet</span></span><br><span class="line">  cy.focused().type(<span class="string">&#x27;&#123;esc&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the todo item is reverted to its original text</span></span><br><span class="line">  <span class="comment">// which we check using the regular expression</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;#todo-list li .todoitem&#x27;</span>, <span class="regexp">/^first$/</span>)</span><br><span class="line">    .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/keyboard-only/cancel.gif" alt="Testing if the app reverts an edit on Escape press"></p><h3><span id="clear-completed-todos">Clear completed todos</span></h3><p>Another feature we need to test is clearing the completed items using a button press. The button only appears when there are completed items.</p><p><img src="../images/keyboard-only/clear.png" alt="We need to clear the completed items using the keyboard navigation"></p><p>To speed up this test we can avoid entering the todo items through the page. The application stores the todos in the <code>localStorage</code> object.</p><p><img src="../images/keyboard-only/localstorage.png" alt="Todo items stored by the application"></p><p>Cypress automatically clears the local storage before each test. We can set the items in the local storage when visiting the page to start the application with a few items before testing completing them.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;completes all todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> todos = [</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">&#x27;use keyboard&#x27;</span>,</span><br><span class="line">      completed: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">&#x27;disable mouse&#x27;</span>,</span><br><span class="line">      completed: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">&#x27;write a11y tests&#x27;</span>,</span><br><span class="line">      completed: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> STORAGE_ID = <span class="string">&#x27;todos-angularjs&#x27;</span></span><br><span class="line">      win.localStorage.setItem(STORAGE_ID, <span class="built_in">JSON</span>.stringify(todos))</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>).wait(<span class="number">1000</span>, noLog)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test starts almost instantly, since the data is already there. Next, let&#39;s verify that clearing the 2 completed items works.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the focus should be set on the &quot;All&quot; filter link</span></span><br><span class="line">cy.focused()</span><br><span class="line">  .should(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;All&#x27;</span>)</span><br><span class="line">  .realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// at the &quot;Active&quot; link</span></span><br><span class="line">  .wait(<span class="number">500</span>, noLog)</span><br><span class="line">  .realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// at the &quot;Completed&quot; link</span></span><br><span class="line">  .wait(<span class="number">500</span>, noLog)</span><br><span class="line">  .realPress(<span class="string">&#x27;Tab&#x27;</span>) <span class="comment">// at the &quot;Clear completed&quot; button</span></span><br><span class="line">  .wait(<span class="number">500</span>, noLog)</span><br><span class="line">cy.focused()</span><br><span class="line">  .should(<span class="string">&#x27;have.id&#x27;</span>, <span class="string">&#x27;clear-completed&#x27;</span>)</span><br><span class="line">  .and(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;Clear completed (2)&#x27;</span>)</span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  .realPress(<span class="string">&#x27;Space&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cy.log(<span class="string">&#x27;**only incomplete items remain**&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">cy.contains(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;write a11y tests&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>).wait(<span class="number">1000</span>, noLog)</span><br></pre></td></tr></table></figure><p>The test passes</p><p><img src="../images/keyboard-only/clear-completed.gif" alt="Clear completed items test"></p><h3><span id="toggle-all">Toggle all</span></h3><p>We also need to make sure we can toggle all todos using the button next to the input element.</p><p><img src="../images/keyboard-only/toggle-all.png" alt="Toggle all todos button"></p><p>Again, we need a couple of todos to start with. We can move the <code>todos</code> array from the previous test into its own JSON file. Instead of using the <a href="https://on.cypress.io/fixture">cy.fixture</a> command, we can import the JSON file into the spec file, see the post <a href="/blog/import-cypress-fixtures/" title="Import Cypress fixtures">Import Cypress fixtures</a>.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> todos <span class="keyword">from</span> <span class="string">&#x27;./todos.json&#x27;</span></span><br><span class="line"><span class="comment">// use todos array</span></span><br></pre></td></tr></table></figure><p>When toggling all todos, we need to count which items are completed. First, there are two such items.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;#todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;#todo-list li.completed&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">cy.contains(<span class="string">&#x27;#todo-count strong&#x27;</span>, <span class="string">&#x27;1&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>).wait(<span class="number">1000</span>, noLog)</span><br></pre></td></tr></table></figure><p>The initial focus is set on the &quot;All&quot; filter. We need to press &quot;Shift+Tab&quot; 10 times to navigate back to the <code>#toggle-all</code> element. We can do this by calling the <code>cy.realPress</code> via Lodash <code>_.times</code> function bundled in Cypress.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the focus should be set on the &quot;All&quot; filter link</span></span><br><span class="line"><span class="comment">// we need to navigate to the &quot;#toggle-all&quot; element</span></span><br><span class="line"><span class="comment">// through each todo item with text, complete, and delete elements.</span></span><br><span class="line">cy.focused().should(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;All&#x27;</span>)</span><br><span class="line">Cypress._.times(<span class="number">10</span>, <span class="function">() =&gt;</span> cy.realPress([<span class="string">&#x27;Shift&#x27;</span>, <span class="string">&#x27;Tab&#x27;</span>]).wait(<span class="number">250</span>, noLog))</span><br><span class="line"><span class="comment">// confirm we are at the right element</span></span><br><span class="line">cy.focused()</span><br><span class="line">  .should(<span class="string">&#x27;have.id&#x27;</span>, <span class="string">&#x27;toggle-all&#x27;</span>)</span><br><span class="line">  .and(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-label&#x27;</span>, <span class="string">&#x27;Mark all todos as completed&#x27;</span>)</span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br></pre></td></tr></table></figure><p>Let&#39;s press the element and see what happens.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cy.focused()</span><br><span class="line">  .should(<span class="string">&#x27;have.id&#x27;</span>, <span class="string">&#x27;toggle-all&#x27;</span>)</span><br><span class="line">  .and(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;aria-label&#x27;</span>, <span class="string">&#x27;Mark all todos as completed&#x27;</span>)</span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br><span class="line">  .realPress(<span class="string">&#x27;Space&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;#todo-list li.completed&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// all items are now complete</span></span><br><span class="line">cy.contains(<span class="string">&#x27;#todo-count strong&#x27;</span>, <span class="string">&#x27;0&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">cy.contains(<span class="string">&#x27;#clear-completed&#x27;</span>, <span class="string">&#x27;Clear completed (3)&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  .wait(<span class="number">1000</span>, noLog)</span><br></pre></td></tr></table></figure><p>What happens if we press the element again? All items will be active again.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if we press the &quot;toggle-all&quot; again, all items will become incomplete</span></span><br><span class="line">cy.realPress(<span class="string">&#x27;Space&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;#todo-list li.completed&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">cy.contains(<span class="string">&#x27;#todo-count strong&#x27;</span>, <span class="string">&#x27;3&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">cy.contains(<span class="string">&#x27;#clear-completed&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>).wait(<span class="number">1000</span>, noLog)</span><br></pre></td></tr></table></figure><p>The entire test is a joy to watch.</p><p><img src="../images/keyboard-only/toggle-all-test.gif" alt="Testing the toggle all element"></p><h2><span id="publishing-the-site">Publishing the site</span></h2><p>I have added continuous integration to my repository using <a href="/blog/trying-github-actions/" title="GitHub Actions">GitHub Actions</a>. Here is the entire <a href="https://github.com/bahmutov/test-todomvc-using-keyboard/blob/main/.github/workflows/ci.yml">cy.yml</a> file.</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>, <span class="string">pull_request</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">code</span> <span class="string">üõé</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">tests</span> <span class="string">üß™</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="attr">wait-on:</span> <span class="string">&#x27;http://localhost:5000&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># if the tests passed, publish the application</span></span><br><span class="line">      <span class="comment"># https://github.com/peaceiris/actions-gh-pages</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Publish</span> <span class="string">site</span> <span class="string">üåê</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">github.ref</span> <span class="string">==</span> <span class="string">&#x27;refs/heads/main&#x27;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure><p>You can see the automatically deployed app at <a href="https://glebbahmutov.com/test-todomvc-using-keyboard/">https://glebbahmutov.com/test-todomvc-using-keyboard/</a> and verify the keyboard input really works. If you find a bug, let me know, as I want to make sure the tests are complete.</p><h2><span id="see-also">See also</span></h2><p>On the personal level, I feel like the above keyboard tests should be executed against every TodoMVC example included in the <a href="https://todomvc.com/">todomvc.com</a> site.</p><ul><li>Read my other blog posts about <a href="../tags/a11y/">testing a11y</a> and check out <a href="https://github.com/component-driven/cypress-axe">cypress-axe</a> plugin</li><li><a href="https://webaim.org/techniques/keyboard/">WebAIM: Keyboard Accessibility</a></li><li><a href="http://outlinenone.com/">Do Not Remove The Outline</a></li><li><a href="https://dev.to/steady5063/starting-your-accessibility-journey-a-developers-guide-37o4">Starting Your Accessibility Journey: A Developers Guide</a></li><li><a href="https://dev.to/eevajonnapanula/don-t-develop-just-for-yourself-a-developer-s-checklist-to-accessibility-545k">Don&#39;t Develop Just for Yourself - A Developer&#39;s Checklist to Accessibility</a></li><li><a href="https://www.a11yproject.com/resources/">The A11y Project: Resources</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s take a good TodoMVC example made with accessability features included, as every app should have. One of the aspects we need to 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="a11y" scheme="https://glebbahmutov.com/blog/tags/a11y/"/>
    
  </entry>
  
  <entry>
    <title>Why cy.log Prints Nothing</title>
    <link href="https://glebbahmutov.com/blog/why-cy-log-prints-nothing/"/>
    <id>https://glebbahmutov.com/blog/why-cy-log-prints-nothing/</id>
    <published>2021-07-10T04:00:00.000Z</published>
    <updated>2021-07-10T12:50:14.929Z</updated>
    
    <content type="html"><![CDATA[<p>This is a very common question and comes up at least every couple of days on the <a href="https://on.cypress.io/chat">Cypress chat</a> channel.</p><p>Imagine you have an element on the page</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span>Mary<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>You would like to print the text from the element <code>#username</code> to Cypress Command Log. You know that Cypress <a href="https://on.cypress.io/introduction-to-cypress#Commands-Are-Asynchronous">commands are asynchronous</a>, so you place the value into a variable before calling <code>cy.log</code> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;prints the text&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// ‚õîÔ∏è INCORRECT - PRINTS NULL</span></span><br><span class="line">  <span class="keyword">let</span> username = <span class="literal">null</span></span><br><span class="line">  cy.get(<span class="string">&#x27;#username&#x27;</span>).then(<span class="function">(<span class="params">$el</span>) =&gt;</span> (username = $el.text()))</span><br><span class="line">  cy.log(username) <span class="comment">// always prints null ‚ö†Ô∏è</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hmm, the Command Log prints NULL.</p><p><img src="../images/cy-log-print/null.png" alt="Cypress Command Log shows NULL instead of text"></p><p>Let&#39;s fix it!</p><blockquote class="pullquote"><p>üéÅ You can find the source code for this blog post in the repo <a href="https://github.com/bahmutov/cypress-log-example">bahmutov/cypress-log-example</a>.</p></blockquote><p>If you would rather watch the explanation than read it, I have recorded a short video below.</p><center><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/uGWWoq0ECY8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p><strong>Tip:</strong> for more videos about Cypress subscribe to my <a href="https://www.youtube.com/glebbahmutov">YouTube channel</a></p><h2><span id="the-root-cause">The root cause</span></h2><p>Cypress commands are asynchronous, but they are also <em>chained</em> first. When Cypress runs through the test the first time, it only internally queues the commands for execution. Every command is stored as an object in Cypress memory together with its arguments. In JavaScript, when you call a function, the primitive arguments are passed by value. Each argument&#39;s value at the moment of the call is copied and passed into the function. Let&#39;s write down as a comment the command and its argument as stored in memory. For example, <code>cy.visit(&#39;index.html&#39;)</code> will become an object with the command &quot;VISIT&quot; to run and an argument string <code>index.html</code>. This object is stored in Cypress command chain.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test code                              chained command with arguments</span></span><br><span class="line">cy.visit(<span class="string">&#x27;index.html&#x27;</span>)                    <span class="comment">// VISIT &quot;index.html&quot;</span></span><br><span class="line"><span class="keyword">let</span> username = <span class="literal">null</span></span><br><span class="line">cy.get(<span class="string">&#x27;#username&#x27;</span>)                       <span class="comment">// GET &quot;#username&quot;</span></span><br><span class="line">  .then(<span class="function">(<span class="params">$el</span>) =&gt;</span> (username = $el.text())) <span class="comment">// THEN callback function</span></span><br><span class="line">cy.log(username)                          <span class="comment">// LOG null</span></span><br></pre></td></tr></table></figure><p>At the moment when <code>cy.log(username)</code> is called, the value of the argument is given by the variable <code>username</code>. JavaScript looks up the current value, sees <code>null</code> and then calls <code>cy.log(null)</code>. That is JavaScript semantics - it has nothing to do with Cypress&#39; logic.</p><h2><span id="the-solution">The solution</span></h2><p>We need to <em>delay</em> calling <code>cy.log(username)</code> until the variable <code>username</code> has a value. One solution is to move calling <code>cy.log</code> into its own <code>.then</code> block <em>after</em> the <code>.then(($el) =&gt; (username = $el.text()))</code> finishes.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"><span class="comment">// ‚úÖ CORRECT - prints &quot;Mary&quot;</span></span><br><span class="line"><span class="keyword">let</span> username = <span class="literal">null</span></span><br><span class="line">cy.get(<span class="string">&#x27;#username&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">$el</span>) =&gt;</span> (username = $el.text()))</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// by this point the &quot;username&quot; primitive variable</span></span><br><span class="line">    <span class="comment">// has been set, and the call is made cy.log(&quot;Mary&quot;)</span></span><br><span class="line">    cy.log(username)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cy-log-print/mary.png" alt="The cy.log prints the text from the page"></p><p>We do not need a separate <code>.then</code> callback, we can simply log the text immediate as we receive it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"><span class="comment">// ‚úÖ CORRECT - prints &quot;Mary&quot;</span></span><br><span class="line"><span class="keyword">let</span> username = <span class="literal">null</span></span><br><span class="line">cy.get(<span class="string">&#x27;#username&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">$el</span>) =&gt;</span> &#123;</span><br><span class="line">    username = $el.text()</span><br><span class="line">    cy.log(username)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>In this case, we do not even need a variable</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"><span class="comment">// ‚úÖ CORRECT - prints &quot;Mary&quot;</span></span><br><span class="line">cy.get(<span class="string">&#x27;#username&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">$el</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.log($el.text())</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>We do not even need a <code>.then</code> callback. We can invoke the method <code>text</code> and pass the result to the <code>cy.log</code> method.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"><span class="comment">// ‚úÖ CORRECT - prints &quot;Mary&quot;</span></span><br><span class="line">cy.get(<span class="string">&#x27;#username&#x27;</span>).invoke(<span class="string">&#x27;text&#x27;</span>).then(cy.log)</span><br></pre></td></tr></table></figure><h2><span id="bonus-see-the-order-of-command-chaining-and-execution">Bonus: see the order of command chaining and execution</span></h2><p>You can print each Cypress command as it is added to the chain of commands in memory by subscribing to the <a href="https://on.cypress.io/catalog-of-events#Cypress-Events">Cypress command events</a>. You can even print the commands at the start and at the end of their actual execution.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">it.only(<span class="string">&#x27;prints null with event trace&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.on(<span class="string">&#x27;command:enqueued&#x27;</span>, <span class="function">(<span class="params">&#123; name, args &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`ENQUEUED <span class="subst">$&#123;name&#125;</span>: <span class="subst">$&#123;args&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.on(<span class="string">&#x27;command:start&#x27;</span>, <span class="function">(<span class="params">&#123; attributes: &#123; name, args &#125; &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`START <span class="subst">$&#123;name&#125;</span>: <span class="subst">$&#123;args&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// ‚õîÔ∏è INCORRECT - PRINTS NULL</span></span><br><span class="line">  <span class="keyword">let</span> username = <span class="literal">null</span></span><br><span class="line">  cy.get(<span class="string">&#x27;#username&#x27;</span>).then(<span class="function">(<span class="params">$el</span>) =&gt;</span> (username = $el.text()))</span><br><span class="line">  cy.log(username) <span class="comment">// always prints null ‚ö†Ô∏è</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The DevTools console shows the <code>log</code> command without an argument</p><p><img src="../images/cy-log-print/log-null.png" alt="Tracing Cypress commands"></p><p>Let&#39;s see the trace for the corrected test</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;prints text with event trace&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.on(<span class="string">&#x27;command:enqueued&#x27;</span>, <span class="function">(<span class="params">&#123; name, args &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`ENQUEUED <span class="subst">$&#123;name&#125;</span>: <span class="subst">$&#123;args&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.on(<span class="string">&#x27;command:start&#x27;</span>, <span class="function">(<span class="params">&#123; attributes: &#123; name, args &#125; &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`START <span class="subst">$&#123;name&#125;</span>: <span class="subst">$&#123;args&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.visit(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// ‚úÖ CORRECT - prints &quot;Mary&quot;</span></span><br><span class="line">  cy.get(<span class="string">&#x27;#username&#x27;</span>)</span><br><span class="line">    .invoke(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    <span class="comment">// avoid printing internals of cy.log in the trace</span></span><br><span class="line">    .then(<span class="function">(<span class="params">s</span>) =&gt;</span> cy.log(s))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/cy-log-print/trace.png" alt="Tracing Cypress commands during correct test"></p><p>Notice in the trace that <code>LOG</code> command was enqueued only after the command <code>invoke(&#39;text&#39;)</code> has ran. By the time <code>cy.log(s)</code> is added to the queue, the value <code>s</code> exists and is passed to the call.</p><h2><span id="more-info">More info</span></h2><p>Read <a href="/blog/cypress-tips-and-tricks/" title="Cypress Tips and Tricks">Cypress Tips and Tricks</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is a very common question and comes up at least every couple of days on the &lt;a href=&quot;https://on.cypress.io/chat&quot;&gt;Cypress chat&lt;/a&gt; ch
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>How to Keep Cypress Tests in Another Repo While Using CircleCI</title>
    <link href="https://glebbahmutov.com/blog/how-to-keep-cypress-tests-in-another-repo-with-circleci/"/>
    <id>https://glebbahmutov.com/blog/how-to-keep-cypress-tests-in-another-repo-with-circleci/</id>
    <published>2021-07-03T04:00:00.000Z</published>
    <updated>2021-10-06T02:59:00.138Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine you are developing a web application and deploying it to preview environments using <a href="https://vercel.com/">Vercel</a>. How do you run the tests that reside in a separate repo? This blog post teaches you how to trigger CircleCI workflows after deployment.</p><p><strong>Note:</strong> I have written a similar blog post <a href="/blog/how-to-keep-cypress-tests-in-another-repo/" title="How to Keep Cypress Tests in Another Repo While Using GitHub Actions">How to Keep Cypress Tests in Another Repo While Using GitHub Actions</a> that shows the solution when using Netlify and GitHub Actions.</p><blockquote class="pullquote"><p>üéÅ You can find the example application in the repository <a href="https://github.com/bahmutov/todomvc-no-tests-vercel">bahmutov/todomvc-no-tests-vercel</a> and its end-to-end tests in the repository <a href="https://github.com/bahmutov/todomvc-tests-circleci">bahmutov/todomvc-tests-circleci</a>. You can see the deployed application at <a href="https://todomvc-no-tests-vercel.vercel.app/">https://todomvc-no-tests-vercel.vercel.app/</a> and see CircleCI workflows at <a href="https://app.circleci.com/pipelines/github/bahmutov/todomvc-tests-circleci">https://app.circleci.com/pipelines/github/bahmutov/todomvc-tests-circleci</a>. You can find the recorded tests on Cypress Dashboard <a href="https://dashboard.cypress.io/projects/15cjtg/runs">here</a>.</p></blockquote><!-- toc --><ul><li><a href="#the-application">The application</a></li><li><a href="#the-tests">The tests</a></li><li><a href="#the-tests-workflow">The tests workflow</a></li><li><a href="#trigger-circleci-pipeline">Trigger CircleCI pipeline</a></li><li><a href="#trigger-the-tests-on-the-different-branch">Trigger the tests on the different branch</a></li><li><a href="#shortcomings">Shortcomings</a></li><li><a href="#the-deployment-event">The deployment event</a></li><li><a href="#merging-the-pull-requests">Merging the pull requests</a></li><li><a href="#the-remaining-problem">The remaining problem</a><ul><li><a href="#workaround">Workaround</a></li></ul></li><li><a href="#update-1-record-tests-on-cypress-dashboard">Update 1: record tests on Cypress Dashboard</a></li><li><a href="#update-2-add-the-cypress-github-integration">Update 2: add the Cypress GitHub integration</a></li><li><a href="#update-3-trigger-the-circleci-pipeline-correctly">Update 3: trigger the CircleCI pipeline correctly</a></li><li><a href="#update-4-the-downsides">Update 4: The downsides</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><h2><span id="the-application">The application</span></h2><p>Every pull request opened in the <a href="https://github.com/bahmutov/todomvc-no-tests-vercel">bahmutov/todomvc-no-tests-vercel</a> is automatically deployed to Vercel at the URL that follows the pattern</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://$&#123;VERCEL_PROJECT_NAME&#125;-git-$&#123;GITHUB_HEAD_REF&#125;-$&#123;VERCEL_TEAM_NAME&#125;.vercel.app/</span><br></pre></td></tr></table></figure><p>For example, <a href="https://github.com/bahmutov/todomvc-no-tests-vercel/pull/3">pull request #3</a> from branch named <code>pr3</code> shows the following Vercel comment after the deploy:</p><p><img src="../images/separate-circleci/vercel-comment.png" alt="Vercel deployment comment"></p><h2><span id="the-tests">The tests</span></h2><p>The developer would normally run the end-to-end tests against the application running locally. Thus the <code>baseUrl</code> in the <a href="https://github.com/bahmutov/todomvc-tests-circleci/blob/main/cypress.json">cypress.json</a> file points at the local app by default.</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;http://localhost:3000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;fixturesFolder&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;supportFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;pluginsFile&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I wrote a simple end-to-end test that you can find in <a href="https://github.com/bahmutov/todomvc-tests-circleci/tree/main/cypress/integration">cypress/integration</a> folder.</p><figure class="highlight js"><figcaption><span>spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;works&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// application starts with 3 todos</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;[data-cy=new-todo]&#x27;</span>).type(<span class="string">&#x27;Add tests!&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">    .eq(<span class="number">3</span>)</span><br><span class="line">    .should(<span class="string">&#x27;include.text&#x27;</span>, <span class="string">&#x27;Add tests!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">&#x27;.todo&#x27;</span>, <span class="string">&#x27;Learn about React&#x27;</span>)</span><br><span class="line">    .contains(<span class="string">&#x27;[data-cy=complete]&#x27;</span>, <span class="string">&#x27;Complete&#x27;</span>)</span><br><span class="line">    .click()</span><br><span class="line">  cy.contains(<span class="string">&#x27;.todo&#x27;</span>, <span class="string">&#x27;Learn about React&#x27;</span>).find(<span class="string">&#x27;[data-cy=remove]&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;.todo&#x27;</span>, <span class="string">&#x27;Learn about React&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.screenshot(<span class="string">&#x27;finished&#x27;</span>, &#123; <span class="attr">capture</span>: <span class="string">&#x27;runner&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/separate-circleci/finished.png" alt="The screenshot finished.png"></p><h2><span id="the-tests-workflow">The tests workflow</span></h2><p>We want to run our tests on CircleCI using <a href="https://github.com/cypress-io/circleci-orb">Cypress CircleCI Orb</a> and we want to trigger the pipeline using <a href="https://circleci.com/docs/api/v2/#operation/triggerPipeline">CircleCI API</a>. To pass the URL to test, we can use pipeline parameters. The workflow file is shown below. I like having a separate &quot;info&quot; just just to print the received pipeline parameters.</p><figure class="highlight yml"><figcaption><span>.circleci/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># to use orbs, must use version &gt;= 2.1</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="comment"># import Cypress orb by specifying an exact version x.y.z</span></span><br><span class="line">  <span class="comment"># or the latest version 1.x.x using &quot;@1&quot; syntax</span></span><br><span class="line">  <span class="comment"># https://github.com/cypress-io/circleci-orb</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="attr">TEST_BRANCH:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">default:</span> <span class="string">&#x27;main&#x27;</span></span><br><span class="line">  <span class="comment"># by default, test the production deployment</span></span><br><span class="line">  <span class="attr">TEST_URL:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">default:</span> <span class="string">&#x27;https://todomvc-no-tests-vercel.vercel.app/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">info:</span></span><br><span class="line">    <span class="attr">machine:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">ubuntu-2004:202104-01</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">print</span> <span class="string">variables</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;TEST_BRANCH is &lt;&lt; pipeline.parameters.TEST_BRANCH &gt;&gt;&quot;</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;TEST_URL is &lt;&lt; pipeline.parameters.TEST_URL &gt;&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># preview deploys might take a little bit to be ready</span></span><br><span class="line">  <span class="comment"># this job pings the TEST_URL to check if the deployment has finished</span></span><br><span class="line">  <span class="attr">wait-for-deploy:</span></span><br><span class="line">    <span class="attr">machine:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">ubuntu-2004:202104-01</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># we don&#x27;t really need to check TEST_URL,</span></span><br><span class="line">      <span class="comment"># since we only run the entire workflow when it is present</span></span><br><span class="line">      <span class="comment"># but I like to remember how to use the Circle halt command</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">unless:</span></span><br><span class="line">          <span class="attr">condition:</span> <span class="string">&lt;&lt;</span> <span class="string">pipeline.parameters.TEST_URL</span> <span class="string">&gt;&gt;</span></span><br><span class="line">          <span class="attr">steps:</span></span><br><span class="line">            <span class="comment"># https://circleci.com/docs/2.0/configuration-reference/#ending-a-job-from-within-a-step</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">circleci-agent</span> <span class="string">step</span> <span class="string">halt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">wait</span> <span class="string">for</span> <span class="string">deployment</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;Using wait-on to check if the URL &lt;&lt; pipeline.parameters.TEST_URL &gt;&gt; responds&quot;</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;See https://www.npmjs.com/package/wait-on&quot;</span></span><br><span class="line">            <span class="string">npx</span> <span class="string">wait-on</span> <span class="string">--verbose</span> <span class="string">\</span></span><br><span class="line">              <span class="string">--interval</span> <span class="number">10000</span> <span class="string">--timeout</span> <span class="number">60000</span> <span class="string">\</span></span><br><span class="line">              <span class="string">&lt;&lt;</span> <span class="string">pipeline.parameters.TEST_URL</span> <span class="string">&gt;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">e2e:</span></span><br><span class="line">    <span class="comment"># only run the workflow when TEST_URL is set</span></span><br><span class="line">    <span class="attr">when:</span> <span class="string">&lt;&lt;</span> <span class="string">pipeline.parameters.TEST_URL</span> <span class="string">&gt;&gt;</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">info</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">wait-for-deploy</span></span><br></pre></td></tr></table></figure><p>I am including a job &quot;wait-for-deploy&quot; to ping the <code>TEST_URL</code> every 10 seconds until it responds. When this job finishes successfully, the preview deploy is ready to be tested. Let&#39;s add another job to the workflow to run after <code>wait-for-deploy</code> is done.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">info</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">wait-for-deploy</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">E2E</span> <span class="string">tests</span></span><br><span class="line">      <span class="attr">requires:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">wait-for-deploy</span></span><br><span class="line">      <span class="attr">config:</span> <span class="string">&#x27;baseUrl=&lt;&lt; pipeline.parameters.TEST_URL &gt;&gt;&#x27;</span></span><br><span class="line">      <span class="comment"># save videos and screenshots on Circle as artifacts</span></span><br><span class="line">      <span class="attr">store_artifacts:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># we do not need to save the workspace after the tests are done</span></span><br><span class="line">      <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>We are using the job <code>run</code> defined in the imported orb <a href="https://github.com/cypress-io/circleci-orb"><code>cypress: cypress-io/cypress@1</code></a> and control it via parameters like <code>config</code> and <code>store_artifacts</code>. Let&#39;s run this workflow on CircleCI.</p><p><img src="../images/separate-circleci/workflow.png" alt="The finished CircleCI workflow"></p><p>You can click on the &quot;Cypress E2E tests&quot; job to see the stored test artifacts: movies and screenshots.</p><p><img src="../images/separate-circleci/test-artifacts.png" alt="The stored test artifacts"></p><p><strong>Tip:</strong> while storing test artifacts is possible, <a href="https://www.cypress.io/dashboard/">Cypress Dashboard</a> does a much better job showing them.</p><p><strong>Tip 2:</strong> it is easy to mess up YML CI configuration syntax. Luckily, you can use <a href="https://circleci.com/docs/2.0/local-cli/">CircleCI CLI</a> utility to validate the config file syntax before pushing the code to the remote repository.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ circleci config validate .circleci/config.yml</span><br><span class="line">Error: Error calling workflow: <span class="string">&#x27;e2e&#x27;</span></span><br><span class="line">Error calling job: <span class="string">&#x27;test&#x27;</span></span><br><span class="line">Unknown variable(s): TEST_BRANCH</span><br><span class="line"><span class="comment"># fix the syntax error and verify again</span></span><br><span class="line">$ circleci config validate .circleci/config.yml</span><br><span class="line">Config file at .circleci/config.yml is valid.</span><br></pre></td></tr></table></figure><h2><span id="trigger-circleci-pipeline">Trigger CircleCI pipeline</span></h2><p>Let&#39;s get back to the application repository. We need to trigger the testing pipeline. The first solution is to use a GitHub Actions workflow.</p><figure class="highlight yml"><figcaption><span>.github/workflows/pr.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># every time we open a pull request, or a commit is pushed to it</span></span><br><span class="line"><span class="comment"># Vercel deploys the site to a preview environment</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">pull</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">pull_request</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">trigger-tests:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># trigger CircleCI pipeline to run E2E tests</span></span><br><span class="line">      <span class="comment"># https://circleci.com/docs/api/v2/#operation/triggerPipeline</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># the preview URL follows the format:</span></span><br><span class="line">      <span class="comment"># https://&lt;project name&gt;-git-&lt;branch name&gt;-&lt;team name&gt;.vercel.app/</span></span><br><span class="line">      <span class="comment"># https://docs.github.com/en/actions/reference/environment-variables#default-environment-variables</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Trigger</span> <span class="string">CircleCI</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">export</span> <span class="string">VERCEL_PROJECT_NAME=todomvc-no-tests-vercel</span></span><br><span class="line">          <span class="string">export</span> <span class="string">VERCEL_TEAM_NAME=gleb-bahmutov</span></span><br><span class="line">          <span class="string">export</span> <span class="string">PREVIEW_URL=https://$&#123;VERCEL_PROJECT_NAME&#125;-git-$&#123;GITHUB_HEAD_REF&#125;-$&#123;VERCEL_TEAM_NAME&#125;.vercel.app/</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;Vercel deployment URL is $&#123;PREVIEW_URL&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment"># --silent option to not print request progress</span></span><br><span class="line">          <span class="string">curl</span> <span class="string">-u</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CIRCLE_CI_API_TOKEN</span> <span class="string">&#125;&#125;:</span> <span class="string">\</span></span><br><span class="line">            <span class="string">--silent</span> <span class="string">\</span></span><br><span class="line">            <span class="string">--data</span> <span class="string">parameters[TEST_BRANCH]=$&#123;GITHUB_HEAD_REF&#125;</span> <span class="string">\</span></span><br><span class="line">            <span class="string">--data</span> <span class="string">parameters[TEST_URL]=$&#123;PREVIEW_URL&#125;</span> <span class="string">\</span></span><br><span class="line">            <span class="string">https://circleci.com/api/v2/project/gh/bahmutov/todomvc-tests-circleci/pipeline</span></span><br></pre></td></tr></table></figure><p>We will need a project or a personal CircleCI API token to trigger the pipeline. We can store it privately using GitHub Actions secrets tab. The <code>parameters</code> fields will be set as pipeline params on CircleCI. We are passing the current branch name and Vercel PR preview URL we have formed ourselves.</p><p><img src="../images/separate-circleci/trigger-tests.png" alt="Trigger CircleCI pipeline from GitHub Actions"></p><p>The trigger works. We can look at the list of pipelines to see the pipeline #13. The triggered pipelines do not have a commit message.</p><p><img src="../images/separate-circleci/pipelines.png" alt="Pipeline #13 on CircleCI"></p><p>The <code>info</code> job shows the parameters passed from GitHub.</p><p><img src="../images/separate-circleci/info-13.png" alt="Pipeline parameters printed by the &quot;info&quot; job"></p><p>The screenshot image in the test artifacts in the &quot;Cypress E2E tests&quot; job shows the preview URL was tested.</p><p><img src="../images/separate-circleci/url-13.png" alt="Cypress tests ran against the preview environment"></p><h2><span id="trigger-the-tests-on-the-different-branch">Trigger the tests on the different branch</span></h2><p>When developing the application feature, the programmer probably has updated or new tests in the corresponding branch in the test repo. Thus when testing the pull request against the branch <code>feature-X</code> we want to check out a branch with the same name from the test repo before running tests. Here is how we can do this via reusable CircleCI commands and Cypress Orb <code>post-checkout</code> parameter:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># to use orbs, must use version &gt;= 2.1</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="comment"># import Cypress orb by specifying an exact version x.y.z</span></span><br><span class="line">  <span class="comment"># or the latest version 1.x.x using &quot;@1&quot; syntax</span></span><br><span class="line">  <span class="attr">cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="comment"># by default test everything using the current default branch</span></span><br><span class="line">  <span class="comment"># but if the pipeline is triggered via API, you can pass the branch name</span></span><br><span class="line">  <span class="comment"># to check out and run tests from.</span></span><br><span class="line">  <span class="attr">TEST_BRANCH:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">default:</span> <span class="string">&#x27;main&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands</span></span><br><span class="line"><span class="attr">commands:</span></span><br><span class="line">  <span class="attr">switch_branch:</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">Changes</span> <span class="string">the</span> <span class="string">current</span> <span class="string">branch</span> <span class="string">to</span> <span class="string">the</span> <span class="string">latest</span> <span class="string">commit</span> <span class="string">on</span> <span class="string">the</span> <span class="string">specific</span> <span class="string">branch.</span></span><br><span class="line">      <span class="attr">NOTE:</span> <span class="string">if</span> <span class="string">the</span> <span class="string">branch</span> <span class="string">does</span> <span class="string">not</span> <span class="string">exist,</span> <span class="string">does</span> <span class="string">nothing.</span></span><br><span class="line">    <span class="attr">parameters:</span></span><br><span class="line">      <span class="attr">BRANCH_NAME:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">default:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">when:</span></span><br><span class="line">          <span class="attr">condition:</span> <span class="string">&lt;&lt;</span> <span class="string">parameters.BRANCH_NAME</span> <span class="string">&gt;&gt;</span></span><br><span class="line">          <span class="attr">steps:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">branch</span> <span class="string">&lt;&lt;</span> <span class="string">parameters.BRANCH_NAME</span> <span class="string">&gt;&gt;</span></span><br><span class="line">              <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line">                <span class="string">echo</span> <span class="string">&quot;Switching to branch &lt;&lt; parameters.BRANCH_NAME &gt;&gt; if it exists&quot;</span></span><br><span class="line">                <span class="string">git</span> <span class="string">checkout</span> <span class="string">&lt;&lt;</span> <span class="string">parameters.BRANCH_NAME</span> <span class="string">&gt;&gt;</span> <span class="string">||</span> <span class="literal">true</span></span><br><span class="line">                <span class="string">git</span> <span class="string">pull</span> <span class="string">origin</span> <span class="string">&lt;&lt;</span> <span class="string">parameters.BRANCH_NAME</span> <span class="string">&gt;&gt;</span> <span class="string">||</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">print_git:</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">Prints</span> <span class="string">the</span> <span class="string">current</span> <span class="string">git</span> <span class="string">branch</span> <span class="string">and</span> <span class="string">the</span> <span class="string">commit</span> <span class="string">hash.</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Print</span> <span class="string">current</span> <span class="string">Git</span> <span class="string">info</span></span><br><span class="line">          <span class="comment"># looks like Cypress default executor does not have</span></span><br><span class="line">          <span class="comment"># a very recent Git version, thus we cannot use &quot;--show-current&quot;</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;current branch is: $(git branch -a)&quot;</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;current commit is: $(git rev-parse --short HEAD)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">e2e:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">E2E</span> <span class="string">tests</span></span><br><span class="line">          <span class="comment"># switch to the test branch before installing and running tests</span></span><br><span class="line">          <span class="attr">post-checkout:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">switch_branch:</span></span><br><span class="line">                <span class="attr">BRANCH_NAME:</span> <span class="string">&lt;&lt;</span> <span class="string">pipeline.parameters.TEST_BRANCH</span> <span class="string">&gt;&gt;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">print_git</span></span><br><span class="line">          <span class="comment"># we do not need to keep the workspace around</span></span><br><span class="line">          <span class="comment"># since there are no other jobs that depend on it</span></span><br><span class="line">          <span class="attr">no-workspace:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>Note:</strong> the above fragment comes from the repository <a href="https://github.com/bahmutov/circleci-checkout-experiment">bahmutov/circleci-checkout-experiment</a> where I experimented with CircleCI to ensure this specific way of running tests from the test branch works.</p><h2><span id="shortcomings">Shortcomings</span></h2><p>The approach to testing the preview deployments described above works, but has a bad drawback. It tests the <em>branch</em> preview URL, and not the individual deploys. Imagine the pull request has several commits, each triggering a test run. Imagine that building and deploying the preview URL takes 5 minutes, while the tests only take 1 minute. The sequence of events can be see in the table below.</p><table><thead><tr><th>wall clock</th><th>event</th></tr></thead><tbody><tr><td>00:00</td><td>very first deploy to the branch &quot;my-feature&quot; with commit A</td></tr><tr><td>00:01</td><td>open pull request &quot;merge-my-feature&quot; from branch &quot;my-feature&quot;</td></tr><tr><td>00:01</td><td>Vercel starts building and deploying &quot;<a href="https://merge-my-feature...&quot;">https://merge-my-feature...&quot;</a> preview</td></tr><tr><td>00:01</td><td>GitHub Actions trigger CircleCI pipeline with <code>TEST_URL=https://merge-my-feature...</code></td></tr><tr><td>00:01</td><td>Job <code>wait-for-deploy</code> starts pinging &quot;<a href="https://merge-my-feature...&quot;">https://merge-my-feature...&quot;</a> url</td></tr><tr><td>00:06</td><td>Vercel deploys &quot;<a href="https://merge-my-feature...&quot;">https://merge-my-feature...&quot;</a> url</td></tr><tr><td>00:06</td><td>Job <code>wait-for-deploy</code> finishes after receiving 200 response from &quot;<a href="https://merge-my-feature...&quot;">https://merge-my-feature...&quot;</a> url</td></tr><tr><td>00:06</td><td>Job <code>Cypress E2E tests</code> runs tests against the &quot;<a href="https://merge-my-feature...&quot;">https://merge-my-feature...&quot;</a> url</td></tr><tr><td>00:10</td><td>user makes another push to the branch &quot;my-feature&quot; with commit B</td></tr><tr><td>00:10</td><td>Vercel starts building and deploying &quot;<a href="https://merge-my-feature...&quot;">https://merge-my-feature...&quot;</a> preview</td></tr><tr><td>00:10</td><td>GitHub Actions trigger CircleCI pipeline with <code>TEST_URL=https://merge-my-feature...</code></td></tr><tr><td>00:10</td><td>Job <code>wait-for-deploy</code> starts pinging &quot;<a href="https://merge-my-feature...&quot;">https://merge-my-feature...&quot;</a> url.</td></tr><tr><td>00:10</td><td>Job <code>wait-for-deploy</code> finishes almost immediately because the url responds. The preview still has commit A code.</td></tr><tr><td>00:10</td><td>Job <code>Cypress E2E tests</code> runs tests against the &quot;<a href="https://merge-my-feature...&quot;">https://merge-my-feature...&quot;</a> url</td></tr><tr><td>00:16</td><td>Vercel deploys &quot;<a href="https://merge-my-feature...&quot;">https://merge-my-feature...&quot;</a> url, but nothing tests the deployed commit B code</td></tr></tbody></table><p>If we trigger the CircleCI pipeline <em>immediately</em> from GitHub Actions, then the second commit will trigger running the tests. The tests will start quickly because the job <code>wait-for-deploy</code> hits the already deployed <em>branch</em> preview URL, the tests pass. Then the Vercel preview happens - and it never gets tested!</p><p>Thus we need something better - we need to trigger the CircleCI pipeline <em>after</em> Vercel successfully deploys.</p><h2><span id="the-deployment-event">The deployment event</span></h2><p>Luckily, Vercel GitHub integration delivers a <code>deployment_status</code> event as I described in <a href="/blog/develop-preview-test/" title="Test the Preview Vercel Deploys">Test the Preview Vercel Deploys</a>. Let&#39;s first look at the events delivered by Vercel to GitHub Actions.</p><figure class="highlight yml"><figcaption><span>info.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print info from deployment events sent by Vercel</span></span><br><span class="line"><span class="comment"># https://glebbahmutov.com/blog/develop-preview-test/</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">info</span></span><br><span class="line"><span class="comment"># https://docs.github.com/en/actions/reference/events-that-trigger-workflows</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">deployment</span>, <span class="string">deployment_status</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">show-event:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Dump</span> <span class="string">GitHub</span> <span class="string">context</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_CONTEXT:</span> <span class="string">$&#123;&#123;</span> <span class="string">toJson(github)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;$GITHUB_CONTEXT&quot;</span></span><br></pre></td></tr></table></figure><p>The <code>deployment_status</code> event is delivered twice: first with the status <code>pending</code>, then with the status <code>success</code>. The event also has the unique URL of that deploy - because <a href="/blog/immutable-deploys-with-data-and-testing/" title="Vercel does immutable deploys">Vercel does immutable deploys</a>.</p><p><img src="../images/separate-circleci/deployment.png" alt="The deployment_status event has immutable deployment URL"></p><p>Thus we can trigger the CircleCI pipelines using a unique URL after the deployment has finished, see <a href="https://github.com/bahmutov/todomvc-no-tests-vercel/blob/main/.github/workflows/deploy.yml">deploy.yml</a></p><figure class="highlight yml"><figcaption><span>.github/workflows/deploy.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">deployment_status</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">trigger-tests-after-deploy:</span></span><br><span class="line">    <span class="comment"># only runs this job on successful deploy</span></span><br><span class="line">    <span class="comment"># https://glebbahmutov.com/blog/develop-preview-test/</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">github.event.deployment_status.state</span> <span class="string">==</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># trigger CircleCI pipeline to run E2E tests</span></span><br><span class="line">      <span class="comment"># https://circleci.com/docs/api/v2/#operation/triggerPipeline</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Trigger</span> <span class="string">CircleCI</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;Vercel unique deployment URL is $<span class="template-variable">&#123;&#123; github.event.deployment_status.target_url &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment"># --silent option to not print request progress</span></span><br><span class="line">          <span class="string">curl</span> <span class="string">-u</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CIRCLE_CI_API_TOKEN</span> <span class="string">&#125;&#125;:</span> <span class="string">\</span></span><br><span class="line">            <span class="string">--silent</span> <span class="string">\</span></span><br><span class="line">            <span class="string">--data</span> <span class="string">parameters[TEST_BRANCH]=$&#123;GITHUB_HEAD_REF&#125;</span> <span class="string">\</span></span><br><span class="line">            <span class="string">--data</span> <span class="string">parameters[TEST_URL]=$&#123;&#123;</span> <span class="string">github.event.deployment_status.target_url</span> <span class="string">&#125;&#125;</span> <span class="string">\</span></span><br><span class="line">            <span class="string">https://circleci.com/api/v2/project/gh/bahmutov/todomvc-tests-circleci/pipeline</span></span><br></pre></td></tr></table></figure><p>The above GitHub Action workflow triggers the CircleCI pipeline with unique URL which you can see in the test screenshot.</p><p><img src="../images/separate-circleci/unique.png" alt="The deployment preview URL"></p><h2><span id="merging-the-pull-requests">Merging the pull requests</span></h2><p>When we modify the code and the tests in two repos, we have two open pull requests. Which one do we merge first? It is a little bit of a chicken and an egg problem.</p><ol><li>We cannot merge the application pull request first - if it runs the tests before we merge the pull request in the test repo, the tests will fail, since they are still original tests.</li><li>We cannot merge the test pull request first, since the application code is still the original source, and not what the tests expect to see.</li></ol><p>We can try to time it and merge the code first, then while it is building merge the test pull request, hoping it would hit the the deployed updated application. But I would suggest a simpler approach.</p><ol><li>Merge the tests first, but skip the build using the <code>[skip ci]</code> text in the commit subject, see <a href="https://circleci.com/docs/2.0/skip-build/">CircleCI docs for example</a>. In the screenshot below I am squashing 3 commits in the test repo into a single commit that should not trigger the tests.</li></ol><p><img src="../images/separate-circleci/skip-message.png" alt="Merging the test pull request first while skipping the CI build"></p><p>The CircleCI shows the test commit was noted, but did not trigger the workflow.</p><p><img src="../images/separate-circleci/skip-workflow.png" alt="CircleCI did not build the commit with the message &quot;[skip ci]&quot;"></p><ol start="2"><li>Merge the code change pull request. It will trigger the tests that are now match the code.</li></ol><p>Problem solved.</p><h2><span id="the-remaining-problem">The remaining problem</span></h2><p>Our implementation is <em>almost</em> perfect. The tests are triggered correctly, the deployment URLs are unique - but we cannot pass the branch to the CircleCI pipeline! The <code>TEST_BRANCH</code> parameter is empty because the <code>deployment_status</code> event has no &quot;memory&quot; of the branch that has triggered the deployment, and the GitHub environment has no <code>GITHUB_HEAD_REF</code> set - because GH does not &quot;know&quot; which branch you are testing or deploying.</p><p>I wish Vercel included this information in the event details, since their system knows which branch has been deployed. We could use this information to checkout or trigger the right branch in the test repository. Then we could modify the application in branch <code>feature-X</code> while updating the tests in the separate repo using the same branch name <code>feature-X</code>. When the preview URL has been deployed we would run the tests from branch <code>feature-X</code>.</p><h3><span id="workaround">Workaround</span></h3><p>The Vercel deployment event has the commit SHA. If you dump the GitHub event object, check the <code>sha</code> property:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;token&quot;: &quot;***&quot;,</span><br><span class="line">  &quot;job&quot;: &quot;show-event&quot;,</span><br><span class="line">  &quot;ref&quot;: &quot;&quot;,</span><br><span class="line">  &quot;sha&quot;: &quot;7202eca208589fabacb2f35ac5d8dd46fcb8a12f&quot;,</span><br><span class="line">  &quot;repository&quot;: &quot;bahmutov/todomvc-no-tests-vercel&quot;,</span><br><span class="line">  &quot;repository_owner&quot;: &quot;bahmutov&quot;,</span><br><span class="line">  &quot;repositoryUrl&quot;: &quot;git://github.com/bahmutov/todomvc-no-tests-vercel.git&quot;,</span><br><span class="line">  &quot;run_id&quot;: &quot;1004603109&quot;,</span><br><span class="line">  &quot;run_number&quot;: &quot;24&quot;,</span><br><span class="line">  &quot;retention_days&quot;: &quot;90&quot;,</span><br><span class="line">  &quot;actor&quot;: &quot;vercel[bot]&quot;,</span><br><span class="line">  &quot;workflow&quot;: &quot;info&quot;,</span><br><span class="line">  &quot;head_ref&quot;: &quot;&quot;,</span><br><span class="line">  &quot;base_ref&quot;: &quot;&quot;,</span><br><span class="line">  &quot;event_name&quot;: &quot;deployment_status&quot;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can check out the full repository and find the branch name the commit belongs to (assuming the pull request commit really belongs to one branch)</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;Deployed commit $&#123;&#123; github.sha &#125;&#125;&quot;</span><br><span class="line">export BRANCH_NAME=$(git show -s --pretty=%D HEAD | tr -s &#x27;,&#x27; &#x27;\n&#x27; | sed &#x27;s/^ //&#x27; | grep -e &#x27;origin/&#x27; | head -1 | sed &#x27;s/\origin\///g&#x27;)</span><br><span class="line">echo &quot;Deployed branch $&#123;BRANCH_NAME&#125;&quot;</span><br></pre></td></tr></table></figure><h2><span id="update-1-record-tests-on-cypress-dashboard">Update 1: record tests on Cypress Dashboard</span></h2><p><a href="https://on.cypress.io/dashboard-introduction">Cypress Dashboard</a> is very useful for showing the results of tests and quickly diagnosing the failed ones. I have set up the test recording, you can see the run results <a href="https://dashboard.cypress.io/projects/15cjtg/runs">here</a>. The CircleCI <code>cypress/run</code> job gets a few extra parameters:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">cypress/run:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">E2E</span> <span class="string">tests</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line">    <span class="comment"># record test results on Cypress Dashboard</span></span><br><span class="line">    <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">e2e</span></span><br><span class="line">    <span class="comment"># tag the recording with the branch name to make it easier to find</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">&#x27;&lt;&lt; pipeline.parameters.TEST_BRANCH &gt;&gt;&#x27;</span></span><br></pre></td></tr></table></figure><p>We can include the results Markdown badge in both the tests repo&#39;s <a href="https://github.com/bahmutov/todomvc-tests-circleci#readme">README</a>, and in in the TodoMVC application&#39;s <a href="https://github.com/bahmutov/todomvc-no-tests-vercel#readme">README file</a>.</p><p><img src="../images/separate-circleci/recorded.png" alt="Recorded test runs"></p><p>Note: when recording test results on Cypress Dashboard, I usually disable storing the videos and screenshots as test artifacts on CI, since it is no longer useful.</p><h2><span id="update-2-add-the-cypress-github-integration">Update 2: add the Cypress GitHub integration</span></h2><p>After recording tests on Cypress Dashboard, I have installed <a href="https://on.cypress.io/github-integration">Cypress GitHub Integration App</a> in the test repo. You can give the app access to all your repos, or just select ones.</p><p><img src="../images/separate-circleci/repo-access.png" alt="Cypress GH App repo access"></p><blockquote class="pullquote"><p>üîê Note that the app only needs read and write access to the commit statuses and pull requests, no source code access. For more, read <a href="https://docs.cypress.io/faq/questions/dashboard-faq#What-does-Cypress-record">What does Cypress record?</a> and <a href="https://www.cypress.io/security">Cypress Security page</a>.</p></blockquote><p>Once we gave the Cypress GH app access to our repository, we can link the Dashboard project back to the repository and enable pull request comments and status checks.</p><p><img src="../images/separate-circleci/gh-integration.png" alt="Enable the Cypress GH integration PR checks"></p><p>Let&#39;s work on a new application feature - let&#39;s change a selector for the &quot;remove todo&quot; button.</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- &lt;button data-cy=&quot;remove&quot; ...&gt;x&lt;/button&gt;</span></span><br><span class="line"><span class="addition">+ &lt;button data-cy=&quot;destroy&quot; ...&gt;x&lt;/button&gt;</span></span><br></pre></td></tr></table></figure><p>We have opened a new pull request in the application repo with this change. The status checks on the application repo are all green - because our GitHub integration is connected to the separate repo. On the separate repo we see a status check on the <em>last commit to the main branch</em> - because that&#39;s the commit the CircleCI pipeline has run against when triggered.</p><p><img src="../images/separate-circleci/commit-check.png" alt="A new commit status check appears in the test repo"></p><p>Let&#39;s open a repo with the same branch name as the branch in the application.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b rename-attribute</span></span><br><span class="line">Switched to a new branch &#x27;rename-attribute&#x27;</span><br></pre></td></tr></table></figure><p>We can update the test to pass against the updated application.</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- cy.contains(&#x27;.todo&#x27;, &#x27;Learn about React&#x27;).find(&#x27;[data-cy=remove]&#x27;).click()</span></span><br><span class="line"><span class="addition">+ cy.contains(&#x27;.todo&#x27;, &#x27;Learn about React&#x27;).find(&#x27;[data-cy=destroy]&#x27;).click()</span></span><br></pre></td></tr></table></figure><p>But now we have a problem - we need to trigger the pipeline with the tests on the branch <code>rename-attribute</code> in the <code>todomvc-tests-circleci</code> repo in order for the Cypress GH Integration to tie the test results to the right pull request. We can trigger the pipeline using <a href="https://circleci.com/docs/api/v2/#operation/triggerPipeline">the branch name</a>, plus we can use a fallback - if there is no branch with the given test name, trigger the default pipeline. Our deployment status GitHub Actions workflow is thus:</p><figure class="highlight yml"><figcaption><span>.github/workflows/deploy.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line"><span class="comment"># trigger CircleCI pipeline to run E2E tests</span></span><br><span class="line"><span class="comment"># https://circleci.com/docs/api/v2/#operation/triggerPipeline</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Trigger</span> <span class="string">CircleCI</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;Vercel unique deployment URL is $<span class="template-variable">&#123;&#123; github.event.deployment_status.target_url &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;Deployed commit $<span class="template-variable">&#123;&#123; github.sha &#125;&#125;</span>&quot;</span></span><br><span class="line">    <span class="string">export</span> <span class="string">BRANCH_NAME=$(git</span> <span class="string">show</span> <span class="string">-s</span> <span class="string">--pretty=%D</span> <span class="string">HEAD</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-s</span> <span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;\n&#x27;</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">&#x27;s/^ //&#x27;</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">-e</span> <span class="string">&#x27;origin/&#x27;</span> <span class="string">|</span> <span class="string">head</span> <span class="number">-1</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">&#x27;s/\origin\///g&#x27;</span><span class="string">)</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;Deployed branch $&#123;BRANCH_NAME&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">export</span> <span class="string">TEST_PIPELINE_URL=https://circleci.com/api/v2/project/gh/bahmutov/todomvc-tests-circleci/pipeline</span></span><br><span class="line">    <span class="comment"># --silent option to not print request progress</span></span><br><span class="line">    <span class="comment"># if the test repo does not have branch with the same name</span></span><br><span class="line">    <span class="comment"># trigger the default branch pipeline</span></span><br><span class="line">    <span class="string">curl</span> <span class="string">-u</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CIRCLE_CI_API_TOKEN</span> <span class="string">&#125;&#125;:</span> <span class="string">\</span></span><br><span class="line">      <span class="string">--silent</span> <span class="string">\</span></span><br><span class="line">      <span class="string">--data</span> <span class="string">branch=$&#123;BRANCH_NAME&#125;</span> <span class="string">\</span></span><br><span class="line">      <span class="string">--data</span> <span class="string">parameters[TEST_BRANCH]=$&#123;BRANCH_NAME&#125;</span> <span class="string">\</span></span><br><span class="line">      <span class="string">--data</span> <span class="string">parameters[TEST_URL]=$&#123;&#123;</span> <span class="string">github.event.deployment_status.target_url</span> <span class="string">&#125;&#125;</span> <span class="string">\</span></span><br><span class="line">      <span class="string">$&#123;TEST_PIPELINE_URL&#125;</span> <span class="string">||</span> <span class="string">\</span></span><br><span class="line">    <span class="string">curl</span> <span class="string">-u</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CIRCLE_CI_API_TOKEN</span> <span class="string">&#125;&#125;:</span> <span class="string">\</span></span><br><span class="line">      <span class="string">--silent</span> <span class="string">\</span></span><br><span class="line">      <span class="string">--data</span> <span class="string">parameters[TEST_BRANCH]=$&#123;BRANCH_NAME&#125;</span> <span class="string">\</span></span><br><span class="line">      <span class="string">--data</span> <span class="string">parameters[TEST_URL]=$&#123;&#123;</span> <span class="string">github.event.deployment_status.target_url</span> <span class="string">&#125;&#125;</span> <span class="string">\</span></span><br><span class="line">      <span class="string">$&#123;TEST_PIPELINE_URL&#125;</span></span><br></pre></td></tr></table></figure><p>Let&#39;s say a test fails, because the application renamed the <code>data-cy</code> attribute back to <code>remove</code>. Then the pull request <a href="https://github.com/bahmutov/todomvc-tests-circleci/pull/3">#3</a> shows the test results and the details for the failed test, including a screenshot thumbnail and a link to the test result on the Dashboard.</p><p><img src="../images/separate-circleci/failed-status-checks.png" alt="Failed status checks"></p><p><img src="../images/separate-circleci/comment.png" alt="Cypress comments with results on the PR"></p><p>My favorite part in all of this, is clicking on the failed test&#39;s thumbnail, seeing the application screenshot at the moment of failure, then inspecting the test history to see if the test was modified recently (it was).</p><p><img src="../images/separate-circleci/thumbnail-to-dashboard.gif" alt="Going from the PR comment to the test screenshot and history"></p><p>Maybe we need to change it back to make it work... I have changed the test command back to <code>.find(&#39;[data-cy=remove]&#39;)</code> and committed the test while skipping the CI.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> g <span class="keyword">done</span> <span class="string">&quot;change test back [skip ci]&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push</span></span><br></pre></td></tr></table></figure><p>Let&#39;s re-run the CircleCI pipeline - but we can re-run the failed E2E test job only.</p><p><img src="../images/separate-circleci/rerun-from-failed.gif" alt="Re-running the failed E2E test job in the pipeline"></p><p>The updated test fixes the pipeline and the test comment is updated.</p><p><img src="../images/separate-circleci/fixed-comment.png" alt="The Cypress tests have been fixed"></p><p>Again, we can click on the comment to inspect the test run, including the test change history.</p><p><img src="../images/separate-circleci/test-history.png" alt="The test has been updated twice"></p><h2><span id="update-3-trigger-the-circleci-pipeline-correctly">Update 3: trigger the CircleCI pipeline correctly</span></h2><p>After experimenting with triggering the CircleCI pipeline, I found that using <code>curl</code> with the fallback branch is really tricky. If the branch is not found, the request fails but the status code is 200, since curl receives an object. To make it robust I have written a little utility <a href="https://github.com/bahmutov/trigger-circleci-pipeline">trigger-circleci-pipeline</a> that you can use to trigger a pipeline run on a given branch with fallback to the default branch.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> assuming the environment variable CIRCLE_CI_API_TOKEN</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> has your personal CircleCI token, trigger a workflow</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">in</span> the CircleCI project bahmutov/todomvc-tests-circleci</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> and pass pipeline parameters</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npx trigger-circleci-pipeline \</span></span><br><span class="line"><span class="bash">    --org bahmutov --project todomvc-tests-circleci --branch <span class="variable">$&#123;BRANCH_NAME&#125;</span> \</span></span><br><span class="line"><span class="bash">    --parameters TEST_URL=<span class="variable">$&#123;TEST_URL&#125;</span>,TEST_BRANCH=<span class="variable">$&#123;BRANCH_NAME&#125;</span></span></span><br></pre></td></tr></table></figure><h2><span id="update-4-the-downsides">Update 4: The downsides</span></h2><p>Nothing in life is truly free, so keeping the tests in a separate repo does come with downsides.</p><ul><li>mental and documentation overhead. Want to add a feature? Please read how to open two pull requests, how to name the branches, and of course, remember how to merge the tests and the code - the order matters. The code and its tests are disjoint, but they should be together so the tests validate the code change. It is like a summer camp - you want the team leads to stay with the campers in the same cabin, otherwise all hell breaks loose.</li><li>working on the tests and need to add a <code>data-cy</code> attribute to an element? Oops, need to open a matching pull request, make sure they are linked to each other, and merged in the right order. This discourages small testability improvements.</li><li>the CI needs to know how to trigger the second workflow. Yes, I wrote <a href="https://github.com/bahmutov/trigger-circleci-pipeline">trigger-circleci-pipeline</a>, but why would you want a separate authentication and parameter passing headache?</li><li>merging means juggling the two pull requests. Need to revert the code change? Remember - you need to find and revert the companion tests. Otherwise you get a failed test run. Oops, it should not count, but here it is - blaring to everyone &quot;failed test, failed test!&quot;</li><li>every time a code pull requests lives longer than a few hours, its tests fall behind other tests, and might fail when running because there is a mismatch between some element logic. Your PR has no tests, so you run the default tests? Oops, the latest tests already assume the code changes YOUR PR does not have yet. Better constantly merge the main branch before pushing. Ohh, you merged the latest code, but forgot to merge the latest tests too? Too bad, the tests failed.</li><li>want to review a pull request, go and find the matching test pull request too. Do not forget to copy / paste all the links around, because one thing we all do very well is copy / pasting Jira &amp; GitHub URLs around.</li><li>if you use Cypress Dashboard with GitHub Integration - well, it comments on the test pull request, and does not block or post status on the code pull request. You could write some glue code to re-post the GitHub status from the test pull request to the code pull request. You would need authentication, and the test results, and ignore the failed Cypress run exit code to run your utility... but why would you write all that glue code if you could simply ... run tests in the same repo so it all just works<sup>TM</sup>?</li><li>speaking of Cypress Dashboard. When tests are triggered, the information shown in the Dashboard ... has the last commit <em>of the test repo</em>, which says nothing about the <em>code tested</em>. Seeing unrelated commit messages, not being able to jump to the application code really is unfortunate.</li><li>writing end-to-end tests is <em>the start</em> of the quality journey. You want to know <em>what</em> you are testing, and <em>what</em> you have missed. <a href="../tags/code-coverage/">Code coverage</a> from E2E tests is a very effective way to discover features the tests have missed. Instrumenting the code in the same repository while doing the testing is probably ten times easier than trying to instrument the built web application and mapping the results back to code.</li><li>you probably will want to start sharing some code from the application with the tests, like constants, translations, TS types, API and database connections. This requires the tests to be close to the application.</li><li>finally, Cypress has killer <a href="https://on.cypress.io/component-testing">component tests</a>. You can only write and run those from the same repository, since the component tests import the ... source components.</li></ul><p>Ultimately, I believe that becoming familiar with end-to-end tests and making a proof of concept allows for using the tests in a repo separate from the web application. But you do want to eventually merge the tests to live closer to the code to make the entire process as simple as possible. After all, your mental energy should be directed towards the feature work, not towards the repo juggling.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="/blog/how-to-keep-cypress-tests-in-another-repo/" title="How to Keep Cypress Tests in Another Repo While Using GitHub Actions">How to Keep Cypress Tests in Another Repo While Using GitHub Actions</a></li><li><a href="/blog/tested-ecommerce/" title="Deploy E-Commerce Site to Netlify and Test Using GitHub Actions">Deploy E-Commerce Site to Netlify and Test Using GitHub Actions</a></li><li>my other <a href="../tags/vercel">Vercel blog posts</a></li><li>my other <a href="../tags/circle">CircleCI blog posts</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine you are developing a web application and deploying it to preview environments using &lt;a href=&quot;https://vercel.com/&quot;&gt;Vercel&lt;/a&gt;. How
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="circle" scheme="https://glebbahmutov.com/blog/tags/circle/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
      <category term="vercel" scheme="https://glebbahmutov.com/blog/tags/vercel/"/>
    
  </entry>
  
  <entry>
    <title>Deal with Second Tab in Cypress</title>
    <link href="https://glebbahmutov.com/blog/cypress-second-tab/"/>
    <id>https://glebbahmutov.com/blog/cypress-second-tab/</id>
    <published>2021-07-01T04:00:00.000Z</published>
    <updated>2021-07-01T13:05:09.429Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes your application wants to open a new tab or a new browser window. Cypress injects its spec into the first window, thus it &quot;loses&quot; your application and cannot control the second tab. How to handle this case depends on how the application opens the second tab. Here are links to the solutions:</p><ol><li>Anchor link with target</li></ol><p>If your application contains a link element like <code>&lt;a href=&quot;...&quot; target=&quot;_blank&quot;&gt;</code>, see <a href="../cypress-tips-and-tricks/#deal-with-target_blank">Deal with <code>target=_blank</code></a>. The test can remove the <code>target</code> attribute or change it to <code>_self</code> before clicking.</p><ol start="2"><li><code>window.open</code></li></ol><p>If the application calls <code>window.open(url)</code> which opens 2nd tab, the test can stab the <code>window.open</code> method. See <a href="../cypress-tips-and-tricks/#deal-with-windowopen">Deal with <code>window.open</code></a> answer.</p><ol start="3"><li><code>window.location.replace</code></li></ol><p>Perhaps the toughest case to deal with is when the application uses <code>location.replace</code> to load new URL. While this call does not open the 2nd tab, the application might navigate to another domain, where Cypress loses it. This browser API method cannot be stubbed directly, see <a href="../cypress-tips-and-tricks/#deal-with-windowlocationreplace">Deal with <code>window.location.replace</code></a> on how to handle this scenario from Cypress test.</p><ol start="4"><li>Running two Cypress instances</li></ol><p>Sometimes your might want to run 2 Cypress instances to test a chat web application for example. In general, I think this is NOT necessary. Instead you can simulate the second user separately, while testing the page interface from Cypress. See my blog posts on this topic:</p><ul><li><a href="/blog/test-socketio-chat-using-cypress/" title="Test a Socket.io Chat App using Cypress">Test a Socket.io Chat App using Cypress</a></li><li><a href="/blog/run-two-cypress-runners/" title="Run Two Cypress Test Runners At The Same Time">Run Two Cypress Test Runners At The Same Time</a></li><li><a href="/blog/sync-two-cypress-runners/" title="Sync Two Cypress Runners via Checkpoints">Sync Two Cypress Runners via Checkpoints</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sometimes your application wants to open a new tab or a new browser window. Cypress injects its spec into the first window, thus it &amp;quot
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>How to Keep Cypress Tests in Another Repo While Using GitHub Actions</title>
    <link href="https://glebbahmutov.com/blog/how-to-keep-cypress-tests-in-another-repo/"/>
    <id>https://glebbahmutov.com/blog/how-to-keep-cypress-tests-in-another-repo/</id>
    <published>2021-06-29T04:00:00.000Z</published>
    <updated>2021-07-03T12:46:46.484Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine you want to start writing end-to-end tests for your web application, but it is hard to convince everyone on the team to include Cypress in the repository. Maybe you want to show the tests in action first. Maybe you want to solve technical blockers. You have decided to keep the E2E tests in a separate repository, at least at first. How would it work?</p><blockquote class="pullquote"><p>üéÅ You can find the example application in the repository <a href="https://github.com/bahmutov/todomvc-no-tests">bahmutov/todomvc-no-tests</a> and its end-to-end tests in the repository <a href="https://github.com/bahmutov/todomvc-tests">bahmutov/todomvc-tests</a>.</p></blockquote><!-- toc --><ul><li><a href="#the-app">The app</a></li><li><a href="#the-tests">The tests</a></li><li><a href="#netlify-setup">Netlify setup</a></li><li><a href="#how-to-work-in-two-repos">How to work in two repos</a></li><li><a href="#manual-trigger">Manual trigger</a></li><li><a href="#status-checks">Status checks</a></li><li><a href="#related">Related</a></li></ul><!-- tocstop --><h2><span id="the-app">The app</span></h2><p>Let&#39;s say we are writing an app and every pull request is automatically deployed to a preview environment. In this blog post, my application from repo <a href="https://github.com/bahmutov/todomvc-no-tests">bahmutov/todomvc-no-tests</a> is deployed to Netlify <a href="https://todomvc-no-tests.netlify.app/">https://todomvc-no-tests.netlify.app/</a> after build. Every pull request is also deployed to its own preview environment.</p><p><img src="../images/another-repo/todo.png" alt="The deployed Todo application"></p><h2><span id="the-tests">The tests</span></h2><p>The tests live in another repo <a href="https://github.com/bahmutov/todomvc-tests">bahmutov/todomvc-tests</a> and by default assume the application is running locally at port 3000.</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;http://localhost:3000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;fixturesFolder&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;supportFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;pluginsFile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;video&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can start with a single sanity test that goes through the main features of the application.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;works&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// application starts with 3 todos</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;input[type=text]&#x27;</span>).type(<span class="string">&#x27;Add tests!&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">    .eq(<span class="number">3</span>)</span><br><span class="line">    .should(<span class="string">&#x27;include.text&#x27;</span>, <span class="string">&#x27;Add tests!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">&#x27;.todo&#x27;</span>, <span class="string">&#x27;Learn about React&#x27;</span>)</span><br><span class="line">    .contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Complete&#x27;</span>)</span><br><span class="line">    .click()</span><br><span class="line">  cy.contains(<span class="string">&#x27;.todo&#x27;</span>, <span class="string">&#x27;Learn about React&#x27;</span>).find(<span class="string">&#x27;[data-cy=remove]&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;.todo&#x27;</span>, <span class="string">&#x27;Learn about React&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes</p><p><img src="../images/another-repo/todo.gif" alt="Testing the Todo application"></p><h2><span id="netlify-setup">Netlify setup</span></h2><p>The application itself is built and deployed to Netlify. I will use <a href="/blog/trying-github-actions/" title="GitHub Actions">GitHub Actions</a> to run E2E tests after each deploy. In the <code>todomvc-tests</code> repository I will configure a GitHub workflow that only runs on the workflow dispatch event.</p><p>To trigger the GitHub workflow after Netlify has finished the deploy, I will use my plugin <a href="https://github.com/bahmutov/netlify-plugin-github-dispatch">netlify-plugin-github-dispatch</a>. I will need to create a <a href="https://github.com/settings/tokens/new">personal GitHub token</a> with &quot;repo&quot; permission.</p><p><img src="../images/another-repo/new-token.png" alt="Creating a new personal GitHub token"></p><p>Then I set this token as an environment variable during the &quot;build&quot; step on Netlify.</p><p><img src="../images/another-repo/set-token.png" alt="Set the created GitHub token as Netlify environment variable in the Build step"></p><p><strong>Tip:</strong> make sure to keep Netlify to NOT allow the forked pull requests to run without review (which is the default), otherwise someone might steal your personal GitHub token.</p><p>Now create a new file <a href="https://github.com/bahmutov/todomvc-no-tests/blob/main/netlify.toml">netlify.toml</a> in the application&#39;s repository to invoke the GitHub workflow after the successful deploy.</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/bahmutov/netlify-plugin-github-dispatch</span></span><br><span class="line"><span class="section">[[plugins]]</span></span><br><span class="line">  <span class="attr">package</span> = <span class="string">&quot;netlify-plugin-github-dispatch&quot;</span></span><br><span class="line">  <span class="section">[plugins.inputs]</span></span><br><span class="line">    <span class="attr">owner</span> = <span class="string">&quot;bahmutov&quot;</span> <span class="comment"># use the target organization name</span></span><br><span class="line">    <span class="attr">repo</span> = <span class="string">&quot;todomvc-tests&quot;</span> <span class="comment"># use the target repo name</span></span><br><span class="line">    <span class="attr">workflow</span> = <span class="string">&quot;.github/workflows/e2e.yml&quot;</span> <span class="comment"># use workflow relative path</span></span><br></pre></td></tr></table></figure><p>We need to install the plugin <a href="https://github.com/bahmutov/netlify-plugin-github-dispatch">netlify-plugin-github-dispatch</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -D netlify-plugin-github-dispatch</span></span><br><span class="line">+ netlify-plugin-github-dispatch@1.0.3</span><br></pre></td></tr></table></figure><p>When we first push the above code, the Netlify reports a plugin error after successful deployment - we have not created the <code>e2e.yml</code> yet!</p><p><img src="../images/another-repo/plugin-error.png" alt="The Netlify plugin needs the repository to have the workflow ready"></p><p>Let&#39;s create our workflow - we need to check out code and run Cypress tests. We will NOT run the tests by default, only when someone dispatches the <a href="https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/">workflow_dispatch event</a>. <strong>Note:</strong> this event can be triggered via API from Netlify or manually from the GitHub web UI.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .github/workflows/e2e.yml</span></span><br><span class="line"><span class="comment"># test the deployed Netlify site</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">e2e</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">siteName:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Netlify</span> <span class="string">Site</span> <span class="string">Name</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">deployPrimeUrl:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Deployed</span> <span class="string">URL</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">default:</span> <span class="string">&#x27;https://todomvc-no-tests.netlify.app/&#x27;</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># example job showing the Netlify information</span></span><br><span class="line">  <span class="attr">show-event:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;Testing url $<span class="template-variable">&#123;&#123; github.event.inputs.deployPrimeUrl &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;Site name $<span class="template-variable">&#123;&#123; github.event.inputs.siteName &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tests:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="comment"># Installs and caches dependencies, runs all Cypress tests</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># we want to test the URL passed by Netlify</span></span><br><span class="line">          <span class="attr">config:</span> <span class="string">baseUrl=$&#123;&#123;</span> <span class="string">github.event.inputs.deployPrimeUrl</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># store video and screenshots on Cypress Dashboard</span></span><br><span class="line">          <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CYPRESS_RECORD_KEY</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>The above workflow is using <a href="https://github.com/cypress-io/github-action">cypress-io/github-action</a> to abstract installing dependencies and running Cypress tests. We point Cypress at the deployed URL using <code>baseUrl=$&#123;&#123; github.event.inputs.deployPrimeUrl &#125;&#125;</code> syntax.</p><p><strong>Tip:</strong> we could store the captured test run videos as GitHub test artifacts, or record the test results on <a href="https://www.cypress.io/dashboard">Cypress Dashboard</a>. I prefer the Dashboard since it provides a lot more information and is easier to use.</p><h2><span id="how-to-work-in-two-repos">How to work in two repos</span></h2><p>Now that we have the Netlify deploys and GitHub workflows configured, let&#39;s see how we can work day to day. I assume you are using feature branches for deployment. Then you open a pull request to merge the new feature to the main branch. If all tests pass, and if the reviewers agree, the feature is merged into the main branch. Here is how to use E2E tests together with the feature work.</p><ol><li>Pull both repos to the local machine.</li><li>Open a branch in the application repo and a branch with the same name in the tests repo.</li></ol><p>For example, let&#39;s improve the selectors in our application so our tests can find DOM elements following the Cypress&#39; <a href="https://on.cypress.io/best-practices#Selecting-Elements">best practices</a>. I will name the branches <code>better-selectors</code>.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">~/git/todomvc-tests on main</span><br><span class="line">$ git checkout -b better-selectors</span><br><span class="line">Switched to a new branch &#x27;better-selectors&#x27;</span><br><span class="line"></span><br><span class="line">~/git/todomvc-no-tests on main</span><br><span class="line">$ git checkout -b better-selectors</span><br><span class="line">Switched to a new branch &#x27;better-selectors&#x27;</span><br></pre></td></tr></table></figure><p>I will update the application and the spec while running Cypress to make sure the tests pass locally. The test has changed some of the selectors</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- cy.get(&#x27;input[type=text]&#x27;).type(&#x27;Add tests!&#123;enter&#125;&#x27;)</span></span><br><span class="line"><span class="addition">+ cy.get(&#x27;[data-cy=new-todo]&#x27;).type(&#x27;Add tests!&#123;enter&#125;&#x27;)</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Commit and push the tests <em>first</em>. You can even open a pull request in the tests repository. Remember, these tests do not run on commit, and they do not run on pull request. The tests must be triggered in order to run.</li></ol><p><img src="../images/another-repo/tests-pr.png" alt="Pushed the &quot;better-selectors&quot; branch to the tests repo"></p><ol start="4"><li>Commit and push the application branch <code>better-selectors</code>. Because this is not the main repository branch, Netlify does nothing.</li><li>Open a new pull request and Netlify will trigger the preview deploy.</li></ol><p><img src="../images/another-repo/pr.png" alt="Netlify deploys the preview site for the pull request from the &quot;better-selectors&quot; branch"></p><p>If you look at the Netlify deploy logs, the plugin <a href="https://github.com/bahmutov/netlify-plugin-github-dispatch">netlify-plugin-github-dispatch</a> triggers the workflow E2E using <code>ref: &lt;branch name&gt;</code>. Thus GitHub runs the workflow in the same branch name as the first repo branch.</p><p><img src="../images/another-repo/ref.png" alt="The dispatch triggers workflow using &quot;better-selectors&quot; branch"></p><p><strong>Note:</strong> if there is no branch with the same name, the dispatch will fail.</p><ol start="6"><li>The GitHub Actions tab shows the triggered workflow.</li></ol><p><img src="../images/another-repo/actions.png" alt="The triggered E2E workflow"></p><p>We can drill into the E2E job to see Cypress output.</p><p><img src="../images/another-repo/run.png" alt="The Cypress tests finish successfully"></p><p>We can go to the shown Cypress Dashboard URL to watch the video of the run or see the captured screenshot. Notice the updated <code>data-cy</code> selectors in the Command Log and the preview URL.</p><p><img src="../images/another-repo/cypress-screenshot.png" alt="The Cypress test screenshot"></p><p><strong>Tip:</strong> we can post the status check from the tests job back to the app repo, see the section at the end of this blog post.</p><p>If the tests are passing or not, I would put the link to the tests PR in the description of the application PR to let the reviewers see the updated tests together with the application code change.</p><p><img src="../images/another-repo/link-to-tests.png" alt="Put the link to the tests PR in the body of the application PR"></p><p>Now that the tests are passing, let&#39;s merge the tests and the code change.</p><ol><li>First merge the updated tests. Remember - the merged tests are not going to run, unless the workflow is triggered.</li><li>Merge the updated application. The deploy to the main branch will trigger the tests already merged to the main branch (I assume both repos use a matching main branch name).</li></ol><h2><span id="manual-trigger">Manual trigger</span></h2><p>If for some reason you want to re-run the tests, you can trigger a re-deploy on Netlify. Or you can trigger the workflow manually using the GitHub UI. Go to the Actions tab, pick the E2E workflow and click the &quot;Run workflow&quot; button. Change the inputs to what you desire and start the workflow.</p><p><img src="../images/another-repo/manual-trigger.png" alt="Manually trigger the E2E workflow"></p><h2><span id="status-checks">Status checks</span></h2><p>We have two separate repositories, thus we need to manage status checks ourselves. The application repo as soon as there is a pull request can post a pending status check on the merge.</p><figure class="highlight yml"><figcaption><span>.github/workflows/pr.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in repo bahmutov/todomvc-no-tests</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">pull</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">pull_request</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">set-status:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># https://github.com/marketplace/actions/github-status-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">set</span> <span class="string">pending</span> <span class="string">status</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">Sibz/github-status-action@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">authToken:</span> <span class="string">$&#123;&#123;secrets.GITHUB_TOKEN&#125;&#125;</span></span><br><span class="line">          <span class="attr">context:</span> <span class="string">&#x27;E2E tests&#x27;</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&#x27;Tests pending deploy&#x27;</span></span><br><span class="line">          <span class="comment"># success, error, failure, or pending</span></span><br><span class="line">          <span class="attr">state:</span> <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">          <span class="attr">sha:</span> <span class="string">$&#123;&#123;github.event.pull_request.head.sha&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>This check will be &quot;pending&quot; thus the reviewer knows that the tests have not finished.</p><p>In the tests repository we can use similar code to set the status check <em>in the original repo</em>. We will get the merge commit SHA from the optional workflow input parameter <code>commit</code> - this parameter will be set by the <code>netlify-plugin-github-dispatch</code> code when it calls the workflow. Here is the entire workflow file from the test repo:</p><figure class="highlight yml"><figcaption><span>.github/workflows/e2e.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># todomvc-tests repo</span></span><br><span class="line"><span class="comment"># test the deployed Netlify site</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">e2e</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">siteName:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Netlify</span> <span class="string">Site</span> <span class="string">Name</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">deployPrimeUrl:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Deployed</span> <span class="string">URL</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">default:</span> <span class="string">&#x27;https://todomvc-no-tests.netlify.app/&#x27;</span></span><br><span class="line">      <span class="attr">commit:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Original</span> <span class="string">repo</span> <span class="string">commit</span> <span class="string">SHA</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># example job showing the Netlify information</span></span><br><span class="line">  <span class="attr">show-event:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;Testing url $<span class="template-variable">&#123;&#123; github.event.inputs.deployPrimeUrl &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;Site name $<span class="template-variable">&#123;&#123; github.event.inputs.siteName &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;App commit SHA $<span class="template-variable">&#123;&#123; github.event.inputs.commit &#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tests:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># https://github.com/cypress-io/github-action</span></span><br><span class="line">      <span class="comment"># Installs and caches dependencies, runs all Cypress tests</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="comment"># let&#x27;s give this action an ID so we can refer</span></span><br><span class="line">        <span class="comment"># to its output values later</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">cypress</span></span><br><span class="line">        <span class="comment"># Continue the build in case of an error, as we need to set the</span></span><br><span class="line">        <span class="comment"># commit status in the next step, both in case of success and failure</span></span><br><span class="line">        <span class="attr">continue-on-error:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># we want to test the URL passed by Netlify</span></span><br><span class="line">          <span class="attr">config:</span> <span class="string">baseUrl=$&#123;&#123;</span> <span class="string">github.event.inputs.deployPrimeUrl</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># store video and screenshots on Cypress Dashboard</span></span><br><span class="line">          <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CYPRESS_RECORD_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># after e2e tests finish, set the status back in the original repo</span></span><br><span class="line">      <span class="comment"># https://github.com/marketplace/actions/github-status-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">commit</span> <span class="string">status</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.inputs.commit</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">Sibz/github-status-action@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># create personal GitHub token to be able to</span></span><br><span class="line">          <span class="comment"># set status in other repositories</span></span><br><span class="line">          <span class="comment"># https://github.com/settings/tokens/new</span></span><br><span class="line">          <span class="attr">authToken:</span> <span class="string">$&#123;&#123;secrets.PERSONAL_GITHUB_TOKEN&#125;&#125;</span></span><br><span class="line">          <span class="attr">context:</span> <span class="string">&#x27;E2E tests&#x27;</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&#x27;Cypress ran the tests&#x27;</span></span><br><span class="line">          <span class="comment"># state can be success, error, failure, or pending</span></span><br><span class="line">          <span class="comment"># let&#x27;s grab it from the Cypress step outcomes</span></span><br><span class="line">          <span class="comment"># https://github.com/cypress-io/github-action#outputs</span></span><br><span class="line">          <span class="attr">state:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.cypress.outcome</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">owner:</span> <span class="string">&#x27;bahmutov&#x27;</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">&#x27;todomvc-no-tests&#x27;</span></span><br><span class="line">          <span class="attr">sha:</span> <span class="string">$&#123;&#123;github.event.inputs.commit&#125;&#125;</span></span><br><span class="line">          <span class="attr">target_url:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.cypress.outputs.dashboardUrl</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>We need to use our personal GitHub token to set the status in the first repository. The status check step runs every time. Here is how the pull request in the first repo looks when the Cypress tests have failed.</p><p><img src="../images/another-repo/status-check-failed.png" alt="Cypress tests failed status check"></p><p>The &quot;details&quot; link opens the Cypress Dashboard URL.</p><h2><span id="related">Related</span></h2><ul><li><a href="/blog/how-to-keep-cypress-tests-in-another-repo-with-circleci/" title="How to Keep Cypress Tests in Another Repo While Using CircleCI">How to Keep Cypress Tests in Another Repo While Using CircleCI</a></li><li><a href="/blog/tested-ecommerce/" title="Deploy E-Commerce Site to Netlify and Test Using GitHub Actions">Deploy E-Commerce Site to Netlify and Test Using GitHub Actions</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine you want to start writing end-to-end tests for your web application, but it is hard to convince everyone on the team to include C
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
      <category term="netlify" scheme="https://glebbahmutov.com/blog/tags/netlify/"/>
    
  </entry>
  
  <entry>
    <title>Cypress Real Events Plugin</title>
    <link href="https://glebbahmutov.com/blog/cypress-real-events/"/>
    <id>https://glebbahmutov.com/blog/cypress-real-events/</id>
    <published>2021-06-28T04:00:00.000Z</published>
    <updated>2021-06-28T11:04:55.951Z</updated>
    
    <content type="html"><![CDATA[<p>Recently a Cypress user asked in the online chat why an autocomplete popup does not appear when entering the search text. Previously I have written about testing <a href="https://www.cypress.io/blog/2020/03/20/working-with-select-elements-and-select2-widgets-in-cypress/">autocomplete widgets</a> using Cypress, so I have decided to investigate. Because the user has produced a repo with the test code, I could take a look. The test looked correct to me</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;gm-search&#x27;</span>)</span><br><span class="line">  .shadow()</span><br><span class="line">  .find(<span class="string">&#x27;div#search_dropdown&#x27;</span>)</span><br><span class="line">  .find(<span class="string">&#x27;gm-text-field#searchfield&#x27;</span>)</span><br><span class="line">  .focus()</span><br><span class="line">  .trigger(<span class="string">&#x27;dblclick&#x27;</span>)</span><br><span class="line">  .find(<span class="string">&#x27;.vaadin-text-field-container&#x27;</span>)</span><br><span class="line">  .find(<span class="string">&#x27;#gm-text-field-input-6&#x27;</span>).focused()</span><br><span class="line">  .find(<span class="string">&#x27;input[placeholder=\&#x27;Typ een adres of plaats\&#x27;]&#x27;</span>).trigger(<span class="string">&#x27;focus&#x27;</span>)</span><br><span class="line">  .type(<span class="string">&#x27;Haarzuilens&#x27;</span>, &#123;<span class="attr">delay</span>: <span class="number">100</span>&#125;)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> I would improve this test by adding assertions. Right now the test only has commands, thus it could run away from the application. See my guide to <a href="https://on.cypress.io/retry-ability">Cypress retry-ability</a> for details.</p><p>The failing test is recorded below. Notice the Shadow DOM command, that might be relevant here.</p><p><img src="../images/autocomplete/type-does-not-work.gif" alt="The cy.type command does not seem to work"></p><p>I have noticed that the autocomplete does work when typing into the same box myself.</p><p><img src="../images/autocomplete/human-type.gif" alt="Typing does work"></p><p>Typically, a widget like this could take a little longer to bootstrap. Thus I tried adding a pause before typing.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.find(<span class="string">&#x27;input[placeholder=\&#x27;Typ een adres of plaats\&#x27;]&#x27;</span>).trigger(<span class="string">&#x27;focus&#x27;</span>)</span><br><span class="line">.wait(<span class="number">5000</span>)</span><br><span class="line">.type(<span class="string">&#x27;Haarzuilens&#x27;</span>, &#123;<span class="attr">delay</span>: <span class="number">100</span>&#125;)</span><br></pre></td></tr></table></figure><p>It did not help. Then I increased the key event delay from 100ms to one second. Still nothing. Let&#39;s try something else. Cypress <a href="https://on.cypress.io/type">cy.type</a> command sends synthetic JavaScript events to the input element. You can see the events by clicking on the TYPE command in the Command Log. The events show up in the DevTools console, but some of the fields are null. That is suspicious.</p><p><img src="../images/autocomplete/null.png" alt="Inspecting the list of keyboards events Cypress sent to the element"></p><p>Hmm, maybe synthetic keyboard events do not work correctly in this case, and it could possibly be related to the Shadow DOM page structure. Let&#39;s see if sending <em>real</em> browser events works better. When Cypress controls the browser, it opens a Chrome Debugger Protocol connection to perform some privileged operations. I have described this in my blog post <a href="/blog/cypress-vs-other-test-runners/" title="Cypress vs Other Test Runners">Cypress vs Other Test Runners</a>. Thus we can send real browser events when typing using the existing CDP connection, or by opening our own.</p><p>Which is what <a href="https://github.com/dmtrKovalenko/cypress-real-events">cypress-real-events</a> from my former co-worker at Cypress <a href="https://twitter.com/dmtrKovalenko">Dmitriy Kovalenko</a> does very nicely.</p><p><strong>Note:</strong> Losing Dmitriy is Cypress&#39; biggest mistake in my opinion. Not only he has helped me solve the <a href="/blog/my-vision-for-component-tests/" title="component testing">component testing</a> technical challenges, he absolutely rocks creating open source libraries that just work, like <a href="https://github.com/dmtrKovalenko/odiff">odiff</a> for image comparison. You know Percy.io/Applitools/Happo and other visual testing services? Dmitriy could build a company like that during his lunch break, I think.</p><p>After installing the library and importing it from the Cypress support file, I switched the test.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- .type(&#x27;Haarzuilens&#x27;, &#123;delay: 100&#125;)</span><br><span class="line">+ .realType(&#x27;Haarzuilens&#x27;)</span><br></pre></td></tr></table></figure><p>Boom, the application is working!</p><p><img src="../images/autocomplete/real-type.gif" alt="Real type is working"></p><p>Glad the library <code>cypress-real-events</code> exists. In addition to <code>cy.realType</code>, it has <code>cy.realClick</code>, <code>cy.realHover</code>, <code>cy.realPress</code>, <code>cy.realTouch</code>, <code>cy.realSwipe</code>, <code>cy.realMouseDown</code>, and <code>cy.realMouseUp</code>. If you find an app mysteriously refusing to act, try using the real thing. In the future, I am sure Cypress will expose these event mode in its core, while leaving the synthetic events as an option.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently a Cypress user asked in the online chat why an autocomplete popup does not appear when entering the search text. Previously I ha
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Sync Two Cypress Runners via Checkpoints</title>
    <link href="https://glebbahmutov.com/blog/sync-two-cypress-runners/"/>
    <id>https://glebbahmutov.com/blog/sync-two-cypress-runners/</id>
    <published>2021-06-24T04:00:00.000Z</published>
    <updated>2021-08-16T16:04:54.389Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="previous-blog-posts">Previous blog posts</span></h2><p>Start by reading the blog posts <a href="/blog/test-socketio-chat-using-cypress/" title="Test a Socket.io Chat App using Cypress">Test a Socket.io Chat App using Cypress</a> and <a href="/blog/run-two-cypress-runners/" title="Run Two Cypress Test Runners At The Same Time">Run Two Cypress Test Runners At The Same Time</a> that give previous solutions to the problem of testing a real-time Socket.io chat application. Running two Cypress test runners at the same time sounds nice but the tests do NOT wait for each other - instead they &quot;blindly&quot; run through own test specs. In this blog post I will show how to truly control two test runners via common checkpoints.</p><blockquote class="pullquote"><p>üéÅ You can find the chat application and the implemented tests in the repo <a href="https://github.com/bahmutov/cypress-socketio-chat">bahmutov/cypress-socketio-chat</a>. There is even fullstack code coverage, read the blog post <a href="#">Post not found: code-coverage-for-chat-test</a>.</p></blockquote><h2><span id="starting-two-test-runners">Starting two test runners</span></h2><p>We can start the first test runner, wait a few seconds, then start the second one. The simplest way to delay the second test runner is to launch Cypress through its <a href="https://on.cypress.io/module-api">NPM module API</a>. In our case, we will start the runners by executing the Node script <a href="https://github.com/bahmutov/cypress-socketio-chat/blob/main/cypress/pair/chat.js">chat.js</a> shown below:</p><figure class="highlight js"><figcaption><span>cypress/pair/chat.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cypress = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;starting the first Cypress&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cypress</span><br><span class="line">  .run(&#123;</span><br><span class="line">    configFile: <span class="string">&#x27;cy-first-user.json&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;First Cypress has finished&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// delay starting the second Cypress instance</span></span><br><span class="line"><span class="comment">// to avoid any XVFB race conditions</span></span><br><span class="line">wait(<span class="number">5000</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;starting the second Cypress&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> cypress</span><br><span class="line">    .run(&#123;</span><br><span class="line">      configFile: <span class="string">&#x27;cy-second-user.json&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;Second Cypress has finished&#x27;</span>)</span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> exit with the test code from both runners</span></span><br><span class="line">      process.exit(<span class="number">0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="the-need-for-checkpoints">The need for checkpoints</span></h2><p>The first runner should launch first. Let&#39;s think about the first test runner. It needs to join the chat first, validate that its &quot;joined&quot; message appears, then wait for the second user to join. How can the second test runner, executing its own spec file, know when to start? The two test runners can communicate via checkpoints.</p><figure class="highlight js"><figcaption><span>cypress/pair/first-user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// this test behaves as the first user to join the chat</span></span><br><span class="line">it(<span class="string">&#x27;chats with the second user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">&#x27;First&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> secondName = <span class="string">&#x27;Second&#x27;</span></span><br><span class="line"></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(name)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// make sure the greeting message is shown</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;#messages li i&#x27;</span>, <span class="string">`<span class="subst">$&#123;name&#125;</span> join the chat..`</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  cy.task(<span class="string">&#x27;checkpoint&#x27;</span>, <span class="string">&#x27;first user has joined&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The second test runner visits the page only after the first test runner signals that it has reached the checkpoint &quot;first user has joined&quot; and is waiting to continue.</p><figure class="highlight js"><figcaption><span>cypress/pair/second-user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// this test behaves as the second user to join the chat</span></span><br><span class="line">it(<span class="string">&#x27;chats with the first user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.task(<span class="string">&#x27;waitForCheckpoint&#x27;</span>, <span class="string">&#x27;first user has joined&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">&#x27;Second&#x27;</span></span><br><span class="line">  <span class="comment">// we are chatting with the first user</span></span><br><span class="line">  <span class="keyword">const</span> firstName = <span class="string">&#x27;First&#x27;</span></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">onBeforeLoad</span>(<span class="params">win</span>)</span> &#123;</span><br><span class="line">      cy.stub(win, <span class="string">&#x27;prompt&#x27;</span>).returns(name)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="checkpoint-implementation">Checkpoint implementation</span></h2><p>The checkpoints thus require two tasks &quot;checkpoint&quot; and &quot;waitForCheckpoint&quot;. The two test runners can communicate and set the checkpoints using ... a Socket.io server of their own. We already know how to write a Socket.io server - that&#39;s what the application server launches. We need to create another Socket.io server just for the test runners. We can use the <a href="https://github.com/bahmutov/cypress-socketio-chat/blob/main/cypress/pair/chat.js">chat.js</a> script for this.</p><figure class="highlight js"><figcaption><span>cypress/pair/chat.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cypress = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Socket.io server to let two Cypress runners communicate and wait for &quot;checkpoints&quot;</span></span><br><span class="line"><span class="comment">// https://socket.io/</span></span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>)(<span class="number">9090</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// keep the last checkpoint around</span></span><br><span class="line"><span class="comment">// even if a test runner joins later, it</span></span><br><span class="line"><span class="comment">// should still receive it right away</span></span><br><span class="line"><span class="keyword">let</span> lastCheckpoint</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">&#x27;connection&#x27;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;chat new connection&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (lastCheckpoint) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;sending the last checkpoint &quot;%s&quot;&#x27;</span>, lastCheckpoint)</span><br><span class="line">    socket.emit(<span class="string">&#x27;checkpoint&#x27;</span>, lastCheckpoint)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  socket.on(<span class="string">&#x27;disconnect&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;disconnected&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  socket.on(<span class="string">&#x27;checkpoint&#x27;</span>, <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;chat checkpoint: &quot;%s&quot;&#x27;</span>, name)</span><br><span class="line">    lastCheckpoint = name</span><br><span class="line">    io.emit(<span class="string">&#x27;checkpoint&#x27;</span>, name)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;starting the first Cypress&#x27;</span>)</span><br><span class="line"><span class="comment">// rest of Cypress starting code</span></span><br></pre></td></tr></table></figure><p>When the apps run, they communicate via their own Socket.io server running on port 8080, while the test runners broadcast checkpoints via their own Socket.io server running on port 9090.</p><p><img src="../images/checkpoints/chat-server.png" alt="Test runners communicate via their own Socket.io server"></p><p>The plugins file can be shared among the test runners. The plugin file implements the <code>checkpoint</code> and <code>waitForCheckpoint</code> tasks, and acts as a client to the Socket.io server running on port 9090.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Socket.io client to allow Cypress itself</span></span><br><span class="line"><span class="comment">// to communicate with a central &quot;checkpoint&quot; server</span></span><br><span class="line"><span class="comment">// https://socket.io/docs/v4/client-initialization/</span></span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">&#x27;socket.io-client&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// this socket will be used to sync Cypress instance</span></span><br><span class="line">  <span class="comment">// to another Cypress instance. We can create it right away</span></span><br><span class="line">  <span class="keyword">const</span> cySocket = io(<span class="string">&#x27;http://localhost:9090&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// receiving the checkpoint name reached by any test runner</span></span><br><span class="line">  <span class="keyword">let</span> checkpointName</span><br><span class="line">  cySocket.on(<span class="string">&#x27;checkpoint&#x27;</span>, <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;current checkpoint %s&#x27;</span>, name)</span><br><span class="line">    checkpointName = name</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  on(<span class="string">&#x27;task&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// tasks for syncing multiple Cypress instances together</span></span><br><span class="line">    <span class="function"><span class="title">checkpoint</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;emitting checkpoint name &quot;%s&quot;&#x27;</span>, name)</span><br><span class="line">      cySocket.emit(<span class="string">&#x27;checkpoint&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">waitForCheckpoint</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;waiting for checkpoint &quot;%s&quot;&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> set maximum waiting time</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> i = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;checking, current checkpoint &quot;%s&quot;&#x27;</span>, checkpointName)</span><br><span class="line">          <span class="keyword">if</span> (checkpointName === name) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;reached checkpoint &quot;%s&quot;&#x27;</span>, name)</span><br><span class="line">            <span class="built_in">clearInterval</span>(i)</span><br><span class="line">            resolve(name)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When we run the two test runners, they dance with each other at the expected sequence.</p><p><img src="../images/checkpoints/runners.png" alt="Two test runners have finished the test"></p><p>The terminal output shows the checkpoint communication.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">emitting checkpoint name &quot;first user has joined&quot;</span><br><span class="line">chat checkpoint: &quot;first user has joined&quot;</span><br><span class="line">current checkpoint first user has joined</span><br><span class="line">current checkpoint first user has joined</span><br><span class="line">waiting for checkpoint &quot;second user has joined&quot;</span><br><span class="line">checking, current checkpoint &quot;first user has joined&quot;</span><br><span class="line">checking, current checkpoint &quot;first user has joined&quot;</span><br><span class="line">checking, current checkpoint &quot;first user has joined&quot;</span><br><span class="line">checking, current checkpoint &quot;first user has joined&quot;</span><br><span class="line">checking, current checkpoint &quot;first user has joined&quot;</span><br><span class="line">...</span><br><span class="line">checking, current checkpoint &quot;first user has joined&quot;</span><br><span class="line">reached checkpoint &quot;first user has joined&quot;</span><br><span class="line">emitting checkpoint name &quot;second user has joined&quot;</span><br><span class="line">chat checkpoint: &quot;second user has joined&quot;</span><br><span class="line">current checkpoint second user has joined</span><br><span class="line">current checkpoint second user has joined</span><br><span class="line">checking, current checkpoint &quot;second user has joined&quot;</span><br><span class="line">reached checkpoint &quot;second user has joined&quot;</span><br><span class="line">emitting checkpoint name &quot;second user saw glad to be here&quot;</span><br><span class="line">chat checkpoint: &quot;second user saw glad to be here&quot;</span><br><span class="line">current checkpoint second user saw glad to be here</span><br><span class="line">current checkpoint second user saw glad to be here</span><br><span class="line">waiting for checkpoint &quot;second user saw glad to be here&quot;</span><br><span class="line">checking, current checkpoint &quot;second user saw glad to be here&quot;</span><br><span class="line">reached checkpoint &quot;second user saw glad to be here&quot;</span><br></pre></td></tr></table></figure><p>Beautiful.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;previous-blog-posts&quot;&gt;Previous blog posts&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Start by reading the blog posts &lt;a href=&quot;/blog/test-socketio-chat-using
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Sanity Test for Landing Page</title>
    <link href="https://glebbahmutov.com/blog/sanity-test/"/>
    <id>https://glebbahmutov.com/blog/sanity-test/</id>
    <published>2021-06-23T04:00:00.000Z</published>
    <updated>2021-06-23T18:41:18.682Z</updated>
    
    <content type="html"><![CDATA[<p>If you browser the web the same way I do, you probably keep your browser DevTools console open. I often see errors even on the landing pages. Things like application reference errors and 404 for static resources not loading. In this blog post I will show how to quickly catch these errors via a safe sanity test. One could run these tests after every deploy to make sure the site works.</p><blockquote class="pullquote"><p>üéÅ Find the source code and the tests in the repo <a href="https://github.com/bahmutov/cypress-sanity-test-example">bahmutov/cypress-sanity-test-example</a>.</p></blockquote><p>I grabbed an example static landing page from <a href="https://cruip.com/demos/solid/">cruip.com</a> via <a href="https://dev.to/davidepacilio/40-free-html-landing-page-templates-3gfp">40 Free HTML landing page templates</a>. Then I have introduced two errors into the page: a JavaScript reference error, and a 404 by changing a line in <a href="./public/index.html">public/index.html</a></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- &lt;script src=&quot;https://unpkg.com/scrollreveal@4.0.0/dist/scrollreveal.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="addition">+ &lt;script src=&quot;https://unpkg.com/scrollreveal@1.0.0/dist/scrollreveal.min.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/sanity/errors.png" alt="The landing page errors"></p><p>Let&#39;s catch those errors by using tests.</p><h2><span id="tests">Tests</span></h2><p>You can find all tests in <a href="https://github.com/bahmutov/cypress-sanity-test-example/blob/main/cypress/integration/spec.js">cypress/integration/spec.js</a> file. To verify the failing tests, I run the tests using <a href="https://github.com/bahmutov/cypress-expect">cypress-expect</a> utility.</p><h3><span id="catching-errors">Catching errors</span></h3><p>Cypress fails the test by default if it detects application errors or unhandled rejected promises, see <a href="https://docs.cypress.io/">docs.cypress.io</a>. Just visiting the page will catch the reference error.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;catches page exceptions&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/sanity/reference-error.png" alt="Reference error fails the test"></p><h3><span id="ignoring-errors">Ignoring errors</span></h3><p>If you want to ignore an application error, define a listener</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;ignores all page errors&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://on.cypress.io/catalog-of-events#Uncaught-Exceptions</span></span><br><span class="line">  cy.on(<span class="string">&#x27;uncaught:exception&#x27;</span>, <span class="function">() =&gt;</span> <span class="literal">false</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/sanity/ignore-error.png" alt="Ignoring app error"></p><p>You can filter errors and only ignore certain ones.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;ignores specific error&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.on(<span class="string">&#x27;uncaught:exception&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// https://on.cypress.io/catalog-of-events#Uncaught-Exceptions</span></span><br><span class="line">    <span class="keyword">return</span> !e.message.includes(<span class="string">&#x27;ScrollReveal is not defined&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> watch filterig of application errors in this video <a href="https://www.youtube.com/watch?v=DwVezYq4zPM">Filtering app errors in Cypress tests</a>.</p><h3><span id="catching-404">Catching 404</span></h3><p>Cypress can spy on network calls using <a href="https://on.cypress.io/intercept">cy.intercept</a> command. We can see if any of the responses are 404. First, we can spy on the single problematic request.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;detects a single 404&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.intercept(<span class="string">&#x27;**/scrollreveal.min.js&#x27;</span>).as(<span class="string">&#x27;resource&#x27;</span>)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.wait(<span class="string">&#x27;@resource&#x27;</span>).its(<span class="string">&#x27;response.statusCode&#x27;</span>).should(<span class="string">&#x27;be.lt&#x27;</span>, <span class="number">400</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/sanity/404.png" alt="The resource is not found"></p><p>We can also confirm that every resource is successful</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;detects any 404&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// https://on.cypress.io/intercept</span></span><br><span class="line">  cy.intercept(<span class="string">&#x27;*&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span></span><br><span class="line">    <span class="comment">// assert the response</span></span><br><span class="line">    req.continue(<span class="function">(<span class="params">res</span>) =&gt;</span> expect(res.statusCode, req.url).to.be.lt(<span class="number">400</span>)),</span><br><span class="line">  )</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="../images/sanity/all.png" alt="Checking every resource status code"></p><p>Nice! We can quickly run the above tests against the deployed environment to make sure our users do not suffer from these mistakes.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you browser the web the same way I do, you probably keep your browser DevTools console open. I often see errors even on the landing pa
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
</feed>
